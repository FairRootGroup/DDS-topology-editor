!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=144)}([function(e,t,r){"use strict";e.exports=r(146)},function(e,t,r){"use strict";r.r(t),function(e,n){r.d(t,"$mobx",(function(){return C})),r.d(t,"FlowCancellationError",(function(){return Mt})),r.d(t,"IDerivationState",(function(){return J})),r.d(t,"ObservableMap",(function(){return yr})),r.d(t,"ObservableSet",(function(){return Pr})),r.d(t,"Reaction",(function(){return He})),r.d(t,"_allowStateChanges",(function(){return ge})),r.d(t,"_allowStateChangesInsideComputed",(function(){return Ce})),r.d(t,"_allowStateReadsEnd",(function(){return de})),r.d(t,"_allowStateReadsStart",(function(){return pe})),r.d(t,"_endAction",(function(){return Pe})),r.d(t,"_getAdministration",(function(){return Ir})),r.d(t,"_getGlobalState",(function(){return We})),r.d(t,"_interceptReads",(function(){return Rt})),r.d(t,"_isComputingDerivation",(function(){return ie})),r.d(t,"_resetGlobalState",(function(){return Ke})),r.d(t,"_startAction",(function(){return Oe})),r.d(t,"action",(function(){return ot})),r.d(t,"autorun",(function(){return ut})),r.d(t,"comparer",(function(){return A})),r.d(t,"computed",(function(){return re})),r.d(t,"configure",(function(){return Et})),r.d(t,"createAtom",(function(){return R})),r.d(t,"decorate",(function(){return ht})),r.d(t,"entries",(function(){return Kt})),r.d(t,"extendObservable",(function(){return bt})),r.d(t,"flow",(function(){return Tt})),r.d(t,"get",(function(){return qt})),r.d(t,"getAtom",(function(){return Lr})),r.d(t,"getDebugName",(function(){return kr})),r.d(t,"getDependencyTree",(function(){return vt})),r.d(t,"getObserverTree",(function(){return Pt})),r.d(t,"has",(function(){return jt})),r.d(t,"intercept",(function(){return At})),r.d(t,"isAction",(function(){return it})),r.d(t,"isArrayLike",(function(){return v})),r.d(t,"isBoxedObservable",(function(){return we})),r.d(t,"isComputed",(function(){return It})),r.d(t,"isComputedProp",(function(){return kt})),r.d(t,"isFlowCancellationError",(function(){return Ct})),r.d(t,"isObservable",(function(){return Ut})),r.d(t,"isObservableArray",(function(){return hr})),r.d(t,"isObservableMap",(function(){return vr})),r.d(t,"isObservableObject",(function(){return Ar})),r.d(t,"isObservableProp",(function(){return xt})),r.d(t,"isObservableSet",(function(){return gr})),r.d(t,"keys",(function(){return St})),r.d(t,"observable",(function(){return Q})),r.d(t,"observe",(function(){return Ft})),r.d(t,"onBecomeObserved",(function(){return ft})),r.d(t,"onBecomeUnobserved",(function(){return pt})),r.d(t,"onReactionError",(function(){return $e})),r.d(t,"reaction",(function(){return ct})),r.d(t,"remove",(function(){return zt})),r.d(t,"runInAction",(function(){return at})),r.d(t,"set",(function(){return Nt})),r.d(t,"spy",(function(){return et})),r.d(t,"toJS",(function(){return Ht})),r.d(t,"trace",(function(){return $t})),r.d(t,"transaction",(function(){return Qt})),r.d(t,"untracked",(function(){return se})),r.d(t,"values",(function(){return Wt})),r.d(t,"when",(function(){return Xt}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};var a=function(){return(a=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function i(e){var t="function"==typeof Symbol&&e[Symbol.iterator],r=0;return t?t.call(e):{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}function l(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i}function u(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(l(arguments[t]));return e}var _=[];Object.freeze(_);var s={};function c(){return++Se.mobxGuid}function f(e){throw p(!1,e),"X"}function p(e,t){if(!e)throw new Error("[mobx] "+(t||"An invariant failed, however the error is obfuscated because this is a production build."))}Object.freeze(s);function d(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var E=function(){};function h(e){return null!==e&&"object"==typeof e}function b(e){if(null===e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return t===Object.prototype||null===t}function m(e,t,r){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0,value:r})}function y(e,t){var r="isMobX"+e;return t.prototype[r]=!0,function(e){return h(e)&&!0===e[r]}}function v(e){return Array.isArray(e)||hr(e)}function O(e){return e instanceof Map}function P(e){return e instanceof Set}function g(e){var t=new Set;for(var r in e)t.add(r);return Object.getOwnPropertySymbols(e).forEach((function(r){Object.getOwnPropertyDescriptor(e,r).enumerable&&t.add(r)})),Array.from(t)}function D(e){return e&&e.toString?e.toString():new String(e).toString()}function M(e){return null===e?null:"object"==typeof e?""+e:e}var C=Symbol("mobx administration"),T=function(){function e(e){void 0===e&&(e="Atom@"+c()),this.name=e,this.isPendingUnobservation=!1,this.isBeingObserved=!1,this.observers=new Set,this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=J.NOT_TRACKING}return e.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(e){return e()}))},e.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(e){return e()}))},e.prototype.reportObserved=function(){return Ve(this)},e.prototype.reportChanged=function(){qe(),function(e){if(e.lowestObserverState===J.STALE)return;e.lowestObserverState=J.STALE,e.observers.forEach((function(t){t.dependenciesState===J.UP_TO_DATE&&(t.isTracing!==Z.NONE&&Ge(t,e),t.onBecomeStale()),t.dependenciesState=J.STALE}))}(this),Fe()},e.prototype.toString=function(){return this.name},e}(),w=y("Atom",T);function R(e,t,r){void 0===t&&(t=E),void 0===r&&(r=E);var n=new T(e);return t!==E&&ft(n,t),r!==E&&pt(n,r),n}var A={identity:function(e,t){return e===t},structural:function(e,t){return Ur(e,t)},default:function(e,t){return Object.is(e,t)},shallow:function(e,t){return Ur(e,t,1)}},L=Symbol("mobx did run lazy initializers"),I=Symbol("mobx pending decorators"),k={},B={};function U(e,t){var r=t?k:B;return r[e]||(r[e]={configurable:!0,enumerable:t,get:function(){return x(this),this[e]},set:function(t){x(this),this[e]=t}})}function x(e){var t,r;if(!0!==e[L]){var n=e[I];if(n){m(e,L,!0);var o=u(Object.getOwnPropertySymbols(n),Object.keys(n));try{for(var a=i(o),l=a.next();!l.done;l=a.next()){var _=n[l.value];_.propertyCreator(e,_.prop,_.descriptor,_.decoratorTarget,_.decoratorArguments)}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}}}}function S(e,t){return function(){var r,n=function(n,o,i,l){if(!0===l)return t(n,o,i,n,r),null;if(!Object.prototype.hasOwnProperty.call(n,I)){var u=n[I];m(n,I,a({},u))}return n[I][o]={prop:o,propertyCreator:t,descriptor:i,decoratorTarget:n,decoratorArguments:r},U(o,e)};return W(arguments)?(r=_,n.apply(null,arguments)):(r=Array.prototype.slice.call(arguments),n)}}function W(e){return(2===e.length||3===e.length)&&("string"==typeof e[1]||"symbol"==typeof e[1])||4===e.length&&!0===e[3]}function K(e,t,r){return Ut(e)?e:Array.isArray(e)?Q.array(e,{name:r}):b(e)?Q.object(e,void 0,{name:r}):O(e)?Q.map(e,{name:r}):P(e)?Q.set(e,{name:r}):e}function N(e){return e}function z(t){p(t);var r=S(!0,(function(e,r,n,o,a){var i=n?n.initializer?n.initializer.call(e):n.value:void 0;Mr(e).addObservableProp(r,i,t)})),n=(void 0!==e&&e.env,r);return n.enhancer=t,n}var j={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function q(e){return null==e?j:"string"==typeof e?{name:e,deep:!0,proxy:!0}:e}Object.freeze(j);var F=z(K),V=z((function(e,t,r){return null==e||Ar(e)||hr(e)||vr(e)||gr(e)?e:Array.isArray(e)?Q.array(e,{name:r,deep:!1}):b(e)?Q.object(e,void 0,{name:r,deep:!1}):O(e)?Q.map(e,{name:r,deep:!1}):P(e)?Q.set(e,{name:r,deep:!1}):f(!1)})),G=z(N),H=z((function(e,t,r){return Ur(e,t)?t:e}));function $(e){return e.defaultDecorator?e.defaultDecorator.enhancer:!1===e.deep?N:K}var Y={box:function(e,t){arguments.length>2&&X("box");var r=q(t);return new Te(e,$(r),r.name,!0,r.equals)},array:function(e,t){arguments.length>2&&X("array");var r=q(t);return cr(e,$(r),r.name)},map:function(e,t){arguments.length>2&&X("map");var r=q(t);return new yr(e,$(r),r.name)},set:function(e,t){arguments.length>2&&X("set");var r=q(t);return new Pr(e,$(r),r.name)},object:function(e,t,r){"string"==typeof arguments[1]&&X("object");var n=q(r);if(!1===n.proxy)return bt({},e,t,n);var o=mt(n),a=bt({},void 0,void 0,n),i=nr(a);return yt(i,e,t,o),i},ref:G,shallow:V,deep:F,struct:H},Q=function(e,t,r){if("string"==typeof arguments[1]||"symbol"==typeof arguments[1])return F.apply(null,arguments);if(Ut(e))return e;var n=b(e)?Q.object(e,t,r):Array.isArray(e)?Q.array(e,t):O(e)?Q.map(e,t):P(e)?Q.set(e,t):e;if(n!==e)return n;f(!1)};function X(e){f("Expected one or two arguments to observable."+e+". Did you accidentally try to use observable."+e+" as decorator?")}Object.keys(Y).forEach((function(e){return Q[e]=Y[e]}));var J,Z,ee=S(!1,(function(e,t,r,n,o){var i=r.get,l=r.set,u=o[0]||{};Mr(e).addComputedProp(e,t,a({get:i,set:l,context:e},u))})),te=ee({equals:A.structural}),re=function(e,t,r){if("string"==typeof t)return ee.apply(null,arguments);if(null!==e&&"object"==typeof e&&1===arguments.length)return ee.apply(null,arguments);var n="object"==typeof t?t:{};return n.get=e,n.set="function"==typeof t?t:n.set,n.name=n.name||e.name||"",new Re(n)};re.struct=te,function(e){e[e.NOT_TRACKING=-1]="NOT_TRACKING",e[e.UP_TO_DATE=0]="UP_TO_DATE",e[e.POSSIBLY_STALE=1]="POSSIBLY_STALE",e[e.STALE=2]="STALE"}(J||(J={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Z||(Z={}));var ne=function(e){this.cause=e};function oe(e){return e instanceof ne}function ae(e){switch(e.dependenciesState){case J.UP_TO_DATE:return!1;case J.NOT_TRACKING:case J.STALE:return!0;case J.POSSIBLY_STALE:for(var t=pe(!0),r=ce(),n=e.observing,o=n.length,a=0;a<o;a++){var i=n[a];if(Ae(i)){if(Se.disableErrorBoundaries)i.get();else try{i.get()}catch(e){return fe(r),de(t),!0}if(e.dependenciesState===J.STALE)return fe(r),de(t),!0}}return Ee(e),fe(r),de(t),!1}}function ie(){return null!==Se.trackingDerivation}function le(e){var t=e.observers.size>0;Se.computationDepth>0&&t&&f(!1),Se.allowStateChanges||!t&&"strict"!==Se.enforceActions||f(!1)}function ue(e,t,r){var n=pe(!0);Ee(e),e.newObserving=new Array(e.observing.length+100),e.unboundDepsCount=0,e.runId=++Se.runId;var o,a=Se.trackingDerivation;if(Se.trackingDerivation=e,!0===Se.disableErrorBoundaries)o=t.call(r);else try{o=t.call(r)}catch(e){o=new ne(e)}return Se.trackingDerivation=a,function(e){for(var t=e.observing,r=e.observing=e.newObserving,n=J.UP_TO_DATE,o=0,a=e.unboundDepsCount,i=0;i<a;i++){0===(l=r[i]).diffValue&&(l.diffValue=1,o!==i&&(r[o]=l),o++),l.dependenciesState>n&&(n=l.dependenciesState)}r.length=o,e.newObserving=null,a=t.length;for(;a--;){0===(l=t[a]).diffValue&&ze(l,e),l.diffValue=0}for(;o--;){var l;1===(l=r[o]).diffValue&&(l.diffValue=0,Ne(l,e))}n!==J.UP_TO_DATE&&(e.dependenciesState=n,e.onBecomeStale())}(e),de(n),o}function _e(e){var t=e.observing;e.observing=[];for(var r=t.length;r--;)ze(t[r],e);e.dependenciesState=J.NOT_TRACKING}function se(e){var t=ce();try{return e()}finally{fe(t)}}function ce(){var e=Se.trackingDerivation;return Se.trackingDerivation=null,e}function fe(e){Se.trackingDerivation=e}function pe(e){var t=Se.allowStateReads;return Se.allowStateReads=e,t}function de(e){Se.allowStateReads=e}function Ee(e){if(e.dependenciesState!==J.UP_TO_DATE){e.dependenciesState=J.UP_TO_DATE;for(var t=e.observing,r=t.length;r--;)t[r].lowestObserverState=J.UP_TO_DATE}}var he=0,be=1,me=Object.getOwnPropertyDescriptor((function(){}),"name");me&&me.configurable;function ye(e,t,r){var n=function(){return ve(e,t,r||this,arguments)};return n.isMobxAction=!0,n}function ve(e,t,r,n){var o=Oe(e,r,n);try{return t.apply(r,n)}catch(e){throw o.error=e,e}finally{Pe(o)}}function Oe(e,t,r){var n=0,o=ce();qe();var a={prevDerivation:o,prevAllowStateChanges:De(!0),prevAllowStateReads:pe(!0),notifySpy:!1,startTime:n,actionId:be++,parentActionId:he};return he=a.actionId,a}function Pe(e){he!==e.actionId&&f("invalid action stack. did you forget to finish an action?"),he=e.parentActionId,void 0!==e.error&&(Se.suppressReactionErrors=!0),Me(e.prevAllowStateChanges),de(e.prevAllowStateReads),Fe(),fe(e.prevDerivation),e.notifySpy,Se.suppressReactionErrors=!1}function ge(e,t){var r,n=De(e);try{r=t()}finally{Me(n)}return r}function De(e){var t=Se.allowStateChanges;return Se.allowStateChanges=e,t}function Me(e){Se.allowStateChanges=e}function Ce(e){var t,r=Se.computationDepth;Se.computationDepth=0;try{t=e()}finally{Se.computationDepth=r}return t}var Te=function(e){function t(t,r,n,o,a){void 0===n&&(n="ObservableValue@"+c()),void 0===o&&(o=!0),void 0===a&&(a=A.default);var i=e.call(this,n)||this;return i.enhancer=r,i.name=n,i.equals=a,i.hasUnreportedChange=!1,i.value=r(t,void 0,n),i}return function(e,t){function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.prototype.set=function(e){this.value;if((e=this.prepareNewValue(e))!==Se.UNCHANGED){0,this.setNewValue(e)}},t.prototype.prepareNewValue=function(e){if(le(this),or(this)){var t=ir(this,{object:this,type:"update",newValue:e});if(!t)return Se.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value,this.name),this.equals(this.value,e)?Se.UNCHANGED:e},t.prototype.setNewValue=function(e){var t=this.value;this.value=e,this.reportChanged(),lr(this)&&_r(this,{type:"update",object:this,newValue:e,oldValue:t})},t.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},t.prototype.intercept=function(e){return ar(this,e)},t.prototype.observe=function(e,t){return t&&e({object:this,type:"update",newValue:this.value,oldValue:void 0}),ur(this,e)},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.value+"]"},t.prototype.valueOf=function(){return M(this.get())},t.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},t}(T),we=y("ObservableValue",Te),Re=function(){function e(e){this.dependenciesState=J.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isBeingObserved=!1,this.isPendingUnobservation=!1,this.observers=new Set,this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=J.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+c(),this.value=new ne(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=Z.NONE,p(e.get,"missing option for computed: get"),this.derivation=e.get,this.name=e.name||"ComputedValue@"+c(),e.set&&(this.setter=ye(this.name+"-setter",e.set)),this.equals=e.equals||(e.compareStructural||e.struct?A.structural:A.default),this.scope=e.context,this.requiresReaction=!!e.requiresReaction,this.keepAlive=!!e.keepAlive}return e.prototype.onBecomeStale=function(){!function(e){if(e.lowestObserverState!==J.UP_TO_DATE)return;e.lowestObserverState=J.POSSIBLY_STALE,e.observers.forEach((function(t){t.dependenciesState===J.UP_TO_DATE&&(t.dependenciesState=J.POSSIBLY_STALE,t.isTracing!==Z.NONE&&Ge(t,e),t.onBecomeStale())}))}(this)},e.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(e){return e()}))},e.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(e){return e()}))},e.prototype.get=function(){this.isComputing&&f("Cycle detected in computation "+this.name+": "+this.derivation),0!==Se.inBatch||0!==this.observers.size||this.keepAlive?(Ve(this),ae(this)&&this.trackAndCompute()&&function(e){if(e.lowestObserverState===J.STALE)return;e.lowestObserverState=J.STALE,e.observers.forEach((function(t){t.dependenciesState===J.POSSIBLY_STALE?t.dependenciesState=J.STALE:t.dependenciesState===J.UP_TO_DATE&&(e.lowestObserverState=J.UP_TO_DATE)}))}(this)):ae(this)&&(this.warnAboutUntrackedRead(),qe(),this.value=this.computeValue(!1),Fe());var e=this.value;if(oe(e))throw e.cause;return e},e.prototype.peek=function(){var e=this.computeValue(!1);if(oe(e))throw e.cause;return e},e.prototype.set=function(e){if(this.setter){p(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,e)}finally{this.isRunningSetter=!1}}else p(!1,!1)},e.prototype.trackAndCompute=function(){var e=this.value,t=this.dependenciesState===J.NOT_TRACKING,r=this.computeValue(!0),n=t||oe(e)||oe(r)||!this.equals(e,r);return n&&(this.value=r),n},e.prototype.computeValue=function(e){var t;if(this.isComputing=!0,Se.computationDepth++,e)t=ue(this,this.derivation,this.scope);else if(!0===Se.disableErrorBoundaries)t=this.derivation.call(this.scope);else try{t=this.derivation.call(this.scope)}catch(e){t=new ne(e)}return Se.computationDepth--,this.isComputing=!1,t},e.prototype.suspend=function(){this.keepAlive||(_e(this),this.value=void 0)},e.prototype.observe=function(e,t){var r=this,n=!0,o=void 0;return ut((function(){var a=r.get();if(!n||t){var i=ce();e({type:"update",object:r,newValue:a,oldValue:o}),fe(i)}n=!1,o=a}))},e.prototype.warnAboutUntrackedRead=function(){},e.prototype.toJSON=function(){return this.get()},e.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},e.prototype.valueOf=function(){return M(this.get())},e.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},e}(),Ae=y("ComputedValue",Re),Le=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","allowStateReads","disableErrorBoundaries","runId","UNCHANGED"],Ie=function(){this.version=5,this.UNCHANGED={},this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.allowStateReads=!0,this.enforceActions=!1,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.computedConfigurable=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1},ke={};function Be(){return"undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:ke}var Ue=!0,xe=!1,Se=function(){var e=Be();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(Ue=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new Ie).version&&(Ue=!1),Ue?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new Ie):(setTimeout((function(){xe||f("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`")}),1),new Ie)}();function We(){return Se}function Ke(){var e=new Ie;for(var t in e)-1===Le.indexOf(t)&&(Se[t]=e[t]);Se.allowStateChanges=!Se.enforceActions}function Ne(e,t){e.observers.add(t),e.lowestObserverState>t.dependenciesState&&(e.lowestObserverState=t.dependenciesState)}function ze(e,t){e.observers.delete(t),0===e.observers.size&&je(e)}function je(e){!1===e.isPendingUnobservation&&(e.isPendingUnobservation=!0,Se.pendingUnobservations.push(e))}function qe(){Se.inBatch++}function Fe(){if(0==--Se.inBatch){Qe();for(var e=Se.pendingUnobservations,t=0;t<e.length;t++){var r=e[t];r.isPendingUnobservation=!1,0===r.observers.size&&(r.isBeingObserved&&(r.isBeingObserved=!1,r.onBecomeUnobserved()),r instanceof Re&&r.suspend())}Se.pendingUnobservations=[]}}function Ve(e){var t=Se.trackingDerivation;return null!==t?(t.runId!==e.lastAccessedBy&&(e.lastAccessedBy=t.runId,t.newObserving[t.unboundDepsCount++]=e,e.isBeingObserved||(e.isBeingObserved=!0,e.onBecomeObserved())),!0):(0===e.observers.size&&Se.inBatch>0&&je(e),!1)}function Ge(e,t){if(console.log("[mobx.trace] '"+e.name+"' is invalidated due to a change in: '"+t.name+"'"),e.isTracing===Z.BREAK){var r=[];!function e(t,r,n){if(r.length>=1e3)return void r.push("(and many more)");r.push(""+new Array(n).join("\t")+t.name),t.dependencies&&t.dependencies.forEach((function(t){return e(t,r,n+1)}))}(vt(e),r,1),new Function("debugger;\n/*\nTracing '"+e.name+"'\n\nYou are entering this break point because derivation '"+e.name+"' is being traced and '"+t.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(e instanceof Re?e.derivation.toString().replace(/[*]\//g,"/"):"")+"\n\nThe dependencies for this derivation are:\n\n"+r.join("\n")+"\n*/\n    ")()}}var He=function(){function e(e,t,r,n){void 0===e&&(e="Reaction@"+c()),void 0===n&&(n=!1),this.name=e,this.onInvalidate=t,this.errorHandler=r,this.requiresObservable=n,this.observing=[],this.newObserving=[],this.dependenciesState=J.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+c(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=Z.NONE}return e.prototype.onBecomeStale=function(){this.schedule()},e.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,Se.pendingReactions.push(this),Qe())},e.prototype.isScheduled=function(){return this._isScheduled},e.prototype.runReaction=function(){if(!this.isDisposed){if(qe(),this._isScheduled=!1,ae(this)){this._isTrackPending=!0;try{this.onInvalidate(),this._isTrackPending}catch(e){this.reportExceptionInDerivation(e)}}Fe()}},e.prototype.track=function(e){if(!this.isDisposed){qe();0,this._isRunning=!0;var t=ue(this,e,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&_e(this),oe(t)&&this.reportExceptionInDerivation(t.cause),Fe()}},e.prototype.reportExceptionInDerivation=function(e){var t=this;if(this.errorHandler)this.errorHandler(e,this);else{if(Se.disableErrorBoundaries)throw e;var r="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this+"'";Se.suppressReactionErrors?console.warn("[mobx] (error in reaction '"+this.name+"' suppressed, fix error of causing action below)"):console.error(r,e),Se.globalReactionErrorHandlers.forEach((function(r){return r(e,t)}))}},e.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(qe(),_e(this),Fe()))},e.prototype.getDisposer=function(){var e=this.dispose.bind(this);return e[C]=this,e},e.prototype.toString=function(){return"Reaction["+this.name+"]"},e.prototype.trace=function(e){void 0===e&&(e=!1),$t(this,e)},e}();function $e(e){return Se.globalReactionErrorHandlers.push(e),function(){var t=Se.globalReactionErrorHandlers.indexOf(e);t>=0&&Se.globalReactionErrorHandlers.splice(t,1)}}var Ye=function(e){return e()};function Qe(){Se.inBatch>0||Se.isRunningReactions||Ye(Xe)}function Xe(){Se.isRunningReactions=!0;for(var e=Se.pendingReactions,t=0;e.length>0;){100==++t&&(console.error("Reaction doesn't converge to a stable state after 100 iterations. Probably there is a cycle in the reactive function: "+e[0]),e.splice(0));for(var r=e.splice(0),n=0,o=r.length;n<o;n++)r[n].runReaction()}Se.isRunningReactions=!1}var Je=y("Reaction",He);function Ze(e){var t=Ye;Ye=function(r){return e((function(){return t(r)}))}}function et(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}}function tt(){f(!1)}function rt(e){return function(t,r,n){if(n){if(n.value)return{value:ye(e,n.value),enumerable:!1,configurable:!0,writable:!0};var o=n.initializer;return{enumerable:!1,configurable:!0,writable:!0,initializer:function(){return ye(e,o.call(this))}}}return nt(e).apply(this,arguments)}}function nt(e){return function(t,r,n){Object.defineProperty(t,r,{configurable:!0,enumerable:!1,get:function(){},set:function(t){m(this,r,ot(e,t))}})}}var ot=function(e,t,r,n){return 1===arguments.length&&"function"==typeof e?ye(e.name||"<unnamed action>",e):2===arguments.length&&"function"==typeof t?ye(e,t):1===arguments.length&&"string"==typeof e?rt(e):!0!==n?rt(t).apply(null,arguments):void m(e,t,ye(e.name||t,r.value,this))};function at(e,t){return ve("string"==typeof e?e:e.name||"<unnamed action>","function"==typeof e?e:t,this,void 0)}function it(e){return"function"==typeof e&&!0===e.isMobxAction}function lt(e,t,r){m(e,t,ye(t,r.bind(e)))}function ut(e,t){void 0===t&&(t=s);var r,n=t&&t.name||e.name||"Autorun@"+c();if(!t.scheduler&&!t.delay)r=new He(n,(function(){this.track(i)}),t.onError,t.requiresObservable);else{var o=st(t),a=!1;r=new He(n,(function(){a||(a=!0,o((function(){a=!1,r.isDisposed||r.track(i)})))}),t.onError,t.requiresObservable)}function i(){e(r)}return r.schedule(),r.getDisposer()}ot.bound=function(e,t,r,n){return!0===n?(lt(e,t,r.value),null):r?{configurable:!0,enumerable:!1,get:function(){return lt(this,t,r.value||r.initializer.call(this)),this[t]},set:tt}:{enumerable:!1,configurable:!0,set:function(e){lt(this,t,e)},get:function(){}}};var _t=function(e){return e()};function st(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:_t}function ct(e,t,r){void 0===r&&(r=s);var n,o,a,i=r.name||"Reaction@"+c(),l=ot(i,r.onError?(n=r.onError,o=t,function(){try{return o.apply(this,arguments)}catch(e){n.call(this,e)}}):t),u=!r.scheduler&&!r.delay,_=st(r),f=!0,p=!1,d=r.compareStructural?A.structural:r.equals||A.default,E=new He(i,(function(){f||u?h():p||(p=!0,_(h))}),r.onError,r.requiresObservable);function h(){if(p=!1,!E.isDisposed){var t=!1;E.track((function(){var r=e(E);t=f||!d(a,r),a=r})),f&&r.fireImmediately&&l(a,E),f||!0!==t||l(a,E),f&&(f=!1)}}return E.schedule(),E.getDisposer()}function ft(e,t,r){return dt("onBecomeObserved",e,t,r)}function pt(e,t,r){return dt("onBecomeUnobserved",e,t,r)}function dt(e,t,r,n){var o="function"==typeof n?Lr(t,r):Lr(t),a="function"==typeof n?n:r,i=e+"Listeners";return o[i]?o[i].add(a):o[i]=new Set([a]),"function"!=typeof o[e]?f(!1):function(){var e=o[i];e&&(e.delete(a),0===e.size&&delete o[i])}}function Et(e){var t=e.enforceActions,r=e.computedRequiresReaction,n=e.computedConfigurable,o=e.disableErrorBoundaries,a=e.reactionScheduler,i=e.reactionRequiresObservable,l=e.observableRequiresReaction;if(!0===e.isolateGlobalState&&((Se.pendingReactions.length||Se.inBatch||Se.isRunningReactions)&&f("isolateGlobalState should be called before MobX is running any reactions"),xe=!0,Ue&&(0==--Be().__mobxInstanceCount&&(Be().__mobxGlobals=void 0),Se=new Ie)),void 0!==t){var u=void 0;switch(t){case!0:case"observed":u=!0;break;case!1:case"never":u=!1;break;case"strict":case"always":u="strict";break;default:f("Invalid value for 'enforceActions': '"+t+"', expected 'never', 'always' or 'observed'")}Se.enforceActions=u,Se.allowStateChanges=!0!==u&&"strict"!==u}void 0!==r&&(Se.computedRequiresReaction=!!r),void 0!==i&&(Se.reactionRequiresObservable=!!i),void 0!==l&&(Se.observableRequiresReaction=!!l,Se.allowStateReads=!Se.observableRequiresReaction),void 0!==n&&(Se.computedConfigurable=!!n),void 0!==o&&(!0===o&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled."),Se.disableErrorBoundaries=!!o),a&&Ze(a)}function ht(e,t){var r="function"==typeof e?e.prototype:e,n=function(e){var n=t[e];Array.isArray(n)||(n=[n]);var o=Object.getOwnPropertyDescriptor(r,e),a=n.reduce((function(t,n){return n(r,e,t)}),o);a&&Object.defineProperty(r,e,a)};for(var o in t)n(o);return e}function bt(e,t,r,n){var o=mt(n=q(n));return x(e),Mr(e,n.name,o.enhancer),t&&yt(e,t,r,o),e}function mt(e){return e.defaultDecorator||(!1===e.deep?G:F)}function yt(e,t,r,n){var o,a;qe();try{var l=g(t);try{for(var u=i(l),_=u.next();!_.done;_=u.next()){var s=_.value,c=Object.getOwnPropertyDescriptor(t,s);0;var f=(r&&s in r?r[s]:c.get?ee:n)(e,s,c,!0);f&&Object.defineProperty(e,s,f)}}catch(e){o={error:e}}finally{try{_&&!_.done&&(a=u.return)&&a.call(u)}finally{if(o)throw o.error}}}finally{Fe()}}function vt(e,t){return Ot(Lr(e,t))}function Ot(e){var t,r,n={name:e.name};return e.observing&&e.observing.length>0&&(n.dependencies=(t=e.observing,r=[],t.forEach((function(e){-1===r.indexOf(e)&&r.push(e)})),r).map(Ot)),n}function Pt(e,t){return gt(Lr(e,t))}function gt(e){var t={name:e.name};return function(e){return e.observers&&e.observers.size>0}(e)&&(t.observers=Array.from(function(e){return e.observers}(e)).map(gt)),t}var Dt=0;function Mt(){this.message="FLOW_CANCELLED"}function Ct(e){return e instanceof Mt}function Tt(e){1!==arguments.length&&f("Flow expects 1 argument and cannot be used as decorator");var t=e.name||"<unnamed flow>";return function(){var r,n=this,o=arguments,a=++Dt,i=ot(t+" - runid: "+a+" - init",e).apply(n,o),l=void 0,u=new Promise((function(e,n){var o=0;function u(e){var r;l=void 0;try{r=ot(t+" - runid: "+a+" - yield "+o++,i.next).call(i,e)}catch(e){return n(e)}s(r)}function _(e){var r;l=void 0;try{r=ot(t+" - runid: "+a+" - yield "+o++,i.throw).call(i,e)}catch(e){return n(e)}s(r)}function s(t){if(!t||"function"!=typeof t.then)return t.done?e(t.value):(l=Promise.resolve(t.value)).then(u,_);t.then(s,n)}r=n,u(void 0)}));return u.cancel=ot(t+" - runid: "+a+" - cancel",(function(){try{l&&wt(l);var e=i.return(void 0),t=Promise.resolve(e.value);t.then(E,E),wt(t),r(new Mt)}catch(e){r(e)}})),u}}function wt(e){"function"==typeof e.cancel&&e.cancel()}function Rt(e,t,r){var n;if(vr(e)||hr(e)||we(e))n=Ir(e);else{if(!Ar(e))return f(!1);if("string"!=typeof t)return f(!1);n=Ir(e,t)}return void 0!==n.dehancer?f(!1):(n.dehancer="function"==typeof t?t:r,function(){n.dehancer=void 0})}function At(e,t,r){return"function"==typeof r?function(e,t,r){return Ir(e,t).intercept(r)}(e,t,r):function(e,t){return Ir(e).intercept(t)}(e,t)}function Lt(e,t){if(null==e)return!1;if(void 0!==t){if(!1===Ar(e))return!1;if(!e[C].values.has(t))return!1;var r=Lr(e,t);return Ae(r)}return Ae(e)}function It(e){return arguments.length>1?f(!1):Lt(e)}function kt(e,t){return"string"!=typeof t?f(!1):Lt(e,t)}function Bt(e,t){return null!=e&&(void 0!==t?!!Ar(e)&&e[C].values.has(t):Ar(e)||!!e[C]||w(e)||Je(e)||Ae(e))}function Ut(e){return 1!==arguments.length&&f(!1),Bt(e)}function xt(e,t){return"string"!=typeof t?f(!1):Bt(e,t)}function St(e){return Ar(e)?e[C].getKeys():vr(e)||gr(e)?Array.from(e.keys()):hr(e)?e.map((function(e,t){return t})):f(!1)}function Wt(e){return Ar(e)?St(e).map((function(t){return e[t]})):vr(e)?St(e).map((function(t){return e.get(t)})):gr(e)?Array.from(e.values()):hr(e)?e.slice():f(!1)}function Kt(e){return Ar(e)?St(e).map((function(t){return[t,e[t]]})):vr(e)?St(e).map((function(t){return[t,e.get(t)]})):gr(e)?Array.from(e.entries()):hr(e)?e.map((function(e,t){return[t,e]})):f(!1)}function Nt(e,t,r){if(2!==arguments.length||gr(e))if(Ar(e)){var n=e[C],o=n.values.get(t);o?n.write(t,r):n.addObservableProp(t,r,n.defaultEnhancer)}else if(vr(e))e.set(t,r);else if(gr(e))e.add(t);else{if(!hr(e))return f(!1);"number"!=typeof t&&(t=parseInt(t,10)),p(t>=0,"Not a valid index: '"+t+"'"),qe(),t>=e.length&&(e.length=t+1),e[t]=r,Fe()}else{qe();var a=t;try{for(var i in a)Nt(e,i,a[i])}finally{Fe()}}}function zt(e,t){if(Ar(e))e[C].remove(t);else if(vr(e))e.delete(t);else if(gr(e))e.delete(t);else{if(!hr(e))return f(!1);"number"!=typeof t&&(t=parseInt(t,10)),p(t>=0,"Not a valid index: '"+t+"'"),e.splice(t,1)}}function jt(e,t){return Ar(e)?Ir(e).has(t):vr(e)||gr(e)?e.has(t):hr(e)?t>=0&&t<e.length:f(!1)}function qt(e,t){if(jt(e,t))return Ar(e)?e[t]:vr(e)?e.get(t):hr(e)?e[t]:f(!1)}function Ft(e,t,r,n){return"function"==typeof r?function(e,t,r,n){return Ir(e,t).observe(r,n)}(e,t,r,n):function(e,t,r){return Ir(e).observe(t,r)}(e,t,r)}Mt.prototype=Object.create(Error.prototype);var Vt={detectCycles:!0,exportMapsAsObjects:!0,recurseEverything:!1};function Gt(e,t,r,n){return n.detectCycles&&e.set(t,r),r}function Ht(e,t){var r;return"boolean"==typeof t&&(t={detectCycles:t}),t||(t=Vt),t.detectCycles=void 0===t.detectCycles?!0===t.recurseEverything:!0===t.detectCycles,t.detectCycles&&(r=new Map),function e(t,r,n){if(!r.recurseEverything&&!Ut(t))return t;if("object"!=typeof t)return t;if(null===t)return null;if(t instanceof Date)return t;if(we(t))return e(t.get(),r,n);if(Ut(t)&&St(t),!0===r.detectCycles&&null!==t&&n.has(t))return n.get(t);if(hr(t)||Array.isArray(t)){var o=Gt(n,t,[],r),a=t.map((function(t){return e(t,r,n)}));o.length=a.length;for(var i=0,l=a.length;i<l;i++)o[i]=a[i];return o}if(gr(t)||Object.getPrototypeOf(t)===Set.prototype){if(!1===r.exportMapsAsObjects){var u=Gt(n,t,new Set,r);return t.forEach((function(t){u.add(e(t,r,n))})),u}var _=Gt(n,t,[],r);return t.forEach((function(t){_.push(e(t,r,n))})),_}if(vr(t)||Object.getPrototypeOf(t)===Map.prototype){if(!1===r.exportMapsAsObjects){var s=Gt(n,t,new Map,r);return t.forEach((function(t,o){s.set(o,e(t,r,n))})),s}var c=Gt(n,t,{},r);return t.forEach((function(t,o){c[o]=e(t,r,n)})),c}var f=Gt(n,t,{},r);return g(t).forEach((function(o){f[o]=e(t[o],r,n)})),f}(e,t,r)}function $t(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=!1;"boolean"==typeof e[e.length-1]&&(r=e.pop());var n=Yt(e);if(!n)return f(!1);n.isTracing===Z.NONE&&console.log("[mobx.trace] '"+n.name+"' tracing enabled"),n.isTracing=r?Z.BREAK:Z.LOG}function Yt(e){switch(e.length){case 0:return Se.trackingDerivation;case 1:return Lr(e[0]);case 2:return Lr(e[0],e[1])}}function Qt(e,t){void 0===t&&(t=void 0),qe();try{return e.apply(t)}finally{Fe()}}function Xt(e,t,r){return 1===arguments.length||t&&"object"==typeof t?Zt(e,t):Jt(e,t,r||{})}function Jt(e,t,r){var n;"number"==typeof r.timeout&&(n=setTimeout((function(){if(!a[C].isDisposed){a();var e=new Error("WHEN_TIMEOUT");if(!r.onError)throw e;r.onError(e)}}),r.timeout)),r.name=r.name||"When@"+c();var o=ye(r.name+"-effect",t),a=ut((function(t){e()&&(t.dispose(),n&&clearTimeout(n),o())}),r);return a}function Zt(e,t){var r;var n=new Promise((function(n,o){var i=Jt(e,n,a(a({},t),{onError:o}));r=function(){i(),o("WHEN_CANCELLED")}}));return n.cancel=r,n}function er(e){return e[C]}function tr(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e}var rr={has:function(e,t){if(t===C||"constructor"===t||t===L)return!0;var r=er(e);return tr(t)?r.has(t):t in e},get:function(e,t){if(t===C||"constructor"===t||t===L)return e[t];var r=er(e),n=r.values.get(t);if(n instanceof T){var o=n.get();return void 0===o&&r.has(t),o}return tr(t)&&r.has(t),e[t]},set:function(e,t,r){return!!tr(t)&&(Nt(e,t,r),!0)},deleteProperty:function(e,t){return!!tr(t)&&(er(e).remove(t),!0)},ownKeys:function(e){return er(e).keysAtom.reportObserved(),Reflect.ownKeys(e)},preventExtensions:function(e){return f("Dynamic observable objects cannot be frozen"),!1}};function nr(e){var t=new Proxy(e,rr);return e[C].proxy=t,t}function or(e){return void 0!==e.interceptors&&e.interceptors.length>0}function ar(e,t){var r=e.interceptors||(e.interceptors=[]);return r.push(t),d((function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}))}function ir(e,t){var r=ce();try{for(var n=u(e.interceptors||[]),o=0,a=n.length;o<a&&(p(!(t=n[o](t))||t.type,"Intercept handlers should return nothing or a change object"),t);o++);return t}finally{fe(r)}}function lr(e){return void 0!==e.changeListeners&&e.changeListeners.length>0}function ur(e,t){var r=e.changeListeners||(e.changeListeners=[]);return r.push(t),d((function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}))}function _r(e,t){var r=ce(),n=e.changeListeners;if(n){for(var o=0,a=(n=n.slice()).length;o<a;o++)n[o](t);fe(r)}}var sr={get:function(e,t){return t===C?e[C]:"length"===t?e[C].getArrayLength():"number"==typeof t?pr.get.call(e,t):"string"!=typeof t||isNaN(t)?pr.hasOwnProperty(t)?pr[t]:e[t]:pr.get.call(e,parseInt(t))},set:function(e,t,r){return"length"===t&&e[C].setArrayLength(r),"number"==typeof t&&pr.set.call(e,t,r),"symbol"==typeof t||isNaN(t)?e[t]=r:pr.set.call(e,parseInt(t),r),!0},preventExtensions:function(e){return f("Observable arrays cannot be frozen"),!1}};function cr(e,t,r,n){void 0===r&&(r="ObservableArray@"+c()),void 0===n&&(n=!1);var o,a,i,l=new fr(r,t,n);o=l.values,a=C,i=l,Object.defineProperty(o,a,{enumerable:!1,writable:!1,configurable:!0,value:i});var u=new Proxy(l.values,sr);if(l.proxy=u,e&&e.length){var _=De(!0);l.spliceWithArray(0,0,e),Me(_)}return u}var fr=function(){function e(e,t,r){this.owned=r,this.values=[],this.proxy=void 0,this.lastKnownLength=0,this.atom=new T(e||"ObservableArray@"+c()),this.enhancer=function(r,n){return t(r,n,e+"[..]")}}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.dehanceValues=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},e.prototype.intercept=function(e){return ar(this,e)},e.prototype.observe=function(e,t){return void 0===t&&(t=!1),t&&e({object:this.proxy,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),ur(this,e)},e.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},e.prototype.setArrayLength=function(e){if("number"!=typeof e||e<0)throw new Error("[mobx.array] Out of range: "+e);var t=this.values.length;if(e!==t)if(e>t){for(var r=new Array(e-t),n=0;n<e-t;n++)r[n]=void 0;this.spliceWithArray(t,0,r)}else this.spliceWithArray(e,t-e)},e.prototype.updateArrayLength=function(e,t){if(e!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");this.lastKnownLength+=t},e.prototype.spliceWithArray=function(e,t,r){var n=this;le(this.atom);var o=this.values.length;if(void 0===e?e=0:e>o?e=o:e<0&&(e=Math.max(0,o+e)),t=1===arguments.length?o-e:null==t?0:Math.max(0,Math.min(t,o-e)),void 0===r&&(r=_),or(this)){var a=ir(this,{object:this.proxy,type:"splice",index:e,removedCount:t,added:r});if(!a)return _;t=a.removedCount,r=a.added}r=0===r.length?r:r.map((function(e){return n.enhancer(e,void 0)}));var i=this.spliceItemsIntoValues(e,t,r);return 0===t&&0===r.length||this.notifyArraySplice(e,r,i),this.dehanceValues(i)},e.prototype.spliceItemsIntoValues=function(e,t,r){var n;if(r.length<1e4)return(n=this.values).splice.apply(n,u([e,t],r));var o=this.values.slice(e,e+t);return this.values=this.values.slice(0,e).concat(r,this.values.slice(e+t)),o},e.prototype.notifyArrayChildUpdate=function(e,t,r){var n=!this.owned&&!1,o=lr(this),a=o||n?{object:this.proxy,type:"update",index:e,newValue:t,oldValue:r}:null;this.atom.reportChanged(),o&&_r(this,a)},e.prototype.notifyArraySplice=function(e,t,r){var n=!this.owned&&!1,o=lr(this),a=o||n?{object:this.proxy,type:"splice",index:e,removed:r,added:t,removedCount:r.length,addedCount:t.length}:null;this.atom.reportChanged(),o&&_r(this,a)},e}(),pr={intercept:function(e){return this[C].intercept(e)},observe:function(e,t){return void 0===t&&(t=!1),this[C].observe(e,t)},clear:function(){return this.splice(0)},replace:function(e){var t=this[C];return t.spliceWithArray(0,t.values.length,e)},toJS:function(){return this.slice()},toJSON:function(){return this.toJS()},splice:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var o=this[C];switch(arguments.length){case 0:return[];case 1:return o.spliceWithArray(e);case 2:return o.spliceWithArray(e,t)}return o.spliceWithArray(e,t,r)},spliceWithArray:function(e,t,r){return this[C].spliceWithArray(e,t,r)},push:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=this[C];return r.spliceWithArray(r.values.length,0,e),r.values.length},pop:function(){return this.splice(Math.max(this[C].values.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=this[C];return r.spliceWithArray(0,0,e),r.values.length},reverse:function(){var e=this.slice();return e.reverse.apply(e,arguments)},sort:function(e){var t=this.slice();return t.sort.apply(t,arguments)},remove:function(e){var t=this[C],r=t.dehanceValues(t.values).indexOf(e);return r>-1&&(this.splice(r,1),!0)},get:function(e){var t=this[C];if(t){if(e<t.values.length)return t.atom.reportObserved(),t.dehanceValue(t.values[e]);console.warn("[mobx.array] Attempt to read an array index ("+e+") that is out of bounds ("+t.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},set:function(e,t){var r=this[C],n=r.values;if(e<n.length){le(r.atom);var o=n[e];if(or(r)){var a=ir(r,{type:"update",object:r.proxy,index:e,newValue:t});if(!a)return;t=a.newValue}(t=r.enhancer(t,o))!==o&&(n[e]=t,r.notifyArrayChildUpdate(e,t,o))}else{if(e!==n.length)throw new Error("[mobx.array] Index out of bounds, "+e+" is larger than "+n.length);r.spliceWithArray(e,0,[t])}}};["concat","every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach((function(e){pr[e]=function(){var t=this[C];t.atom.reportObserved();var r=t.dehanceValues(t.values);return r[e].apply(r,arguments)}}));var dr,Er=y("ObservableArrayAdministration",fr);function hr(e){return h(e)&&Er(e[C])}var br,mr={},yr=function(){function e(e,t,r){if(void 0===t&&(t=K),void 0===r&&(r="ObservableMap@"+c()),this.enhancer=t,this.name=r,this[dr]=mr,this._keysAtom=R(this.name+".keys()"),this[Symbol.toStringTag]="Map","function"!=typeof Map)throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");this._data=new Map,this._hasMap=new Map,this.merge(e)}return e.prototype._has=function(e){return this._data.has(e)},e.prototype.has=function(e){var t=this;if(!Se.trackingDerivation)return this._has(e);var r=this._hasMap.get(e);if(!r){var n=r=new Te(this._has(e),N,this.name+"."+D(e)+"?",!1);this._hasMap.set(e,n),pt(n,(function(){return t._hasMap.delete(e)}))}return r.get()},e.prototype.set=function(e,t){var r=this._has(e);if(or(this)){var n=ir(this,{type:r?"update":"add",object:this,newValue:t,name:e});if(!n)return this;t=n.newValue}return r?this._updateValue(e,t):this._addValue(e,t),this},e.prototype.delete=function(e){var t=this;if(or(this)&&!(n=ir(this,{type:"delete",object:this,name:e})))return!1;if(this._has(e)){var r=lr(this),n=r?{type:"delete",object:this,oldValue:this._data.get(e).value,name:e}:null;return Qt((function(){t._keysAtom.reportChanged(),t._updateHasMapEntry(e,!1),t._data.get(e).setNewValue(void 0),t._data.delete(e)})),r&&_r(this,n),!0}return!1},e.prototype._updateHasMapEntry=function(e,t){var r=this._hasMap.get(e);r&&r.setNewValue(t)},e.prototype._updateValue=function(e,t){var r=this._data.get(e);if((t=r.prepareNewValue(t))!==Se.UNCHANGED){var n=lr(this),o=n?{type:"update",object:this,oldValue:r.value,name:e,newValue:t}:null;0,r.setNewValue(t),n&&_r(this,o)}},e.prototype._addValue=function(e,t){var r=this;le(this._keysAtom),Qt((function(){var n=new Te(t,r.enhancer,r.name+"."+D(e),!1);r._data.set(e,n),t=n.value,r._updateHasMapEntry(e,!0),r._keysAtom.reportChanged()}));var n=lr(this),o=n?{type:"add",object:this,name:e,newValue:t}:null;n&&_r(this,o)},e.prototype.get=function(e){return this.has(e)?this.dehanceValue(this._data.get(e).get()):this.dehanceValue(void 0)},e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.keys=function(){return this._keysAtom.reportObserved(),this._data.keys()},e.prototype.values=function(){var e=this,t=0,r=Array.from(this.keys());return Wr({next:function(){return t<r.length?{value:e.get(r[t++]),done:!1}:{done:!0}}})},e.prototype.entries=function(){var e=this,t=0,r=Array.from(this.keys());return Wr({next:function(){if(t<r.length){var n=r[t++];return{value:[n,e.get(n)],done:!1}}return{done:!0}}})},e.prototype[(dr=C,Symbol.iterator)]=function(){return this.entries()},e.prototype.forEach=function(e,t){var r,n;try{for(var o=i(this),a=o.next();!a.done;a=o.next()){var u=l(a.value,2),_=u[0],s=u[1];e.call(t,s,_,this)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}},e.prototype.merge=function(e){var t=this;return vr(e)&&(e=e.toJS()),Qt((function(){b(e)?g(e).forEach((function(r){return t.set(r,e[r])})):Array.isArray(e)?e.forEach((function(e){var r=l(e,2),n=r[0],o=r[1];return t.set(n,o)})):O(e)?(e.constructor!==Map&&f("Cannot initialize from classes that inherit from Map: "+e.constructor.name),e.forEach((function(e,r){return t.set(r,e)}))):null!=e&&f("Cannot initialize map from "+e)})),this},e.prototype.clear=function(){var e=this;Qt((function(){se((function(){var t,r;try{for(var n=i(e.keys()),o=n.next();!o.done;o=n.next()){var a=o.value;e.delete(a)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}}))}))},e.prototype.replace=function(e){var t=this;return Qt((function(){var r,n=b(r=e)?Object.keys(r):Array.isArray(r)?r.map((function(e){return l(e,1)[0]})):O(r)||vr(r)?Array.from(r.keys()):f("Cannot get keys from '"+r+"'");Array.from(t.keys()).filter((function(e){return-1===n.indexOf(e)})).forEach((function(e){return t.delete(e)})),t.merge(e)})),this},Object.defineProperty(e.prototype,"size",{get:function(){return this._keysAtom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),e.prototype.toPOJO=function(){var e,t,r={};try{for(var n=i(this),o=n.next();!o.done;o=n.next()){var a=l(o.value,2),u=a[0],_=a[1];r["symbol"==typeof u?u:D(u)]=_}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return r},e.prototype.toJS=function(){return new Map(this)},e.prototype.toJSON=function(){return this.toPOJO()},e.prototype.toString=function(){var e=this;return this.name+"[{ "+Array.from(this.keys()).map((function(t){return D(t)+": "+e.get(t)})).join(", ")+" }]"},e.prototype.observe=function(e,t){return ur(this,e)},e.prototype.intercept=function(e){return ar(this,e)},e}(),vr=y("ObservableMap",yr),Or={},Pr=function(){function e(e,t,r){if(void 0===t&&(t=K),void 0===r&&(r="ObservableSet@"+c()),this.name=r,this[br]=Or,this._data=new Set,this._atom=R(this.name),this[Symbol.toStringTag]="Set","function"!=typeof Set)throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");this.enhancer=function(e,n){return t(e,n,r)},e&&this.replace(e)}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.clear=function(){var e=this;Qt((function(){se((function(){var t,r;try{for(var n=i(e._data.values()),o=n.next();!o.done;o=n.next()){var a=o.value;e.delete(a)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}}))}))},e.prototype.forEach=function(e,t){var r,n;try{for(var o=i(this),a=o.next();!a.done;a=o.next()){var l=a.value;e.call(t,l,l,this)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}},Object.defineProperty(e.prototype,"size",{get:function(){return this._atom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),e.prototype.add=function(e){var t=this;if((le(this._atom),or(this))&&!(n=ir(this,{type:"add",object:this,newValue:e})))return this;if(!this.has(e)){Qt((function(){t._data.add(t.enhancer(e,void 0)),t._atom.reportChanged()}));var r=lr(this),n=r?{type:"add",object:this,newValue:e}:null;0,r&&_r(this,n)}return this},e.prototype.delete=function(e){var t=this;if(or(this)&&!(n=ir(this,{type:"delete",object:this,oldValue:e})))return!1;if(this.has(e)){var r=lr(this),n=r?{type:"delete",object:this,oldValue:e}:null;return Qt((function(){t._atom.reportChanged(),t._data.delete(e)})),r&&_r(this,n),!0}return!1},e.prototype.has=function(e){return this._atom.reportObserved(),this._data.has(this.dehanceValue(e))},e.prototype.entries=function(){var e=0,t=Array.from(this.keys()),r=Array.from(this.values());return Wr({next:function(){var n=e;return e+=1,n<r.length?{value:[t[n],r[n]],done:!1}:{done:!0}}})},e.prototype.keys=function(){return this.values()},e.prototype.values=function(){this._atom.reportObserved();var e=this,t=0,r=Array.from(this._data.values());return Wr({next:function(){return t<r.length?{value:e.dehanceValue(r[t++]),done:!1}:{done:!0}}})},e.prototype.replace=function(e){var t=this;return gr(e)&&(e=e.toJS()),Qt((function(){Array.isArray(e)||P(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&f("Cannot initialize set from "+e)})),this},e.prototype.observe=function(e,t){return ur(this,e)},e.prototype.intercept=function(e){return ar(this,e)},e.prototype.toJS=function(){return new Set(this)},e.prototype.toString=function(){return this.name+"[ "+Array.from(this).join(", ")+" ]"},e.prototype[(br=C,Symbol.iterator)]=function(){return this.values()},e}(),gr=y("ObservableSet",Pr),Dr=function(){function e(e,t,r,n){void 0===t&&(t=new Map),this.target=e,this.values=t,this.name=r,this.defaultEnhancer=n,this.keysAtom=new T(r+".keys")}return e.prototype.read=function(e){return this.values.get(e).get()},e.prototype.write=function(e,t){var r=this.target,n=this.values.get(e);if(n instanceof Re)n.set(t);else{if(or(this)){if(!(a=ir(this,{type:"update",object:this.proxy||r,name:e,newValue:t})))return;t=a.newValue}if((t=n.prepareNewValue(t))!==Se.UNCHANGED){var o=lr(this),a=o?{type:"update",object:this.proxy||r,oldValue:n.value,name:e,newValue:t}:null;0,n.setNewValue(t),o&&_r(this,a)}}},e.prototype.has=function(e){var t=this.pendingKeys||(this.pendingKeys=new Map),r=t.get(e);if(r)return r.get();var n=!!this.values.get(e);return r=new Te(n,N,this.name+"."+D(e)+"?",!1),t.set(e,r),r.get()},e.prototype.addObservableProp=function(e,t,r){void 0===r&&(r=this.defaultEnhancer);var n=this.target;if(or(this)){var o=ir(this,{object:this.proxy||n,name:e,type:"add",newValue:t});if(!o)return;t=o.newValue}var a=new Te(t,r,this.name+"."+D(e),!1);this.values.set(e,a),t=a.value,Object.defineProperty(n,e,function(e){return Cr[e]||(Cr[e]={configurable:!0,enumerable:!0,get:function(){return this[C].read(e)},set:function(t){this[C].write(e,t)}})}(e)),this.notifyPropertyAddition(e,t)},e.prototype.addComputedProp=function(e,t,r){var n,o,a,i=this.target;r.name=r.name||this.name+"."+D(t),this.values.set(t,new Re(r)),(e===i||(n=e,o=t,!(a=Object.getOwnPropertyDescriptor(n,o))||!1!==a.configurable&&!1!==a.writable))&&Object.defineProperty(e,t,function(e){return Tr[e]||(Tr[e]={configurable:Se.computedConfigurable,enumerable:!1,get:function(){return wr(this).read(e)},set:function(t){wr(this).write(e,t)}})}(t))},e.prototype.remove=function(e){if(this.values.has(e)){var t=this.target;if(or(this))if(!(i=ir(this,{object:this.proxy||t,name:e,type:"remove"})))return;try{qe();var r=lr(this),n=this.values.get(e),o=n&&n.get();if(n&&n.set(void 0),this.keysAtom.reportChanged(),this.values.delete(e),this.pendingKeys){var a=this.pendingKeys.get(e);a&&a.set(!1)}delete this.target[e];var i=r?{type:"remove",object:this.proxy||t,oldValue:o,name:e}:null;0,r&&_r(this,i)}finally{Fe()}}},e.prototype.illegalAccess=function(e,t){console.warn("Property '"+t+"' of '"+e+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")},e.prototype.observe=function(e,t){return ur(this,e)},e.prototype.intercept=function(e){return ar(this,e)},e.prototype.notifyPropertyAddition=function(e,t){var r=lr(this),n=r?{type:"add",object:this.proxy||this.target,name:e,newValue:t}:null;if(r&&_r(this,n),this.pendingKeys){var o=this.pendingKeys.get(e);o&&o.set(!0)}this.keysAtom.reportChanged()},e.prototype.getKeys=function(){var e,t;this.keysAtom.reportObserved();var r=[];try{for(var n=i(this.values),o=n.next();!o.done;o=n.next()){var a=l(o.value,2),u=a[0];a[1]instanceof Te&&r.push(u)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return r},e}();function Mr(e,t,r){if(void 0===t&&(t=""),void 0===r&&(r=K),Object.prototype.hasOwnProperty.call(e,C))return e[C];b(e)||(t=(e.constructor.name||"ObservableObject")+"@"+c()),t||(t="ObservableObject@"+c());var n=new Dr(e,new Map,D(t),r);return m(e,C,n),n}var Cr=Object.create(null),Tr=Object.create(null);function wr(e){var t=e[C];return t||(x(e),e[C])}var Rr=y("ObservableObjectAdministration",Dr);function Ar(e){return!!h(e)&&(x(e),Rr(e[C]))}function Lr(e,t){if("object"==typeof e&&null!==e){if(hr(e))return void 0!==t&&f(!1),e[C].atom;if(gr(e))return e[C];if(vr(e)){var r=e;return void 0===t?r._keysAtom:((n=r._data.get(t)||r._hasMap.get(t))||f(!1),n)}var n;if(x(e),t&&!e[C]&&e[t],Ar(e))return t?((n=e[C].values.get(t))||f(!1),n):f(!1);if(w(e)||Ae(e)||Je(e))return e}else if("function"==typeof e&&Je(e[C]))return e[C];return f(!1)}function Ir(e,t){return e||f("Expecting some object"),void 0!==t?Ir(Lr(e,t)):w(e)||Ae(e)||Je(e)||vr(e)||gr(e)?e:(x(e),e[C]?e[C]:void f(!1))}function kr(e,t){return(void 0!==t?Lr(e,t):Ar(e)||vr(e)||gr(e)?Ir(e):Lr(e)).name}var Br=Object.prototype.toString;function Ur(e,t,r){return void 0===r&&(r=-1),function e(t,r,n,o,a){if(t===r)return 0!==t||1/t==1/r;if(null==t||null==r)return!1;if(t!=t)return r!=r;var i=typeof t;if("function"!==i&&"object"!==i&&"object"!=typeof r)return!1;var l=Br.call(t);if(l!==Br.call(r))return!1;switch(l){case"[object RegExp]":case"[object String]":return""+t==""+r;case"[object Number]":return+t!=+t?+r!=+r:0==+t?1/+t==1/r:+t==+r;case"[object Date]":case"[object Boolean]":return+t==+r;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(t)===Symbol.valueOf.call(r);case"[object Map]":case"[object Set]":n>=0&&n++}t=xr(t),r=xr(r);var u="[object Array]"===l;if(!u){if("object"!=typeof t||"object"!=typeof r)return!1;var _=t.constructor,s=r.constructor;if(_!==s&&!("function"==typeof _&&_ instanceof _&&"function"==typeof s&&s instanceof s)&&"constructor"in t&&"constructor"in r)return!1}if(0===n)return!1;n<0&&(n=-1);a=a||[];var c=(o=o||[]).length;for(;c--;)if(o[c]===t)return a[c]===r;if(o.push(t),a.push(r),u){if((c=t.length)!==r.length)return!1;for(;c--;)if(!e(t[c],r[c],n-1,o,a))return!1}else{var f=Object.keys(t),p=void 0;if(c=f.length,Object.keys(r).length!==c)return!1;for(;c--;)if(p=f[c],!Sr(r,p)||!e(t[p],r[p],n-1,o,a))return!1}return o.pop(),a.pop(),!0}(e,t,r)}function xr(e){return hr(e)?e.slice():O(e)||vr(e)||P(e)||gr(e)?Array.from(e.entries()):e}function Sr(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Wr(e){return e[Symbol.iterator]=Kr,e}function Kr(){return this}if("undefined"==typeof Proxy||"undefined"==typeof Symbol)throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:et,extras:{getDebugName:kr},$mobx:C})}.call(this,r(63),r(41))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"h",(function(){return MVariable})),__webpack_require__.d(__webpack_exports__,"d",(function(){return MProperty})),__webpack_require__.d(__webpack_exports__,"e",(function(){return MRequirement})),__webpack_require__.d(__webpack_exports__,"g",(function(){return MTaskProperty})),__webpack_require__.d(__webpack_exports__,"f",(function(){return MTask})),__webpack_require__.d(__webpack_exports__,"a",(function(){return MCollection})),__webpack_require__.d(__webpack_exports__,"b",(function(){return MGroup})),__webpack_require__.d(__webpack_exports__,"c",(function(){return MMain}));var mobx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),mobx_persist__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),mobx_persist__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(mobx_persist__WEBPACK_IMPORTED_MODULE_1__),_class,_descriptor,_descriptor2,_temp,_class3,_descriptor3,_temp2,_class5,_descriptor4,_descriptor5,_descriptor6,_temp3,_class7,_descriptor7,_descriptor8,_temp4,_dec,_dec2,_class9,_descriptor9,_descriptor10,_descriptor11,_descriptor12,_descriptor13,_descriptor14,_descriptor15,_temp5,_dec3,_dec4,_class11,_descriptor16,_descriptor17,_descriptor18,_temp6,_dec5,_dec6,_class13,_descriptor19,_descriptor20,_descriptor21,_descriptor22,_temp7,_dec7,_dec8,_dec9,_class15,_descriptor23,_descriptor24,_descriptor25,_descriptor26,_temp8,_dec10,_dec11,_dec12,_dec13,_dec14,_dec15,_class17,_descriptor27,_descriptor28,_descriptor29,_descriptor30,_descriptor31,_descriptor32,_descriptor33,_descriptor34,_descriptor35,_descriptor36,_descriptor37,_descriptor38,_descriptor39,_descriptor40,_descriptor41,_descriptor42,_descriptor43,_descriptor44,_descriptor45,_descriptor46,_descriptor47,_descriptor48,_descriptor49,_descriptor50,_descriptor51,_descriptor52,_descriptor53,_descriptor54,_descriptor55,_descriptor56,_descriptor57,_descriptor58,_temp9,enterModule;function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e};mobx__WEBPACK_IMPORTED_MODULE_0__.configure({enforceActions:"observed"});var MVariable=(_temp=function(){function MVariable(){_classCallCheck(this,MVariable),_initializerDefineProperty(this,"id",_descriptor,this),_initializerDefineProperty(this,"value",_descriptor2,this)}return _createClass(MVariable,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MVariable}(),_class=_temp,_descriptor=_applyDecoratedDescriptor(_class.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor2=_applyDecoratedDescriptor(_class.prototype,"value",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class),MProperty=(_temp2=function(){function MProperty(){_classCallCheck(this,MProperty),_initializerDefineProperty(this,"id",_descriptor3,this)}return _createClass(MProperty,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MProperty}(),_class3=_temp2,_descriptor3=_applyDecoratedDescriptor(_class3.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class3),MRequirement=(_temp3=function(){function MRequirement(){_classCallCheck(this,MRequirement),_initializerDefineProperty(this,"id",_descriptor4,this),_initializerDefineProperty(this,"type",_descriptor5,this),_initializerDefineProperty(this,"value",_descriptor6,this)}return _createClass(MRequirement,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MRequirement}(),_class5=_temp3,_descriptor4=_applyDecoratedDescriptor(_class5.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor5=_applyDecoratedDescriptor(_class5.prototype,"type",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor6=_applyDecoratedDescriptor(_class5.prototype,"value",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class5),MTaskProperty=(_temp4=function(){function MTaskProperty(){_classCallCheck(this,MTaskProperty),_initializerDefineProperty(this,"id",_descriptor7,this),_initializerDefineProperty(this,"access",_descriptor8,this)}return _createClass(MTaskProperty,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MTaskProperty}(),_class7=_temp4,_descriptor7=_applyDecoratedDescriptor(_class7.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor8=_applyDecoratedDescriptor(_class7.prototype,"access",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class7),MTask=(_dec=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MTaskProperty),_dec2=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_temp5=function(){function MTask(){_classCallCheck(this,MTask),_initializerDefineProperty(this,"id",_descriptor9,this),_initializerDefineProperty(this,"exeValue",_descriptor10,this),_initializerDefineProperty(this,"exeReachable",_descriptor11,this),_initializerDefineProperty(this,"envValue",_descriptor12,this),_initializerDefineProperty(this,"envReachable",_descriptor13,this),_initializerDefineProperty(this,"properties",_descriptor14,this),_initializerDefineProperty(this,"requirements",_descriptor15,this)}return _createClass(MTask,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MTask}(),_class9=_temp5,_descriptor9=_applyDecoratedDescriptor(_class9.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor10=_applyDecoratedDescriptor(_class9.prototype,"exeValue",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor11=_applyDecoratedDescriptor(_class9.prototype,"exeReachable",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor12=_applyDecoratedDescriptor(_class9.prototype,"envValue",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor13=_applyDecoratedDescriptor(_class9.prototype,"envReachable",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor14=_applyDecoratedDescriptor(_class9.prototype,"properties",[_dec,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor15=_applyDecoratedDescriptor(_class9.prototype,"requirements",[_dec2,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class9),MCollection=(_dec3=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec4=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_temp6=function(){function MCollection(){_classCallCheck(this,MCollection),_initializerDefineProperty(this,"id",_descriptor16,this),_initializerDefineProperty(this,"tasks",_descriptor17,this),_initializerDefineProperty(this,"requirements",_descriptor18,this)}return _createClass(MCollection,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MCollection}(),_class11=_temp6,_descriptor16=_applyDecoratedDescriptor(_class11.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor17=_applyDecoratedDescriptor(_class11.prototype,"tasks",[_dec3,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor18=_applyDecoratedDescriptor(_class11.prototype,"requirements",[_dec4,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class11),MGroup=(_dec5=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec6=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_temp7=function(){function MGroup(){_classCallCheck(this,MGroup),_initializerDefineProperty(this,"id",_descriptor19,this),_initializerDefineProperty(this,"n",_descriptor20,this),_initializerDefineProperty(this,"tasks",_descriptor21,this),_initializerDefineProperty(this,"collections",_descriptor22,this)}return _createClass(MGroup,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MGroup}(),_class13=_temp7,_descriptor19=_applyDecoratedDescriptor(_class13.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor20=_applyDecoratedDescriptor(_class13.prototype,"n",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor21=_applyDecoratedDescriptor(_class13.prototype,"tasks",[_dec5,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor22=_applyDecoratedDescriptor(_class13.prototype,"collections",[_dec6,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class13),MMain=(_dec7=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec8=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec9=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MGroup),_temp8=function(){function MMain(){_classCallCheck(this,MMain),_initializerDefineProperty(this,"id",_descriptor23,this),_initializerDefineProperty(this,"tasks",_descriptor24,this),_initializerDefineProperty(this,"collections",_descriptor25,this),_initializerDefineProperty(this,"groups",_descriptor26,this)}return _createClass(MMain,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MMain}(),_class15=_temp8,_descriptor23=_applyDecoratedDescriptor(_class15.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"main"}}),_descriptor24=_applyDecoratedDescriptor(_class15.prototype,"tasks",[_dec7,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor25=_applyDecoratedDescriptor(_class15.prototype,"collections",[_dec8,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor26=_applyDecoratedDescriptor(_class15.prototype,"groups",[_dec9,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class15),Store=(_dec10=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MVariable),_dec11=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MProperty),_dec12=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MRequirement),_dec13=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MTask),_dec14=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MCollection),_dec15=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("object",MMain),_temp9=function(){function Store(){var e=this;_classCallCheck(this,Store),_initializerDefineProperty(this,"topologyId",_descriptor27,this),_initializerDefineProperty(this,"variables",_descriptor28,this),_initializerDefineProperty(this,"properties",_descriptor29,this),_initializerDefineProperty(this,"requirements",_descriptor30,this),_initializerDefineProperty(this,"tasks",_descriptor31,this),_initializerDefineProperty(this,"collections",_descriptor32,this),_initializerDefineProperty(this,"main",_descriptor33,this),_initializerDefineProperty(this,"reset",_descriptor34,this),_initializerDefineProperty(this,"setTopologyId",_descriptor35,this),_initializerDefineProperty(this,"setVariables",_descriptor36,this),_initializerDefineProperty(this,"setProperties",_descriptor37,this),_initializerDefineProperty(this,"setRequirements",_descriptor38,this),_initializerDefineProperty(this,"setTasks",_descriptor39,this),_initializerDefineProperty(this,"setCollections",_descriptor40,this),_initializerDefineProperty(this,"setMain",_descriptor41,this),_initializerDefineProperty(this,"addVariable",_descriptor42,this),_initializerDefineProperty(this,"addProperty",_descriptor43,this),_initializerDefineProperty(this,"addRequirement",_descriptor44,this),_initializerDefineProperty(this,"addTask",_descriptor45,this),_initializerDefineProperty(this,"addCollection",_descriptor46,this),_initializerDefineProperty(this,"addMainGroup",_descriptor47,this),_initializerDefineProperty(this,"removeVariable",_descriptor48,this),_initializerDefineProperty(this,"removeProperty",_descriptor49,this),_initializerDefineProperty(this,"removeRequirement",_descriptor50,this),_initializerDefineProperty(this,"removeTask",_descriptor51,this),_initializerDefineProperty(this,"removeCollection",_descriptor52,this),_initializerDefineProperty(this,"removeMainGroup",_descriptor53,this),_initializerDefineProperty(this,"editProperty",_descriptor54,this),_initializerDefineProperty(this,"editRequirement",_descriptor55,this),_initializerDefineProperty(this,"editTask",_descriptor56,this),_initializerDefineProperty(this,"editCollection",_descriptor57,this),_initializerDefineProperty(this,"editMainGroup",_descriptor58,this),this.hasVariable=function(t){return e.variables.some((function(e){return e.id===t}))},this.hasProperty=function(t){return e.properties.some((function(e){return e.id===t}))},this.hasRequirement=function(t){return e.requirements.some((function(e){return e.id===t}))},this.hasTask=function(t){return e.tasks.some((function(e){return e.id===t}))},this.hasCollection=function(t){return e.collections.some((function(e){return e.id===t}))},this.hasMainGroup=function(t){return e.main.groups.some((function(e){return e.id===t}))}}return _createClass(Store,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Store}(),_class17=_temp9,_descriptor27=_applyDecoratedDescriptor(_class17.prototype,"topologyId",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"new"}}),_descriptor28=_applyDecoratedDescriptor(_class17.prototype,"variables",[_dec10,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor29=_applyDecoratedDescriptor(_class17.prototype,"properties",[_dec11,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor30=_applyDecoratedDescriptor(_class17.prototype,"requirements",[_dec12,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor31=_applyDecoratedDescriptor(_class17.prototype,"tasks",[_dec13,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor32=_applyDecoratedDescriptor(_class17.prototype,"collections",[_dec14,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor33=_applyDecoratedDescriptor(_class17.prototype,"main",[_dec15,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new MMain}}),_descriptor34=_applyDecoratedDescriptor(_class17.prototype,"reset",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.topologyId="new",e.variables=[],e.properties=[],e.requirements=[],e.tasks=[],e.collections=[],e.main=new MMain}}}),_descriptor35=_applyDecoratedDescriptor(_class17.prototype,"setTopologyId",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.topologyId=t}}}),_descriptor36=_applyDecoratedDescriptor(_class17.prototype,"setVariables",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.variables=t}}}),_descriptor37=_applyDecoratedDescriptor(_class17.prototype,"setProperties",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.properties=t}}}),_descriptor38=_applyDecoratedDescriptor(_class17.prototype,"setRequirements",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.requirements=t}}}),_descriptor39=_applyDecoratedDescriptor(_class17.prototype,"setTasks",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.tasks=t}}}),_descriptor40=_applyDecoratedDescriptor(_class17.prototype,"setCollections",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.collections=t}}}),_descriptor41=_applyDecoratedDescriptor(_class17.prototype,"setMain",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.main=t}}}),_descriptor42=_applyDecoratedDescriptor(_class17.prototype,"addVariable",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.variables.push(t)}}}),_descriptor43=_applyDecoratedDescriptor(_class17.prototype,"addProperty",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.properties.push(t)}}}),_descriptor44=_applyDecoratedDescriptor(_class17.prototype,"addRequirement",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.requirements.push(t)}}}),_descriptor45=_applyDecoratedDescriptor(_class17.prototype,"addTask",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.tasks.push(t)}}}),_descriptor46=_applyDecoratedDescriptor(_class17.prototype,"addCollection",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.collections.push(t)}}}),_descriptor47=_applyDecoratedDescriptor(_class17.prototype,"addMainGroup",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.main.groups.push(t)}}}),_descriptor48=_applyDecoratedDescriptor(_class17.prototype,"removeVariable",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.variables.splice(t,1)}}}),_descriptor49=_applyDecoratedDescriptor(_class17.prototype,"removeProperty",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.properties.splice(t,1)[0].id;e.tasks.forEach((function(e){e.properties=e.properties.filter((function(e){return e.id!==r}))}))}}}),_descriptor50=_applyDecoratedDescriptor(_class17.prototype,"removeRequirement",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.requirements.splice(t,1)[0].id;e.tasks.forEach((function(e){e.requirements=e.requirements.filter((function(e){return e!==r}))})),e.collections.forEach((function(e){e.requirements=e.requirements.filter((function(e){return e!==r}))}))}}}),_descriptor51=_applyDecoratedDescriptor(_class17.prototype,"removeTask",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.tasks.splice(t,1)[0].id;e.main.tasks=e.main.tasks.filter((function(e){return e!==r})),e.collections.forEach((function(e){e.tasks=e.tasks.filter((function(e){return e!==r}))})),e.main.groups.forEach((function(e){e.tasks=e.tasks.filter((function(e){return e!==r}))}))}}}),_descriptor52=_applyDecoratedDescriptor(_class17.prototype,"removeCollection",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.collections.splice(t,1)[0].id;e.main.collections=e.main.collections.filter((function(e){return e!==r})),e.main.groups.forEach((function(e){e.collections=e.collections.filter((function(e){return e!==r}))}))}}}),_descriptor53=_applyDecoratedDescriptor(_class17.prototype,"removeMainGroup",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.main.groups.splice(t,1)}}}),_descriptor54=_applyDecoratedDescriptor(_class17.prototype,"editProperty",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.properties[t].id;e.properties[t]=r,e.tasks.forEach((function(e){e.properties.forEach((function(e){e.id===n&&(e.id=r.id)}))}))}}}),_descriptor55=_applyDecoratedDescriptor(_class17.prototype,"editRequirement",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.requirements[t].id;e.requirements[t]=r,e.tasks.forEach((function(e){var t=e.requirements.indexOf(n);t>-1&&(e.requirements[t]=r.id)})),e.collections.forEach((function(e){var t=e.requirements.indexOf(n);t>-1&&(e.requirements[t]=r.id)}))}}}),_descriptor56=_applyDecoratedDescriptor(_class17.prototype,"editTask",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.tasks[t].id;e.tasks[t]=r,e.collections.forEach((function(e){e.tasks.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))})),e.main.groups.forEach((function(e){e.tasks.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))})),e.main.tasks.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))}}}),_descriptor57=_applyDecoratedDescriptor(_class17.prototype,"editCollection",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.collections[t].id;e.collections[t]=r,e.main.groups.forEach((function(e){e.collections.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))})),e.main.collections.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))}}}),_descriptor58=_applyDecoratedDescriptor(_class17.prototype,"editMainGroup",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){e.main.groups[t]=r}}}),_class17),hydrate=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.create)({storage:localStorage,jsonify:!0}),store=new Store,_default=store,reactHotLoader,leaveModule;__webpack_exports__.i=_default,hydrate("topologyEditor",store),Object(mobx__WEBPACK_IMPORTED_MODULE_0__.autorun)((function(){})),reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&(reactHotLoader.register(MVariable,"MVariable","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MProperty,"MProperty","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MRequirement,"MRequirement","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MTaskProperty,"MTaskProperty","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MTask,"MTask","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MCollection,"MCollection","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MGroup,"MGroup","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MMain,"MMain","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(Store,"Store","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(hydrate,"hydrate","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(store,"store","/home/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(_default,"default","/home/orybalch/dev/DDS-topology-editor/src/Store.js")),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(e,t,r){e.exports=r(201)()},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(204)),a=n(r(13)),i=n(r(11)),l=n(r(12)),u=n(r(15)),_=n(r(0)),s=n(r(3)),c=n(r(26)),f=r(18),p=r(40),d=n(r(212)),E={active:s.default.bool,disabled:s.default.bool,block:s.default.bool,onClick:s.default.func,componentClass:c.default,href:s.default.string,type:s.default.oneOf(["button","reset","submit"])},h=function(e){function t(){return e.apply(this,arguments)||this}(0,l.default)(t,e);var r=t.prototype;return r.renderAnchor=function(e,t){return _.default.createElement(d.default,(0,i.default)({},e,{className:(0,u.default)(t,e.disabled&&"disabled")}))},r.renderButton=function(e,t){var r=e.componentClass,n=(0,a.default)(e,["componentClass"]),o=r||"button";return _.default.createElement(o,(0,i.default)({},n,{type:n.type||"button",className:t}))},r.render=function(){var e,t=this.props,r=t.active,n=t.block,o=t.className,l=(0,a.default)(t,["active","block","className"]),_=(0,f.splitBsProps)(l),s=_[0],c=_[1],p=(0,i.default)({},(0,f.getClassSet)(s),((e={active:r})[(0,f.prefix)(s,"block")]=n,e)),d=(0,u.default)(o,p);return c.href?this.renderAnchor(c,d):this.renderButton(c,d)},t}(_.default.Component);h.propTypes=E,h.defaultProps={active:!1,block:!1,disabled:!1};var b=(0,f.bsClass)("btn",(0,f.bsSizes)([p.Size.LARGE,p.Size.SMALL,p.Size.XSMALL],(0,f.bsStyles)((0,o.default)(p.State).concat([p.Style.DEFAULT,p.Style.PRIMARY,p.Style.LINK]),p.Style.DEFAULT,h)));t.default=b,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(26)),c=(n(r(43)),n(r(276))),f=n(r(278)),p=r(18),d=r(40),E={componentClass:s.default,type:_.default.string,id:_.default.string,inputRef:_.default.func},h={$bs_formGroup:_.default.object},b=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.context.$bs_formGroup,r=t&&t.controlId,n=this.props,i=n.componentClass,_=n.type,s=n.id,c=void 0===s?r:s,f=n.inputRef,E=n.className,h=n.bsSize,b=(0,a.default)(n,["componentClass","type","id","inputRef","className","bsSize"]),m=(0,p.splitBsProps)(b),y=m[0],v=m[1];if("file"!==_&&(e=(0,p.getClassSet)(y)),h){var O=d.SIZE_MAP[h]||h;e[(0,p.prefix)({bsClass:"input"},O)]=!0}return u.default.createElement(i,(0,o.default)({},v,{type:_,id:c,ref:f,className:(0,l.default)(E,e)}))},t}(u.default.Component);b.propTypes=E,b.defaultProps={componentClass:"input"},b.contextTypes=h,b.Feedback=c.default,b.Static=f.default;var m=(0,p.bsClass)("form-control",(0,p.bsSizes)([d.Size.SMALL,d.Size.LARGE],b));t.default=m,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(301)),s=n(r(302)),c=r(18),f=r(40),p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=(0,a.default)(e,["className"]),n=(0,c.splitBsProps)(r),i=n[0],_=n[1],s=(0,c.getClassSet)(i);return u.default.createElement("span",(0,o.default)({},_,{className:(0,l.default)(t,s)}))},t}(u.default.Component);p.Addon=_.default,p.Button=s.default;var d=(0,c.bsClass)("input-group",(0,c.bsSizes)([f.Size.LARGE,f.Size.SMALL],p));t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(13)),a=n(r(12)),i=n(r(77)),l=n(r(11)),u=n(r(15)),_=n(r(279)),s=n(r(45)),c=n(r(32)),f=n(r(122)),p=n(r(0)),d=n(r(3)),E=n(r(25)),h=n(r(283)),b=n(r(124)),m=n(r(26)),y=n(r(121)),v=n(r(294)),O=n(r(295)),P=n(r(296)),g=n(r(297)),D=n(r(299)),M=r(18),C=n(r(56)),T=n(r(300)),w=r(40),R=(0,l.default)({},h.default.propTypes,O.default.propTypes,{backdrop:d.default.oneOf(["static",!0,!1]),backdropClassName:d.default.string,keyboard:d.default.bool,animation:d.default.bool,dialogComponentClass:m.default,autoFocus:d.default.bool,enforceFocus:d.default.bool,restoreFocus:d.default.bool,show:d.default.bool,onHide:d.default.func,onEnter:d.default.func,onEntering:d.default.func,onEntered:d.default.func,onExit:d.default.func,onExiting:d.default.func,onExited:d.default.func,container:h.default.propTypes.container}),A=(0,l.default)({},h.default.defaultProps,{animation:!0,dialogComponentClass:O.default}),L={$bs_modal:d.default.shape({onHide:d.default.func})};function I(e){return p.default.createElement(y.default,(0,l.default)({},e,{timeout:B.TRANSITION_DURATION}))}function k(e){return p.default.createElement(y.default,(0,l.default)({},e,{timeout:B.BACKDROP_TRANSITION_DURATION}))}var B=function(e){function t(t,r){var n;return(n=e.call(this,t,r)||this).handleDialogBackdropMouseDown=function(){n._waitingForMouseUp=!0},n.handleMouseUp=function(e){var t=n._modal.getDialogElement();n._waitingForMouseUp&&e.target===t&&(n._ignoreBackdropClick=!0),n._waitingForMouseUp=!1},n.handleEntering=n.handleEntering.bind((0,i.default)((0,i.default)(n))),n.handleExited=n.handleExited.bind((0,i.default)((0,i.default)(n))),n.handleWindowResize=n.handleWindowResize.bind((0,i.default)((0,i.default)(n))),n.handleDialogClick=n.handleDialogClick.bind((0,i.default)((0,i.default)(n))),n.setModalRef=n.setModalRef.bind((0,i.default)((0,i.default)(n))),n.state={style:{}},n}(0,a.default)(t,e);var r=t.prototype;return r.getChildContext=function(){return{$bs_modal:{onHide:this.props.onHide}}},r.componentWillUnmount=function(){this.handleExited()},r.setModalRef=function(e){this._modal=e},r.handleDialogClick=function(e){this._ignoreBackdropClick||e.target!==e.currentTarget?this._ignoreBackdropClick=!1:this.props.onHide()},r.handleEntering=function(){_.default.on(window,"resize",this.handleWindowResize),this.updateStyle()},r.handleExited=function(){_.default.off(window,"resize",this.handleWindowResize)},r.handleWindowResize=function(){this.updateStyle()},r.updateStyle=function(){if(c.default){var e=this._modal.getDialogElement(),t=e.scrollHeight,r=(0,s.default)(e),n=(0,b.default)(E.default.findDOMNode(this.props.container||r.body)),o=t>r.documentElement.clientHeight;this.setState({style:{paddingRight:n&&!o?(0,f.default)():void 0,paddingLeft:!n&&o?(0,f.default)():void 0}})}},r.render=function(){var e=this.props,t=e.backdrop,r=e.backdropClassName,n=e.animation,a=e.show,i=e.dialogComponentClass,_=e.className,s=e.style,c=e.children,f=e.onEntering,d=e.onExited,E=(0,o.default)(e,["backdrop","backdropClassName","animation","show","dialogComponentClass","className","style","children","onEntering","onExited"]),b=(0,T.default)(E,h.default),m=b[0],y=b[1],v=a&&!n&&"in";return p.default.createElement(h.default,(0,l.default)({},m,{ref:this.setModalRef,show:a,containerClassName:(0,M.prefix)(E,"open"),transition:n?I:void 0,backdrop:t,backdropTransition:n?k:void 0,backdropClassName:(0,u.default)((0,M.prefix)(E,"backdrop"),r,v),onEntering:(0,C.default)(f,this.handleEntering),onExited:(0,C.default)(d,this.handleExited),onMouseUp:this.handleMouseUp}),p.default.createElement(i,(0,l.default)({},y,{style:(0,l.default)({},this.state.style,s),className:(0,u.default)(_,v),onClick:!0===t?this.handleDialogClick:null,onMouseDownDialog:this.handleDialogBackdropMouseDown}),c))},t}(p.default.Component);B.propTypes=R,B.defaultProps=A,B.childContextTypes=L,B.Body=v.default,B.Header=g.default,B.Title=D.default,B.Footer=P.default,B.Dialog=O.default,B.TRANSITION_DURATION=300,B.BACKDROP_TRANSITION_DURATION=150;var U=(0,M.bsClass)("modal",(0,M.bsSizes)([w.Size.LARGE,w.Size.SMALL],B));t.default=U,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=r(64),a=r(150),i=r(151),l=r(91),u=r(152);t.persist=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1];return e[2],r in l.types?o.serializable(l.types[r](n)):1===e.length?function(e){return u.persistObject(e,r)}:o.serializable.apply(null,e)},t.create=function(e){var t=void 0===e?{}:e,r=t.storage,l=void 0===r?a:r,u=t.jsonify,_=void 0===u||u,s=t.debounce,c=void 0===s?0:s;return"undefined"!=typeof localStorage&&localStorage===l&&(l=a),function(e,t,r){void 0===r&&(r={});var a=o.getDefaultModelSchema(t);var u=function u(){var s=l.getItem(e).then((function(e){return _?JSON.parse(e):e})).then(n.action("[mobx-persist "+e+"] LOAD_DATA",(function(e){return e&&"object"==typeof e&&o.update(a,t,e),i.mergeObservables(t,r),t})));return s.rehydrate=u,s}();return n.reaction((function(){return o.serialize(a,t)}),(function(t){return l.setItem(e,_?JSON.stringify(t):t)}),{delay:c}),u}}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return A}));var n=r(1),o=r(0),a=r(20),i=0;var l={};function u(e){return l[e]||(l[e]=function(e){if("function"==typeof Symbol)return Symbol(e);var t="__$mobx-react "+e+" ("+i+")";return i++,t}(e)),l[e]}function _(e,t){if(s(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var o=0;o<r.length;o++)if(!Object.hasOwnProperty.call(t,r[o])||!s(e[r[o]],t[r[o]]))return!1;return!0}function s(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function c(e,t,r){Object.hasOwnProperty.call(e,t)?e[t]=r:Object.defineProperty(e,t,{enumerable:!1,configurable:!0,writable:!0,value:r})}var f=u("patchMixins"),p=u("patchedDefinition");function d(e,t){for(var r=this,n=arguments.length,o=new Array(n>2?n-2:0),a=2;a<n;a++)o[a-2]=arguments[a];t.locks++;try{var i;return null!=e&&(i=e.apply(this,o)),i}finally{t.locks--,0===t.locks&&t.methods.forEach((function(e){e.apply(r,o)}))}}function E(e,t){return function(){for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];d.call.apply(d,[this,e,t].concat(n))}}function h(e,t,r){var n=function(e,t){var r=e[f]=e[f]||{},n=r[t]=r[t]||{};return n.locks=n.locks||0,n.methods=n.methods||[],n}(e,t);n.methods.indexOf(r)<0&&n.methods.push(r);var o=Object.getOwnPropertyDescriptor(e,t);if(!o||!o[p]){var a=e[t],i=function e(t,r,n,o,a){var i,l=E(a,o);return(i={})[p]=!0,i.get=function(){return l},i.set=function(a){if(this===t)l=E(a,o);else{var i=e(this,r,n,o,a);Object.defineProperty(this,r,i)}},i.configurable=!0,i.enumerable=n,i}(e,t,o?o.enumerable:void 0,n,a);Object.defineProperty(e,t,i)}}var b=n.$mobx||"$mobx",m=u("isMobXReactObserver"),y=u("isUnmounted"),v=u("skipRender"),O=u("isForcingUpdate");function P(e){var t=e.prototype;if(e[m]){var r=g(t);console.warn("The provided component class ("+r+") \n                has already been declared as an observer component.")}else e[m]=!0;if(t.componentWillReact)throw new Error("The componentWillReact life-cycle event is no longer supported");if(e.__proto__!==o.PureComponent)if(t.shouldComponentUpdate){if(t.shouldComponentUpdate!==M)throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.")}else t.shouldComponentUpdate=M;C(t,"props"),C(t,"state");var n=t.render;return t.render=function(){return D.call(this,n)},h(t,"componentWillUnmount",(function(){var e;if(!0!==Object(a.b)()&&(null===(e=this.render[b])||void 0===e||e.dispose(),this[y]=!0,!this.render[b])){var t=g(this);console.warn("The reactive render of an observer class component ("+t+") \n                was overriden after MobX attached. This may result in a memory leak if the \n                overriden reactive render was not properly disposed.")}})),e}function g(e){return e.displayName||e.name||e.constructor&&(e.constructor.displayName||e.constructor.name)||"<component>"}function D(e){var t=this;if(!0===Object(a.b)())return e.call(this);c(this,v,!1),c(this,O,!1);var r=g(this),i=e.bind(this),l=!1,u=new n.Reaction(r+".render()",(function(){if(!l&&(l=!0,!0!==t[y])){var e=!0;try{c(t,O,!0),t[v]||o.Component.prototype.forceUpdate.call(t),e=!1}finally{c(t,O,!1),e&&u.dispose()}}}));function _(){l=!1;var e=void 0,t=void 0;if(u.track((function(){try{t=Object(n._allowStateChanges)(!1,i)}catch(t){e=t}})),e)throw e;return t}return u.reactComponent=this,_[b]=u,this.render=_,_.call(this)}function M(e,t){return Object(a.b)()&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!_(this.props,e)}function C(e,t){var r=u("reactProp_"+t+"_valueHolder"),o=u("reactProp_"+t+"_atomHolder");function a(){return this[o]||c(this,o,Object(n.createAtom)("reactive "+t)),this[o]}Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){var e=!1;return n._allowStateReadsStart&&n._allowStateReadsEnd&&(e=Object(n._allowStateReadsStart)(!0)),a.call(this).reportObserved(),n._allowStateReadsStart&&n._allowStateReadsEnd&&Object(n._allowStateReadsEnd)(e),this[r]},set:function(e){this[O]||_(this[r],e)?c(this,r,e):(c(this,r,e),c(this,v,!0),a.call(this).reportChanged(),c(this,v,!1))}})}var T="function"==typeof Symbol&&Symbol.for,w=T?Symbol.for("react.forward_ref"):"function"==typeof o.forwardRef&&Object(o.forwardRef)((function(e){return null})).$$typeof,R=T?Symbol.for("react.memo"):"function"==typeof o.memo&&Object(o.memo)((function(e){return null})).$$typeof;function A(e){if(!0===e.isMobxInjector&&console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),R&&e.$$typeof===R)throw new Error("Mobx observer: You are trying to use 'observer' on a function component wrapped in either another observer or 'React.memo'. The observer already applies 'React.memo' for you.");if(w&&e.$$typeof===w){var t=e.render;if("function"!=typeof t)throw new Error("render property of ForwardRef was not a function");return Object(o.forwardRef)((function(){var e=arguments;return Object(o.createElement)(a.a,null,(function(){return t.apply(void 0,e)}))}))}return"function"!=typeof e||e.prototype&&e.prototype.render||e.isReactClass||Object.prototype.isPrototypeOf.call(o.Component,e)?P(e):Object(a.c)(e)}if(!o.Component)throw new Error("mobx-react requires React to be available");if(!n.observable)throw new Error("mobx-react requires mobx to be available")},function(e,t,r){var n=r(188);function o(){return e.exports=o=n||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}e.exports=o},function(e,t,r){var n=r(196);e.exports=function(e,t){e.prototype=n(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,r){var n=r(193);e.exports=function(e,t){if(null==e)return{};var r,o,a={},i=n(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c=r(40),f=n(r(275)),p={controlId:_.default.string,validationState:_.default.oneOf(["success","warning","error",null])},d={$bs_formGroup:_.default.object.isRequired},E=function(e){function t(){return e.apply(this,arguments)||this}(0,i.default)(t,e);var r=t.prototype;return r.getChildContext=function(){var e=this.props;return{$bs_formGroup:{controlId:e.controlId,validationState:e.validationState}}},r.hasFeedback=function(e){var t=this;return f.default.some(e,(function(e){return"feedback"===e.props.bsRole||e.props.children&&t.hasFeedback(e.props.children)}))},r.render=function(){var e=this.props,t=e.validationState,r=e.className,n=e.children,i=(0,a.default)(e,["validationState","className","children"]),_=(0,s.splitBsPropsAndOmit)(i,["controlId"]),c=_[0],f=_[1],p=(0,o.default)({},(0,s.getClassSet)(c),{"has-feedback":this.hasFeedback(n)});return t&&(p["has-"+t]=!0),u.default.createElement("div",(0,o.default)({},f,{className:(0,l.default)(r,p)}),n)},t}(u.default.Component);E.propTypes=p,E.childContextTypes=d;var h=(0,s.bsClass)("form-group",(0,s.bsSizes)([c.Size.LARGE,c.Size.SMALL],E));t.default=h,e.exports=t.default},function(e,t,r){var n;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)&&n.length){var i=o.apply(null,n);i&&e.push(i)}else if("object"===a)for(var l in n)r.call(n,l)&&n[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},function(e,t,r){"use strict";var n=r(78),o=r(9);t.__esModule=!0,t.default=void 0;var a=o(r(13)),i=o(r(12)),l=o(r(77)),u=o(r(11)),_=o(r(251)),s=o(r(51)),c=n(r(0)),f=o(r(3)),p=o(r(25)),d=(o(r(43)),o(r(254))),E=o(r(56));function h(e,t){return(0,_.default)(t)?t.indexOf(e)>=0:e===t}var b=f.default.oneOf(["click","hover","focus"]),m=(0,u.default)({},d.default.propTypes,{trigger:f.default.oneOfType([b,f.default.arrayOf(b)]),delay:f.default.number,delayShow:f.default.number,delayHide:f.default.number,defaultOverlayShown:f.default.bool,overlay:f.default.node.isRequired,onBlur:f.default.func,onClick:f.default.func,onFocus:f.default.func,onMouseOut:f.default.func,onMouseOver:f.default.func,target:f.default.oneOf([null]),onHide:f.default.oneOf([null]),show:f.default.oneOf([null])}),y=function(e){function t(t,r){var n;return(n=e.call(this,t,r)||this).handleToggle=n.handleToggle.bind((0,l.default)((0,l.default)(n))),n.handleDelayedShow=n.handleDelayedShow.bind((0,l.default)((0,l.default)(n))),n.handleDelayedHide=n.handleDelayedHide.bind((0,l.default)((0,l.default)(n))),n.handleHide=n.handleHide.bind((0,l.default)((0,l.default)(n))),n.handleMouseOver=function(e){return n.handleMouseOverOut(n.handleDelayedShow,e,"fromElement")},n.handleMouseOut=function(e){return n.handleMouseOverOut(n.handleDelayedHide,e,"toElement")},n._mountNode=null,n.state={show:t.defaultOverlayShown},n}(0,i.default)(t,e);var r=t.prototype;return r.componentDidMount=function(){this._mountNode=document.createElement("div"),this.renderOverlay()},r.componentDidUpdate=function(){this.renderOverlay()},r.componentWillUnmount=function(){p.default.unmountComponentAtNode(this._mountNode),this._mountNode=null,clearTimeout(this._hoverShowDelay),clearTimeout(this._hoverHideDelay)},r.handleDelayedHide=function(){var e=this;if(null!=this._hoverShowDelay)return clearTimeout(this._hoverShowDelay),void(this._hoverShowDelay=null);if(this.state.show&&null==this._hoverHideDelay){var t=null!=this.props.delayHide?this.props.delayHide:this.props.delay;t?this._hoverHideDelay=setTimeout((function(){e._hoverHideDelay=null,e.hide()}),t):this.hide()}},r.handleDelayedShow=function(){var e=this;if(null!=this._hoverHideDelay)return clearTimeout(this._hoverHideDelay),void(this._hoverHideDelay=null);if(!this.state.show&&null==this._hoverShowDelay){var t=null!=this.props.delayShow?this.props.delayShow:this.props.delay;t?this._hoverShowDelay=setTimeout((function(){e._hoverShowDelay=null,e.show()}),t):this.show()}},r.handleHide=function(){this.hide()},r.handleMouseOverOut=function(e,t,r){var n=t.currentTarget,o=t.relatedTarget||t.nativeEvent[r];o&&o===n||(0,s.default)(n,o)||e(t)},r.handleToggle=function(){this.state.show?this.hide():this.show()},r.hide=function(){this.setState({show:!1})},r.makeOverlay=function(e,t){return c.default.createElement(d.default,(0,u.default)({},t,{show:this.state.show,onHide:this.handleHide,target:this}),e)},r.show=function(){this.setState({show:!0})},r.renderOverlay=function(){p.default.unstable_renderSubtreeIntoContainer(this,this._overlay,this._mountNode)},r.render=function(){var e=this.props,t=e.trigger,r=e.overlay,n=e.children,o=e.onBlur,i=e.onClick,l=e.onFocus,u=e.onMouseOut,_=e.onMouseOver,s=(0,a.default)(e,["trigger","overlay","children","onBlur","onClick","onFocus","onMouseOut","onMouseOver"]);delete s.delay,delete s.delayShow,delete s.delayHide,delete s.defaultOverlayShown;var f=c.default.Children.only(n),p=f.props,d={};return this.state.show&&(d["aria-describedby"]=r.props.id),d.onClick=(0,E.default)(p.onClick,i),h("click",t)&&(d.onClick=(0,E.default)(d.onClick,this.handleToggle)),h("hover",t)&&(d.onMouseOver=(0,E.default)(p.onMouseOver,_,this.handleMouseOver),d.onMouseOut=(0,E.default)(p.onMouseOut,u,this.handleMouseOut)),h("focus",t)&&(d.onFocus=(0,E.default)(p.onFocus,l,this.handleDelayedShow),d.onBlur=(0,E.default)(p.onBlur,o,this.handleDelayedHide)),this._overlay=this.makeOverlay(r,s),(0,c.cloneElement)(f,d)},t}(c.default.Component);y.propTypes=m,y.defaultProps={defaultOverlayShown:!1,trigger:["hover","focus"]};var v=y;t.default=v,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(274)),c=r(18),f={id:(0,s.default)(_.default.oneOfType([_.default.string,_.default.number])),placement:_.default.oneOf(["top","right","bottom","left"]),positionTop:_.default.oneOfType([_.default.number,_.default.string]),positionLeft:_.default.oneOfType([_.default.number,_.default.string]),arrowOffsetTop:_.default.oneOfType([_.default.number,_.default.string]),arrowOffsetLeft:_.default.oneOfType([_.default.number,_.default.string]),title:_.default.node},p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.placement,n=t.positionTop,i=t.positionLeft,_=t.arrowOffsetTop,s=t.arrowOffsetLeft,f=t.title,p=t.className,d=t.style,E=t.children,h=(0,a.default)(t,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","title","className","style","children"]),b=(0,c.splitBsProps)(h),m=b[0],y=b[1],v=(0,o.default)({},(0,c.getClassSet)(m),((e={})[r]=!0,e)),O=(0,o.default)({display:"block",top:n,left:i},d),P={top:_,left:s};return u.default.createElement("div",(0,o.default)({},y,{role:"tooltip",className:(0,l.default)(p,v),style:O}),u.default.createElement("div",{className:"arrow",style:P}),f&&u.default.createElement("h3",{className:(0,c.prefix)(m,"title")},f),u.default.createElement("div",{className:(0,c.prefix)(m,"content")},E))},t}(u.default.Component);p.propTypes=f,p.defaultProps={placement:"right"};var d=(0,c.bsClass)("popover",p);t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.prefix=_,t.getClassSet=function(e){var t,r=((t={})[_(e)]=!0,t);if(e.bsSize){var n=l.SIZE_MAP[e.bsSize]||e.bsSize;r[_(e,n)]=!0}e.bsStyle&&(r[_(e,e.bsStyle)]=!0);return r},t.splitBsProps=function(e){var t={};return(0,o.default)(e).forEach((function(e){var r=e[0],n=e[1];d(r)||(t[r]=n)})),[p(e),t]},t.splitBsPropsAndOmit=function(e,t){var r={};t.forEach((function(e){r[e]=!0}));var n={};return(0,o.default)(e).forEach((function(e){var t=e[0],o=e[1];d(t)||r[t]||(n[t]=o)})),[p(e),n]},t.addStyle=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];c(r)(e)},t._curry=t.bsSizes=t.bsStyles=t.bsClass=void 0;var o=n(r(108)),a=n(r(11)),i=(n(r(211)),n(r(3))),l=r(40);function u(e){return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var o=r[r.length-1];return"function"==typeof o?e.apply(void 0,r):function(t){return e.apply(void 0,r.concat([t]))}}}function _(e,t){var r=(e.bsClass||"").trim();return null==r&&invariant(!1),r+(t?"-"+t:"")}var s=u((function(e,t){var r=t.propTypes||(t.propTypes={}),n=t.defaultProps||(t.defaultProps={});return r.bsClass=i.default.string,n.bsClass=e,t}));t.bsClass=s;var c=u((function(e,t,r){"string"!=typeof t&&(r=t,t=void 0);var n=r.STYLES||[],o=r.propTypes||{};e.forEach((function(e){-1===n.indexOf(e)&&n.push(e)}));var l=i.default.oneOf(n);(r.STYLES=n,l._values=n,r.propTypes=(0,a.default)({},o,{bsStyle:l}),void 0!==t)&&((r.defaultProps||(r.defaultProps={})).bsStyle=t);return r}));t.bsStyles=c;var f=u((function(e,t,r){"string"!=typeof t&&(r=t,t=void 0);var n=r.SIZES||[],o=r.propTypes||{};e.forEach((function(e){-1===n.indexOf(e)&&n.push(e)}));var u=[];n.forEach((function(e){var t=l.SIZE_MAP[e];t&&t!==e&&u.push(t),u.push(e)}));var _=i.default.oneOf(u);return _._values=u,r.SIZES=n,r.propTypes=(0,a.default)({},o,{bsSize:_}),void 0!==t&&(r.defaultProps||(r.defaultProps={}),r.defaultProps.bsSize=t),r}));function p(e){return{bsClass:e.bsClass,bsSize:e.bsSize,bsStyle:e.bsStyle,bsRole:e.bsRole}}function d(e){return"bsClass"===e||"bsSize"===e||"bsStyle"===e||"bsRole"===e}t.bsSizes=f;var E=u;t._curry=E},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return O})),r.d(t,"b",(function(){return l})),r.d(t,"c",(function(){return y}));var n=r(1),o=r(0),a=r.n(o);if(!o.useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!n.spy)throw new Error("mobx-react-lite requires mobx at least version 4 to be available");var i=!1;function l(){return i}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function _(){var e=Object(o.useState)(0)[1];return Object(o.useCallback)((function(){e((function(e){return e+1}))}),[])}function s(e){return Object(n.getDependencyTree)(e)}var c,f=1e4,p=new Set;function d(){void 0===c&&(c=setTimeout(E,1e4))}function E(){c=void 0;var e=Date.now();p.forEach((function(t){var r=t.current;r&&e>=r.cleanAt&&(r.reaction.dispose(),t.current=null,p.delete(t))})),p.size>0&&d()}var h={};function b(e){return"observer"+e}function m(e,t,r){if(void 0===t&&(t="observed"),void 0===r&&(r=h),l())return e();var o,i=(r.useForceUpdate||_)(),u=a.a.useRef(null);if(!u.current){var c=new n.Reaction(b(t),(function(){E.mounted?i():(c.dispose(),u.current=null)})),E=function(e){return{cleanAt:Date.now()+f,reaction:e}}(c);u.current=E,o=u,p.add(o),d()}var m,y,v=u.current.reaction;if(a.a.useDebugValue(v,s),a.a.useEffect((function(){var e;return e=u,p.delete(e),u.current?u.current.mounted=!0:(u.current={reaction:new n.Reaction(b(t),(function(){i()})),cleanAt:1/0},i()),function(){u.current.reaction.dispose(),u.current=null}}),[]),v.track((function(){try{m=e()}catch(e){y=e}})),y)throw y;return m}function y(e,t){if(l())return e;var r,n,a,i=u({forwardRef:!1},t),_=e.displayName||e.name,s=function(t,r){return m((function(){return e(t,r)}),_)};return s.displayName=_,r=i.forwardRef?Object(o.memo)(Object(o.forwardRef)(s)):Object(o.memo)(s),n=e,a=r,Object.keys(n).forEach((function(e){v[e]||Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(n,e))})),r.displayName=_,r}var v={$$typeof:!0,render:!0,compare:!0,type:!0};function O(e){var t=e.children,r=e.render,n=t||r;return"function"!=typeof n?null:m(n)}function P(e,t,r,n,o){var a="children"===t?"render":"children",i="function"==typeof e[t],l="function"==typeof e[a];return i&&l?new Error("MobX Observer: Do not use children and render in the same time in`"+r):i||l?null:new Error("Invalid prop `"+o+"` of type `"+typeof e[t]+"` supplied to `"+r+"`, expected `function`.")}O.propTypes={children:P,render:P},O.displayName="Observer"}).call(this,r(41))},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var r=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=r)},function(e,t,r){"use strict";var n=r(92),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function _(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:_,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)_(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,o=arguments.length;n<o;n++)_(arguments[n],r);return t},extend:function(e,t,r){return _(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){var n=r(28),o=r(22),a=r(52),i=r(33),l=r(35),u=function(e,t,r){var _,s,c,f=e&u.F,p=e&u.G,d=e&u.S,E=e&u.P,h=e&u.B,b=e&u.W,m=p?o:o[t]||(o[t]={}),y=m.prototype,v=p?n:d?n[t]:(n[t]||{}).prototype;for(_ in p&&(r=t),r)(s=!f&&v&&void 0!==v[_])&&l(m,_)||(c=s?v[_]:r[_],m[_]=p&&"function"!=typeof v[_]?r[_]:h&&s?a(c,n):b&&v[_]==c?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(c):E&&"function"==typeof c?a(Function.call,c):c,E&&((m.virtual||(m.virtual={}))[_]=c,e&u.R&&y&&!y[_]&&i(y,_,c)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,r){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=r(147)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(r(0)),o=r(207),a=i(r(76));function i(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)((function(e,t,r,a,i){var l=e[t];return n.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+r+"`,expected an element type (a string , component class, or function component)."):(0,o.isValidElementType)(l)?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+r+"`, expected an element type (a string , component class, or function component).")})),e.exports=t.default},function(e,t,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=u(r(154)),i=u(r(47)),l=r(100);function u(e){return e&&e.__esModule?e:{default:e}}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var s=(0,i.default)("github:request"),c=function(e){function t(e,r,n){_(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return o.path=r,o.request=n.config,o.response=(n||{}).response||n,o.status=n.status,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Error),t}(),f=function(){function e(t,r,n){_(this,e),this.__apiBase=r||"https://api.github.com",this.__auth={token:t.token,username:t.username,password:t.password},this.__AcceptHeader=n||"v3",t.token?this.__authorizationHeader="token "+t.token:t.username&&t.password&&(this.__authorizationHeader="Basic "+l.Base64.encode(t.username+":"+t.password))}return o(e,[{key:"__getURL",value:function(e){var t=e;-1===e.indexOf("//")&&(t=this.__apiBase+e);var r="timestamp="+(new Date).getTime();return t.replace(/(timestamp=\d+)/,r)}},{key:"__getRequestHeaders",value:function(e,t){var r={"Content-Type":"application/json;charset=UTF-8",Accept:"application/vnd.github."+(t||this.__AcceptHeader)};return e&&(r.Accept+=".raw"),r.Accept+="+json",this.__authorizationHeader&&(r.Authorization=this.__authorizationHeader),r}},{key:"_getOptionsWithDefaults",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.visibility||e.affiliation||(e.type=e.type||"all"),e.sort=e.sort||"updated",e.per_page=e.per_page||"100",e}},{key:"_dateToISO",value:function(e){return e&&e instanceof Date&&(e=e.toISOString()),e}},{key:"_request",value:function(e,t,r,o,i){var l=this.__getURL(t),u=(r||{}).AcceptHeader;u&&delete r.AcceptHeader;var _=this.__getRequestHeaders(i,u),c={};r&&"object"===(void 0===r?"undefined":n(r))&&function(e){return-1!==p.indexOf(e)}(e)&&(c=r,r=void 0);var f={url:l,method:e,headers:_,params:c,data:r,responseType:i?"text":"json"};s(f.method+" to "+f.url);var E=(0,a.default)(f).catch(d(o,t));return o&&E.then((function(e){e.data&&Object.keys(e.data).length>0?o(null,e.data,e):"GET"!==f.method&&Object.keys(e.data).length<1?o(null,e.status<300,e):o(null,e.data,e)})),E}},{key:"_request204or404",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"GET";return this._request(n,e,t).then((function(e){return r&&r(null,!0,e),!0}),(function(e){if(404===e.response.status)return r&&r(null,!1,e),!1;throw r&&r(e),e}))}},{key:"_requestAllPages",value:function(e,t,r,n){var o=this;return n=n||[],this._request("GET",e,t).then((function(a){var i,l=void 0;if(a.data instanceof Array)l=a.data;else{if(!(a.data.items instanceof Array)){var u="cannot figure out how to append "+a.data+" to the result set";throw new c(u,e,a)}l=a.data.items}(i=n).push.apply(i,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(l));var _=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=e.split(/\s*,\s*/);return t.reduce((function(e,t){return-1!==t.search(/rel="next"/)?(t.match(/<(.*)>/)||[])[1]:e}),void 0)}(a.headers.link);return _&&(t||(t={}),t.page=parseInt(_.match(/(page=[0-9]*)/g).shift().split("=").pop()),!t||"number"==typeof t.page)?(s("getting next page: "+_),o._requestAllPages(_,t,r,n)):(r&&r(null,n,a),a.data=n,a)})).catch(d(r,e))}}]),e}();e.exports=f;var p=["GET","HEAD","DELETE"];function d(e,t){return function(r){var n=void 0;if(r.hasOwnProperty("config")){var o=r.response,a=o.status,i=o.statusText,l=r.config,u=a+" error making request "+l.method+" "+l.url+': "'+i+'"';n=new c(u,t,r),s(u+" "+JSON.stringify(r.data))}else n=r;if(!e)throw s("throwing error"),n;s("going to error callback"),e(n)}}},function(e,t){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,r){e.exports=!r(39)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(72)("wks"),o=r(55),a=r(28).Symbol,i="function"==typeof a;(e.exports=function(e){return n[e]||(n[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=n},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=n,e.exports=t.default},function(e,t,r){var n=r(34),o=r(53);e.exports=r(30)?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(38),o=r(102),a=r(65),i=Object.defineProperty;t.f=r(30)?Object.defineProperty:function(e,t,r){if(n(e),t=a(t,!0),n(r),o)try{return i(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t,r){var n=r(66),o=r(68);e.exports=function(e){return n(o(e))}},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=(n(r(43)),r(18)),c={inline:_.default.bool,disabled:_.default.bool,title:_.default.string,validationState:_.default.oneOf(["success","warning","error",null]),inputRef:_.default.func},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.inline,r=e.disabled,n=e.validationState,i=e.inputRef,_=e.className,c=e.style,f=e.title,p=e.children,d=(0,a.default)(e,["inline","disabled","validationState","inputRef","className","style","title","children"]),E=(0,s.splitBsProps)(d),h=E[0],b=E[1],m=u.default.createElement("input",(0,o.default)({},b,{ref:i,type:"radio",disabled:r}));if(t){var y,v=((y={})[(0,s.prefix)(h,"inline")]=!0,y.disabled=r,y);return u.default.createElement("label",{className:(0,l.default)(_,v),style:c,title:f},m,p)}var O=(0,o.default)({},(0,s.getClassSet)(h),{disabled:r});return n&&(O["has-"+n]=!0),u.default.createElement("div",{className:(0,l.default)(_,O),style:c},u.default.createElement("label",{title:f},m,p))},t}(u.default.Component);f.propTypes=c,f.defaultProps={inline:!1,disabled:!1,title:""};var p=(0,s.bsClass)("radio",f);t.default=p,e.exports=t.default},function(e,t,r){var n=r(29);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,r){"use strict";t.__esModule=!0,t.Style=t.State=t.DEVICE_SIZES=t.SIZE_MAP=t.Size=void 0;t.Size={LARGE:"large",SMALL:"small",XSMALL:"xsmall"};t.SIZE_MAP={large:"lg",medium:"md",small:"sm",xsmall:"xs",lg:"lg",md:"md",sm:"sm",xs:"xs"};t.DEVICE_SIZES=["lg","md","sm","xs"];t.State={SUCCESS:"success",WARNING:"warning",DANGER:"danger",INFO:"info"};t.Style={DEFAULT:"default",PRIMARY:"primary",LINK:"link",INVERSE:"inverse"}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(105),o=r(73);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";e.exports=function(){}},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return(0,o.default)(n.default.findDOMNode(e))};var n=a(r(25)),o=a(r(45));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e&&e.ownerDocument||document},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=(n(r(43)),r(18)),c={inline:_.default.bool,disabled:_.default.bool,title:_.default.string,validationState:_.default.oneOf(["success","warning","error",null]),inputRef:_.default.func},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.inline,r=e.disabled,n=e.validationState,i=e.inputRef,_=e.className,c=e.style,f=e.title,p=e.children,d=(0,a.default)(e,["inline","disabled","validationState","inputRef","className","style","title","children"]),E=(0,s.splitBsProps)(d),h=E[0],b=E[1],m=u.default.createElement("input",(0,o.default)({},b,{ref:i,type:"checkbox",disabled:r}));if(t){var y,v=((y={})[(0,s.prefix)(h,"inline")]=!0,y.disabled=r,y);return u.default.createElement("label",{className:(0,l.default)(_,v),style:c,title:f},m,p)}var O=(0,o.default)({},(0,s.getClassSet)(h),{disabled:r});return n&&(O["has-"+n]=!0),u.default.createElement("div",{className:(0,l.default)(_,O),style:c},u.default.createElement("label",{title:f},m,p))},t}(u.default.Component);f.propTypes=c,f.defaultProps={inline:!1,disabled:!1,title:""};var p=(0,s.bsClass)("checkbox",f);t.default=p,e.exports=t.default},function(e,t,r){(function(n){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}(t=e.exports=r(171)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var o=0,a=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(o++,"%c"===e&&(a=o))})),e.splice(a,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,r(63))},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,r){var n=r(68);e.exports=function(e){return Object(n(e))}},function(e,t){e.exports={}},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(32)).default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):a(e,t)}:a;function a(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}t.default=o,e.exports=t.default},function(e,t,r){var n=r(101);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports=!0},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+n).toString(36))}},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];e.apply(this,n),t.apply(this,n)}}),null)};t.default=n,e.exports=t.default},function(e,t,r){var n=r(34).f,o=r(35),a=r(31)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,a)&&n(e,a,{configurable:!0,value:t})}},function(e,t,r){var n=r(55)("meta"),o=r(29),a=r(35),i=r(34).f,l=0,u=Object.isExtensible||function(){return!0},_=!r(39)((function(){return u(Object.preventExtensions({}))})),s=function(e){i(e,n,{value:{i:"O"+ ++l,w:{}}})},c=e.exports={KEY:n,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,n)){if(!u(e))return"F";if(!t)return"E";s(e)}return e[n].i},getWeak:function(e,t){if(!a(e,n)){if(!u(e))return!0;if(!t)return!1;s(e)}return e[n].w},onFreeze:function(e){return _&&c.NEED&&u(e)&&!a(e,n)&&s(e),e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=i(r(0)),a=i(r(76));function i(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)((function(e,t,r,a,i){var l=e[t],u=void 0===l?"undefined":n(l);return o.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+r+"`, expected a ReactComponent or a DOMElement. You can usually obtain a ReactComponent or DOMElement from a ReactElement by attaching a ref to it."):"object"===u&&"function"==typeof l.render||1===l.nodeType?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+r+"`, expected a ReactComponent or a DOMElement.")})),e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){return e="function"==typeof e?e():e,a.default.findDOMNode(e)||t};var n,o=r(25),a=(n=o)&&n.__esModule?n:{default:n};e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=(n(r(43)),r(18)),c={htmlFor:_.default.string,srOnly:_.default.bool},f={$bs_formGroup:_.default.object},p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.context.$bs_formGroup,t=e&&e.controlId,r=this.props,n=r.htmlFor,i=void 0===n?t:n,_=r.srOnly,c=r.className,f=(0,a.default)(r,["htmlFor","srOnly","className"]),p=(0,s.splitBsProps)(f),d=p[0],E=p[1],h=(0,o.default)({},(0,s.getClassSet)(d),{"sr-only":_});return u.default.createElement("label",(0,o.default)({},E,{htmlFor:i,className:(0,l.default)(c,h)}))},t}(u.default.Component);p.propTypes=c,p.defaultProps={srOnly:!1},p.contextTypes=f;var d=(0,s.bsClass)("control-label",p);t.default=d,e.exports=t.default},function(e,t){var r,n,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,_=[],s=!1,c=-1;function f(){s&&u&&(s=!1,u.length?_=u.concat(_):c=-1,_.length&&p())}function p(){if(!s){var e=l(f);s=!0;for(var t=_.length;t;){for(u=_,_=[];++c<t;)u&&u[c].run();c=-1,t=_.length}u=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function E(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];_.push(new d(e,t)),1!==_.length||s||l(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=E,o.addListener=E,o.once=E,o.off=E,o.removeListener=E,o.removeAllListeners=E,o.emit=E,o.prependListener=E,o.prependOnceListener=E,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";function n(e){return{factory:function(){return{}},props:e}}r.r(t),r.d(t,"createSimpleSchema",(function(){return n})),r.d(t,"createModelSchema",(function(){return m})),r.d(t,"getDefaultModelSchema",(function(){return h})),r.d(t,"setDefaultModelSchema",(function(){return b})),r.d(t,"serializable",(function(){return C})),r.d(t,"serialize",(function(){return T})),r.d(t,"serializeAll",(function(){return K})),r.d(t,"cancelDeserialize",(function(){return N})),r.d(t,"deserialize",(function(){return k})),r.d(t,"update",(function(){return z})),r.d(t,"primitive",(function(){return y})),r.d(t,"identifier",(function(){return j})),r.d(t,"date",(function(){return q})),r.d(t,"alias",(function(){return F})),r.d(t,"custom",(function(){return V})),r.d(t,"object",(function(){return W})),r.d(t,"child",(function(){return W})),r.d(t,"optional",(function(){return G})),r.d(t,"reference",(function(){return H})),r.d(t,"ref",(function(){return H})),r.d(t,"list",(function(){return $})),r.d(t,"map",(function(){return Y})),r.d(t,"mapAsArray",(function(){return Q})),r.d(t,"raw",(function(){return X})),r.d(t,"SKIP",(function(){return v}));var o={j:function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}};function a(e,t){if(!e){var r=Array.prototype.slice.call(arguments,2),n=[],a=0,i=t.replace(/%([a-zA-Z%])/g,(function(e,t){if("%%"===e)return e;var i=o[t];if("function"==typeof i){var l=r[a++];return n.push(l),i(l)}return e}));throw console&&n.length>0&&console.log.apply(console,n),new Error("[serializr] "+(i||"Illegal State"))}}function i(e){if(e)throw new Error(e)}function l(e,t,r){if(0!==e.length){var n=e.filter((function(){return!0})).length,o=[],a=!1,i=function(e,t,i){t?a||(a=!0,r(t)):(o[e]=i,0==--n&&r(null,o))};e.forEach((function(e,r){t(e,i.bind(null,r),r)}))}else r(null,[])}function u(e){return null===e||"object"!=typeof e&&"function"!=typeof e}function _(e){return e&&e.factory&&e.props}function s(e){return e&&e.serializer&&e.deserializer}function c(e){return"object"==typeof e&&!!e.jsonname}function f(e){return"object"==typeof e&&!0===e.identifier}function p(e,t){for(;e;){if(e===t)return!0;e=e.extends}return!1}function d(e){return e&&"function"==typeof e.keys&&"function"==typeof e.clear}function E(e,t){if(t){a(s(e),"expected a propSchema");["beforeDeserialize","afterDeserialize"].forEach((function(r){"function"==typeof t[r]&&(e[r]=t[r])}))}return e}function h(e){return e?_(e)?e:_(e.serializeInfo)?e.serializeInfo:e.constructor&&e.constructor.serializeInfo?e.constructor.serializeInfo:void 0:null}function b(e,t){return a(_(t)),e.serializeInfo=t}function m(e,t,r){a(e!==Object,"one cannot simply put define a model schema for Object"),a("function"==typeof e,"expected constructor function");var n={targetClass:e,factory:r||function(){return new e},props:t};if(e.prototype.constructor!==Object){var o=h(e.prototype.constructor);o&&o.targetClass!==e&&(n.extends=o)}return b(e,n),n}function y(e){var t={serializer:function(e){return a(u(e),"this value is not primitive: "+e),e},deserializer:function(e,t){u(e)?t(null,e):t("[serializr] this value is not primitive: "+e)}};return t=E(t,e)}var v="undefined"!=typeof Symbol?Symbol("SKIP"):{SKIP:!0},O=y(),P=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,g=/([^\s,]+)/g;function D(e){var t=e.toString().replace(P,""),r=t.slice(t.indexOf("(")+1,t.indexOf(")")).match(g);return null===r&&(r=[]),r}function M(e,t,r,n){var o;if(a(arguments.length>=2,"too few arguments. Please use @serializable as property decorator"),void 0===r&&"function"==typeof t&&t.prototype&&void 0!==n&&"number"==typeof n){a(s(e),"Constructor params must use alias(name)"),a(e.jsonname,"Constructor params must use alias(name)");var i=D(t);i.length>=n&&(r=i[n],e.paramNumber=n,n=void 0,t=t.prototype,o=function(e){for(var r=[],n=0;n<t.constructor.length;n++)Object.keys(e.modelSchema.props).forEach((function(t){var o=e.modelSchema.props[t];o.paramNumber===n&&(r[n]=e.json[o.jsonname])}));return new(Function.prototype.bind.apply(t.constructor,[null].concat(r)))})}a("string"==typeof r,"incorrect usage of @serializable decorator");var l=h(t);return l&&t.constructor.hasOwnProperty("serializeInfo")||(l=m(t.constructor,{},o)),l&&l.targetClass!==t.constructor&&(l=m(t.constructor,{},o)),l.props[r]=e,!n||n.get||n.set||(n.writable=!0),n}function C(e,t,r){if(1===arguments.length){var n=!0===e?O:e;return a(s(n),"@serializable expects prop schema"),M.bind(null,n)}return M(y(),e,t,r)}function T(e,t){a(1===arguments.length||2===arguments.length,"serialize expects one or 2 arguments");var r=1===arguments.length?e:t,n=1===arguments.length?null:e;if(Array.isArray(r)){if(0===r.length)return[];n?"object"!=typeof n&&(n=h(n)):n=h(r[0])}else n?"object"!=typeof n&&(n=h(n)):n=h(r);return a(!!n,"Failed to find default schema for "+e),Array.isArray(r)?r.map((function(e){return R(n,e)})):R(n,r)}function w(e){a(!0===e||e.pattern,"prop schema '*' can only be used with 'true' or a prop def with a 'pattern': "+JSON.stringify(e))}function R(e,t){var r;return a(e&&"object"==typeof e&&e.props,"Expected schema"),a(t&&"object"==typeof t,"Expected object"),r=e.extends?R(e.extends,t):{},Object.keys(e.props).forEach((function(n){var o=e.props[n];if("*"!==n){if(!0===o&&(o=O),!1!==o){var a=o.serializer(t[n],n,t);a!==v&&(r[o.jsonname||n]=a)}}else!function(e,t,r,n){for(var o in w(t),r)if(r.hasOwnProperty(o)&&!(o in e.props)&&(!0===t||t.pattern&&t.pattern.test(o))){var a=r[o];if(!0===t)u(a)&&(n[o]=a);else if(t.props){if((i=T(t,a))===v)return;n[o]=i}else{var i;if((i=t.serializer(a,o,r))===v)return;n[o]=i}}}(e,o,t,r)})),r}var A=new WeakMap;function L(e,t,r,n,o){this.parentContext=e,this.isRoot=!e,this.pendingCallbacks=0,this.pendingRefsCount=0,this.onReadyCb=n||i,this.json=r,this.target=null,this.hasError=!1,this.modelSchema=t,this.isRoot?(this.rootContext=this,this.args=o,this.pendingRefs={},this.resolvedRefs={}):(this.rootContext=e.rootContext,this.args=e.args)}function I(e,t){for(var r in e.props)if("object"==typeof e.props[r]&&e.props[r].jsonname===t)return!0;return!1}function k(e,t,r,n){if(a(arguments.length>=2,"deserialize expects at least 2 arguments"),a(_(e=h(e)),"first argument should be model schema"),Array.isArray(t)){var o=[];return l(t,(function(t,r){var a=B(null,e,t,r,n);o.push(a)}),r||i),o}return B(null,e,t,r,n)}function B(e,t,r,n,o){if(null!=r&&"object"==typeof r){var l=new L(e,t,r,n,o),u=t.factory(l);a(!!u,"No object returned from factory"),l.setTarget(u);var _=l.createCallback(i);return U(l,t,r,u),_(),u}n(null,null)}function U(e,t,r,n){t.extends&&U(e,t.extends,r,n),Object.keys(t.props).forEach((function(o){var l=t.props[o];if("*"!==o){if(!0===l&&(l=O),!1!==l){var _=l.jsonname||o;x((function(t,a){t||void 0===a||function(t,o,a){t.deserializer(o,function i(l){return function(u,_){S((function(r,o){r&&void 0!==o&&"function"==typeof t.afterDeserialize?t.deserializer(o,i(l),e,n[a]):l(r,o)}),u,_,o,r,a,e,t)}}(e.rootContext.createCallback((function(e){e!==v&&(n[a]=e)}))),e,n[a])}(l,a,o)}),r[_],r,_,e,l)}}else!function(e,t,r,n,o){for(var l in w(r),o)if(!(l in t.props)&&!I(t,l)){var _=o[l];if(!0===r)a(u(_),"encountered non primitive value while deserializing '*' properties in property '"+l+"': "+_),n[l]=_;else if(r.pattern.test(l))if(r.factory){var s=B(e,r,_,e.callback||i,{});void 0!==s&&(n[l]=s)}else{function c(e){e!==v&&(n[l]=e)}r.deserializer(_,e.rootContext.createCallback(c),e)}}}(e,t,l,n,r)}))}function x(e,t,r,n,o,a){a&&"function"==typeof a.beforeDeserialize?a.beforeDeserialize(e,t,r,n,o,a):e(null,t)}function S(e,t,r,n,o,a,i,l){l&&"function"==typeof l.afterDeserialize?l.afterDeserialize(e,t,r,n,o,a,i,l):e(t,r)}function W(e,t){a("object"==typeof e||"function"==typeof e,"No modelschema provided. If you are importing it from another file be aware of circular dependencies.");var r={serializer:function(t){return a(_(e=h(e)),"expected modelSchema, got "+e),null==t?t:T(e,t)},deserializer:function(r,n,o){a(_(e=h(e)),"expected modelSchema, got "+e),null!=r?B(o,e,r,n,t):n(null,r)}};return r=E(r,t)}function K(e,t){let r,n=!1;function o(e){var t=h(e);return t&&e.hasOwnProperty("serializeInfo")||b(e,t=m(e,{})),h(e).props["*"]=r,e}return 1===arguments.length?(a("function"==typeof e,"@serializeAll can only be used as class decorator"),r=!0,n=!0):(a("object"==typeof e&&e.test,"@serializeAll pattern doesn't have test"),"function"==typeof t&&(t=W(t)),a("object"==typeof t&&t.serializer,"couldn't resolve schema"),r=Object.assign({},t,{pattern:e})),n?o(e):o}function N(e){a("object"==typeof e&&e&&!Array.isArray(e),"cancelDeserialize needs an object");var t,r=(t=e,A.get(t));r&&r.cancelAwaits()}function z(e,t,r,n,o){var l=2===arguments.length||"function"==typeof arguments[2];l?(e=h(t=arguments[0]),r=arguments[1],n=arguments[2],o=arguments[3]):e=h(e),a(_(e),"update failed to determine schema"),a("object"==typeof t&&t&&!Array.isArray(t),"update needs an object");var u=new L(null,e,r,n,o);u.setTarget(t);var s=u.createCallback(i),c=U(u,e,r,t);return s(),c}function j(e,t){var r,n;"function"==typeof e?(r=e,n=t):n=e,a(!n||"object"==typeof n,"Additional property arguments should be an object, register function should be omitted or a funtion");var o={identifier:!0,serializer:O.serializer,deserializer:function(e,t,n){O.deserializer(e,(function(e,o){!function(e,t,r){r.rootContext.resolve(r.modelSchema,e,r.target)}(o,n.target,n),r&&r(o,n.target,n),t(e,o)}))}};return o=E(o,n)}function q(e){var t={serializer:function(e){return null==e?e:(a(e instanceof Date,"Expected Date object"),e.getTime())},deserializer:function(e,t){t(null,null!=e?new Date(e):e)}};return t=E(t,e)}function F(e,t){return a(e&&"string"==typeof e,"expected prop name as first argument"),a(s(t=t&&!0!==t?t:O),"expected prop schema as second argument"),a(!c(t),"provided prop is already aliased"),{jsonname:e,serializer:t.serializer,deserializer:t.deserializer,identifier:f(t),beforeDeserialize:t.beforeDeserialize,afterDeserialize:t.afterDeserialize}}function V(e,t,r){a("function"==typeof e,"first argument should be function"),a("function"==typeof t,"second argument should be a function or promise");var n={serializer:e,deserializer:function(e,n,o,a){4===t.length?t(e,o,a,n,r):n(null,t(e,o,a,null,r))}};return n=E(n,r)}function G(e,t){a(s(t=t&&!0!==t?t:O),"expected prop schema as second argument");const r=t.serializer;return a("function"==typeof r,"expected prop schema to have a callable serializer"),Object.assign({},t,{serializer:function(...e){const t=r(...e);return void 0===t?v:t}})}function H(e,t,r){a(!!e,"No modelschema provided. If you are importing it from another file be aware of circular dependencies.");var n,o=!1;function i(){if(o=!0,a("string"!=typeof e||t&&"function"==typeof t,"if the reference target is specified by attribute name, a lookup function is required"),a(!t||"function"==typeof t,"second argument should be a lookup function or additional arguments object"),"string"==typeof e)n=e;else{var r=h(e);a(_(r),"expected model schema or string as first argument for 'ref', got "+r),t=t||function(e){return function(t,r,n){n.rootContext.await(e,t,r)}}(r),n=function(e){for(a(_(e));e;){for(var t in e.props)if("object"==typeof e.props[t]&&!0===e.props[t].identifier)return t;e=e.extends}return null}(r),a(!!n,"provided model schema doesn't define an identifier() property and cannot be used by 'ref'.")}}"object"==typeof t&&void 0===r&&(r=t,t=void 0);var l={serializer:function(e){return o||i(),e?e[n]:null},deserializer:function(e,r,n){o||i(),null==e?r(null,e):t(e,r,n)}};return l=E(l,r)}function $(e,t){a(s(e=e||O),"expected prop schema as first argument"),a(!c(e),"provided prop is aliased, please put aliases first");var r={serializer:function(t){return void 0===t?v:(a(t&&"length"in t&&"map"in t,"expected array (like) object"),t.map(e.serializer))},deserializer:function(t,r,n){Array.isArray(t)?l(t,(function(r,o,a){function i(t,i){"function"==typeof e.afterDeserialize?S(l,t,i,r,a,n,e):o(t,i)}function l(t,r){t&&void 0!==r&&"function"==typeof e.afterDeserialize?e.deserializer(r,i,n):o(t,r)}x((function(t,r){t?o(t):e.deserializer(r,i,n)}),r,t,a,n,e)}),r):r("[serializr] expected JSON array")}};return r=E(r,t)}function Y(e,t){a(s(e=e||O),"expected prop schema as first argument"),a(!c(e),"provided prop is aliased, please put aliases first");var r={serializer:function(t){a(t&&"object"==typeof t,"expected object or Map");var r=d(t),n={};if(r)t.forEach((function(t,r){n[r]=e.serializer(t)}));else for(var o in t)n[o]=e.serializer(t[o]);return n},deserializer:function(r,n,o,a){if(r&&"object"==typeof r){var i=Object.keys(r);$(e,t).deserializer(i.map((function(e){return r[e]})),(function(e,t){if(e)n(e);else{var r,o=d(a);o?(a.clear(),r=a):r={};for(var l=0,u=i.length;l<u;l++)o?r.set(i[l],t[l]):r[i[l]]=t[l];n(null,r)}}),o)}else n("[serializr] expected JSON object")}};return r=E(r,t)}function Q(e,t,r){a(s(e=e||O),"expected prop schema as first argument"),a(!!t,"expected key property name as second argument");var n={serializer:function(t){a(t&&"object"==typeof t,"expected object or Map");var r=d(t),n=[];if(r)t.forEach((function(t){n.push(e.serializer(t))}));else for(var o in t)n.push(e.serializer(t[o]));return n},deserializer:function(n,o,a,i){$(e,r).deserializer(n,(function(e,r){if(e)o(e);else{var a,l=d(i);l?(i.clear(),a=i):a={};for(var u=0,_=n.length;u<_;u++)l?a.set(r[u][t],r[u]):a[r[u][t].toString()]=r[u];o(null,a)}}),a)}};return n=E(n,r)}function X(e){var t={serializer:function(e){return e},deserializer:function(e,t){t(null,e)}};return t=E(t,e)}L.prototype.createCallback=function(e){return this.pendingCallbacks++,function(e){var t=!1;return function(){if(!t)return t=!0,e.apply(null,arguments);a(!1,"callback was invoked twice")}}(function(t,r){t?this.hasError||(this.hasError=!0,this.onReadyCb(t),A.delete(this)):this.hasError||(e(r),--this.pendingCallbacks===this.pendingRefsCount&&(this.pendingRefsCount>0?(this.onReadyCb(new Error('Unresolvable references in json: "'+Object.keys(this.pendingRefs).filter((function(e){return this.pendingRefs[e].length>0}),this).join('", "')+'"')),A.delete(this)):(this.onReadyCb(null,this.target),A.delete(this))))}.bind(this))},L.prototype.await=function(e,t,r){if(a(this.isRoot),t in this.resolvedRefs){var n=this.resolvedRefs[t].filter((function(t){return p(t.modelSchema,e)}))[0];if(n)return void r(null,n.value)}this.pendingRefsCount++,this.pendingRefs[t]||(this.pendingRefs[t]=[]),this.pendingRefs[t].push({modelSchema:e,uuid:t,callback:r})},L.prototype.resolve=function(e,t,r){if(a(this.isRoot),this.resolvedRefs[t]||(this.resolvedRefs[t]=[]),this.resolvedRefs[t].push({modelSchema:e,value:r}),t in this.pendingRefs)for(var n=this.pendingRefs[t].length-1;n>=0;n--){var o=this.pendingRefs[t][n];p(e,o.modelSchema)&&(this.pendingRefs[t].splice(n,1),this.pendingRefsCount--,o.callback(null,r))}},L.prototype.setTarget=function(e){this.isRoot&&this.target&&A.delete(this.target),this.target=e,A.set(this.target,this)},L.prototype.cancelAwaits=function(){a(this.isRoot);var e=this;Object.keys(this.pendingRefs).forEach((function(t){e.pendingRefs[t].forEach((function(r){e.pendingRefsCount--,r.callback(new Error("Reference resolution canceled for "+t))}))})),this.pendingRefs={},this.pendingRefsCount=0}},function(e,t,r){var n=r(29);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,r){var n=r(67);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,r){var n=r(70),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t,r){var n=r(72)("keys"),o=r(55);e.exports=function(e){return n[e]||(n[e]=o(e))}},function(e,t,r){var n=r(22),o=r(28),a=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:r(54)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(38),o=r(199),a=r(73),i=r(71)("IE_PROTO"),l=function(){},u=function(){var e,t=r(103)("iframe"),n=a.length;for(t.style.display="none",r(200).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;n--;)delete u.prototype[a[n]];return u()};e.exports=Object.create||function(e,t){var r;return null!==e?(l.prototype=n(e),r=new l,l.prototype=null,r[i]=e):r=u(),void 0===t?r:o(r,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,r,n,o,a,i){var l=o||"<<anonymous>>",u=i||n;if(null==r[n])return t?new Error("Required "+a+" `"+u+"` was not specified in `"+l+"`."):null;for(var _=arguments.length,s=Array(_>6?_-6:0),c=6;c<_;c++)s[c-6]=arguments[c];return e.apply(void 0,[r,n,l,a,u].concat(s))}var r=t.bind(null,!1);return r.isRequired=t.bind(null,!0),r},e.exports=t.default},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,r){var n=r(213),o=r(216),a=r(219),i=r(236);function l(){if("function"!=typeof i)return null;var e=new i;return l=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},i=o&&n;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var _=i?n(e,u):null;_&&(_.get||_.set)?o(r,u,_):r[u]=e[u]}return r.default=e,t&&t.set(e,r),r}},function(e,t,r){e.exports=r(33)},function(e,t,r){t.f=r(31)},function(e,t,r){var n=r(28),o=r(22),a=r(54),i=r(80),l=r(34).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=a?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:i.f(e)})}},function(e,t,r){var n=r(67);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){var n=r(52),o=r(66),a=r(49),i=r(69),l=r(239);e.exports=function(e,t){var r=1==e,u=2==e,_=3==e,s=4==e,c=6==e,f=5==e||c,p=t||l;return function(t,l,d){for(var E,h,b=a(t),m=o(b),y=n(l,d,3),v=i(m.length),O=0,P=r?p(t,v):u?p(t,0):void 0;v>O;O++)if((f||O in m)&&(h=y(E=m[O],O,b),e))if(r)P[O]=h;else if(h)switch(e){case 3:return!0;case 5:return E;case 6:return O;case 2:P.push(E)}else if(s)return!1;return c?-1:_||s?s:P}}},function(e,t,r){var n=r(52),o=r(242),a=r(243),i=r(38),l=r(69),u=r(244),_={},s={};(t=e.exports=function(e,t,r,c,f){var p,d,E,h,b=f?function(){return e}:u(e),m=n(r,c,t?2:1),y=0;if("function"!=typeof b)throw TypeError(e+" is not iterable!");if(a(b)){for(p=l(e.length);p>y;y++)if((h=t?m(i(d=e[y])[0],d[1]):m(e[y]))===_||h===s)return h}else for(E=b.call(e);!(d=E.next()).done;)if((h=o(E,m,d.value,t))===_||h===s)return h}).BREAK=_,t.RETURN=s},function(e,t,r){var n=r(29);e.exports=function(e,t){if(!n(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t,r){var n="",s="",c=t;if("string"==typeof t){if(void 0===r)return e.style[(0,o.default)(t)]||(0,i.default)(e).getPropertyValue((0,a.default)(t));(c={})[t]=r}Object.keys(c).forEach((function(t){var r=c[t];r||0===r?(0,_.default)(t)?s+=t+"("+r+") ":n+=(0,a.default)(t)+": "+r+";":(0,l.default)(e,(0,a.default)(t))})),s&&(n+=u.transform+": "+s+";");e.style.cssText+=";"+n};var o=n(r(118)),a=n(r(263)),i=n(r(265)),l=n(r(266)),u=r(267),_=n(r(268));e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=function(){};n(r(32)).default&&(o=document.addEventListener?function(e,t,r,n){return e.addEventListener(t,r,n||!1)}:document.attachEvent?function(e,t,r){return e.attachEvent("on"+t,(function(t){(t=t||window.event).target=t.target||t.srcElement,t.currentTarget=e,r.call(e,t)}))}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=function(){};n(r(32)).default&&(o=document.addEventListener?function(e,t,r,n){return e.removeEventListener(t,r,n||!1)}:document.attachEvent?function(e,t,r){return e.detachEvent("on"+t,r)}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=d(r(153)),a=d(r(173)),i=d(r(174)),l=d(r(175)),u=d(r(176)),_=d(r(177)),s=d(r(184)),c=d(r(185)),f=d(r(186)),p=d(r(187));
/**
file
copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
function d(e){return e&&e.__esModule?e:{default:e}}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var h=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://api.github.com";E(this,e),this.__apiBase=r,this.__auth=t||{}}return n(e,[{key:"getGist",value:function(e){return new o.default(e,this.__auth,this.__apiBase)}},{key:"getUser",value:function(e){return new a.default(e,this.__auth,this.__apiBase)}},{key:"getOrganization",value:function(e){return new s.default(e,this.__auth,this.__apiBase)}},{key:"getTeam",value:function(e){return new c.default(e,this.__auth,this.__apiBase)}},{key:"getRepo",value:function(e,t){return new _.default(this._getFullName(e,t),this.__auth,this.__apiBase)}},{key:"getIssues",value:function(e,t){return new i.default(this._getFullName(e,t),this.__auth,this.__apiBase)}},{key:"search",value:function(e){return new l.default(e,this.__auth,this.__apiBase)}},{key:"getRateLimit",value:function(){return new u.default(this.__auth,this.__apiBase)}},{key:"getMarkdown",value:function(){return new f.default(this.__auth,this.__apiBase)}},{key:"getProject",value:function(e){return new p.default(e,this.__auth,this.__apiBase)}},{key:"_getFullName",value:function(e,t){var r=e;return t&&(r=e+"/"+t),r}}]),e}();e.exports=h},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,u=i(e),_=1;_<arguments.length;_++){for(var s in r=Object(arguments[_]))o.call(r,s)&&(u[s]=r[s]);if(n){l=n(r);for(var c=0;c<l.length;c++)a.call(r,l[c])&&(u[l[c]]=r[l[c]])}}return u}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(64);function o(e){return"object"==typeof e&&e&&Object.keys(e).map((function(t){return o(e[t])})),e}function a(e){return e?n.object(e):n.custom(o,(function(e){return e}))}t.types={object:a,list:function(e){return n.list(a(e))},map:function(e){return n.map(a(e))}}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(23);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var a;if(r)a=r(t);else if(n.isURLSearchParams(t))a=t.toString();else{var i=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(23),o=r(160),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(l=r(96)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){u.headers[e]=n.merge(a)})),e.exports=u}).call(this,r(63))},function(e,t,r){"use strict";var n=r(23),o=r(161),a=r(93),i=r(163),l=r(166),u=r(167),_=r(97);e.exports=function(e){return new Promise((function(t,s){var c=e.data,f=e.headers;n.isFormData(c)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",E=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+E)}var h=i(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(h,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,s,n),p=null}},p.onabort=function(){p&&(s(_("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){s(_("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),s(_(t,e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var b=r(168),m=(e.withCredentials||u(h))&&e.xsrfCookieName?b.read(e.xsrfCookieName):void 0;m&&(f[e.xsrfHeaderName]=m)}if("setRequestHeader"in p&&n.forEach(f,(function(e,t){void 0===c&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),s(e),p=null)})),void 0===c&&(c=null),p.send(c)}))}},function(e,t,r){"use strict";var n=r(162);e.exports=function(e,t,r,o,a){var i=new Error(e);return n(i,t,r,o,a)}},function(e,t,r){"use strict";var n=r(23);e.exports=function(e,t){t=t||{};var r={},o=["url","method","params","data"],a=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];n.forEach(o,(function(e){void 0!==t[e]&&(r[e]=t[e])})),n.forEach(a,(function(o){n.isObject(t[o])?r[o]=n.deepMerge(e[o],t[o]):void 0!==t[o]?r[o]=t[o]:n.isObject(e[o])?r[o]=n.deepMerge(e[o]):void 0!==e[o]&&(r[o]=e[o])})),n.forEach(i,(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])}));var l=o.concat(a).concat(i),u=Object.keys(t).filter((function(e){return-1===l.indexOf(e)}));return n.forEach(u,(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])})),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){(function(r){var n;!function(r,o){e.exports=function(r){"use strict";var o,a=(r=r||{}).Base64,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=function(e){for(var t={},r=0,n=e.length;r<n;r++)t[e.charAt(r)]=r;return t}(i),u=String.fromCharCode,_=function(e){if(e.length<2)return(t=e.charCodeAt(0))<128?e:t<2048?u(192|t>>>6)+u(128|63&t):u(224|t>>>12&15)+u(128|t>>>6&63)+u(128|63&t);var t=65536+1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320);return u(240|t>>>18&7)+u(128|t>>>12&63)+u(128|t>>>6&63)+u(128|63&t)},s=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,c=function(e){return e.replace(s,_)},f=function(e){var t=[0,2,1][e.length%3],r=e.charCodeAt(0)<<16|(e.length>1?e.charCodeAt(1):0)<<8|(e.length>2?e.charCodeAt(2):0);return[i.charAt(r>>>18),i.charAt(r>>>12&63),t>=2?"=":i.charAt(r>>>6&63),t>=1?"=":i.charAt(63&r)].join("")},p=r.btoa&&"function"==typeof r.btoa?function(e){return r.btoa(e)}:function(e){if(e.match(/[^\x00-\xFF]/))throw new RangeError("The string contains invalid characters.");return e.replace(/[\s\S]{1,3}/g,f)},d=function(e){return p(c(String(e)))},E=function(e){return e.replace(/[+\/]/g,(function(e){return"+"==e?"-":"_"})).replace(/=/g,"")},h=function(e,t){return t?E(d(e)):d(e)};r.Uint8Array&&(o=function(e,t){for(var r="",n=0,o=e.length;n<o;n+=3){var a=e[n],l=e[n+1],u=e[n+2],_=a<<16|l<<8|u;r+=i.charAt(_>>>18)+i.charAt(_>>>12&63)+(void 0!==l?i.charAt(_>>>6&63):"=")+(void 0!==u?i.charAt(63&_):"=")}return t?E(r):r});var b,m=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,y=function(e){switch(e.length){case 4:var t=((7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3))-65536;return u(55296+(t>>>10))+u(56320+(1023&t));case 3:return u((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return u((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},v=function(e){return e.replace(m,y)},O=function(e){var t=e.length,r=t%4,n=(t>0?l[e.charAt(0)]<<18:0)|(t>1?l[e.charAt(1)]<<12:0)|(t>2?l[e.charAt(2)]<<6:0)|(t>3?l[e.charAt(3)]:0),o=[u(n>>>16),u(n>>>8&255),u(255&n)];return o.length-=[0,0,2,1][r],o.join("")},P=r.atob&&"function"==typeof r.atob?function(e){return r.atob(e)}:function(e){return e.replace(/\S{1,4}/g,O)},g=function(e){return P(String(e).replace(/[^A-Za-z0-9\+\/]/g,""))},D=function(e){return String(e).replace(/[-_]/g,(function(e){return"-"==e?"+":"/"})).replace(/[^A-Za-z0-9\+\/]/g,"")},M=function(e){return function(e){return v(P(e))}(D(e))};r.Uint8Array&&(b=function(e){return Uint8Array.from(g(D(e)),(function(e){return e.charCodeAt(0)}))});var C=function(){var e=r.Base64;return r.Base64=a,e};if(r.Base64={VERSION:"2.6.4",atob:g,btoa:p,fromBase64:M,toBase64:h,utob:c,encode:h,encodeURI:function(e){return h(e,!0)},btou:v,decode:M,noConflict:C,fromUint8Array:o,toUint8Array:b},"function"==typeof Object.defineProperty){var T=function(e){return{value:e,enumerable:!1,writable:!0,configurable:!0}};r.Base64.extendString=function(){Object.defineProperty(String.prototype,"fromBase64",T((function(){return M(this)}))),Object.defineProperty(String.prototype,"toBase64",T((function(e){return h(this,e)}))),Object.defineProperty(String.prototype,"toBase64URI",T((function(){return h(this,!0)})))}}r.Meteor&&(Base64=r.Base64);e.exports?e.exports.Base64=r.Base64:void 0===(n=function(){return r.Base64}.apply(t,[]))||(e.exports=n);return{Base64:r.Base64}}(r)}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r?r:this)}).call(this,r(41))},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,r){e.exports=!r(30)&&!r(39)((function(){return 7!=Object.defineProperty(r(103)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(29),o=r(28).document,a=n(o)&&n(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,r){"use strict";var n=r(30),o=r(42),a=r(74),i=r(48),l=r(49),u=r(66),_=Object.assign;e.exports=!_||r(39)((function(){var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach((function(e){t[e]=e})),7!=_({},e)[r]||Object.keys(_({},t)).join("")!=n}))?function(e,t){for(var r=l(e),_=arguments.length,s=1,c=a.f,f=i.f;_>s;)for(var p,d=u(arguments[s++]),E=c?o(d).concat(c(d)):o(d),h=E.length,b=0;h>b;)p=E[b++],n&&!f.call(d,p)||(r[p]=d[p]);return r}:_},function(e,t,r){var n=r(35),o=r(36),a=r(191)(!1),i=r(71)("IE_PROTO");e.exports=function(e,t){var r,l=o(e),u=0,_=[];for(r in l)r!=i&&n(l,r)&&_.push(r);for(;t.length>u;)n(l,r=t[u++])&&(~a(_,r)||_.push(r));return _}},function(e,t,r){var n=r(24),o=r(22),a=r(39);e.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],i={};i[e]=t(r),n(n.S+n.F*a((function(){r(1)})),"Object",i)}},function(e,t,r){var n=r(30),o=r(42),a=r(36),i=r(48).f;e.exports=function(e){return function(t){for(var r,l=a(t),u=o(l),_=u.length,s=0,c=[];_>s;)r=u[s++],n&&!i.call(l,r)||c.push(e?[r,l[r]]:l[r]);return c}}},function(e,t,r){e.exports=r(209)},function(e,t,r){var n=r(48),o=r(53),a=r(36),i=r(65),l=r(35),u=r(102),_=Object.getOwnPropertyDescriptor;t.f=r(30)?_:function(e,t){if(e=a(e),t=i(t,!0),u)try{return _(e,t)}catch(e){}if(l(e,t))return o(!n.f.call(e,t),e[t])}},function(e,t,r){"use strict";var n=r(54),o=r(24),a=r(79),i=r(33),l=r(50),u=r(224),_=r(57),s=r(225),c=r(31)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,r,d,E,h,b){u(r,t,d);var m,y,v,O=function(e){if(!f&&e in M)return M[e];switch(e){case"keys":case"values":return function(){return new r(this,e)}}return function(){return new r(this,e)}},P=t+" Iterator",g="values"==E,D=!1,M=e.prototype,C=M[c]||M["@@iterator"]||E&&M[E],T=C||O(E),w=E?g?O("entries"):T:void 0,R="Array"==t&&M.entries||C;if(R&&(v=s(R.call(new e)))!==Object.prototype&&v.next&&(_(v,P,!0),n||"function"==typeof v[c]||i(v,c,p)),g&&C&&"values"!==C.name&&(D=!0,T=function(){return C.call(this)}),n&&!b||!f&&!D&&M[c]||i(M,c,T),l[t]=T,l[P]=p,E)if(m={values:g?T:O("values"),keys:h?T:O("keys"),entries:w},b)for(y in m)y in M||a(M,y,m[y]);else o(o.P+o.F*(f||D),t,m);return m}},function(e,t,r){r(226);for(var n=r(28),o=r(33),a=r(50),i=r(31)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<l.length;u++){var _=l[u],s=n[_],c=s&&s.prototype;c&&!c[i]&&o(c,i,_),a[_]=a.Array}},function(e,t,r){var n=r(105),o=r(73).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){},function(e,t,r){var n=r(33);e.exports=function(e,t,r){for(var o in t)r&&e[o]?e[o]=t[o]:n(e,o,t[o]);return e}},function(e,t){e.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},function(e,t,r){"use strict";t.__esModule=!0;var n=c(r(32)),o=c(r(3)),a=c(r(59)),i=c(r(0)),l=c(r(25)),u=c(r(60)),_=c(r(44)),s=c(r(256));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var r,n;f(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=p(this,e.call.apply(e,[this].concat(a))),n.getMountNode=function(){return n._portalContainerNode},p(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.UNSAFE_componentWillMount=function(){if(n.default){var e=this.props.container;"function"==typeof e&&(e=e()),e&&!l.default.findDOMNode(e)||this.setContainer(e)}},t.prototype.componentDidMount=function(){this._portalContainerNode?this.props.onRendered&&this.props.onRendered():(this.setContainer(this.props.container),this.forceUpdate(this.props.onRendered))},t.prototype.UNSAFE_componentWillReceiveProps=function(e){e.container!==this.props.container&&this.setContainer(e.container)},t.prototype.componentWillUnmount=function(){this._portalContainerNode=null},t.prototype.setContainer=function(e){this._portalContainerNode=(0,u.default)(e,(0,_.default)(this).body)},t.prototype.render=function(){return this.props.children&&this._portalContainerNode?l.default.createPortal(this.props.children,this._portalContainerNode):null},t}(i.default.Component);d.displayName="Portal",d.propTypes={container:o.default.oneOfType([a.default,o.default.func]),onRendered:o.default.func},t.default=l.default.createPortal?d:s.default,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){var t=(0,i.default)(e),r=(0,a.default)(t),n=t&&t.documentElement,l={top:0,left:0,height:0,width:0};if(!t)return;if(!(0,o.default)(n,e))return l;void 0!==e.getBoundingClientRect&&(l=e.getBoundingClientRect());return l={top:l.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:l.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0),width:(null==l.width?e.offsetWidth:l.width)||0,height:(null==l.height?e.offsetHeight:l.height)||0}};var o=n(r(51)),a=n(r(61)),i=n(r(45));e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){return(0,o.default)(e.replace(a,"ms-"))};var o=n(r(262)),a=/^-ms-/;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){var r=(0,o.default)(e);if(void 0===t)return r?"pageYOffset"in r?r.pageYOffset:r.document.documentElement.scrollTop:e.scrollTop;r?r.scrollTo("pageXOffset"in r?r.pageXOffset:r.document.documentElement.scrollLeft,t):e.scrollTop=t};var o=n(r(61));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t,r,a){return(0,n.default)(e,t,r,a),{remove:function(){(0,o.default)(e,t,r,a)}}};var n=a(r(87)),o=a(r(88));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,r){"use strict";var n=r(9),o=r(78);t.__esModule=!0,t.default=void 0;var a,i=n(r(11)),l=n(r(13)),u=n(r(12)),_=n(r(15)),s=n(r(0)),c=n(r(3)),f=o(r(271)),p={in:c.default.bool,mountOnEnter:c.default.bool,unmountOnExit:c.default.bool,appear:c.default.bool,timeout:c.default.number,onEnter:c.default.func,onEntering:c.default.func,onEntered:c.default.func,onExit:c.default.func,onExiting:c.default.func,onExited:c.default.func},d=((a={})[f.ENTERING]="in",a[f.ENTERED]="in",a),E=function(e){function t(){return e.apply(this,arguments)||this}return(0,u.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=e.children,n=(0,l.default)(e,["className","children"]);return s.default.createElement(f.default,n,(function(e,n){return s.default.cloneElement(r,(0,i.default)({},n,{className:(0,_.default)("fade",t,r.props.className,d[e])}))}))},t}(s.default.Component);E.propTypes=p,E.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1};var h=E;t.default=h,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){if((!o&&0!==o||e)&&a.default){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),o=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return o};var o,a=n(r(32));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return(0,n.default)(e)||(t=e,t&&"body"===t.tagName.toLowerCase())?function(e){var t=(0,o.default)(e),r=(0,n.default)(t).innerWidth;if(!r){var a=t.documentElement.getBoundingClientRect();r=a.right-Math.abs(a.left)}return t.body.clientWidth<r}(e):e.scrollHeight>e.clientHeight;var t};var n=a(r(61)),o=a(r(45));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6__),react_hot_loader__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(143),react_hot_loader__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_hot_loader__WEBPACK_IMPORTED_MODULE_7__),_TopBar__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(126),_FileActions__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(127),_CollectionList__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(131),_GroupList__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(133),_PropertyList__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(135),_RequirementList__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(137),_TaskList__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(139),_MainEditor__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(141),_Store__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},TopologyEditor=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(TopologyEditor,_Component);var _super=_createSuper(TopologyEditor);function TopologyEditor(){var e;_classCallCheck(this,TopologyEditor);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"showResetModal",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"openResetModal",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeResetModal",_descriptor3,_assertThisInitialized(e)),e}return _createClass(TopologyEditor,[{key:"render",value:function(){var e=this,t=[],r=[],n=[],o=[];return _Store__WEBPACK_IMPORTED_MODULE_16__.i.properties.forEach((function(e,r){t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-property",key:"t-box"+r},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{componentClass:"select",placeholder:"",defaultValue:"",className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"read"},"read"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"write"},"write"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"readwrite"},"readwrite")))))})),_Store__WEBPACK_IMPORTED_MODULE_16__.i.tasks.forEach((function(e,t){r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:"0"}))))})),_Store__WEBPACK_IMPORTED_MODULE_16__.i.collections.forEach((function(e,t){n.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-collection",key:"c-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:"0"}))))})),_Store__WEBPACK_IMPORTED_MODULE_16__.i.requirements.forEach((function(e,t){o.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:e.id,key:"option"+t},e.id))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"main-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_TopBar__WEBPACK_IMPORTED_MODULE_8__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:"list-group left-pane"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_FileActions__WEBPACK_IMPORTED_MODULE_9__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_PropertyList__WEBPACK_IMPORTED_MODULE_12__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_TaskList__WEBPACK_IMPORTED_MODULE_14__.a,{propertyCheckboxes:t,requirementOptions:o}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_CollectionList__WEBPACK_IMPORTED_MODULE_10__.a,{taskCheckboxes:r,requirementOptions:o}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GroupList__WEBPACK_IMPORTED_MODULE_11__.a,{taskCheckboxes:r,collectionCheckboxes:n}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_RequirementList__WEBPACK_IMPORTED_MODULE_13__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{type:"button",className:"btn btn-sm btn-default",onClick:this.openResetModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-remove",title:"reset the topology"})," reset"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a,{show:this.showResetModal,onHide:this.closeResetModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Title,null,"Reset topology?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"This will clear all the contents of the topology."),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Unsaved changes will be lost.")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{bsStyle:"danger",onClick:function(){_Store__WEBPACK_IMPORTED_MODULE_16__.i.reset(),e.closeResetModal()}},"Reset"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{onClick:this.closeResetModal},"Cancel"))))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_MainEditor__WEBPACK_IMPORTED_MODULE_15__.a,null)))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),TopologyEditor}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"showResetModal",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"openResetModal",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.showResetModal=!0}}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"closeResetModal",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.showResetModal=!1}}}),_class=_class2))||_class,_default=Object(react_hot_loader__WEBPACK_IMPORTED_MODULE_7__.hot)(module)(TopologyEditor),reactHotLoader,leaveModule;__webpack_exports__.a=_default,reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&(reactHotLoader.register(TopologyEditor,"TopologyEditor","/home/orybalch/dev/DDS-topology-editor/src/components/TopologyEditor.jsx"),reactHotLoader.register(_default,"default","/home/orybalch/dev/DDS-topology-editor/src/components/TopologyEditor.jsx")),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return TopBar}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),_Store__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},TopBar=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(TopBar,_Component);var _super=_createSuper(TopBar);function TopBar(){var e;_classCallCheck(this,TopBar);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"editing",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleEditing",_descriptor2,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.handleTopologyIdChange=function(t){t.preventDefault(),_Store__WEBPACK_IMPORTED_MODULE_3__.i.setTopologyId(t.target[0].form[0].value),e.toggleEditing()},e}return _createClass(TopBar,[{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("nav",{className:"header-pane navbar navbar-inverse",role:"navigation"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"navbar-header"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{type:"button",className:"navbar-toggle","data-toggle":"collapse","data-target":"#bs-example-navbar-collapse-1"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"sr-only"},"Toggle navigation"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"icon-bar"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"icon-bar"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"icon-bar"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a",{className:"navbar-brand",href:"#"},"DDS Topology Editor")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"collapse navbar-collapse",id:"bs-example-navbar-collapse-1"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:"nav navbar-nav"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"active"},this.editing?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{className:"name-change",onSubmit:this.handleTopologyIdChange},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{type:"text",autoFocus:!0,defaultValue:_Store__WEBPACK_IMPORTED_MODULE_3__.i.topologyId}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{type:"submit",value:"ok"})):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a",{href:"#",onClick:this.toggleEditing},_Store__WEBPACK_IMPORTED_MODULE_3__.i.topologyId))))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),TopBar}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"editing",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"toggleEditing",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.editing=!e.editing}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(TopBar,"TopBar","/home/orybalch/dev/DDS-topology-editor/src/components/TopBar.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return FileActions}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),vkbeautify__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(128),vkbeautify__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(vkbeautify__WEBPACK_IMPORTED_MODULE_1__),file_saver__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(129),file_saver__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_2__),mobx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(130),react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(37),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__),github_api__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(89),github_api__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(github_api__WEBPACK_IMPORTED_MODULE_11__),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},FileActions=Object(mobx_react__WEBPACK_IMPORTED_MODULE_4__.a)((_temp=function(_Component){_inherits(FileActions,_Component);var _super=_createSuper(FileActions);function FileActions(){var e;_classCallCheck(this,FileActions);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"remoteFiles",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"error",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"updateRemoteFiles",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"addRemoteFile",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setError",_descriptor5,_assertThisInitialized(e)),e.remoteUser="AliceO2Group",e.remoteRepo="AliceO2",e.remotePath="Common/Topologies",e.fetchBtn=void 0,e.cancelFetch=function(){e.updateRemoteFiles([]),e.setError("")},e.handleFetch=function(t){t.preventDefault();for(var r=t.target[0].form.files,n=0;n<r.length;n++){if(r.item(n).checked)(new github_api__WEBPACK_IMPORTED_MODULE_11___default.a).getRepo(e.remoteUser,e.remoteRepo).getContents("dev","Common/Topologies/"+e.remoteFiles[n].name,!0,(function(t,r){t&&console.log(t),e.processXML(r)}))}e.fetchBtn.hide()},e.fetchTopologies=function(){var t=new github_api__WEBPACK_IMPORTED_MODULE_11___default.a;e.setError(""),t.getRepo(e.remoteUser,e.remoteRepo).getContents("dev",e.remotePath,!0,(function(t,r){if(t)return console.log(t),void("response"in t?e.setError(t.response.data.message+". Rate limit: "+t.response.headers["x-ratelimit-limit"]+", remaining: "+t.response.headers["x-ratelimit-remaining"]+", reset in: "+new Date(1e3*t.response.headers["x-ratelimit-reset"])+"."):e.setError(JSON.stringify(t)));r.forEach((function(t){if(".xml"===t.name.substr(t.name.length-4)){var r={};r.name=t.name,r.url=t.download_url,e.addRemoteFile(r)}else console.log("ignoring file with non-XML extension: "+t.name)}))}))},e.processXML=function(e){var t=new DOMParser,r=[],n=[],o=[],a=[],i=[],l=new _Store__WEBPACK_IMPORTED_MODULE_12__.c,u=t.parseFromString(e,"application/xml");_Store__WEBPACK_IMPORTED_MODULE_12__.i.setTopologyId(u.querySelector("topology").getAttribute("id")),u.querySelectorAll("topology>var").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.h;t.id=e.getAttribute("id"),t.value=e.getAttribute("value"),r.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setVariables(r),u.querySelectorAll("topology>property").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.d;t.id=e.getAttribute("id"),n.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setProperties(n),u.querySelectorAll("topology>declrequirement").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.e;t.id=e.getAttribute("id"),e.querySelectorAll("hostPattern").forEach((function(e){t.type=e.getAttribute("type"),t.value=e.getAttribute("value")})),o.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setRequirements(o),u.querySelectorAll("topology>decltask").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.f;t.id=e.getAttribute("id"),e.querySelectorAll("requirements").forEach((function(e){e.querySelectorAll("id").forEach((function(e){return t.requirements.push(e.textContent)}))})),e.querySelectorAll("exe").forEach((function(e){e.hasAttribute("reachable")&&(t.exeReachable=e.getAttribute("reachable")),t.exeValue=e.textContent})),e.querySelectorAll("env").forEach((function(e){e.hasAttribute("reachable")&&(t.envReachable=e.getAttribute("reachable")),t.envValue=e.textContent})),e.querySelectorAll("properties>id").forEach((function(e){var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.g;r.id=e.textContent,e.hasAttribute("access")?r.access=e.getAttribute("access"):r.access="readwrite",t.properties.push(r)})),a.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setTasks(a),u.querySelectorAll("topology>declcollection").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.a;t.id=e.getAttribute("id"),e.querySelectorAll("requirements").forEach((function(e){e.querySelectorAll("id").forEach((function(e){return t.requirements.push(e.textContent)}))})),e.querySelectorAll("tasks>id").forEach((function(e){return t.tasks.push(e.textContent)})),i.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setCollections(i),l.id=u.querySelector("topology>main").getAttribute("id"),u.querySelectorAll("topology>main>task").forEach((function(e){return l.tasks.push(e.textContent)})),u.querySelectorAll("topology>main>collection").forEach((function(e){return l.collections.push(e.textContent)})),u.querySelectorAll("topology>main>group").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.b;t.id=e.getAttribute("id"),t.n=e.getAttribute("n"),e.querySelectorAll("task").forEach((function(e){return t.tasks.push(e.textContent)})),e.querySelectorAll("collection").forEach((function(e){return t.collections.push(e.textContent)})),l.groups.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setMain(l)},e.handleFileLoad=function(t){var r=new FileReader,n=t.target;r.onload=function(){e.processXML(r.result),n.value=""},r.readAsText(t.target.files[0])},e.handleFileSave=function(){var e=document.implementation.createDocument("","",null),t=e.createElement("topology");t.setAttribute("id",_Store__WEBPACK_IMPORTED_MODULE_12__.i.topologyId),_Store__WEBPACK_IMPORTED_MODULE_12__.i.variables.forEach((function(r){var n=e.createElement("var");n.setAttribute("id",r.id),n.setAttribute("value",r.value),t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(r){var n=e.createElement("property");n.setAttribute("id",r.id),t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.forEach((function(r){var n=e.createElement("declrequirement");n.setAttribute("id",r.id),n.setAttribute("type",r.type),n.setAttribute("value",r.value),t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.tasks.forEach((function(r){var n=e.createElement("decltask");n.setAttribute("id",r.id);var o=e.createElement("exe");if(o.textContent=r.exeValue,""!==r.exeReachable&&o.setAttribute("reachable",r.exeReachable),n.appendChild(o),r.requirements.length>0){var a=e.createElement("requirements");r.requirements.forEach((function(t){var r=e.createElement("id");r.textContent=t,a.appendChild(r)})),n.appendChild(a)}if(""!==r.envValue){var i=e.createElement("env");i.textContent=r.envValue,""!==r.envReachable&&i.setAttribute("reachable",r.envReachable),n.appendChild(i)}if(r.properties.length>0){var l=e.createElement("properties");r.properties.forEach((function(t){var r=e.createElement("id");r.textContent=t.id,r.setAttribute("access",t.access),l.appendChild(r)})),n.appendChild(l)}t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.collections.forEach((function(r){var n=e.createElement("declcollection");if(n.setAttribute("id",r.id),r.requirements.length>0){var o=e.createElement("requirements");r.requirements.forEach((function(t){var r=e.createElement("id");r.textContent=t,o.appendChild(r)})),n.appendChild(o)}var a=e.createElement("tasks");r.tasks.forEach((function(t){var r=e.createElement("id");r.textContent=t,a.appendChild(r)})),n.appendChild(a),t.appendChild(n)}));var r=e.createElement("main");r.setAttribute("id",_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.id),_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.tasks.forEach((function(t){var n=e.createElement("task");n.textContent=t,r.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.collections.forEach((function(t){var n=e.createElement("collection");n.textContent=t,r.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.groups.forEach((function(t){var n=e.createElement("group");n.setAttribute("id",t.id),n.setAttribute("n",t.n),t.tasks.forEach((function(t){var r=e.createElement("task");r.textContent=t,n.appendChild(r)})),t.collections.forEach((function(t){var r=e.createElement("collection");r.textContent=t,n.appendChild(r)})),r.appendChild(n)})),t.appendChild(r),e.appendChild(t);var n=(new XMLSerializer).serializeToString(e);n=vkbeautify__WEBPACK_IMPORTED_MODULE_1___default.a.xml(n);var o=new Blob([n],{type:"text/plain;charset=utf-8"});Object(file_saver__WEBPACK_IMPORTED_MODULE_2__.saveAs)(o,_Store__WEBPACK_IMPORTED_MODULE_12__.i.topologyId+".xml")},e}return _createClass(FileActions,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item file-actions"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row centered"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"btn-file",componentClass:"span",bsSize:"small",title:"load topology file from disk"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-floppy-open"})," load",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{type:"file",onChange:this.handleFileLoad,value:""})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default.a,{trigger:"click",placement:"bottom",ref:function(t){return e.fetchBtn=t},onEnter:this.fetchTopologies,onExit:this.cancelFetch,overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default.a,{className:"fetch-popover",title:"fetch remote topologies",id:"fetchremotetopologies"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Fetching topologies from",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"mono monobg"},this.remoteUser,"/",this.remoteRepo,"/",this.remotePath)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleFetch},""!==this.error?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",{className:"error"},this.error):"",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,this.remoteFiles.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default.a,{title:e.url,key:e.name+t,name:"files",className:"mono"},e.name)}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"load"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){return e.fetchBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{bsSize:"small",title:"fetch topology file from a remote repository"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-cloud-download"})," fetch")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{bsSize:"small",onClick:this.handleFileSave,title:"save the topology to disk"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-floppy-save"})," save"))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),FileActions}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"remoteFiles",[mobx__WEBPACK_IMPORTED_MODULE_3__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"error",[mobx__WEBPACK_IMPORTED_MODULE_3__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"updateRemoteFiles",[mobx__WEBPACK_IMPORTED_MODULE_3__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.remoteFiles=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"addRemoteFile",[mobx__WEBPACK_IMPORTED_MODULE_3__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.remoteFiles.push(t)}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setError",[mobx__WEBPACK_IMPORTED_MODULE_3__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.error=t}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(FileActions,"FileActions","/home/orybalch/dev/DDS-topology-editor/src/components/FileActions.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(e,t){
/**
* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
*
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/vkbeautify/
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*   Pretty print
*
*        vkbeautify.xml(text [,indent_pattern]);
*        vkbeautify.json(text [,indent_pattern]);
*        vkbeautify.css(text [,indent_pattern]);
*        vkbeautify.sql(text [,indent_pattern]);
*
*        @text - String; text to beatufy;
*        @indent_pattern - Integer | String;
*                Integer:  number of white spaces;
*                String:   character string to visualize indentation ( can also be a set of white spaces )
*   Minify
*
*        vkbeautify.xmlmin(text [,preserve_comments]);
*        vkbeautify.jsonmin(text);
*        vkbeautify.cssmin(text [,preserve_comments]);
*        vkbeautify.sqlmin(text);
*
*        @text - String; text to minify;
*        @preserve_comments - Bool; [optional];
*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
*
*   Examples:
*        vkbeautify.xml(text); // pretty print XML
*        vkbeautify.json(text, 4 ); // pretty print JSON
*        vkbeautify.css(text, '. . . .'); // pretty print CSS
*        vkbeautify.sql(text, '----'); // pretty print SQL
*
*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
*        vkbeautify.jsonmin(text);// minify JSON
*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
*        vkbeautify.sqlmin(text);// minify SQL
*
*/
function r(e){var t="    ";if(isNaN(parseInt(e)))t=e;else switch(e){case 1:t=" ";break;case 2:t="  ";break;case 3:t="   ";break;case 4:t="    ";break;case 5:t="     ";break;case 6:t="      ";break;case 7:t="       ";break;case 8:t="        ";break;case 9:t="         ";break;case 10:t="          ";break;case 11:t="           ";break;case 12:t="            "}for(var r=["\n"],n=0;n<100;n++)r.push(r[n]+t);return r}function n(){this.step="    ",this.shift=r(this.step)}function o(e,t){return t-(e.replace(/\(/g,"").length-e.replace(/\)/g,"").length)}function a(e,t){return e.replace(/\s{1,}/g," ").replace(/ AND /gi,"~::~"+t+t+"AND ").replace(/ BETWEEN /gi,"~::~"+t+"BETWEEN ").replace(/ CASE /gi,"~::~"+t+"CASE ").replace(/ ELSE /gi,"~::~"+t+"ELSE ").replace(/ END /gi,"~::~"+t+"END ").replace(/ FROM /gi,"~::~FROM ").replace(/ GROUP\s{1,}BY/gi,"~::~GROUP BY ").replace(/ HAVING /gi,"~::~HAVING ").replace(/ IN /gi," IN ").replace(/ JOIN /gi,"~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi,"~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi,"~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi,"~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi,"~::~RIGHT JOIN ").replace(/ ON /gi,"~::~"+t+"ON ").replace(/ OR /gi,"~::~"+t+t+"OR ").replace(/ ORDER\s{1,}BY/gi,"~::~ORDER BY ").replace(/ OVER /gi,"~::~"+t+"OVER ").replace(/\(\s{0,}SELECT /gi,"~::~(SELECT ").replace(/\)\s{0,}SELECT /gi,")~::~SELECT ").replace(/ THEN /gi," THEN~::~"+t).replace(/ UNION /gi,"~::~UNION~::~").replace(/ USING /gi,"~::~USING ").replace(/ WHEN /gi,"~::~"+t+"WHEN ").replace(/ WHERE /gi,"~::~WHERE ").replace(/ WITH /gi,"~::~WITH ").replace(/ ALL /gi," ALL ").replace(/ AS /gi," AS ").replace(/ ASC /gi," ASC ").replace(/ DESC /gi," DESC ").replace(/ DISTINCT /gi," DISTINCT ").replace(/ EXISTS /gi," EXISTS ").replace(/ NOT /gi," NOT ").replace(/ NULL /gi," NULL ").replace(/ LIKE /gi," LIKE ").replace(/\s{0,}SELECT /gi,"SELECT ").replace(/\s{0,}UPDATE /gi,"UPDATE ").replace(/ SET /gi," SET ").replace(/~::~{1,}/g,"~::~").split("~::~")}n.prototype.xml=function(e,t){var n=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").replace(/\s*xmlns\=/g,"~::~xmlns=").split("~::~"),o=n.length,a=!1,i=0,l="",u=0,_=t?r(t):this.shift;for(u=0;u<o;u++)n[u].search(/<!/)>-1?(l+=_[i]+n[u],a=!0,(n[u].search(/-->/)>-1||n[u].search(/\]>/)>-1||n[u].search(/!DOCTYPE/)>-1)&&(a=!1)):n[u].search(/-->/)>-1||n[u].search(/\]>/)>-1?(l+=n[u],a=!1):/^<\w/.exec(n[u-1])&&/^<\/\w/.exec(n[u])&&/^<[\w:\-\.\,]+/.exec(n[u-1])==/^<\/[\w:\-\.\,]+/.exec(n[u])[0].replace("/","")?(l+=n[u],a||i--):n[u].search(/<\w/)>-1&&-1==n[u].search(/<\//)&&-1==n[u].search(/\/>/)?l=l+=a?n[u]:_[i++]+n[u]:n[u].search(/<\w/)>-1&&n[u].search(/<\//)>-1?l=l+=a?n[u]:_[i]+n[u]:n[u].search(/<\//)>-1?l=l+=a?n[u]:_[--i]+n[u]:n[u].search(/\/>/)>-1?l=l+=a?n[u]:_[i]+n[u]:n[u].search(/<\?/)>-1||n[u].search(/xmlns\:/)>-1||n[u].search(/xmlns\=/)>-1?l+=_[i]+n[u]:l+=n[u];return"\n"==l[0]?l.slice(1):l},n.prototype.json=function(e,t){t=t||this.step;return"undefined"==typeof JSON?e:"string"==typeof e?JSON.stringify(JSON.parse(e),null,t):"object"==typeof e?JSON.stringify(e,null,t):e},n.prototype.css=function(e,t){var n=e.replace(/\s{1,}/g," ").replace(/\{/g,"{~::~").replace(/\}/g,"~::~}~::~").replace(/\;/g,";~::~").replace(/\/\*/g,"~::~/*").replace(/\*\//g,"*/~::~").replace(/~::~\s{0,}~::~/g,"~::~").split("~::~"),o=n.length,a=0,i="",l=0,u=t?r(t):this.shift;for(l=0;l<o;l++)/\{/.exec(n[l])?i+=u[a++]+n[l]:/\}/.exec(n[l])?i+=u[--a]+n[l]:(/\*\\/.exec(n[l]),i+=u[a]+n[l]);return i.replace(/^\n{1,}/,"")},n.prototype.sql=function(e,t){var n=e.replace(/\s{1,}/g," ").replace(/\'/gi,"~::~'").split("~::~"),i=n.length,l=[],u=0,_=this.step,s=0,c="",f=0,p=t?r(t):this.shift;for(f=0;f<i;f++)l=f%2?l.concat(n[f]):l.concat(a(n[f],_));for(i=l.length,f=0;f<i;f++){s=o(l[f],s),/\s{0,}\s{0,}SELECT\s{0,}/.exec(l[f])&&(l[f]=l[f].replace(/\,/g,",\n"+_+_)),/\s{0,}\s{0,}SET\s{0,}/.exec(l[f])&&(l[f]=l[f].replace(/\,/g,",\n"+_+_)),/\s{0,}\(\s{0,}SELECT\s{0,}/.exec(l[f])?c+=p[++u]+l[f]:/\'/.exec(l[f])?(s<1&&u&&u--,c+=l[f]):(c+=p[u]+l[f],s<1&&u&&u--)}return c=c.replace(/^\n{1,}/,"").replace(/\n{1,}/g,"\n")},n.prototype.xmlmin=function(e,t){return(t?e:e.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"").replace(/[ \r\n\t]{1,}xmlns/g," xmlns")).replace(/>\s{0,}</g,"><")},n.prototype.jsonmin=function(e){return"undefined"==typeof JSON?e:JSON.stringify(JSON.parse(e),null,0)},n.prototype.cssmin=function(e,t){return(t?e:e.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"")).replace(/\s{1,}/g," ").replace(/\{\s{1,}/g,"{").replace(/\}\s{1,}/g,"}").replace(/\;\s{1,}/g,";").replace(/\/\*\s{1,}/g,"/*").replace(/\*\/\s{1,}/g,"*/")},n.prototype.sqlmin=function(e){return e.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")")},e.exports=new n},function(e,t,r){(function(r){var n,o,a;o=[],void 0===(a="function"==typeof(n=function(){"use strict";function t(e,t,r){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){i(n.response,t,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function o(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(r){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var a="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r&&r.global===r?r:void 0,i=a.saveAs||("object"!=typeof window||window!==a?function(){}:"download"in HTMLAnchorElement.prototype?function(e,r,i){var l=a.URL||a.webkitURL,u=document.createElement("a");r=r||e.name||"download",u.download=r,u.rel="noopener","string"==typeof e?(u.href=e,u.origin===location.origin?o(u):n(u.href)?t(e,r,i):o(u,u.target="_blank")):(u.href=l.createObjectURL(e),setTimeout((function(){l.revokeObjectURL(u.href)}),4e4),setTimeout((function(){o(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,r,a){if(r=r||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,a),r);else if(n(e))t(e,r,a);else{var i=document.createElement("a");i.href=e,i.target="_blank",setTimeout((function(){o(i)}))}}:function(e,r,n,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof e)return t(e,r,n);var i="application/octet-stream"===e.type,l=/constructor/i.test(a.HTMLElement)||a.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||i&&l)&&"object"==typeof FileReader){var _=new FileReader;_.onloadend=function(){var e=_.result;e=u?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=e:location=e,o=null},_.readAsDataURL(e)}else{var s=a.URL||a.webkitURL,c=s.createObjectURL(e);o?o.location=c:location.href=c,o=null,setTimeout((function(){s.revokeObjectURL(c)}),4e4)}});a.saveAs=i.saveAs=i,e.exports=i})?n.apply(t,o):n)||(e.exports=a)}).call(this,r(41))},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(203)),c=n(r(4)),f=r(18),p={vertical:_.default.bool,justified:_.default.bool,block:(0,s.default)(_.default.bool,(function(e){var t=e.block,r=e.vertical;return t&&!r?new Error("`block` requires `vertical` to be set to have any effect"):null}))},d=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.block,n=t.justified,i=t.vertical,_=t.className,s=(0,a.default)(t,["block","justified","vertical","className"]),p=(0,f.splitBsProps)(s),d=p[0],E=p[1],h=(0,o.default)({},(0,f.getClassSet)(d),((e={})[(0,f.prefix)(d)]=!i,e[(0,f.prefix)(d,"vertical")]=i,e[(0,f.prefix)(d,"justified")]=n,e[(0,f.prefix)(c.default.defaultProps,"block")]=r,e));return u.default.createElement("div",(0,o.default)({},E,{className:(0,l.default)(_,h)}))},t}(u.default.Component);d.propTypes=p,d.defaultProps={block:!1,justified:!1,vertical:!1};var E=(0,f.bsClass)("btn-group",d);t.default=E,e.exports=t.default},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return CollectionList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__),_Collection__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(132),_Store__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},CollectionList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(CollectionList,_Component);var _super=_createSuper(CollectionList);function CollectionList(){var e;_classCallCheck(this,CollectionList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"collectionsVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleCollectionsVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addCollectionBtn=void 0,e.handleAddCollection=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_11__.i.hasCollection(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_11__.a;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(e,n){for(var o=0;o<t.target[0].form[n+1].value;o++)r.tasks.push(e.id)})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_11__.i.addCollection(r),e.addCollectionBtn.hide()}},e}return _createClass(CollectionList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item collections-header"},"collections",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addCollectionBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default.a,{className:"add-cg-popover collection-popover",title:"add new collection",id:"addnewcollection"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddCollection},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this collection:"),this.props.taskCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this collection (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:"",className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),this.props.requirementOptions))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addCollectionBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-collection-btn",title:"add new collection"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.collectionsVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.collectionsVisible?"hide":"show",onClick:this.toggleCollectionsVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.collectionsVisible?"visible-container list-group-item collections":"invisible-container list-group-item collections"},_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Collection__WEBPACK_IMPORTED_MODULE_10__.a,{collection:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),CollectionList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={taskCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,requirementOptions:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"collectionsVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleCollectionsVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.collectionsVisible=!e.collectionsVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(CollectionList,"CollectionList","/home/orybalch/dev/DDS-topology-editor/src/components/CollectionList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Collection}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__),_Store__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Collection=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Collection,_Component);var _super=_createSuper(Collection);function Collection(){var e;_classCallCheck(this,Collection);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editCollectionBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditCollectionButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editCollectionBtn.hide()},e.handleEditCollection=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value)if(_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.filter((function(t){return t.id!==e.props.collection.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_11__.a;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(e,n){for(var o=0;o<t.target[0].form[n+1].value;o++)r.tasks.push(e.id)})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_11__.i.editCollection(e.props.index,r),e.editCollectionBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveCollection=function(){_Store__WEBPACK_IMPORTED_MODULE_11__.i.removeCollection(e.props.index),e.closeDeleteModal()},e}return _createClass(Collection,[{key:"render",value:function(){var e=this,t=[],r=[],n="",o=[];return _Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(r,n){var o=0;e.props.collection.tasks.forEach((function(e){r.id===e&&o++})),t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+n},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:r.id},r.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:o}))))})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.requirements.forEach((function(e,t){r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:e.id,key:"option"+t},e.id))})),this.props.collection.requirements.forEach((function(e,t){var r=_Store__WEBPACK_IMPORTED_MODULE_11__.i.requirements.find((function(t){return t.id===e}));void 0!==r&&(n=e,o.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{key:"requirement"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"requirement-child"}," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"hostname"===r.type?"host name":""},"hostname"===r.type?"HN ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"wnname"===r.type?"SSH worker node name":""},"wnname"===r.type?"WN ":""),e))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"collection"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),this.props.collection.id,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"remove",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.collection.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the collection ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.collection.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveCollection},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default.a,{trigger:"click",placement:"right",ref:function(t){return e.editCollectionBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default.a,{className:"add-cg-popover collection-popover",title:"edit collection",id:this.props.collection.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditCollection},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input",defaultValue:this.props.collection.id})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this collection:"),t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this collection (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:n,className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),r))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditCollectionButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:this.bodyVisible?"visible-container":"invisible-container"},this.props.collection.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})),o))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Collection}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={collection:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Collection,"Collection","/home/orybalch/dev/DDS-topology-editor/src/components/Collection.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return GroupList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8__),_Group__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(134),_Store__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},GroupList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(GroupList,_Component);var _super=_createSuper(GroupList);function GroupList(){var e;_classCallCheck(this,GroupList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"groupsVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleGroupsVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addGroupBtn=void 0,e.handleAddGroup=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_10__.i.hasMainGroup(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_10__.b;r.id=t.target[0].form[0].value,r.n=t.target[0].form[1].value;var n=0;_Store__WEBPACK_IMPORTED_MODULE_10__.i.tasks.forEach((function(e,o){n++;for(var a=0;a<t.target[0].form[o+2].value;a++)r.tasks.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_10__.i.collections.forEach((function(e,o){for(var a=0;a<t.target[0].form[n+o+2].value;a++)r.collections.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_10__.i.addMainGroup(r),e.addGroupBtn.hide()}},e}return _createClass(GroupList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item groups-header"},"groups",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addGroupBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8___default.a,{className:"add-cg-popover group-popover",title:"add new group",id:"addnewgroup"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddGroup},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default.a.Addon,null,"n"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"text",defaultValue:"1"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this group:"),this.props.taskCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Collections in this group:"),this.props.collectionCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addGroupBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-group-btn",title:"add new group"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.groupsVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.groupsVisible?"hide":"show",onClick:this.toggleGroupsVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.groupsVisible?"visible-container list-group-item groups":"invisible-container list-group-item groups"},_Store__WEBPACK_IMPORTED_MODULE_10__.i.main.groups.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Group__WEBPACK_IMPORTED_MODULE_9__.a,{group:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),GroupList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={taskCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,collectionCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"groupsVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleGroupsVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.groupsVisible=!e.groupsVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(GroupList,"GroupList","/home/orybalch/dev/DDS-topology-editor/src/components/GroupList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Group}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__),_Store__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Group=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Group,_Component);var _super=_createSuper(Group);function Group(){var e;_classCallCheck(this,Group);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editGroupBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditGroupButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editGroupBtn.hide()},e.handleEditGroup=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value)if(_Store__WEBPACK_IMPORTED_MODULE_11__.i.main.groups.filter((function(t){return t.id!==e.props.group.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_11__.b;r.id=t.target[0].form[0].value,r.n=t.target[0].form[1].value;var n=0;_Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(e,o){n++;for(var a=0;a<t.target[0].form[o+2].value;a++)r.tasks.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.forEach((function(e,o){for(var a=0;a<t.target[0].form[n+o+2].value;a++)r.collections.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.editMainGroup(e.props.index,r),e.editGroupBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveGroup=function(){_Store__WEBPACK_IMPORTED_MODULE_11__.i.removeMainGroup(e.props.index),e.closeDeleteModal()},e}return _createClass(Group,[{key:"render",value:function(){var e=this,t=[],r=[];return _Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(r,n){var o=0;e.props.group.tasks.forEach((function(e){r.id===e&&o++})),t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+n},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:r.id},r.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:o}))))})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.forEach((function(t,n){var o=0;e.props.group.collections.forEach((function(e){t.id===e&&o++})),r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-collection",key:"c-box"+n},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:t.id},t.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:o}))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),this.props.group.id,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"remove",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.group.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the group ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.group.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveGroup},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default.a,{trigger:"click",placement:"right",ref:function(t){return e.editGroupBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default.a,{className:"add-cg-popover group-popover",title:"edit group",id:this.props.group.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditGroup},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input",defaultValue:this.props.group.id}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"n"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"text",defaultValue:this.props.group.n})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this group:"),t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Collections in this group:"),r,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditGroupButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null," n: "),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"plain"},this.props.group.n)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("hr",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-tasks"},this.props.group.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-collections"},this.props.group.collections.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Group}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={group:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Group,"Group","/home/orybalch/dev/DDS-topology-editor/src/components/Group.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return PropertyList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7__),_Property__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(136),_Store__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},PropertyList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(PropertyList,_Component);var _super=_createSuper(PropertyList);function PropertyList(){var e;_classCallCheck(this,PropertyList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"propertiesVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"togglePropertiesVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addPropertyBtn=void 0,e.handleAddProperty=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_9__.i.hasProperty(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_9__.d;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_9__.i.addProperty(r),e.addPropertyBtn.hide()}},e}return _createClass(PropertyList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item properties-header"},"properties",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addPropertyBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7___default.a,{className:"add-cg-popover property-popover",title:"add new property",id:"addnewproperty"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddProperty},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5___default.a.Addon,null,"id "),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{type:"text",autoFocus:!0,onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addPropertyBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-property-btn",title:"add new property"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.propertiesVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.propertiesVisible?"hide":"show",onClick:this.togglePropertiesVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.propertiesVisible?"visible-container list-group-item properties":"invisible-container list-group-item properties"},_Store__WEBPACK_IMPORTED_MODULE_9__.i.properties.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Property__WEBPACK_IMPORTED_MODULE_8__.a,{property:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),PropertyList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"propertiesVisible",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"togglePropertiesVisibility",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.propertiesVisible=!e.propertiesVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(PropertyList,"PropertyList","/home/orybalch/dev/DDS-topology-editor/src/components/PropertyList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Property}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5__),_Store__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Property=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Property,_Component);var _super=_createSuper(Property);function Property(){var e;_classCallCheck(this,Property);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"editing",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleEditing",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.handleEditProperty=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_6__.i.hasProperty(t.target[0].form[0].value))e.toggleEditing();else{var r=new _Store__WEBPACK_IMPORTED_MODULE_6__.d;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_6__.i.editProperty(e.props.index,r),e.toggleEditing()}},e.handleRemoveProperty=function(){_Store__WEBPACK_IMPORTED_MODULE_6__.i.removeProperty(e.props.index),e.closeDeleteModal()},e}return _createClass(Property,[{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"property"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"element-title",title:this.props.property.id},this.props.property.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"delete",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.property.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the property ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.property.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveProperty},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit",onClick:this.toggleEditing})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,this.editing?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditProperty},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"id: "),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"form-control",type:"text",autoFocus:!0,defaultValue:this.props.property.id}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"btn btn-xs btn-primary",type:"submit"},"ok")):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{title:this.props.property.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"id:")," ",this.props.property.id))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Property}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={property:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"editing",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"toggleEditing",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.editing?e.editing=!1:(e.editing=!0,e.bodyVisible=!0)}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Property,"Property","/home/orybalch/dev/DDS-topology-editor/src/components/Property.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return RequirementList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(62),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(37),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__),_Requirement__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(138),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},RequirementList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(RequirementList,_Component);var _super=_createSuper(RequirementList);function RequirementList(){var e;_classCallCheck(this,RequirementList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"requirementsVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleRequirementsVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addRequirementBtn=void 0,e.handleAddRequirement=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||""===t.target[0].form[3].value||_Store__WEBPACK_IMPORTED_MODULE_12__.i.hasRequirement(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.e;r.id=t.target[0].form[0].value,r.value=t.target[0].form[3].value,console.log(t.target[0].form[3].value),t.target[0].form[1].checked?r.type="hostname":r.type="wnname",_Store__WEBPACK_IMPORTED_MODULE_12__.i.addRequirement(r),e.addRequirementBtn.hide()}},e}return _createClass(RequirementList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item requirements-header"},"requirements",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addRequirementBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default.a,{className:"add-cg-popover requirement-popover",title:"add new requirement",id:"addnewrequirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddRequirement},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"pattern-label"},"Pattern Type"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default.a,{name:"patternType",inline:!0,defaultChecked:!0,title:"host name"},"hostname"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default.a,{name:"patternType",inline:!0,title:"SSH worker node name"},"wnname")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"pattern"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"mono invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addRequirementBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-requirement-btn",title:"add new requirement"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.requirementsVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.requirementsVisible?"hide":"show",onClick:this.toggleRequirementsVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.requirementsVisible?"visible-container list-group-item requirements":"invisible-container list-group-item requirements"},_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Requirement__WEBPACK_IMPORTED_MODULE_11__.a,{requirement:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),RequirementList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"requirementsVisible",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleRequirementsVisibility",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.requirementsVisible=!e.requirementsVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(RequirementList,"RequirementList","/home/orybalch/dev/DDS-topology-editor/src/components/RequirementList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Requirement}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(62),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(37),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12___default=__webpack_require__.n(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12__),_Store__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Requirement=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Requirement,_Component);var _super=_createSuper(Requirement);function Requirement(){var e;_classCallCheck(this,Requirement);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editRequirementBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditRequirementButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editRequirementBtn.hide()},e.handleEditRequirement=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value&&""!==t.target[0].form[3].value)if(_Store__WEBPACK_IMPORTED_MODULE_13__.i.requirements.filter((function(t){return t.id!==e.props.requirement.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_13__.e;r.id=t.target[0].form[0].value,r.value=t.target[0].form[3].value,t.target[0].form[1].checked?r.type="hostname":r.type="wnname",_Store__WEBPACK_IMPORTED_MODULE_13__.i.editRequirement(e.props.index,r),e.editRequirementBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveRequirement=function(){_Store__WEBPACK_IMPORTED_MODULE_13__.i.removeRequirement(e.props.index),e.closeDeleteModal()},e}return _createClass(Requirement,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"element-title",title:this.props.requirement.id},this.props.requirement.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"delete",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.requirement.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the requirement ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.requirement.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveRequirement},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default.a,{trigger:"click",placement:"right",ref:function(t){return e.editRequirementBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default.a,{className:"add-cg-popover requirement-popover",title:"edit requirement",id:this.props.requirement.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditRequirement},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},defaultValue:this.props.requirement.id,className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"pattern-label"},"Pattern Type"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12___default.a,{name:"patternType",inline:!0,defaultChecked:"hostname"===this.props.requirement.type,title:"host name"},"hostname"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12___default.a,{name:"patternType",inline:!0,defaultChecked:"wnname"===this.props.requirement.type,title:"SSH worker node name"},"wnname")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,null,"pattern"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},defaultValue:this.props.requirement.value,className:this.inputValid?"mono":"mono invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"save"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditRequirementButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit task"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"pattern:")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.requirement.value,title:this.props.requirement.value}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"pattern-type",title:"pattern type"},this.props.requirement.type))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Requirement}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={requirement:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Requirement,"Requirement","/home/orybalch/dev/DDS-topology-editor/src/components/Requirement.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return TaskList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(46),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__),_Task__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(140),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},TaskList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(TaskList,_Component);var _super=_createSuper(TaskList);function TaskList(){var e;_classCallCheck(this,TaskList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"tasksVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleTasksVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addTaskBtn=void 0,e.handleAddTask=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||""===t.target[0].form[1].value||_Store__WEBPACK_IMPORTED_MODULE_12__.i.hasTask(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.f;r.id=t.target[0].form[0].value,r.exeValue=t.target[0].form[1].value,t.target[0].form[2].checked&&(r.exeReachable="true"),""!==t.target[0].form[3].value&&(r.envValue=t.target[0].form[3].value,t.target[0].form[4].checked&&(r.envReachable="true")),_Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(e,n){"read"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"read"}):"write"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"write"}):"readwrite"===t.target[0].form[n+5].value&&r.properties.push({id:e.id,access:"readwrite"})})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_12__.i.addTask(r),e.addTaskBtn.hide()}},e}return _createClass(TaskList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item tasks-header"},"tasks",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addTaskBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default.a,{className:"add-cg-popover task-popover",title:"add new task",id:"addnewtask"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddTask},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"exe"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"mono":"mono invalid-input"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,null,"reachable (optional)")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"env"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",className:"mono"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,null,"reachable (optional)"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Properties in this task:"),this.props.propertyCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this task (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:"",className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),this.props.requirementOptions))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addTaskBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-task-btn",title:"add new task"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.tasksVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.tasksVisible?"hide":"show",onClick:this.toggleTasksVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.tasksVisible?"visible-container list-group-item tasks":"invisible-container list-group-item tasks"},_Store__WEBPACK_IMPORTED_MODULE_12__.i.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Task__WEBPACK_IMPORTED_MODULE_11__.a,{task:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),TaskList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={propertyCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,requirementOptions:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"tasksVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleTasksVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.tasksVisible=!e.tasksVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(TaskList,"TaskList","/home/orybalch/dev/DDS-topology-editor/src/components/TaskList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Task}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(46),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Task=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Task,_Component);var _super=_createSuper(Task);function Task(){var e;_classCallCheck(this,Task);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editTaskBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditTaskButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editTaskBtn.hide()},e.handleEditTask=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value&&""!==t.target[0].form[1].value)if(_Store__WEBPACK_IMPORTED_MODULE_12__.i.tasks.filter((function(t){return t.id!==e.props.task.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.f;r.id=t.target[0].form[0].value,r.exeValue=t.target[0].form[1].value,!0===t.target[0].form[2].checked&&(r.exeReachable="true"),""!==t.target[0].form[3].value&&(r.envValue=t.target[0].form[3].value,1==t.target[0].form[4].checked&&(r.envReachable="true")),_Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(e,n){"read"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"read"}):"write"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"write"}):"readwrite"===t.target[0].form[n+5].value&&r.properties.push({id:e.id,access:"readwrite"})})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_12__.i.editTask(e.props.index,r),e.editTaskBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveTask=function(){_Store__WEBPACK_IMPORTED_MODULE_12__.i.removeTask(e.props.index),e.closeDeleteModal()},e}return _createClass(Task,[{key:"render",value:function(){var e,t,r=this,n=[],o=[],a="",i=[],l=!1,u=!1,_=!1;return _Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(e,t){var o="";r.props.task.properties.forEach((function(t){e.id===t.id&&(o=t.access)})),n.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-property",key:"t-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{componentClass:"select",placeholder:"",defaultValue:o,className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"read"},"read"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"write"},"write"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"readwrite"},"readwrite")))))})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.forEach((function(e,t){o.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:e.id,key:"option"+t},e.id))})),""!==this.props.task.exeReachable&&("true"===this.props.task.exeReachable?(e=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is available on worker nodes"},"(reachable)"),l=!0):"false"===this.props.task.exeReachable&&(e=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is not available on worker nodes"},"(unreachable)"))),""!==this.props.task.envValue&&(_=!0,""!==this.props.task.envReachable?"true"===this.props.task.envReachable?(t=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"env:"))," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.envValue}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is available on worker nodes"},"(reachable)")),u=!0):"false"===this.props.task.envReachable&&(t=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"env:"))," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.envValue}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is not available on worker nodes"},"(unreachable)"))):t=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"env:"))," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.envValue}))),this.props.task.requirements.forEach((function(e,t){var r=_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.find((function(t){return t.id===e}));void 0!==r&&(a=e,i.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{key:"requirement"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"requirement-child"}," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"hostname"===r.type?"host name":""},"hostname"===r.type?"HN ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"wnname"===r.type?"SSH worker node name":""},"wnname"===r.type?"WN ":""),e))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"task"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"element-title",title:this.props.task.id},this.props.task.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"delete",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.task.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the task ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.task.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveTask},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default.a,{trigger:"click",placement:"right",ref:function(e){return r.editTaskBtn=e},onClick:function(){return r.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default.a,{className:"add-cg-popover task-popover",title:"edit task",id:this.props.task.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditTask},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",name:"id",onFocus:function(){return r.setInputValidity(!0)},className:this.inputValid?"":"invalid-input",defaultValue:this.props.task.id})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"exe"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",name:"exe",onFocus:function(){return r.setInputValidity(!0)},className:this.inputValid?"mono":"mono invalid-input",defaultValue:this.props.task.exeValue||""}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,{name:"exeReachable",defaultChecked:l},"exe reachable (optional)")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"env"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",name:"env",onFocus:function(){return r.setInputValidity(!0)},className:"mono",defaultValue:_&&this.props.task.envValue||""}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,{name:"envReachable",defaultChecked:u},"env reachable (optional)"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Properties in this task:"),n,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this task (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:a,className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),o))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"save"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditTaskButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit task"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"exe:")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.exeValue,title:this.props.task.exeValue}),e),t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,this.props.task.properties.map((function(e){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{title:e.id,key:e.id}," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"write"===e.access?"write":""},"write"===e.access?"W ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"read"===e.access?"read":""},"read"===e.access?"R ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"readwrite"===e.access?"read & write":""},"readwrite"===e.access?"RW ":""),e.id)}))),i))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Task}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={task:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Task,"Task","/home/orybalch/dev/DDS-topology-editor/src/components/Task.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return MainEditor}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(142),react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2__),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__),_Store__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(2),_class,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},MainEditor=Object(mobx_react__WEBPACK_IMPORTED_MODULE_1__.a)((_temp=function(_Component){_inherits(MainEditor,_Component);var _super=_createSuper(MainEditor);function MainEditor(){var e;_classCallCheck(this,MainEditor);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return(e=_super.call.apply(_super,[this].concat(r))).editTasksInMainBtn=void 0,e.editCollectionsInMainBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.handleEditTasksInMain=function(t){t.preventDefault();var r=new _Store__WEBPACK_IMPORTED_MODULE_7__.c;r.id=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.id,r.collections=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.collections,r.groups=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.groups,_Store__WEBPACK_IMPORTED_MODULE_7__.i.tasks.forEach((function(e,n){for(var o=0;o<t.target[0].form[n].value;o++)r.tasks.push(e.id)})),e.editTasksInMainBtn.hide(),_Store__WEBPACK_IMPORTED_MODULE_7__.i.setMain(r)},e.handleEditCollectionsInMain=function(t){t.preventDefault();var r=new _Store__WEBPACK_IMPORTED_MODULE_7__.c;r.id=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.id,r.tasks=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.tasks,r.groups=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.groups,_Store__WEBPACK_IMPORTED_MODULE_7__.i.collections.forEach((function(e,n){for(var o=0;o<t.target[0].form[n].value;o++)r.collections.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_7__.i.setMain(r),e.editCollectionsInMainBtn.hide()},e}return _createClass(MainEditor,[{key:"render",value:function(){var e=this,t=[],r=[];return _Store__WEBPACK_IMPORTED_MODULE_7__.i.tasks.forEach((function(e,r){var n=0;_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.tasks.forEach((function(t){e.id===t&&n++})),t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+r},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"form-group"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:n}))))})),_Store__WEBPACK_IMPORTED_MODULE_7__.i.collections.forEach((function(e,t){var n=0;_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.collections.forEach((function(t){e.id===t&&n++})),r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-collection",key:"c-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"form-group"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:n}))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"panel panel-default main-pane"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"panel-heading"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",{className:"panel-title"},_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.id)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"main-editor-body",className:"panel-body"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-4 centered main-element main-element-tasks"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",{className:"main-header"},"tasks in main",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default.a,{trigger:"click",placement:"bottom",ref:function(t){return e.editTasksInMainBtn=t},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover task-popover",title:"modify tasks in main",id:"tasksinmain"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditTasksInMain},t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){return e.editTasksInMainBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit add-task-btn edit-main-btn",title:"edit tasks in main"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-tasks"},_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-4 centered main-element main-element-collections"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",{className:"main-header"},"collections in main",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default.a,{trigger:"click",placement:"bottom",ref:function(t){return e.editCollectionsInMainBtn=t},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover collection-popover",title:"modify collections in main",id:"collectionsinmain"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditCollectionsInMain},r,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){return e.editCollectionsInMainBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit add-collection-btn edit-main-btn",title:"edit collections in main"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-collections"},_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.collections.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-4 centered main-element main-element-groups"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",{className:"main-header"},"groups"),_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.groups.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-groups",key:t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,e.id," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2___default.a,null,e.n)))}))))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MainEditor}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class=_temp))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(MainEditor,"MainEditor","/home/orybalch/dev/DDS-topology-editor/src/components/MainEditor.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(21)(module))},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c={pullRight:_.default.bool},f=function(e){function t(){return e.apply(this,arguments)||this}(0,i.default)(t,e);var r=t.prototype;return r.hasContent=function(e){var t=!1;return u.default.Children.forEach(e,(function(e){t||(e||0===e)&&(t=!0)})),t},r.render=function(){var e=this.props,t=e.pullRight,r=e.className,n=e.children,i=(0,a.default)(e,["pullRight","className","children"]),_=(0,s.splitBsProps)(i),c=_[0],f=_[1],p=(0,o.default)({},(0,s.getClassSet)(c),{"pull-right":t,hidden:!this.hasContent(n)});return u.default.createElement("span",(0,o.default)({},f,{className:(0,l.default)(r,p)}),n)},t}(u.default.Component);f.propTypes=c,f.defaultProps={pullRight:!1};var p=(0,s.bsClass)("badge",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";e.exports=r(303)},function(e,t,r){e.exports=r(145)},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n),a=r(25),i=r.n(a),l=r(125);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;i.a.render(o.a.createElement(l.a,null),document.getElementById("main"))},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(90),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,_=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,c=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,d=o?Symbol.for("react.memo"):60115,E=o?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function v(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||m}function O(){}function P(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=v.prototype;var g=P.prototype=new O;g.constructor=P,n(g,v.prototype),g.isPureReactComponent=!0;var D={current:null},M=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,r){var n,o={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)M.call(t,n)&&!C.hasOwnProperty(n)&&(o[n]=t[n]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var _=Array(u),s=0;s<u;s++)_[s]=arguments[s+2];o.children=_}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===o[n]&&(o[n]=u[n]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:D.current}}function w(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var R=/\/+/g,A=[];function L(e,t,r,n){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=r,o.context=n,o.count=0,o}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function k(e,t,r){return null==e?0:function e(t,r,n,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case i:u=!0}}if(u)return n(o,t,""===r?"."+B(t,0):r),1;if(u=0,r=""===r?".":r+":",Array.isArray(t))for(var _=0;_<t.length;_++){var s=r+B(l=t[_],_);u+=e(l,s,n,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=h&&t[h]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),_=0;!(l=t.next()).done;)u+=e(l=l.value,s=r+B(l,_++),n,o);else if("object"===l)throw n=""+t,Error(b(31,"[object Object]"===n?"object with keys {"+Object.keys(t).join(", ")+"}":n,""));return u}(e,"",t,r)}function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function U(e,t){e.func.call(e.context,t,e.count++)}function x(e,t,r){var n=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?S(e,n,r,(function(e){return e})):null!=e&&(w(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+r)),n.push(e))}function S(e,t,r,n,o){var a="";null!=r&&(a=(""+r).replace(R,"$&/")+"/"),k(e,x,t=L(t,a,n,o)),I(t)}var W={current:null};function K(){var e=W.current;if(null===e)throw Error(b(321));return e}var N={ReactCurrentDispatcher:W,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:D,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:function(e,t,r){if(null==e)return e;var n=[];return S(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;k(e,U,t=L(null,null,t,r)),I(t)},count:function(e){return k(e,(function(){return null}),null)},toArray:function(e){var t=[];return S(e,t,null,(function(e){return e})),t},only:function(e){if(!w(e))throw Error(b(143));return e}},t.Component=v,t.Fragment=l,t.Profiler=_,t.PureComponent=P,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error(b(267,e));var o=n({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=D.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var _=e.type.defaultProps;for(s in t)M.call(t,s)&&!C.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==_?_[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){_=Array(s);for(var c=0;c<s;c++)_[c]=arguments[c+2];o.children=_}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=w,t.lazy=function(e){return{$$typeof:E,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return K().useCallback(e,t)},t.useContext=function(e,t){return K().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return K().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return K().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return K().useLayoutEffect(e,t)},t.useMemo=function(e,t){return K().useMemo(e,t)},t.useReducer=function(e,t,r){return K().useReducer(e,t,r)},t.useRef=function(e){return K().useRef(e)},t.useState=function(e){return K().useState(e)},t.version="16.13.1"},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(0),o=r(90),a=r(148);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));function l(e,t,r,n,o,a,i,l,u){var _=Array.prototype.slice.call(arguments,3);try{t.apply(r,_)}catch(e){this.onError(e)}}var u=!1,_=null,s=!1,c=null,f={onError:function(e){u=!0,_=e}};function p(e,t,r,n,o,a,i,s,c){u=!1,_=null,l.apply(f,arguments)}var d=null,E=null,h=null;function b(e,t,r){var n=e.type||"unknown-event";e.currentTarget=h(r),function(e,t,r,n,o,a,l,f,d){if(p.apply(this,arguments),u){if(!u)throw Error(i(198));var E=_;u=!1,_=null,s||(s=!0,c=E)}}(n,t,void 0,e),e.currentTarget=null}var m=null,y={};function v(){if(m)for(var e in y){var t=y[e],r=m.indexOf(e);if(!(-1<r))throw Error(i(96,e));if(!P[r]){if(!t.extractEvents)throw Error(i(97,e));for(var n in P[r]=t,r=t.eventTypes){var o=void 0,a=r[n],l=t,u=n;if(g.hasOwnProperty(u))throw Error(i(99,u));g[u]=a;var _=a.phasedRegistrationNames;if(_){for(o in _)_.hasOwnProperty(o)&&O(_[o],l,u);o=!0}else a.registrationName?(O(a.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(i(98,n,e))}}}}function O(e,t,r){if(D[e])throw Error(i(100,e));D[e]=t,M[e]=t.eventTypes[r].dependencies}var P=[],g={},D={},M={};function C(e){var t,r=!1;for(t in e)if(e.hasOwnProperty(t)){var n=e[t];if(!y.hasOwnProperty(t)||y[t]!==n){if(y[t])throw Error(i(102,t));y[t]=n,r=!0}}r&&v()}var T=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),w=null,R=null,A=null;function L(e){if(e=E(e)){if("function"!=typeof w)throw Error(i(280));var t=e.stateNode;t&&(t=d(t),w(e.stateNode,e.type,t))}}function I(e){R?A?A.push(e):A=[e]:R=e}function k(){if(R){var e=R,t=A;if(A=R=null,L(e),t)for(e=0;e<t.length;e++)L(t[e])}}function B(e,t){return e(t)}function U(e,t,r,n,o){return e(t,r,n,o)}function x(){}var S=B,W=!1,K=!1;function N(){null===R&&null===A||(x(),k())}function z(e,t,r){if(K)return e(t,r);K=!0;try{return S(e,t,r)}finally{K=!1,N()}}var j=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,q=Object.prototype.hasOwnProperty,F={},V={};function G(e,t,r,n,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a}var H={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){H[e]=new G(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];H[t]=new G(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){H[e]=new G(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){H[e]=new G(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){H[e]=new G(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){H[e]=new G(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){H[e]=new G(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){H[e]=new G(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){H[e]=new G(e,5,!1,e.toLowerCase(),null,!1)}));var $=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace($,Y);H[t]=new G(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace($,Y);H[t]=new G(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace($,Y);H[t]=new G(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){H[e]=new G(e,1,!1,e.toLowerCase(),null,!1)})),H.xlinkHref=new G("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){H[e]=new G(e,1,!1,e.toLowerCase(),null,!0)}));var Q=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,r,n){var o=H.hasOwnProperty(t)?H[t]:null;(null!==o?0===o.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!q.call(V,e)||!q.call(F,e)&&(j.test(e)?V[e]=!0:(F[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}Q.hasOwnProperty("ReactCurrentDispatcher")||(Q.ReactCurrentDispatcher={current:null}),Q.hasOwnProperty("ReactCurrentBatchConfig")||(Q.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,re=Z?Symbol.for("react.fragment"):60107,ne=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,_e=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,ce=Z?Symbol.for("react.memo"):60115,fe=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,de="function"==typeof Symbol&&Symbol.iterator;function Ee(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=de&&e[de]||e["@@iterator"])?e:null}function he(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case re:return"Fragment";case te:return"Portal";case oe:return"Profiler";case ne:return"StrictMode";case _e:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case ce:return he(e.type);case pe:return he(e.render);case fe:if(e=1===e._status?e._result:null)return he(e)}return null}function be(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var r="";break e;default:var n=e._debugOwner,o=e._debugSource,a=he(e.type);r=null,n&&(r=he(n.type)),n=a,a="",o?a=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":r&&(a=" (created by "+r+")"),r="\n    in "+(n||"Unknown")+a}t+=r,e=e.return}while(e);return t}function me(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ve(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Oe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=ye(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function Pe(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ge(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=me(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function De(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Me(e,t){De(e,t);var r=me(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?Te(e,t.type,r):t.hasOwnProperty("defaultValue")&&Te(e,t.type,me(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function Te(e,t,r){"number"===t&&e.ownerDocument.activeElement===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function we(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Re(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+me(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Le(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:me(r)}}function Ie(e,t){var r=me(t.value),n=me(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ke(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Be="http://www.w3.org/1999/xhtml",Ue="http://www.w3.org/2000/svg";function xe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?xe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var We,Ke=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,r,n,o){MSApp.execUnsafeLocalFunction((function(){return e(t,r)}))}:e}((function(e,t){if(e.namespaceURI!==Ue||"innerHTML"in e)e.innerHTML=t;else{for((We=We||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=We.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ne(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}function ze(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var je={animationend:ze("Animation","AnimationEnd"),animationiteration:ze("Animation","AnimationIteration"),animationstart:ze("Animation","AnimationStart"),transitionend:ze("Transition","TransitionEnd")},qe={},Fe={};function Ve(e){if(qe[e])return qe[e];if(!je[e])return e;var t,r=je[e];for(t in r)if(r.hasOwnProperty(t)&&t in Fe)return qe[e]=r[t];return e}T&&(Fe=document.createElement("div").style,"AnimationEvent"in window||(delete je.animationend.animation,delete je.animationiteration.animation,delete je.animationstart.animation),"TransitionEvent"in window||delete je.transitionend.transition);var Ge=Ve("animationend"),He=Ve("animationiteration"),$e=Ve("animationstart"),Ye=Ve("transitionend"),Qe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return tt(o),e;if(a===n)return tt(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=a;break}if(u===n){l=!0,n=o,r=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===r){l=!0,r=a,n=o;break}if(u===n){l=!0,n=a,r=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function nt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,r){Array.isArray(e)?e.forEach(t,r):e&&t.call(r,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(t))for(var n=0;n<t.length&&!e.isPropagationStopped();n++)b(e,t[n],r[n]);else t&&b(e,t,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=nt(at,e)),e=at,at=null,e){if(ot(e,it),at)throw Error(i(95));if(s)throw e=c,s=!1,c=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function _t(e){if(!T)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ct(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function ft(e,t,r,n){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=n,o.nativeEvent=t,o.targetInst=r,o}return{topLevelType:e,eventSystemFlags:n,nativeEvent:t,targetInst:r,ancestors:[]}}function pt(e){var t=e.targetInst,r=t;do{if(!r){e.ancestors.push(r);break}var n=r;if(3===n.tag)n=n.stateNode.containerInfo;else{for(;n.return;)n=n.return;n=3!==n.tag?null:n.stateNode.containerInfo}if(!n)break;5!==(t=r.tag)&&6!==t||e.ancestors.push(r),r=Cr(n)}while(r);for(r=0;r<e.ancestors.length;r++){t=e.ancestors[r];var o=ut(e.nativeEvent);n=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===r&&(i|=64);for(var l=null,u=0;u<P.length;u++){var _=P[u];_&&(_=_.extractEvents(n,t,a,o,i))&&(l=nt(l,_))}lt(l)}}function dt(e,t,r){if(!r.has(e)){switch(e){case"scroll":$t(t,"scroll",!0);break;case"focus":case"blur":$t(t,"focus",!0),$t(t,"blur",!0),r.set("blur",null),r.set("focus",null);break;case"cancel":case"close":_t(e)&&$t(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Qe.indexOf(e)&&Ht(e,t)}r.set(e,null)}}var Et,ht,bt,mt=!1,yt=[],vt=null,Ot=null,Pt=null,gt=new Map,Dt=new Map,Mt=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function wt(e,t,r,n,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|r,nativeEvent:o,container:n}}function Rt(e,t){switch(e){case"focus":case"blur":vt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":gt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function At(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=wt(t,r,n,o,a),null!==t&&(null!==(t=Tr(t))&&ht(t)),e):(e.eventSystemFlags|=n,e)}function Lt(e){var t=Cr(e.target);if(null!==t){var r=Ze(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=et(r)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){bt(r)}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var r=Tr(t);return null!==r&&ht(r),e.blockedOn=t,!1}return!0}function kt(e,t,r){It(e)&&r.delete(t)}function Bt(){for(mt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=Tr(e.blockedOn))&&Et(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==vt&&It(vt)&&(vt=null),null!==Ot&&It(Ot)&&(Ot=null),null!==Pt&&It(Pt)&&(Pt=null),gt.forEach(kt),Dt.forEach(kt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,mt||(mt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Bt)))}function xt(e){function t(t){return Ut(t,e)}if(0<yt.length){Ut(yt[0],e);for(var r=1;r<yt.length;r++){var n=yt[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==vt&&Ut(vt,e),null!==Ot&&Ut(Ot,e),null!==Pt&&Ut(Pt,e),gt.forEach(t),Dt.forEach(t),r=0;r<Mt.length;r++)(n=Mt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<Mt.length&&null===(r=Mt[0]).blockedOn;)Lt(r),null===r.blockedOn&&Mt.shift()}var St={},Wt=new Map,Kt=new Map,Nt=["abort","abort",Ge,"animationEnd",He,"animationIteration",$e,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function zt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[n],eventPriority:t},Kt.set(n,t),Wt.set(n,a),St[o]=a}}zt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(Nt,2);for(var jt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),qt=0;qt<jt.length;qt++)Kt.set(jt[qt],0);var Ft=a.unstable_UserBlockingPriority,Vt=a.unstable_runWithPriority,Gt=!0;function Ht(e,t){$t(t,e,!1)}function $t(e,t,r){var n=Kt.get(t);switch(void 0===n?2:n){case 0:n=Yt.bind(null,t,1,e);break;case 1:n=Qt.bind(null,t,1,e);break;default:n=Xt.bind(null,t,1,e)}r?e.addEventListener(t,n,!0):e.addEventListener(t,n,!1)}function Yt(e,t,r,n){W||x();var o=Xt,a=W;W=!0;try{U(o,e,t,r,n)}finally{(W=a)||N()}}function Qt(e,t,r,n){Vt(Ft,Xt.bind(null,e,t,r,n))}function Xt(e,t,r,n){if(Gt)if(0<yt.length&&-1<Ct.indexOf(e))e=wt(null,e,t,r,n),yt.push(e);else{var o=Jt(e,t,r,n);if(null===o)Rt(e,n);else if(-1<Ct.indexOf(e))e=wt(o,e,t,r,n),yt.push(e);else if(!function(e,t,r,n,o){switch(t){case"focus":return vt=At(vt,e,t,r,n,o),!0;case"dragenter":return Ot=At(Ot,e,t,r,n,o),!0;case"mouseover":return Pt=At(Pt,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return gt.set(a,At(gt.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,Dt.set(a,At(Dt.get(a)||null,e,t,r,n,o)),!0}return!1}(o,e,t,r,n)){Rt(e,n),e=ft(e,n,null,t);try{z(pt,e)}finally{ct(e)}}}}function Jt(e,t,r,n){if(null!==(r=Cr(r=ut(n)))){var o=Ze(r);if(null===o)r=null;else{var a=o.tag;if(13===a){if(null!==(r=et(o)))return r;r=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}e=ft(e,n,r,t);try{z(pt,e)}finally{ct(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},er=["Webkit","ms","Moz","O"];function tr(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function rr(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=tr(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(Zt).forEach((function(e){er.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var nr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function or(e,t){if(t){if(nr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function ar(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ir=Be;function lr(e,t){var r=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=M[t];for(var n=0;n<t.length;n++)dt(t[n],e,r)}function ur(){}function _r(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var r,n=sr(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sr(n)}}function fr(){for(var e=window,t=_r();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=_r((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var dr=null,Er=null;function hr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var mr="function"==typeof setTimeout?setTimeout:void 0,yr="function"==typeof clearTimeout?clearTimeout:void 0;function vr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Or(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Pr=Math.random().toString(36).slice(2),gr="__reactInternalInstance$"+Pr,Dr="__reactEventHandlers$"+Pr,Mr="__reactContainere$"+Pr;function Cr(e){var t=e[gr];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Mr]||r[gr]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=Or(e);null!==e;){if(r=e[gr])return r;e=Or(e)}return t}r=(e=r).parentNode}return null}function Tr(e){return!(e=e[gr]||e[Mr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Rr(e){return e[Dr]||null}function Ar(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t){var r=e.stateNode;if(!r)return null;var n=d(r);if(!n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(i(231,t,typeof r));return r}function Ir(e,t,r){(t=Lr(e,r.dispatchConfig.phasedRegistrationNames[t]))&&(r._dispatchListeners=nt(r._dispatchListeners,t),r._dispatchInstances=nt(r._dispatchInstances,e))}function kr(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,r=[];t;)r.push(t),t=Ar(t);for(t=r.length;0<t--;)Ir(r[t],"captured",e);for(t=0;t<r.length;t++)Ir(r[t],"bubbled",e)}}function Br(e,t,r){e&&r&&r.dispatchConfig.registrationName&&(t=Lr(e,r.dispatchConfig.registrationName))&&(r._dispatchListeners=nt(r._dispatchListeners,t),r._dispatchInstances=nt(r._dispatchInstances,e))}function Ur(e){e&&e.dispatchConfig.registrationName&&Br(e._targetInst,null,e)}function xr(e){ot(e,kr)}var Sr=null,Wr=null,Kr=null;function Nr(){if(Kr)return Kr;var e,t,r=Wr,n=r.length,o="value"in Sr?Sr.value:Sr.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return Kr=o.slice(e,1<t?1-t:void 0)}function zr(){return!0}function jr(){return!1}function qr(e,t,r,n){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=r,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(r):"target"===o?this.target=n:this[o]=r[o]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?zr:jr,this.isPropagationStopped=jr,this}function Fr(e,t,r,n){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,r,n),o}return new this(e,t,r,n)}function Vr(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gr(e){e.eventPool=[],e.getPooled=Fr,e.release=Vr}o(qr.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=zr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=zr)},persist:function(){this.isPersistent=zr},isPersistent:jr,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=jr,this._dispatchInstances=this._dispatchListeners=null}}),qr.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},qr.extend=function(e){function t(){}function r(){return n.apply(this,arguments)}var n=this;t.prototype=n.prototype;var a=new t;return o(a,r.prototype),r.prototype=a,r.prototype.constructor=r,r.Interface=o({},n.Interface,e),r.extend=n.extend,Gr(r),r},Gr(qr);var Hr=qr.extend({data:null}),$r=qr.extend({data:null}),Yr=[9,13,27,32],Qr=T&&"CompositionEvent"in window,Xr=null;T&&"documentMode"in document&&(Xr=document.documentMode);var Jr=T&&"TextEvent"in window&&!Xr,Zr=T&&(!Qr||Xr&&8<Xr&&11>=Xr),en=String.fromCharCode(32),tn={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rn=!1;function nn(e,t){switch(e){case"keyup":return-1!==Yr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function on(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var an=!1;var ln={eventTypes:tn,extractEvents:function(e,t,r,n){var o;if(Qr)e:{switch(e){case"compositionstart":var a=tn.compositionStart;break e;case"compositionend":a=tn.compositionEnd;break e;case"compositionupdate":a=tn.compositionUpdate;break e}a=void 0}else an?nn(e,r)&&(a=tn.compositionEnd):"keydown"===e&&229===r.keyCode&&(a=tn.compositionStart);return a?(Zr&&"ko"!==r.locale&&(an||a!==tn.compositionStart?a===tn.compositionEnd&&an&&(o=Nr()):(Wr="value"in(Sr=n)?Sr.value:Sr.textContent,an=!0)),a=Hr.getPooled(a,t,r,n),o?a.data=o:null!==(o=on(r))&&(a.data=o),xr(a),o=a):o=null,(e=Jr?function(e,t){switch(e){case"compositionend":return on(t);case"keypress":return 32!==t.which?null:(rn=!0,en);case"textInput":return(e=t.data)===en&&rn?null:e;default:return null}}(e,r):function(e,t){if(an)return"compositionend"===e||!Qr&&nn(e,t)?(e=Nr(),Kr=Wr=Sr=null,an=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Zr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))?((t=$r.getPooled(tn.beforeInput,t,r,n)).data=e,xr(t)):t=null,null===o?t:null===t?o:[o,t]}},un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function _n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!un[e.type]:"textarea"===t}var sn={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function cn(e,t,r){return(e=qr.getPooled(sn.change,e,t,r)).type="change",I(r),xr(e),e}var fn=null,pn=null;function dn(e){lt(e)}function En(e){if(Oe(wr(e)))return e}function hn(e,t){if("change"===e)return t}var bn=!1;function mn(){fn&&(fn.detachEvent("onpropertychange",yn),pn=fn=null)}function yn(e){if("value"===e.propertyName&&En(pn))if(e=cn(pn,e,ut(e)),W)lt(e);else{W=!0;try{B(dn,e)}finally{W=!1,N()}}}function vn(e,t,r){"focus"===e?(mn(),pn=r,(fn=t).attachEvent("onpropertychange",yn)):"blur"===e&&mn()}function On(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return En(pn)}function Pn(e,t){if("click"===e)return En(t)}function gn(e,t){if("input"===e||"change"===e)return En(t)}T&&(bn=_t("input")&&(!document.documentMode||9<document.documentMode));var Dn={eventTypes:sn,_isInputEventSupported:bn,extractEvents:function(e,t,r,n){var o=t?wr(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=hn;else if(_n(o))if(bn)i=gn;else{i=On;var l=vn}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Pn);if(i&&(i=i(e,t)))return cn(i,r,n);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Te(o,"number",o.value)}},Mn=qr.extend({view:null,detail:null}),Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Tn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function wn(){return Tn}var Rn=0,An=0,Ln=!1,In=!1,kn=Mn.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:wn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Rn;return Rn=e.screenX,Ln?"mousemove"===e.type?e.screenX-t:0:(Ln=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=An;return An=e.screenY,In?"mousemove"===e.type?e.screenY-t:0:(In=!0,0)}}),Bn=kn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Un={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},xn={eventTypes:Un,extractEvents:function(e,t,r,n,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(r.relatedTarget||r.fromElement)||!i&&!a)return null;(a=n.window===n?n:(a=n.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=r.relatedTarget||r.toElement)?Cr(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=kn,u=Un.mouseLeave,_=Un.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Bn,u=Un.pointerLeave,_=Un.pointerEnter,s="pointer");if(e=null==i?a:wr(i),a=null==t?a:wr(t),(u=l.getPooled(u,i,r,n)).type=s+"leave",u.target=e,u.relatedTarget=a,(r=l.getPooled(_,t,r,n)).type=s+"enter",r.target=a,r.relatedTarget=e,s=t,(n=i)&&s)e:{for(_=s,i=0,e=l=n;e;e=Ar(e))i++;for(e=0,t=_;t;t=Ar(t))e++;for(;0<i-e;)l=Ar(l),i--;for(;0<e-i;)_=Ar(_),e--;for(;i--;){if(l===_||l===_.alternate)break e;l=Ar(l),_=Ar(_)}l=null}else l=null;for(_=l,l=[];n&&n!==_&&(null===(i=n.alternate)||i!==_);)l.push(n),n=Ar(n);for(n=[];s&&s!==_&&(null===(i=s.alternate)||i!==_);)n.push(s),s=Ar(s);for(s=0;s<l.length;s++)Br(l[s],"bubbled",u);for(s=n.length;0<s--;)Br(n[s],"captured",r);return 0==(64&o)?[u]:[u,r]}};var Sn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Wn=Object.prototype.hasOwnProperty;function Kn(e,t){if(Sn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!Wn.call(t,r[n])||!Sn(e[r[n]],t[r[n]]))return!1;return!0}var Nn=T&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},jn=null,qn=null,Fn=null,Vn=!1;function Gn(e,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vn||null==jn||jn!==_r(r)?null:("selectionStart"in(r=jn)&&pr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Fn&&Kn(Fn,r)?null:(Fn=r,(e=qr.getPooled(zn.select,qn,e,t)).type="select",e.target=jn,xr(e),e))}var Hn={eventTypes:zn,extractEvents:function(e,t,r,n,o,a){if(!(a=!(o=a||(n.window===n?n.document:9===n.nodeType?n:n.ownerDocument)))){e:{o=Je(o),a=M.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?wr(t):window,e){case"focus":(_n(o)||"true"===o.contentEditable)&&(jn=o,qn=t,Fn=null);break;case"blur":Fn=qn=jn=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Gn(r,n);case"selectionchange":if(Nn)break;case"keydown":case"keyup":return Gn(r,n)}return null}},$n=qr.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yn=qr.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Qn=Mn.extend({relatedTarget:null});function Xn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Mn.extend({key:function(e){if(e.key){var t=Jn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:wn,charCode:function(e){return"keypress"===e.type?Xn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=kn.extend({dataTransfer:null}),ro=Mn.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:wn}),no=qr.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=kn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ao={eventTypes:St,extractEvents:function(e,t,r,n){var o=Wt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Xn(r))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Qn;break;case"click":if(2===r.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=kn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ro;break;case Ge:case He:case $e:e=$n;break;case Ye:e=no;break;case"scroll":e=Mn;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Bn;break;default:e=qr}return xr(t=e.getPooled(o,t,r,n)),t}};if(m)throw Error(i(101));m=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),v(),d=Rr,E=Tr,h=wr,C({SimpleEventPlugin:ao,EnterLeaveEventPlugin:xn,ChangeEventPlugin:Dn,SelectEventPlugin:Hn,BeforeInputEventPlugin:ln});var io=[],lo=-1;function uo(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function _o(e,t){lo++,io[lo]=e.current,e.current=t}var so={},co={current:so},fo={current:!1},po=so;function Eo(e,t){var r=e.type.contextTypes;if(!r)return so;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=(e=e.childContextTypes)}function bo(){uo(fo),uo(co)}function mo(e,t,r){if(co.current!==so)throw Error(i(168));_o(co,t),_o(fo,r)}function yo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,he(t)||"Unknown",a));return o({},r,{},n)}function vo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,po=co.current,_o(co,e),_o(fo,fo.current),!0}function Oo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=yo(e,t,po),n.__reactInternalMemoizedMergedChildContext=e,uo(fo),uo(co),_o(co,e)):uo(fo),_o(fo,r)}var Po=a.unstable_runWithPriority,go=a.unstable_scheduleCallback,Do=a.unstable_cancelCallback,Mo=a.unstable_requestPaint,Co=a.unstable_now,To=a.unstable_getCurrentPriorityLevel,wo=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,Ao=a.unstable_NormalPriority,Lo=a.unstable_LowPriority,Io=a.unstable_IdlePriority,ko={},Bo=a.unstable_shouldYield,Uo=void 0!==Mo?Mo:function(){},xo=null,So=null,Wo=!1,Ko=Co(),No=1e4>Ko?Co:function(){return Co()-Ko};function zo(){switch(To()){case wo:return 99;case Ro:return 98;case Ao:return 97;case Lo:return 96;case Io:return 95;default:throw Error(i(332))}}function jo(e){switch(e){case 99:return wo;case 98:return Ro;case 97:return Ao;case 96:return Lo;case 95:return Io;default:throw Error(i(332))}}function qo(e,t){return e=jo(e),Po(e,t)}function Fo(e,t,r){return e=jo(e),go(e,t,r)}function Vo(e){return null===xo?(xo=[e],So=go(wo,Ho)):xo.push(e),ko}function Go(){if(null!==So){var e=So;So=null,Do(e)}Ho()}function Ho(){if(!Wo&&null!==xo){Wo=!0;var e=0;try{var t=xo;qo(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),xo=null}catch(t){throw null!==xo&&(xo=xo.slice(e+1)),go(wo,Go),t}finally{Wo=!1}}}function $o(e,t,r){return 1073741821-(1+((1073741821-e+t/10)/(r/=10)|0))*r}function Yo(e,t){if(e&&e.defaultProps)for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}var Qo={current:null},Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Qo.current;uo(Qo),e.type._context._currentValue=t}function ra(e,t){for(;null!==e;){var r=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==r&&r.childExpirationTime<t&&(r.childExpirationTime=t);else{if(!(null!==r&&r.childExpirationTime<t))break;r.childExpirationTime=t}e=e.return}}function na(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ai=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ua(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function _a(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function sa(e,t){var r=e.alternate;null!==r&&la(r,e),null===(r=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=r.next,r.next=t)}function ca(e,t,r,n){var a=e.updateQueue;aa=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var u=i.next;i.next=l.next,l.next=u}i=l,a.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==i){u=i.next;var _=a.baseState,s=0,c=null,f=null,p=null;if(null!==u)for(var d=u;;){if((l=d.expirationTime)<n){var E={expirationTime:d.expirationTime,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null};null===p?(f=p=E,c=_):p=p.next=E,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null}),au(l,d.suspenseConfig);e:{var h=e,b=d;switch(l=t,E=r,b.tag){case 1:if("function"==typeof(h=b.payload)){_=h.call(E,_,l);break e}_=h;break e;case 3:h.effectTag=-4097&h.effectTag|64;case 0:if(null==(l="function"==typeof(h=b.payload)?h.call(E,_,l):h))break e;_=o({},_,l);break e;case 2:aa=!0}}null!==d.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[d]:l.push(d))}if(null===(d=d.next)||d===u){if(null===(l=a.shared.pending))break;d=i.next=l.next,l.next=u,a.baseQueue=i=l,a.shared.pending=null}}null===p?c=_:p.next=f,a.baseState=c,a.baseQueue=p,iu(s),e.expirationTime=s,e.memoizedState=_}}function fa(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=o,o=r,"function"!=typeof n)throw Error(i(191,n));n.call(o)}}}var pa=Q.ReactCurrentBatchConfig,da=(new n.Component).refs;function Ea(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:o({},t,r),e.memoizedState=r,0===e.expirationTime&&(e.updateQueue.baseState=r)}var ha={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternalFiber;var n=Gl(),o=pa.suspense;(o=ua(n=Hl(n,e,o),o)).payload=t,null!=r&&(o.callback=r),_a(e,o),$l(e,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternalFiber;var n=Gl(),o=pa.suspense;(o=ua(n=Hl(n,e,o),o)).tag=1,o.payload=t,null!=r&&(o.callback=r),_a(e,o),$l(e,n)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var r=Gl(),n=pa.suspense;(n=ua(r=Hl(r,e,n),n)).tag=2,null!=t&&(n.callback=t),_a(e,n),$l(e,r)}};function ba(e,t,r,n,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Kn(r,n)||!Kn(o,a))}function ma(e,t,r){var n=!1,o=so,a=t.contextType;return"object"==typeof a&&null!==a?a=oa(a):(o=ho(t)?po:co.current,a=(n=null!=(n=t.contextTypes))?Eo(e,o):so),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternalFiber=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function va(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=da,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=oa(a):(a=ho(t)?po:co.current,o.context=Eo(e,a)),ca(e,r,o,n),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ea(e,t,a,r),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ha.enqueueReplaceState(o,o.state,null),ca(e,r,o,n),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Oa=Array.isArray;function Pa(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=n.refs;t===da&&(t=n.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function ga(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Da(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.effectTag=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.effectTag=2,r):n:(t.effectTag=2,r):r}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Ru(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function _(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=Pa(e,t,r),n.return=e,n):((n=Tu(r.type,r.key,r.props,null,e.mode,n)).ref=Pa(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Au(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function c(e,t,r,n,a){return null===t||7!==t.tag?((t=wu(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function f(e,t,r){if("string"==typeof t||"number"==typeof t)return(t=Ru(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(r=Tu(t.type,t.key,t.props,null,e.mode,r)).ref=Pa(e,null,t),r.return=e,r;case te:return(t=Au(t,e.mode,r)).return=e,t}if(Oa(t)||Ee(t))return(t=wu(t,e.mode,r,null)).return=e,t;ga(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==o?null:u(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return r.key===o?r.type===re?c(e,t,r.props.children,n,o):_(e,t,r,n):null;case te:return r.key===o?s(e,t,r,n):null}if(Oa(r)||Ee(r))return null!==o?null:c(e,t,r,n,null);ga(e,r)}return null}function d(e,t,r,n,o){if("string"==typeof n||"number"==typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return e=e.get(null===n.key?r:n.key)||null,n.type===re?c(t,e,n.props.children,o,n.key):_(t,e,n,o);case te:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(Oa(n)||Ee(n))return c(t,e=e.get(r)||null,n,o,null);ga(t,n)}return null}function E(o,i,l,u){for(var _=null,s=null,c=i,E=i=0,h=null;null!==c&&E<l.length;E++){c.index>E?(h=c,c=null):h=c.sibling;var b=p(o,c,l[E],u);if(null===b){null===c&&(c=h);break}e&&c&&null===b.alternate&&t(o,c),i=a(b,i,E),null===s?_=b:s.sibling=b,s=b,c=h}if(E===l.length)return r(o,c),_;if(null===c){for(;E<l.length;E++)null!==(c=f(o,l[E],u))&&(i=a(c,i,E),null===s?_=c:s.sibling=c,s=c);return _}for(c=n(o,c);E<l.length;E++)null!==(h=d(c,o,E,l[E],u))&&(e&&null!==h.alternate&&c.delete(null===h.key?E:h.key),i=a(h,i,E),null===s?_=h:s.sibling=h,s=h);return e&&c.forEach((function(e){return t(o,e)})),_}function h(o,l,u,_){var s=Ee(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var c=s=null,E=l,h=l=0,b=null,m=u.next();null!==E&&!m.done;h++,m=u.next()){E.index>h?(b=E,E=null):b=E.sibling;var y=p(o,E,m.value,_);if(null===y){null===E&&(E=b);break}e&&E&&null===y.alternate&&t(o,E),l=a(y,l,h),null===c?s=y:c.sibling=y,c=y,E=b}if(m.done)return r(o,E),s;if(null===E){for(;!m.done;h++,m=u.next())null!==(m=f(o,m.value,_))&&(l=a(m,l,h),null===c?s=m:c.sibling=m,c=m);return s}for(E=n(o,E);!m.done;h++,m=u.next())null!==(m=d(E,o,h,m.value,_))&&(e&&null!==m.alternate&&E.delete(null===m.key?h:m.key),l=a(m,l,h),null===c?s=m:c.sibling=m,c=m);return e&&E.forEach((function(e){return t(o,e)})),s}return function(e,n,a,u){var _="object"==typeof a&&null!==a&&a.type===re&&null===a.key;_&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ee:e:{for(s=a.key,_=n;null!==_;){if(_.key===s){switch(_.tag){case 7:if(a.type===re){r(e,_.sibling),(n=o(_,a.props.children)).return=e,e=n;break e}break;default:if(_.elementType===a.type){r(e,_.sibling),(n=o(_,a.props)).ref=Pa(e,_,a),n.return=e,e=n;break e}}r(e,_);break}t(e,_),_=_.sibling}a.type===re?((n=wu(a.props.children,e.mode,u,a.key)).return=e,e=n):((u=Tu(a.type,a.key,a.props,null,e.mode,u)).ref=Pa(e,n,a),u.return=e,e=u)}return l(e);case te:e:{for(_=a.key;null!==n;){if(n.key===_){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Au(a,e.mode,u)).return=e,e=n}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Ru(a,e.mode,u)).return=e,e=n),l(e);if(Oa(a))return E(e,n,a,u);if(Ee(a))return h(e,n,a,u);if(s&&ga(e,a),void 0===a&&!_)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return r(e,n)}}var Ma=Da(!0),Ca=Da(!1),Ta={},wa={current:Ta},Ra={current:Ta},Aa={current:Ta};function La(e){if(e===Ta)throw Error(i(174));return e}function Ia(e,t){switch(_o(Aa,t),_o(Ra,e),_o(wa,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Se(null,"");break;default:t=Se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(wa),_o(wa,t)}function ka(){uo(wa),uo(Ra),uo(Aa)}function Ba(e){La(Aa.current);var t=La(wa.current),r=Se(t,e.type);t!==r&&(_o(Ra,e),_o(wa,r))}function Ua(e){Ra.current===e&&(uo(wa),uo(Ra))}var xa={current:0};function Sa(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Wa(e,t){return{responder:e,props:t}}var Ka=Q.ReactCurrentDispatcher,Na=Q.ReactCurrentBatchConfig,za=0,ja=null,qa=null,Fa=null,Va=!1;function Ga(){throw Error(i(321))}function Ha(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!Sn(e[r],t[r]))return!1;return!0}function $a(e,t,r,n,o,a){if(za=a,ja=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Ka.current=null===e||null===e.memoizedState?bi:mi,e=r(n,o),t.expirationTime===za){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,Fa=qa=null,t.updateQueue=null,Ka.current=yi,e=r(n,o)}while(t.expirationTime===za)}if(Ka.current=hi,t=null!==qa&&null!==qa.next,za=0,Fa=qa=ja=null,Va=!1,t)throw Error(i(300));return e}function Ya(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Fa?ja.memoizedState=Fa=e:Fa=Fa.next=e,Fa}function Qa(){if(null===qa){var e=ja.alternate;e=null!==e?e.memoizedState:null}else e=qa.next;var t=null===Fa?ja.memoizedState:Fa.next;if(null!==t)Fa=t,qa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(qa=e).memoizedState,baseState:qa.baseState,baseQueue:qa.baseQueue,queue:qa.queue,next:null},null===Fa?ja.memoizedState=Fa=e:Fa=Fa.next=e}return Fa}function Xa(e,t){return"function"==typeof t?t(e):t}function Ja(e){var t=Qa(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=qa,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var u=l=a=null,_=o;do{var s=_.expirationTime;if(s<za){var c={expirationTime:_.expirationTime,suspenseConfig:_.suspenseConfig,action:_.action,eagerReducer:_.eagerReducer,eagerState:_.eagerState,next:null};null===u?(l=u=c,a=n):u=u.next=c,s>ja.expirationTime&&(ja.expirationTime=s,iu(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:_.suspenseConfig,action:_.action,eagerReducer:_.eagerReducer,eagerState:_.eagerState,next:null}),au(s,_.suspenseConfig),n=_.eagerReducer===e?_.eagerState:e(n,_.action);_=_.next}while(null!==_&&_!==o);null===u?a=n:u.next=l,Sn(n,t.memoizedState)||(Ai=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function Za(e){var t=Qa(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Sn(a,t.memoizedState)||(Ai=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function ei(e){var t=Ya();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xa,lastRenderedState:e}).dispatch=Ei.bind(null,ja,e),[t.memoizedState,e]}function ti(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=ja.updateQueue)?(t={lastEffect:null},ja.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function ri(){return Qa().memoizedState}function ni(e,t,r,n){var o=Ya();ja.effectTag|=e,o.memoizedState=ti(1|t,r,void 0,void 0===n?null:n)}function oi(e,t,r,n){var o=Qa();n=void 0===n?null:n;var a=void 0;if(null!==qa){var i=qa.memoizedState;if(a=i.destroy,null!==n&&Ha(n,i.deps))return void ti(t,r,a,n)}ja.effectTag|=e,o.memoizedState=ti(1|t,r,a,n)}function ai(e,t){return ni(516,4,e,t)}function ii(e,t){return oi(516,4,e,t)}function li(e,t){return oi(4,2,e,t)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(e,t,r){return r=null!=r?r.concat([e]):null,oi(4,2,ui.bind(null,t,e),r)}function si(){}function ci(e,t){return Ya().memoizedState=[e,void 0===t?null:t],e}function fi(e,t){var r=Qa();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ha(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function pi(e,t){var r=Qa();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ha(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function di(e,t,r){var n=zo();qo(98>n?98:n,(function(){e(!0)})),qo(97<n?97:n,(function(){var n=Na.suspense;Na.suspense=void 0===t?null:t;try{e(!1),r()}finally{Na.suspense=n}}))}function Ei(e,t,r){var n=Gl(),o=pa.suspense;o={expirationTime:n=Hl(n,e,o),suspenseConfig:o,action:r,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===ja||null!==a&&a===ja)Va=!0,o.expirationTime=za,ja.expirationTime=za;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,r);if(o.eagerReducer=a,o.eagerState=l,Sn(l,i))return}catch(e){}$l(e,n)}}var hi={readContext:oa,useCallback:Ga,useContext:Ga,useEffect:Ga,useImperativeHandle:Ga,useLayoutEffect:Ga,useMemo:Ga,useReducer:Ga,useRef:Ga,useState:Ga,useDebugValue:Ga,useResponder:Ga,useDeferredValue:Ga,useTransition:Ga},bi={readContext:oa,useCallback:ci,useContext:oa,useEffect:ai,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,ni(4,2,ui.bind(null,t,e),r)},useLayoutEffect:function(e,t){return ni(4,2,e,t)},useMemo:function(e,t){var r=Ya();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Ya();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ei.bind(null,ja,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Ya().memoizedState=e},useState:ei,useDebugValue:si,useResponder:Wa,useDeferredValue:function(e,t){var r=ei(e),n=r[0],o=r[1];return ai((function(){var r=Na.suspense;Na.suspense=void 0===t?null:t;try{o(e)}finally{Na.suspense=r}}),[e,t]),n},useTransition:function(e){var t=ei(!1),r=t[0];return t=t[1],[ci(di.bind(null,t,e),[t,e]),r]}},mi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:_i,useLayoutEffect:li,useMemo:pi,useReducer:Ja,useRef:ri,useState:function(){return Ja(Xa)},useDebugValue:si,useResponder:Wa,useDeferredValue:function(e,t){var r=Ja(Xa),n=r[0],o=r[1];return ii((function(){var r=Na.suspense;Na.suspense=void 0===t?null:t;try{o(e)}finally{Na.suspense=r}}),[e,t]),n},useTransition:function(e){var t=Ja(Xa),r=t[0];return t=t[1],[fi(di.bind(null,t,e),[t,e]),r]}},yi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:_i,useLayoutEffect:li,useMemo:pi,useReducer:Za,useRef:ri,useState:function(){return Za(Xa)},useDebugValue:si,useResponder:Wa,useDeferredValue:function(e,t){var r=Za(Xa),n=r[0],o=r[1];return ii((function(){var r=Na.suspense;Na.suspense=void 0===t?null:t;try{o(e)}finally{Na.suspense=r}}),[e,t]),n},useTransition:function(e){var t=Za(Xa),r=t[0];return t=t[1],[fi(di.bind(null,t,e),[t,e]),r]}},vi=null,Oi=null,Pi=!1;function gi(e,t){var r=Du(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Di(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Mi(e){if(Pi){var t=Oi;if(t){var r=t;if(!Di(e,t)){if(!(t=vr(r.nextSibling))||!Di(e,t))return e.effectTag=-1025&e.effectTag|2,Pi=!1,void(vi=e);gi(vi,r)}vi=e,Oi=vr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Pi=!1,vi=e}}function Ci(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;vi=e}function Ti(e){if(e!==vi)return!1;if(!Pi)return Ci(e),Pi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=Oi;t;)gi(e,t),t=vr(t.nextSibling);if(Ci(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){Oi=vr(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}Oi=null}}else Oi=vi?vr(e.stateNode.nextSibling):null;return!0}function wi(){Oi=vi=null,Pi=!1}var Ri=Q.ReactCurrentOwner,Ai=!1;function Li(e,t,r,n){t.child=null===e?Ca(t,null,r,n):Ma(t,e.child,r,n)}function Ii(e,t,r,n,o){r=r.render;var a=t.ref;return na(t,o),n=$a(e,t,r,n,a,o),null===e||Ai?(t.effectTag|=1,Li(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),$i(e,t,o))}function ki(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!=typeof i||Mu(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Tu(r.type,null,n,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Bi(e,t,i,n,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:Kn)(o,n)&&e.ref===t.ref)?$i(e,t,a):(t.effectTag|=1,(e=Cu(i,n)).ref=t.ref,e.return=t,t.child=e)}function Bi(e,t,r,n,o,a){return null!==e&&Kn(e.memoizedProps,n)&&e.ref===t.ref&&(Ai=!1,o<a)?(t.expirationTime=e.expirationTime,$i(e,t,a)):xi(e,t,r,n,a)}function Ui(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.effectTag|=128)}function xi(e,t,r,n,o){var a=ho(r)?po:co.current;return a=Eo(t,a),na(t,o),r=$a(e,t,r,n,a,o),null===e||Ai?(t.effectTag|=1,Li(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),$i(e,t,o))}function Si(e,t,r,n,o){if(ho(r)){var a=!0;vo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ma(t,r,n),va(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,_=r.contextType;"object"==typeof _&&null!==_?_=oa(_):_=Eo(t,_=ho(r)?po:co.current);var s=r.getDerivedStateFromProps,c="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==n||u!==_)&&ya(t,i,n,_),aa=!1;var f=t.memoizedState;i.state=f,ca(t,n,i,o),u=t.memoizedState,l!==n||f!==u||fo.current||aa?("function"==typeof s&&(Ea(t,r,s,n),u=t.memoizedState),(l=aa||ba(t,r,l,n,f,u,_))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=_,n=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),n=!1)}else i=t.stateNode,la(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Yo(t.type,l),u=i.context,"object"==typeof(_=r.contextType)&&null!==_?_=oa(_):_=Eo(t,_=ho(r)?po:co.current),(c="function"==typeof(s=r.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==n||u!==_)&&ya(t,i,n,_),aa=!1,u=t.memoizedState,i.state=u,ca(t,n,i,o),f=t.memoizedState,l!==n||u!==f||fo.current||aa?("function"==typeof s&&(Ea(t,r,s,n),f=t.memoizedState),(s=aa||ba(t,r,l,n,u,f,_))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,f,_),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,f,_)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=n,t.memoizedState=f),i.props=n,i.state=f,i.context=_,n=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),n=!1);return Wi(e,t,r,n,a,o)}function Wi(e,t,r,n,o,a){Ui(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return o&&Oo(t,r,!1),$i(e,t,a);n=t.stateNode,Ri.current=t;var l=i&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.effectTag|=1,null!==e&&i?(t.child=Ma(t,e.child,null,a),t.child=Ma(t,null,l,a)):Li(e,t,l,a),t.memoizedState=n.state,o&&Oo(t,r,!0),t.child}function Ki(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ia(e,t.containerInfo)}var Ni,zi,ji,qi={dehydrated:null,retryTime:0};function Fi(e,t,r){var n,o=t.mode,a=t.pendingProps,i=xa.current,l=!1;if((n=0!=(64&t.effectTag))||(n=0!=(2&i)&&(null===e||null!==e.memoizedState)),n?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),_o(xa,1&i),null===e){if(void 0!==a.fallback&&Mi(t),l){if(l=a.fallback,(a=wu(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(r=wu(l,o,r,null)).return=t,a.sibling=r,t.memoizedState=qi,t.child=a,r}return o=a.children,t.memoizedState=null,t.child=Ca(t,null,o,r)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(r=Cu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(r.child=l;null!==l;)l.return=r,l=l.sibling;return(o=Cu(o,a)).return=t,r.sibling=o,r.childExpirationTime=0,t.memoizedState=qi,t.child=r,o}return r=Ma(t,e.child,a.children,r),t.memoizedState=null,t.child=r}if(e=e.child,l){if(l=a.fallback,(a=wu(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(r=wu(l,o,r,null)).return=t,a.sibling=r,r.effectTag|=2,a.childExpirationTime=0,t.memoizedState=qi,t.child=a,r}return t.memoizedState=null,t.child=Ma(t,e,a.children,r)}function Vi(e,t){e.expirationTime<t&&(e.expirationTime=t);var r=e.alternate;null!==r&&r.expirationTime<t&&(r.expirationTime=t),ra(e.return,t)}function Gi(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Hi(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(Li(e,t,n.children,r),0!=(2&(n=xa.current)))n=1&n|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vi(e,r);else if(19===e.tag)Vi(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(_o(xa,n),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Sa(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Gi(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Sa(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Gi(t,!0,r,null,a,t.lastEffect);break;case"together":Gi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function $i(e,t,r){null!==e&&(t.dependencies=e.dependencies);var n=t.expirationTime;if(0!==n&&iu(n),t.childExpirationTime<r)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Cu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Cu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function Yi(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Qi(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&bo(),null;case 3:return ka(),uo(fo),uo(co),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||!Ti(t)||(t.effectTag|=4),null;case 5:Ua(t),r=La(Aa.current);var a=t.type;if(null!==e&&null!=t.stateNode)zi(e,t,a,n,r),e.ref!==t.ref&&(t.effectTag|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=La(wa.current),Ti(t)){n=t.stateNode,a=t.type;var l=t.memoizedProps;switch(n[gr]=t,n[Dr]=l,a){case"iframe":case"object":case"embed":Ht("load",n);break;case"video":case"audio":for(e=0;e<Qe.length;e++)Ht(Qe[e],n);break;case"source":Ht("error",n);break;case"img":case"image":case"link":Ht("error",n),Ht("load",n);break;case"form":Ht("reset",n),Ht("submit",n);break;case"details":Ht("toggle",n);break;case"input":ge(n,l),Ht("invalid",n),lr(r,"onChange");break;case"select":n._wrapperState={wasMultiple:!!l.multiple},Ht("invalid",n),lr(r,"onChange");break;case"textarea":Le(n,l),Ht("invalid",n),lr(r,"onChange")}for(var u in or(a,l),e=null,l)if(l.hasOwnProperty(u)){var _=l[u];"children"===u?"string"==typeof _?n.textContent!==_&&(e=["children",_]):"number"==typeof _&&n.textContent!==""+_&&(e=["children",""+_]):D.hasOwnProperty(u)&&null!=_&&lr(r,u)}switch(a){case"input":ve(n),Ce(n,l,!0);break;case"textarea":ve(n),ke(n);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(n.onclick=ur)}r=e,t.updateQueue=r,null!==r&&(t.effectTag|=4)}else{switch(u=9===r.nodeType?r:r.ownerDocument,e===ir&&(e=xe(a)),e===ir?"script"===a?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=u.createElement(a,{is:n.is}):(e=u.createElement(a),"select"===a&&(u=e,n.multiple?u.multiple=!0:n.size&&(u.size=n.size))):e=u.createElementNS(e,a),e[gr]=t,e[Dr]=n,Ni(e,t),t.stateNode=e,u=ar(a,n),a){case"iframe":case"object":case"embed":Ht("load",e),_=n;break;case"video":case"audio":for(_=0;_<Qe.length;_++)Ht(Qe[_],e);_=n;break;case"source":Ht("error",e),_=n;break;case"img":case"image":case"link":Ht("error",e),Ht("load",e),_=n;break;case"form":Ht("reset",e),Ht("submit",e),_=n;break;case"details":Ht("toggle",e),_=n;break;case"input":ge(e,n),_=Pe(e,n),Ht("invalid",e),lr(r,"onChange");break;case"option":_=we(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},_=o({},n,{value:void 0}),Ht("invalid",e),lr(r,"onChange");break;case"textarea":Le(e,n),_=Ae(e,n),Ht("invalid",e),lr(r,"onChange");break;default:_=n}or(a,_);var s=_;for(l in s)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?rr(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Ke(e,c):"children"===l?"string"==typeof c?("textarea"!==a||""!==c)&&Ne(e,c):"number"==typeof c&&Ne(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(D.hasOwnProperty(l)?null!=c&&lr(r,l):null!=c&&X(e,l,c,u))}switch(a){case"input":ve(e),Ce(e,n,!1);break;case"textarea":ve(e),ke(e);break;case"option":null!=n.value&&e.setAttribute("value",""+me(n.value));break;case"select":e.multiple=!!n.multiple,null!=(r=n.value)?Re(e,!!n.multiple,r,!1):null!=n.defaultValue&&Re(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof _.onClick&&(e.onclick=ur)}hr(a,n)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)ji(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(i(166));r=La(Aa.current),La(wa.current),Ti(t)?(r=t.stateNode,n=t.memoizedProps,r[gr]=t,r.nodeValue!==n&&(t.effectTag|=4)):((r=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[gr]=t,t.stateNode=r)}return null;case 13:return uo(xa),n=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=r,t):(r=null!==n,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ti(t):(n=null!==(a=e.memoizedState),r||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&xa.current)?Tl===vl&&(Tl=Ol):(Tl!==vl&&Tl!==Ol||(Tl=Pl),0!==Il&&null!==Dl&&(ku(Dl,Cl),Bu(Dl,Il)))),(r||n)&&(t.effectTag|=4),null);case 4:return ka(),null;case 10:return ta(t),null;case 17:return ho(t.type)&&bo(),null;case 19:if(uo(xa),null===(n=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=n.rendering)){if(a)Yi(n,!1);else if(Tl!==vl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Sa(l))){for(t.effectTag|=64,Yi(n,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=t.child;null!==n;)l=r,(a=n).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),n=n.sibling;return _o(xa,1&xa.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=Sa(l))){if(t.effectTag|=64,a=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),Yi(n,!0),null===n.tail&&"hidden"===n.tailMode&&!l.alternate)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*No()-n.renderingStartTime>n.tailExpiration&&1<r&&(t.effectTag|=64,a=!0,Yi(n,!1),t.expirationTime=t.childExpirationTime=r-1);n.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=n.last)?r.sibling=l:t.child=l,n.last=l)}return null!==n.tail?(0===n.tailExpiration&&(n.tailExpiration=No()+500),r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=No(),r.sibling=null,t=xa.current,_o(xa,a?1&t|2:1&t),r):null}throw Error(i(156,t.tag))}function Xi(e){switch(e.tag){case 1:ho(e.type)&&bo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(ka(),uo(fo),uo(co),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ua(e),null;case 13:return uo(xa),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(xa),null;case 4:return ka(),null;case 10:return ta(e),null;default:return null}}function Ji(e,t){return{value:e,source:t,stack:be(t)}}Ni=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},zi=function(e,t,r,n,a){var i=e.memoizedProps;if(i!==n){var l,u,_=t.stateNode;switch(La(wa.current),e=null,r){case"input":i=Pe(_,i),n=Pe(_,n),e=[];break;case"option":i=we(_,i),n=we(_,n),e=[];break;case"select":i=o({},i,{value:void 0}),n=o({},n,{value:void 0}),e=[];break;case"textarea":i=Ae(_,i),n=Ae(_,n),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof n.onClick&&(_.onclick=ur)}for(l in or(r,n),r=null,i)if(!n.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in _=i[l])_.hasOwnProperty(u)&&(r||(r={}),r[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(D.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in n){var s=n[l];if(_=null!=i?i[l]:void 0,n.hasOwnProperty(l)&&s!==_&&(null!=s||null!=_))if("style"===l)if(_){for(u in _)!_.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(r||(r={}),r[u]="");for(u in s)s.hasOwnProperty(u)&&_[u]!==s[u]&&(r||(r={}),r[u]=s[u])}else r||(e||(e=[]),e.push(l,r)),r=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,_=_?_.__html:void 0,null!=s&&_!==s&&(e=e||[]).push(l,s)):"children"===l?_===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(D.hasOwnProperty(l)?(null!=s&&lr(a,l),e||_===s||(e=[])):(e=e||[]).push(l,s))}r&&(e=e||[]).push("style",r),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},ji=function(e,t,r,n){r!==n&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var r=t.source,n=t.stack;null===n&&null!==r&&(n=be(r)),null!==r&&he(r.type),t=t.value,null!==e&&1===e.tag&&he(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){mu(e,t)}else t.current=null}function rl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Yo(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function nl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.destroy;r.destroy=void 0,void 0!==n&&n()}r=r.next}while(r!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function al(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:return void ol(3,r);case 1:if(e=r.stateNode,4&r.effectTag)if(null===t)e.componentDidMount();else{var n=r.elementType===r.type?t.memoizedProps:Yo(r.type,t.memoizedProps);e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=r.updateQueue)&&fa(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}fa(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.effectTag&&hr(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&xt(r)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,r){switch("function"==typeof Pu&&Pu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e.next;qo(97<r?97:r,(function(){var e=n;do{var r=e.destroy;if(void 0!==r){var o=t;try{r()}catch(e){mu(o,e)}}e=e.next}while(e!==n)}))}break;case 1:tl(t),"function"==typeof(r=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){mu(e,t)}}(t,r);break;case 5:tl(t);break;case 4:sl(e,t,r)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function _l(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var r=t;break e}t=t.return}throw Error(i(160))}switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.effectTag&&(Ne(t,""),r.effectTag&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||ul(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.effectTag)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.effectTag)){r=r.stateNode;break e}}n?function e(t,r,n){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,r?8===n.nodeType?n.parentNode.insertBefore(t,r):n.insertBefore(t,r):(8===n.nodeType?(r=n.parentNode).insertBefore(t,n):(r=n).appendChild(t),null!==(n=n._reactRootContainer)&&void 0!==n||null!==r.onclick||(r.onclick=ur));else if(4!==o&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,r,t):function e(t,r,n){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,r?n.insertBefore(t,r):n.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,r,t)}function sl(e,t,r){for(var n,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(n=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:n=n.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,_=a,s=r,c=_;;)if(il(u,c,s),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===_)break e;for(;null===c.sibling;){if(null===c.return||c.return===_)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}o?(u=n,_=a.stateNode,8===u.nodeType?u.parentNode.removeChild(_):u.removeChild(_)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(il(e,a,r),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function cl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void nl(3,t);case 1:return;case 5:var r=t.stateNode;if(null!=r){var n=t.memoizedProps,o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Dr]=n,"input"===e&&"radio"===n.type&&null!=n.name&&De(r,n),ar(e,o),t=ar(e,n),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?rr(r,u):"dangerouslySetInnerHTML"===l?Ke(r,u):"children"===l?Ne(r,u):X(r,l,u,t)}switch(e){case"input":Me(r,n);break;case"textarea":Ie(r,n);break;case"select":t=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(e=n.value)?Re(r,!!n.multiple,e,!1):t!==!!n.multiple&&(null!=n.defaultValue?Re(r,!!n.multiple,n.defaultValue,!0):Re(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,xt(t.containerInfo)));case 12:return;case 13:if(r=t,null===t.memoizedState?n=!1:(n=!0,r=t.child,Bl=No()),null!==r)e:for(e=r;;){if(5===e.tag)a=e.stateNode,n?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=tr("display",o));else if(6===e.tag)e.stateNode.nodeValue=n?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===r)break;for(;null===e.sibling;){if(null===e.return||e.return===r)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fl(t);case 19:return void fl(t);case 17:return}throw Error(i(163))}function fl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new Zi),t.forEach((function(t){var n=vu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,r){(r=ua(r,null)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){xl||(xl=!0,Sl=n),el(e,t)},r}function El(e,t,r){(r=ua(r,null)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var o=t.value;r.payload=function(){return el(e,t),n(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(r.callback=function(){"function"!=typeof n&&(null===Wl?Wl=new Set([this]):Wl.add(this),el(e,t));var r=t.stack;this.componentDidCatch(t.value,{componentStack:null!==r?r:""})}),r}var hl,bl=Math.ceil,ml=Q.ReactCurrentDispatcher,yl=Q.ReactCurrentOwner,vl=0,Ol=3,Pl=4,gl=0,Dl=null,Ml=null,Cl=0,Tl=vl,wl=null,Rl=1073741823,Al=1073741823,Ll=null,Il=0,kl=!1,Bl=0,Ul=null,xl=!1,Sl=null,Wl=null,Kl=!1,Nl=null,zl=90,jl=null,ql=0,Fl=null,Vl=0;function Gl(){return 0!=(48&gl)?1073741821-(No()/10|0):0!==Vl?Vl:Vl=1073741821-(No()/10|0)}function Hl(e,t,r){if(0==(2&(t=t.mode)))return 1073741823;var n=zo();if(0==(4&t))return 99===n?1073741823:1073741822;if(0!=(16&gl))return Cl;if(null!==r)e=$o(e,0|r.timeoutMs||5e3,250);else switch(n){case 99:e=1073741823;break;case 98:e=$o(e,150,100);break;case 97:case 96:e=$o(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Dl&&e===Cl&&--e,e}function $l(e,t){if(50<ql)throw ql=0,Fl=null,Error(i(185));if(null!==(e=Yl(e,t))){var r=zo();1073741823===t?0!=(8&gl)&&0==(48&gl)?Zl(e):(Xl(e),0===gl&&Go()):Xl(e),0==(4&gl)||98!==r&&99!==r||(null===jl?jl=new Map([[e,t]]):(void 0===(r=jl.get(e))||r>t)&&jl.set(e,t))}}function Yl(e,t){e.expirationTime<t&&(e.expirationTime=t);var r=e.alternate;null!==r&&r.expirationTime<t&&(r.expirationTime=t);var n=e.return,o=null;if(null===n&&3===e.tag)o=e.stateNode;else for(;null!==n;){if(r=n.alternate,n.childExpirationTime<t&&(n.childExpirationTime=t),null!==r&&r.childExpirationTime<t&&(r.childExpirationTime=t),null===n.return&&3===n.tag){o=n.stateNode;break}n=n.return}return null!==o&&(Dl===o&&(iu(t),Tl===Pl&&ku(o,Cl)),Bu(o,t)),o}function Ql(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Iu(e,t=e.firstPendingTime))return t;var r=e.lastPingedTime;return 2>=(e=r>(e=e.nextKnownPendingLevel)?r:e)&&t!==e?0:e}function Xl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vo(Zl.bind(null,e));else{var t=Ql(e),r=e.callbackNode;if(0===t)null!==r&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var n=Gl();if(1073741823===t?n=99:1===t||2===t?n=95:n=0>=(n=10*(1073741821-t)-10*(1073741821-n))?99:250>=n?98:5250>=n?97:95,null!==r){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=n)return;r!==ko&&Do(r)}e.callbackExpirationTime=t,e.callbackPriority=n,t=1073741823===t?Vo(Zl.bind(null,e)):Fo(n,Jl.bind(null,e),{timeout:10*(1073741821-t)-No()}),e.callbackNode=t}}}function Jl(e,t){if(Vl=0,t)return Uu(e,t=Gl()),Xl(e),null;var r=Ql(e);if(0!==r){if(t=e.callbackNode,0!=(48&gl))throw Error(i(327));if(Eu(),e===Dl&&r===Cl||ru(e,r),null!==Ml){var n=gl;gl|=16;for(var o=ou();;)try{uu();break}catch(t){nu(e,t)}if(ea(),gl=n,ml.current=o,1===Tl)throw t=wl,ru(e,r),ku(e,r),Xl(e),t;if(null===Ml)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=r,n=Tl,Dl=null,n){case vl:case 1:throw Error(i(345));case 2:Uu(e,2<r?2:r);break;case Ol:if(ku(e,r),r===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(o)),1073741823===Rl&&10<(o=Bl+500-No())){if(kl){var a=e.lastPingedTime;if(0===a||a>=r){e.lastPingedTime=r,ru(e,r);break}}if(0!==(a=Ql(e))&&a!==r)break;if(0!==n&&n!==r){e.lastPingedTime=n;break}e.timeoutHandle=mr(fu.bind(null,e),o);break}fu(e);break;case Pl:if(ku(e,r),r===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(o)),kl&&(0===(o=e.lastPingedTime)||o>=r)){e.lastPingedTime=r,ru(e,r);break}if(0!==(o=Ql(e))&&o!==r)break;if(0!==n&&n!==r){e.lastPingedTime=n;break}if(1073741823!==Al?n=10*(1073741821-Al)-No():1073741823===Rl?n=0:(n=10*(1073741821-Rl)-5e3,0>(n=(o=No())-n)&&(n=0),(r=10*(1073741821-r)-o)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*bl(n/1960))-n)&&(n=r)),10<n){e.timeoutHandle=mr(fu.bind(null,e),n);break}fu(e);break;case 5:if(1073741823!==Rl&&null!==Ll){a=Rl;var l=Ll;if(0>=(n=0|l.busyMinDurationMs)?n=0:(o=0|l.busyDelayMs,n=(a=No()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+n-a),10<n){ku(e,r),e.timeoutHandle=mr(fu.bind(null,e),n);break}}fu(e);break;default:throw Error(i(329))}if(Xl(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&gl))throw Error(i(327));if(Eu(),e===Dl&&t===Cl||ru(e,t),null!==Ml){var r=gl;gl|=16;for(var n=ou();;)try{lu();break}catch(t){nu(e,t)}if(ea(),gl=r,ml.current=n,1===Tl)throw r=wl,ru(e,t),ku(e,t),Xl(e),r;if(null!==Ml)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Dl=null,fu(e),Xl(e)}return null}function eu(e,t){var r=gl;gl|=1;try{return e(t)}finally{0===(gl=r)&&Go()}}function tu(e,t){var r=gl;gl&=-2,gl|=8;try{return e(t)}finally{0===(gl=r)&&Go()}}function ru(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,yr(r)),null!==Ml)for(r=Ml.return;null!==r;){var n=r;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&bo();break;case 3:ka(),uo(fo),uo(co);break;case 5:Ua(n);break;case 4:ka();break;case 13:case 19:uo(xa);break;case 10:ta(n)}r=r.return}Dl=e,Ml=Cu(e.current,null),Cl=t,Tl=vl,wl=null,Al=Rl=1073741823,Ll=null,Il=0,kl=!1}function nu(e,t){for(;;){try{if(ea(),Ka.current=hi,Va)for(var r=ja.memoizedState;null!==r;){var n=r.queue;null!==n&&(n.pending=null),r=r.next}if(za=0,Fa=qa=ja=null,Va=!1,null===Ml||null===Ml.return)return Tl=1,wl=t,Ml=null;e:{var o=e,a=Ml.return,i=Ml,l=t;if(t=Cl,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&i.mode)){var _=i.alternate;_?(i.updateQueue=_.updateQueue,i.memoizedState=_.memoizedState,i.expirationTime=_.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&xa.current),c=a;do{var f;if(f=13===c.tag){var p=c.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var d=c.memoizedProps;f=void 0!==d.fallback&&(!0!==d.unstable_avoidThisFallback||!s)}}if(f){var E=c.updateQueue;if(null===E){var h=new Set;h.add(u),c.updateQueue=h}else E.add(u);if(0==(2&c.mode)){if(c.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var b=ua(1073741823,null);b.tag=2,_a(i,b)}i.expirationTime=1073741823;break e}l=void 0,i=t;var m=o.pingCache;if(null===m?(m=o.pingCache=new pl,l=new Set,m.set(u,l)):void 0===(l=m.get(u))&&(l=new Set,m.set(u,l)),!l.has(i)){l.add(i);var y=yu.bind(null,o,u,i);u.then(y,y)}c.effectTag|=4096,c.expirationTime=t;break e}c=c.return}while(null!==c);l=Error((he(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+be(i))}5!==Tl&&(Tl=2),l=Ji(l,i),c=a;do{switch(c.tag){case 3:u=l,c.effectTag|=4096,c.expirationTime=t,sa(c,dl(c,u,t));break e;case 1:u=l;var v=c.type,O=c.stateNode;if(0==(64&c.effectTag)&&("function"==typeof v.getDerivedStateFromError||null!==O&&"function"==typeof O.componentDidCatch&&(null===Wl||!Wl.has(O)))){c.effectTag|=4096,c.expirationTime=t,sa(c,El(c,u,t));break e}}c=c.return}while(null!==c)}Ml=su(Ml)}catch(e){t=e;continue}break}}function ou(){var e=ml.current;return ml.current=hi,null===e?hi:e}function au(e,t){e<Rl&&2<e&&(Rl=e),null!==t&&e<Al&&2<e&&(Al=e,Ll=t)}function iu(e){e>Il&&(Il=e)}function lu(){for(;null!==Ml;)Ml=_u(Ml)}function uu(){for(;null!==Ml&&!Bo();)Ml=_u(Ml)}function _u(e){var t=hl(e.alternate,e,Cl);return e.memoizedProps=e.pendingProps,null===t&&(t=su(e)),yl.current=null,t}function su(e){Ml=e;do{var t=Ml.alternate;if(e=Ml.return,0==(2048&Ml.effectTag)){if(t=Qi(t,Ml,Cl),1===Cl||1!==Ml.childExpirationTime){for(var r=0,n=Ml.child;null!==n;){var o=n.expirationTime,a=n.childExpirationTime;o>r&&(r=o),a>r&&(r=a),n=n.sibling}Ml.childExpirationTime=r}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ml.firstEffect),null!==Ml.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ml.firstEffect),e.lastEffect=Ml.lastEffect),1<Ml.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ml:e.firstEffect=Ml,e.lastEffect=Ml))}else{if(null!==(t=Xi(Ml)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ml.sibling))return t;Ml=e}while(null!==Ml);return Tl===vl&&(Tl=5),null}function cu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fu(e){var t=zo();return qo(99,pu.bind(null,e,t)),null}function pu(e,t){do{Eu()}while(null!==Nl);if(0!=(48&gl))throw Error(i(327));var r=e.finishedWork,n=e.finishedExpirationTime;if(null===r)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,r===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=cu(r);if(e.firstPendingTime=o,n<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:n<=e.firstSuspendedTime&&(e.firstSuspendedTime=n-1),n<=e.lastPingedTime&&(e.lastPingedTime=0),n<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Dl&&(Ml=Dl=null,Cl=0),1<r.effectTag?null!==r.lastEffect?(r.lastEffect.nextEffect=r,o=r.firstEffect):o=r:o=r.firstEffect,null!==o){var a=gl;gl|=32,yl.current=null,dr=Gt;var l=fr();if(pr(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var _=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(_&&0!==_.rangeCount){u=_.anchorNode;var s=_.anchorOffset,c=_.focusNode;_=_.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,p=-1,d=-1,E=0,h=0,b=l,m=null;t:for(;;){for(var y;b!==u||0!==s&&3!==b.nodeType||(p=f+s),b!==c||0!==_&&3!==b.nodeType||(d=f+_),3===b.nodeType&&(f+=b.nodeValue.length),null!==(y=b.firstChild);)m=b,b=y;for(;;){if(b===l)break t;if(m===u&&++E===s&&(p=f),m===c&&++h===_&&(d=f),null!==(y=b.nextSibling))break;m=(b=m).parentNode}b=y}u=-1===p||-1===d?null:{start:p,end:d}}else u=null}u=u||{start:0,end:0}}else u=null;Er={activeElementDetached:null,focusedElem:l,selectionRange:u},Gt=!1,Ul=o;do{try{du()}catch(e){if(null===Ul)throw Error(i(330));mu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);Ul=o;do{try{for(l=e,u=t;null!==Ul;){var v=Ul.effectTag;if(16&v&&Ne(Ul.stateNode,""),128&v){var O=Ul.alternate;if(null!==O){var P=O.ref;null!==P&&("function"==typeof P?P(null):P.current=null)}}switch(1038&v){case 2:_l(Ul),Ul.effectTag&=-3;break;case 6:_l(Ul),Ul.effectTag&=-3,cl(Ul.alternate,Ul);break;case 1024:Ul.effectTag&=-1025;break;case 1028:Ul.effectTag&=-1025,cl(Ul.alternate,Ul);break;case 4:cl(Ul.alternate,Ul);break;case 8:sl(l,s=Ul,u),ll(s)}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(i(330));mu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);if(P=Er,O=fr(),v=P.focusedElem,u=P.selectionRange,O!==v&&v&&v.ownerDocument&&function e(t,r){return!(!t||!r)&&(t===r||(!t||3!==t.nodeType)&&(r&&3===r.nodeType?e(t,r.parentNode):"contains"in t?t.contains(r):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(r))))}(v.ownerDocument.documentElement,v)){null!==u&&pr(v)&&(O=u.start,void 0===(P=u.end)&&(P=O),"selectionStart"in v?(v.selectionStart=O,v.selectionEnd=Math.min(P,v.value.length)):(P=(O=v.ownerDocument||document)&&O.defaultView||window).getSelection&&(P=P.getSelection(),s=v.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!P.extend&&l>u&&(s=u,u=l,l=s),s=cr(v,l),c=cr(v,u),s&&c&&(1!==P.rangeCount||P.anchorNode!==s.node||P.anchorOffset!==s.offset||P.focusNode!==c.node||P.focusOffset!==c.offset)&&((O=O.createRange()).setStart(s.node,s.offset),P.removeAllRanges(),l>u?(P.addRange(O),P.extend(c.node,c.offset)):(O.setEnd(c.node,c.offset),P.addRange(O))))),O=[];for(P=v;P=P.parentNode;)1===P.nodeType&&O.push({element:P,left:P.scrollLeft,top:P.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<O.length;v++)(P=O[v]).element.scrollLeft=P.left,P.element.scrollTop=P.top}Gt=!!dr,Er=dr=null,e.current=r,Ul=o;do{try{for(v=e;null!==Ul;){var g=Ul.effectTag;if(36&g&&al(v,Ul.alternate,Ul),128&g){O=void 0;var D=Ul.ref;if(null!==D){var M=Ul.stateNode;switch(Ul.tag){case 5:O=M;break;default:O=M}"function"==typeof D?D(O):D.current=O}}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(i(330));mu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);Ul=null,Uo(),gl=a}else e.current=r;if(Kl)Kl=!1,Nl=e,zl=t;else for(Ul=o;null!==Ul;)t=Ul.nextEffect,Ul.nextEffect=null,Ul=t;if(0===(t=e.firstPendingTime)&&(Wl=null),1073741823===t?e===Fl?ql++:(ql=0,Fl=e):ql=0,"function"==typeof Ou&&Ou(r.stateNode,n),Xl(e),xl)throw xl=!1,e=Sl,Sl=null,e;return 0!=(8&gl)||Go(),null}function du(){for(;null!==Ul;){var e=Ul.effectTag;0!=(256&e)&&rl(Ul.alternate,Ul),0==(512&e)||Kl||(Kl=!0,Fo(97,(function(){return Eu(),null}))),Ul=Ul.nextEffect}}function Eu(){if(90!==zl){var e=97<zl?97:zl;return zl=90,qo(e,hu)}}function hu(){if(null===Nl)return!1;var e=Nl;if(Nl=null,0!=(48&gl))throw Error(i(331));var t=gl;for(gl|=32,e=e.current.firstEffect;null!==e;){try{var r=e;if(0!=(512&r.effectTag))switch(r.tag){case 0:case 11:case 15:case 22:nl(5,r),ol(5,r)}}catch(t){if(null===e)throw Error(i(330));mu(e,t)}r=e.nextEffect,e.nextEffect=null,e=r}return gl=t,Go(),!0}function bu(e,t,r){_a(e,t=dl(e,t=Ji(r,t),1073741823)),null!==(e=Yl(e,1073741823))&&Xl(e)}function mu(e,t){if(3===e.tag)bu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){bu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"==typeof r.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Wl||!Wl.has(n))){_a(r,e=El(r,e=Ji(t,e),1073741823)),null!==(r=Yl(r,1073741823))&&Xl(r);break}}r=r.return}}function yu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),Dl===e&&Cl===r?Tl===Pl||Tl===Ol&&1073741823===Rl&&No()-Bl<500?ru(e,Cl):kl=!0:Iu(e,r)&&(0!==(t=e.lastPingedTime)&&t<r||(e.lastPingedTime=r,Xl(e)))}function vu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(t=Hl(t=Gl(),e,null)),null!==(e=Yl(e,t))&&Xl(e)}hl=function(e,t,r){var n=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||fo.current)Ai=!0;else{if(n<r){switch(Ai=!1,t.tag){case 3:Ki(t),wi();break;case 5:if(Ba(t),4&t.mode&&1!==r&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:ho(t.type)&&vo(t);break;case 4:Ia(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value,o=t.type._context,_o(Qo,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(n=t.child.childExpirationTime)&&n>=r?Fi(e,t,r):(_o(xa,1&xa.current),null!==(t=$i(e,t,r))?t.sibling:null);_o(xa,1&xa.current);break;case 19:if(n=t.childExpirationTime>=r,0!=(64&e.effectTag)){if(n)return Hi(e,t,r);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),_o(xa,xa.current),!n)return null}return $i(e,t,r)}Ai=!1}}else Ai=!1;switch(t.expirationTime=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Eo(t,co.current),na(t,r),o=$a(null,t,n,e,o,r),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(n)){var a=!0;vo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=n.getDerivedStateFromProps;"function"==typeof l&&Ea(t,n,l,e),o.updater=ha,t.stateNode=o,o._reactInternalFiber=t,va(t,n,e,r),t=Wi(null,t,n,!0,a,r)}else t.tag=0,Li(null,t,o,r),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Mu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===ce)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=xi(null,t,o,e,r);break e;case 1:t=Si(null,t,o,e,r);break e;case 11:t=Ii(null,t,o,e,r);break e;case 14:t=ki(null,t,o,Yo(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,xi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 1:return n=t.type,o=t.pendingProps,Si(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 3:if(Ki(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),ca(t,n,null,r),(n=t.memoizedState.element)===o)wi(),t=$i(e,t,r);else{if((o=t.stateNode.hydrate)&&(Oi=vr(t.stateNode.containerInfo.firstChild),vi=t,o=Pi=!0),o)for(r=Ca(t,null,n,r),t.child=r;r;)r.effectTag=-3&r.effectTag|1024,r=r.sibling;else Li(e,t,n,r),wi();t=t.child}return t;case 5:return Ba(t),null===e&&Mi(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,br(n,o)?l=null:null!==a&&br(n,a)&&(t.effectTag|=16),Ui(e,t),4&t.mode&&1!==r&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Li(e,t,l,r),t=t.child),t;case 6:return null===e&&Mi(t),null;case 13:return Fi(e,t,r);case 4:return Ia(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Ma(t,null,n,r):Li(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Ii(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 7:return Li(e,t,t.pendingProps,r),t.child;case 8:case 12:return Li(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(_o(Qo,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=Sn(u,a)?0:0|("function"==typeof n._calculateChangedBits?n._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!fo.current){t=$i(e,t,r);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var _=u.dependencies;if(null!==_){l=u.child;for(var s=_.firstContext;null!==s;){if(s.context===n&&0!=(s.observedBits&a)){1===u.tag&&((s=ua(r,null)).tag=2,_a(u,s)),u.expirationTime<r&&(u.expirationTime=r),null!==(s=u.alternate)&&s.expirationTime<r&&(s.expirationTime=r),ra(u.return,r),_.expirationTime<r&&(_.expirationTime=r);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,na(t,r),n=n(o=oa(o,a.unstable_observedBits)),t.effectTag|=1,Li(e,t,n,r),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),ki(e,t,o,a=Yo(o.type,a),n,r);case 15:return Bi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Yo(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,ho(n)?(e=!0,vo(t)):e=!1,na(t,r),ma(t,n,o),va(t,n,o,r),Wi(null,t,n,!0,e,r);case 19:return Hi(e,t,r)}throw Error(i(156,t.tag))};var Ou=null,Pu=null;function gu(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Du(e,t,r,n){return new gu(e,t,r,n)}function Mu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cu(e,t){var r=e.alternate;return null===r?((r=Du(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=e.childExpirationTime,r.expirationTime=e.expirationTime,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Tu(e,t,r,n,o,a){var l=2;if(n=e,"function"==typeof e)Mu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case re:return wu(r.children,o,a,t);case le:l=8,o|=7;break;case ne:l=8,o|=1;break;case oe:return(e=Du(12,r,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case _e:return(e=Du(13,r,t,o)).type=_e,e.elementType=_e,e.expirationTime=a,e;case se:return(e=Du(19,r,t,o)).elementType=se,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case ue:l=11;break e;case ce:l=14;break e;case fe:l=16,n=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Du(l,r,t,o)).elementType=e,t.type=n,t.expirationTime=a,t}function wu(e,t,r,n){return(e=Du(7,e,n,t)).expirationTime=r,e}function Ru(e,t,r){return(e=Du(6,e,null,t)).expirationTime=r,e}function Au(e,t,r){return(t=Du(4,null!==e.children?e.children:[],e.key,t)).expirationTime=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Lu(e,t,r){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Iu(e,t){var r=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==r&&r>=t&&e<=t}function ku(e,t){var r=e.firstSuspendedTime,n=e.lastSuspendedTime;r<t&&(e.firstSuspendedTime=t),(n>t||0===r)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Bu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var r=e.firstSuspendedTime;0!==r&&(t>=r?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Uu(e,t){var r=e.lastExpiredTime;(0===r||r>t)&&(e.lastExpiredTime=t)}function xu(e,t,r,n){var o=t.current,a=Gl(),l=pa.suspense;a=Hl(a,o,l);e:if(r){t:{if(Ze(r=r._reactInternalFiber)!==r||1!==r.tag)throw Error(i(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===r.tag){var _=r.type;if(ho(_)){r=yo(r,_,u);break e}}r=u}else r=so;return null===t.context?t.context=r:t.pendingContext=r,(t=ua(a,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),_a(o,t),$l(o,a),a}function Su(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Wu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Ku(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}function Nu(e,t,r){var n=new Lu(e,t,r=null!=r&&!0===r.hydrate),o=Du(3,null,null,2===t?7:1===t?3:0);n.current=o,o.stateNode=n,ia(o),e[Mr]=n.current,r&&0!==t&&function(e,t){var r=Je(t);Ct.forEach((function(e){dt(e,t,r)})),Tt.forEach((function(e){dt(e,t,r)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=n}function zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ju(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Su(i);l.call(e)}}xu(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new Nu(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Su(i);u.call(e)}}tu((function(){xu(t,i,e,o)}))}return Su(i)}function qu(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Fu(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!zu(t))throw Error(i(200));return qu(e,t,null,r)}Nu.prototype.render=function(e){xu(e,this._internalRoot,null,null)},Nu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;xu(null,e,null,(function(){t[Mr]=null}))},Et=function(e){if(13===e.tag){var t=$o(Gl(),150,100);$l(e,t),Ku(e,t)}},ht=function(e){13===e.tag&&($l(e,3),Ku(e,3))},bt=function(e){if(13===e.tag){var t=Gl();$l(e,t=Hl(t,e,null)),Ku(e,t)}},w=function(e,t,r){switch(t){case"input":if(Me(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=Rr(n);if(!o)throw Error(i(90));Oe(n),Me(n,o)}}}break;case"textarea":Ie(e,r);break;case"select":null!=(t=r.value)&&Re(e,!!r.multiple,t,!1)}},B=eu,U=function(e,t,r,n,o){var a=gl;gl|=4;try{return qo(98,e.bind(null,t,r,n,o))}finally{0===(gl=a)&&Go()}},x=function(){0==(49&gl)&&(function(){if(null!==jl){var e=jl;jl=null,e.forEach((function(e,t){Uu(t,e),Xl(t)})),Go()}}(),Eu())},S=function(e,t){var r=gl;gl|=2;try{return e(t)}finally{0===(gl=r)&&Go()}};var Vu,Gu,Hu={Events:[Tr,wr,Rr,C,g,xr,function(e){ot(e,Ur)},I,k,Xt,lt,Eu,{current:!1}]};Gu=(Vu={findFiberByHostInstance:Cr,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var r=t.inject(e);Ou=function(e){try{t.onCommitFiberRoot(r,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Pu=function(e){try{t.onCommitFiberUnmount(r,e)}catch(e){}}}catch(e){}}(o({},Vu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Q.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Gu?Gu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Hu,t.createPortal=Fu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&gl))throw Error(i(187));var r=gl;gl|=1;try{return qo(99,e.bind(null,t))}finally{gl=r,Go()}},t.hydrate=function(e,t,r){if(!zu(t))throw Error(i(200));return ju(null,e,t,!0,r)},t.render=function(e,t,r){if(!zu(t))throw Error(i(200));return ju(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!zu(e))throw Error(i(40));return!!e._reactRootContainer&&(tu((function(){ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[Mr]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Fu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!zu(r))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return ju(e,t,r,!1,n)},t.version="16.13.1"},function(e,t,r){"use strict";e.exports=r(149)},function(e,t,r){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n,o,a,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,_=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},c=Date.now();t.unstable_now=function(){return Date.now()-c},n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(s,0))},o=function(e,t){_=setTimeout(e,t)},a=function(){clearTimeout(_)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,d=window.setTimeout,E=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var b=p.now();t.unstable_now=function(){return p.now()-b}}var m=!1,y=null,v=-1,O=5,P=0;i=function(){return t.unstable_now()>=P},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):O=0<e?Math.floor(1e3/e):5};var g=new MessageChannel,D=g.port2;g.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();P=e+O;try{y(!0,e)?D.postMessage(null):(m=!1,y=null)}catch(e){throw D.postMessage(null),e}}else m=!1},n=function(e){y=e,m||(m=!0,D.postMessage(null))},o=function(e,r){v=d((function(){e(t.unstable_now())}),r)},a=function(){E(v),v=-1}}function M(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<w(o,t)))break e;e[n]=t,e[r]=o,r=n}}function C(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>w(i,r))void 0!==u&&0>w(u,i)?(e[n]=u,e[l]=r,n=l):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==u&&0>w(u,r)))break e;e[n]=u,e[l]=r,n=l}}}return t}return null}function w(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var R=[],A=[],L=1,I=null,k=3,B=!1,U=!1,x=!1;function S(e){for(var t=C(A);null!==t;){if(null===t.callback)T(A);else{if(!(t.startTime<=e))break;T(A),t.sortIndex=t.expirationTime,M(R,t)}t=C(A)}}function W(e){if(x=!1,S(e),!U)if(null!==C(R))U=!0,n(K);else{var t=C(A);null!==t&&o(W,t.startTime-e)}}function K(e,r){U=!1,x&&(x=!1,a()),B=!0;var n=k;try{for(S(r),I=C(R);null!==I&&(!(I.expirationTime>r)||e&&!i());){var l=I.callback;if(null!==l){I.callback=null,k=I.priorityLevel;var u=l(I.expirationTime<=r);r=t.unstable_now(),"function"==typeof u?I.callback=u:I===C(R)&&T(R),S(r)}else T(R);I=C(R)}if(null!==I)var _=!0;else{var s=C(A);null!==s&&o(W,s.startTime-r),_=!1}return _}finally{I=null,k=n,B=!1}}function N(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){U||B||(U=!0,n(K))},t.unstable_getCurrentPriorityLevel=function(){return k},t.unstable_getFirstCallbackNode=function(){return C(R)},t.unstable_next=function(e){switch(k){case 1:case 2:case 3:var t=3;break;default:t=k}var r=k;k=t;try{return e()}finally{k=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=k;k=e;try{return t()}finally{k=r}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:N(e)}else i=N(e),u=l;return e={id:L++,callback:r,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,M(A,e),null===C(R)&&e===C(A)&&(x?a():x=!0,o(W,u-l))):(e.sortIndex=i,M(R,e),U||B||(U=!0,n(K))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();S(e);var r=C(R);return r!==I&&null!==I&&null!==r&&null!==r.callback&&r.startTime<=e&&r.expirationTime<I.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=k;return function(){var r=k;k=t;try{return e.apply(this,arguments)}finally{k=r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clear=function(){return new Promise((function(e,t){try{window.localStorage.clear(),e(null)}catch(e){t(e)}}))},t.getItem=function(e){return new Promise((function(t,r){try{t(window.localStorage.getItem(e))}catch(e){r(e)}}))},t.removeItem=function(e){return new Promise((function(t,r){try{window.localStorage.removeItem(e),t(null)}catch(e){r(e)}}))},t.setItem=function(e,t){return new Promise((function(r,n){try{window.localStorage.setItem(e,t),r(null)}catch(e){n(e)}}))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1);t.mergeObservables=function e(t,r){var o=t,a=r;if("object"==typeof o&&"object"==typeof a)for(var i in o)o[i]&&"object"==typeof o[i]&&"object"==typeof a[i]?n.isObservableMap(o[i])?o[i].merge(a[i]):n.isObservableArray(o[i])?o[i].replace(a[i]):n.isObservableObject(o[i])&&(o[i]=e(o[i],a[i])):void 0!==a[i]&&(o[i]=a[i]);return o}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(64),o=r(91);t.persistObject=function(e,t){var r=function e(t){var r={};return Object.keys(t).forEach((function(n){"object"==typeof t[n]?t[n].type in o.types&&("object"==typeof t[n].schema?r[n]=o.types[t[n].type](e(t[n].schema)):r[n]=o.types[t[n].type](t[n].schema)):!0===t[n]&&(r[n]=!0)})),n.createSimpleSchema(r)}(t);return n.setDefaultModelSchema(e,r),e}},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(27);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__id=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"read",value:function(e){return this._request("GET","/gists/"+this.__id,null,e)}},{key:"create",value:function(e,t){var r=this;return this._request("POST","/gists",e,t).then((function(e){return r.__id=e.data.id,e}))}},{key:"delete",value:function(e){return this._request("DELETE","/gists/"+this.__id,null,e)}},{key:"fork",value:function(e){return this._request("POST","/gists/"+this.__id+"/forks",null,e)}},{key:"update",value:function(e,t){return this._request("PATCH","/gists/"+this.__id,e,t)}},{key:"star",value:function(e){return this._request("PUT","/gists/"+this.__id+"/star",null,e)}},{key:"unstar",value:function(e){return this._request("DELETE","/gists/"+this.__id+"/star",null,e)}},{key:"isStarred",value:function(e){return this._request204or404("/gists/"+this.__id+"/star",null,e)}},{key:"listCommits",value:function(e){return this._requestAllPages("/gists/"+this.__id+"/commits",null,e)}},{key:"getRevision",value:function(e,t){return this._request("GET","/gists/"+this.__id+"/"+e,null,t)}},{key:"listComments",value:function(e){return this._requestAllPages("/gists/"+this.__id+"/comments",null,e)}},{key:"getComment",value:function(e,t){return this._request("GET","/gists/"+this.__id+"/comments/"+e,null,t)}},{key:"createComment",value:function(e,t){return this._request("POST","/gists/"+this.__id+"/comments",{body:e},t)}},{key:"editComment",value:function(e,t,r){return this._request("PATCH","/gists/"+this.__id+"/comments/"+e,{body:t},r)}},{key:"deleteComment",value:function(e,t){return this._request("DELETE","/gists/"+this.__id+"/comments/"+e,null,t)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){e.exports=r(155)},function(e,t,r){"use strict";var n=r(23),o=r(92),a=r(156),i=r(98);function l(e){var t=new a(e),r=o(a.prototype.request,t);return n.extend(r,a.prototype,t),n.extend(r,t),r}var u=l(r(95));u.Axios=a,u.create=function(e){return l(i(u.defaults,e))},u.Cancel=r(99),u.CancelToken=r(169),u.isCancel=r(94),u.all=function(e){return Promise.all(e)},u.spread=r(170),e.exports=u,e.exports.default=u},function(e,t,r){"use strict";var n=r(23),o=r(93),a=r(157),i=r(158),l=r(98);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}})),n.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,r,o){return this.request(n.merge(o||{},{method:e,url:t,data:r}))}})),e.exports=u},function(e,t,r){"use strict";var n=r(23);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,r){"use strict";var n=r(23),o=r(159),a=r(94),i=r(95);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var n=r(23);e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t,r){"use strict";var n=r(23);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},function(e,t,r){"use strict";var n=r(97);e.exports=function(e,t,r){var o=r.config.validateStatus;!o||o(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(164),o=r(165);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(23),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,a,i={};return e?(n.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=n.trim(e.substr(0,a)).toLowerCase(),r=n.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},function(e,t,r){"use strict";var n=r(23);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(23);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&l.push("expires="+new Date(r).toGMTString()),n.isString(o)&&l.push("path="+o),n.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(99);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){var n;function o(e){function r(){if(r.enabled){var e=r,o=+new Date,a=o-(n||o);e.diff=a,e.prev=n,e.curr=o,n=o;for(var i=new Array(arguments.length),l=0;l<i.length;l++)i[l]=arguments[l];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var u=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var o=t.formatters[n];if("function"==typeof o){var a=i[u];r=o.call(e,a),i.splice(u,1),u--}return r})),t.formatArgs.call(e,i);var _=r.log||t.log||console.log.bind(console);_.apply(e,i)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),"function"==typeof t.init&&t.init(r),r}(t=e.exports=o.debug=o.default=o).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var r=("string"==typeof e?e:"").split(/[\s,]+/),n=r.length,o=0;o<n;o++)r[o]&&("-"===(e=r[o].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=r(172),t.names=[],t.skips=[],t.formatters={}},function(e,t){var r=1e3,n=6e4,o=60*n,a=24*o;function i(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var l,u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var i=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"days":case"day":case"d":return i*a;case"hours":case"hour":case"hrs":case"hr":case"h":return i*o;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?i(l=e,a,"day")||i(l,o,"hour")||i(l,n,"minute")||i(l,r,"second")||l+" ms":function(e){if(e>=a)return Math.round(e/a)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=n)return Math.round(e/n)+"m";if(e>=r)return Math.round(e/r)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(27));function a(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=(0,a(r(47)).default)("github:user"),l=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__user=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"__getScopedUrl",value:function(e){if(this.__user)return e?"/users/"+this.__user+"/"+e:"/users/"+this.__user;switch(e){case"":return"/user";case"notifications":case"gists":return"/"+e;default:return"/user/"+e}}},{key:"listRepos",value:function(e,t){return"function"==typeof e&&(t=e,e={}),e=this._getOptionsWithDefaults(e),i("Fetching repositories with options: "+JSON.stringify(e)),this._requestAllPages(this.__getScopedUrl("repos"),e,t)}},{key:"listOrgs",value:function(e){return this._request("GET",this.__getScopedUrl("orgs"),null,e)}},{key:"listFollowers",value:function(e){return this._request("GET",this.__getScopedUrl("followers"),null,e)}},{key:"listFollowing",value:function(e){return this._request("GET",this.__getScopedUrl("following"),null,e)}},{key:"listGists",value:function(e){return this._request("GET",this.__getScopedUrl("gists"),null,e)}},{key:"listNotifications",value:function(e,t){return"function"==typeof(e=e||{})&&(t=e,e={}),e.since=this._dateToISO(e.since),e.before=this._dateToISO(e.before),this._request("GET",this.__getScopedUrl("notifications"),e,t)}},{key:"getProfile",value:function(e){return this._request("GET",this.__getScopedUrl(""),null,e)}},{key:"listStarredRepos",value:function(e){var t=this._getOptionsWithDefaults();return this._requestAllPages(this.__getScopedUrl("starred"),t,e)}},{key:"listStarredGists",value:function(e,t){return"function"==typeof(e=e||{})&&(t=e,e={}),e.since=this._dateToISO(e.since),this._request("GET","/gists/starred",e,t)}},{key:"getEmails",value:function(e){return this._request("GET","/user/emails",null,e)}},{key:"follow",value:function(e,t){return this._request("PUT","/user/following/"+e,null,t)}},{key:"unfollow",value:function(e,t){return this._request("DELETE","/user/following/"+e,null,t)}},{key:"createRepo",value:function(e,t){return this._request("POST","/user/repos",e,t)}}]),t}(o.default);e.exports=l},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(27);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__repository=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"createIssue",value:function(e,t){return this._request("POST","/repos/"+this.__repository+"/issues",e,t)}},{key:"listIssues",value:function(e,t){return this._requestAllPages("/repos/"+this.__repository+"/issues",e,t)}},{key:"listIssueEvents",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/"+e+"/events",null,t)}},{key:"listIssueComments",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/"+e+"/comments",null,t)}},{key:"getIssueComment",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/comments/"+e,null,t)}},{key:"createIssueComment",value:function(e,t,r){return this._request("POST","/repos/"+this.__repository+"/issues/"+e+"/comments",{body:t},r)}},{key:"editIssueComment",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/issues/comments/"+e,{body:t},r)}},{key:"deleteIssueComment",value:function(e,t){return this._request("DELETE","/repos/"+this.__repository+"/issues/comments/"+e,null,t)}},{key:"editIssue",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/issues/"+e,t,r)}},{key:"getIssue",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/"+e,null,t)}},{key:"listMilestones",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/milestones",e,t)}},{key:"getMilestone",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/milestones/"+e,null,t)}},{key:"createMilestone",value:function(e,t){return this._request("POST","/repos/"+this.__repository+"/milestones",e,t)}},{key:"editMilestone",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/milestones/"+e,t,r)}},{key:"deleteMilestone",value:function(e,t){return this._request("DELETE","/repos/"+this.__repository+"/milestones/"+e,null,t)}},{key:"createLabel",value:function(e,t){return this._request("POST","/repos/"+this.__repository+"/labels",e,t)}},{key:"listLabels",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/labels",e,t)}},{key:"getLabel",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/labels/"+e,null,t)}},{key:"editLabel",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/labels/"+e,t,r)}},{key:"deleteLabel",value:function(e,t){return this._request("DELETE","/repos/"+this.__repository+"/labels/"+e,null,t)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(27));function a(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=(0,a(r(47)).default)("github:search"),l=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__defaults=o._getOptionsWithDefaults(e),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"_search",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,o={};return Object.keys(this.__defaults).forEach((function(e){o[e]=t.__defaults[e]})),Object.keys(r).forEach((function(e){o[e]=r[e]})),i("searching "+e+" with options:",o),this._requestAllPages("/search/"+e,o,n)}},{key:"forRepositories",value:function(e,t){return this._search("repositories",e,t)}},{key:"forCode",value:function(e,t){return this._search("code",e,t)}},{key:"forIssues",value:function(e,t){return this._search("issues",e,t)}},{key:"forUsers",value:function(e,t){return this._search("users",e,t)}}]),t}(o.default);e.exports=l},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(27);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"getRateLimit",value:function(e){return this._request("GET","/rate_limit",null,e)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";(function(t){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=u(r(27)),i=u(r(182)),l=r(100);function u(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *             Github.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var _=(0,u(r(47)).default)("github:repository"),s=function(e){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,t,n));return o.__fullname=e,o.__currentTree={branch:null,sha:null},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e),o(r,[{key:"getRef",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/refs/"+e,null,t)}},{key:"createRef",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/git/refs",e,t)}},{key:"deleteRef",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/git/refs/"+e,null,t)}},{key:"deleteRepo",value:function(e){return this._request("DELETE","/repos/"+this.__fullname,null,e)}},{key:"listTags",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/tags",null,e)}},{key:"listPullRequests",value:function(e,t){return e=e||{},this._request("GET","/repos/"+this.__fullname+"/pulls",e,t)}},{key:"getPullRequest",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/pulls/"+e,null,t)}},{key:"listPullRequestFiles",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/pulls/"+e+"/files",null,t)}},{key:"compareBranches",value:function(e,t,r){return this._request("GET","/repos/"+this.__fullname+"/compare/"+e+"..."+t,null,r)}},{key:"listBranches",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/branches",null,e)}},{key:"getBlob",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/blobs/"+e,null,t,"raw")}},{key:"getBranch",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/branches/"+e,null,t)}},{key:"getCommit",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/commits/"+e,null,t)}},{key:"listCommits",value:function(e,t){return"function"==typeof(e=e||{})&&(t=e,e={}),e.since=this._dateToISO(e.since),e.until=this._dateToISO(e.until),this._request("GET","/repos/"+this.__fullname+"/commits",e,t)}},{key:"getSingleCommit",value:function(e,t){return e=e||"",this._request("GET","/repos/"+this.__fullname+"/commits/"+e,null,t)}},{key:"getSha",value:function(e,t,r){return e=e?"?ref="+e:"",this._request("GET","/repos/"+this.__fullname+"/contents/"+t+e,null,r)}},{key:"listStatuses",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/commits/"+e+"/statuses",null,t)}},{key:"getCombinedStatus",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/commits/"+e+"/status",null,t)}},{key:"getTree",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/trees/"+e,null,t)}},{key:"createBlob",value:function(e,t){var r=this._getContentObject(e);return _("sending content",r),this._request("POST","/repos/"+this.__fullname+"/git/blobs",r,t)}},{key:"_getContentObject",value:function(e){if("string"==typeof e)return _("contet is a string"),{content:i.default.encode(e),encoding:"utf-8"};if(void 0!==t&&e instanceof t)return _("We appear to be in Node"),{content:e.toString("base64"),encoding:"base64"};if("undefined"!=typeof Blob&&e instanceof Blob)return _("We appear to be in the browser"),{content:l.Base64.encode(e),encoding:"base64"};throw _("Not sure what this content is: "+(void 0===e?"undefined":n(e))+", "+JSON.stringify(e)),new Error("Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)")}},{key:"updateTree",value:function(e,t,r,n){var o={base_tree:e,tree:[{path:t,sha:r,mode:"100644",type:"blob"}]};return this._request("POST","/repos/"+this.__fullname+"/git/trees",o,n)}},{key:"createTree",value:function(e,t,r){return this._request("POST","/repos/"+this.__fullname+"/git/trees",{tree:e,base_tree:t},r)}},{key:"commit",value:function(e,t,r,n,o){var a=this;"function"==typeof n&&(o=n,n={});var i={message:r,tree:t,parents:[e]};return i=Object.assign({},n,i),this._request("POST","/repos/"+this.__fullname+"/git/commits",i,o).then((function(e){return a.__currentTree.sha=e.data.sha,e}))}},{key:"updateHead",value:function(e,t,r,n){return this._request("PATCH","/repos/"+this.__fullname+"/git/refs/"+e,{sha:t,force:r},n)}},{key:"updateStatus",value:function(e,t,r){return this._request("POST","/repos/"+this.__fullname+"/statuses/"+e,t,r)}},{key:"updateRepository",value:function(e,t){return this._request("PATCH","/repos/"+this.__fullname,e,t)}},{key:"getDetails",value:function(e){return this._request("GET","/repos/"+this.__fullname,null,e)}},{key:"getContributors",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/contributors",null,e)}},{key:"getContributorStats",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/stats/contributors",null,e)}},{key:"getCollaborators",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/collaborators",null,e)}},{key:"isCollaborator",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/collaborators/"+e,null,t)}},{key:"getContents",value:function(e,t,r,n){return t=t?""+encodeURI(t):"",this._request("GET","/repos/"+this.__fullname+"/contents/"+t,{ref:e},n,r)}},{key:"getReadme",value:function(e,t,r){return this._request("GET","/repos/"+this.__fullname+"/readme",{ref:e},r,t)}},{key:"fork",value:function(e){return this._request("POST","/repos/"+this.__fullname+"/forks",null,e)}},{key:"forkToOrg",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/forks?organization="+e,null,t)}},{key:"listForks",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/forks",null,e)}},{key:"createBranch",value:function(e,t,r){var n=this;return"function"==typeof t&&(r=t,t=e,e="master"),this.getRef("heads/"+e).then((function(e){var o=e.data.object.sha;return n.createRef({sha:o,ref:"refs/heads/"+t},r)}))}},{key:"createPullRequest",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/pulls",e,t)}},{key:"updatePullRequest",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__fullname+"/pulls/"+e,t,r)}},{key:"listHooks",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/hooks",null,e)}},{key:"getHook",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/hooks/"+e,null,t)}},{key:"createHook",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/hooks",e,t)}},{key:"updateHook",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__fullname+"/hooks/"+e,t,r)}},{key:"deleteHook",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/hooks/"+e,null,t)}},{key:"listKeys",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/keys",null,e)}},{key:"getKey",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/keys/"+e,null,t)}},{key:"createKey",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/keys",e,t)}},{key:"deleteKey",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/keys/"+e,null,t)}},{key:"deleteFile",value:function(e,t,r){var n=this;return this.getSha(e,t).then((function(o){var a={message:"Delete the file at '"+t+"'",sha:o.data.sha,branch:e};return n._request("DELETE","/repos/"+n.__fullname+"/contents/"+t,a,r)}))}},{key:"move",value:function(e,t,r,n){var o=this,a=void 0;return this.getRef("heads/"+e).then((function(e){var t=e.data.object;return o.getTree(t.sha+"?recursive=true")})).then((function(e){var n=e.data,i=n.tree,l=n.sha;a=l;var u=i.map((function(e){return e.path===t&&(e.path=r),"tree"===e.type&&delete e.sha,e}));return o.createTree(u)})).then((function(e){var n=e.data;return o.commit(a,n.sha,"Renamed '"+t+"' to '"+r+"'")})).then((function(t){var r=t.data;return o.updateHead("heads/"+e,r.sha,!0,n)}))}},{key:"writeFile",value:function(e,t,r,n,o,a){var i=this;"function"==typeof o&&(a=o,o={});var u=t?encodeURI(t):"",_=!1!==o.encode,s={branch:e,message:n,author:o.author,committer:o.committer,content:_?l.Base64.encode(r):r};return this.getSha(e,u).then((function(e){return s.sha=e.data.sha,i._request("PUT","/repos/"+i.__fullname+"/contents/"+u,s,a)}),(function(){return i._request("PUT","/repos/"+i.__fullname+"/contents/"+u,s,a)}))}},{key:"isStarred",value:function(e){return this._request204or404("/user/starred/"+this.__fullname,null,e)}},{key:"star",value:function(e){return this._request("PUT","/user/starred/"+this.__fullname,null,e)}},{key:"unstar",value:function(e){return this._request("DELETE","/user/starred/"+this.__fullname,null,e)}},{key:"createRelease",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/releases",e,t)}},{key:"updateRelease",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__fullname+"/releases/"+e,t,r)}},{key:"listReleases",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/releases",null,e)}},{key:"getRelease",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/releases/"+e,null,t)}},{key:"deleteRelease",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/releases/"+e,null,t)}},{key:"mergePullRequest",value:function(e,t,r){return this._request("PUT","/repos/"+this.__fullname+"/pulls/"+e+"/merge",t,r)}},{key:"listProjects",value:function(e){return this._requestAllPages("/repos/"+this.__fullname+"/projects",{AcceptHeader:"inertia-preview"},e)}},{key:"createProject",value:function(e,t){return(e=e||{}).AcceptHeader="inertia-preview",this._request("POST","/repos/"+this.__fullname+"/projects",e,t)}}]),r}(a.default);e.exports=s}).call(this,r(178).Buffer)},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(179),o=r(180),a=r(181);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function l(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return c(this,e)}return _(this,e,t,r)}function _(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=f(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(t,r),o=(e=l(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|p(t.length);return 0===(e=l(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?l(e,0):f(e,t);if("Buffer"===t.type&&a(t.data))return f(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function s(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function c(e,t){if(s(t),e=l(e,t<0?0:0|p(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function f(e,t){var r=t.length<0?0:0|p(t.length);e=l(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function p(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return N(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(e).length;default:if(n)return N(e).length;t=(""+t).toLowerCase(),n=!0}}function E(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,r);case"utf8":case"utf-8":return C(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return w(this,t,r);case"base64":return M(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function h(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function b(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,o){var a,i=1,l=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,l/=2,u/=2,r/=2}function _(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var s=-1;for(a=r;a<l;a++)if(_(e,a)===_(t,-1===s?0:a-s)){if(-1===s&&(s=a),a-s+1===u)return s*i}else-1!==s&&(a-=a-s),s=-1}else for(r+u>l&&(r=l-u),a=r;a>=0;a--){for(var c=!0,f=0;f<u;f++)if(_(e,a+f)!==_(t,f)){c=!1;break}if(c)return a}return-1}function y(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var i=0;i<n;++i){var l=parseInt(t.substr(2*i,2),16);if(isNaN(l))return i;e[r+i]=l}return i}function v(e,t,r,n){return j(N(t,e.length-r),e,r,n)}function O(e,t,r,n){return j(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return O(e,t,r,n)}function g(e,t,r,n){return j(z(t),e,r,n)}function D(e,t,r,n){return j(function(e,t){for(var r,n,o,a=[],i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,o=r%256,a.push(o),a.push(n);return a}(t,e.length-r),e,r,n)}function M(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function C(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var a,i,l,u,_=e[o],s=null,c=_>239?4:_>223?3:_>191?2:1;if(o+c<=r)switch(c){case 1:_<128&&(s=_);break;case 2:128==(192&(a=e[o+1]))&&(u=(31&_)<<6|63&a)>127&&(s=u);break;case 3:a=e[o+1],i=e[o+2],128==(192&a)&&128==(192&i)&&(u=(15&_)<<12|(63&a)<<6|63&i)>2047&&(u<55296||u>57343)&&(s=u);break;case 4:a=e[o+1],i=e[o+2],l=e[o+3],128==(192&a)&&128==(192&i)&&128==(192&l)&&(u=(15&_)<<18|(63&a)<<12|(63&i)<<6|63&l)>65535&&u<1114112&&(s=u)}null===s?(s=65533,c=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),o+=c}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return _(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return s(t),t<=0?l(e,t):void 0!==r?"string"==typeof n?l(e,t).fill(r,n):l(e,t).fill(r):l(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return c(null,e)},u.allocUnsafeSlow=function(e){return c(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,a=Math.min(r,n);o<a;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?C(this,0,e):E.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),l=Math.min(a,i),_=this.slice(n,o),s=e.slice(t,r),c=0;c<l;++c)if(_[c]!==s[c]){a=_[c],i=s[c];break}return a<i?-1:i<a?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return b(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return b(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return y(this,e,t,r);case"utf8":case"utf-8":return v(this,e,t,r);case"ascii":return O(this,e,t,r);case"latin1":case"binary":return P(this,e,t,r);case"base64":return g(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function T(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function w(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function R(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",a=t;a<r;++a)o+=K(e[a]);return o}function A(e,t,r){for(var n=e.slice(t,r),o="",a=0;a<n.length;a+=2)o+=String.fromCharCode(n[a]+256*n[a+1]);return o}function L(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,o,a){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function k(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-r,2);o<a;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function B(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-r,4);o<a;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function U(e,t,r,n,o,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function x(e,t,r,n,a){return a||U(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function S(e,t,r,n,a){return a||U(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;r=new u(o,void 0);for(var a=0;a<o;++a)r[a]=this[a+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUInt8=function(e,t){return t||L(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||L(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||L(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=t,o=1,a=this[e+--n];n>0&&(o*=256);)a+=this[e+--n]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},u.prototype.readInt8=function(e,t){return t||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||L(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||L(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||L(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||L(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||L(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||L(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,a=0;for(this[t]=255&e;++a<r&&(o*=256);)this[t+a]=e/o&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):k(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):k(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):B(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var a=0,i=1,l=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===l&&0!==this[t+a-1]&&(l=1),this[t+a]=(e/i>>0)-l&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var a=r-1,i=1,l=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===l&&0!==this[t+a+1]&&(l=1),this[t+a]=(e/i>>0)-l&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):k(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):k(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):B(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return x(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return x(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return S(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return S(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,a=n-r;if(this===e&&r<t&&t<n)for(o=a-1;o>=0;--o)e[o+t]=this[o+r];else if(a<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var i=u.isBuffer(e)?e:N(new u(e,n).toString()),l=i.length;for(a=0;a<r-t;++a)this[a+t]=i[a%l]}return this};var W=/[^+\/0-9A-Za-z-_]/g;function K(e){return e<16?"0"+e.toString(16):e.toString(16)}function N(e,t){var r;t=t||1/0;for(var n=e.length,o=null,a=[],i=0;i<n;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&a.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function z(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(W,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function j(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(41))},function(e,t,r){"use strict";t.byteLength=function(e){var t=_(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=_(e),i=n[0],l=n[1],u=new a(function(e,t,r){return 3*(t+r)/4-r}(0,i,l)),s=0,c=l>0?i-4:i;for(r=0;r<c;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],u[s++]=t>>16&255,u[s++]=t>>8&255,u[s++]=255&t;2===l&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,u[s++]=255&t);1===l&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,u[s++]=t>>8&255,u[s++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,a=[],i=0,l=r-o;i<l;i+=16383)a.push(s(e,i,i+16383>l?l:i+16383));1===o?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=0,u=i.length;l<u;++l)n[l]=i[l],o[i.charCodeAt(l)]=l;function _(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function s(e,t,r){for(var o,a,i=[],l=t;l<r;l+=3)o=(e[l]<<16&16711680)+(e[l+1]<<8&65280)+(255&e[l+2]),i.push(n[(a=o)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,o){var a,i,l=8*o-n-1,u=(1<<l)-1,_=u>>1,s=-7,c=r?o-1:0,f=r?-1:1,p=e[t+c];for(c+=f,a=p&(1<<-s)-1,p>>=-s,s+=l;s>0;a=256*a+e[t+c],c+=f,s-=8);for(i=a&(1<<-s)-1,a>>=-s,s+=n;s>0;i=256*i+e[t+c],c+=f,s-=8);if(0===a)a=1-_;else{if(a===u)return i?NaN:1/0*(p?-1:1);i+=Math.pow(2,n),a-=_}return(p?-1:1)*i*Math.pow(2,a-n)},t.write=function(e,t,r,n,o,a){var i,l,u,_=8*a-o-1,s=(1<<_)-1,c=s>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:a-1,d=n?1:-1,E=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(l=isNaN(t)?1:0,i=s):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+c>=1?f/u:f*Math.pow(2,1-c))*u>=2&&(i++,u/=2),i+c>=s?(l=0,i=s):i+c>=1?(l=(t*u-1)*Math.pow(2,o),i+=c):(l=t*Math.pow(2,c-1)*Math.pow(2,o),i=0));o>=8;e[r+p]=255&l,p+=d,l/=256,o-=8);for(i=i<<o|l,_+=o;_>0;e[r+p]=255&i,p+=d,i/=256,_-=8);e[r+p-d]|=128*E}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){(function(e,n){var o;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(a){var i=t,l=(e&&e.exports,"object"==typeof n&&n);l.global!==l&&l.window;var u,_,s,c=String.fromCharCode;function f(e){for(var t,r,n=[],o=0,a=e.length;o<a;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<a?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function p(e){if(e>=55296&&e<=57343)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value")}function d(e,t){return c(e>>t&63|128)}function E(e){if(0==(4294967168&e))return c(e);var t="";return 0==(4294965248&e)?t=c(e>>6&31|192):0==(4294901760&e)?(p(e),t=c(e>>12&15|224),t+=d(e,6)):0==(4292870144&e)&&(t=c(e>>18&7|240),t+=d(e,12),t+=d(e,6)),t+=c(63&e|128)}function h(){if(s>=_)throw Error("Invalid byte index");var e=255&u[s];if(s++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function b(){var e,t;if(s>_)throw Error("Invalid byte index");if(s==_)return!1;if(e=255&u[s],s++,0==(128&e))return e;if(192==(224&e)){if((t=(31&e)<<6|h())>=128)return t;throw Error("Invalid continuation byte")}if(224==(240&e)){if((t=(15&e)<<12|h()<<6|h())>=2048)return p(t),t;throw Error("Invalid continuation byte")}if(240==(248&e)&&(t=(7&e)<<18|h()<<12|h()<<6|h())>=65536&&t<=1114111)return t;throw Error("Invalid UTF-8 detected")}var m={version:"2.1.2",encode:function(e){for(var t=f(e),r=t.length,n=-1,o="";++n<r;)o+=E(t[n]);return o},decode:function(e){u=f(e),_=u.length,s=0;for(var t,r=[];!1!==(t=b());)r.push(t);return function(e){for(var t,r=e.length,n=-1,o="";++n<r;)(t=e[n])>65535&&(o+=c((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=c(t);return o}(r)}};void 0===(o=function(){return m}.call(t,r,t,e))||(e.exports=o)}()}).call(this,r(183)(e),r(41))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(27);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__name=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"createRepo",value:function(e,t){return this._request("POST","/orgs/"+this.__name+"/repos",e,t)}},{key:"getRepos",value:function(e){var t=this._getOptionsWithDefaults({direction:"desc"});return this._requestAllPages("/orgs/"+this.__name+"/repos",t,e)}},{key:"isMember",value:function(e,t){return this._request204or404("/orgs/"+this.__name+"/members/"+e,null,t)}},{key:"listMembers",value:function(e,t){return this._request("GET","/orgs/"+this.__name+"/members",e,t)}},{key:"getTeams",value:function(e){return this._requestAllPages("/orgs/"+this.__name+"/teams",void 0,e)}},{key:"createTeam",value:function(e,t){return this._request("POST","/orgs/"+this.__name+"/teams",e,t)}},{key:"listProjects",value:function(e){return this._requestAllPages("/orgs/"+this.__name+"/projects",{AcceptHeader:"inertia-preview"},e)}},{key:"createProject",value:function(e,t){return(e=e||{}).AcceptHeader="inertia-preview",this._request("POST","/orgs/"+this.__name+"/projects",e,t)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(27));function a(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2016 Matt Smith (Development Seed)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=(0,a(r(47)).default)("github:team"),l=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__teamId=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"getTeam",value:function(e){return i("Fetching Team "+this.__teamId),this._request("Get","/teams/"+this.__teamId,void 0,e)}},{key:"listRepos",value:function(e){return i("Fetching repositories for Team "+this.__teamId),this._requestAllPages("/teams/"+this.__teamId+"/repos",void 0,e)}},{key:"editTeam",value:function(e,t){return i("Editing Team "+this.__teamId),this._request("PATCH","/teams/"+this.__teamId,e,t)}},{key:"listMembers",value:function(e,t){return i("Getting members of Team "+this.__teamId),this._requestAllPages("/teams/"+this.__teamId+"/members",e,t)}},{key:"getMembership",value:function(e,t){return i("Getting membership of user "+e+" in Team "+this.__teamId),this._request("GET","/teams/"+this.__teamId+"/memberships/"+e,void 0,t)}},{key:"addMembership",value:function(e,t,r){return i("Adding user "+e+" to Team "+this.__teamId),this._request("PUT","/teams/"+this.__teamId+"/memberships/"+e,t,r)}},{key:"isManagedRepo",value:function(e,t,r){return i("Getting repo management by Team "+this.__teamId+" for repo "+e+"/"+t),this._request204or404("/teams/"+this.__teamId+"/repos/"+e+"/"+t,void 0,r)}},{key:"manageRepo",value:function(e,t,r,n){return i("Adding or Updating repo management by Team "+this.__teamId+" for repo "+e+"/"+t),this._request204or404("/teams/"+this.__teamId+"/repos/"+e+"/"+t,r,n,"PUT")}},{key:"unmanageRepo",value:function(e,t,r){return i("Remove repo management by Team "+this.__teamId+" for repo "+e+"/"+t),this._request204or404("/teams/"+this.__teamId+"/repos/"+e+"/"+t,void 0,r,"DELETE")}},{key:"deleteTeam",value:function(e){return i("Deleting Team "+this.__teamId),this._request204or404("/teams/"+this.__teamId,void 0,e,"DELETE")}}]),t}(o.default);e.exports=l},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(27);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(e,t){return this._request("POST","/markdown",e,t,!0)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(27);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n,"inertia-preview"));return o.__id=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"getProject",value:function(e){return this._request("GET","/projects/"+this.__id,null,e)}},{key:"updateProject",value:function(e,t){return this._request("PATCH","/projects/"+this.__id,e,t)}},{key:"deleteProject",value:function(e){return this._request("DELETE","/projects/"+this.__id,null,e)}},{key:"listProjectColumns",value:function(e){return this._requestAllPages("/projects/"+this.__id+"/columns",null,e)}},{key:"getProjectColumn",value:function(e,t){return this._request("GET","/projects/columns/"+e,null,t)}},{key:"createProjectColumn",value:function(e,t){return this._request("POST","/projects/"+this.__id+"/columns",e,t)}},{key:"updateProjectColumn",value:function(e,t,r){return this._request("PATCH","/projects/columns/"+e,t,r)}},{key:"deleteProjectColumn",value:function(e,t){return this._request("DELETE","/projects/columns/"+e,null,t)}},{key:"moveProjectColumn",value:function(e,t,r){return this._request("POST","/projects/columns/"+e+"/moves",{position:t},r)}},{key:"listProjectCards",value:function(e){var t=this;return this.listProjectColumns().then((function(e){var r=e.data;return Promise.all(r.map((function(e){return t._requestAllPages("/projects/columns/"+e.id+"/cards",null)})))})).then((function(t){var r=t.reduce((function(e,t){var r=t.data;return e.push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(r)),e}),[]);return e&&e(null,r),r})).catch((function(t){if(!e)throw t;e(t)}))}},{key:"listColumnCards",value:function(e,t){return this._requestAllPages("/projects/columns/"+e+"/cards",null,t)}},{key:"getProjectCard",value:function(e,t){return this._request("GET","/projects/columns/cards/"+e,null,t)}},{key:"createProjectCard",value:function(e,t,r){return this._request("POST","/projects/columns/"+e+"/cards",t,r)}},{key:"updateProjectCard",value:function(e,t,r){return this._request("PATCH","/projects/columns/cards/"+e,t,r)}},{key:"deleteProjectCard",value:function(e,t){return this._request("DELETE","/projects/columns/cards/"+e,null,t)}},{key:"moveProjectCard",value:function(e,t,r,n){return this._request("POST","/projects/columns/cards/"+e+"/moves",{position:t,column_id:r},n)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){e.exports=r(189)},function(e,t,r){r(190),e.exports=r(22).Object.assign},function(e,t,r){var n=r(24);n(n.S+n.F,"Object",{assign:r(104)})},function(e,t,r){var n=r(36),o=r(69),a=r(192);e.exports=function(e){return function(t,r,i){var l,u=n(t),_=o(u.length),s=a(i,_);if(e&&r!=r){for(;_>s;)if((l=u[s++])!=l)return!0}else for(;_>s;s++)if((e||s in u)&&u[s]===r)return e||s||0;return!e&&-1}}},function(e,t,r){var n=r(70),o=Math.max,a=Math.min;e.exports=function(e,t){return(e=n(e))<0?o(e+t,0):a(e,t)}},function(e,t,r){e.exports=r(194)},function(e,t,r){r(195),e.exports=r(22).Object.keys},function(e,t,r){var n=r(49),o=r(42);r(106)("keys",(function(){return function(e){return o(n(e))}}))},function(e,t,r){e.exports=r(197)},function(e,t,r){r(198);var n=r(22).Object;e.exports=function(e,t){return n.create(e,t)}},function(e,t,r){var n=r(24);n(n.S,"Object",{create:r(75)})},function(e,t,r){var n=r(34),o=r(38),a=r(42);e.exports=r(30)?Object.defineProperties:function(e,t){o(e);for(var r,i=a(t),l=i.length,u=0;l>u;)n.f(e,r=i[u++],t[r]);return e}},function(e,t,r){var n=r(28).document;e.exports=n&&n.documentElement},function(e,t,r){"use strict";var n=r(202);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,a,i){if(i!==n){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];function n(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=null;return t.forEach((function(e){if(null==o){var t=e.apply(void 0,r);null!=t&&(o=t)}})),o}return(0,a.default)(n)};var n,o=r(76),a=(n=o)&&n.__esModule?n:{default:n};e.exports=t.default},function(e,t,r){e.exports=r(205)},function(e,t,r){r(206),e.exports=r(22).Object.values},function(e,t,r){var n=r(24),o=r(107)(!1);n(n.S,"Object",{values:function(e){return o(e)}})},function(e,t,r){"use strict";e.exports=r(208)},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n="function"==typeof Symbol&&Symbol.for,o=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,l=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,_=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,E=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,b=n?Symbol.for("react.lazy"):60116,m=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,O=n?Symbol.for("react.scope"):60119;function P(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case c:case f:case i:case u:case l:case d:return e;default:switch(e=e&&e.$$typeof){case s:case p:case b:case h:case _:return e;default:return t}}case a:return t}}}function g(e){return P(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=_,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=b,t.Memo=h,t.Portal=a,t.Profiler=u,t.StrictMode=l,t.Suspense=d,t.isAsyncMode=function(e){return g(e)||P(e)===c},t.isConcurrentMode=g,t.isContextConsumer=function(e){return P(e)===s},t.isContextProvider=function(e){return P(e)===_},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return P(e)===p},t.isFragment=function(e){return P(e)===i},t.isLazy=function(e){return P(e)===b},t.isMemo=function(e){return P(e)===h},t.isPortal=function(e){return P(e)===a},t.isProfiler=function(e){return P(e)===u},t.isStrictMode=function(e){return P(e)===l},t.isSuspense=function(e){return P(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===l||e===d||e===E||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===h||e.$$typeof===_||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===v||e.$$typeof===O||e.$$typeof===m)},t.typeOf=P},function(e,t,r){r(210),e.exports=r(22).Object.entries},function(e,t,r){var n=r(24),o=r(107)(!0);n(n.S,"Object",{entries:function(e){return o(e)}})},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o,a,i,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var _=[r,n,o,a,i,l],s=0;(u=new Error(t.replace(/%s/g,(function(){return _[s++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(77)),u=n(r(0)),_=n(r(3)),s=n(r(26)),c=n(r(56)),f={href:_.default.string,onClick:_.default.func,onKeyDown:_.default.func,disabled:_.default.bool,role:_.default.string,tabIndex:_.default.oneOfType([_.default.number,_.default.string]),componentClass:s.default};function p(e){return!e||"#"===e.trim()}var d=function(e){function t(t,r){var n;return(n=e.call(this,t,r)||this).handleClick=n.handleClick.bind((0,l.default)((0,l.default)(n))),n.handleKeyDown=n.handleKeyDown.bind((0,l.default)((0,l.default)(n))),n}(0,i.default)(t,e);var r=t.prototype;return r.handleClick=function(e){var t=this.props,r=t.disabled,n=t.href,o=t.onClick;(r||p(n))&&e.preventDefault(),r?e.stopPropagation():o&&o(e)},r.handleKeyDown=function(e){" "===e.key&&(e.preventDefault(),this.handleClick(e))},r.render=function(){var e=this.props,t=e.componentClass,r=e.disabled,n=e.onKeyDown,i=(0,a.default)(e,["componentClass","disabled","onKeyDown"]);return p(i.href)&&(i.role=i.role||"button",i.href=i.href||"#"),r&&(i.tabIndex=-1,i.style=(0,o.default)({pointerEvents:"none"},i.style)),u.default.createElement(t,(0,o.default)({},i,{onClick:this.handleClick,onKeyDown:(0,c.default)(this.handleKeyDown,n)}))},t}(u.default.Component);d.propTypes=f,d.defaultProps={componentClass:"a"};var E=d;t.default=E,e.exports=t.default},function(e,t,r){e.exports=r(214)},function(e,t,r){r(215);var n=r(22).Object;e.exports=function(e,t){return n.getOwnPropertyDescriptor(e,t)}},function(e,t,r){var n=r(36),o=r(109).f;r(106)("getOwnPropertyDescriptor",(function(){return function(e,t){return o(n(e),t)}}))},function(e,t,r){e.exports=r(217)},function(e,t,r){r(218);var n=r(22).Object;e.exports=function(e,t,r){return n.defineProperty(e,t,r)}},function(e,t,r){var n=r(24);n(n.S+n.F*!r(30),"Object",{defineProperty:r(34).f})},function(e,t,r){var n=r(220),o=r(229);function a(t){return e.exports=a="function"==typeof o&&"symbol"==typeof n?function(e){return typeof e}:function(e){return e&&"function"==typeof o&&e.constructor===o&&e!==o.prototype?"symbol":typeof e},a(t)}e.exports=a},function(e,t,r){e.exports=r(221)},function(e,t,r){r(222),r(111),e.exports=r(80).f("iterator")},function(e,t,r){"use strict";var n=r(223)(!0);r(110)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})}))},function(e,t,r){var n=r(70),o=r(68);e.exports=function(e){return function(t,r){var a,i,l=String(o(t)),u=n(r),_=l.length;return u<0||u>=_?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===_||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}}},function(e,t,r){"use strict";var n=r(75),o=r(53),a=r(57),i={};r(33)(i,r(31)("iterator"),(function(){return this})),e.exports=function(e,t,r){e.prototype=n(i,{next:o(1,r)}),a(e,t+" Iterator")}},function(e,t,r){var n=r(35),o=r(49),a=r(71)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,r){"use strict";var n=r(227),o=r(228),a=r(50),i=r(36);e.exports=r(110)(Array,"Array",(function(e,t){this._t=i(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,r){e.exports=r(230)},function(e,t,r){r(231),r(113),r(234),r(235),e.exports=r(22).Symbol},function(e,t,r){"use strict";var n=r(28),o=r(35),a=r(30),i=r(24),l=r(79),u=r(58).KEY,_=r(39),s=r(72),c=r(57),f=r(55),p=r(31),d=r(80),E=r(81),h=r(232),b=r(82),m=r(38),y=r(29),v=r(49),O=r(36),P=r(65),g=r(53),D=r(75),M=r(233),C=r(109),T=r(74),w=r(34),R=r(42),A=C.f,L=w.f,I=M.f,k=n.Symbol,B=n.JSON,U=B&&B.stringify,x=p("_hidden"),S=p("toPrimitive"),W={}.propertyIsEnumerable,K=s("symbol-registry"),N=s("symbols"),z=s("op-symbols"),j=Object.prototype,q="function"==typeof k&&!!T.f,F=n.QObject,V=!F||!F.prototype||!F.prototype.findChild,G=a&&_((function(){return 7!=D(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=A(j,t);n&&delete j[t],L(e,t,r),n&&e!==j&&L(j,t,n)}:L,H=function(e){var t=N[e]=D(k.prototype);return t._k=e,t},$=q&&"symbol"==typeof k.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof k},Y=function(e,t,r){return e===j&&Y(z,t,r),m(e),t=P(t,!0),m(r),o(N,t)?(r.enumerable?(o(e,x)&&e[x][t]&&(e[x][t]=!1),r=D(r,{enumerable:g(0,!1)})):(o(e,x)||L(e,x,g(1,{})),e[x][t]=!0),G(e,t,r)):L(e,t,r)},Q=function(e,t){m(e);for(var r,n=h(t=O(t)),o=0,a=n.length;a>o;)Y(e,r=n[o++],t[r]);return e},X=function(e){var t=W.call(this,e=P(e,!0));return!(this===j&&o(N,e)&&!o(z,e))&&(!(t||!o(this,e)||!o(N,e)||o(this,x)&&this[x][e])||t)},J=function(e,t){if(e=O(e),t=P(t,!0),e!==j||!o(N,t)||o(z,t)){var r=A(e,t);return!r||!o(N,t)||o(e,x)&&e[x][t]||(r.enumerable=!0),r}},Z=function(e){for(var t,r=I(O(e)),n=[],a=0;r.length>a;)o(N,t=r[a++])||t==x||t==u||n.push(t);return n},ee=function(e){for(var t,r=e===j,n=I(r?z:O(e)),a=[],i=0;n.length>i;)!o(N,t=n[i++])||r&&!o(j,t)||a.push(N[t]);return a};q||(l((k=function(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(r){this===j&&t.call(z,r),o(this,x)&&o(this[x],e)&&(this[x][e]=!1),G(this,e,g(1,r))};return a&&V&&G(j,e,{configurable:!0,set:t}),H(e)}).prototype,"toString",(function(){return this._k})),C.f=J,w.f=Y,r(112).f=M.f=Z,r(48).f=X,T.f=ee,a&&!r(54)&&l(j,"propertyIsEnumerable",X,!0),d.f=function(e){return H(p(e))}),i(i.G+i.W+i.F*!q,{Symbol:k});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;te.length>re;)p(te[re++]);for(var ne=R(p.store),oe=0;ne.length>oe;)E(ne[oe++]);i(i.S+i.F*!q,"Symbol",{for:function(e){return o(K,e+="")?K[e]:K[e]=k(e)},keyFor:function(e){if(!$(e))throw TypeError(e+" is not a symbol!");for(var t in K)if(K[t]===e)return t},useSetter:function(){V=!0},useSimple:function(){V=!1}}),i(i.S+i.F*!q,"Object",{create:function(e,t){return void 0===t?D(e):Q(D(e),t)},defineProperty:Y,defineProperties:Q,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ae=_((function(){T.f(1)}));i(i.S+i.F*ae,"Object",{getOwnPropertySymbols:function(e){return T.f(v(e))}}),B&&i(i.S+i.F*(!q||_((function(){var e=k();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))}))),"JSON",{stringify:function(e){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);if(r=t=n[1],(y(t)||void 0!==e)&&!$(e))return b(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!$(t))return t}),n[1]=t,U.apply(B,n)}}),k.prototype[S]||r(33)(k.prototype,S,k.prototype.valueOf),c(k,"Symbol"),c(Math,"Math",!0),c(n.JSON,"JSON",!0)},function(e,t,r){var n=r(42),o=r(74),a=r(48);e.exports=function(e){var t=n(e),r=o.f;if(r)for(var i,l=r(e),u=a.f,_=0;l.length>_;)u.call(e,i=l[_++])&&t.push(i);return t}},function(e,t,r){var n=r(36),o=r(112).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(n(e))}},function(e,t,r){r(81)("asyncIterator")},function(e,t,r){r(81)("observable")},function(e,t,r){e.exports=r(237)},function(e,t,r){r(113),r(111),r(238),r(247),r(249),e.exports=r(22).WeakMap},function(e,t,r){"use strict";var n,o=r(28),a=r(83)(0),i=r(79),l=r(58),u=r(104),_=r(241),s=r(29),c=r(85),f=r(85),p=!o.ActiveXObject&&"ActiveXObject"in o,d=l.getWeak,E=Object.isExtensible,h=_.ufstore,b=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(e){if(s(e)){var t=d(e);return!0===t?h(c(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return _.def(c(this,"WeakMap"),e,t)}},y=e.exports=r(246)("WeakMap",b,m,_,!0,!0);f&&p&&(u((n=_.getConstructor(b,"WeakMap")).prototype,m),l.NEED=!0,a(["delete","has","get","set"],(function(e){var t=y.prototype,r=t[e];i(t,e,(function(t,o){if(s(t)&&!E(t)){this._f||(this._f=new n);var a=this._f[e](t,o);return"set"==e?this:a}return r.call(this,t,o)}))})))},function(e,t,r){var n=r(240);e.exports=function(e,t){return new(n(e))(t)}},function(e,t,r){var n=r(29),o=r(82),a=r(31)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),n(t)&&null===(t=t[a])&&(t=void 0)),void 0===t?Array:t}},function(e,t,r){"use strict";var n=r(114),o=r(58).getWeak,a=r(38),i=r(29),l=r(115),u=r(84),_=r(83),s=r(35),c=r(85),f=_(5),p=_(6),d=0,E=function(e){return e._l||(e._l=new h)},h=function(){this.a=[]},b=function(e,t){return f(e.a,(function(e){return e[0]===t}))};h.prototype={get:function(e){var t=b(this,e);if(t)return t[1]},has:function(e){return!!b(this,e)},set:function(e,t){var r=b(this,e);r?r[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,r,a){var _=e((function(e,n){l(e,_,t,"_i"),e._t=t,e._i=d++,e._l=void 0,null!=n&&u(n,r,e[a],e)}));return n(_.prototype,{delete:function(e){if(!i(e))return!1;var r=o(e);return!0===r?E(c(this,t)).delete(e):r&&s(r,this._i)&&delete r[this._i]},has:function(e){if(!i(e))return!1;var r=o(e);return!0===r?E(c(this,t)).has(e):r&&s(r,this._i)}}),_},def:function(e,t,r){var n=o(a(t),!0);return!0===n?E(e).set(t,r):n[e._i]=r,e},ufstore:E}},function(e,t,r){var n=r(38);e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){var a=e.return;throw void 0!==a&&n(a.call(e)),t}}},function(e,t,r){var n=r(50),o=r(31)("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(n.Array===e||a[o]===e)}},function(e,t,r){var n=r(245),o=r(31)("iterator"),a=r(50);e.exports=r(22).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||a[n(e)]}},function(e,t,r){var n=r(67),o=r(31)("toStringTag"),a="Arguments"==n(function(){return arguments}());e.exports=function(e){var t,r,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?r:a?n(t):"Object"==(i=n(t))&&"function"==typeof t.callee?"Arguments":i}},function(e,t,r){"use strict";var n=r(28),o=r(24),a=r(58),i=r(39),l=r(33),u=r(114),_=r(84),s=r(115),c=r(29),f=r(57),p=r(34).f,d=r(83)(0),E=r(30);e.exports=function(e,t,r,h,b,m){var y=n[e],v=y,O=b?"set":"add",P=v&&v.prototype,g={};return E&&"function"==typeof v&&(m||P.forEach&&!i((function(){(new v).entries().next()})))?(v=t((function(t,r){s(t,v,e,"_c"),t._c=new y,null!=r&&_(r,b,t[O],t)})),d("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","),(function(e){var t="add"==e||"set"==e;!(e in P)||m&&"clear"==e||l(v.prototype,e,(function(r,n){if(s(this,v,e),!t&&m&&!c(r))return"get"==e&&void 0;var o=this._c[e](0===r?0:r,n);return t?this:o}))})),m||p(v.prototype,"size",{get:function(){return this._c.size}})):(v=h.getConstructor(t,e,b,O),u(v.prototype,r),a.NEED=!0),f(v,e),g[e]=v,o(o.G+o.W+o.F,g),m||h.setStrong(v,e,b),v}},function(e,t,r){r(248)("WeakMap")},function(e,t,r){"use strict";var n=r(24);e.exports=function(e){n(n.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,r){r(250)("WeakMap")},function(e,t,r){"use strict";var n=r(24),o=r(101),a=r(52),i=r(84);e.exports=function(e){n(n.S,e,{from:function(e){var t,r,n,l,u=arguments[1];return o(this),(t=void 0!==u)&&o(u),null==e?new this:(r=[],t?(n=0,l=a(u,arguments[2],2),i(e,!1,(function(e){r.push(l(e,n++))}))):i(e,!1,r.push,r),new this(r))}})}},function(e,t,r){e.exports=r(252)},function(e,t,r){r(253),e.exports=r(22).Array.isArray},function(e,t,r){var n=r(24);n(n.S,"Array",{isArray:r(82)})},function(e,t,r){"use strict";var n=r(78),o=r(9);t.__esModule=!0,t.default=void 0;var a=o(r(13)),i=o(r(12)),l=o(r(11)),u=o(r(15)),_=n(r(0)),s=o(r(3)),c=o(r(255)),f=o(r(26)),p=o(r(121)),d=(0,l.default)({},c.default.propTypes,{show:s.default.bool,rootClose:s.default.bool,onHide:s.default.func,animation:s.default.oneOfType([s.default.bool,f.default]),onEnter:s.default.func,onEntering:s.default.func,onEntered:s.default.func,onExit:s.default.func,onExiting:s.default.func,onExited:s.default.func,placement:s.default.oneOf(["top","right","bottom","left"])}),E={animation:p.default,rootClose:!1,show:!1,placement:"right"},h=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.animation,n=t.children,o=(0,a.default)(t,["animation","children"]),i=!0===r?p.default:r||null;return e=i?n:(0,_.cloneElement)(n,{className:(0,u.default)(n.props.className,"in")}),_.default.createElement(c.default,(0,l.default)({},o,{transition:i}),e)},t}(_.default.Component);h.propTypes=d,h.defaultProps=E;var b=h;t.default=b,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=s(r(3)),a=s(r(26)),i=s(r(0)),l=s(r(116)),u=s(r(257)),_=s(r(270));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,r,n));return o.handleHidden=function(){var e;(o.setState({exited:!0}),o.props.onExited)&&(e=o.props).onExited.apply(e,arguments)},o.state={exited:!r.show},o.onHiddenListener=o.handleHidden.bind(o),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.UNSAFE_componentWillReceiveProps=function(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},t.prototype.render=function(){var e=this.props,t=e.container,r=e.containerPadding,n=e.target,o=e.placement,a=e.shouldUpdatePosition,s=e.rootClose,c=e.children,f=e.transition,p=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}(e,["container","containerPadding","target","placement","shouldUpdatePosition","rootClose","children","transition"]);if(!(p.show||f&&!this.state.exited))return null;var d=c;if(d=i.default.createElement(u.default,{container:t,containerPadding:r,target:n,placement:o,shouldUpdatePosition:a},d),f){var E=p.onExit,h=p.onExiting,b=p.onEnter,m=p.onEntering,y=p.onEntered;d=i.default.createElement(f,{in:p.show,appear:!0,onExit:E,onExiting:h,onExited:this.onHiddenListener,onEnter:b,onEntering:m,onEntered:y},d)}return s&&(d=i.default.createElement(_.default,{onRootClose:p.onHide,event:p.rootCloseEvent},d)),i.default.createElement(l.default,{container:t},d)},t}(i.default.Component);c.propTypes=n({},l.default.propTypes,u.default.propTypes,{show:o.default.bool,rootClose:o.default.bool,rootCloseEvent:_.default.propTypes.event,onHide:function(e){var t=o.default.func;e.rootClose&&(t=t.isRequired);for(var r=arguments.length,n=Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];return t.apply(void 0,[e].concat(n))},transition:a.default,onEnter:o.default.func,onEntering:o.default.func,onEntered:o.default.func,onExit:o.default.func,onExiting:o.default.func,onExited:o.default.func}),t.default=c,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=_(r(3)),o=_(r(59)),a=_(r(0)),i=_(r(25)),l=_(r(60)),u=_(r(44));function _(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){var r,n;s(this,t);for(var o=arguments.length,_=Array(o),f=0;f<o;f++)_[f]=arguments[f];return r=n=c(this,e.call.apply(e,[this].concat(_))),n._mountOverlayTarget=function(){n._overlayTarget||(n._overlayTarget=document.createElement("div"),n._portalContainerNode=(0,l.default)(n.props.container,(0,u.default)(n).body),n._portalContainerNode.appendChild(n._overlayTarget))},n._unmountOverlayTarget=function(){n._overlayTarget&&(n._portalContainerNode.removeChild(n._overlayTarget),n._overlayTarget=null),n._portalContainerNode=null},n._renderOverlay=function(){var e=n.props.children?a.default.Children.only(n.props.children):null;if(null!==e){n._mountOverlayTarget();var t=!n._overlayInstance;n._overlayInstance=i.default.unstable_renderSubtreeIntoContainer(n,e,n._overlayTarget,(function(){t&&n.props.onRendered&&n.props.onRendered()}))}else n._unrenderOverlay(),n._unmountOverlayTarget()},n._unrenderOverlay=function(){n._overlayTarget&&(i.default.unmountComponentAtNode(n._overlayTarget),n._overlayInstance=null)},n.getMountNode=function(){return n._overlayTarget},c(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){this._isMounted=!0,this._renderOverlay()},t.prototype.componentDidUpdate=function(){this._renderOverlay()},t.prototype.UNSAFE_componentWillReceiveProps=function(e){this._overlayTarget&&e.container!==this.props.container&&(this._portalContainerNode.removeChild(this._overlayTarget),this._portalContainerNode=(0,l.default)(e.container,(0,u.default)(this).body),this._portalContainerNode.appendChild(this._overlayTarget))},t.prototype.componentWillUnmount=function(){this._isMounted=!1,this._unrenderOverlay(),this._unmountOverlayTarget()},t.prototype.render=function(){return null},t}(a.default.Component);f.displayName="Portal",f.propTypes={container:n.default.oneOfType([o.default,n.default.func]),onRendered:n.default.func},t.default=f,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=p(r(15)),a=p(r(3)),i=p(r(59)),l=r(0),u=p(l),_=p(r(25)),s=p(r(258)),c=p(r(60)),f=p(r(44));function p(e){return e&&e.__esModule?e:{default:e}}function d(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}var E=function(e){function t(r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,r,n));return o.getTarget=function(){var e=o.props.target,t="function"==typeof e?e():e;return t&&_.default.findDOMNode(t)||null},o.maybeUpdatePosition=function(e){var t=o.getTarget();(o.props.shouldUpdatePosition||t!==o._lastTarget||e)&&o.updatePosition(t)},o.state={positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null},o._needsFlush=!1,o._lastTarget=null,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){this.updatePosition(this.getTarget())},t.prototype.UNSAFE_componentWillReceiveProps=function(){this._needsFlush=!0},t.prototype.componentDidUpdate=function(e){this._needsFlush&&(this._needsFlush=!1,this.maybeUpdatePosition(this.props.placement!==e.placement))},t.prototype.render=function(){var e=this.props,t=e.children,r=e.className,a=d(e,["children","className"]),i=this.state,_=i.positionLeft,s=i.positionTop,c=d(i,["positionLeft","positionTop"]);delete a.target,delete a.container,delete a.containerPadding,delete a.shouldUpdatePosition;var f=u.default.Children.only(t);return(0,l.cloneElement)(f,n({},a,c,{positionLeft:_,positionTop:s,className:(0,o.default)(r,f.props.className),style:n({},f.props.style,{left:_,top:s})}))},t.prototype.updatePosition=function(e){if(this._lastTarget=e,e){var t=_.default.findDOMNode(this),r=(0,c.default)(this.props.container,(0,f.default)(this).body);this.setState((0,s.default)(this.props.placement,t,e,r,this.props.containerPadding))}else this.setState({positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null})},t}(u.default.Component);E.propTypes={target:a.default.oneOfType([i.default,a.default.func]),container:a.default.oneOfType([i.default,a.default.func]),containerPadding:a.default.number,placement:a.default.oneOf(["top","right","bottom","left"]),shouldUpdatePosition:a.default.bool},E.displayName="Position",E.defaultProps={containerPadding:0,placement:"right",shouldUpdatePosition:!1},t.default=E,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t,r,a,i){var l="BODY"===a.tagName?(0,n.default)(r):(0,o.default)(r,a),_=(0,n.default)(t),s=_.height,c=_.width,f=void 0,p=void 0,d=void 0,E=void 0;if("left"===e||"right"===e){p=l.top+(l.height-s)/2,f="left"===e?l.left-c:l.left+l.width;var h=function(e,t,r,n){var o=u(r),a=o.scroll,i=o.height,l=e-n-a,_=e+n-a+t;return l<0?-l:_>i?i-_:0}(p,s,a,i);p+=h,E=50*(1-2*h/s)+"%",d=void 0}else{if("top"!==e&&"bottom"!==e)throw new Error('calcOverlayPosition(): No such placement of "'+e+'" found.');f=l.left+(l.width-c)/2,p="top"===e?l.top-s:l.top+l.height;var b=function(e,t,r,n){var o=u(r).width,a=e-n,i=e+n+t;if(a<0)return-a;if(i>o)return o-i;return 0}(f,c,a,i);f+=b,d=50*(1-2*b/c)+"%",E=void 0}return{positionLeft:f,positionTop:p,arrowOffsetLeft:d,arrowOffsetTop:E}};var n=l(r(117)),o=l(r(259)),a=l(r(119)),i=l(r(44));function l(e){return e&&e.__esModule?e:{default:e}}function u(e){var t=void 0,r=void 0,o=void 0;if("BODY"===e.tagName)t=window.innerWidth,r=window.innerHeight,o=(0,a.default)((0,i.default)(e).documentElement)||(0,a.default)(e);else{var l=(0,n.default)(e);t=l.width,r=l.height,o=(0,a.default)(e)}return{width:t,height:r,scroll:o}}e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){var r,n={top:0,left:0};"fixed"===(0,_.default)(e,"position")?r=e.getBoundingClientRect():(t=t||(0,i.default)(e),r=(0,a.default)(e),"html"!==function(e){return e.nodeName&&e.nodeName.toLowerCase()}(t)&&(n=(0,a.default)(t)),n.top+=parseInt((0,_.default)(t,"borderTopWidth"),10)-(0,l.default)(t)||0,n.left+=parseInt((0,_.default)(t,"borderLeftWidth"),10)-(0,u.default)(t)||0);return(0,o.default)({},r,{top:r.top-n.top-(parseInt((0,_.default)(e,"marginTop"),10)||0),left:r.left-n.left-(parseInt((0,_.default)(e,"marginLeft"),10)||0)})};var o=n(r(260)),a=n(r(117)),i=n(r(261)),l=n(r(119)),u=n(r(269)),_=n(r(86));e.exports=t.default},function(e,t){function r(){return e.exports=r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},r.apply(this,arguments)}e.exports=r},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e),r=e&&e.offsetParent;for(;r&&"html"!==i(e)&&"static"===(0,a.default)(r,"position");)r=r.offsetParent;return r||t.documentElement};var o=n(r(45)),a=n(r(86));function i(e){return e.nodeName&&e.nodeName.toLowerCase()}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(n,(function(e,t){return t.toUpperCase()}))};var n=/-(.)/g;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){return(0,o.default)(e).replace(a,"-ms-")};var o=n(r(264)),a=/^ms-/;e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(n,"-$1").toLowerCase()};var n=/([A-Z])/g;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var r=e.style;"float"==(t=(0,o.default)(t))&&(t="styleFloat");var n=e.currentStyle[t]||null;if(null==n&&r&&r[t]&&(n=r[t]),i.test(n)&&!a.test(t)){var l=r.left,u=e.runtimeStyle,_=u&&u.left;_&&(u.left=e.currentStyle.left),r.left="fontSize"===t?"1em":n,n=r.pixelLeft+"px",r.left=l,_&&(u.left=_)}return n}}};var o=n(r(118)),a=/^(top|right|bottom|left)$/,i=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,a,i,l,u,_,s,c,f,p,d,E=n(r(32)),h="transform";if(t.transform=h,t.animationEnd=i,t.transitionEnd=a,t.transitionDelay=s,t.transitionTiming=_,t.transitionDuration=u,t.transitionProperty=l,t.animationDelay=d,t.animationTiming=p,t.animationDuration=f,t.animationName=c,E.default){var b=function(){for(var e,t,r=document.createElement("div").style,n={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(n),a="",i=0;i<o.length;i++){var l=o[i];if(l+"TransitionProperty"in r){a="-"+l.toLowerCase(),e=n[l]("TransitionEnd"),t=n[l]("AnimationEnd");break}}!e&&"transitionProperty"in r&&(e="transitionend");!t&&"animationName"in r&&(t="animationend");return r=null,{animationEnd:t,transitionEnd:e,prefix:a}}();o=b.prefix,t.transitionEnd=a=b.transitionEnd,t.animationEnd=i=b.animationEnd,t.transform=h=o+"-"+h,t.transitionProperty=l=o+"-transition-property",t.transitionDuration=u=o+"-transition-duration",t.transitionDelay=s=o+"-transition-delay",t.transitionTiming=_=o+"-transition-timing-function",t.animationName=c=o+"-animation-name",t.animationDuration=f=o+"-animation-duration",t.animationTiming=p=o+"-animation-delay",t.animationDelay=d=o+"-animation-timing-function"}var m={transform:h,end:a,property:l,timing:_,delay:s,duration:u};t.default=m},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return!(!e||!n.test(e))};var n=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){var r=(0,o.default)(e);if(void 0===t)return r?"pageXOffset"in r?r.pageXOffset:r.document.documentElement.scrollLeft:e.scrollLeft;r?r.scrollTo(t,"pageYOffset"in r?r.pageYOffset:r.document.documentElement.scrollTop):e.scrollLeft=t};var o=n(r(61));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=_(r(51)),o=_(r(3)),a=_(r(0)),i=_(r(25)),l=_(r(120)),u=_(r(44));function _(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,r,o));return a.addEventListeners=function(){var e=a.props.event,t=(0,u.default)(a);a.documentMouseCaptureListener=(0,l.default)(t,e,a.handleMouseCapture,!0),a.documentMouseListener=(0,l.default)(t,e,a.handleMouse),a.documentKeyupListener=(0,l.default)(t,"keyup",a.handleKeyUp)},a.removeEventListeners=function(){a.documentMouseCaptureListener&&a.documentMouseCaptureListener.remove(),a.documentMouseListener&&a.documentMouseListener.remove(),a.documentKeyupListener&&a.documentKeyupListener.remove()},a.handleMouseCapture=function(e){var t;a.preventMouseRootClose=!!((t=e).metaKey||t.altKey||t.ctrlKey||t.shiftKey)||!function(e){return 0===e.button}(e)||(0,n.default)(i.default.findDOMNode(a),e.target)},a.handleMouse=function(e){!a.preventMouseRootClose&&a.props.onRootClose&&a.props.onRootClose(e)},a.handleKeyUp=function(e){27===e.keyCode&&a.props.onRootClose&&a.props.onRootClose(e)},a.preventMouseRootClose=!1,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){this.props.disabled||this.addEventListeners()},t.prototype.componentDidUpdate=function(e){!this.props.disabled&&e.disabled?this.addEventListeners():this.props.disabled&&!e.disabled&&this.removeEventListeners()},t.prototype.componentWillUnmount=function(){this.props.disabled||this.removeEventListeners()},t.prototype.render=function(){return this.props.children},t}(a.default.Component);s.displayName="RootCloseWrapper",s.propTypes={onRootClose:o.default.func,children:o.default.element,disabled:o.default.bool,event:o.default.oneOf(["click","mousedown"])},s.defaultProps={event:"click"},t.default=s,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(3)),o=l(r(0)),a=l(r(25)),i=r(272);r(273);function l(e){return e&&e.__esModule?e:{default:e}}t.UNMOUNTED="unmounted";t.EXITED="exited";t.ENTERING="entering";t.ENTERED="entered";t.EXITING="exiting";var u=function(e){var t,r;function n(t,r){var n;n=e.call(this,t,r)||this;var o,a=r.transitionGroup,i=a&&!a.isMounting?t.enter:t.appear;return n.appearStatus=null,t.in?i?(o="exited",n.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",n.state={status:o},n.nextCallback=null,n}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var i=n.prototype;return i.getChildContext=function(){return{transitionGroup:null}},n.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null},i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var t=null;if(e!==this.props){var r=this.state.status;this.props.in?"entering"!==r&&"entered"!==r&&(t="entering"):"entering"!==r&&"entered"!==r||(t="exiting")}this.updateStatus(!1,t)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,t,r,n=this.props.timeout;return e=t=r=n,null!=n&&"number"!=typeof n&&(e=n.exit,t=n.enter,r=void 0!==n.appear?n.appear:t),{exit:e,enter:t,appear:r}},i.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var r=a.default.findDOMNode(this);"entering"===t?this.performEnter(r,e):this.performExit(r)}else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},i.performEnter=function(e,t){var r=this,n=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts(),i=o?a.appear:a.enter;t||n?(this.props.onEnter(e,o),this.safeSetState({status:"entering"},(function(){r.props.onEntering(e,o),r.onTransitionEnd(e,i,(function(){r.safeSetState({status:"entered"},(function(){r.props.onEntered(e,o)}))}))}))):this.safeSetState({status:"entered"},(function(){r.props.onEntered(e)}))},i.performExit=function(e){var t=this,r=this.props.exit,n=this.getTimeouts();r?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,n.exit,(function(){t.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},i.setNextCallback=function(e){var t=this,r=!0;return this.nextCallback=function(n){r&&(r=!1,t.nextCallback=null,e(n))},this.nextCallback.cancel=function(){r=!1},this.nextCallback},i.onTransitionEnd=function(e,t,r){this.setNextCallback(r);var n=null==t&&!this.props.addEndListener;e&&!n?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},i.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,r=t.children,n=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(t,["children"]);if(delete n.in,delete n.mountOnEnter,delete n.unmountOnExit,delete n.appear,delete n.enter,delete n.exit,delete n.timeout,delete n.addEndListener,delete n.onEnter,delete n.onEntering,delete n.onEntered,delete n.onExit,delete n.onExiting,delete n.onExited,"function"==typeof r)return r(e,n);var a=o.default.Children.only(r);return o.default.cloneElement(a,n)},n}(o.default.Component);function _(){}u.contextTypes={transitionGroup:n.object},u.childContextTypes={transitionGroup:function(){}},u.propTypes={},u.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:_,onEntering:_,onEntered:_,onExit:_,onExiting:_,onExited:_},u.UNMOUNTED=0,u.EXITED=1,u.ENTERING=2,u.ENTERED=3,u.EXITING=4;var s=(0,i.polyfill)(u);t.default=s},function(e,t,r){"use strict";function n(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var r=this.constructor.getDerivedStateFromProps(e,t);return null!=r?r:null}.bind(this))}function a(e,t){try{var r=this.props,n=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(r,n)}finally{this.props=r,this.state=n}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var r=null,i=null,l=null;if("function"==typeof t.componentWillMount?r="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(r="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==r||null!==i||null!==l){var u=e.displayName||e.name,_="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+u+" uses "+_+" but also contains the following legacy lifecycles:"+(null!==r?"\n  "+r:"")+(null!==i?"\n  "+i:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=n,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,r){var n=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:r;s.call(this,e,t,n)}}return e}r.r(t),r.d(t,"polyfill",(function(){return i})),n.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,t,r){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0;var n;(n=r(3))&&n.__esModule;t.timeoutsShape=null;t.classNamesShape=null},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,r,n,o,a){var i=n||"<<anonymous>>",l=a||r;if(null==t[r])return new Error("The "+o+" `"+l+"` is required to make `"+i+"` accessible for users of assistive technologies such as screen readers.");for(var u=arguments.length,_=Array(u>5?u-5:0),s=5;s<u;s++)_[s-5]=arguments[s];return e.apply(void 0,[t,r,n,o,a].concat(_))}},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(0));var a={map:function(e,t,r){var n=0;return o.default.Children.map(e,(function(e){return o.default.isValidElement(e)?t.call(r,e,n++):e}))},forEach:function(e,t,r){var n=0;o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&t.call(r,e,n++)}))},count:function(e){var t=0;return o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&++t})),t},find:function(e,t,r){var n,a=0;return o.default.Children.forEach(e,(function(e){n||o.default.isValidElement(e)&&t.call(r,e,a++)&&(n=e)})),n},filter:function(e,t,r){var n=0,a=[];return o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&t.call(r,e,n++)&&a.push(e)})),a},every:function(e,t,r){var n=0,a=!0;return o.default.Children.forEach(e,(function(e){a&&o.default.isValidElement(e)&&(t.call(r,e,n++)||(a=!1))})),a},some:function(e,t,r){var n=0,a=!1;return o.default.Children.forEach(e,(function(e){a||o.default.isValidElement(e)&&t.call(r,e,n++)&&(a=!0)})),a},toArray:function(e){var t=[];return o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&t.push(e)})),t}};t.default=a,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(13)),a=n(r(11)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(277)),c=r(18),f={$bs_formGroup:_.default.object},p=function(e){function t(){return e.apply(this,arguments)||this}(0,i.default)(t,e);var r=t.prototype;return r.getGlyph=function(e){switch(e){case"success":return"ok";case"warning":return"warning-sign";case"error":return"remove";default:return null}},r.renderDefaultFeedback=function(e,t,r,n){var o=this.getGlyph(e&&e.validationState);return o?u.default.createElement(s.default,(0,a.default)({},n,{glyph:o,className:(0,l.default)(t,r)})):null},r.render=function(){var e=this.props,t=e.className,r=e.children,n=(0,o.default)(e,["className","children"]),i=(0,c.splitBsProps)(n),_=i[0],s=i[1],f=(0,c.getClassSet)(_);if(!r)return this.renderDefaultFeedback(this.context.$bs_formGroup,t,f,s);var p=u.default.Children.only(r);return u.default.cloneElement(p,(0,a.default)({},s,{className:(0,l.default)(p.props.className,t,f)}))},t}(u.default.Component);p.defaultProps={bsRole:"feedback"},p.contextTypes=f;var d=(0,c.bsClass)("form-control-feedback",p);t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c={glyph:_.default.string.isRequired},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.glyph,n=t.className,i=(0,a.default)(t,["glyph","className"]),_=(0,s.splitBsProps)(i),c=_[0],f=_[1],p=(0,o.default)({},(0,s.getClassSet)(c),((e={})[(0,s.prefix)(c,r)]=!0,e));return u.default.createElement("span",(0,o.default)({},f,{className:(0,l.default)(n,p)}))},t}(u.default.Component);f.propTypes=c;var p=(0,s.bsClass)("glyphicon",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(26)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"p"};var p=(0,s.bsClass)("form-control-static",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(87));t.on=o.default;var a=n(r(88));t.off=a.default;var i=n(r(280));t.filter=i.default;var l=n(r(282));t.listen=l.default;var u={on:o.default,off:a.default,filter:i.default,listen:l.default};t.default=u},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){return function(r){var n=r.currentTarget,i=r.target;(0,a.default)(n,e).some((function(e){return(0,o.default)(e,i)}))&&t.call(this,r)}};var o=n(r(51)),a=n(r(281));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){var r,a="#"===t[0],i="."===t[0],l=a||i?t.slice(1):t;if(n.test(l))return a?(e=e.getElementById?e:document,(r=e.getElementById(l))?[r]:[]):e.getElementsByClassName&&i?o(e.getElementsByClassName(l)):o(e.getElementsByTagName(t));return o(e.querySelectorAll(t))};var n=/^[\w-]*$/,o=Function.prototype.bind.call(Function.prototype.call,[].slice);e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(32)),a=n(r(87)),i=n(r(88)),l=function(){};o.default&&(l=function(e,t,r,n){return(0,a.default)(e,t,r,n),function(){(0,i.default)(e,t,r,n)}});var u=l;t.default=u,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=P(r(284)),a=P(r(51)),i=P(r(32)),l=P(r(3)),u=P(r(59)),_=P(r(285)),s=P(r(26)),c=r(0),f=P(c),p=P(r(25)),d=P(r(43)),E=P(r(287)),h=P(r(116)),b=P(r(292)),m=P(r(120)),y=P(r(293)),v=P(r(60)),O=P(r(44));function P(e){return e&&e.__esModule?e:{default:e}}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function D(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var M=new E.default,C=function(e){function t(){var r,n;g(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=D(this,e.call.apply(e,[this].concat(a))),T.call(n),D(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.omitProps=function(e,t){var r=Object.keys(e),n={};return r.map((function(r){Object.prototype.hasOwnProperty.call(t,r)||(n[r]=e[r])})),n},t.prototype.render=function(){var e=this.props,r=e.show,o=e.container,a=e.children,i=e.transition,l=e.backdrop,u=e.className,_=e.style,s=e.onExit,p=e.onExiting,d=e.onEnter,E=e.onEntering,m=e.onEntered,y=f.default.Children.only(a),v=this.omitProps(this.props,t.propTypes);if(!(r||i&&!this.state.exited))return null;var O=y.props,P=O.role,g=O.tabIndex;return void 0!==P&&void 0!==g||(y=(0,c.cloneElement)(y,{role:void 0===P?"document":P,tabIndex:null==g?"-1":g})),i&&(y=f.default.createElement(i,{appear:!0,unmountOnExit:!0,in:r,onExit:s,onExiting:p,onExited:this.handleHidden,onEnter:d,onEntering:E,onEntered:m},y)),f.default.createElement(h.default,{ref:this.setMountNode,container:o,onRendered:this.onPortalRendered},f.default.createElement("div",n({ref:this.setModalNodeRef,role:P||"dialog"},v,{style:_,className:u}),l&&this.renderBackdrop(),f.default.createElement(b.default,{ref:this.setDialogRef},y)))},t.prototype.UNSAFE_componentWillReceiveProps=function(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},t.prototype.UNSAFE_componentWillUpdate=function(e){!this.props.show&&e.show&&this.checkForFocus()},t.prototype.componentDidMount=function(){this._isMounted=!0,this.props.show&&this.onShow()},t.prototype.componentDidUpdate=function(e){var t=this.props.transition;!e.show||this.props.show||t?!e.show&&this.props.show&&this.onShow():this.onHide()},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.show,r=e.transition;this._isMounted=!1,(t||r&&!this.state.exited)&&this.onHide()},t.prototype.autoFocus=function(){if(this.props.autoFocus){var e=this.getDialogElement(),t=(0,o.default)((0,O.default)(this));e&&!(0,a.default)(e,t)&&(this.lastFocus=t,e.hasAttribute("tabIndex")||((0,d.default)(!1,'The modal content node does not accept focus. For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'),e.setAttribute("tabIndex",-1)),e.focus())}},t.prototype.restoreLastFocus=function(){this.lastFocus&&this.lastFocus.focus&&(this.lastFocus.focus(),this.lastFocus=null)},t.prototype.getDialogElement=function(){return p.default.findDOMNode(this.dialog)},t.prototype.isTopModal=function(){return this.props.manager.isTopModal(this)},t}(f.default.Component);C.propTypes=n({},h.default.propTypes,{show:l.default.bool,container:l.default.oneOfType([u.default,l.default.func]),onShow:l.default.func,onHide:l.default.func,backdrop:l.default.oneOfType([l.default.bool,l.default.oneOf(["static"])]),renderBackdrop:l.default.func,onEscapeKeyDown:l.default.func,onEscapeKeyUp:(0,_.default)(l.default.func,"Please use onEscapeKeyDown instead for consistency"),onBackdropClick:l.default.func,backdropStyle:l.default.object,backdropClassName:l.default.string,containerClassName:l.default.string,keyboard:l.default.bool,transition:s.default,backdropTransition:s.default,autoFocus:l.default.bool,enforceFocus:l.default.bool,restoreFocus:l.default.bool,onEnter:l.default.func,onEntering:l.default.func,onEntered:l.default.func,onExit:l.default.func,onExiting:l.default.func,onExited:l.default.func,manager:l.default.object.isRequired}),C.defaultProps={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,onHide:function(){},manager:M,renderBackdrop:function(e){return f.default.createElement("div",e)}};var T=function(){var e=this;this.state={exited:!this.props.show},this.renderBackdrop=function(){var t=e.props,r=t.backdropStyle,n=t.backdropClassName,o=t.renderBackdrop,a=t.backdropTransition,i=o({ref:function(t){return e.backdrop=t},style:r,className:n,onClick:e.handleBackdropClick});return a&&(i=f.default.createElement(a,{appear:!0,in:e.props.show},i)),i},this.onPortalRendered=function(){e.autoFocus(),e.props.onShow&&e.props.onShow()},this.onShow=function(){var t=(0,O.default)(e),r=(0,v.default)(e.props.container,t.body);e.props.manager.add(e,r,e.props.containerClassName),e._onDocumentKeydownListener=(0,m.default)(t,"keydown",e.handleDocumentKeyDown),e._onDocumentKeyupListener=(0,m.default)(t,"keyup",e.handleDocumentKeyUp),e._onFocusinListener=(0,y.default)(e.enforceFocus)},this.onHide=function(){e.props.manager.remove(e),e._onDocumentKeydownListener.remove(),e._onDocumentKeyupListener.remove(),e._onFocusinListener.remove(),e.props.restoreFocus&&e.restoreLastFocus()},this.setMountNode=function(t){e.mountNode=t?t.getMountNode():t},this.setModalNodeRef=function(t){e.modalNode=t},this.setDialogRef=function(t){e.dialog=t},this.handleHidden=function(){var t;(e.setState({exited:!0}),e.onHide(),e.props.onExited)&&(t=e.props).onExited.apply(t,arguments)},this.handleBackdropClick=function(t){t.target===t.currentTarget&&(e.props.onBackdropClick&&e.props.onBackdropClick(t),!0===e.props.backdrop&&e.props.onHide())},this.handleDocumentKeyDown=function(t){e.props.keyboard&&27===t.keyCode&&e.isTopModal()&&(e.props.onEscapeKeyDown&&e.props.onEscapeKeyDown(t),e.props.onHide())},this.handleDocumentKeyUp=function(t){e.props.keyboard&&27===t.keyCode&&e.isTopModal()&&e.props.onEscapeKeyUp&&e.props.onEscapeKeyUp(t)},this.checkForFocus=function(){i.default&&(e.lastFocus=(0,o.default)())},this.enforceFocus=function(){if(e.props.enforceFocus&&e._isMounted&&e.isTopModal()){var t=e.getDialogElement(),r=(0,o.default)((0,O.default)(e));t&&!(0,a.default)(t,r)&&t.focus()}}};C.Manager=E.default,t.default=C,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){void 0===e&&(e=(0,o.default)());try{return e.activeElement}catch(e){}};var o=n(r(45));e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=l;var n,o=r(286),a=(n=o)&&n.__esModule?n:{default:n};var i={};function l(e,t){return function(r,n,o,l,u){var _=o||"<<anonymous>>",s=u||n;if(null!=r[n]){var c=o+"."+n;(0,a.default)(i[c],"The "+l+" `"+s+"` of `"+_+"` is deprecated. "+t+"."),i[c]=!0}for(var f=arguments.length,p=Array(f>5?f-5:0),d=5;d<f;d++)p[d-5]=arguments[d];return e.apply(void 0,[r,n,o,l,u].concat(p))}}l._resetWarned=function(){i={}},e.exports=t.default},function(e,t,r){"use strict";var n=function(){};e.exports=n},function(e,t,r){"use strict";t.__esModule=!0;var n=u(r(288)),o=u(r(86)),a=u(r(122)),i=u(r(124)),l=r(291);function u(e){return e&&e.__esModule?e:{default:e}}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){return r=function(e){return-1!==e.modals.indexOf(t)},n=-1,e.some((function(e,t){if(r(e,t))return n=t,!0})),n;var r,n}function c(e,t){var r={overflow:"hidden"};e.style={overflow:t.style.overflow,paddingRight:t.style.paddingRight},e.overflowing&&(r.paddingRight=parseInt((0,o.default)(t,"paddingRight")||0,10)+(0,a.default)()+"px"),(0,o.default)(t,r)}function f(e,t){var r=e.style;Object.keys(r).forEach((function(e){return t.style[e]=r[e]}))}t.default=function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=r.hideSiblingNodes,a=void 0===o||o,u=r.handleContainerOverflow,p=void 0===u||u;_(this,e),this.add=function(e,r,o){var a=t.modals.indexOf(e),u=t.containers.indexOf(r);if(-1!==a)return a;if(a=t.modals.length,t.modals.push(e),t.hideSiblingNodes&&(0,l.hideSiblings)(r,e.mountNode),-1!==u)return t.data[u].modals.push(e),a;var _={modals:[e],classes:o?o.split(/\s+/):[],overflowing:(0,i.default)(r)};return t.handleContainerOverflow&&c(_,r),_.classes.forEach(n.default.addClass.bind(null,r)),t.containers.push(r),t.data.push(_),a},this.remove=function(e){var r=t.modals.indexOf(e);if(-1!==r){var o=s(t.data,e),a=t.data[o],i=t.containers[o];a.modals.splice(a.modals.indexOf(e),1),t.modals.splice(r,1),0===a.modals.length?(a.classes.forEach(n.default.removeClass.bind(null,i)),t.handleContainerOverflow&&f(a,i),t.hideSiblingNodes&&(0,l.showSiblings)(i,e.mountNode),t.containers.splice(o,1),t.data.splice(o,1)):t.hideSiblingNodes&&(0,l.ariaHidden)(!1,a.modals[a.modals.length-1].mountNode)}},this.isTopModal=function(e){return!!t.modals.length&&t.modals[t.modals.length-1]===e},this.hideSiblingNodes=a,this.handleContainerOverflow=p,this.modals=[],this.containers=[],this.data=[]},e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(289));t.addClass=o.default;var a=n(r(290));t.removeClass=a.default;var i=n(r(123));t.hasClass=i.default;var l={addClass:o.default,removeClass:a.default,hasClass:i.default};t.default=l},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=n(r(123));e.exports=t.default},function(e,t,r){"use strict";function n(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=n(e.className,t):e.setAttribute("class",n(e.className&&e.className.baseVal||"",t))}},function(e,t,r){"use strict";t.__esModule=!0,t.ariaHidden=a,t.hideSiblings=function(e,t){o(e,t,(function(e){return a(!0,e)}))},t.showSiblings=function(e,t){o(e,t,(function(e){return a(!1,e)}))};var n=["template","script","style"],o=function(e,t,r){t=[].concat(t),[].forEach.call(e.children,(function(e){var o,a,i;-1===t.indexOf(e)&&(a=(o=e).nodeType,i=o.tagName,1===a&&-1===n.indexOf(i.toLowerCase()))&&r(e)}))};function a(e,t){t&&(e?t.setAttribute("aria-hidden","true"):t.removeAttribute("aria-hidden"))}},function(e,t,r){"use strict";t.__esModule=!0;var n=a(r(3)),o=a(r(0));function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u={children:n.default.node},_=function(e){function t(){return i(this,t),l(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return this.props.children},t}(o.default.Component);_.propTypes=u,t.default=_,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){var t=!document.addEventListener,r=void 0;t?(document.attachEvent("onfocusin",e),r=function(){return document.detachEvent("onfocusin",e)}):(document.addEventListener("focus",e,!0),r=function(){return document.removeEventListener("focus",e,!0)});return{remove:r}},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(26)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"div"};var p=(0,s.bsClass)("modal-body",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c=r(40),f={dialogClassName:_.default.string},p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.dialogClassName,n=t.className,i=t.style,_=t.children,c=t.onMouseDownDialog,f=(0,a.default)(t,["dialogClassName","className","style","children","onMouseDownDialog"]),p=(0,s.splitBsProps)(f),d=p[0],E=p[1],h=(0,s.prefix)(d),b=(0,o.default)({display:"block"},i),m=(0,o.default)({},(0,s.getClassSet)(d),((e={})[h]=!1,e[(0,s.prefix)(d,"dialog")]=!0,e));return u.default.createElement("div",(0,o.default)({},E,{tabIndex:"-1",role:"dialog",style:b,className:(0,l.default)(n,h)}),u.default.createElement("div",{className:(0,l.default)(r,m),onMouseDown:c},u.default.createElement("div",{className:(0,s.prefix)(d,"content"),role:"document"},_)))},t}(u.default.Component);p.propTypes=f;var d=(0,s.bsClass)("modal",(0,s.bsSizes)([c.Size.LARGE,c.Size.SMALL],p));t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(26)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"div"};var p=(0,s.bsClass)("modal-footer",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(3)),_=n(r(0)),s=r(18),c=n(r(56)),f=n(r(298)),p={closeLabel:u.default.string,closeButton:u.default.bool,onHide:u.default.func},d={$bs_modal:u.default.shape({onHide:u.default.func})},E=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.closeLabel,r=e.closeButton,n=e.onHide,i=e.className,u=e.children,p=(0,a.default)(e,["closeLabel","closeButton","onHide","className","children"]),d=this.context.$bs_modal,E=(0,s.splitBsProps)(p),h=E[0],b=E[1],m=(0,s.getClassSet)(h);return _.default.createElement("div",(0,o.default)({},b,{className:(0,l.default)(i,m)}),r&&_.default.createElement(f.default,{label:t,onClick:(0,c.default)(d&&d.onHide,n)}),u)},t}(_.default.Component);E.propTypes=p,E.defaultProps={closeLabel:"Close",closeButton:!1},E.contextTypes=d;var h=(0,s.bsClass)("modal-header",E);t.default=h,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(12)),a=n(r(3)),i=n(r(0)),l={label:a.default.string.isRequired,onClick:a.default.func},u=function(e){function t(){return e.apply(this,arguments)||this}return(0,o.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.label,r=e.onClick;return i.default.createElement("button",{type:"button",className:"close",onClick:r},i.default.createElement("span",{"aria-hidden":"true"},"×"),i.default.createElement("span",{className:"sr-only"},t))},t}(i.default.Component);u.propTypes=l,u.defaultProps={label:"Close"};var _=u;t.default=_,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(26)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"h4"};var p=(0,s.bsClass)("modal-title",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=function(e,t){var r=t.propTypes,n={},a={};return(0,o.default)(e).forEach((function(e){var t=e[0],o=e[1];r[t]?n[t]=o:a[t]=o})),[n,a]};var o=n(r(108));e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=r(18),s=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=(0,a.default)(e,["className"]),n=(0,_.splitBsProps)(r),i=n[0],s=n[1],c=(0,_.getClassSet)(i);return u.default.createElement("span",(0,o.default)({},s,{className:(0,l.default)(t,c)}))},t}(u.default.Component),c=(0,_.bsClass)("input-group-addon",s);t.default=c,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=r(18),s=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=(0,a.default)(e,["className"]),n=(0,_.splitBsProps)(r),i=n[0],s=n[1],c=(0,_.getClassSet)(i);return u.default.createElement("span",(0,o.default)({},s,{className:(0,l.default)(t,c)}))},t}(u.default.Component),c=(0,_.bsClass)("input-group-btn",s);t.default=c,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,o=(n=r(0))&&"object"==typeof n&&"default"in n?n.default:n;function a(e){return a.warnAboutHMRDisabled&&(a.warnAboutHMRDisabled=!0,console.error("React-Hot-Loader: misconfiguration detected, using production version in non-production environment."),console.error("React-Hot-Loader: Hot Module Replacement is not enabled.")),o.Children.only(e.children)}a.warnAboutHMRDisabled=!1;var i=function e(){return e.shouldWrapWithAppContainer?function(e){return function(t){return o.createElement(a,null,o.createElement(e,t))}}:function(e){return e}};i.shouldWrapWithAppContainer=!1;t.AppContainer=a,t.hot=i,t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){},t.cold=function(e){return e},t.configureComponent=function(){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb2J4L2xpYi9tb2J4Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcGVyc2lzdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QvZGlzdC9tb2J4cmVhY3QuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Qb3BvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL3V0aWxzL2Jvb3RzdHJhcFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2Rpc3QvbW9ieHJlYWN0bGl0ZS5lc20uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9SZXF1ZXN0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2luRE9NLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUmFkaW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9TdHlsZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQ2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2dldENvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvaXNXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQ29udHJvbExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlcmlhbGl6ci9saWIvZXMvc2VyaWFsaXpyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL3V0aWxzL2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvb2ZmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9HaXRIdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcGVyc2lzdC9saWIvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLWJhc2U2NC9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L29mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9zY3JvbGxUb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9hZGRFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9pc092ZXJmbG93aW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RvcG9sb2d5RWRpdG9yLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub3BCYXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0ZpbGVBY3Rpb25zLmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmtiZWF1dGlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlsZS1zYXZlci9kaXN0L0ZpbGVTYXZlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29sbGVjdGlvbkxpc3QuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24uanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0dyb3VwTGlzdC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvR3JvdXAuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Byb3BlcnR5TGlzdC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUHJvcGVydHkuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JlcXVpcmVtZW50TGlzdC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmVxdWlyZW1lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rhc2tMaXN0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYXNrLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9NYWluRWRpdG9yLmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9CYWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LWxvYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb2J4LXBlcnNpc3QvbGliL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcGVyc2lzdC9saWIvbWVyZ2UteC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9ieC1wZXJzaXN0L2xpYi9wZXJzaXN0LW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2l0aHViLWFwaS9kaXN0L2NvbXBvbmVudHMvR2lzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1hcGkvZGlzdC9jb21wb25lbnRzL1VzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1hcGkvZGlzdC9jb21wb25lbnRzL0lzc3VlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9TZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1hcGkvZGlzdC9jb21wb25lbnRzL1JhdGVMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2l0aHViLWFwaS9kaXN0L2NvbXBvbmVudHMvUmVwb3NpdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0ZjgvdXRmOC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9Pcmdhbml6YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1hcGkvZGlzdC9jb21wb25lbnRzL1RlYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1hcGkvZGlzdC9jb21wb25lbnRzL01hcmtkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9Qcm9qZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1NhZmVBbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi93ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9hcnJheS9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvT3ZlcmxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL092ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9MZWdhY3lQb3J0YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Qb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2NhbGN1bGF0ZVBvc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9wb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvY2FtZWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaHlwaGVuYXRlU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9nZXRDb21wdXRlZFN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9yZW1vdmVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2lzVHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9zY3JvbGxMZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvUm9vdENsb3NlV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2xGZWVkYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9HbHlwaGljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2xTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvcXVlcnlTZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2xpc3Rlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL01vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9hY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9kZXByZWNhdGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Nb2RhbE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9hZGRDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9tYW5hZ2VBcmlhSGlkZGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvUmVmSG9sZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvYWRkRm9jdXNMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbEJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWxEaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWxGb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWxIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQ2xvc2VCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWxUaXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9zcGxpdENvbXBvbmVudFByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXBBZGRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtbG9hZGVyL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5wcm9kdWN0aW9uLm1pbi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImV4dGVuZFN0YXRpY3MiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fYXNzaWduIiwiYXNzaWduIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJ0aGlzIiwiX192YWx1ZXMiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwiX19yZWFkIiwiZSIsImFyIiwicHVzaCIsImVycm9yIiwiX19zcHJlYWQiLCJjb25jYXQiLCJFTVBUWV9BUlJBWSIsImZyZWV6ZSIsIkVNUFRZX09CSkVDVCIsImdldE5leHRJZCIsImdsb2JhbFN0YXRlIiwibW9ieEd1aWQiLCJmYWlsIiwibWVzc2FnZSIsImludmFyaWFudCIsImNoZWNrIiwiRXJyb3IiLCJvbmNlIiwiZnVuYyIsImludm9rZWQiLCJub29wIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImFkZEhpZGRlblByb3AiLCJwcm9wTmFtZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSIsImNsYXp6IiwieCIsImlzQXJyYXlMaWtlIiwiaXNBcnJheSIsImlzT2JzZXJ2YWJsZUFycmF5IiwiaXNFUzZNYXAiLCJ0aGluZyIsIk1hcCIsImlzRVM2U2V0IiwiU2V0IiwiZ2V0UGxhaW5PYmplY3RLZXlzIiwiZW51bWVyYWJsZXMiLCJhZGQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmb3JFYWNoIiwiayIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZyb20iLCJzdHJpbmdpZnlLZXkiLCJ0b1N0cmluZyIsIlN0cmluZyIsInRvUHJpbWl0aXZlIiwiJG1vYngiLCJBdG9tIiwiaXNQZW5kaW5nVW5vYnNlcnZhdGlvbiIsImlzQmVpbmdPYnNlcnZlZCIsIm9ic2VydmVycyIsImRpZmZWYWx1ZSIsImxhc3RBY2Nlc3NlZEJ5IiwibG93ZXN0T2JzZXJ2ZXJTdGF0ZSIsIklEZXJpdmF0aW9uU3RhdGUiLCJOT1RfVFJBQ0tJTkciLCJvbkJlY29tZU9ic2VydmVkIiwib25CZWNvbWVPYnNlcnZlZExpc3RlbmVycyIsImxpc3RlbmVyIiwib25CZWNvbWVVbm9ic2VydmVkIiwib25CZWNvbWVVbm9ic2VydmVkTGlzdGVuZXJzIiwicmVwb3J0T2JzZXJ2ZWQiLCJyZXBvcnRDaGFuZ2VkIiwic3RhcnRCYXRjaCIsIm9ic2VydmFibGUiLCJTVEFMRSIsImRlcGVuZGVuY2llc1N0YXRlIiwiVVBfVE9fREFURSIsImlzVHJhY2luZyIsIlRyYWNlTW9kZSIsIk5PTkUiLCJsb2dUcmFjZUluZm8iLCJvbkJlY29tZVN0YWxlIiwicHJvcGFnYXRlQ2hhbmdlZCIsImVuZEJhdGNoIiwiaXNBdG9tIiwiY3JlYXRlQXRvbSIsIm9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyIiwib25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciIsImF0b20iLCJjb21wYXJlciIsImlkZW50aXR5IiwiYSIsInN0cnVjdHVyYWwiLCJkZWVwRXF1YWwiLCJkZWZhdWx0IiwiaXMiLCJzaGFsbG93IiwibW9ieERpZFJ1bkxhenlJbml0aWFsaXplcnNTeW1ib2wiLCJtb2J4UGVuZGluZ0RlY29yYXRvcnMiLCJlbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlIiwibm9uRW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSIsImNyZWF0ZVByb3BlcnR5SW5pdGlhbGl6ZXJEZXNjcmlwdG9yIiwicHJvcCIsImNhY2hlIiwiaW5pdGlhbGl6ZUluc3RhbmNlIiwic2V0IiwidGFyZ2V0IiwiZV8xIiwiX2EiLCJkZWNvcmF0b3JzIiwia2V5cyIsImtleXNfMSIsImtleXNfMV8xIiwicHJvcGVydHlDcmVhdG9yIiwiZGVzY3JpcHRvciIsImRlY29yYXRvclRhcmdldCIsImRlY29yYXRvckFyZ3VtZW50cyIsImVfMV8xIiwicmV0dXJuIiwiY3JlYXRlUHJvcERlY29yYXRvciIsInByb3BlcnR5SW5pdGlhbGx5RW51bWVyYWJsZSIsImRlY29yYXRvciIsImFwcGx5SW1tZWRpYXRlbHkiLCJpbmhlcml0ZWREZWNvcmF0b3JzIiwicXVhY2tzTGlrZUFEZWNvcmF0b3IiLCJzbGljZSIsImFyZ3MiLCJkZWVwRW5oYW5jZXIiLCJ2IiwiXyIsImlzT2JzZXJ2YWJsZSIsImFycmF5IiwidW5kZWZpbmVkIiwibWFwIiwicmVmZXJlbmNlRW5oYW5jZXIiLCJuZXdWYWx1ZSIsImNyZWF0ZURlY29yYXRvckZvckVuaGFuY2VyIiwiZW5oYW5jZXIiLCJwcm9wZXJ0eU5hbWUiLCJfZGVjb3JhdG9yVGFyZ2V0IiwiZGVjb3JhdG9yQXJncyIsImluaXRpYWxWYWx1ZSIsImluaXRpYWxpemVyIiwiYXNPYnNlcnZhYmxlT2JqZWN0IiwiYWRkT2JzZXJ2YWJsZVByb3AiLCJyZXMiLCJwcm9jZXNzIiwiZW52IiwiZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zIiwiZGVlcCIsImRlZmF1bHREZWNvcmF0b3IiLCJwcm94eSIsImFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMiLCJkZWVwRGVjb3JhdG9yIiwic2hhbGxvd0RlY29yYXRvciIsImlzT2JzZXJ2YWJsZU9iamVjdCIsImlzT2JzZXJ2YWJsZU1hcCIsImlzT2JzZXJ2YWJsZVNldCIsInJlZkRlY29yYXRvciIsInJlZlN0cnVjdERlY29yYXRvciIsIm9sZFZhbHVlIiwiZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyIsIm9wdGlvbnMiLCJvYnNlcnZhYmxlRmFjdG9yaWVzIiwiYm94IiwiaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IiLCJPYnNlcnZhYmxlVmFsdWUiLCJlcXVhbHMiLCJpbml0aWFsVmFsdWVzIiwiY3JlYXRlT2JzZXJ2YWJsZUFycmF5IiwiT2JzZXJ2YWJsZU1hcCIsIk9ic2VydmFibGVTZXQiLCJwcm9wcyIsImV4dGVuZE9ic2VydmFibGUiLCJnZXREZWZhdWx0RGVjb3JhdG9yRnJvbU9iamVjdE9wdGlvbnMiLCJiYXNlIiwiY3JlYXRlRHluYW1pY09ic2VydmFibGVPYmplY3QiLCJleHRlbmRPYnNlcnZhYmxlT2JqZWN0V2l0aFByb3BlcnRpZXMiLCJyZWYiLCJzdHJ1Y3QiLCJhcmcyIiwiYXJnMyIsIm1ldGhvZE5hbWUiLCJjb21wdXRlZERlY29yYXRvciIsImluc3RhbmNlIiwiYWRkQ29tcHV0ZWRQcm9wIiwiY29udGV4dCIsImNvbXB1dGVkU3RydWN0RGVjb3JhdG9yIiwiY29tcHV0ZWQiLCJhcmcxIiwib3B0cyIsIkNvbXB1dGVkVmFsdWUiLCJDYXVnaHRFeGNlcHRpb24iLCJjYXVzZSIsImlzQ2F1Z2h0RXhjZXB0aW9uIiwic2hvdWxkQ29tcHV0ZSIsImRlcml2YXRpb24iLCJQT1NTSUJMWV9TVEFMRSIsInByZXZBbGxvd1N0YXRlUmVhZHMiLCJhbGxvd1N0YXRlUmVhZHNTdGFydCIsInByZXZVbnRyYWNrZWQiLCJ1bnRyYWNrZWRTdGFydCIsIm9icyIsIm9ic2VydmluZyIsIm9iaiIsImlzQ29tcHV0ZWRWYWx1ZSIsImRpc2FibGVFcnJvckJvdW5kYXJpZXMiLCJ1bnRyYWNrZWRFbmQiLCJhbGxvd1N0YXRlUmVhZHNFbmQiLCJjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMCIsImlzQ29tcHV0aW5nRGVyaXZhdGlvbiIsInRyYWNraW5nRGVyaXZhdGlvbiIsImNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkIiwiaGFzT2JzZXJ2ZXJzIiwic2l6ZSIsImNvbXB1dGF0aW9uRGVwdGgiLCJhbGxvd1N0YXRlQ2hhbmdlcyIsImVuZm9yY2VBY3Rpb25zIiwidHJhY2tEZXJpdmVkRnVuY3Rpb24iLCJmIiwibmV3T2JzZXJ2aW5nIiwidW5ib3VuZERlcHNDb3VudCIsInJ1bklkIiwicmVzdWx0IiwicHJldlRyYWNraW5nIiwicHJldk9ic2VydmluZyIsImxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSIsImkwIiwiZGVwIiwicmVtb3ZlT2JzZXJ2ZXIiLCJhZGRPYnNlcnZlciIsImJpbmREZXBlbmRlbmNpZXMiLCJjbGVhck9ic2VydmluZyIsInVudHJhY2tlZCIsImFjdGlvbiIsInByZXYiLCJhbGxvd1N0YXRlUmVhZHMiLCJjdXJyZW50QWN0aW9uSWQiLCJuZXh0QWN0aW9uSWQiLCJmdW5jdGlvbk5hbWVEZXNjcmlwdG9yIiwiY3JlYXRlQWN0aW9uIiwiYWN0aW9uTmFtZSIsImZuIiwiZXhlY3V0ZUFjdGlvbiIsImlzTW9ieEFjdGlvbiIsInNjb3BlIiwicnVuSW5mbyIsIl9zdGFydEFjdGlvbiIsImVyciIsIl9lbmRBY3Rpb24iLCJzdGFydFRpbWUiLCJwcmV2RGVyaXZhdGlvbiIsInByZXZBbGxvd1N0YXRlQ2hhbmdlcyIsImFsbG93U3RhdGVDaGFuZ2VzU3RhcnQiLCJub3RpZnlTcHkiLCJhY3Rpb25JZCIsInBhcmVudEFjdGlvbklkIiwic3VwcHJlc3NSZWFjdGlvbkVycm9ycyIsImFsbG93U3RhdGVDaGFuZ2VzRW5kIiwiYWxsb3dTdGF0ZUNoYW5nZXNJbnNpZGVDb21wdXRlZCIsIl9zdXBlciIsIl90aGlzIiwiaGFzVW5yZXBvcnRlZENoYW5nZSIsIl9fIiwiY29uc3RydWN0b3IiLCJfX2V4dGVuZHMiLCJkZWhhbmNlVmFsdWUiLCJkZWhhbmNlciIsInByZXBhcmVOZXdWYWx1ZSIsIlVOQ0hBTkdFRCIsInNldE5ld1ZhbHVlIiwiaGFzSW50ZXJjZXB0b3JzIiwiY2hhbmdlIiwiaW50ZXJjZXB0Q2hhbmdlIiwidHlwZSIsImhhc0xpc3RlbmVycyIsIm5vdGlmeUxpc3RlbmVycyIsImludGVyY2VwdCIsImhhbmRsZXIiLCJyZWdpc3RlckludGVyY2VwdG9yIiwib2JzZXJ2ZSIsImZpcmVJbW1lZGlhdGVseSIsInJlZ2lzdGVyTGlzdGVuZXIiLCJ0b0pTT04iLCJ2YWx1ZU9mIiwiaXNPYnNlcnZhYmxlVmFsdWUiLCJfX21hcGlkIiwiaXNDb21wdXRpbmciLCJpc1J1bm5pbmdTZXR0ZXIiLCJzZXR0ZXIiLCJjb21wYXJlU3RydWN0dXJhbCIsInJlcXVpcmVzUmVhY3Rpb24iLCJrZWVwQWxpdmUiLCJwcm9wYWdhdGVNYXliZUNoYW5nZWQiLCJpbkJhdGNoIiwidHJhY2tBbmRDb21wdXRlIiwicHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkIiwid2FybkFib3V0VW50cmFja2VkUmVhZCIsImNvbXB1dGVWYWx1ZSIsInBlZWsiLCJ3YXNTdXNwZW5kZWQiLCJjaGFuZ2VkIiwidHJhY2siLCJzdXNwZW5kIiwiZmlyc3RUaW1lIiwicHJldlZhbHVlIiwiYXV0b3J1biIsInByZXZVIiwicGVyc2lzdGVudEtleXMiLCJNb2JYR2xvYmFscyIsInZlcnNpb24iLCJwZW5kaW5nVW5vYnNlcnZhdGlvbnMiLCJwZW5kaW5nUmVhY3Rpb25zIiwiaXNSdW5uaW5nUmVhY3Rpb25zIiwic3B5TGlzdGVuZXJzIiwiZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzIiwiY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uIiwicmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUiLCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiIsImNvbXB1dGVkQ29uZmlndXJhYmxlIiwibW9ja0dsb2JhbCIsImdldEdsb2JhbCIsIndpbmRvdyIsImdsb2JhbCIsInNlbGYiLCJjYW5NZXJnZUdsb2JhbFN0YXRlIiwiaXNvbGF0ZUNhbGxlZCIsIl9fbW9ieEluc3RhbmNlQ291bnQiLCJfX21vYnhHbG9iYWxzIiwic2V0VGltZW91dCIsImdldEdsb2JhbFN0YXRlIiwicmVzZXRHbG9iYWxTdGF0ZSIsImRlZmF1bHRHbG9iYWxzIiwiaW5kZXhPZiIsIm5vZGUiLCJkZWxldGUiLCJxdWV1ZUZvclVub2JzZXJ2YXRpb24iLCJydW5SZWFjdGlvbnMiLCJsaXN0IiwiY29uc29sZSIsImxvZyIsIkJSRUFLIiwibGluZXMiLCJwcmludERlcFRyZWUiLCJ0cmVlIiwiZGVwdGgiLCJqb2luIiwiZGVwZW5kZW5jaWVzIiwiY2hpbGQiLCJnZXREZXBlbmRlbmN5VHJlZSIsIkZ1bmN0aW9uIiwicmVwbGFjZSIsIlJlYWN0aW9uIiwib25JbnZhbGlkYXRlIiwiZXJyb3JIYW5kbGVyIiwicmVxdWlyZXNPYnNlcnZhYmxlIiwiaXNEaXNwb3NlZCIsIl9pc1NjaGVkdWxlZCIsIl9pc1RyYWNrUGVuZGluZyIsIl9pc1J1bm5pbmciLCJzY2hlZHVsZSIsImlzU2NoZWR1bGVkIiwicnVuUmVhY3Rpb24iLCJyZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb24iLCJ3YXJuIiwiZGlzcG9zZSIsImdldERpc3Bvc2VyIiwidHJhY2UiLCJlbnRlckJyZWFrUG9pbnQiLCJvblJlYWN0aW9uRXJyb3IiLCJpZHgiLCJzcGxpY2UiLCJyZWFjdGlvblNjaGVkdWxlciIsInJ1blJlYWN0aW9uc0hlbHBlciIsImFsbFJlYWN0aW9ucyIsIml0ZXJhdGlvbnMiLCJyZW1haW5pbmdSZWFjdGlvbnMiLCJpc1JlYWN0aW9uIiwic2V0UmVhY3Rpb25TY2hlZHVsZXIiLCJiYXNlU2NoZWR1bGVyIiwic3B5IiwiZG9udFJlYXNzaWduRmllbGRzIiwibmFtZWRBY3Rpb25EZWNvcmF0b3IiLCJpbml0aWFsaXplcl8xIiwiYWN0aW9uRmllbGREZWNvcmF0b3IiLCJhcmc0IiwicnVuSW5BY3Rpb24iLCJpc0FjdGlvbiIsImRlZmluZUJvdW5kQWN0aW9uIiwidmlldyIsInJlYWN0aW9uIiwic2NoZWR1bGVyIiwiZGVsYXkiLCJyZWFjdGlvblJ1bm5lciIsIm9uRXJyb3IiLCJzY2hlZHVsZXJfMSIsImNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zIiwiaXNTY2hlZHVsZWRfMSIsImJvdW5kIiwiYXBwbHlUb0luc3RhbmNlIiwicnVuIiwiZXhwcmVzc2lvbiIsImVmZmVjdCIsImJhc2VGbiIsImVmZmVjdEFjdGlvbiIsInJ1blN5bmMiLCJuZXh0VmFsdWUiLCJpbnRlcmNlcHRIb29rIiwiaG9vayIsImdldEF0b20iLCJjYiIsImxpc3RlbmVyc0tleSIsImhvb2tMaXN0ZW5lcnMiLCJjb25maWd1cmUiLCJpc29sYXRlR2xvYmFsU3RhdGUiLCJlYSIsImRlY29yYXRlIiwiX2xvb3BfMSIsInByb3BlcnR5RGVjb3JhdG9ycyIsIm5ld0Rlc2NyaXB0b3IiLCJyZWR1Y2UiLCJhY2NEZXNjcmlwdG9yIiwicHJvcGVydGllcyIsImVfMiIsIl9iIiwia2V5c18yIiwia2V5c18yXzEiLCJyZXN1bHREZXNjcmlwdG9yIiwiZV8yXzEiLCJub2RlVG9EZXBlbmRlbmN5VHJlZSIsIml0ZW0iLCJnZXRPYnNlcnZlclRyZWUiLCJub2RlVG9PYnNlcnZlclRyZWUiLCJnZXRPYnNlcnZlcnMiLCJnZW5lcmF0b3JJZCIsIkZsb3dDYW5jZWxsYXRpb25FcnJvciIsImlzRmxvd0NhbmNlbGxhdGlvbkVycm9yIiwiZmxvdyIsImdlbmVyYXRvciIsInJlamVjdG9yIiwiY3R4IiwiZ2VuIiwicGVuZGluZ1Byb21pc2UiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzdGVwSWQiLCJvbkZ1bGZpbGxlZCIsInJldCIsIm9uUmVqZWN0ZWQiLCJ0aHJvdyIsInRoZW4iLCJjYW5jZWwiLCJjYW5jZWxQcm9taXNlIiwieWllbGRlZFByb21pc2UiLCJpbnRlcmNlcHRSZWFkcyIsInByb3BPckhhbmRsZXIiLCJnZXRBZG1pbmlzdHJhdGlvbiIsImludGVyY2VwdFByb3BlcnR5IiwiaW50ZXJjZXB0SW50ZXJjZXB0YWJsZSIsIl9pc0NvbXB1dGVkIiwidmFsdWVzIiwiaGFzIiwiaXNDb21wdXRlZCIsImlzQ29tcHV0ZWRQcm9wIiwiX2lzT2JzZXJ2YWJsZSIsImlzT2JzZXJ2YWJsZVByb3AiLCJnZXRLZXlzIiwiaW5kZXgiLCJlbnRyaWVzIiwiYWRtIiwiZXhpc3RpbmdPYnNlcnZhYmxlIiwid3JpdGUiLCJkZWZhdWx0RW5oYW5jZXIiLCJwYXJzZUludCIsInZhbHVlc18xIiwia2V5XzEiLCJyZW1vdmUiLCJwcm9wT3JDYiIsImNiT3JGaXJlIiwib2JzZXJ2ZU9ic2VydmFibGVQcm9wZXJ0eSIsIm9ic2VydmVPYnNlcnZhYmxlIiwiZGVmYXVsdE9wdGlvbnMiLCJkZXRlY3RDeWNsZXMiLCJleHBvcnRNYXBzQXNPYmplY3RzIiwicmVjdXJzZUV2ZXJ5dGhpbmciLCJ0b0pTIiwic291cmNlIiwiX19hbHJlYWR5U2VlbiIsInRvSlNIZWxwZXIiLCJEYXRlIiwicmVzXzEiLCJ0b0FkZCIsInJlc18yIiwicmVzXzMiLCJyZXNfNCIsInJlc181IiwiX2kiLCJwb3AiLCJnZXRBdG9tRnJvbUFyZ3MiLCJMT0ciLCJ0cmFuc2FjdGlvbiIsInRoaXNBcmciLCJ3aGVuIiwicHJlZGljYXRlIiwid2hlblByb21pc2UiLCJfd2hlbiIsInRpbWVvdXRIYW5kbGUiLCJ0aW1lb3V0IiwiZGlzcG9zZXIiLCJjbGVhclRpbWVvdXQiLCJnZXRBZG0iLCJpc1Byb3BlcnR5S2V5IiwidmFsIiwib2JqZWN0UHJveHlUcmFwcyIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsImtleXNBdG9tIiwiUmVmbGVjdCIsInByZXZlbnRFeHRlbnNpb25zIiwiUHJveHkiLCJpbnRlcmNlcHRhYmxlIiwiaW50ZXJjZXB0b3JzIiwibGlzdGVuYWJsZSIsImNoYW5nZUxpc3RlbmVycyIsImxpc3RlbmVycyIsImFycmF5VHJhcHMiLCJnZXRBcnJheUxlbmd0aCIsImFycmF5RXh0ZW5zaW9ucyIsImlzTmFOIiwic2V0QXJyYXlMZW5ndGgiLCJvd25lZCIsIk9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uIiwic3BsaWNlV2l0aEFycmF5IiwibGFzdEtub3duTGVuZ3RoIiwibmV3ViIsIm9sZFYiLCJkZWhhbmNlVmFsdWVzIiwiYWRkZWQiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsInJlbW92ZWRDb3VudCIsIm5ld0xlbmd0aCIsImN1cnJlbnRMZW5ndGgiLCJuZXdJdGVtcyIsInVwZGF0ZUFycmF5TGVuZ3RoIiwib2xkTGVuZ3RoIiwiZGVsdGEiLCJkZWxldGVDb3VudCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJzcGxpY2VJdGVtc0ludG9WYWx1ZXMiLCJub3RpZnlBcnJheVNwbGljZSIsIm5vdGlmeUFycmF5Q2hpbGRVcGRhdGUiLCJub3RpZnkiLCJjbGVhciIsIml0ZW1zIiwic2hpZnQiLCJ1bnNoaWZ0IiwicmV2ZXJzZSIsImNsb25lIiwic29ydCIsImNvbXBhcmVGbiIsImZ1bmNOYW1lIiwiaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiIsIl9hJDEiLCJPYnNlcnZhYmxlTWFwTWFya2VyIiwiaW5pdGlhbERhdGEiLCJfa2V5c0F0b20iLCJfZGF0YSIsIl9oYXNNYXAiLCJtZXJnZSIsIl9oYXMiLCJlbnRyeSIsIm5ld0VudHJ5IiwiaGFzS2V5IiwiX3VwZGF0ZVZhbHVlIiwiX2FkZFZhbHVlIiwiX3VwZGF0ZUhhc01hcEVudHJ5IiwibmV4dEluZGV4IiwibWFrZUl0ZXJhYmxlIiwiY2FsbGJhY2siLCJfYyIsIl9kIiwiX2UiLCJvdGhlciIsIm5ld0tleXMiLCJmaWx0ZXIiLCJ0b1BPSk8iLCJlXzMiLCJlXzNfMSIsIk9ic2VydmFibGVTZXRNYXJrZXIiLCJfYXRvbSIsImNhbGxiYWNrRm4iLCJvYnNlcnZhYmxlVmFsdWVzIiwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uIiwicmVhZCIsInBlbmRpbmdLZXlzIiwiZXhpc3RzIiwib2JzZXJ2YWJsZVByb3BlcnR5Q29uZmlncyIsImdlbmVyYXRlT2JzZXJ2YWJsZVByb3BDb25maWciLCJub3RpZnlQcm9wZXJ0eUFkZGl0aW9uIiwicHJvcGVydHlPd25lciIsImNvbXB1dGVkUHJvcGVydHlDb25maWdzIiwiZ2V0QWRtaW5pc3RyYXRpb25Gb3JDb21wdXRlZFByb3BPd25lciIsImdlbmVyYXRlQ29tcHV0ZWRQcm9wQ29uZmlnIiwib2xkT2JzZXJ2YWJsZSIsImlsbGVnYWxBY2Nlc3MiLCJvd25lciIsImlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uIiwiYW55VGhpbmciLCJnZXREZWJ1Z05hbWUiLCJlcSIsImFTdGFjayIsImJTdGFjayIsImNsYXNzTmFtZSIsInVud3JhcCIsImFyZUFycmF5cyIsImFDdG9yIiwiYkN0b3IiLCJoYXMkMSIsImdldFNlbGYiLCJfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImluamVjdE1vYngiLCJleHRyYXMiLCJtb2J4IiwiTVZhcmlhYmxlIiwicGVyc2lzdCIsIk1Qcm9wZXJ0eSIsIk1SZXF1aXJlbWVudCIsIk1UYXNrUHJvcGVydHkiLCJNVGFzayIsIk1Db2xsZWN0aW9uIiwiTUdyb3VwIiwiTU1haW4iLCJTdG9yZSIsImhhc1ZhcmlhYmxlIiwiaWQiLCJ2YXJpYWJsZXMiLCJzb21lIiwiZWwiLCJoYXNQcm9wZXJ0eSIsImhhc1JlcXVpcmVtZW50IiwicmVxdWlyZW1lbnRzIiwiaGFzVGFzayIsInRhc2tzIiwiaGFzQ29sbGVjdGlvbiIsImNvbGxlY3Rpb25zIiwiaGFzTWFpbkdyb3VwIiwibWFpbiIsImdyb3VwcyIsInRvcG9sb2d5SWQiLCJuZXdWYXJpYWJsZSIsIm5ld1Byb3BlcnR5IiwibmV3UmVxdWlyZW1lbnQiLCJuZXdUYXNrIiwibmV3Q29sbGVjdGlvbiIsIm5ld0dyb3VwIiwicmVtb3ZlZFByb3BlcnR5SWQiLCJ0YXNrIiwicmVtb3ZlZFJlcXVpcmVtZW50SWQiLCJyZXF1aXJlbWVudCIsImNvbGxlY3Rpb24iLCJyZW1vdmVkVGFza0lkIiwiZ3JvdXAiLCJyZW1vdmVkQ29sbGVjdGlvbklkIiwidXBkYXRlZFByb3BlcnR5Iiwib2xkSWQiLCJ1cGRhdGVkUmVxdWlyZW1lbnQiLCJ1cGRhdGVkVGFzayIsImciLCJ1cGRhdGVkQ29sbGVjdGlvbiIsInVwZGF0ZWRHcm91cCIsImh5ZHJhdGUiLCJzdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwianNvbmlmeSIsInN0b3JlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIiLCJfZXh0ZW5kczMiLCJfaW5oZXJpdHNMb29zZTIiLCJfY2xhc3NuYW1lcyIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfZWxlbWVudFR5cGUiLCJfYm9vdHN0cmFwVXRpbHMiLCJfU3R5bGVDb25maWciLCJfU2FmZUFuY2hvciIsInByb3BUeXBlcyIsImFjdGl2ZSIsImJvb2wiLCJkaXNhYmxlZCIsImJsb2NrIiwib25DbGljayIsImNvbXBvbmVudENsYXNzIiwiaHJlZiIsInN0cmluZyIsIm9uZU9mIiwiQnV0dG9uIiwiX1JlYWN0JENvbXBvbmVudCIsIl9wcm90byIsInJlbmRlckFuY2hvciIsImVsZW1lbnRQcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJyZW5kZXJCdXR0b24iLCJfcmVmIiwiQ29tcG9uZW50IiwicmVuZGVyIiwiX2V4dGVuZHMyIiwiX3RoaXMkcHJvcHMiLCJfc3BsaXRCc1Byb3BzIiwic3BsaXRCc1Byb3BzIiwiYnNQcm9wcyIsImNsYXNzZXMiLCJnZXRDbGFzc1NldCIsInByZWZpeCIsImZ1bGxDbGFzc05hbWUiLCJkZWZhdWx0UHJvcHMiLCJfZGVmYXVsdCIsImJzQ2xhc3MiLCJic1NpemVzIiwiU2l6ZSIsIkxBUkdFIiwiU01BTEwiLCJYU01BTEwiLCJic1N0eWxlcyIsIlN0YXRlIiwiU3R5bGUiLCJERUZBVUxUIiwiUFJJTUFSWSIsIkxJTksiLCJfRm9ybUNvbnRyb2xGZWVkYmFjayIsIl9Gb3JtQ29udHJvbFN0YXRpYyIsImlucHV0UmVmIiwiY29udGV4dFR5cGVzIiwiJGJzX2Zvcm1Hcm91cCIsIkZvcm1Db250cm9sIiwiZm9ybUdyb3VwIiwiY29udHJvbElkIiwiX3RoaXMkcHJvcHMkaWQiLCJic1NpemUiLCJTSVpFX01BUCIsIkZlZWRiYWNrIiwiU3RhdGljIiwiX0lucHV0R3JvdXBBZGRvbiIsIl9JbnB1dEdyb3VwQnV0dG9uIiwiSW5wdXRHcm91cCIsIkFkZG9uIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZDIiLCJfZXZlbnRzIiwiX293bmVyRG9jdW1lbnQiLCJfaW5ET00iLCJfc2Nyb2xsYmFyU2l6ZSIsIl9yZWFjdERvbSIsIl9Nb2RhbCIsIl9pc092ZXJmbG93aW5nIiwiX0ZhZGUiLCJfTW9kYWxCb2R5IiwiX01vZGFsRGlhbG9nIiwiX01vZGFsRm9vdGVyIiwiX01vZGFsSGVhZGVyIiwiX01vZGFsVGl0bGUiLCJfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiX3NwbGl0Q29tcG9uZW50UHJvcHMyIiwiYmFja2Ryb3AiLCJiYWNrZHJvcENsYXNzTmFtZSIsImtleWJvYXJkIiwiYW5pbWF0aW9uIiwiZGlhbG9nQ29tcG9uZW50Q2xhc3MiLCJhdXRvRm9jdXMiLCJlbmZvcmNlRm9jdXMiLCJyZXN0b3JlRm9jdXMiLCJzaG93Iiwib25IaWRlIiwib25FbnRlciIsIm9uRW50ZXJpbmciLCJvbkVudGVyZWQiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsImNvbnRhaW5lciIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGJzX21vZGFsIiwic2hhcGUiLCJEaWFsb2dUcmFuc2l0aW9uIiwiTW9kYWwiLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwiQmFja2Ryb3BUcmFuc2l0aW9uIiwiQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiIsImhhbmRsZURpYWxvZ0JhY2tkcm9wTW91c2VEb3duIiwiX3dhaXRpbmdGb3JNb3VzZVVwIiwiaGFuZGxlTW91c2VVcCIsImV2IiwiZGlhbG9nTm9kZSIsIl9tb2RhbCIsImdldERpYWxvZ0VsZW1lbnQiLCJfaWdub3JlQmFja2Ryb3BDbGljayIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRXhpdGVkIiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGFuZGxlRGlhbG9nQ2xpY2siLCJzZXRNb2RhbFJlZiIsInN0YXRlIiwic3R5bGUiLCJnZXRDaGlsZENvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImN1cnJlbnRUYXJnZXQiLCJvbiIsInVwZGF0ZVN0eWxlIiwib2ZmIiwiZGlhbG9nSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiZG9jdW1lbnQiLCJib2R5SXNPdmVyZmxvd2luZyIsImZpbmRET01Ob2RlIiwiYm9keSIsIm1vZGFsSXNPdmVyZmxvd2luZyIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsInNldFN0YXRlIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0xlZnQiLCJEaWFsb2ciLCJjaGlsZHJlbiIsIl9zcGxpdENvbXBvbmVudFByb3BzIiwiYmFzZU1vZGFsUHJvcHMiLCJkaWFsb2dQcm9wcyIsImluQ2xhc3NOYW1lIiwiY29udGFpbmVyQ2xhc3NOYW1lIiwidHJhbnNpdGlvbiIsImJhY2tkcm9wVHJhbnNpdGlvbiIsIm9uTW91c2VVcCIsIm9uTW91c2VEb3duRGlhbG9nIiwiQm9keSIsIkhlYWRlciIsIlRpdGxlIiwiRm9vdGVyIiwibW9ieF8xIiwic2VyaWFsaXpyXzEiLCJTdG9yYWdlIiwibWVyZ2VfeF8xIiwidHlwZXNfMSIsInBlcnNpc3Rfb2JqZWN0XzEiLCJ0eXBlcyIsInNlcmlhbGl6YWJsZSIsInBlcnNpc3RPYmplY3QiLCJkZWJvdW5jZSIsImluaXRpYWxTdGF0ZSIsInNjaGVtYSIsImdldERlZmF1bHRNb2RlbFNjaGVtYSIsImh5ZHJhdGlvbiIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJwZXJzaXN0ZWQiLCJ1cGRhdGUiLCJtZXJnZU9ic2VydmFibGVzIiwicmVoeWRyYXRlIiwic2VyaWFsaXplIiwiZGF0YSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJzeW1ib2xJZCIsImNyZWF0ZWRTeW1ib2xzIiwibmV3U3ltYm9sIiwic3ltYm9sIiwiY3JlYXRlU3ltYm9sIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwieSIsInNldEhpZGRlblByb3AiLCJtb2J4TWl4aW5zIiwibW9ieFBhdGNoZWREZWZpbml0aW9uIiwid3JhcHBlciIsInJlYWxNZXRob2QiLCJtaXhpbnMiLCJfbGVuIiwiX2tleSIsImxvY2tzIiwicmV0VmFsIiwibWV0aG9kcyIsIm14Iiwid3JhcEZ1bmN0aW9uIiwiX2xlbjIiLCJfa2V5MiIsInBhdGNoIiwibWl4aW5NZXRob2QiLCJtZXRob2RNaXhpbnMiLCJnZXRNaXhpbnMiLCJvbGREZWZpbml0aW9uIiwib3JpZ2luYWxNZXRob2QiLCJuZXdEZWZpbml0aW9uIiwiY3JlYXRlRGVmaW5pdGlvbiIsIndyYXBwZWRGdW5jIiwibW9ieEFkbWluUHJvcGVydHkiLCJtb2J4T2JzZXJ2ZXJQcm9wZXJ0eSIsIm1vYnhJc1VubW91bnRlZCIsInNraXBSZW5kZXJLZXkiLCJpc0ZvcmNpbmdVcGRhdGVLZXkiLCJtYWtlQ2xhc3NDb21wb25lbnRPYnNlcnZlciIsImRpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJjb21wb25lbnRXaWxsUmVhY3QiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJvYnNlcnZlclNDVSIsIm1ha2VPYnNlcnZhYmxlUHJvcCIsImJhc2VSZW5kZXIiLCJtYWtlQ29tcG9uZW50UmVhY3RpdmUiLCJfdGhpcyRyZW5kZXIkbW9ieEFkbWkiLCJfZGlzcGxheU5hbWUiLCJjb21wIiwiaW5pdGlhbE5hbWUiLCJpc1JlbmRlcmluZ1BlbmRpbmciLCJoYXNFcnJvciIsImZvcmNlVXBkYXRlIiwicmVhY3RpdmVSZW5kZXIiLCJleGNlcHRpb24iLCJyZW5kZXJpbmciLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJ2YWx1ZUhvbGRlcktleSIsImF0b21Ib2xkZXJLZXkiLCJwcmV2UmVhZFN0YXRlIiwiaGFzU3ltYm9sIiwiZm9yIiwiUmVhY3RGb3J3YXJkUmVmU3ltYm9sIiwiUmVhY3RNZW1vU3ltYm9sIiwib2JzZXJ2ZXIiLCJjb21wb25lbnQiLCJpc1Byb3RvdHlwZU9mIiwiX09iamVjdCRhc3NpZ24iLCJfZXh0ZW5kcyIsIl9PYmplY3QkY3JlYXRlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX09iamVjdCRrZXlzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4iLCJ2YWxpZGF0aW9uU3RhdGUiLCJpc1JlcXVpcmVkIiwiRm9ybUdyb3VwIiwiaGFzRmVlZGJhY2siLCJic1JvbGUiLCJfdGhpcyRwcm9wczIiLCJfc3BsaXRCc1Byb3BzQW5kT21pdCIsInNwbGl0QnNQcm9wc0FuZE9taXQiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiYXJnIiwiYXJnVHlwZSIsImlubmVyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfaXNBcnJheSIsIl9jb250YWlucyIsIl9PdmVybGF5IiwiaXNPbmVPZiIsIm9uZSIsIm9mIiwidHJpZ2dlclR5cGUiLCJ0cmlnZ2VyIiwib25lT2ZUeXBlIiwiYXJyYXlPZiIsIm51bWJlciIsImRlbGF5U2hvdyIsImRlbGF5SGlkZSIsImRlZmF1bHRPdmVybGF5U2hvd24iLCJvdmVybGF5Iiwib25CbHVyIiwib25Gb2N1cyIsIm9uTW91c2VPdXQiLCJvbk1vdXNlT3ZlciIsIk92ZXJsYXlUcmlnZ2VyIiwiaGFuZGxlVG9nZ2xlIiwiaGFuZGxlRGVsYXllZFNob3ciLCJoYW5kbGVEZWxheWVkSGlkZSIsImhhbmRsZUhpZGUiLCJoYW5kbGVNb3VzZU92ZXIiLCJoYW5kbGVNb3VzZU92ZXJPdXQiLCJoYW5kbGVNb3VzZU91dCIsIl9tb3VudE5vZGUiLCJjb21wb25lbnREaWRNb3VudCIsInJlbmRlck92ZXJsYXkiLCJjb21wb25lbnREaWRVcGRhdGUiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiX2hvdmVyU2hvd0RlbGF5IiwiX2hvdmVySGlkZURlbGF5IiwiX3RoaXMyIiwiaGlkZSIsIl90aGlzMyIsInJlbGF0ZWROYXRpdmUiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsIm5hdGl2ZUV2ZW50IiwibWFrZU92ZXJsYXkiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIl9vdmVybGF5IiwiQ2hpbGRyZW4iLCJvbmx5IiwiY2hpbGRQcm9wcyIsInRyaWdnZXJQcm9wcyIsImNsb25lRWxlbWVudCIsIl9pc1JlcXVpcmVkRm9yQTExeSIsInBsYWNlbWVudCIsInBvc2l0aW9uVG9wIiwicG9zaXRpb25MZWZ0IiwiYXJyb3dPZmZzZXRUb3AiLCJhcnJvd09mZnNldExlZnQiLCJ0aXRsZSIsIlBvcG92ZXIiLCJvdXRlclN0eWxlIiwiZGlzcGxheSIsInRvcCIsImxlZnQiLCJhcnJvd1N0eWxlIiwicm9sZSIsIl9jbGFzc2VzIiwiYnNTdHlsZSIsIl9lbnRyaWVzIiwicHJvcFZhbHVlIiwiaXNCc1Byb3AiLCJnZXRCc1Byb3BzIiwib21pdHRlZFByb3BOYW1lcyIsImlzT21pdHRlZFByb3AiLCJfcmVmMiIsImFkZFN0eWxlIiwic3R5bGVWYXJpYW50IiwiX2N1cnJ5IiwiY3VycnkiLCJsYXN0IiwidmFyaWFudCIsInRyaW0iLCJkZWZhdWx0Q2xhc3MiLCJzdHlsZXMiLCJkZWZhdWx0U3R5bGUiLCJleGlzdGluZyIsIlNUWUxFUyIsInByb3BUeXBlIiwic2l6ZXMiLCJkZWZhdWx0U2l6ZSIsIlNJWkVTIiwibWFwcGVkU2l6ZSIsImdsb2JhbElzVXNpbmdTdGF0aWNSZW5kZXJpbmciLCJpc1VzaW5nU3RhdGljUmVuZGVyaW5nIiwidXNlRm9yY2VVcGRhdGUiLCJzZXRUaWNrIiwidGljayIsInByaW50RGVidWdWYWx1ZSIsInJlYWN0aW9uQ2xlYW51cEhhbmRsZSIsIkNMRUFOVVBfTEVBS0VEX1JFQUNUSU9OU19BRlRFUl9NSUxMSVMiLCJ1bmNvbW1pdHRlZFJlYWN0aW9uUmVmcyIsImVuc3VyZUNsZWFudXBUaW1lclJ1bm5pbmciLCJjbGVhblVuY29tbWl0dGVkUmVhY3Rpb25zIiwibm93IiwidHJhY2tpbmciLCJjdXJyZW50IiwiY2xlYW5BdCIsIm9ic2VydmVyQ29tcG9uZW50TmFtZUZvciIsImJhc2VDb21wb25lbnROYW1lIiwidXNlT2JzZXJ2ZXIiLCJyZWFjdGlvblRyYWNraW5nUmVmIiwidXNlUmVmIiwibmV3UmVhY3Rpb24iLCJ0cmFja2luZ0RhdGEiLCJtb3VudGVkIiwiY3JlYXRlVHJhY2tpbmdEYXRhIiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInJlYWN0aW9uUmVmIiwiSW5maW5pdHkiLCJiYXNlQ29tcG9uZW50IiwibWVtb0NvbXBvbmVudCIsInJlYWxPcHRpb25zIiwiZm9yd2FyZFJlZiIsIndyYXBwZWRDb21wb25lbnQiLCJob2lzdEJsYWNrTGlzdCIsIiQkdHlwZW9mIiwiY29tcGFyZSIsIk9ic2VydmVyQ29tcG9uZW50IiwiT2JzZXJ2ZXJQcm9wc0NoZWNrIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwiZXh0cmFLZXkiLCJoYXNQcm9wIiwiaGFzRXh0cmFQcm9wIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJjb3JlIiwiX19lIiwiaXNVbmRlZmluZWQiLCJpc0Z1bmN0aW9uIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwic3RyIiwiJGV4cG9ydCIsIm93biIsIm91dCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsIkMiLCJ2aXJ0dWFsIiwiUiIsIlUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIl9yZWFjdDIiLCJfcmVhY3RJcyIsIl9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIiLCJpc1ZhbGlkRWxlbWVudCIsImlzVmFsaWRFbGVtZW50VHlwZSIsIl90eXBlb2YiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfYXhpb3MyIiwiX2RlYnVnMiIsIl9qc0Jhc2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJUeXBlRXJyb3IiLCJSZXNwb25zZUVycm9yIiwiX0Vycm9yIiwicGF0aCIsInJlc3BvbnNlIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInJlcXVlc3QiLCJjb25maWciLCJzdGF0dXMiLCJfaW5oZXJpdHMiLCJSZXF1ZXN0YWJsZSIsImF1dGgiLCJhcGlCYXNlIiwiQWNjZXB0SGVhZGVyIiwiX19hcGlCYXNlIiwiX19hdXRoIiwidG9rZW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiX19BY2NlcHRIZWFkZXIiLCJfX2F1dGhvcml6YXRpb25IZWFkZXIiLCJCYXNlNjQiLCJlbmNvZGUiLCJ1cmwiLCJuZXdDYWNoZUJ1c3RlciIsImdldFRpbWUiLCJyYXciLCJoZWFkZXJzIiwiQWNjZXB0IiwiQXV0aG9yaXphdGlvbiIsInJlcXVlc3RPcHRpb25zIiwidmlzaWJpbGl0eSIsImFmZmlsaWF0aW9uIiwicGVyX3BhZ2UiLCJkYXRlIiwidG9JU09TdHJpbmciLCJtZXRob2QiLCJfX2dldFVSTCIsIl9fZ2V0UmVxdWVzdEhlYWRlcnMiLCJxdWVyeVBhcmFtcyIsIk1FVEhPRFNfV0lUSF9OT19CT0RZIiwibWV0aG9kSGFzTm9Cb2R5IiwicGFyYW1zIiwicmVzcG9uc2VUeXBlIiwicmVxdWVzdFByb21pc2UiLCJjYXRjaCIsImNhbGxiYWNrRXJyb3JPclRocm93IiwiX3JlcXVlc3QiLCJyZXN1bHRzIiwiX3Jlc3VsdHMiLCJ0aGlzR3JvdXAiLCJhcnIiLCJhcnIyIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwibmV4dFVybCIsImxpbmtzSGVhZGVyIiwibGlua3MiLCJzcGxpdCIsImxpbmsiLCJzZWFyY2giLCJtYXRjaCIsImdldE5leHRQYWdlIiwicGFnZSIsIl9yZXF1ZXN0QWxsUGFnZXMiLCJfb2JqZWN0JHJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIl9vYmplY3QkY29uZmlnIiwiX19nIiwiaXQiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiZFAiLCJjcmVhdGVEZXNjIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsIk8iLCJBdHRyaWJ1dGVzIiwiSU9iamVjdCIsImRlZmluZWQiLCJpbmxpbmUiLCJSYWRpbyIsImlucHV0IiwiX2NsYXNzZXMyIiwiZXhlYyIsIkRFVklDRV9TSVpFUyIsImxhcmdlIiwibWVkaXVtIiwic21hbGwiLCJ4c21hbGwiLCJsZyIsIm1kIiwic20iLCJ4cyIsIlNVQ0NFU1MiLCJXQVJOSU5HIiwiREFOR0VSIiwiSU5GTyIsIklOVkVSU0UiLCIka2V5cyIsImVudW1CdWdLZXlzIiwiY29tcG9uZW50T3JFbGVtZW50IiwiX293bmVyRG9jdW1lbnQyIiwiX3JlYWN0RG9tMiIsIm93bmVyRG9jdW1lbnQiLCJDaGVja2JveCIsImxvYWQiLCJkZWJ1ZyIsIkRFQlVHIiwiZm9ybWF0QXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImNvbG9yIiwibGFzdEMiLCJzYXZlIiwibmFtZXNwYWNlcyIsInJlbW92ZUl0ZW0iLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsInRhYmxlIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJSZWdFeHAiLCIkMSIsImNocm9tZSIsImxvY2FsIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsImoiLCJlbmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJmYWxsYmFjayIsInBhcmVudE5vZGUiLCJhRnVuY3Rpb24iLCJ0aGF0IiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCJmdW5jcyIsImFjYyIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJNRVRBIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInNldE1ldGEiLCJ3IiwibWV0YSIsIktFWSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwibm9kZVR5cGUiLCJkZWZhdWx0Q29udGFpbmVyIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJodG1sRm9yIiwic3JPbmx5IiwiQ29udHJvbExhYmVsIiwiX3RoaXMkcHJvcHMkaHRtbEZvciIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJsZW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibmV4dFRpY2siLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJjcmVhdGVTaW1wbGVTY2hlbWEiLCJmYWN0b3J5IiwiY29uZGl0aW9uIiwidmFyaWFibGVzVG9Mb2ciLCJmb3JtYXR0ZWRNZXNzYWdlIiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwidmFyaWFibGUiLCJHVUFSREVEX05PT1AiLCJwYXJhbGxlbCIsInByb2Nlc3NvciIsInJlc3VsdEFycmF5IiwiZmFpbGVkIiwicHJvY2Vzc29yQ2IiLCJpc1ByaW1pdGl2ZSIsImlzTW9kZWxTY2hlbWEiLCJpc1Byb3BTY2hlbWEiLCJzZXJpYWxpemVyIiwiZGVzZXJpYWxpemVyIiwiaXNBbGlhc2VkUHJvcFNjaGVtYSIsInByb3BTY2hlbWEiLCJqc29ubmFtZSIsImlzSWRlbnRpZmllclByb3BTY2hlbWEiLCJpZGVudGlmaWVyIiwiaXNBc3NpZ25hYmxlVG8iLCJhY3R1YWxUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZXh0ZW5kcyIsImlzTWFwTGlrZSIsInByb2Nlc3NBZGRpdGlvbmFsUHJvcEFyZ3MiLCJhZGRpdGlvbmFsQXJncyIsImFyZ05hbWUiLCJzZXJpYWxpemVJbmZvIiwic2V0RGVmYXVsdE1vZGVsU2NoZW1hIiwibW9kZWxTY2hlbWEiLCJjcmVhdGVNb2RlbFNjaGVtYSIsIm1vZGVsIiwidGFyZ2V0Q2xhc3MiLCJwcmltaXRpdmUiLCJqc29uVmFsdWUiLCJTS0lQIiwiX2RlZmF1bHRQcmltaXRpdmVQcm9wIiwiU1RSSVBfQ09NTUVOVFMiLCJBUkdVTUVOVF9OQU1FUyIsImdldFBhcmFtTmFtZXMiLCJmblN0ciIsInNlcmlhbGl6YWJsZURlY29yYXRvciIsInBhcmFtTmFtZXMiLCJwYXJhbU51bWJlciIsImpzb24iLCJpbmZvIiwic2VyaWFsaXplV2l0aFNjaGVtYSIsImNoZWNrU3RhclNjaGVtYUludmFyaWFudCIsInByb3BEZWYiLCJwYXR0ZXJuIiwidGVzdCIsInNlcmlhbGl6ZVN0YXJQcm9wcyIsInJvb3RDb250ZXh0Q2FjaGUiLCJXZWFrTWFwIiwiQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJvblJlYWR5Q2IiLCJjdXN0b21BcmdzIiwiaXNSb290IiwicGVuZGluZ0NhbGxiYWNrcyIsInBlbmRpbmdSZWZzQ291bnQiLCJyb290Q29udGV4dCIsInBlbmRpbmdSZWZzIiwicmVzb2x2ZWRSZWZzIiwic2NoZW1hSGFzQWxpYXMiLCJkZXNlcmlhbGl6ZSIsImNoaWxkSnNvbiIsIml0ZW1Eb25lIiwiZGVzZXJpYWxpemVPYmplY3RXaXRoU2NoZW1hIiwic2V0VGFyZ2V0IiwibG9jayIsImNyZWF0ZUNhbGxiYWNrIiwiZGVzZXJpYWxpemVQcm9wc1dpdGhTY2hlbWEiLCJqc29uQXR0ciIsIm9uQmVmb3JlRGVzZXJpYWxpemUiLCJwcmVQcm9jZXNzIiwicmVzdWx0Q2FsbGJhY2siLCJvbkFmdGVyRGVzZXJpYWxpemUiLCJlcnJQcmVsaW1pbmFyeSIsImZpbmFsT3JSZXRyeVZhbHVlIiwiYWZ0ZXJEZXNlcmlhbGl6ZSIsImRlc2VyaWFsaXplUHJvcCIsInJlc3VsdFZhbHVlIiwic2V0VmFsdWUiLCJkZXNlcmlhbGl6ZVN0YXJQcm9wcyIsImpzb25QYXJlbnRWYWx1ZSIsInByb3BOYW1lT3JJbmRleCIsImJlZm9yZURlc2VyaWFsaXplIiwic2VyaWFsaXplQWxsIiwidGFyZ2V0T3JQYXR0ZXJuIiwiY2xhenpPclNjaGVtYSIsImludm9rZUltbWVkaWF0ZWx5IiwiY2FuY2VsRGVzZXJpYWxpemUiLCJjYW5jZWxBd2FpdHMiLCJpbmZlck1vZGVsU2NoZW1hIiwicmVnaXN0ZXJGbiIsImRlZmF1bHRSZWdpc3RlckZ1bmN0aW9uIiwiYWxpYXMiLCJjdXN0b20iLCJvcHRpb25hbCIsInByb3BTZXJpYWxpemVyIiwicmVmZXJlbmNlIiwibG9va3VwRm4iLCJjaGlsZElkZW50aWZpZXJBdHRyaWJ1dGUiLCJpbml0aWFsaXplZCIsImluaXRpYWxpemUiLCJ1dWlkIiwiYXdhaXQiLCJjcmVhdGVEZWZhdWx0UmVmTG9va3VwIiwiZ2V0SWRlbnRpZmllclByb3AiLCJpZGVudGlmaWVyVmFsdWUiLCJqc29uQXJyYXkiLCJvbkl0ZW1Eb25lIiwiaXRlbUluZGV4IiwiZGVzZXJpYWxpemVEb25lIiwiY2FsbGJhY2tBZnRlciIsImlzTWFwIiwianNvbk9iamVjdCIsIm1hcEFzQXJyYXkiLCJrZXlQcm9wZXJ0eU5hbWUiLCJmaXJlZCIsInJlc29sdmVkIiwicmVmT3B0cyIsImNvZiIsInRvSW50ZWdlciIsImNlaWwiLCJmbG9vciIsInNoYXJlZCIsImNvcHlyaWdodCIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJ2YWxpZGF0ZSIsImNoZWNrVHlwZSIsImNvbXBvbmVudE5hbWVTYWZlIiwicHJvcEZ1bGxOYW1lU2FmZSIsImNoYWluZWRDaGVja1R5cGUiLCJfT2JqZWN0JGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9PYmplY3QkZGVmaW5lUHJvcGVydHkiLCJfV2Vha01hcCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImRlc2MiLCJMSUJSQVJZIiwid2tzRXh0IiwiJFN5bWJvbCIsImNoYXJBdCIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsImlzQXJyYXlJdGVyIiwiZ2V0SXRlckZuIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJJVEVSQVRPUiIsInN0ZXAiLCJpdGVyRm4iLCJfdCIsImNzcyIsInRyYW5zZm9ybXMiLCJfY2FtZWxpemVTdHlsZSIsIl9nZXRDb21wdXRlZFN0eWxlMiIsImdldFByb3BlcnR5VmFsdWUiLCJfaHlwaGVuYXRlU3R5bGUiLCJfaXNUcmFuc2Zvcm0iLCJfcmVtb3ZlU3R5bGUiLCJfcHJvcGVydGllcyIsInRyYW5zZm9ybSIsImNzc1RleHQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnROYW1lIiwiY2FwdHVyZSIsImF0dGFjaEV2ZW50IiwiZXZlbnQiLCJzcmNFbGVtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiX0dpc3QyIiwiX1VzZXIyIiwiX0lzc3VlMiIsIl9TZWFyY2gyIiwiX1JhdGVMaW1pdDIiLCJfUmVwb3NpdG9yeTIiLCJfT3JnYW5pemF0aW9uMiIsIl9UZWFtMiIsIl9NYXJrZG93bjIiLCJfUHJvamVjdDIiLCJHaXRIdWIiLCJ1c2VyIiwib3JnYW5pemF0aW9uIiwidGVhbUlkIiwicmVwbyIsIl9nZXRGdWxsTmFtZSIsInF1ZXJ5IiwiZnVsbG5hbWUiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJ0byIsIl93YWxrIiwidXRpbHMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJzZXR0bGUiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwidG9VcHBlckNhc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsImZyb21VaW50OEFycmF5IiwiX0Jhc2U2NCIsImI2NGNoYXJzIiwiYjY0dGFiIiwiYmluIiwiY2JfdXRvYiIsImNjIiwiY2hhckNvZGVBdCIsInJlX3V0b2IiLCJ1dG9iIiwidSIsImNiX2VuY29kZSIsImNjYyIsInBhZGxlbiIsIm9yZCIsIlJhbmdlRXJyb3IiLCJfZW5jb2RlIiwibWtVcmlTYWZlIiwiYjY0IiwibTAiLCJ1cmlzYWZlIiwiVWludDhBcnJheSIsImEwIiwiYTEiLCJhMiIsInRvVWludDhBcnJheSIsInJlX2J0b3UiLCJjYl9idG91IiwiY2NjYyIsIm9mZnNldCIsImJ0b3UiLCJjYl9kZWNvZGUiLCJjaGFycyIsIl9hdG9iIiwiYXRvYiIsIl9mcm9tVVJJIiwiZGVjb2RlIiwiX2RlY29kZSIsIm5vQ29uZmxpY3QiLCJWRVJTSU9OIiwiZnJvbUJhc2U2NCIsInRvQmFzZTY0IiwiZW5jb2RlVVJJIiwibm9FbnVtIiwiZXh0ZW5kU3RyaW5nIiwiREVTQ1JJUFRPUlMiLCJnT1BTIiwicElFIiwiJGFzc2lnbiIsIkEiLCJLIiwiVCIsImFMZW4iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwidG9JT2JqZWN0IiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJmYWlscyIsImV4cCIsImlzRW50cmllcyIsImdPUEQiLCJyZWRlZmluZSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiTkFNRSIsIklTX1NFVCIsIkZPUkNFRCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiVE9fU1RSSU5HX1RBRyIsIkRPTUl0ZXJhYmxlcyIsIkNvbGxlY3Rpb24iLCJoaWRkZW5LZXlzIiwic2FmZSIsImZvcmJpZGRlbkZpZWxkIiwiX2luRE9NMiIsIl9wcm9wVHlwZXMyIiwiX2NvbXBvbmVudE9yRWxlbWVudDIiLCJfZ2V0Q29udGFpbmVyMiIsIl9MZWdhY3lQb3J0YWwyIiwiUG9ydGFsIiwiX3RlbXAiLCJnZXRNb3VudE5vZGUiLCJfcG9ydGFsQ29udGFpbmVyTm9kZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJzZXRDb250YWluZXIiLCJvblJlbmRlcmVkIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjcmVhdGVQb3J0YWwiLCJkb2MiLCJ3aW4iLCJfaXNXaW5kb3ciLCJkb2NFbGVtIiwiaGVpZ2h0Iiwid2lkdGgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIl9jYW1lbGl6ZSIsIm1zUGF0dGVybiIsInNjcm9sbFRvIiwiX29uMiIsIl9vZmYyIiwiX2ZhZGVTdHlsZXMiLCJfVHJhbnNpdGlvbiIsImluIiwibW91bnRPbkVudGVyIiwidW5tb3VudE9uRXhpdCIsImFwcGVhciIsImZhZGVTdHlsZXMiLCJFTlRFUklORyIsIkVOVEVSRUQiLCJGYWRlIiwiaW5uZXJQcm9wcyIsInJlY2FsYyIsInNjcm9sbERpdiIsInBvc2l0aW9uIiwib3ZlcmZsb3ciLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiZWxlbWVudCIsImNsYXNzTGlzdCIsImJhc2VWYWwiLCJfaXNXaW5kb3cyIiwidGFnTmFtZSIsImZ1bGxXaWR0aCIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnRSZWN0IiwicmlnaHQiLCJhYnMiLCJUb3BvbG9neUVkaXRvciIsInByb3BlcnR5Q2hlY2tib3hlcyIsInRhc2tDaGVja2JveGVzIiwiY29sbGVjdGlvbkNoZWNrYm94ZXMiLCJyZXF1aXJlbWVudE9wdGlvbnMiLCJwbGFjZWhvbGRlciIsImRlZmF1bHRWYWx1ZSIsIm9wZW5SZXNldE1vZGFsIiwic2hvd1Jlc2V0TW9kYWwiLCJjbG9zZVJlc2V0TW9kYWwiLCJjbG9zZUJ1dHRvbiIsInJlc2V0IiwiaG90IiwiVG9wQmFyIiwiaGFuZGxlVG9wb2xvZ3lJZENoYW5nZSIsInByZXZlbnREZWZhdWx0Iiwic2V0VG9wb2xvZ3lJZCIsImZvcm0iLCJ0b2dnbGVFZGl0aW5nIiwiZGF0YS10b2dnbGUiLCJkYXRhLXRhcmdldCIsImVkaXRpbmciLCJvblN1Ym1pdCIsIkZpbGVBY3Rpb25zIiwicmVtb3RlVXNlciIsInJlbW90ZVJlcG8iLCJyZW1vdGVQYXRoIiwiZmV0Y2hCdG4iLCJjYW5jZWxGZXRjaCIsInVwZGF0ZVJlbW90ZUZpbGVzIiwic2V0RXJyb3IiLCJoYW5kbGVGZXRjaCIsImZpbGVTZWxlY3Rpb25zIiwiY2hlY2tlZCIsImdldFJlcG8iLCJnZXRDb250ZW50cyIsInJlbW90ZUZpbGVzIiwiY29udGVudHMiLCJwcm9jZXNzWE1MIiwiZmV0Y2hUb3BvbG9naWVzIiwiZ2l0aHViIiwic3Vic3RyIiwiZmlsZSIsImRvd25sb2FkX3VybCIsImFkZFJlbW90ZUZpbGUiLCJ4bWxTdHJpbmciLCJwYXJzZXIiLCJET01QYXJzZXIiLCJ4bWwiLCJwYXJzZUZyb21TdHJpbmciLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicXVlcnlTZWxlY3RvckFsbCIsInNldFZhcmlhYmxlcyIsInNldFByb3BlcnRpZXMiLCJocCIsInNldFJlcXVpcmVtZW50cyIsInRleHRDb250ZW50IiwiaGFzQXR0cmlidXRlIiwiZXhlUmVhY2hhYmxlIiwiZXhlVmFsdWUiLCJlbnZSZWFjaGFibGUiLCJlbnZWYWx1ZSIsImFjY2VzcyIsInNldFRhc2tzIiwic2V0Q29sbGVjdGlvbnMiLCJzZXRNYWluIiwiaGFuZGxlRmlsZUxvYWQiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzVGV4dCIsImZpbGVzIiwiaGFuZGxlRmlsZVNhdmUiLCJ4bWxEb2MiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZURvY3VtZW50Iiwicm9vdCIsInNldEF0dHJpYnV0ZSIsInRhc2tFeGUiLCJ0YXNrUmVxdWlyZW1lbnRzIiwidGFza1JlcXVpcmVtZW50IiwidGFza0VudiIsInByb3BlcnRpZXNDb250YWluZXIiLCJjb2xsZWN0aW9uUmVxdWlyZW1lbnRzIiwiY29sbGVjdGlvblJlcXVpcmVtZW50IiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwidmtiZWF1dGlmeSIsImJsb2IiLCJCbG9iIiwic2F2ZUFzIiwib25DaGFuZ2UiLCJjcmVhdGVTaGlmdEFyciIsInNwYWNlIiwiaXgiLCJpc1N1YnF1ZXJ5IiwicGFyZW50aGVzaXNMZXZlbCIsInNwbGl0X3NxbCIsInRhYiIsInRleHQiLCJpbkNvbW1lbnQiLCJzcWwiLCJhcl9ieV9xdW90ZSIsInhtbG1pbiIsInByZXNlcnZlQ29tbWVudHMiLCJqc29ubWluIiwiY3NzbWluIiwic3FsbWluIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50IiwiSFRNTEFuY2hvckVsZW1lbnQiLCJoIiwiVVJMIiwid2Via2l0VVJMIiwiZG93bmxvYWQiLCJyZWwiLCJvcmlnaW4iLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJtc1NhdmVPck9wZW5CbG9iIiwiYXV0b0JvbSIsImlubmVyVGV4dCIsIkhUTUxFbGVtZW50Iiwic2FmYXJpIiwib25sb2FkZW5kIiwicmVhZEFzRGF0YVVSTCIsIl9hbGwiLCJfQnV0dG9uIiwidmVydGljYWwiLCJqdXN0aWZpZWQiLCJCdXR0b25Hcm91cCIsIkNvbGxlY3Rpb25MaXN0IiwiYWRkQ29sbGVjdGlvbkJ0biIsImhhbmRsZUFkZENvbGxlY3Rpb24iLCJzZXRJbnB1dFZhbGlkaXR5IiwiYWRkQ29sbGVjdGlvbiIsImlucHV0VmFsaWQiLCJjb2xsZWN0aW9uc1Zpc2libGUiLCJ0b2dnbGVDb2xsZWN0aW9uc1Zpc2liaWxpdHkiLCJQcm9wVHlwZXMiLCJ2YWxpZCIsImVkaXRDb2xsZWN0aW9uQnRuIiwiaGlkZUVkaXRDb2xsZWN0aW9uQnV0dG9uIiwiaGFuZGxlRWRpdENvbGxlY3Rpb24iLCJlZGl0Q29sbGVjdGlvbiIsImhhbmRsZVJlbW92ZUNvbGxlY3Rpb24iLCJyZW1vdmVDb2xsZWN0aW9uIiwiY2xvc2VEZWxldGVNb2RhbCIsIlRhc2tDaGVja2JveGVzIiwiY3VycmVudFJlcXVpcmVtZW50IiwicmVxdWlyZW1lbnRDb250YWluZXJzIiwiY291bnQiLCJjdXJyZW50VGFzayIsImZpbmQiLCJib2R5VmlzaWJsZSIsInRvZ2dsZUJvZHlWaXNpYmlsaXR5Iiwib3BlbkRlbGV0ZU1vZGFsIiwiZGVsZXRlTW9kYWxWaXNpYmxlIiwiR3JvdXBMaXN0IiwiYWRkR3JvdXBCdG4iLCJoYW5kbGVBZGRHcm91cCIsInRhc2tzSW5kZXgiLCJhZGRNYWluR3JvdXAiLCJncm91cHNWaXNpYmxlIiwidG9nZ2xlR3JvdXBzVmlzaWJpbGl0eSIsIkdyb3VwIiwiZWRpdEdyb3VwQnRuIiwiaGlkZUVkaXRHcm91cEJ1dHRvbiIsImhhbmRsZUVkaXRHcm91cCIsImVkaXRNYWluR3JvdXAiLCJoYW5kbGVSZW1vdmVHcm91cCIsInJlbW92ZU1haW5Hcm91cCIsIkNvbGxlY3Rpb25DaGVja2JveGVzIiwiY3VycmVudENvbGxlY3Rpb24iLCJQcm9wZXJ0eUxpc3QiLCJhZGRQcm9wZXJ0eUJ0biIsImhhbmRsZUFkZFByb3BlcnR5IiwiYWRkUHJvcGVydHkiLCJwcm9wZXJ0aWVzVmlzaWJsZSIsInRvZ2dsZVByb3BlcnRpZXNWaXNpYmlsaXR5IiwiUHJvcGVydHkiLCJoYW5kbGVFZGl0UHJvcGVydHkiLCJlZGl0UHJvcGVydHkiLCJoYW5kbGVSZW1vdmVQcm9wZXJ0eSIsInJlbW92ZVByb3BlcnR5IiwiUmVxdWlyZW1lbnRMaXN0IiwiYWRkUmVxdWlyZW1lbnRCdG4iLCJoYW5kbGVBZGRSZXF1aXJlbWVudCIsImFkZFJlcXVpcmVtZW50IiwiZGVmYXVsdENoZWNrZWQiLCJyZXF1aXJlbWVudHNWaXNpYmxlIiwidG9nZ2xlUmVxdWlyZW1lbnRzVmlzaWJpbGl0eSIsIlJlcXVpcmVtZW50IiwiZWRpdFJlcXVpcmVtZW50QnRuIiwiaGlkZUVkaXRSZXF1aXJlbWVudEJ1dHRvbiIsImhhbmRsZUVkaXRSZXF1aXJlbWVudCIsImVkaXRSZXF1aXJlbWVudCIsImhhbmRsZVJlbW92ZVJlcXVpcmVtZW50IiwicmVtb3ZlUmVxdWlyZW1lbnQiLCJyZWFkT25seSIsIlRhc2tMaXN0IiwiYWRkVGFza0J0biIsImhhbmRsZUFkZFRhc2siLCJhZGRUYXNrIiwidGV4dEFsaWduIiwicGFkZGluZyIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsInRhc2tzVmlzaWJsZSIsInRvZ2dsZVRhc2tzVmlzaWJpbGl0eSIsIlRhc2siLCJlZGl0VGFza0J0biIsImhpZGVFZGl0VGFza0J1dHRvbiIsImhhbmRsZUVkaXRUYXNrIiwiZWRpdFRhc2siLCJoYW5kbGVSZW1vdmVUYXNrIiwicmVtb3ZlVGFzayIsImV4ZVJlYWNoYWJsZUNoZWNrYm94IiwiZW52UmVhY2hhYmxlQ2hlY2tib3giLCJlbnZQcmVzZW50IiwiY3VycmVudFByb3BlcnR5IiwiTWFpbkVkaXRvciIsImVkaXRUYXNrc0luTWFpbkJ0biIsImVkaXRDb2xsZWN0aW9uc0luTWFpbkJ0biIsImhhbmRsZUVkaXRUYXNrc0luTWFpbiIsImhhbmRsZUVkaXRDb2xsZWN0aW9uc0luTWFpbiIsInB1bGxSaWdodCIsIkJhZGdlIiwiaGFzQ29udGVudCIsImhpZGRlbiIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiLCJxIiwieiIsIkQiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRSIsInJlZnMiLCJ1cGRhdGVyIiwiSCIsImlzUmVhY3RDb21wb25lbnQiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiTCIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsIl9vd25lciIsIlEiLCJrZXlQcmVmaXgiLCJWIiwiZXNjYXBlIiwiYWEiLCJYIiwiTiIsIlkiLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJ0b0FycmF5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlU3RhdGUiLCJkYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5Iiwic2FuaXRpemVVUkwiLCJVYSIsIlZhIiwieGxpbmtIcmVmIiwiV2EiLCJYYSIsIlNhIiwiVGEiLCJSYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJwYiIsInFiIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyYiIsInNiIiwibm9kZU5hbWUiLCJ4YiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJ6YiIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFiIiwiY29udHJvbGxlZCIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsIlJiIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImRjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZWMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImZjIiwiaGMiLCJzaWJsaW5nIiwiZ2MiLCJpYyIsImpjIiwia2MiLCJsYyIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIm1jIiwibmMiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiTGMiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImtkIiwibGQiLCJzZXRQcm9wZXJ0eSIsInN1YnN0cmluZyIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwicGFyYW0iLCJ3YnIiLCJvZCIsInBkIiwicWQiLCJyZCIsInNkIiwidGQiLCJ1ZCIsInZkIiwibmV4dFNpYmxpbmciLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwieWQiLCJjb250ZW50RWRpdGFibGUiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIl9faHRtbCIsIkhkIiwiSWQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiZGlzcGF0Y2hDb25maWciLCJVZCIsIl90YXJnZXRJbnN0IiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsInJlIiwiZGV0YWlsIiwic2UiLCJ2ZSIsImxvY2FsZSIsIndoaWNoIiwidGUiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ1ZSIsIndlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0aW1lIiwid2VlayIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwiT2UiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGUiLCJnZXRNb2RpZmllclN0YXRlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwicmYiLCJyZXBlYXQiLCJzZiIsImRhdGFUcmFuc2ZlciIsInRmIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInVmIiwidmYiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIndmIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIkxmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiTWYiLCJ1bnN0YWJsZV9ub3ciLCJOZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiT2YiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlBmIiwiUWYiLCJSZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiU2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJUZiIsIlVmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsIkxnIiwiY29udGV4dFR5cGUiLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJOZyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tcG9uZW50V2lsbE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJlbGVtZW50VHlwZSIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImdpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiaGkiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwibGkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJzdGFjayIsIkJpIiwiV2Vha1NldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJmb2N1cyIsIktpIiwiTGkiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiUmkiLCJTaSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwiSmoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiS2oiLCJNaiIsIk5qIiwicGluZ0NhY2hlIiwiT2oiLCJ1YiIsIlBqIiwiWGMiLCJRaiIsIlNqIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIndiIiwiYWN0aXZlRWxlbWVudERldGFjaGVkIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlRqIiwid2QiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwiTGoiLCJsayIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJZaiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiY3JlYXRlTW9kZWwiLCJfUmVxdWVzdGFibGUyIiwiR2lzdCIsIl9SZXF1ZXN0YWJsZSIsIl9faWQiLCJnaXN0IiwiX3JlcXVlc3QyMDRvcjQwNCIsInJldmlzaW9uIiwiY29tbWVudCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInJlYXNvbiIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5OdW1iZXIiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJyZXF1ZXN0VVJMIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInByZXZUaW1lIiwiY3JlYXRlRGVidWciLCJlbmFibGVkIiwiY3VyciIsIm1zIiwiY29lcmNlIiwibG9nRm4iLCJzZWxlY3RDb2xvciIsImluaXQiLCJkaXNhYmxlIiwic2tpcHMiLCJwbHVyYWwiLCJwYXJzZUZsb2F0IiwibG9uZyIsInJvdW5kIiwiZm10U2hvcnQiLCJfUmVxdWVzdGFibGUzIiwiVXNlciIsIl9fdXNlciIsImVuZHBvaW50IiwiX2dldE9wdGlvbnNXaXRoRGVmYXVsdHMiLCJfX2dldFNjb3BlZFVybCIsInNpbmNlIiwiX2RhdGVUb0lTTyIsImJlZm9yZSIsIklzc3VlIiwicmVwb3NpdG9yeSIsIl9fcmVwb3NpdG9yeSIsImlzc3VlRGF0YSIsImlzc3VlIiwibWlsZXN0b25lIiwibWlsZXN0b25lRGF0YSIsImxhYmVsRGF0YSIsImxhYmVsIiwiU2VhcmNoIiwiX19kZWZhdWx0cyIsIndpdGhPcHRpb25zIiwiX3NlYXJjaCIsIlJhdGVMaW1pdCIsIl91dGYyIiwiUmVwb3NpdG9yeSIsIl9fZnVsbG5hbWUiLCJfX2N1cnJlbnRUcmVlIiwiYnJhbmNoIiwic2hhIiwiaGVhZCIsInVudGlsIiwidHJlZVNIQSIsImNvbnRlbnQiLCJwb3N0Qm9keSIsIl9nZXRDb250ZW50T2JqZWN0IiwiZW5jb2RpbmciLCJCdWZmZXIiLCJiYXNlVHJlZVNIQSIsImJsb2JTSEEiLCJuZXdUcmVlIiwiYmFzZV90cmVlIiwiYmFzZVNIQSIsInBhcmVudCIsInBhcmVudHMiLCJjb21taXRTSEEiLCJmb3JjZSIsIm9yZyIsIm9sZEJyYW5jaCIsIm5ld0JyYW5jaCIsImdldFJlZiIsIl90aGlzNCIsImdldFNoYSIsImRlbGV0ZUNvbW1pdCIsIm9sZFBhdGgiLCJuZXdQYXRoIiwiX3RoaXM1Iiwib2xkU2hhIiwiZ2V0VHJlZSIsIl9yZWYyJGRhdGEiLCJjcmVhdGVUcmVlIiwiX3JlZjMiLCJjb21taXQiLCJfcmVmNCIsInVwZGF0ZUhlYWQiLCJfdGhpczYiLCJmaWxlUGF0aCIsInNob3VsZEVuY29kZSIsImF1dGhvciIsImNvbW1pdHRlciIsImJhc2U2NCIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJmcm9tU3RyaW5nIiwiY29weSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsIl9hcnIiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJkc3QiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwib3V0cHV0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsIkxOMiIsImZyZWVFeHBvcnRzIiwiZnJlZUdsb2JhbCIsImJ5dGVDb3VudCIsImJ5dGVJbmRleCIsInN0cmluZ0Zyb21DaGFyQ29kZSIsInVjczJkZWNvZGUiLCJleHRyYSIsImNvdW50ZXIiLCJjaGVja1NjYWxhclZhbHVlIiwiY3JlYXRlQnl0ZSIsImVuY29kZUNvZGVQb2ludCIsInJlYWRDb250aW51YXRpb25CeXRlIiwiY29udGludWF0aW9uQnl0ZSIsImRlY29kZVN5bWJvbCIsImJ5dGUxIiwidXRmOCIsImJ5dGVTdHJpbmciLCJ1Y3MyZW5jb2RlIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJPcmdhbml6YXRpb24iLCJfX25hbWUiLCJkaXJlY3Rpb24iLCJUZWFtIiwiX190ZWFtSWQiLCJNYXJrZG93biIsIlByb2plY3QiLCJjb2xJZCIsImxpc3RQcm9qZWN0Q29sdW1ucyIsImNvbHVtbiIsImNhcmRzSW5Db2x1bW5zIiwiY2FyZHMiLCJjYXJkSWQiLCJjb2x1bW5faWQiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImZyb21JbmRleCIsIiRPYmplY3QiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYW55IiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsInZhbGlkYXRvcnMiLCJhbGxQcm9wVHlwZXMiLCJ2YWxpZGF0b3IiLCJfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCIkdmFsdWVzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIkxhenkiLCJNZW1vIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwidHlwZU9mIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIm9uS2V5RG93biIsInRhYkluZGV4IiwiaXNUcml2aWFsSHJlZiIsIlNhZmVBbmNob3IiLCJoYW5kbGVDbGljayIsImhhbmRsZUtleURvd24iLCJwb2ludGVyRXZlbnRzIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9TeW1ib2wkaXRlcmF0b3IiLCJfU3ltYm9sIiwiJGF0IiwiaXRlcmF0ZWQiLCJwb2ludCIsIlRPX1NUUklORyIsIk9iamVjdFByb3RvIiwiYWRkVG9VbnNjb3BhYmxlcyIsIl9rIiwiQXJndW1lbnRzIiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJEdPUFMiLCIkRFAiLCJnT1BOIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwiTkFUSVZFX1dFQUtfTUFQIiwiSVNfSUUxMSIsIkFjdGl2ZVhPYmplY3QiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwidWZzdG9yZSIsIiRXZWFrTWFwIiwiZ2V0Q29uc3RydWN0b3IiLCJfZiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIm9yaWdpbmFsIiwiU1BFQ0lFUyIsInJlZGVmaW5lQWxsIiwiYW5JbnN0YW5jZSIsImZvck9mIiwiY3JlYXRlQXJyYXlNZXRob2QiLCIkaGFzIiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJfbCIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJBRERFUiIsIkFycmF5UHJvdG8iLCJjbGFzc29mIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJBUkciLCJ0cnlHZXQiLCJjYWxsZWUiLCJJU19XRUFLIiwiSVNfQURERVIiLCJzZXRTdHJvbmciLCJDT0xMRUNUSU9OIiwibWFwcGluZyIsIm1hcEZuIiwibmV4dEl0ZW0iLCJyb290Q2xvc2UiLCJPdmVybGF5IiwiX2VsZW1lbnRUeXBlMiIsIl9Qb3J0YWwyIiwiX1Bvc2l0aW9uMiIsIl9Sb290Q2xvc2VXcmFwcGVyMiIsImhhbmRsZUhpZGRlbiIsImV4aXRlZCIsIm9uSGlkZGVuTGlzdGVuZXIiLCJfcHJvcHMiLCJjb250YWluZXJQYWRkaW5nIiwic2hvdWxkVXBkYXRlUG9zaXRpb24iLCJUcmFuc2l0aW9uIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwib25Sb290Q2xvc2UiLCJyb290Q2xvc2VFdmVudCIsIl9tb3VudE92ZXJsYXlUYXJnZXQiLCJfb3ZlcmxheVRhcmdldCIsIl91bm1vdW50T3ZlcmxheVRhcmdldCIsIl9yZW5kZXJPdmVybGF5IiwiaW5pdGlhbFJlbmRlciIsIl9vdmVybGF5SW5zdGFuY2UiLCJfdW5yZW5kZXJPdmVybGF5IiwiX2lzTW91bnRlZCIsIl9jbGFzc25hbWVzMiIsIl9jYWxjdWxhdGVQb3NpdGlvbjIiLCJQb3NpdGlvbiIsImdldFRhcmdldCIsInRhcmdldEVsZW1lbnQiLCJtYXliZVVwZGF0ZVBvc2l0aW9uIiwicGxhY2VtZW50Q2hhbmdlZCIsIl9sYXN0VGFyZ2V0IiwidXBkYXRlUG9zaXRpb24iLCJfbmVlZHNGbHVzaCIsInByZXZQcm9wcyIsIl9zdGF0ZSIsImFycm93UG9zaXRpb24iLCJvdmVybGF5Tm9kZSIsImNoaWxkT2Zmc2V0IiwiX29mZnNldDIiLCJfcG9zaXRpb24yIiwiX2dldE9mZnNldDIiLCJvdmVybGF5SGVpZ2h0Iiwib3ZlcmxheVdpZHRoIiwidG9wRGVsdGEiLCJjb250YWluZXJEaW1lbnNpb25zIiwiZ2V0Q29udGFpbmVyRGltZW5zaW9ucyIsImNvbnRhaW5lclNjcm9sbCIsInNjcm9sbCIsImNvbnRhaW5lckhlaWdodCIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwiZ2V0VG9wRGVsdGEiLCJsZWZ0RGVsdGEiLCJjb250YWluZXJXaWR0aCIsImxlZnRFZGdlT2Zmc2V0IiwicmlnaHRFZGdlT2Zmc2V0IiwiZ2V0TGVmdERlbHRhIiwiX3Njcm9sbFRvcDIiLCJjb250YWluZXJOb2RlIiwiaW5uZXJIZWlnaHQiLCJfZ2V0T2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0IiwiX3N0eWxlIiwiX29mZnNldFBhcmVudCIsIl9vZmZzZXQiLCJfc2Nyb2xsVG9wIiwiX3Njcm9sbExlZnQiLCJySHlwaGVuIiwiY2hyIiwiX2h5cGhlbmF0ZSIsInJVcHBlciIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJybnVtbm9ucHgiLCJycG9zaXRpb24iLCJydW5TdHlsZSIsInJ1bnRpbWVTdHlsZSIsInJzTGVmdCIsInBpeGVsTGVmdCIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uVGltaW5nIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwidHJhbnNpdGlvblRpbWluZyIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIl9nZXRUcmFuc2l0aW9uUHJvcGVydCIsInZlbmRvck1hcCIsIk1veiIsIldlYmtpdCIsInZlbmRvcnMiLCJ2ZW5kb3IiLCJnZXRUcmFuc2l0aW9uUHJvcGVydGllcyIsInRpbWluZyIsImR1cmF0aW9uIiwic3VwcG9ydGVkVHJhbnNmb3JtcyIsIl9jb250YWluczIiLCJfYWRkRXZlbnRMaXN0ZW5lcjIiLCJSb290Q2xvc2VXcmFwcGVyIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJkb2N1bWVudE1vdXNlQ2FwdHVyZUxpc3RlbmVyIiwiaGFuZGxlTW91c2VDYXB0dXJlIiwiZG9jdW1lbnRNb3VzZUxpc3RlbmVyIiwiaGFuZGxlTW91c2UiLCJkb2N1bWVudEtleXVwTGlzdGVuZXIiLCJoYW5kbGVLZXlVcCIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwicHJldmVudE1vdXNlUm9vdENsb3NlIiwiaXNMZWZ0Q2xpY2tFdmVudCIsIkVYSVRJTkciLCJFWElURUQiLCJVTk1PVU5URUQiLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiaW5pdGlhbFN0YXR1cyIsInBhcmVudEdyb3VwIiwidHJhbnNpdGlvbkdyb3VwIiwiaXNNb3VudGluZyIsImVudGVyIiwiYXBwZWFyU3RhdHVzIiwibmV4dENhbGxiYWNrIiwicHJldlN0YXRlIiwidXBkYXRlU3RhdHVzIiwibmV4dFN0YXR1cyIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwiZXhpdCIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsInNhZmVTZXRTdGF0ZSIsIm9uVHJhbnNpdGlvbkVuZCIsInNldE5leHRDYWxsYmFjayIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwicG9seWZpbGwiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImZvdW5kV2lsbE1vdW50TmFtZSIsImZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUiLCJmb3VuZFdpbGxVcGRhdGVOYW1lIiwibmV3QXBpTmFtZSIsIm1heWJlU25hcHNob3QiLCJzbmFwc2hvdCIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJjbGFzc05hbWVzU2hhcGUiLCJ0aW1lb3V0c1NoYXBlIiwiZXZlcnkiLCJfR2x5cGhpY29uIiwiRm9ybUNvbnRyb2xGZWVkYmFjayIsImdldEdseXBoIiwicmVuZGVyRGVmYXVsdEZlZWRiYWNrIiwiZ2x5cGgiLCJHbHlwaGljb24iLCJGb3JtQ29udHJvbFN0YXRpYyIsIl9vbiIsIl9vZmYiLCJfZmlsdGVyIiwiX2xpc3RlbiIsImxpc3RlbiIsInNlbGVjdG9yIiwiX3F1ZXJ5U2VsZWN0b3JBbGwiLCJtYXliZUlEIiwibWF5YmVDbGFzcyIsIm5hbWVPbmx5Iiwic2ltcGxlU2VsZWN0b3JSRSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIl9hY3RpdmVFbGVtZW50MiIsIl9kZXByZWNhdGVkMiIsIl93YXJuaW5nMiIsIl9Nb2RhbE1hbmFnZXIyIiwiX1JlZkhvbGRlcjIiLCJfYWRkRm9jdXNMaXN0ZW5lcjIiLCJtb2RhbE1hbmFnZXIiLCJfaW5pdGlhbGlzZVByb3BzIiwib21pdFByb3BzIiwibmV3UHJvcHMiLCJkaWFsb2ciLCJmaWx0ZXJlZFByb3BzIiwiX2RpYWxvZyRwcm9wcyIsInNldE1vdW50Tm9kZSIsIm9uUG9ydGFsUmVuZGVyZWQiLCJzZXRNb2RhbE5vZGVSZWYiLCJyZW5kZXJCYWNrZHJvcCIsInNldERpYWxvZ1JlZiIsImNoZWNrRm9yRm9jdXMiLCJvblNob3ciLCJfcHJvcHMyIiwiZGlhbG9nRWxlbWVudCIsImN1cnJlbnRBY3RpdmVFbGVtZW50IiwibGFzdEZvY3VzIiwicmVzdG9yZUxhc3RGb2N1cyIsImlzVG9wTW9kYWwiLCJtYW5hZ2VyIiwib25Fc2NhcGVLZXlEb3duIiwib25Fc2NhcGVLZXlVcCIsIm9uQmFja2Ryb3BDbGljayIsImJhY2tkcm9wU3R5bGUiLCJfcHJvcHMzIiwiaGFuZGxlQmFja2Ryb3BDbGljayIsIl9vbkRvY3VtZW50S2V5ZG93bkxpc3RlbmVyIiwiaGFuZGxlRG9jdW1lbnRLZXlEb3duIiwiX29uRG9jdW1lbnRLZXl1cExpc3RlbmVyIiwiaGFuZGxlRG9jdW1lbnRLZXlVcCIsIl9vbkZvY3VzaW5MaXN0ZW5lciIsIm1vdW50Tm9kZSIsIm1vZGFsTm9kZSIsIl9wcm9wczQiLCJNYW5hZ2VyIiwiZGVwcmVjYXRlZCIsIl93YXJuaW5nIiwid2FybmVkIiwibWVzc2FnZUtleSIsIl9yZXNldFdhcm5lZCIsIndhcm5pbmciLCJfY2xhc3MyIiwiX3N0eWxlMiIsIl9zY3JvbGxiYXJTaXplMiIsIl9pc092ZXJmbG93aW5nMiIsIl9tYW5hZ2VBcmlhSGlkZGVuIiwiZmluZENvbnRhaW5lciIsIm1vZGFsIiwibW9kYWxzIiwic2V0Q29udGFpbmVyU3R5bGUiLCJvdmVyZmxvd2luZyIsInJlbW92ZUNvbnRhaW5lclN0eWxlIiwiTW9kYWxNYW5hZ2VyIiwiX3JlZjIkaGlkZVNpYmxpbmdOb2RlIiwiaGlkZVNpYmxpbmdOb2RlcyIsIl9yZWYyJGhhbmRsZUNvbnRhaW5lciIsImhhbmRsZUNvbnRhaW5lck92ZXJmbG93IiwibW9kYWxJZHgiLCJjb250YWluZXJJZHgiLCJjb250YWluZXJzIiwiaGlkZVNpYmxpbmdzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInNob3dTaWJsaW5ncyIsImFyaWFIaWRkZW4iLCJfYWRkQ2xhc3MiLCJfcmVtb3ZlQ2xhc3MiLCJfaGFzQ2xhc3MiLCJoYXNDbGFzcyIsInJlcGxhY2VDbGFzc05hbWUiLCJvcmlnQ2xhc3MiLCJjbGFzc1RvUmVtb3ZlIiwic2libGluZ3MiLCJCTEFDS0xJU1QiLCJtb3VudCIsIlJlZkhvbGRlciIsInVzZUZvY3VzaW4iLCJNb2RhbEJvZHkiLCJkaWFsb2dDbGFzc05hbWUiLCJNb2RhbERpYWxvZyIsImJzQ2xhc3NOYW1lIiwibW9kYWxTdHlsZSIsImRpYWxvZ0NsYXNzZXMiLCJvbk1vdXNlRG93biIsIk1vZGFsRm9vdGVyIiwiX0Nsb3NlQnV0dG9uIiwiY2xvc2VMYWJlbCIsIk1vZGFsSGVhZGVyIiwiQ2xvc2VCdXR0b24iLCJNb2RhbFRpdGxlIiwiY29tcG9uZW50UHJvcFR5cGVzIiwicGFyZW50UHJvcHMiLCJJbnB1dEdyb3VwQWRkb24iLCJJbnB1dEdyb3VwQnV0dG9uIiwiUmVhY3QiLCJBcHBDb250YWluZXIiLCJ3YXJuQWJvdXRITVJEaXNhYmxlZCIsInNob3VsZFdyYXBXaXRoQXBwQ29udGFpbmVyIiwiYXJlQ29tcG9uZW50c0VxdWFsIiwic2V0Q29uZmlnIiwiY29sZCIsImNvbmZpZ3VyZUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMx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SWh4SCxFQUFROHdILGFBQWFBLEVBQWE5d0gsRUFBUXEwRCxJQUFJQSxFQUFJcjBELEVBQVFpeEgsbUJBQXhLLFNBQVMvdEgsRUFBRXZCLEdBQUcsT0FBT3VCLElBQUl2QixHQUFxTDNCLEVBQVFreEgsVUFBaEwsYUFBb01seEgsRUFBUW14SCxLQUExTCxTQUFTanVILEdBQUcsT0FBT0EsR0FBaUxsRCxFQUFRb3hILG1CQUFuSyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0NCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBNb2JYIC0gKGMpIE1pY2hlbCBXZXN0c3RyYXRlIDIwMTUgLSAyMDIwIC0gTUlUIExpY2Vuc2VkICovXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxuXG52YXIgT0JGVVNDQVRFRF9FUlJPUiA9IFwiQW4gaW52YXJpYW50IGZhaWxlZCwgaG93ZXZlciB0aGUgZXJyb3IgaXMgb2JmdXNjYXRlZCBiZWNhdXNlIHRoaXMgaXMgYSBwcm9kdWN0aW9uIGJ1aWxkLlwiO1xyXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcclxuT2JqZWN0LmZyZWV6ZShFTVBUWV9BUlJBWSk7XHJcbnZhciBFTVBUWV9PQkpFQ1QgPSB7fTtcclxuT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkpFQ1QpO1xyXG5mdW5jdGlvbiBnZXROZXh0SWQoKSB7XHJcbiAgICByZXR1cm4gKytnbG9iYWxTdGF0ZS5tb2J4R3VpZDtcclxufVxyXG5mdW5jdGlvbiBmYWlsKG1lc3NhZ2UpIHtcclxuICAgIGludmFyaWFudChmYWxzZSwgbWVzc2FnZSk7XHJcbiAgICB0aHJvdyBcIlhcIjsgLy8gdW5yZWFjaGFibGVcclxufVxyXG5mdW5jdGlvbiBpbnZhcmlhbnQoY2hlY2ssIG1lc3NhZ2UpIHtcclxuICAgIGlmICghY2hlY2spXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnhdIFwiICsgKG1lc3NhZ2UgfHwgT0JGVVNDQVRFRF9FUlJPUikpO1xyXG59XHJcbi8qKlxyXG4gKiBQcmludHMgYSBkZXByZWNhdGlvbiBtZXNzYWdlLCBidXQgb25seSBvbmUgdGltZS5cclxuICogUmV0dXJucyBmYWxzZSBpZiB0aGUgZGVwcmVjYXRlZCBtZXNzYWdlIHdhcyBhbHJlYWR5IHByaW50ZWQgYmVmb3JlXHJcbiAqL1xyXG52YXIgZGVwcmVjYXRlZE1lc3NhZ2VzID0gW107XHJcbmZ1bmN0aW9uIGRlcHJlY2F0ZWQobXNnLCB0aGluZykge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodGhpbmcpIHtcclxuICAgICAgICByZXR1cm4gZGVwcmVjYXRlZChcIidcIiArIG1zZyArIFwiJywgdXNlICdcIiArIHRoaW5nICsgXCInIGluc3RlYWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlcHJlY2F0ZWRNZXNzYWdlcy5pbmRleE9mKG1zZykgIT09IC0xKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGRlcHJlY2F0ZWRNZXNzYWdlcy5wdXNoKG1zZyk7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiW21vYnhdIERlcHJlY2F0ZWQ6IFwiICsgbXNnKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbi8qKlxyXG4gKiBNYWtlcyBzdXJlIHRoYXQgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGlzIGludm9rZWQgYXQgbW9zdCBvbmNlLlxyXG4gKi9cclxuZnVuY3Rpb24gb25jZShmdW5jKSB7XHJcbiAgICB2YXIgaW52b2tlZCA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaW52b2tlZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGludm9rZWQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG59XHJcbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5mdW5jdGlvbiB1bmlxdWUobGlzdCkge1xyXG4gICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaWYgKHJlcy5pbmRleE9mKGl0ZW0pID09PSAtMSlcclxuICAgICAgICAgICAgcmVzLnB1c2goaXRlbSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XHJcbn1cclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIilcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xyXG4gICAgcmV0dXJuIHByb3RvID09PSBPYmplY3QucHJvdG90eXBlIHx8IHByb3RvID09PSBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIGFkZEhpZGRlblByb3Aob2JqZWN0LCBwcm9wTmFtZSwgdmFsdWUpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BOYW1lLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gYWRkSGlkZGVuRmluYWxQcm9wKG9iamVjdCwgcHJvcE5hbWUsIHZhbHVlKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wTmFtZSwge1xyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBpc1Byb3BlcnR5Q29uZmlndXJhYmxlKG9iamVjdCwgcHJvcCkge1xyXG4gICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcCk7XHJcbiAgICByZXR1cm4gIWRlc2NyaXB0b3IgfHwgKGRlc2NyaXB0b3IuY29uZmlndXJhYmxlICE9PSBmYWxzZSAmJiBkZXNjcmlwdG9yLndyaXRhYmxlICE9PSBmYWxzZSk7XHJcbn1cclxuZnVuY3Rpb24gYXNzZXJ0UHJvcGVydHlDb25maWd1cmFibGUob2JqZWN0LCBwcm9wKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFpc1Byb3BlcnR5Q29uZmlndXJhYmxlKG9iamVjdCwgcHJvcCkpXHJcbiAgICAgICAgZmFpbChcIkNhbm5vdCBtYWtlIHByb3BlcnR5ICdcIiArIHByb3AudG9TdHJpbmcoKSArIFwiJyBvYnNlcnZhYmxlLCBpdCBpcyBub3QgY29uZmlndXJhYmxlIGFuZCB3cml0YWJsZSBpbiB0aGUgdGFyZ2V0IG9iamVjdFwiKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKG5hbWUsIGNsYXp6KSB7XHJcbiAgICB2YXIgcHJvcE5hbWUgPSBcImlzTW9iWFwiICsgbmFtZTtcclxuICAgIGNsYXp6LnByb3RvdHlwZVtwcm9wTmFtZV0gPSB0cnVlO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHgpICYmIHhbcHJvcE5hbWVdID09PSB0cnVlO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSwgZGlzcmVnYXJkaW5nIG9ic2VydmFiaWxpdHkuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh4KSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh4KSB8fCBpc09ic2VydmFibGVBcnJheSh4KTtcclxufVxyXG5mdW5jdGlvbiBpc0VTNk1hcCh0aGluZykge1xyXG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgTWFwO1xyXG59XHJcbmZ1bmN0aW9uIGlzRVM2U2V0KHRoaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiBTZXQ7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGZvbGxvd2luZzogb3duIGtleXMsIHByb3RvdHlwZSBrZXlzICYgb3duIHN5bWJvbCBrZXlzLCBpZiB0aGV5IGFyZSBlbnVtZXJhYmxlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UGxhaW5PYmplY3RLZXlzKG9iamVjdCkge1xyXG4gICAgdmFyIGVudW1lcmFibGVzID0gbmV3IFNldCgpO1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdClcclxuICAgICAgICBlbnVtZXJhYmxlcy5hZGQoa2V5KTsgLy8gKmFsbCogZW51bWVyYWJsZXNcclxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBrKS5lbnVtZXJhYmxlKVxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlcy5hZGQoayk7XHJcbiAgICB9KTsgLy8gKm93biogc3ltYm9sc1xyXG4gICAgLy8gTm90ZTogdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBtaXNzaW5nIGVudW1lcmFibGUsIGluaGVyaXRlZCwgc3ltYm9saWMgcHJvcGVydHkgbmFtZXMhIFRoYXQgd291bGQgaG93ZXZlciBwcmV0dHkgZXhwZW5zaXZlIHRvIGFkZCxcclxuICAgIC8vIGFzIHRoZXJlIGlzIG5vIGVmZmljaWVudCBpdGVyYXRvciB0aGF0IHJldHVybnMgKmFsbCogcHJvcGVydGllc1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZW51bWVyYWJsZXMpO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeUtleShrZXkpIHtcclxuICAgIGlmIChrZXkgJiYga2V5LnRvU3RyaW5nKVxyXG4gICAgICAgIHJldHVybiBrZXkudG9TdHJpbmcoKTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gbmV3IFN0cmluZyhrZXkpLnRvU3RyaW5nKCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0TWFwTGlrZUtleXMobWFwKSB7XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdChtYXApKVxyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkobWFwKSlcclxuICAgICAgICByZXR1cm4gbWFwLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIF9iID0gX19yZWFkKF9hLCAxKSwga2V5ID0gX2JbMF07XHJcbiAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBpZiAoaXNFUzZNYXAobWFwKSB8fCBpc09ic2VydmFibGVNYXAobWFwKSlcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShtYXAua2V5cygpKTtcclxuICAgIHJldHVybiBmYWlsKFwiQ2Fubm90IGdldCBrZXlzIGZyb20gJ1wiICsgbWFwICsgXCInXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHRvUHJpbWl0aXZlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiID8gXCJcIiArIHZhbHVlIDogdmFsdWU7XHJcbn1cblxudmFyICRtb2J4ID0gU3ltYm9sKFwibW9ieCBhZG1pbmlzdHJhdGlvblwiKTtcclxudmFyIEF0b20gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBhdG9tLiBGb3IgZGVidWdnaW5nIHB1cnBvc2VzIGl0IGlzIHJlY29tbWVuZGVkIHRvIGdpdmUgaXQgYSBuYW1lLlxyXG4gICAgICogVGhlIG9uQmVjb21lT2JzZXJ2ZWQgYW5kIG9uQmVjb21lVW5vYnNlcnZlZCBjYWxsYmFja3MgY2FuIGJlIHVzZWQgZm9yIHJlc291cmNlIG1hbmFnZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEF0b20obmFtZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiQXRvbUBcIiArIGdldE5leHRJZCgpOyB9XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSBmYWxzZTsgLy8gZm9yIGVmZmVjdGl2ZSB1bm9ic2VydmluZy4gQmFzZUF0b20gaGFzIHRydWUsIGZvciBleHRyYSBvcHRpbWl6YXRpb24sIHNvIGl0cyBvbkJlY29tZVVub2JzZXJ2ZWQgbmV2ZXIgZ2V0cyBjYWxsZWQsIGJlY2F1c2UgaXQncyBub3QgbmVlZGVkXHJcbiAgICAgICAgdGhpcy5pc0JlaW5nT2JzZXJ2ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLmRpZmZWYWx1ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5sYXN0QWNjZXNzZWRCeSA9IDA7XHJcbiAgICAgICAgdGhpcy5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XHJcbiAgICB9XHJcbiAgICBBdG9tLnByb3RvdHlwZS5vbkJlY29tZU9ic2VydmVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9uQmVjb21lT2JzZXJ2ZWRMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkJlY29tZU9ic2VydmVkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBsaXN0ZW5lcigpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQXRvbS5wcm90b3R5cGUub25CZWNvbWVVbm9ic2VydmVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9uQmVjb21lVW5vYnNlcnZlZExpc3RlbmVycykge1xyXG4gICAgICAgICAgICB0aGlzLm9uQmVjb21lVW5vYnNlcnZlZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gbGlzdGVuZXIoKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIHRvIG5vdGlmeSBtb2J4IHRoYXQgeW91ciBhdG9tIGhhcyBiZWVuIHVzZWQgc29tZWhvdy5cclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBjdXJyZW50bHkgYSByZWFjdGl2ZSBjb250ZXh0LlxyXG4gICAgICovXHJcbiAgICBBdG9tLnByb3RvdHlwZS5yZXBvcnRPYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gcmVwb3J0T2JzZXJ2ZWQodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2UgdGhpcyBtZXRob2QgX2FmdGVyXyB0aGlzIG1ldGhvZCBoYXMgY2hhbmdlZCB0byBzaWduYWwgbW9ieCB0aGF0IGFsbCBpdHMgb2JzZXJ2ZXJzIHNob3VsZCBpbnZhbGlkYXRlLlxyXG4gICAgICovXHJcbiAgICBBdG9tLnByb3RvdHlwZS5yZXBvcnRDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgICAgICBwcm9wYWdhdGVDaGFuZ2VkKHRoaXMpO1xyXG4gICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICB9O1xyXG4gICAgQXRvbS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXRvbTtcclxufSgpKTtcclxudmFyIGlzQXRvbSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJBdG9tXCIsIEF0b20pO1xyXG5mdW5jdGlvbiBjcmVhdGVBdG9tKG5hbWUsIG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyLCBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyKSB7XHJcbiAgICBpZiAob25CZWNvbWVPYnNlcnZlZEhhbmRsZXIgPT09IHZvaWQgMCkgeyBvbkJlY29tZU9ic2VydmVkSGFuZGxlciA9IG5vb3A7IH1cclxuICAgIGlmIChvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyID09PSB2b2lkIDApIHsgb25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciA9IG5vb3A7IH1cclxuICAgIHZhciBhdG9tID0gbmV3IEF0b20obmFtZSk7XHJcbiAgICAvLyBkZWZhdWx0IGBub29wYCBsaXN0ZW5lciB3aWxsIG5vdCBpbml0aWFsaXplIHRoZSBob29rIFNldFxyXG4gICAgaWYgKG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyICE9PSBub29wKSB7XHJcbiAgICAgICAgb25CZWNvbWVPYnNlcnZlZChhdG9tLCBvbkJlY29tZU9ic2VydmVkSGFuZGxlcik7XHJcbiAgICB9XHJcbiAgICBpZiAob25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciAhPT0gbm9vcCkge1xyXG4gICAgICAgIG9uQmVjb21lVW5vYnNlcnZlZChhdG9tLCBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhdG9tO1xyXG59XG5cbmZ1bmN0aW9uIGlkZW50aXR5Q29tcGFyZXIoYSwgYikge1xyXG4gICAgcmV0dXJuIGEgPT09IGI7XHJcbn1cclxuZnVuY3Rpb24gc3RydWN0dXJhbENvbXBhcmVyKGEsIGIpIHtcclxuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYik7XHJcbn1cclxuZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmVyKGEsIGIpIHtcclxuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgMSk7XHJcbn1cclxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmVyKGEsIGIpIHtcclxuICAgIHJldHVybiBPYmplY3QuaXMoYSwgYik7XHJcbn1cclxudmFyIGNvbXBhcmVyID0ge1xyXG4gICAgaWRlbnRpdHk6IGlkZW50aXR5Q29tcGFyZXIsXHJcbiAgICBzdHJ1Y3R1cmFsOiBzdHJ1Y3R1cmFsQ29tcGFyZXIsXHJcbiAgICBkZWZhdWx0OiBkZWZhdWx0Q29tcGFyZXIsXHJcbiAgICBzaGFsbG93OiBzaGFsbG93Q29tcGFyZXJcclxufTtcblxudmFyIG1vYnhEaWRSdW5MYXp5SW5pdGlhbGl6ZXJzU3ltYm9sID0gU3ltYm9sKFwibW9ieCBkaWQgcnVuIGxhenkgaW5pdGlhbGl6ZXJzXCIpO1xyXG52YXIgbW9ieFBlbmRpbmdEZWNvcmF0b3JzID0gU3ltYm9sKFwibW9ieCBwZW5kaW5nIGRlY29yYXRvcnNcIik7XHJcbnZhciBlbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlID0ge307XHJcbnZhciBub25FbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlID0ge307XHJcbmZ1bmN0aW9uIGNyZWF0ZVByb3BlcnR5SW5pdGlhbGl6ZXJEZXNjcmlwdG9yKHByb3AsIGVudW1lcmFibGUpIHtcclxuICAgIHZhciBjYWNoZSA9IGVudW1lcmFibGUgPyBlbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlIDogbm9uRW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZTtcclxuICAgIHJldHVybiAoY2FjaGVbcHJvcF0gfHxcclxuICAgICAgICAoY2FjaGVbcHJvcF0gPSB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZW51bWVyYWJsZSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcm9wXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVJbnN0YW5jZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXNbcHJvcF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKTtcclxufVxyXG5mdW5jdGlvbiBpbml0aWFsaXplSW5zdGFuY2UodGFyZ2V0KSB7XHJcbiAgICB2YXIgZV8xLCBfYTtcclxuICAgIGlmICh0YXJnZXRbbW9ieERpZFJ1bkxhenlJbml0aWFsaXplcnNTeW1ib2xdID09PSB0cnVlKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciBkZWNvcmF0b3JzID0gdGFyZ2V0W21vYnhQZW5kaW5nRGVjb3JhdG9yc107XHJcbiAgICBpZiAoZGVjb3JhdG9ycykge1xyXG4gICAgICAgIGFkZEhpZGRlblByb3AodGFyZ2V0LCBtb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1N5bWJvbCwgdHJ1ZSk7XHJcbiAgICAgICAgLy8gQnVpbGQgcHJvcGVydHkga2V5IGFycmF5IGZyb20gYm90aCBzdHJpbmdzIGFuZCBzeW1ib2xzXHJcbiAgICAgICAgdmFyIGtleXMgPSBfX3NwcmVhZChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGRlY29yYXRvcnMpLCBPYmplY3Qua2V5cyhkZWNvcmF0b3JzKSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5c18xID0gX192YWx1ZXMoa2V5cyksIGtleXNfMV8xID0ga2V5c18xLm5leHQoKTsgIWtleXNfMV8xLmRvbmU7IGtleXNfMV8xID0ga2V5c18xLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNfMV8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBkZWNvcmF0b3JzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkLnByb3BlcnR5Q3JlYXRvcih0YXJnZXQsIGQucHJvcCwgZC5kZXNjcmlwdG9yLCBkLmRlY29yYXRvclRhcmdldCwgZC5kZWNvcmF0b3JBcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5c18xXzEgJiYgIWtleXNfMV8xLmRvbmUgJiYgKF9hID0ga2V5c18xLnJldHVybikpIF9hLmNhbGwoa2V5c18xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVByb3BEZWNvcmF0b3IocHJvcGVydHlJbml0aWFsbHlFbnVtZXJhYmxlLCBwcm9wZXJ0eUNyZWF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3JGYWN0b3J5KCkge1xyXG4gICAgICAgIHZhciBkZWNvcmF0b3JBcmd1bWVudHM7XHJcbiAgICAgICAgdmFyIGRlY29yYXRvciA9IGZ1bmN0aW9uIGRlY29yYXRlKHRhcmdldCwgcHJvcCwgZGVzY3JpcHRvciwgYXBwbHlJbW1lZGlhdGVseVxyXG4gICAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIHBhcmFtZXRlciB0byBzaWduYWwgdGhlIGRpcmVjdCBhcHBsaWNhdGlvbiBvZiBhIGRlY29yYXRvciwgYWxsb3cgZXh0ZW5kT2JzZXJ2YWJsZSB0byBza2lwIHRoZSBlbnRpcmUgdHlwZSBkZWNvcmF0aW9uIHBhcnQsXHJcbiAgICAgICAgLy8gYXMgdGhlIGluc3RhbmNlIHRvIGFwcGx5IHRoZSBkZWNvcmF0b3IgdG8gZXF1YWxzIHRoZSB0YXJnZXRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKGFwcGx5SW1tZWRpYXRlbHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5Q3JlYXRvcih0YXJnZXQsIHByb3AsIGRlc2NyaXB0b3IsIHRhcmdldCwgZGVjb3JhdG9yQXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIXF1YWNrc0xpa2VBRGVjb3JhdG9yKGFyZ3VtZW50cykpXHJcbiAgICAgICAgICAgICAgICBmYWlsKFwiVGhpcyBmdW5jdGlvbiBpcyBhIGRlY29yYXRvciwgYnV0IGl0IHdhc24ndCBpbnZva2VkIGxpa2UgYSBkZWNvcmF0b3JcIik7XHJcbiAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgbW9ieFBlbmRpbmdEZWNvcmF0b3JzKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZERlY29yYXRvcnMgPSB0YXJnZXRbbW9ieFBlbmRpbmdEZWNvcmF0b3JzXTtcclxuICAgICAgICAgICAgICAgIGFkZEhpZGRlblByb3AodGFyZ2V0LCBtb2J4UGVuZGluZ0RlY29yYXRvcnMsIF9fYXNzaWduKHt9LCBpbmhlcml0ZWREZWNvcmF0b3JzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGFyZ2V0W21vYnhQZW5kaW5nRGVjb3JhdG9yc11bcHJvcF0gPSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wOiBwcm9wLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDcmVhdG9yOiBwcm9wZXJ0eUNyZWF0b3IsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxyXG4gICAgICAgICAgICAgICAgZGVjb3JhdG9yVGFyZ2V0OiB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBkZWNvcmF0b3JBcmd1bWVudHM6IGRlY29yYXRvckFyZ3VtZW50c1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlUHJvcGVydHlJbml0aWFsaXplckRlc2NyaXB0b3IocHJvcCwgcHJvcGVydHlJbml0aWFsbHlFbnVtZXJhYmxlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChxdWFja3NMaWtlQURlY29yYXRvcihhcmd1bWVudHMpKSB7XHJcbiAgICAgICAgICAgIC8vIEBkZWNvcmF0b3JcclxuICAgICAgICAgICAgZGVjb3JhdG9yQXJndW1lbnRzID0gRU1QVFlfQVJSQVk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3IuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEBkZWNvcmF0b3IoYXJncylcclxuICAgICAgICAgICAgZGVjb3JhdG9yQXJndW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlY29yYXRvcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHF1YWNrc0xpa2VBRGVjb3JhdG9yKGFyZ3MpIHtcclxuICAgIHJldHVybiAoKChhcmdzLmxlbmd0aCA9PT0gMiB8fCBhcmdzLmxlbmd0aCA9PT0gMykgJiZcclxuICAgICAgICAodHlwZW9mIGFyZ3NbMV0gPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGFyZ3NbMV0gPT09IFwic3ltYm9sXCIpKSB8fFxyXG4gICAgICAgIChhcmdzLmxlbmd0aCA9PT0gNCAmJiBhcmdzWzNdID09PSB0cnVlKSk7XHJcbn1cblxuZnVuY3Rpb24gZGVlcEVuaGFuY2VyKHYsIF8sIG5hbWUpIHtcclxuICAgIC8vIGl0IGlzIGFuIG9ic2VydmFibGUgYWxyZWFkeSwgZG9uZVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZSh2KSlcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIC8vIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBjb252ZXJ0ZWQgYW5kIG11dGF0ZWQ/XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSlcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5hcnJheSh2LCB7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdCh2KSlcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgdW5kZWZpbmVkLCB7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICBpZiAoaXNFUzZNYXAodikpXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUubWFwKHYsIHsgbmFtZTogbmFtZSB9KTtcclxuICAgIGlmIChpc0VTNlNldCh2KSlcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zZXQodiwgeyBuYW1lOiBuYW1lIH0pO1xyXG4gICAgcmV0dXJuIHY7XHJcbn1cclxuZnVuY3Rpb24gc2hhbGxvd0VuaGFuY2VyKHYsIF8sIG5hbWUpIHtcclxuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodikgfHwgaXNPYnNlcnZhYmxlQXJyYXkodikgfHwgaXNPYnNlcnZhYmxlTWFwKHYpIHx8IGlzT2JzZXJ2YWJsZVNldCh2KSlcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKVxyXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLmFycmF5KHYsIHsgbmFtZTogbmFtZSwgZGVlcDogZmFsc2UgfSk7XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdCh2KSlcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgdW5kZWZpbmVkLCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xyXG4gICAgaWYgKGlzRVM2TWFwKHYpKVxyXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xyXG4gICAgaWYgKGlzRVM2U2V0KHYpKVxyXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnNldCh2LCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xyXG4gICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgXCJUaGUgc2hhbGxvdyBtb2RpZmllciAvIGRlY29yYXRvciBjYW4gb25seSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYXJyYXlzLCBvYmplY3RzLCBtYXBzIGFuZCBzZXRzXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHJlZmVyZW5jZUVuaGFuY2VyKG5ld1ZhbHVlKSB7XHJcbiAgICAvLyBuZXZlciB0dXJuIGludG8gYW4gb2JzZXJ2YWJsZVxyXG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIHJlZlN0cnVjdEVuaGFuY2VyKHYsIG9sZFZhbHVlLCBuYW1lKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGlzT2JzZXJ2YWJsZSh2KSlcclxuICAgICAgICB0aHJvdyBcIm9ic2VydmFibGUuc3RydWN0IHNob3VsZCBub3QgYmUgdXNlZCB3aXRoIG9ic2VydmFibGUgdmFsdWVzXCI7XHJcbiAgICBpZiAoZGVlcEVxdWFsKHYsIG9sZFZhbHVlKSlcclxuICAgICAgICByZXR1cm4gb2xkVmFsdWU7XHJcbiAgICByZXR1cm4gdjtcclxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlcihlbmhhbmNlcikge1xyXG4gICAgaW52YXJpYW50KGVuaGFuY2VyKTtcclxuICAgIHZhciBkZWNvcmF0b3IgPSBjcmVhdGVQcm9wRGVjb3JhdG9yKHRydWUsIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvciwgX2RlY29yYXRvclRhcmdldCwgZGVjb3JhdG9yQXJncykge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgaW52YXJpYW50KCFkZXNjcmlwdG9yIHx8ICFkZXNjcmlwdG9yLmdldCwgXCJAb2JzZXJ2YWJsZSBjYW5ub3QgYmUgdXNlZCBvbiBnZXR0ZXIgKHByb3BlcnR5IFxcXCJcIiArIHN0cmluZ2lmeUtleShwcm9wZXJ0eU5hbWUpICsgXCJcXFwiKSwgdXNlIEBjb21wdXRlZCBpbnN0ZWFkLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGRlc2NyaXB0b3JcclxuICAgICAgICAgICAgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyXHJcbiAgICAgICAgICAgICAgICA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbCh0YXJnZXQpXHJcbiAgICAgICAgICAgICAgICA6IGRlc2NyaXB0b3IudmFsdWVcclxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCkuYWRkT2JzZXJ2YWJsZVByb3AocHJvcGVydHlOYW1lLCBpbml0aWFsVmFsdWUsIGVuaGFuY2VyKTtcclxuICAgIH0pO1xyXG4gICAgdmFyIHJlcyA9IFxyXG4gICAgLy8gRXh0cmEgcHJvY2VzcyBjaGVja3MsIGFzIHRoaXMgaGFwcGVucyBkdXJpbmcgbW9kdWxlIGluaXRpYWxpemF0aW9uXHJcbiAgICB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCJcclxuICAgICAgICA/IGZ1bmN0aW9uIG9ic2VydmFibGVEZWNvcmF0b3IoKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgd3JhcHBlciBmdW5jdGlvbiBpcyBqdXN0IHRvIGRldGVjdCBpbGxlZ2FsIGRlY29yYXRvciBpbnZvY2F0aW9ucywgZGVwcmVjYXRlIGluIGEgbmV4dCB2ZXJzaW9uXHJcbiAgICAgICAgICAgIC8vIGFuZCBzaW1wbHkgcmV0dXJuIHRoZSBjcmVhdGVkIHByb3AgZGVjb3JhdG9yXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMilcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKFwiSW5jb3JyZWN0IGRlY29yYXRvciBpbnZvY2F0aW9uLiBAb2JzZXJ2YWJsZSBkZWNvcmF0b3IgZG9lc24ndCBleHBlY3QgYW55IGFyZ3VtZW50c1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlY29yYXRvci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICA6IGRlY29yYXRvcjtcclxuICAgIHJlcy5lbmhhbmNlciA9IGVuaGFuY2VyO1xyXG4gICAgcmV0dXJuIHJlcztcclxufVxuXG4vLyBQcmVkZWZpbmVkIGJhZ3Mgb2YgY3JlYXRlIG9ic2VydmFibGUgb3B0aW9ucywgdG8gYXZvaWQgYWxsb2NhdGluZyB0ZW1wb3JhcmlseSBvcHRpb24gb2JqZWN0c1xyXG4vLyBpbiB0aGUgbWFqb3JpdHkgb2YgY2FzZXNcclxudmFyIGRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyA9IHtcclxuICAgIGRlZXA6IHRydWUsXHJcbiAgICBuYW1lOiB1bmRlZmluZWQsXHJcbiAgICBkZWZhdWx0RGVjb3JhdG9yOiB1bmRlZmluZWQsXHJcbiAgICBwcm94eTogdHJ1ZVxyXG59O1xyXG5PYmplY3QuZnJlZXplKGRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyk7XHJcbmZ1bmN0aW9uIGFzc2VydFZhbGlkT3B0aW9uKGtleSkge1xyXG4gICAgaWYgKCEvXihkZWVwfG5hbWV8ZXF1YWxzfGRlZmF1bHREZWNvcmF0b3J8cHJveHkpJC8udGVzdChrZXkpKVxyXG4gICAgICAgIGZhaWwoXCJpbnZhbGlkIG9wdGlvbiBmb3IgKGV4dGVuZClvYnNlcnZhYmxlOiBcIiArIGtleSk7XHJcbn1cclxuZnVuY3Rpb24gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyh0aGluZykge1xyXG4gICAgaWYgKHRoaW5nID09PSBudWxsIHx8IHRoaW5nID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucztcclxuICAgIGlmICh0eXBlb2YgdGhpbmcgPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgcmV0dXJuIHsgbmFtZTogdGhpbmcsIGRlZXA6IHRydWUsIHByb3h5OiB0cnVlIH07XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGluZyAhPT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoXCJleHBlY3RlZCBvcHRpb25zIG9iamVjdFwiKTtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGluZykuZm9yRWFjaChhc3NlcnRWYWxpZE9wdGlvbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpbmc7XHJcbn1cclxudmFyIGRlZXBEZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlcihkZWVwRW5oYW5jZXIpO1xyXG52YXIgc2hhbGxvd0RlY29yYXRvciA9IGNyZWF0ZURlY29yYXRvckZvckVuaGFuY2VyKHNoYWxsb3dFbmhhbmNlcik7XHJcbnZhciByZWZEZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlcihyZWZlcmVuY2VFbmhhbmNlcik7XHJcbnZhciByZWZTdHJ1Y3REZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlcihyZWZTdHJ1Y3RFbmhhbmNlcik7XHJcbmZ1bmN0aW9uIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG9wdGlvbnMuZGVmYXVsdERlY29yYXRvclxyXG4gICAgICAgID8gb3B0aW9ucy5kZWZhdWx0RGVjb3JhdG9yLmVuaGFuY2VyXHJcbiAgICAgICAgOiBvcHRpb25zLmRlZXAgPT09IGZhbHNlXHJcbiAgICAgICAgICAgID8gcmVmZXJlbmNlRW5oYW5jZXJcclxuICAgICAgICAgICAgOiBkZWVwRW5oYW5jZXI7XHJcbn1cclxuLyoqXHJcbiAqIFR1cm5zIGFuIG9iamVjdCwgYXJyYXkgb3IgZnVuY3Rpb24gaW50byBhIHJlYWN0aXZlIHN0cnVjdHVyZS5cclxuICogQHBhcmFtIHYgdGhlIHZhbHVlIHdoaWNoIHNob3VsZCBiZWNvbWUgb2JzZXJ2YWJsZS5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGUodiwgYXJnMiwgYXJnMykge1xyXG4gICAgLy8gQG9ic2VydmFibGUgc29tZVByb3A7XHJcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgYXJndW1lbnRzWzFdID09PSBcInN5bWJvbFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlZXBEZWNvcmF0b3IuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICAgIC8vIGl0IGlzIGFuIG9ic2VydmFibGUgYWxyZWFkeSwgZG9uZVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZSh2KSlcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIC8vIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBjb252ZXJ0ZWQgYW5kIG11dGF0ZWQ/XHJcbiAgICB2YXIgcmVzID0gaXNQbGFpbk9iamVjdCh2KVxyXG4gICAgICAgID8gb2JzZXJ2YWJsZS5vYmplY3QodiwgYXJnMiwgYXJnMylcclxuICAgICAgICA6IEFycmF5LmlzQXJyYXkodilcclxuICAgICAgICAgICAgPyBvYnNlcnZhYmxlLmFycmF5KHYsIGFyZzIpXHJcbiAgICAgICAgICAgIDogaXNFUzZNYXAodilcclxuICAgICAgICAgICAgICAgID8gb2JzZXJ2YWJsZS5tYXAodiwgYXJnMilcclxuICAgICAgICAgICAgICAgIDogaXNFUzZTZXQodilcclxuICAgICAgICAgICAgICAgICAgICA/IG9ic2VydmFibGUuc2V0KHYsIGFyZzIpXHJcbiAgICAgICAgICAgICAgICAgICAgOiB2O1xyXG4gICAgLy8gdGhpcyB2YWx1ZSBjb3VsZCBiZSBjb252ZXJ0ZWQgdG8gYSBuZXcgb2JzZXJ2YWJsZSBkYXRhIHN0cnVjdHVyZSwgcmV0dXJuIGl0XHJcbiAgICBpZiAocmVzICE9PSB2KVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAvLyBvdGhlcndpc2UsIGp1c3QgYm94IGl0XHJcbiAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgIFwiVGhlIHByb3ZpZGVkIHZhbHVlIGNvdWxkIG5vdCBiZSBjb252ZXJ0ZWQgaW50byBhbiBvYnNlcnZhYmxlLiBJZiB5b3Ugd2FudCBqdXN0IGNyZWF0ZSBhbiBvYnNlcnZhYmxlIHJlZmVyZW5jZSB0byB0aGUgb2JqZWN0IHVzZSAnb2JzZXJ2YWJsZS5ib3godmFsdWUpJ1wiKTtcclxufVxyXG52YXIgb2JzZXJ2YWJsZUZhY3RvcmllcyA9IHtcclxuICAgIGJveDogZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKVxyXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcImJveFwiKTtcclxuICAgICAgICB2YXIgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlVmFsdWUodmFsdWUsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSwgdHJ1ZSwgby5lcXVhbHMpO1xyXG4gICAgfSxcclxuICAgIGFycmF5OiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlcywgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMilcclxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJhcnJheVwiKTtcclxuICAgICAgICB2YXIgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU9ic2VydmFibGVBcnJheShpbml0aWFsVmFsdWVzLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUpO1xyXG4gICAgfSxcclxuICAgIG1hcDogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZXMsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpXHJcbiAgICAgICAgICAgIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKFwibWFwXCIpO1xyXG4gICAgICAgIHZhciBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVNYXAoaW5pdGlhbFZhbHVlcywgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lKTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWVzLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKVxyXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcInNldFwiKTtcclxuICAgICAgICB2YXIgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlU2V0KGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSk7XHJcbiAgICB9LFxyXG4gICAgb2JqZWN0OiBmdW5jdGlvbiAocHJvcHMsIGRlY29yYXRvcnMsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJvYmplY3RcIik7XHJcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIGlmIChvLnByb3h5ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5kT2JzZXJ2YWJsZSh7fSwgcHJvcHMsIGRlY29yYXRvcnMsIG8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGRlZmF1bHREZWNvcmF0b3IgPSBnZXREZWZhdWx0RGVjb3JhdG9yRnJvbU9iamVjdE9wdGlvbnMobyk7XHJcbiAgICAgICAgICAgIHZhciBiYXNlID0gZXh0ZW5kT2JzZXJ2YWJsZSh7fSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG8pO1xyXG4gICAgICAgICAgICB2YXIgcHJveHkgPSBjcmVhdGVEeW5hbWljT2JzZXJ2YWJsZU9iamVjdChiYXNlKTtcclxuICAgICAgICAgICAgZXh0ZW5kT2JzZXJ2YWJsZU9iamVjdFdpdGhQcm9wZXJ0aWVzKHByb3h5LCBwcm9wcywgZGVjb3JhdG9ycywgZGVmYXVsdERlY29yYXRvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm94eTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVmOiByZWZEZWNvcmF0b3IsXHJcbiAgICBzaGFsbG93OiBzaGFsbG93RGVjb3JhdG9yLFxyXG4gICAgZGVlcDogZGVlcERlY29yYXRvcixcclxuICAgIHN0cnVjdDogcmVmU3RydWN0RGVjb3JhdG9yXHJcbn07XHJcbnZhciBvYnNlcnZhYmxlID0gY3JlYXRlT2JzZXJ2YWJsZTtcclxuLy8gd2VpcmQgdHJpY2sgdG8ga2VlcCBvdXIgdHlwaW5ncyBuaWNlbHkgd2l0aCBvdXIgZnVuY3MsIGFuZCBzdGlsbCBleHRlbmQgdGhlIG9ic2VydmFibGUgZnVuY3Rpb25cclxuT2JqZWN0LmtleXMob2JzZXJ2YWJsZUZhY3RvcmllcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gKG9ic2VydmFibGVbbmFtZV0gPSBvYnNlcnZhYmxlRmFjdG9yaWVzW25hbWVdKTsgfSk7XHJcbmZ1bmN0aW9uIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKG1ldGhvZE5hbWUpIHtcclxuICAgIGZhaWwoXHJcbiAgICAvLyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgIFwiRXhwZWN0ZWQgb25lIG9yIHR3byBhcmd1bWVudHMgdG8gb2JzZXJ2YWJsZS5cIiArIG1ldGhvZE5hbWUgKyBcIi4gRGlkIHlvdSBhY2NpZGVudGFsbHkgdHJ5IHRvIHVzZSBvYnNlcnZhYmxlLlwiICsgbWV0aG9kTmFtZSArIFwiIGFzIGRlY29yYXRvcj9cIik7XHJcbn1cblxudmFyIGNvbXB1dGVkRGVjb3JhdG9yID0gY3JlYXRlUHJvcERlY29yYXRvcihmYWxzZSwgZnVuY3Rpb24gKGluc3RhbmNlLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IsIGRlY29yYXRvclRhcmdldCwgZGVjb3JhdG9yQXJncykge1xyXG4gICAgdmFyIGdldCA9IGRlc2NyaXB0b3IuZ2V0LCBzZXQgPSBkZXNjcmlwdG9yLnNldDsgLy8gaW5pdGlhbFZhbHVlIGlzIHRoZSBkZXNjcmlwdG9yIGZvciBnZXQgLyBzZXQgcHJvcHNcclxuICAgIC8vIE9wdGltaXphdGlvbjogZmFzdGVyIG9uIGRlY29yYXRvciB0YXJnZXQgb3IgaW5zdGFuY2U/IEFzc3VtaW5nIHRhcmdldFxyXG4gICAgLy8gT3B0aW1pemF0aW9uOiBmaW5kIG91dCBpZiBkZWNsYXJpbmcgb24gaW5zdGFuY2UgaXNuJ3QganVzdCBmYXN0ZXIuIChhbHNvIG1ha2VzIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHNpbXBsZXIpLiBCdXQsIG1vcmUgbWVtb3J5IHVzYWdlLi5cclxuICAgIC8vIEZvcmNpbmcgaW5zdGFuY2Ugbm93LCBmaXhlcyBob3QgcmVsb2FkaWcgaXNzdWVzIG9uIFJlYWN0IE5hdGl2ZTpcclxuICAgIHZhciBvcHRpb25zID0gZGVjb3JhdG9yQXJnc1swXSB8fCB7fTtcclxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdChpbnN0YW5jZSkuYWRkQ29tcHV0ZWRQcm9wKGluc3RhbmNlLCBwcm9wZXJ0eU5hbWUsIF9fYXNzaWduKHsgZ2V0OiBnZXQsXHJcbiAgICAgICAgc2V0OiBzZXQsIGNvbnRleHQ6IGluc3RhbmNlIH0sIG9wdGlvbnMpKTtcclxufSk7XHJcbnZhciBjb21wdXRlZFN0cnVjdERlY29yYXRvciA9IGNvbXB1dGVkRGVjb3JhdG9yKHsgZXF1YWxzOiBjb21wYXJlci5zdHJ1Y3R1cmFsIH0pO1xyXG4vKipcclxuICogRGVjb3JhdG9yIGZvciBjbGFzcyBwcm9wZXJ0aWVzOiBAY29tcHV0ZWQgZ2V0IHZhbHVlKCkgeyByZXR1cm4gZXhwcjsgfS5cclxuICogRm9yIGxlZ2FjeSBwdXJwb3NlcyBhbHNvIGludm9rYWJsZSBhcyBFUzUgb2JzZXJ2YWJsZSBjcmVhdGVkOiBgY29tcHV0ZWQoKCkgPT4gZXhwcilgO1xyXG4gKi9cclxudmFyIGNvbXB1dGVkID0gZnVuY3Rpb24gY29tcHV0ZWQoYXJnMSwgYXJnMiwgYXJnMykge1xyXG4gICAgaWYgKHR5cGVvZiBhcmcyID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgLy8gQGNvbXB1dGVkXHJcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkRGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJnMSAhPT0gbnVsbCAmJiB0eXBlb2YgYXJnMSA9PT0gXCJvYmplY3RcIiAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgLy8gQGNvbXB1dGVkKHsgb3B0aW9ucyB9KVxyXG4gICAgICAgIHJldHVybiBjb21wdXRlZERlY29yYXRvci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgLy8gY29tcHV0ZWQoZXhwciwgb3B0aW9ucz8pXHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBhcmcxID09PSBcImZ1bmN0aW9uXCIsIFwiRmlyc3QgYXJndW1lbnQgdG8gYGNvbXB1dGVkYCBzaG91bGQgYmUgYW4gZXhwcmVzc2lvbi5cIik7XHJcbiAgICAgICAgaW52YXJpYW50KGFyZ3VtZW50cy5sZW5ndGggPCAzLCBcIkNvbXB1dGVkIHRha2VzIG9uZSBvciB0d28gYXJndW1lbnRzIGlmIHVzZWQgYXMgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICB2YXIgb3B0cyA9IHR5cGVvZiBhcmcyID09PSBcIm9iamVjdFwiID8gYXJnMiA6IHt9O1xyXG4gICAgb3B0cy5nZXQgPSBhcmcxO1xyXG4gICAgb3B0cy5zZXQgPSB0eXBlb2YgYXJnMiA9PT0gXCJmdW5jdGlvblwiID8gYXJnMiA6IG9wdHMuc2V0O1xyXG4gICAgb3B0cy5uYW1lID0gb3B0cy5uYW1lIHx8IGFyZzEubmFtZSB8fCBcIlwiOyAvKiBmb3IgZ2VuZXJhdGVkIG5hbWUgKi9cclxuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRzKTtcclxufTtcclxuY29tcHV0ZWQuc3RydWN0ID0gY29tcHV0ZWRTdHJ1Y3REZWNvcmF0b3I7XG5cbnZhciBJRGVyaXZhdGlvblN0YXRlO1xyXG4oZnVuY3Rpb24gKElEZXJpdmF0aW9uU3RhdGUpIHtcclxuICAgIC8vIGJlZm9yZSBiZWluZyBydW4gb3IgKG91dHNpZGUgYmF0Y2ggYW5kIG5vdCBiZWluZyBvYnNlcnZlZClcclxuICAgIC8vIGF0IHRoaXMgcG9pbnQgZGVyaXZhdGlvbiBpcyBub3QgaG9sZGluZyBhbnkgZGF0YSBhYm91dCBkZXBlbmRlbmN5IHRyZWVcclxuICAgIElEZXJpdmF0aW9uU3RhdGVbSURlcml2YXRpb25TdGF0ZVtcIk5PVF9UUkFDS0lOR1wiXSA9IC0xXSA9IFwiTk9UX1RSQUNLSU5HXCI7XHJcbiAgICAvLyBubyBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZCBzaW5jZSBsYXN0IGNvbXB1dGF0aW9uXHJcbiAgICAvLyB3b24ndCByZWNhbGN1bGF0ZSBkZXJpdmF0aW9uXHJcbiAgICAvLyB0aGlzIGlzIHdoYXQgbWFrZXMgbW9ieCBmYXN0XHJcbiAgICBJRGVyaXZhdGlvblN0YXRlW0lEZXJpdmF0aW9uU3RhdGVbXCJVUF9UT19EQVRFXCJdID0gMF0gPSBcIlVQX1RPX0RBVEVcIjtcclxuICAgIC8vIHNvbWUgZGVlcCBkZXBlbmRlbmN5IGNoYW5nZWQsIGJ1dCBkb24ndCBrbm93IGlmIHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkXHJcbiAgICAvLyB3aWxsIHJlcXVpcmUgdG8gY2hlY2sgZmlyc3QgaWYgVVBfVE9fREFURSBvciBQT1NTSUJMWV9TVEFMRVxyXG4gICAgLy8gY3VycmVudGx5IG9ubHkgQ29tcHV0ZWRWYWx1ZSB3aWxsIHByb3BhZ2F0ZSBQT1NTSUJMWV9TVEFMRVxyXG4gICAgLy9cclxuICAgIC8vIGhhdmluZyB0aGlzIHN0YXRlIGlzIHNlY29uZCBiaWcgb3B0aW1pemF0aW9uOlxyXG4gICAgLy8gZG9uJ3QgaGF2ZSB0byByZWNvbXB1dGUgb24gZXZlcnkgZGVwZW5kZW5jeSBjaGFuZ2UsIGJ1dCBvbmx5IHdoZW4gaXQncyBuZWVkZWRcclxuICAgIElEZXJpdmF0aW9uU3RhdGVbSURlcml2YXRpb25TdGF0ZVtcIlBPU1NJQkxZX1NUQUxFXCJdID0gMV0gPSBcIlBPU1NJQkxZX1NUQUxFXCI7XHJcbiAgICAvLyBBIHNoYWxsb3cgZGVwZW5kZW5jeSBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0IGNvbXB1dGF0aW9uIGFuZCB0aGUgZGVyaXZhdGlvblxyXG4gICAgLy8gd2lsbCBuZWVkIHRvIHJlY29tcHV0ZSB3aGVuIGl0J3MgbmVlZGVkIG5leHQuXHJcbiAgICBJRGVyaXZhdGlvblN0YXRlW0lEZXJpdmF0aW9uU3RhdGVbXCJTVEFMRVwiXSA9IDJdID0gXCJTVEFMRVwiO1xyXG59KShJRGVyaXZhdGlvblN0YXRlIHx8IChJRGVyaXZhdGlvblN0YXRlID0ge30pKTtcclxudmFyIFRyYWNlTW9kZTtcclxuKGZ1bmN0aW9uIChUcmFjZU1vZGUpIHtcclxuICAgIFRyYWNlTW9kZVtUcmFjZU1vZGVbXCJOT05FXCJdID0gMF0gPSBcIk5PTkVcIjtcclxuICAgIFRyYWNlTW9kZVtUcmFjZU1vZGVbXCJMT0dcIl0gPSAxXSA9IFwiTE9HXCI7XHJcbiAgICBUcmFjZU1vZGVbVHJhY2VNb2RlW1wiQlJFQUtcIl0gPSAyXSA9IFwiQlJFQUtcIjtcclxufSkoVHJhY2VNb2RlIHx8IChUcmFjZU1vZGUgPSB7fSkpO1xyXG52YXIgQ2F1Z2h0RXhjZXB0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2F1Z2h0RXhjZXB0aW9uKGNhdXNlKSB7XHJcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xyXG4gICAgICAgIC8vIEVtcHR5XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQ2F1Z2h0RXhjZXB0aW9uO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBpc0NhdWdodEV4Y2VwdGlvbihlKSB7XHJcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENhdWdodEV4Y2VwdGlvbjtcclxufVxyXG4vKipcclxuICogRmluZHMgb3V0IHdoZXRoZXIgYW55IGRlcGVuZGVuY3kgb2YgdGhlIGRlcml2YXRpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXHJcbiAqIElmIGRlcGVuZGVuY2llc1N0YXRlIGlzIDEgdGhlbiBpdCB3aWxsIHJlY2FsY3VsYXRlIGRlcGVuZGVuY2llcyxcclxuICogaWYgYW55IGRlcGVuZGVuY3kgY2hhbmdlZCBpdCB3aWxsIHByb3BhZ2F0ZSBpdCBieSBjaGFuZ2luZyBkZXBlbmRlbmNpZXNTdGF0ZSB0byAyLlxyXG4gKlxyXG4gKiBCeSBpdGVyYXRpbmcgb3ZlciB0aGUgZGVwZW5kZW5jaWVzIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhleSB3ZXJlIHJlcG9ydGVkIGFuZFxyXG4gKiBzdG9wcGluZyBvbiB0aGUgZmlyc3QgY2hhbmdlLCBhbGwgdGhlIHJlY2FsY3VsYXRpb25zIGFyZSBvbmx5IGNhbGxlZCBmb3IgQ29tcHV0ZWRWYWx1ZXNcclxuICogdGhhdCB3aWxsIGJlIHRyYWNrZWQgYnkgZGVyaXZhdGlvbi4gVGhhdCBpcyBiZWNhdXNlIHdlIGFzc3VtZSB0aGF0IGlmIHRoZSBmaXJzdCB4XHJcbiAqIGRlcGVuZGVuY2llcyBvZiB0aGUgZGVyaXZhdGlvbiBkb2Vzbid0IGNoYW5nZSB0aGVuIHRoZSBkZXJpdmF0aW9uIHNob3VsZCBydW4gdGhlIHNhbWUgd2F5XHJcbiAqIHVwIHVudGlsIGFjY2Vzc2luZyB4LXRoIGRlcGVuZGVuY3kuXHJcbiAqL1xyXG5mdW5jdGlvbiBzaG91bGRDb21wdXRlKGRlcml2YXRpb24pIHtcclxuICAgIHN3aXRjaCAoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSkge1xyXG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFOlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORzpcclxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGUuU1RBTEU6XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZS5QT1NTSUJMWV9TVEFMRToge1xyXG4gICAgICAgICAgICAvLyBzdGF0ZSBwcm9wYWdhdGlvbiBjYW4gb2NjdXIgb3V0c2lkZSBvZiBhY3Rpb24vcmVhY3RpdmUgY29udGV4dCAjMjE5NVxyXG4gICAgICAgICAgICB2YXIgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpO1xyXG4gICAgICAgICAgICB2YXIgcHJldlVudHJhY2tlZCA9IHVudHJhY2tlZFN0YXJ0KCk7IC8vIG5vIG5lZWQgZm9yIHRob3NlIGNvbXB1dGVkcyB0byBiZSByZXBvcnRlZCwgdGhleSB3aWxsIGJlIHBpY2tlZCB1cCBpbiB0cmFja0Rlcml2ZWRGdW5jdGlvbi5cclxuICAgICAgICAgICAgdmFyIG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nLCBsID0gb2JzLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSBvYnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wdXRlZFZhbHVlKG9iaikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgbm90IGludGVyZXN0ZWQgaW4gdGhlIHZhbHVlICpvciogZXhjZXB0aW9uIGF0IHRoaXMgbW9tZW50LCBidXQgaWYgdGhlcmUgaXMgb25lLCBub3RpZnkgYWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBDb21wdXRlZFZhbHVlIGBvYmpgIGFjdHVhbGx5IGNoYW5nZWQgaXQgd2lsbCBiZSBjb21wdXRlZCBhbmQgcHJvcGFnYXRlZCB0byBpdHMgb2JzZXJ2ZXJzLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBgZGVyaXZhdGlvbmAgaXMgYW4gb2JzZXJ2ZXIgb2YgYG9iamBcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnZhcmlhbnRTaG91bGRDb21wdXRlKGRlcml2YXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuU1RBTEUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uKTtcclxuICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpO1xyXG4gICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLy8gZnVuY3Rpb24gaW52YXJpYW50U2hvdWxkQ29tcHV0ZShkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikge1xyXG4vLyAgICAgY29uc3QgbmV3RGVwU3RhdGUgPSAoZGVyaXZhdGlvbiBhcyBhbnkpLmRlcGVuZGVuY2llc1N0YXRlXHJcbi8vICAgICBpZiAoXHJcbi8vICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiICYmXHJcbi8vICAgICAgICAgKG5ld0RlcFN0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFIHx8XHJcbi8vICAgICAgICAgICAgIG5ld0RlcFN0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORylcclxuLy8gICAgIClcclxuLy8gICAgICAgICBmYWlsKFwiSWxsZWdhbCBkZXBlbmRlbmN5IHN0YXRlXCIpXHJcbi8vIH1cclxuZnVuY3Rpb24gaXNDb21wdXRpbmdEZXJpdmF0aW9uKCkge1xyXG4gICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiAhPT0gbnVsbDsgLy8gZmlsdGVyIG91dCBhY3Rpb25zIGluc2lkZSBjb21wdXRhdGlvbnNcclxufVxyXG5mdW5jdGlvbiBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZChhdG9tKSB7XHJcbiAgICB2YXIgaGFzT2JzZXJ2ZXJzID0gYXRvbS5vYnNlcnZlcnMuc2l6ZSA+IDA7XHJcbiAgICAvLyBTaG91bGQgbmV2ZXIgYmUgcG9zc2libGUgdG8gY2hhbmdlIGFuIG9ic2VydmVkIG9ic2VydmFibGUgZnJvbSBpbnNpZGUgY29tcHV0ZWQsIHNlZSAjNzk4XHJcbiAgICBpZiAoZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aCA+IDAgJiYgaGFzT2JzZXJ2ZXJzKVxyXG4gICAgICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIFwiQ29tcHV0ZWQgdmFsdWVzIGFyZSBub3QgYWxsb3dlZCB0byBjYXVzZSBzaWRlIGVmZmVjdHMgYnkgY2hhbmdpbmcgb2JzZXJ2YWJsZXMgdGhhdCBhcmUgYWxyZWFkeSBiZWluZyBvYnNlcnZlZC4gVHJpZWQgdG8gbW9kaWZ5OiBcIiArIGF0b20ubmFtZSk7XHJcbiAgICAvLyBTaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIGNoYW5nZSBvYnNlcnZlZCBzdGF0ZSBvdXRzaWRlIHN0cmljdCBtb2RlLCBleGNlcHQgZHVyaW5nIGluaXRpYWxpemF0aW9uLCBzZWUgIzU2M1xyXG4gICAgaWYgKCFnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyAmJiAoaGFzT2JzZXJ2ZXJzIHx8IGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID09PSBcInN0cmljdFwiKSlcclxuICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAoZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnNcclxuICAgICAgICAgICAgICAgID8gXCJTaW5jZSBzdHJpY3QtbW9kZSBpcyBlbmFibGVkLCBjaGFuZ2luZyBvYnNlcnZlZCBvYnNlcnZhYmxlIHZhbHVlcyBvdXRzaWRlIGFjdGlvbnMgaXMgbm90IGFsbG93ZWQuIFBsZWFzZSB3cmFwIHRoZSBjb2RlIGluIGFuIGBhY3Rpb25gIGlmIHRoaXMgY2hhbmdlIGlzIGludGVuZGVkLiBUcmllZCB0byBtb2RpZnk6IFwiXHJcbiAgICAgICAgICAgICAgICA6IFwiU2lkZSBlZmZlY3RzIGxpa2UgY2hhbmdpbmcgc3RhdGUgYXJlIG5vdCBhbGxvd2VkIGF0IHRoaXMgcG9pbnQuIEFyZSB5b3UgdHJ5aW5nIHRvIG1vZGlmeSBzdGF0ZSBmcm9tLCBmb3IgZXhhbXBsZSwgdGhlIHJlbmRlciBmdW5jdGlvbiBvZiBhIFJlYWN0IGNvbXBvbmVudD8gVHJpZWQgdG8gbW9kaWZ5OiBcIikgK1xyXG4gICAgICAgICAgICAgICAgYXRvbS5uYW1lKTtcclxufVxyXG5mdW5jdGlvbiBjaGVja0lmU3RhdGVSZWFkc0FyZUFsbG93ZWQob2JzZXJ2YWJsZSkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICFnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgJiZcclxuICAgICAgICBnbG9iYWxTdGF0ZS5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4XSBPYnNlcnZhYmxlIFwiICsgb2JzZXJ2YWJsZS5uYW1lICsgXCIgYmVpbmcgcmVhZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFwiKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGBmYCBhbmQgdHJhY2tzIHdoaWNoIG9ic2VydmFibGVzIGFyZSBiZWluZyBhY2Nlc3NlZC5cclxuICogVGhlIHRyYWNraW5nIGluZm9ybWF0aW9uIGlzIHN0b3JlZCBvbiB0aGUgYGRlcml2YXRpb25gIG9iamVjdCBhbmQgdGhlIGRlcml2YXRpb24gaXMgcmVnaXN0ZXJlZFxyXG4gKiBhcyBvYnNlcnZlciBvZiBhbnkgb2YgdGhlIGFjY2Vzc2VkIG9ic2VydmFibGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJhY2tEZXJpdmVkRnVuY3Rpb24oZGVyaXZhdGlvbiwgZiwgY29udGV4dCkge1xyXG4gICAgdmFyIHByZXZBbGxvd1N0YXRlUmVhZHMgPSBhbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKTtcclxuICAgIC8vIHByZSBhbGxvY2F0ZSBhcnJheSBhbGxvY2F0aW9uICsgcm9vbSBmb3IgdmFyaWF0aW9uIGluIGRlcHNcclxuICAgIC8vIGFycmF5IHdpbGwgYmUgdHJpbW1lZCBieSBiaW5kRGVwZW5kZW5jaWVzXHJcbiAgICBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uKTtcclxuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nID0gbmV3IEFycmF5KGRlcml2YXRpb24ub2JzZXJ2aW5nLmxlbmd0aCArIDEwMCk7XHJcbiAgICBkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnQgPSAwO1xyXG4gICAgZGVyaXZhdGlvbi5ydW5JZCA9ICsrZ2xvYmFsU3RhdGUucnVuSWQ7XHJcbiAgICB2YXIgcHJldlRyYWNraW5nID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xyXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gZGVyaXZhdGlvbjtcclxuICAgIHZhciByZXN1bHQ7XHJcbiAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGYuY2FsbChjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGYuY2FsbChjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IENhdWdodEV4Y2VwdGlvbihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBwcmV2VHJhY2tpbmc7XHJcbiAgICBiaW5kRGVwZW5kZW5jaWVzKGRlcml2YXRpb24pO1xyXG4gICAgd2FybkFib3V0RGVyaXZhdGlvbldpdGhvdXREZXBlbmRlbmNpZXMoZGVyaXZhdGlvbik7XHJcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcyk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIHdhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzKGRlcml2YXRpb24pIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKGRlcml2YXRpb24ub2JzZXJ2aW5nLmxlbmd0aCAhPT0gMClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAoZ2xvYmFsU3RhdGUucmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUgfHwgZGVyaXZhdGlvbi5yZXF1aXJlc09ic2VydmFibGUpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0gRGVyaXZhdGlvbiBcIiArIGRlcml2YXRpb24ubmFtZSArIFwiIGlzIGNyZWF0ZWQvdXBkYXRlZCB3aXRob3V0IHJlYWRpbmcgYW55IG9ic2VydmFibGUgdmFsdWVcIik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIGRpZmZzIG5ld09ic2VydmluZyB3aXRoIG9ic2VydmluZy5cclxuICogdXBkYXRlIG9ic2VydmluZyB0byBiZSBuZXdPYnNlcnZpbmcgd2l0aCB1bmlxdWUgb2JzZXJ2YWJsZXNcclxuICogbm90aWZ5IG9ic2VydmVycyB0aGF0IGJlY29tZSBvYnNlcnZlZC91bm9ic2VydmVkXHJcbiAqL1xyXG5mdW5jdGlvbiBiaW5kRGVwZW5kZW5jaWVzKGRlcml2YXRpb24pIHtcclxuICAgIC8vIGludmFyaWFudChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlICE9PSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORywgXCJJTlRFUk5BTCBFUlJPUiBiaW5kRGVwZW5kZW5jaWVzIGV4cGVjdHMgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSAhPT0gLTFcIik7XHJcbiAgICB2YXIgcHJldk9ic2VydmluZyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nO1xyXG4gICAgdmFyIG9ic2VydmluZyA9IChkZXJpdmF0aW9uLm9ic2VydmluZyA9IGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nKTtcclxuICAgIHZhciBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEU7XHJcbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBuZXcgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKHRoaXMgbGlzdCBjYW4gY29udGFpbiBkdXBsaWNhdGVzKTpcclxuICAgIC8vICAgMDogZmlyc3Qgb2NjdXJyZW5jZSwgY2hhbmdlIHRvIDEgYW5kIGtlZXAgaXRcclxuICAgIC8vICAgMTogZXh0cmEgb2NjdXJyZW5jZSwgZHJvcCBpdFxyXG4gICAgdmFyIGkwID0gMCwgbCA9IGRlcml2YXRpb24udW5ib3VuZERlcHNDb3VudDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGRlcCA9IG9ic2VydmluZ1tpXTtcclxuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBkZXAuZGlmZlZhbHVlID0gMTtcclxuICAgICAgICAgICAgaWYgKGkwICE9PSBpKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2aW5nW2kwXSA9IGRlcDtcclxuICAgICAgICAgICAgaTArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVXBjYXN0IGlzICdzYWZlJyBoZXJlLCBiZWNhdXNlIGlmIGRlcCBpcyBJT2JzZXJ2YWJsZSwgYGRlcGVuZGVuY2llc1N0YXRlYCB3aWxsIGJlIHVuZGVmaW5lZCxcclxuICAgICAgICAvLyBub3QgaGl0dGluZyB0aGUgY29uZGl0aW9uXHJcbiAgICAgICAgaWYgKGRlcC5kZXBlbmRlbmNpZXNTdGF0ZSA+IGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSkge1xyXG4gICAgICAgICAgICBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgPSBkZXAuZGVwZW5kZW5jaWVzU3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb2JzZXJ2aW5nLmxlbmd0aCA9IGkwO1xyXG4gICAgZGVyaXZhdGlvbi5uZXdPYnNlcnZpbmcgPSBudWxsOyAvLyBuZXdPYnNlcnZpbmcgc2hvdWxkbid0IGJlIG5lZWRlZCBvdXRzaWRlIHRyYWNraW5nIChzdGF0ZW1lbnQgbW92ZWQgZG93biB0byB3b3JrIGFyb3VuZCBGRiBidWcsIHNlZSAjNjE0KVxyXG4gICAgLy8gR28gdGhyb3VnaCBhbGwgb2xkIG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6IChpdCBpcyB1bmlxdWUgYWZ0ZXIgbGFzdCBiaW5kRGVwZW5kZW5jaWVzKVxyXG4gICAgLy8gICAwOiBpdCdzIG5vdCBpbiBuZXcgb2JzZXJ2YWJsZXMsIHVub2JzZXJ2ZSBpdFxyXG4gICAgLy8gICAxOiBpdCBrZWVwcyBiZWluZyBvYnNlcnZlZCwgZG9uJ3Qgd2FudCB0byBub3RpZnkgaXQuIGNoYW5nZSB0byAwXHJcbiAgICBsID0gcHJldk9ic2VydmluZy5sZW5ndGg7XHJcbiAgICB3aGlsZSAobC0tKSB7XHJcbiAgICAgICAgdmFyIGRlcCA9IHByZXZPYnNlcnZpbmdbbF07XHJcbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgcmVtb3ZlT2JzZXJ2ZXIoZGVwLCBkZXJpdmF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVwLmRpZmZWYWx1ZSA9IDA7XHJcbiAgICB9XHJcbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBuZXcgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKG5vdyBpdCBzaG91bGQgYmUgdW5pcXVlKVxyXG4gICAgLy8gICAwOiBpdCB3YXMgc2V0IHRvIDAgaW4gbGFzdCBsb29wLiBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nLlxyXG4gICAgLy8gICAxOiBpdCB3YXNuJ3Qgb2JzZXJ2ZWQsIGxldCdzIG9ic2VydmUgaXQuIHNldCBiYWNrIHRvIDBcclxuICAgIHdoaWxlIChpMC0tKSB7XHJcbiAgICAgICAgdmFyIGRlcCA9IG9ic2VydmluZ1tpMF07XHJcbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWUgPT09IDEpIHtcclxuICAgICAgICAgICAgZGVwLmRpZmZWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIGFkZE9ic2VydmVyKGRlcCwgZGVyaXZhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gU29tZSBuZXcgb2JzZXJ2ZWQgZGVyaXZhdGlvbnMgbWF5IGJlY29tZSBzdGFsZSBkdXJpbmcgdGhpcyBkZXJpdmF0aW9uIGNvbXB1dGF0aW9uXHJcbiAgICAvLyBzbyB0aGV5IGhhdmUgaGFkIG5vIGNoYW5jZSB0byBwcm9wYWdhdGUgc3RhbGVuZXNzICgjOTE2KVxyXG4gICAgaWYgKGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSAhPT0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFKSB7XHJcbiAgICAgICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9IGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZTtcclxuICAgICAgICBkZXJpdmF0aW9uLm9uQmVjb21lU3RhbGUoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjbGVhck9ic2VydmluZyhkZXJpdmF0aW9uKSB7XHJcbiAgICAvLyBpbnZhcmlhbnQoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAsIFwiSU5URVJOQUwgRVJST1IgY2xlYXJPYnNlcnZpbmcgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGluc2lkZSBiYXRjaFwiKTtcclxuICAgIHZhciBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZztcclxuICAgIGRlcml2YXRpb24ub2JzZXJ2aW5nID0gW107XHJcbiAgICB2YXIgaSA9IG9icy5sZW5ndGg7XHJcbiAgICB3aGlsZSAoaS0tKVxyXG4gICAgICAgIHJlbW92ZU9ic2VydmVyKG9ic1tpXSwgZGVyaXZhdGlvbik7XHJcbiAgICBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XHJcbn1cclxuZnVuY3Rpb24gdW50cmFja2VkKGFjdGlvbikge1xyXG4gICAgdmFyIHByZXYgPSB1bnRyYWNrZWRTdGFydCgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gYWN0aW9uKCk7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB1bnRyYWNrZWRFbmQocHJldik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdW50cmFja2VkU3RhcnQoKSB7XHJcbiAgICB2YXIgcHJldiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbjtcclxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IG51bGw7XHJcbiAgICByZXR1cm4gcHJldjtcclxufVxyXG5mdW5jdGlvbiB1bnRyYWNrZWRFbmQocHJldikge1xyXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gcHJldjtcclxufVxyXG5mdW5jdGlvbiBhbGxvd1N0YXRlUmVhZHNTdGFydChhbGxvd1N0YXRlUmVhZHMpIHtcclxuICAgIHZhciBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzO1xyXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzID0gYWxsb3dTdGF0ZVJlYWRzO1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbn1cclxuZnVuY3Rpb24gYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXYpIHtcclxuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9IHByZXY7XHJcbn1cclxuLyoqXHJcbiAqIG5lZWRlZCB0byBrZWVwIGBsb3dlc3RPYnNlcnZlclN0YXRlYCBjb3JyZWN0LiB3aGVuIGNoYW5naW5nIGZyb20gKDIgb3IgMSkgdG8gMFxyXG4gKlxyXG4gKi9cclxuZnVuY3Rpb24gY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAoZGVyaXZhdGlvbikge1xyXG4gICAgaWYgKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFO1xyXG4gICAgdmFyIG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nO1xyXG4gICAgdmFyIGkgPSBvYnMubGVuZ3RoO1xyXG4gICAgd2hpbGUgKGktLSlcclxuICAgICAgICBvYnNbaV0ubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcclxufVxuXG4vLyB3ZSBkb24ndCB1c2UgZ2xvYmFsU3RhdGUgZm9yIHRoZXNlIGluIG9yZGVyIHRvIGF2b2lkIHBvc3NpYmxlIGlzc3VlcyB3aXRoIG11bHRpcGxlXHJcbi8vIG1vYnggdmVyc2lvbnNcclxudmFyIGN1cnJlbnRBY3Rpb25JZCA9IDA7XHJcbnZhciBuZXh0QWN0aW9uSWQgPSAxO1xyXG52YXIgZnVuY3Rpb25OYW1lRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZnVuY3Rpb24gKCkgeyB9LCBcIm5hbWVcIik7XHJcbnZhciBpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSA9IGZ1bmN0aW9uTmFtZURlc2NyaXB0b3IgJiYgZnVuY3Rpb25OYW1lRGVzY3JpcHRvci5jb25maWd1cmFibGU7XHJcbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbihhY3Rpb25OYW1lLCBmbiwgcmVmKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiLCBcImBhY3Rpb25gIGNhbiBvbmx5IGJlIGludm9rZWQgb24gZnVuY3Rpb25zXCIpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uTmFtZSAhPT0gXCJzdHJpbmdcIiB8fCAhYWN0aW9uTmFtZSlcclxuICAgICAgICAgICAgZmFpbChcImFjdGlvbnMgc2hvdWxkIGhhdmUgdmFsaWQgbmFtZXMsIGdvdDogJ1wiICsgYWN0aW9uTmFtZSArIFwiJ1wiKTtcclxuICAgIH1cclxuICAgIHZhciByZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4sIHJlZiB8fCB0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICAgIHJlcy5pc01vYnhBY3Rpb24gPSB0cnVlO1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSkge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzLCBcIm5hbWVcIiwgeyB2YWx1ZTogYWN0aW9uTmFtZSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4sIHNjb3BlLCBhcmdzKSB7XHJcbiAgICB2YXIgcnVuSW5mbyA9IF9zdGFydEFjdGlvbihhY3Rpb25OYW1lLCBzY29wZSwgYXJncyk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBmbi5hcHBseShzY29wZSwgYXJncyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcnVuSW5mby5lcnJvciA9IGVycjtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICBfZW5kQWN0aW9uKHJ1bkluZm8pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIF9zdGFydEFjdGlvbihhY3Rpb25OYW1lLCBzY29wZSwgYXJncykge1xyXG4gICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpICYmICEhYWN0aW9uTmFtZTtcclxuICAgIHZhciBzdGFydFRpbWUgPSAwO1xyXG4gICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHZhciBsID0gKGFyZ3MgJiYgYXJncy5sZW5ndGgpIHx8IDA7XHJcbiAgICAgICAgdmFyIGZsYXR0ZW5kQXJncyA9IG5ldyBBcnJheShsKTtcclxuICAgICAgICBpZiAobCA+IDApXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgZmxhdHRlbmRBcmdzW2ldID0gYXJnc1tpXTtcclxuICAgICAgICBzcHlSZXBvcnRTdGFydCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYWN0aW9uXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IGFjdGlvbk5hbWUsXHJcbiAgICAgICAgICAgIG9iamVjdDogc2NvcGUsXHJcbiAgICAgICAgICAgIGFyZ3VtZW50czogZmxhdHRlbmRBcmdzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB2YXIgcHJldkRlcml2YXRpb24gPSB1bnRyYWNrZWRTdGFydCgpO1xyXG4gICAgc3RhcnRCYXRjaCgpO1xyXG4gICAgdmFyIHByZXZBbGxvd1N0YXRlQ2hhbmdlcyA9IGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQodHJ1ZSk7XHJcbiAgICB2YXIgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpO1xyXG4gICAgdmFyIHJ1bkluZm8gPSB7XHJcbiAgICAgICAgcHJldkRlcml2YXRpb246IHByZXZEZXJpdmF0aW9uLFxyXG4gICAgICAgIHByZXZBbGxvd1N0YXRlQ2hhbmdlczogcHJldkFsbG93U3RhdGVDaGFuZ2VzLFxyXG4gICAgICAgIHByZXZBbGxvd1N0YXRlUmVhZHM6IHByZXZBbGxvd1N0YXRlUmVhZHMsXHJcbiAgICAgICAgbm90aWZ5U3B5OiBub3RpZnlTcHksXHJcbiAgICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXHJcbiAgICAgICAgYWN0aW9uSWQ6IG5leHRBY3Rpb25JZCsrLFxyXG4gICAgICAgIHBhcmVudEFjdGlvbklkOiBjdXJyZW50QWN0aW9uSWRcclxuICAgIH07XHJcbiAgICBjdXJyZW50QWN0aW9uSWQgPSBydW5JbmZvLmFjdGlvbklkO1xyXG4gICAgcmV0dXJuIHJ1bkluZm87XHJcbn1cclxuZnVuY3Rpb24gX2VuZEFjdGlvbihydW5JbmZvKSB7XHJcbiAgICBpZiAoY3VycmVudEFjdGlvbklkICE9PSBydW5JbmZvLmFjdGlvbklkKSB7XHJcbiAgICAgICAgZmFpbChcImludmFsaWQgYWN0aW9uIHN0YWNrLiBkaWQgeW91IGZvcmdldCB0byBmaW5pc2ggYW4gYWN0aW9uP1wiKTtcclxuICAgIH1cclxuICAgIGN1cnJlbnRBY3Rpb25JZCA9IHJ1bkluZm8ucGFyZW50QWN0aW9uSWQ7XHJcbiAgICBpZiAocnVuSW5mby5lcnJvciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuc3VwcHJlc3NSZWFjdGlvbkVycm9ycyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChydW5JbmZvLnByZXZBbGxvd1N0YXRlQ2hhbmdlcyk7XHJcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQocnVuSW5mby5wcmV2QWxsb3dTdGF0ZVJlYWRzKTtcclxuICAgIGVuZEJhdGNoKCk7XHJcbiAgICB1bnRyYWNrZWRFbmQocnVuSW5mby5wcmV2RGVyaXZhdGlvbik7XHJcbiAgICBpZiAocnVuSW5mby5ub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgc3B5UmVwb3J0RW5kKHsgdGltZTogRGF0ZS5ub3coKSAtIHJ1bkluZm8uc3RhcnRUaW1lIH0pO1xyXG4gICAgfVxyXG4gICAgZ2xvYmFsU3RhdGUuc3VwcHJlc3NSZWFjdGlvbkVycm9ycyA9IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzKGFsbG93U3RhdGVDaGFuZ2VzLCBmdW5jKSB7XHJcbiAgICB2YXIgcHJldiA9IGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQoYWxsb3dTdGF0ZUNoYW5nZXMpO1xyXG4gICAgdmFyIHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gZnVuYygpO1xyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQocHJldik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQoYWxsb3dTdGF0ZUNoYW5nZXMpIHtcclxuICAgIHZhciBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXM7XHJcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IGFsbG93U3RhdGVDaGFuZ2VzO1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbn1cclxuZnVuY3Rpb24gYWxsb3dTdGF0ZUNoYW5nZXNFbmQocHJldikge1xyXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBwcmV2O1xyXG59XHJcbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzSW5zaWRlQ29tcHV0ZWQoZnVuYykge1xyXG4gICAgdmFyIHByZXYgPSBnbG9iYWxTdGF0ZS5jb21wdXRhdGlvbkRlcHRoO1xyXG4gICAgZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aCA9IDA7XHJcbiAgICB2YXIgcmVzO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXMgPSBmdW5jKCk7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICBnbG9iYWxTdGF0ZS5jb21wdXRhdGlvbkRlcHRoID0gcHJldjtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cblxudmFyIE9ic2VydmFibGVWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhPYnNlcnZhYmxlVmFsdWUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlVmFsdWUodmFsdWUsIGVuaGFuY2VyLCBuYW1lLCBub3RpZnlTcHksIGVxdWFscykge1xyXG4gICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiT2JzZXJ2YWJsZVZhbHVlQFwiICsgZ2V0TmV4dElkKCk7IH1cclxuICAgICAgICBpZiAobm90aWZ5U3B5ID09PSB2b2lkIDApIHsgbm90aWZ5U3B5ID0gdHJ1ZTsgfVxyXG4gICAgICAgIGlmIChlcXVhbHMgPT09IHZvaWQgMCkgeyBlcXVhbHMgPSBjb21wYXJlci5kZWZhdWx0OyB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbmFtZSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5lbmhhbmNlciA9IGVuaGFuY2VyO1xyXG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIF90aGlzLmVxdWFscyA9IGVxdWFscztcclxuICAgICAgICBfdGhpcy5oYXNVbnJlcG9ydGVkQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgX3RoaXMudmFsdWUgPSBlbmhhbmNlcih2YWx1ZSwgdW5kZWZpbmVkLCBuYW1lKTtcclxuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIGlzU3B5RW5hYmxlZCgpICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAvLyBvbmx5IG5vdGlmeSBzcHkgaWYgdGhpcyBpcyBhIHN0YW5kLWFsb25lIG9ic2VydmFibGVcclxuICAgICAgICAgICAgc3B5UmVwb3J0KHsgdHlwZTogXCJjcmVhdGVcIiwgbmFtZTogX3RoaXMubmFtZSwgbmV3VmFsdWU6IFwiXCIgKyBfdGhpcy52YWx1ZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5kZWhhbmNlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBuZXdWYWx1ZSA9IHRoaXMucHJlcGFyZU5ld1ZhbHVlKG5ld1ZhbHVlKTtcclxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCkge1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXROZXdWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUucHJlcGFyZU5ld1ZhbHVlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcyk7XHJcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFN0YXRlLlVOQ0hBTkdFRDtcclxuICAgICAgICAgICAgbmV3VmFsdWUgPSBjaGFuZ2UubmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFwcGx5IG1vZGlmaWVyXHJcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyKG5ld1ZhbHVlLCB0aGlzLnZhbHVlLCB0aGlzLm5hbWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVxdWFscyh0aGlzLnZhbHVlLCBuZXdWYWx1ZSkgPyBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQgOiBuZXdWYWx1ZTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnNldE5ld1ZhbHVlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgdGhpcy5yZXBvcnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgaWYgKGhhc0xpc3RlbmVycyh0aGlzKSkge1xyXG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZSh0aGlzLnZhbHVlKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLmludGVyY2VwdCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgICAgICBpZiAoZmlyZUltbWVkaWF0ZWx5KVxyXG4gICAgICAgICAgICBsaXN0ZW5lcih7XHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IHRoaXMudmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIltcIiArIHRoaXMudmFsdWUgKyBcIl1cIjtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGVWYWx1ZTtcclxufShBdG9tKSk7XHJcbnZhciBpc09ic2VydmFibGVWYWx1ZSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJPYnNlcnZhYmxlVmFsdWVcIiwgT2JzZXJ2YWJsZVZhbHVlKTtcblxuLyoqXHJcbiAqIEEgbm9kZSBpbiB0aGUgc3RhdGUgZGVwZW5kZW5jeSByb290IHRoYXQgb2JzZXJ2ZXMgb3RoZXIgbm9kZXMsIGFuZCBjYW4gYmUgb2JzZXJ2ZWQgaXRzZWxmLlxyXG4gKlxyXG4gKiBDb21wdXRlZFZhbHVlIHdpbGwgcmVtZW1iZXIgdGhlIHJlc3VsdCBvZiB0aGUgY29tcHV0YXRpb24gZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYmF0Y2gsIG9yXHJcbiAqIHdoaWxlIGJlaW5nIG9ic2VydmVkLlxyXG4gKlxyXG4gKiBEdXJpbmcgdGhpcyB0aW1lIGl0IHdpbGwgcmVjb21wdXRlIG9ubHkgd2hlbiBvbmUgb2YgaXRzIGRpcmVjdCBkZXBlbmRlbmNpZXMgY2hhbmdlZCxcclxuICogYnV0IG9ubHkgd2hlbiBpdCBpcyBiZWluZyBhY2Nlc3NlZCB3aXRoIGBDb21wdXRlZFZhbHVlLmdldCgpYC5cclxuICpcclxuICogSW1wbGVtZW50YXRpb24gZGVzY3JpcHRpb246XHJcbiAqIDEuIEZpcnN0IHRpbWUgaXQncyBiZWluZyBhY2Nlc3NlZCBpdCB3aWxsIGNvbXB1dGUgYW5kIHJlbWVtYmVyIHJlc3VsdFxyXG4gKiAgICBnaXZlIGJhY2sgcmVtZW1iZXJlZCByZXN1bHQgdW50aWwgMi4gaGFwcGVuc1xyXG4gKiAyLiBGaXJzdCB0aW1lIGFueSBkZWVwIGRlcGVuZGVuY3kgY2hhbmdlLCBwcm9wYWdhdGUgUE9TU0lCTFlfU1RBTEUgdG8gYWxsIG9ic2VydmVycywgd2FpdCBmb3IgMy5cclxuICogMy4gV2hlbiBpdCdzIGJlaW5nIGFjY2Vzc2VkLCByZWNvbXB1dGUgaWYgYW55IHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkLlxyXG4gKiAgICBpZiByZXN1bHQgY2hhbmdlZDogcHJvcGFnYXRlIFNUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHRoYXQgd2VyZSBQT1NTSUJMWV9TVEFMRSBmcm9tIHRoZSBsYXN0IHN0ZXAuXHJcbiAqICAgIGdvIHRvIHN0ZXAgMi4gZWl0aGVyIHdheVxyXG4gKlxyXG4gKiBJZiBhdCBhbnkgcG9pbnQgaXQncyBvdXRzaWRlIGJhdGNoIGFuZCBpdCBpc24ndCBvYnNlcnZlZDogcmVzZXQgZXZlcnl0aGluZyBhbmQgZ28gdG8gMS5cclxuICovXHJcbnZhciBDb21wdXRlZFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgY29tcHV0ZWQgdmFsdWUgYmFzZWQgb24gYSBmdW5jdGlvbiBleHByZXNzaW9uLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBgbmFtZWAgcHJvcGVydHkgaXMgZm9yIGRlYnVnIHB1cnBvc2VzIG9ubHkuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIGBlcXVhbHNgIHByb3BlcnR5IHNwZWNpZmllcyB0aGUgY29tcGFyZXIgZnVuY3Rpb24gdG8gdXNlIHRvIGRldGVybWluZSBpZiBhIG5ld2x5IHByb2R1Y2VkXHJcbiAgICAgKiB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHByZXZpb3VzIHZhbHVlLiBUd28gY29tcGFyZXJzIGFyZSBwcm92aWRlZCBpbiB0aGUgbGlicmFyeTsgYGRlZmF1bHRDb21wYXJlcmBcclxuICAgICAqIGNvbXBhcmVzIGJhc2VkIG9uIGlkZW50aXR5IGNvbXBhcmlzb24gKD09PSksIGFuZCBgc3RydWN0dWFsQ29tcGFyZXJgIGRlZXBseSBjb21wYXJlcyB0aGUgc3RydWN0dXJlLlxyXG4gICAgICogU3RydWN0dXJhbCBjb21wYXJpc29uIGNhbiBiZSBjb252ZW5pZW50IGlmIHlvdSBhbHdheXMgcHJvZHVjZSBhIG5ldyBhZ2dyZWdhdGVkIG9iamVjdCBhbmRcclxuICAgICAqIGRvbid0IHdhbnQgdG8gbm90aWZ5IG9ic2VydmVycyBpZiBpdCBpcyBzdHJ1Y3R1cmFsbHkgdGhlIHNhbWUuXHJcbiAgICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3Igd29ya2luZyB3aXRoIHZlY3RvcnMsIG1vdXNlIGNvb3JkaW5hdGVzIGV0Yy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQ29tcHV0ZWRWYWx1ZShvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2aW5nID0gW107IC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xyXG4gICAgICAgIHRoaXMubmV3T2JzZXJ2aW5nID0gbnVsbDsgLy8gZHVyaW5nIHRyYWNraW5nIGl0J3MgYW4gYXJyYXkgd2l0aCBuZXcgb2JzZXJ2ZWQgb2JzZXJ2ZXJzXHJcbiAgICAgICAgdGhpcy5pc0JlaW5nT2JzZXJ2ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLmRpZmZWYWx1ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5ydW5JZCA9IDA7XHJcbiAgICAgICAgdGhpcy5sYXN0QWNjZXNzZWRCeSA9IDA7XHJcbiAgICAgICAgdGhpcy5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFO1xyXG4gICAgICAgIHRoaXMudW5ib3VuZERlcHNDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5fX21hcGlkID0gXCIjXCIgKyBnZXROZXh0SWQoKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IENhdWdodEV4Y2VwdGlvbihudWxsKTtcclxuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nID0gZmFsc2U7IC8vIHRvIGNoZWNrIGZvciBjeWNsZXNcclxuICAgICAgICB0aGlzLmlzUnVubmluZ1NldHRlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNUcmFjaW5nID0gVHJhY2VNb2RlLk5PTkU7XHJcbiAgICAgICAgaW52YXJpYW50KG9wdGlvbnMuZ2V0LCBcIm1pc3Npbmcgb3B0aW9uIGZvciBjb21wdXRlZDogZ2V0XCIpO1xyXG4gICAgICAgIHRoaXMuZGVyaXZhdGlvbiA9IG9wdGlvbnMuZ2V0O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBcIkNvbXB1dGVkVmFsdWVAXCIgKyBnZXROZXh0SWQoKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5zZXQpXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGVyID0gY3JlYXRlQWN0aW9uKHRoaXMubmFtZSArIFwiLXNldHRlclwiLCBvcHRpb25zLnNldCk7XHJcbiAgICAgICAgdGhpcy5lcXVhbHMgPVxyXG4gICAgICAgICAgICBvcHRpb25zLmVxdWFscyB8fFxyXG4gICAgICAgICAgICAgICAgKG9wdGlvbnMuY29tcGFyZVN0cnVjdHVyYWwgfHwgb3B0aW9ucy5zdHJ1Y3RcclxuICAgICAgICAgICAgICAgICAgICA/IGNvbXBhcmVyLnN0cnVjdHVyYWxcclxuICAgICAgICAgICAgICAgICAgICA6IGNvbXBhcmVyLmRlZmF1bHQpO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSBvcHRpb25zLmNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5yZXF1aXJlc1JlYWN0aW9uID0gISFvcHRpb25zLnJlcXVpcmVzUmVhY3Rpb247XHJcbiAgICAgICAgdGhpcy5rZWVwQWxpdmUgPSAhIW9wdGlvbnMua2VlcEFsaXZlO1xyXG4gICAgfVxyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUub25CZWNvbWVTdGFsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwcm9wYWdhdGVNYXliZUNoYW5nZWQodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUub25CZWNvbWVPYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbkJlY29tZU9ic2VydmVkTGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25CZWNvbWVPYnNlcnZlZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gbGlzdGVuZXIoKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLm9uQmVjb21lVW5vYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbkJlY29tZVVub2JzZXJ2ZWRMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkJlY29tZVVub2JzZXJ2ZWRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhpcyBjb21wdXRlZCB2YWx1ZS5cclxuICAgICAqIFdpbGwgZXZhbHVhdGUgaXRzIGNvbXB1dGF0aW9uIGZpcnN0IGlmIG5lZWRlZC5cclxuICAgICAqL1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ29tcHV0aW5nKVxyXG4gICAgICAgICAgICBmYWlsKFwiQ3ljbGUgZGV0ZWN0ZWQgaW4gY29tcHV0YXRpb24gXCIgKyB0aGlzLm5hbWUgKyBcIjogXCIgKyB0aGlzLmRlcml2YXRpb24pO1xyXG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS5pbkJhdGNoID09PSAwICYmIHRoaXMub2JzZXJ2ZXJzLnNpemUgPT09IDAgJiYgIXRoaXMua2VlcEFsaXZlKSB7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRDb21wdXRlKHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5BYm91dFVudHJhY2tlZFJlYWQoKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0QmF0Y2goKTsgLy8gU2VlIHBlcmYgdGVzdCAnY29tcHV0ZWQgbWVtb2l6YXRpb24nXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5jb21wdXRlVmFsdWUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVwb3J0T2JzZXJ2ZWQodGhpcyk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRDb21wdXRlKHRoaXMpKVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tBbmRDb21wdXRlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzdWx0KSlcclxuICAgICAgICAgICAgdGhyb3cgcmVzdWx0LmNhdXNlO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzID0gdGhpcy5jb21wdXRlVmFsdWUoZmFsc2UpO1xyXG4gICAgICAgIGlmIChpc0NhdWdodEV4Y2VwdGlvbihyZXMpKVxyXG4gICAgICAgICAgICB0aHJvdyByZXMuY2F1c2U7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0ZXIpIHtcclxuICAgICAgICAgICAgaW52YXJpYW50KCF0aGlzLmlzUnVubmluZ1NldHRlciwgXCJUaGUgc2V0dGVyIG9mIGNvbXB1dGVkIHZhbHVlICdcIiArIHRoaXMubmFtZSArIFwiJyBpcyB0cnlpbmcgdG8gdXBkYXRlIGl0c2VsZi4gRGlkIHlvdSBpbnRlbmQgdG8gdXBkYXRlIGFuIF9vYnNlcnZhYmxlXyB2YWx1ZSwgaW5zdGVhZCBvZiB0aGUgY29tcHV0ZWQgcHJvcGVydHk/XCIpO1xyXG4gICAgICAgICAgICB0aGlzLmlzUnVubmluZ1NldHRlciA9IHRydWU7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRlci5jYWxsKHRoaXMuc2NvcGUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nU2V0dGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBpbnZhcmlhbnQoZmFsc2UsIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAgICAgXCJbQ29tcHV0ZWRWYWx1ZSAnXCIgKyB0aGlzLm5hbWUgKyBcIiddIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBhc3NpZ24gYSBuZXcgdmFsdWUgdG8gYSBjb21wdXRlZCB2YWx1ZS5cIik7XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudHJhY2tBbmRDb21wdXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChpc1NweUVuYWJsZWQoKSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgc3B5UmVwb3J0KHtcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5zY29wZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiY29tcHV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgIHZhciB3YXNTdXNwZW5kZWQgPSBcclxuICAgICAgICAvKiBzZWUgIzEyMDggKi8gdGhpcy5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XHJcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5jb21wdXRlVmFsdWUodHJ1ZSk7XHJcbiAgICAgICAgdmFyIGNoYW5nZWQgPSB3YXNTdXNwZW5kZWQgfHxcclxuICAgICAgICAgICAgaXNDYXVnaHRFeGNlcHRpb24ob2xkVmFsdWUpIHx8XHJcbiAgICAgICAgICAgIGlzQ2F1Z2h0RXhjZXB0aW9uKG5ld1ZhbHVlKSB8fFxyXG4gICAgICAgICAgICAhdGhpcy5lcXVhbHMob2xkVmFsdWUsIG5ld1ZhbHVlKTtcclxuICAgICAgICBpZiAoY2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLmNvbXB1dGVWYWx1ZSA9IGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgIHRoaXMuaXNDb21wdXRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLmNvbXB1dGF0aW9uRGVwdGgrKztcclxuICAgICAgICB2YXIgcmVzO1xyXG4gICAgICAgIGlmICh0cmFjaykge1xyXG4gICAgICAgICAgICByZXMgPSB0cmFja0Rlcml2ZWRGdW5jdGlvbih0aGlzLCB0aGlzLmRlcml2YXRpb24sIHRoaXMuc2NvcGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMuZGVyaXZhdGlvbi5jYWxsKHRoaXMuc2NvcGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmRlcml2YXRpb24uY2FsbCh0aGlzLnNjb3BlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gbmV3IENhdWdodEV4Y2VwdGlvbihlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBnbG9iYWxTdGF0ZS5jb21wdXRhdGlvbkRlcHRoLS07XHJcbiAgICAgICAgdGhpcy5pc0NvbXB1dGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUuc3VzcGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMua2VlcEFsaXZlKSB7XHJcbiAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkOyAvLyBkb24ndCBob2xkIG9uIHRvIGNvbXB1dGVkIHZhbHVlIVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xyXG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIGF1dG9ydW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBfdGhpcy5nZXQoKTtcclxuICAgICAgICAgICAgaWYgKCFmaXJzdFRpbWUgfHwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBfdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHByZXZWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBwcmV2VmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS53YXJuQWJvdXRVbnRyYWNrZWRSZWFkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5yZXF1aXJlc1JlYWN0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGZhaWwoXCJbbW9ieF0gQ29tcHV0ZWQgdmFsdWUgXCIgKyB0aGlzLm5hbWUgKyBcIiBpcyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc1RyYWNpbmcgIT09IFRyYWNlTW9kZS5OT05FKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW21vYngudHJhY2VdICdcIiArIHRoaXMubmFtZSArIFwiJyBpcyBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0LiBEb2luZyBhIGZ1bGwgcmVjb21wdXRlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4XSBDb21wdXRlZCB2YWx1ZSBcIiArIHRoaXMubmFtZSArIFwiIGlzIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuIERvaW5nIGEgZnVsbCByZWNvbXB1dGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoKTtcclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCJbXCIgKyB0aGlzLmRlcml2YXRpb24udG9TdHJpbmcoKSArIFwiXVwiO1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpO1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb21wdXRlZFZhbHVlO1xyXG59KCkpO1xyXG52YXIgaXNDb21wdXRlZFZhbHVlID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIkNvbXB1dGVkVmFsdWVcIiwgQ29tcHV0ZWRWYWx1ZSk7XG5cbi8qKlxyXG4gKiBUaGVzZSB2YWx1ZXMgd2lsbCBwZXJzaXN0IGlmIGdsb2JhbCBzdGF0ZSBpcyByZXNldFxyXG4gKi9cclxudmFyIHBlcnNpc3RlbnRLZXlzID0gW1xyXG4gICAgXCJtb2J4R3VpZFwiLFxyXG4gICAgXCJzcHlMaXN0ZW5lcnNcIixcclxuICAgIFwiZW5mb3JjZUFjdGlvbnNcIixcclxuICAgIFwiY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uXCIsXHJcbiAgICBcInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlXCIsXHJcbiAgICBcIm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uXCIsXHJcbiAgICBcImFsbG93U3RhdGVSZWFkc1wiLFxyXG4gICAgXCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzXCIsXHJcbiAgICBcInJ1bklkXCIsXHJcbiAgICBcIlVOQ0hBTkdFRFwiXHJcbl07XHJcbnZhciBNb2JYR2xvYmFscyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1vYlhHbG9iYWxzKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1vYlhHbG9iYWxzIHZlcnNpb24uXHJcbiAgICAgICAgICogTW9iWCBjb21wYXRpYmxpdHkgd2l0aCBvdGhlciB2ZXJzaW9ucyBsb2FkZWQgaW4gbWVtb3J5IGFzIGxvbmcgYXMgdGhpcyB2ZXJzaW9uIG1hdGNoZXMuXHJcbiAgICAgICAgICogSXQgaW5kaWNhdGVzIHRoYXQgdGhlIGdsb2JhbCBzdGF0ZSBzdGlsbCBzdG9yZXMgc2ltaWxhciBpbmZvcm1hdGlvblxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogTi5COiB0aGlzIHZlcnNpb24gaXMgdW5yZWxhdGVkIHRvIHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgTW9iWCwgYW5kIGlzIG9ubHkgdGhlIHZlcnNpb24gb2YgdGhlXHJcbiAgICAgICAgICogaW50ZXJuYWwgc3RhdGUgc3RvcmFnZSBvZiBNb2JYLCBhbmQgY2FuIGJlIHRoZSBzYW1lIGFjcm9zcyBtYW55IGRpZmZlcmVudCBwYWNrYWdlIHZlcnNpb25zXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gNTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBnbG9iYWxseSB1bmlxdWUgdG9rZW4gdG8gc2lnbmFsIHVuY2hhbmdlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuVU5DSEFOR0VEID0ge307XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3VycmVudGx5IHJ1bm5pbmcgZGVyaXZhdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudHJhY2tpbmdEZXJpdmF0aW9uID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBcmUgd2UgcnVubmluZyBhIGNvbXB1dGF0aW9uIGN1cnJlbnRseT8gKG5vdCBhIHJlYWN0aW9uKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY29tcHV0YXRpb25EZXB0aCA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRWFjaCB0aW1lIGEgZGVyaXZhdGlvbiBpcyB0cmFja2VkLCBpdCBpcyBhc3NpZ25lZCBhIHVuaXF1ZSBydW4taWRcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnJ1bklkID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAnZ3VpZCcgZm9yIGdlbmVyYWwgcHVycG9zZS4gV2lsbCBiZSBwZXJzaXN0ZWQgYW1vbmdzdCByZXNldHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tb2J4R3VpZCA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXJlIHdlIGluIGEgYmF0Y2ggYmxvY2s/IChhbmQgaG93IG1hbnkgb2YgdGhlbSlcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmluQmF0Y2ggPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9ic2VydmFibGVzIHRoYXQgZG9uJ3QgaGF2ZSBvYnNlcnZlcnMgYW55bW9yZSwgYW5kIGFyZSBhYm91dCB0byBiZVxyXG4gICAgICAgICAqIHN1c3BlbmRlZCwgdW5sZXNzIHNvbWVib2R5IGVsc2UgYWNjZXNzZXMgaXQgaW4gdGhlIHNhbWUgYmF0Y2hcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtJT2JzZXJ2YWJsZVtdfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTGlzdCBvZiBzY2hlZHVsZWQsIG5vdCB5ZXQgZXhlY3V0ZWQsIHJlYWN0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBlbmRpbmdSZWFjdGlvbnMgPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBcmUgd2UgY3VycmVudGx5IHByb2Nlc3NpbmcgcmVhY3Rpb25zP1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nUmVhY3Rpb25zID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSXMgaXQgYWxsb3dlZCB0byBjaGFuZ2Ugb2JzZXJ2YWJsZXMgYXQgdGhpcyBwb2ludD9cclxuICAgICAgICAgKiBJbiBnZW5lcmFsLCBNb2JYIGRvZXNuJ3QgYWxsb3cgdGhhdCB3aGVuIHJ1bm5pbmcgY29tcHV0YXRpb25zIGFuZCBSZWFjdC5yZW5kZXIuXHJcbiAgICAgICAgICogVG8gZW5zdXJlIHRoYXQgdGhvc2UgZnVuY3Rpb25zIHN0YXkgcHVyZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmFsbG93U3RhdGVDaGFuZ2VzID0gdHJ1ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJcyBpdCBhbGxvd2VkIHRvIHJlYWQgb2JzZXJ2YWJsZXMgYXQgdGhpcyBwb2ludD9cclxuICAgICAgICAgKiBVc2VkIHRvIGhvbGQgdGhlIHN0YXRlIG5lZWRlZCBmb3IgYG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYWxsb3dTdGF0ZVJlYWRzID0gdHJ1ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiBzdHJpY3QgbW9kZSBpcyBlbmFibGVkLCBzdGF0ZSBjaGFuZ2VzIGFyZSBieSBkZWZhdWx0IG5vdCBhbGxvd2VkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5lbmZvcmNlQWN0aW9ucyA9IGZhbHNlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNweSBjYWxsYmFja3NcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNweUxpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdsb2JhbGx5IGF0dGFjaGVkIGVycm9yIGhhbmRsZXJzIHRoYXQgcmVhY3Qgc3BlY2lmaWNhbGx5IHRvIGVycm9ycyBpbiByZWFjdGlvbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdhcm4gaWYgY29tcHV0ZWQgdmFsdWVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogKEV4cGVyaW1lbnRhbClcclxuICAgICAgICAgKiBXYXJuIGlmIHlvdSB0cnkgdG8gY3JlYXRlIHRvIGRlcml2YXRpb24gLyByZWFjdGl2ZSBjb250ZXh0IHdpdGhvdXQgYWNjZXNzaW5nIGFueSBvYnNlcnZhYmxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAoRXhwZXJpbWVudGFsKVxyXG4gICAgICAgICAqIFdhcm4gaWYgb2JzZXJ2YWJsZXMgYXJlIGFjY2Vzc2VkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFsbG93cyBvdmVyd3JpdGluZyBvZiBjb21wdXRlZCBwcm9wZXJ0aWVzLCB1c2VmdWwgaW4gdGVzdHMgYnV0IG5vdCBwcm9kIGFzIGl0IGNhbiBjYXVzZVxyXG4gICAgICAgICAqIG1lbW9yeSBsZWFrcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTg2N1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY29tcHV0ZWRDb25maWd1cmFibGUgPSBmYWxzZTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIERvbid0IGNhdGNoIGFuZCByZXRocm93IGV4Y2VwdGlvbnMuIFRoaXMgaXMgdXNlZnVsIGZvciBpbnNwZWN0aW5nIHRoZSBzdGF0ZSBvZlxyXG4gICAgICAgICAqIHRoZSBzdGFjayB3aGVuIGFuIGV4Y2VwdGlvbiBvY2N1cnMgd2hpbGUgZGVidWdnaW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9IGZhbHNlO1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogSWYgdHJ1ZSwgd2UgYXJlIGFscmVhZHkgaGFuZGxpbmcgYW4gZXhjZXB0aW9uIGluIGFuIGFjdGlvbi4gQW55IGVycm9ycyBpbiByZWFjdGlvbnMgc2hvdWxkIGJlIHN1cHByZXNzZWQsIGFzXHJcbiAgICAgICAgICogdGhleSBhcmUgbm90IHRoZSBjYXVzZSwgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzE4MzZcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBNb2JYR2xvYmFscztcclxufSgpKTtcclxudmFyIG1vY2tHbG9iYWwgPSB7fTtcclxuZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93O1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbW9ja0dsb2JhbDtcclxufVxyXG52YXIgY2FuTWVyZ2VHbG9iYWxTdGF0ZSA9IHRydWU7XHJcbnZhciBpc29sYXRlQ2FsbGVkID0gZmFsc2U7XHJcbnZhciBnbG9iYWxTdGF0ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsKCk7XHJcbiAgICBpZiAoZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPiAwICYmICFnbG9iYWwuX19tb2J4R2xvYmFscylcclxuICAgICAgICBjYW5NZXJnZUdsb2JhbFN0YXRlID0gZmFsc2U7XHJcbiAgICBpZiAoZ2xvYmFsLl9fbW9ieEdsb2JhbHMgJiYgZ2xvYmFsLl9fbW9ieEdsb2JhbHMudmVyc2lvbiAhPT0gbmV3IE1vYlhHbG9iYWxzKCkudmVyc2lvbilcclxuICAgICAgICBjYW5NZXJnZUdsb2JhbFN0YXRlID0gZmFsc2U7XHJcbiAgICBpZiAoIWNhbk1lcmdlR2xvYmFsU3RhdGUpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFpc29sYXRlQ2FsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICBmYWlsKFwiVGhlcmUgYXJlIG11bHRpcGxlLCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgTW9iWCBhY3RpdmUuIE1ha2Ugc3VyZSBNb2JYIGlzIGxvYWRlZCBvbmx5IG9uY2Ugb3IgdXNlIGBjb25maWd1cmUoeyBpc29sYXRlR2xvYmFsU3RhdGU6IHRydWUgfSlgXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNb2JYR2xvYmFscygpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZ2xvYmFsLl9fbW9ieEdsb2JhbHMpIHtcclxuICAgICAgICBnbG9iYWwuX19tb2J4SW5zdGFuY2VDb3VudCArPSAxO1xyXG4gICAgICAgIGlmICghZ2xvYmFsLl9fbW9ieEdsb2JhbHMuVU5DSEFOR0VEKVxyXG4gICAgICAgICAgICBnbG9iYWwuX19tb2J4R2xvYmFscy5VTkNIQU5HRUQgPSB7fTsgLy8gbWFrZSBtZXJnZSBiYWNrd2FyZCBjb21wYXRpYmxlXHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbC5fX21vYnhHbG9iYWxzO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPSAxO1xyXG4gICAgICAgIHJldHVybiAoZ2xvYmFsLl9fbW9ieEdsb2JhbHMgPSBuZXcgTW9iWEdsb2JhbHMoKSk7XHJcbiAgICB9XHJcbn0pKCk7XHJcbmZ1bmN0aW9uIGlzb2xhdGVHbG9iYWxTdGF0ZSgpIHtcclxuICAgIGlmIChnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zLmxlbmd0aCB8fFxyXG4gICAgICAgIGdsb2JhbFN0YXRlLmluQmF0Y2ggfHxcclxuICAgICAgICBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMpXHJcbiAgICAgICAgZmFpbChcImlzb2xhdGVHbG9iYWxTdGF0ZSBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBNb2JYIGlzIHJ1bm5pbmcgYW55IHJlYWN0aW9uc1wiKTtcclxuICAgIGlzb2xhdGVDYWxsZWQgPSB0cnVlO1xyXG4gICAgaWYgKGNhbk1lcmdlR2xvYmFsU3RhdGUpIHtcclxuICAgICAgICBpZiAoLS1nZXRHbG9iYWwoKS5fX21vYnhJbnN0YW5jZUNvdW50ID09PSAwKVxyXG4gICAgICAgICAgICBnZXRHbG9iYWwoKS5fX21vYnhHbG9iYWxzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGdsb2JhbFN0YXRlID0gbmV3IE1vYlhHbG9iYWxzKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0R2xvYmFsU3RhdGUoKSB7XHJcbiAgICByZXR1cm4gZ2xvYmFsU3RhdGU7XHJcbn1cclxuLyoqXHJcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHk7IHRoaXMgd2lsbCBicmVhayB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgZXhpc3Rpbmcgb2JzZXJ2YWJsZXMsXHJcbiAqIGJ1dCBjYW4gYmUgdXNlZCB0byBnZXQgYmFjayBhdCBhIHN0YWJsZSBzdGF0ZSBhZnRlciB0aHJvd2luZyBlcnJvcnNcclxuICovXHJcbmZ1bmN0aW9uIHJlc2V0R2xvYmFsU3RhdGUoKSB7XHJcbiAgICB2YXIgZGVmYXVsdEdsb2JhbHMgPSBuZXcgTW9iWEdsb2JhbHMoKTtcclxuICAgIGZvciAodmFyIGtleSBpbiBkZWZhdWx0R2xvYmFscylcclxuICAgICAgICBpZiAocGVyc2lzdGVudEtleXMuaW5kZXhPZihrZXkpID09PSAtMSlcclxuICAgICAgICAgICAgZ2xvYmFsU3RhdGVba2V5XSA9IGRlZmF1bHRHbG9iYWxzW2tleV07XHJcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9ICFnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9ucztcclxufVxuXG5mdW5jdGlvbiBoYXNPYnNlcnZlcnMob2JzZXJ2YWJsZSkge1xyXG4gICAgcmV0dXJuIG9ic2VydmFibGUub2JzZXJ2ZXJzICYmIG9ic2VydmFibGUub2JzZXJ2ZXJzLnNpemUgPiAwO1xyXG59XHJcbmZ1bmN0aW9uIGdldE9ic2VydmVycyhvYnNlcnZhYmxlKSB7XHJcbiAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYnNlcnZlcnM7XHJcbn1cclxuLy8gZnVuY3Rpb24gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XHJcbi8vICAgICBjb25zdCBsaXN0ID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnNcclxuLy8gICAgIGNvbnN0IG1hcCA9IG9ic2VydmFibGUub2JzZXJ2ZXJzSW5kZXhlc1xyXG4vLyAgICAgY29uc3QgbCA9IGxpc3QubGVuZ3RoXHJcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xyXG4vLyAgICAgICAgIGNvbnN0IGlkID0gbGlzdFtpXS5fX21hcGlkXHJcbi8vICAgICAgICAgaWYgKGkpIHtcclxuLy8gICAgICAgICAgICAgaW52YXJpYW50KG1hcFtpZF0gPT09IGksIFwiSU5URVJOQUwgRVJST1IgbWFwcyBkZXJpdmF0aW9uLl9fbWFwaWQgdG8gaW5kZXggaW4gbGlzdFwiKSAvLyBmb3IgcGVyZm9ybWFuY2VcclxuLy8gICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICBpbnZhcmlhbnQoIShpZCBpbiBtYXApLCBcIklOVEVSTkFMIEVSUk9SIG9ic2VydmVyIG9uIGluZGV4IDAgc2hvdWxkbid0IGJlIGhlbGQgaW4gbWFwLlwiKSAvLyBmb3IgcGVyZm9ybWFuY2VcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vICAgICBpbnZhcmlhbnQoXHJcbi8vICAgICAgICAgbGlzdC5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMobWFwKS5sZW5ndGggPT09IGxpc3QubGVuZ3RoIC0gMSxcclxuLy8gICAgICAgICBcIklOVEVSTkFMIEVSUk9SIHRoZXJlIGlzIG5vIGp1bmsgaW4gbWFwXCJcclxuLy8gICAgIClcclxuLy8gfVxyXG5mdW5jdGlvbiBhZGRPYnNlcnZlcihvYnNlcnZhYmxlLCBub2RlKSB7XHJcbiAgICAvLyBpbnZhcmlhbnQobm9kZS5kZXBlbmRlbmNpZXNTdGF0ZSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IsIGNhbiBhZGQgb25seSBkZXBlbmRlbmNpZXNTdGF0ZSAhPT0gLTFcIik7XHJcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgPT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIGFkZCBhbHJlYWR5IGFkZGVkIG5vZGVcIik7XHJcbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XHJcbiAgICBvYnNlcnZhYmxlLm9ic2VydmVycy5hZGQobm9kZSk7XHJcbiAgICBpZiAob2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID4gbm9kZS5kZXBlbmRlbmNpZXNTdGF0ZSlcclxuICAgICAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBub2RlLmRlcGVuZGVuY2llc1N0YXRlO1xyXG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xyXG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpICE9PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiBkaWRuJ3QgYWRkIG5vZGVcIik7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2YWJsZSwgbm9kZSkge1xyXG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SLCByZW1vdmUgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGluc2lkZSBiYXRjaFwiKTtcclxuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgcmVtb3ZlIGFscmVhZHkgcmVtb3ZlZCBub2RlXCIpO1xyXG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xyXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnMuZGVsZXRlKG5vZGUpO1xyXG4gICAgaWYgKG9ic2VydmFibGUub2JzZXJ2ZXJzLnNpemUgPT09IDApIHtcclxuICAgICAgICAvLyBkZWxldGluZyBsYXN0IG9ic2VydmVyXHJcbiAgICAgICAgcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGUpO1xyXG4gICAgfVxyXG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xyXG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpID09PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiByZW1vdmUgYWxyZWFkeSByZW1vdmVkIG5vZGUyXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKSB7XHJcbiAgICBpZiAob2JzZXJ2YWJsZS5pc1BlbmRpbmdVbm9ic2VydmF0aW9uID09PSBmYWxzZSkge1xyXG4gICAgICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMubGVuZ3RoID09PSAwLCBcIklOVEVSTkFMIEVSUk9SLCBzaG91bGQgb25seSBxdWV1ZSBmb3IgdW5vYnNlcnZhdGlvbiB1bm9ic2VydmVkIG9ic2VydmFibGVzXCIpO1xyXG4gICAgICAgIG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zLnB1c2gob2JzZXJ2YWJsZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEJhdGNoIHN0YXJ0cyBhIHRyYW5zYWN0aW9uLCBhdCBsZWFzdCBmb3IgcHVycG9zZXMgb2YgbWVtb2l6aW5nIENvbXB1dGVkVmFsdWVzIHdoZW4gbm90aGluZyBlbHNlIGRvZXMuXHJcbiAqIER1cmluZyBhIGJhdGNoIGBvbkJlY29tZVVub2JzZXJ2ZWRgIHdpbGwgYmUgY2FsbGVkIGF0IG1vc3Qgb25jZSBwZXIgb2JzZXJ2YWJsZS5cclxuICogQXZvaWRzIHVubmVjZXNzYXJ5IHJlY2FsY3VsYXRpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gc3RhcnRCYXRjaCgpIHtcclxuICAgIGdsb2JhbFN0YXRlLmluQmF0Y2grKztcclxufVxyXG5mdW5jdGlvbiBlbmRCYXRjaCgpIHtcclxuICAgIGlmICgtLWdsb2JhbFN0YXRlLmluQmF0Y2ggPT09IDApIHtcclxuICAgICAgICBydW5SZWFjdGlvbnMoKTtcclxuICAgICAgICAvLyB0aGUgYmF0Y2ggaXMgYWN0dWFsbHkgYWJvdXQgdG8gZmluaXNoLCBhbGwgdW5vYnNlcnZpbmcgc2hvdWxkIGhhcHBlbiBoZXJlLlxyXG4gICAgICAgIHZhciBsaXN0ID0gZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGxpc3RbaV07XHJcbiAgICAgICAgICAgIG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBvYnNlcnZhYmxlIGhhZCByZWFjdGl2ZSBvYnNlcnZlcnMsIHRyaWdnZXIgdGhlIGhvb2tzXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLm9uQmVjb21lVW5vYnNlcnZlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGUgaW5zdGFuY2VvZiBDb21wdXRlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcHV0ZWQgdmFsdWVzIGFyZSBhdXRvbWF0aWNhbGx5IHRlYXJlZCBkb3duIHdoZW4gdGhlIGxhc3Qgb2JzZXJ2ZXIgbGVhdmVzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBwcm9jZXNzIGhhcHBlbnMgcmVjdXJzaXZlbHksIHRoaXMgY29tcHV0ZWQgbWlnaHQgYmUgdGhlIGxhc3Qgb2JzZXJ2YWJlIG9mIGFub3RoZXIsIGV0Yy4uXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5zdXNwZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW107XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVwb3J0T2JzZXJ2ZWQob2JzZXJ2YWJsZSkge1xyXG4gICAgY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkKG9ic2VydmFibGUpO1xyXG4gICAgdmFyIGRlcml2YXRpb24gPSBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb247XHJcbiAgICBpZiAoZGVyaXZhdGlvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNpbXBsZSBvcHRpbWl6YXRpb24sIGdpdmUgZWFjaCBkZXJpdmF0aW9uIHJ1biBhbiB1bmlxdWUgaWQgKHJ1bklkKVxyXG4gICAgICAgICAqIENoZWNrIGlmIGxhc3QgdGltZSB0aGlzIG9ic2VydmFibGUgd2FzIGFjY2Vzc2VkIHRoZSBzYW1lIHJ1bklkIGlzIHVzZWRcclxuICAgICAgICAgKiBpZiB0aGlzIGlzIHRoZSBjYXNlLCB0aGUgcmVsYXRpb24gaXMgYWxyZWFkeSBrbm93blxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChkZXJpdmF0aW9uLnJ1bklkICE9PSBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5KSB7XHJcbiAgICAgICAgICAgIG9ic2VydmFibGUubGFzdEFjY2Vzc2VkQnkgPSBkZXJpdmF0aW9uLnJ1bklkO1xyXG4gICAgICAgICAgICAvLyBUcmllZCBzdG9yaW5nIG5ld09ic2VydmluZywgb3Igb2JzZXJ2aW5nLCBvciBib3RoIGFzIFNldCwgYnV0IHBlcmZvcm1hbmNlIGRpZG4ndCBjb21lIGNsb3NlLi4uXHJcbiAgICAgICAgICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nW2Rlcml2YXRpb24udW5ib3VuZERlcHNDb3VudCsrXSA9IG9ic2VydmFibGU7XHJcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWQpIHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CZWNvbWVPYnNlcnZlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnMuc2l6ZSA9PT0gMCAmJiBnbG9iYWxTdGF0ZS5pbkJhdGNoID4gMCkge1xyXG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vLyBmdW5jdGlvbiBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZTogSU9ic2VydmFibGUsIG1zZzogc3RyaW5nKSB7XHJcbi8vICAgICAvLyBpdCdzIGV4cGVuc2l2ZSBzbyBiZXR0ZXIgbm90IHJ1biBpdCBpbiBwcm9kdWNpdG9uLiBidXQgdGVtcG9yYXJpbHkgaGVscGZ1bCBmb3IgdGVzdGluZ1xyXG4vLyAgICAgY29uc3QgbWluID0gZ2V0T2JzZXJ2ZXJzKG9ic2VydmFibGUpLnJlZHVjZSgoYSwgYikgPT4gTWF0aC5taW4oYSwgYi5kZXBlbmRlbmNpZXNTdGF0ZSksIDIpXHJcbi8vICAgICBpZiAobWluID49IG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSkgcmV0dXJuIC8vIDwtIHRoZSBvbmx5IGFzc3VtcHRpb24gYWJvdXQgYGxvd2VzdE9ic2VydmVyU3RhdGVgXHJcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbi8vICAgICAgICAgXCJsb3dlc3RPYnNlcnZlclN0YXRlIGlzIHdyb25nIGZvciBcIiArXHJcbi8vICAgICAgICAgICAgIG1zZyArXHJcbi8vICAgICAgICAgICAgIFwiIGJlY2F1c2UgXCIgK1xyXG4vLyAgICAgICAgICAgICBtaW4gK1xyXG4vLyAgICAgICAgICAgICBcIiA8IFwiICtcclxuLy8gICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXHJcbi8vICAgICApXHJcbi8vIH1cclxuLyoqXHJcbiAqIE5PVEU6IGN1cnJlbnQgcHJvcGFnYXRpb24gbWVjaGFuaXNtIHdpbGwgaW4gY2FzZSBvZiBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGJlaGF2ZSB1bmV4cGVjdGVkbHlcclxuICogSXQgd2lsbCBwcm9wYWdhdGUgY2hhbmdlcyB0byBvYnNlcnZlcnMgZnJvbSBwcmV2aW91cyBydW5cclxuICogSXQncyBoYXJkIG9yIG1heWJlIGltcG9zc2libGUgKHdpdGggcmVhc29uYWJsZSBwZXJmKSB0byBnZXQgaXQgcmlnaHQgd2l0aCBjdXJyZW50IGFwcHJvYWNoXHJcbiAqIEhvcGVmdWxseSBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGFyZW4ndCBhIGZlYXR1cmUgcGVvcGxlIHNob3VsZCBkZXBlbmQgb25cclxuICogQWxzbyBtb3N0IGJhc2ljIHVzZSBjYXNlcyBzaG91bGQgYmUgb2tcclxuICovXHJcbi8vIENhbGxlZCBieSBBdG9tIHdoZW4gaXRzIHZhbHVlIGNoYW5nZXNcclxuZnVuY3Rpb24gcHJvcGFnYXRlQ2hhbmdlZChvYnNlcnZhYmxlKSB7XHJcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjaGFuZ2VkIHN0YXJ0XCIpO1xyXG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5TVEFMRSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFO1xyXG4gICAgLy8gSWRlYWxseSB3ZSB1c2UgZm9yLi5vZiBoZXJlLCBidXQgdGhlIGRvd25jb21waWxlZCB2ZXJzaW9uIGlzIHJlYWxseSBzbG93Li4uXHJcbiAgICBvYnNlcnZhYmxlLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xyXG4gICAgICAgICAgICBpZiAoZC5pc1RyYWNpbmcgIT09IFRyYWNlTW9kZS5OT05FKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dUcmFjZUluZm8oZCwgb2JzZXJ2YWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZC5vbkJlY29tZVN0YWxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFO1xyXG4gICAgfSk7XHJcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjaGFuZ2VkIGVuZFwiKTtcclxufVxyXG4vLyBDYWxsZWQgYnkgQ29tcHV0ZWRWYWx1ZSB3aGVuIGl0IHJlY2FsY3VsYXRlIGFuZCBpdHMgdmFsdWUgY2hhbmdlZFxyXG5mdW5jdGlvbiBwcm9wYWdhdGVDaGFuZ2VDb25maXJtZWQob2JzZXJ2YWJsZSkge1xyXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIHN0YXJ0XCIpO1xyXG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5TVEFMRSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFO1xyXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFKVxyXG4gICAgICAgICAgICBkLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5TVEFMRTtcclxuICAgICAgICBlbHNlIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEUgLy8gdGhpcyBoYXBwZW5zIGR1cmluZyBjb21wdXRpbmcgb2YgYGRgLCBqdXN0IGtlZXAgbG93ZXN0T2JzZXJ2ZXJTdGF0ZSB1cCB0byBkYXRlLlxyXG4gICAgICAgIClcclxuICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFO1xyXG4gICAgfSk7XHJcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjb25maXJtZWQgZW5kXCIpO1xyXG59XHJcbi8vIFVzZWQgYnkgY29tcHV0ZWQgd2hlbiBpdHMgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgd2UgZG9uJ3Qgd2FuJ3QgdG8gaW1tZWRpYXRlbHkgcmVjb21wdXRlLlxyXG5mdW5jdGlvbiBwcm9wYWdhdGVNYXliZUNoYW5nZWQob2JzZXJ2YWJsZSkge1xyXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwibWF5YmUgc3RhcnRcIik7XHJcbiAgICBpZiAob2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlICE9PSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5QT1NTSUJMWV9TVEFMRTtcclxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFKSB7XHJcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFO1xyXG4gICAgICAgICAgICBpZiAoZC5pc1RyYWNpbmcgIT09IFRyYWNlTW9kZS5OT05FKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dUcmFjZUluZm8oZCwgb2JzZXJ2YWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZC5vbkJlY29tZVN0YWxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJtYXliZSBlbmRcIik7XHJcbn1cclxuZnVuY3Rpb24gbG9nVHJhY2VJbmZvKGRlcml2YXRpb24sIG9ic2VydmFibGUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiW21vYngudHJhY2VdICdcIiArIGRlcml2YXRpb24ubmFtZSArIFwiJyBpcyBpbnZhbGlkYXRlZCBkdWUgdG8gYSBjaGFuZ2UgaW46ICdcIiArIG9ic2VydmFibGUubmFtZSArIFwiJ1wiKTtcclxuICAgIGlmIChkZXJpdmF0aW9uLmlzVHJhY2luZyA9PT0gVHJhY2VNb2RlLkJSRUFLKSB7XHJcbiAgICAgICAgdmFyIGxpbmVzID0gW107XHJcbiAgICAgICAgcHJpbnREZXBUcmVlKGdldERlcGVuZGVuY3lUcmVlKGRlcml2YXRpb24pLCBsaW5lcywgMSk7XHJcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgbmV3IEZ1bmN0aW9uKFwiZGVidWdnZXI7XFxuLypcXG5UcmFjaW5nICdcIiArIGRlcml2YXRpb24ubmFtZSArIFwiJ1xcblxcbllvdSBhcmUgZW50ZXJpbmcgdGhpcyBicmVhayBwb2ludCBiZWNhdXNlIGRlcml2YXRpb24gJ1wiICsgZGVyaXZhdGlvbi5uYW1lICsgXCInIGlzIGJlaW5nIHRyYWNlZCBhbmQgJ1wiICsgb2JzZXJ2YWJsZS5uYW1lICsgXCInIGlzIG5vdyBmb3JjaW5nIGl0IHRvIHVwZGF0ZS5cXG5KdXN0IGZvbGxvdyB0aGUgc3RhY2t0cmFjZSB5b3Ugc2hvdWxkIG5vdyBzZWUgaW4gdGhlIGRldnRvb2xzIHRvIHNlZSBwcmVjaXNlbHkgd2hhdCBwaWVjZSBvZiB5b3VyIGNvZGUgaXMgY2F1c2luZyB0aGlzIHVwZGF0ZVxcblRoZSBzdGFja2ZyYW1lIHlvdSBhcmUgbG9va2luZyBmb3IgaXMgYXQgbGVhc3QgfjYtOCBzdGFjay1mcmFtZXMgdXAuXFxuXFxuXCIgKyAoZGVyaXZhdGlvbiBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUgPyBkZXJpdmF0aW9uLmRlcml2YXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC9bKl1cXC8vZywgXCIvXCIpIDogXCJcIikgKyBcIlxcblxcblRoZSBkZXBlbmRlbmNpZXMgZm9yIHRoaXMgZGVyaXZhdGlvbiBhcmU6XFxuXFxuXCIgKyBsaW5lcy5qb2luKFwiXFxuXCIpICsgXCJcXG4qL1xcbiAgICBcIikoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBwcmludERlcFRyZWUodHJlZSwgbGluZXMsIGRlcHRoKSB7XHJcbiAgICBpZiAobGluZXMubGVuZ3RoID49IDEwMDApIHtcclxuICAgICAgICBsaW5lcy5wdXNoKFwiKGFuZCBtYW55IG1vcmUpXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxpbmVzLnB1c2goXCJcIiArIG5ldyBBcnJheShkZXB0aCkuam9pbihcIlxcdFwiKSArIHRyZWUubmFtZSk7IC8vIE1XRTogbm90IHRoZSBmYXN0ZXN0LCBidXQgdGhlIGVhc2llc3Qgd2F5IDopXHJcbiAgICBpZiAodHJlZS5kZXBlbmRlbmNpZXMpXHJcbiAgICAgICAgdHJlZS5kZXBlbmRlbmNpZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIHByaW50RGVwVHJlZShjaGlsZCwgbGluZXMsIGRlcHRoICsgMSk7IH0pO1xyXG59XG5cbnZhciBSZWFjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlYWN0aW9uKG5hbWUsIG9uSW52YWxpZGF0ZSwgZXJyb3JIYW5kbGVyLCByZXF1aXJlc09ic2VydmFibGUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIlJlYWN0aW9uQFwiICsgZ2V0TmV4dElkKCk7IH1cclxuICAgICAgICBpZiAocmVxdWlyZXNPYnNlcnZhYmxlID09PSB2b2lkIDApIHsgcmVxdWlyZXNPYnNlcnZhYmxlID0gZmFsc2U7IH1cclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMub25JbnZhbGlkYXRlID0gb25JbnZhbGlkYXRlO1xyXG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xyXG4gICAgICAgIHRoaXMucmVxdWlyZXNPYnNlcnZhYmxlID0gcmVxdWlyZXNPYnNlcnZhYmxlO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2aW5nID0gW107IC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xyXG4gICAgICAgIHRoaXMubmV3T2JzZXJ2aW5nID0gW107XHJcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HO1xyXG4gICAgICAgIHRoaXMuZGlmZlZhbHVlID0gMDtcclxuICAgICAgICB0aGlzLnJ1bklkID0gMDtcclxuICAgICAgICB0aGlzLnVuYm91bmREZXBzQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuX19tYXBpZCA9IFwiI1wiICsgZ2V0TmV4dElkKCk7XHJcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5faXNTY2hlZHVsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pc1RyYWNrUGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNUcmFjaW5nID0gVHJhY2VNb2RlLk5PTkU7XHJcbiAgICB9XHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUub25CZWNvbWVTdGFsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XHJcbiAgICB9O1xyXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNTY2hlZHVsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faXNTY2hlZHVsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIHJ1blJlYWN0aW9ucygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUuaXNTY2hlZHVsZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2NoZWR1bGVkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogaW50ZXJuYWwsIHVzZSBzY2hlZHVsZSgpIGlmIHlvdSBpbnRlbmQgdG8ga2ljayBvZmYgYSByZWFjdGlvblxyXG4gICAgICovXHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUucnVuUmVhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgc3RhcnRCYXRjaCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9pc1NjaGVkdWxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcHV0ZSh0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNUcmFja1BlbmRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uSW52YWxpZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1RyYWNrUGVuZGluZyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NweUVuYWJsZWQoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25JbnZhbGlkYXRlIGRpZG4ndCB0cmlnZ2VyIHRyYWNrIHJpZ2h0IGF3YXkuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHlSZXBvcnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzY2hlZHVsZWQtcmVhY3Rpb25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlYWN0aW9uLnByb3RvdHlwZS50cmFjayA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJSZWFjdGlvbiBhbHJlYWR5IGRpc3Bvc2VkXCIpIC8vIE5vdGU6IE5vdCBhIHdhcm5pbmcgLyBlcnJvciBpbiBtb2J4IDQgZWl0aGVyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgICAgICB2YXIgbm90aWZ5ID0gaXNTcHlFbmFibGVkKCk7XHJcbiAgICAgICAgdmFyIHN0YXJ0VGltZTtcclxuICAgICAgICBpZiAobm90aWZ5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlYWN0aW9uXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRyYWNrRGVyaXZlZEZ1bmN0aW9uKHRoaXMsIGZuLCB1bmRlZmluZWQpO1xyXG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lzVHJhY2tQZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xyXG4gICAgICAgICAgICAvLyBkaXNwb3NlZCBkdXJpbmcgbGFzdCBydW4uIENsZWFuIHVwIGV2ZXJ5dGhpbmcgdGhhdCB3YXMgYm91bmQgYWZ0ZXIgdGhlIGRpc3Bvc2UgY2FsbC5cclxuICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0NhdWdodEV4Y2VwdGlvbihyZXN1bHQpKVxyXG4gICAgICAgICAgICB0aGlzLnJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbihyZXN1bHQuY2F1c2UpO1xyXG4gICAgICAgIGlmIChub3RpZnkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCh7XHJcbiAgICAgICAgICAgICAgICB0aW1lOiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbmRCYXRjaCgpO1xyXG4gICAgfTtcclxuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb24gPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9ySGFuZGxlcihlcnJvciwgdGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMpXHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gXCJbbW9ieF0gRW5jb3VudGVyZWQgYW4gdW5jYXVnaHQgZXhjZXB0aW9uIHRoYXQgd2FzIHRocm93biBieSBhIHJlYWN0aW9uIG9yIG9ic2VydmVyIGNvbXBvbmVudCwgaW46ICdcIiArIHRoaXMgKyBcIidcIjtcclxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuc3VwcHJlc3NSZWFjdGlvbkVycm9ycykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0gKGVycm9yIGluIHJlYWN0aW9uICdcIiArIHRoaXMubmFtZSArIFwiJyBzdXBwcmVzc2VkLCBmaXggZXJyb3Igb2YgY2F1c2luZyBhY3Rpb24gYmVsb3cpXCIpOyAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXJyb3IpO1xyXG4gICAgICAgICAgICAvKiogSWYgZGVidWdnaW5nIGJyb3VnaHQgeW91IGhlcmUsIHBsZWFzZSwgcmVhZCB0aGUgYWJvdmUgbWVzc2FnZSA6LSkuIFRueCEgKi9cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3B5RW5hYmxlZCgpKSB7XHJcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IFwiXCIgKyBlcnJvclxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYoZXJyb3IsIF90aGlzKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIGRpc3Bvc2VkIHdoaWxlIHJ1bm5pbmcsIGNsZWFuIHVwIGxhdGVyLiBNYXliZSBub3Qgb3B0aW1hbCwgYnV0IHJhcmUgY2FzZVxyXG4gICAgICAgICAgICAgICAgc3RhcnRCYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBlbmRCYXRjaCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5nZXREaXNwb3NlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgciA9IHRoaXMuZGlzcG9zZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHJbJG1vYnhdID0gdGhpcztcclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiUmVhY3Rpb25bXCIgKyB0aGlzLm5hbWUgKyBcIl1cIjtcclxuICAgIH07XHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUudHJhY2UgPSBmdW5jdGlvbiAoZW50ZXJCcmVha1BvaW50KSB7XHJcbiAgICAgICAgaWYgKGVudGVyQnJlYWtQb2ludCA9PT0gdm9pZCAwKSB7IGVudGVyQnJlYWtQb2ludCA9IGZhbHNlOyB9XHJcbiAgICAgICAgdHJhY2UodGhpcywgZW50ZXJCcmVha1BvaW50KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVhY3Rpb247XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIG9uUmVhY3Rpb25FcnJvcihoYW5kbGVyKSB7XHJcbiAgICBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xyXG4gICAgICAgIGlmIChpZHggPj0gMClcclxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogTWFnaWMgbnVtYmVyIGFsZXJ0IVxyXG4gKiBEZWZpbmVzIHdpdGhpbiBob3cgbWFueSB0aW1lcyBhIHJlYWN0aW9uIGlzIGFsbG93ZWQgdG8gcmUtdHJpZ2dlciBpdHNlbGZcclxuICogdW50aWwgaXQgaXMgYXNzdW1lZCB0aGF0IHRoaXMgaXMgZ29ubmEgYmUgYSBuZXZlciBlbmRpbmcgbG9vcC4uLlxyXG4gKi9cclxudmFyIE1BWF9SRUFDVElPTl9JVEVSQVRJT05TID0gMTAwO1xyXG52YXIgcmVhY3Rpb25TY2hlZHVsZXIgPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZigpOyB9O1xyXG5mdW5jdGlvbiBydW5SZWFjdGlvbnMoKSB7XHJcbiAgICAvLyBUcmFtcG9saW5pbmcsIGlmIHJ1blJlYWN0aW9ucyBhcmUgYWxyZWFkeSBydW5uaW5nLCBuZXcgcmVhY3Rpb25zIHdpbGwgYmUgcGlja2VkIHVwXHJcbiAgICBpZiAoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAgfHwgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHJlYWN0aW9uU2NoZWR1bGVyKHJ1blJlYWN0aW9uc0hlbHBlcik7XHJcbn1cclxuZnVuY3Rpb24gcnVuUmVhY3Rpb25zSGVscGVyKCkge1xyXG4gICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zID0gdHJ1ZTtcclxuICAgIHZhciBhbGxSZWFjdGlvbnMgPSBnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zO1xyXG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xyXG4gICAgLy8gV2hpbGUgcnVubmluZyByZWFjdGlvbnMsIG5ldyByZWFjdGlvbnMgbWlnaHQgYmUgdHJpZ2dlcmVkLlxyXG4gICAgLy8gSGVuY2Ugd2Ugd29yayB3aXRoIHR3byB2YXJpYWJsZXMgYW5kIGNoZWNrIHdoZXRoZXJcclxuICAgIC8vIHdlIGNvbnZlcmdlIHRvIG5vIHJlbWFpbmluZyByZWFjdGlvbnMgYWZ0ZXIgYSB3aGlsZS5cclxuICAgIHdoaWxlIChhbGxSZWFjdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGlmICgrK2l0ZXJhdGlvbnMgPT09IE1BWF9SRUFDVElPTl9JVEVSQVRJT05TKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdGlvbiBkb2Vzbid0IGNvbnZlcmdlIHRvIGEgc3RhYmxlIHN0YXRlIGFmdGVyIFwiICsgTUFYX1JFQUNUSU9OX0lURVJBVElPTlMgKyBcIiBpdGVyYXRpb25zLlwiICtcclxuICAgICAgICAgICAgICAgIChcIiBQcm9iYWJseSB0aGVyZSBpcyBhIGN5Y2xlIGluIHRoZSByZWFjdGl2ZSBmdW5jdGlvbjogXCIgKyBhbGxSZWFjdGlvbnNbMF0pKTtcclxuICAgICAgICAgICAgYWxsUmVhY3Rpb25zLnNwbGljZSgwKTsgLy8gY2xlYXIgcmVhY3Rpb25zXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZW1haW5pbmdSZWFjdGlvbnMgPSBhbGxSZWFjdGlvbnMuc3BsaWNlKDApO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVtYWluaW5nUmVhY3Rpb25zLmxlbmd0aDsgaSA8IGw7IGkrKylcclxuICAgICAgICAgICAgcmVtYWluaW5nUmVhY3Rpb25zW2ldLnJ1blJlYWN0aW9uKCk7XHJcbiAgICB9XHJcbiAgICBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMgPSBmYWxzZTtcclxufVxyXG52YXIgaXNSZWFjdGlvbiA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJSZWFjdGlvblwiLCBSZWFjdGlvbik7XHJcbmZ1bmN0aW9uIHNldFJlYWN0aW9uU2NoZWR1bGVyKGZuKSB7XHJcbiAgICB2YXIgYmFzZVNjaGVkdWxlciA9IHJlYWN0aW9uU2NoZWR1bGVyO1xyXG4gICAgcmVhY3Rpb25TY2hlZHVsZXIgPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZm4oZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFzZVNjaGVkdWxlcihmKTsgfSk7IH07XHJcbn1cblxuZnVuY3Rpb24gaXNTcHlFbmFibGVkKCkge1xyXG4gICAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhIWdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5sZW5ndGg7XHJcbn1cclxuZnVuY3Rpb24gc3B5UmVwb3J0KGV2ZW50KSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgIHJldHVybjsgLy8gZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGNhbiBkbyB0aGUgcmVzdFxyXG4gICAgaWYgKCFnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnM7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsOyBpKyspXHJcbiAgICAgICAgbGlzdGVuZXJzW2ldKGV2ZW50KTtcclxufVxyXG5mdW5jdGlvbiBzcHlSZXBvcnRTdGFydChldmVudCkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgY2hhbmdlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50KSwgeyBzcHlSZXBvcnRTdGFydDogdHJ1ZSB9KTtcclxuICAgIHNweVJlcG9ydChjaGFuZ2UpO1xyXG59XHJcbnZhciBFTkRfRVZFTlQgPSB7IHNweVJlcG9ydEVuZDogdHJ1ZSB9O1xyXG5mdW5jdGlvbiBzcHlSZXBvcnRFbmQoY2hhbmdlKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmIChjaGFuZ2UpXHJcbiAgICAgICAgc3B5UmVwb3J0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IHNweVJlcG9ydEVuZDogdHJ1ZSB9KSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgc3B5UmVwb3J0KEVORF9FVkVOVCk7XHJcbn1cclxuZnVuY3Rpb24gc3B5KGxpc3RlbmVyKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnguc3B5XSBJcyBhIG5vLW9wIGluIHByb2R1Y3Rpb24gYnVpbGRzXCIpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgICAgcmV0dXJuIG9uY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMgPSBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsICE9PSBsaXN0ZW5lcjsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gZG9udFJlYXNzaWduRmllbGRzKCkge1xyXG4gICAgZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJAYWN0aW9uIGZpZWxkcyBhcmUgbm90IHJlYXNzaWduYWJsZVwiKTtcclxufVxyXG5mdW5jdGlvbiBuYW1lZEFjdGlvbkRlY29yYXRvcihuYW1lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcCwgZGVzY3JpcHRvcikge1xyXG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgZGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwoXCJAYWN0aW9uIGNhbm5vdCBiZSB1c2VkIHdpdGggZ2V0dGVyc1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBiYWJlbCAvIHR5cGVzY3JpcHRcclxuICAgICAgICAgICAgLy8gQGFjdGlvbiBtZXRob2QoKSB7IH1cclxuICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3IudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHR5cGVzY3JpcHRcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNyZWF0ZUFjdGlvbihuYW1lLCBkZXNjcmlwdG9yLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUgLy8gZm9yIHR5cGVzY3JpcHQsIHRoaXMgbXVzdCBiZSB3cml0YWJsZSwgb3RoZXJ3aXNlIGl0IGNhbm5vdCBpbmhlcml0IDovIChzZWUgaW5oZXJpdGFibGUgYWN0aW9ucyB0ZXN0KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBiYWJlbCBvbmx5OiBAYWN0aW9uIG1ldGhvZCA9ICgpID0+IHt9XHJcbiAgICAgICAgICAgIHZhciBpbml0aWFsaXplcl8xID0gZGVzY3JpcHRvci5pbml0aWFsaXplcjtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE4uQjogd2UgY2FuJ3QgaW1tZWRpYXRlbHkgaW52b2tlIGluaXRpYWxpemVyOyB0aGlzIHdvdWxkIGJlIHdyb25nXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUFjdGlvbihuYW1lLCBpbml0aWFsaXplcl8xLmNhbGwodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBib3VuZCBpbnN0YW5jZSBtZXRob2RzXHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbkZpZWxkRGVjb3JhdG9yKG5hbWUpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGFjdGlvbkZpZWxkRGVjb3JhdG9yKG5hbWUpIHtcclxuICAgIC8vIFNpbXBsZSBwcm9wZXJ0eSB0aGF0IHdyaXRlcyBvbiBmaXJzdCBpbnZvY2F0aW9uIHRvIHRoZSBjdXJyZW50IGluc3RhbmNlXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcCwgZGVzY3JpcHRvcikge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIHtcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWRkSGlkZGVuUHJvcCh0aGlzLCBwcm9wLCBhY3Rpb24obmFtZSwgdmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBib3VuZEFjdGlvbkRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvciwgYXBwbHlUb0luc3RhbmNlKSB7XHJcbiAgICBpZiAoYXBwbHlUb0luc3RhbmNlID09PSB0cnVlKSB7XHJcbiAgICAgICAgZGVmaW5lQm91bmRBY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IudmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICAvLyBpZiAoZGVzY3JpcHRvci52YWx1ZSlcclxuICAgICAgICAvLyBUeXBlc2NyaXB0IC8gQmFiZWw6IEBhY3Rpb24uYm91bmQgbWV0aG9kKCkgeyB9XHJcbiAgICAgICAgLy8gYWxzbzogYmFiZWwgQGFjdGlvbi5ib3VuZCBtZXRob2QgPSAoKSA9PiB7fVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZGVmaW5lQm91bmRBY3Rpb24odGhpcywgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLnZhbHVlIHx8IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGRvbnRSZWFzc2lnbkZpZWxkc1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyBmaWVsZCBkZWNvcmF0b3IgVHlwZXNjcmlwdCBAYWN0aW9uLmJvdW5kIG1ldGhvZCA9ICgpID0+IHt9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIGRlZmluZUJvdW5kQWN0aW9uKHRoaXMsIHByb3BlcnR5TmFtZSwgdik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbnZhciBhY3Rpb24gPSBmdW5jdGlvbiBhY3Rpb24oYXJnMSwgYXJnMiwgYXJnMywgYXJnNCkge1xyXG4gICAgLy8gYWN0aW9uKGZuKCkge30pXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIHJldHVybiBjcmVhdGVBY3Rpb24oYXJnMS5uYW1lIHx8IFwiPHVubmFtZWQgYWN0aW9uPlwiLCBhcmcxKTtcclxuICAgIC8vIGFjdGlvbihcIm5hbWVcIiwgZm4oKSB7fSlcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBhcmcyID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFjdGlvbihhcmcxLCBhcmcyKTtcclxuICAgIC8vIEBhY3Rpb24oXCJuYW1lXCIpIGZuKCkge31cclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmcxID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgIHJldHVybiBuYW1lZEFjdGlvbkRlY29yYXRvcihhcmcxKTtcclxuICAgIC8vIEBhY3Rpb24gZm4oKSB7fVxyXG4gICAgaWYgKGFyZzQgPT09IHRydWUpIHtcclxuICAgICAgICAvLyBhcHBseSB0byBpbnN0YW5jZSBpbW1lZGlhdGVseVxyXG4gICAgICAgIGFkZEhpZGRlblByb3AoYXJnMSwgYXJnMiwgY3JlYXRlQWN0aW9uKGFyZzEubmFtZSB8fCBhcmcyLCBhcmczLnZhbHVlLCB0aGlzKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbmFtZWRBY3Rpb25EZWNvcmF0b3IoYXJnMikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgIH1cclxufTtcclxuYWN0aW9uLmJvdW5kID0gYm91bmRBY3Rpb25EZWNvcmF0b3I7XHJcbmZ1bmN0aW9uIHJ1bkluQWN0aW9uKGFyZzEsIGFyZzIpIHtcclxuICAgIHZhciBhY3Rpb25OYW1lID0gdHlwZW9mIGFyZzEgPT09IFwic3RyaW5nXCIgPyBhcmcxIDogYXJnMS5uYW1lIHx8IFwiPHVubmFtZWQgYWN0aW9uPlwiO1xyXG4gICAgdmFyIGZuID0gdHlwZW9mIGFyZzEgPT09IFwiZnVuY3Rpb25cIiA/IGFyZzEgOiBhcmcyO1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiAmJiBmbi5sZW5ndGggPT09IDAsIFwiYHJ1bkluQWN0aW9uYCBleHBlY3RzIGEgZnVuY3Rpb24gd2l0aG91dCBhcmd1bWVudHNcIik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25OYW1lICE9PSBcInN0cmluZ1wiIHx8ICFhY3Rpb25OYW1lKVxyXG4gICAgICAgICAgICBmYWlsKFwiYWN0aW9ucyBzaG91bGQgaGF2ZSB2YWxpZCBuYW1lcywgZ290OiAnXCIgKyBhY3Rpb25OYW1lICsgXCInXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4sIHRoaXMsIHVuZGVmaW5lZCk7XHJcbn1cclxuZnVuY3Rpb24gaXNBY3Rpb24odGhpbmcpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IFwiZnVuY3Rpb25cIiAmJiB0aGluZy5pc01vYnhBY3Rpb24gPT09IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gZGVmaW5lQm91bmRBY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGZuKSB7XHJcbiAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgcHJvcGVydHlOYW1lLCBjcmVhdGVBY3Rpb24ocHJvcGVydHlOYW1lLCBmbi5iaW5kKHRhcmdldCkpKTtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIG5hbWVkIHJlYWN0aXZlIHZpZXcgYW5kIGtlZXBzIGl0IGFsaXZlLCBzbyB0aGF0IHRoZSB2aWV3IGlzIGFsd2F5c1xyXG4gKiB1cGRhdGVkIGlmIG9uZSBvZiB0aGUgZGVwZW5kZW5jaWVzIGNoYW5nZXMsIGV2ZW4gd2hlbiB0aGUgdmlldyBpcyBub3QgZnVydGhlciB1c2VkIGJ5IHNvbWV0aGluZyBlbHNlLlxyXG4gKiBAcGFyYW0gdmlldyBUaGUgcmVhY3RpdmUgdmlld1xyXG4gKiBAcmV0dXJucyBkaXNwb3NlciBmdW5jdGlvbiwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc3RvcCB0aGUgdmlldyBmcm9tIGJlaW5nIHVwZGF0ZWQgaW4gdGhlIGZ1dHVyZS5cclxuICovXHJcbmZ1bmN0aW9uIGF1dG9ydW4odmlldywgb3B0cykge1xyXG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0gRU1QVFlfT0JKRUNUOyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB2aWV3ID09PSBcImZ1bmN0aW9uXCIsIFwiQXV0b3J1biBleHBlY3RzIGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcIik7XHJcbiAgICAgICAgaW52YXJpYW50KGlzQWN0aW9uKHZpZXcpID09PSBmYWxzZSwgXCJBdXRvcnVuIGRvZXMgbm90IGFjY2VwdCBhY3Rpb25zIHNpbmNlIGFjdGlvbnMgYXJlIHVudHJhY2thYmxlXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG5hbWUgPSAob3B0cyAmJiBvcHRzLm5hbWUpIHx8IHZpZXcubmFtZSB8fCBcIkF1dG9ydW5AXCIgKyBnZXROZXh0SWQoKTtcclxuICAgIHZhciBydW5TeW5jID0gIW9wdHMuc2NoZWR1bGVyICYmICFvcHRzLmRlbGF5O1xyXG4gICAgdmFyIHJlYWN0aW9uO1xyXG4gICAgaWYgKHJ1blN5bmMpIHtcclxuICAgICAgICAvLyBub3JtYWwgYXV0b3J1blxyXG4gICAgICAgIHJlYWN0aW9uID0gbmV3IFJlYWN0aW9uKG5hbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy50cmFjayhyZWFjdGlvblJ1bm5lcik7XHJcbiAgICAgICAgfSwgb3B0cy5vbkVycm9yLCBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgc2NoZWR1bGVyXzEgPSBjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyhvcHRzKTtcclxuICAgICAgICAvLyBkZWJvdW5jZWQgYXV0b3J1blxyXG4gICAgICAgIHZhciBpc1NjaGVkdWxlZF8xID0gZmFsc2U7XHJcbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24obmFtZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWlzU2NoZWR1bGVkXzEpIHtcclxuICAgICAgICAgICAgICAgIGlzU2NoZWR1bGVkXzEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyXzEoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2NoZWR1bGVkXzEgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlYWN0aW9uLmlzRGlzcG9zZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0aW9uLnRyYWNrKHJlYWN0aW9uUnVubmVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0cy5vbkVycm9yLCBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZWFjdGlvblJ1bm5lcigpIHtcclxuICAgICAgICB2aWV3KHJlYWN0aW9uKTtcclxuICAgIH1cclxuICAgIHJlYWN0aW9uLnNjaGVkdWxlKCk7XHJcbiAgICByZXR1cm4gcmVhY3Rpb24uZ2V0RGlzcG9zZXIoKTtcclxufVxyXG52YXIgcnVuID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYoKTsgfTtcclxuZnVuY3Rpb24gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0cykge1xyXG4gICAgcmV0dXJuIG9wdHMuc2NoZWR1bGVyXHJcbiAgICAgICAgPyBvcHRzLnNjaGVkdWxlclxyXG4gICAgICAgIDogb3B0cy5kZWxheVxyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChmKSB7IHJldHVybiBzZXRUaW1lb3V0KGYsIG9wdHMuZGVsYXkpOyB9XHJcbiAgICAgICAgICAgIDogcnVuO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWN0aW9uKGV4cHJlc3Npb24sIGVmZmVjdCwgb3B0cykge1xyXG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0gRU1QVFlfT0JKRUNUOyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBleHByZXNzaW9uID09PSBcImZ1bmN0aW9uXCIsIFwiRmlyc3QgYXJndW1lbnQgdG8gcmVhY3Rpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBvcHRzID09PSBcIm9iamVjdFwiLCBcIlRoaXJkIGFyZ3VtZW50IG9mIHJlYWN0aW9ucyBzaG91bGQgYmUgYW4gb2JqZWN0XCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG5hbWUgPSBvcHRzLm5hbWUgfHwgXCJSZWFjdGlvbkBcIiArIGdldE5leHRJZCgpO1xyXG4gICAgdmFyIGVmZmVjdEFjdGlvbiA9IGFjdGlvbihuYW1lLCBvcHRzLm9uRXJyb3IgPyB3cmFwRXJyb3JIYW5kbGVyKG9wdHMub25FcnJvciwgZWZmZWN0KSA6IGVmZmVjdCk7XHJcbiAgICB2YXIgcnVuU3luYyA9ICFvcHRzLnNjaGVkdWxlciAmJiAhb3B0cy5kZWxheTtcclxuICAgIHZhciBzY2hlZHVsZXIgPSBjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyhvcHRzKTtcclxuICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xyXG4gICAgdmFyIGlzU2NoZWR1bGVkID0gZmFsc2U7XHJcbiAgICB2YXIgdmFsdWU7XHJcbiAgICB2YXIgZXF1YWxzID0gb3B0cy5jb21wYXJlU3RydWN0dXJhbFxyXG4gICAgICAgID8gY29tcGFyZXIuc3RydWN0dXJhbFxyXG4gICAgICAgIDogb3B0cy5lcXVhbHMgfHwgY29tcGFyZXIuZGVmYXVsdDtcclxuICAgIHZhciByID0gbmV3IFJlYWN0aW9uKG5hbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoZmlyc3RUaW1lIHx8IHJ1blN5bmMpIHtcclxuICAgICAgICAgICAgcmVhY3Rpb25SdW5uZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWlzU2NoZWR1bGVkKSB7XHJcbiAgICAgICAgICAgIGlzU2NoZWR1bGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2NoZWR1bGVyKHJlYWN0aW9uUnVubmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBvcHRzLm9uRXJyb3IsIG9wdHMucmVxdWlyZXNPYnNlcnZhYmxlKTtcclxuICAgIGZ1bmN0aW9uIHJlYWN0aW9uUnVubmVyKCkge1xyXG4gICAgICAgIGlzU2NoZWR1bGVkID0gZmFsc2U7IC8vIFE6IG1vdmUgaW50byByZWFjdGlvbiBydW5uZXI/XHJcbiAgICAgICAgaWYgKHIuaXNEaXNwb3NlZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgci50cmFjayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBleHByZXNzaW9uKHIpO1xyXG4gICAgICAgICAgICBjaGFuZ2VkID0gZmlyc3RUaW1lIHx8ICFlcXVhbHModmFsdWUsIG5leHRWYWx1ZSk7XHJcbiAgICAgICAgICAgIHZhbHVlID0gbmV4dFZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChmaXJzdFRpbWUgJiYgb3B0cy5maXJlSW1tZWRpYXRlbHkpXHJcbiAgICAgICAgICAgIGVmZmVjdEFjdGlvbih2YWx1ZSwgcik7XHJcbiAgICAgICAgaWYgKCFmaXJzdFRpbWUgJiYgY2hhbmdlZCA9PT0gdHJ1ZSlcclxuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKHZhbHVlLCByKTtcclxuICAgICAgICBpZiAoZmlyc3RUaW1lKVxyXG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHIuc2NoZWR1bGUoKTtcclxuICAgIHJldHVybiByLmdldERpc3Bvc2VyKCk7XHJcbn1cclxuZnVuY3Rpb24gd3JhcEVycm9ySGFuZGxlcihlcnJvckhhbmRsZXIsIGJhc2VGbikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gYmFzZUZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGVycm9ySGFuZGxlci5jYWxsKHRoaXMsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cblxuZnVuY3Rpb24gb25CZWNvbWVPYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMykge1xyXG4gICAgcmV0dXJuIGludGVyY2VwdEhvb2soXCJvbkJlY29tZU9ic2VydmVkXCIsIHRoaW5nLCBhcmcyLCBhcmczKTtcclxufVxyXG5mdW5jdGlvbiBvbkJlY29tZVVub2JzZXJ2ZWQodGhpbmcsIGFyZzIsIGFyZzMpIHtcclxuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKFwib25CZWNvbWVVbm9ic2VydmVkXCIsIHRoaW5nLCBhcmcyLCBhcmczKTtcclxufVxyXG5mdW5jdGlvbiBpbnRlcmNlcHRIb29rKGhvb2ssIHRoaW5nLCBhcmcyLCBhcmczKSB7XHJcbiAgICB2YXIgYXRvbSA9IHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBnZXRBdG9tKHRoaW5nLCBhcmcyKSA6IGdldEF0b20odGhpbmcpO1xyXG4gICAgdmFyIGNiID0gdHlwZW9mIGFyZzMgPT09IFwiZnVuY3Rpb25cIiA/IGFyZzMgOiBhcmcyO1xyXG4gICAgdmFyIGxpc3RlbmVyc0tleSA9IGhvb2sgKyBcIkxpc3RlbmVyc1wiO1xyXG4gICAgaWYgKGF0b21bbGlzdGVuZXJzS2V5XSkge1xyXG4gICAgICAgIGF0b21bbGlzdGVuZXJzS2V5XS5hZGQoY2IpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldID0gbmV3IFNldChbY2JdKTtcclxuICAgIH1cclxuICAgIHZhciBvcmlnID0gYXRvbVtob29rXTtcclxuICAgIGlmICh0eXBlb2Ygb3JpZyAhPT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcIk5vdCBhbiBhdG9tIHRoYXQgY2FuIGJlICh1bilvYnNlcnZlZFwiKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGhvb2tMaXN0ZW5lcnMgPSBhdG9tW2xpc3RlbmVyc0tleV07XHJcbiAgICAgICAgaWYgKGhvb2tMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgaG9va0xpc3RlbmVycy5kZWxldGUoY2IpO1xyXG4gICAgICAgICAgICBpZiAoaG9va0xpc3RlbmVycy5zaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYXRvbVtsaXN0ZW5lcnNLZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiBjb25maWd1cmUob3B0aW9ucykge1xyXG4gICAgdmFyIGVuZm9yY2VBY3Rpb25zID0gb3B0aW9ucy5lbmZvcmNlQWN0aW9ucywgY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uID0gb3B0aW9ucy5jb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24sIGNvbXB1dGVkQ29uZmlndXJhYmxlID0gb3B0aW9ucy5jb21wdXRlZENvbmZpZ3VyYWJsZSwgZGlzYWJsZUVycm9yQm91bmRhcmllcyA9IG9wdGlvbnMuZGlzYWJsZUVycm9yQm91bmRhcmllcywgcmVhY3Rpb25TY2hlZHVsZXIgPSBvcHRpb25zLnJlYWN0aW9uU2NoZWR1bGVyLCByZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZSA9IG9wdGlvbnMucmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUsIG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uID0gb3B0aW9ucy5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbjtcclxuICAgIGlmIChvcHRpb25zLmlzb2xhdGVHbG9iYWxTdGF0ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGlzb2xhdGVHbG9iYWxTdGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVuZm9yY2VBY3Rpb25zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZm9yY2VBY3Rpb25zID09PSBcImJvb2xlYW5cIiB8fCBlbmZvcmNlQWN0aW9ucyA9PT0gXCJzdHJpY3RcIilcclxuICAgICAgICAgICAgZGVwcmVjYXRlZChcIkRlcHJlY2F0ZWQgdmFsdWUgZm9yICdlbmZvcmNlQWN0aW9ucycsIHVzZSAnZmFsc2UnID0+ICdcXFwibmV2ZXJcXFwiJywgJ3RydWUnID0+ICdcXFwib2JzZXJ2ZWRcXFwiJywgJ1xcXCJzdHJpY3RcXFwiJyA9PiBcXFwiJ2Fsd2F5cydcXFwiIGluc3RlYWRcIik7XHJcbiAgICAgICAgdmFyIGVhID0gdm9pZCAwO1xyXG4gICAgICAgIHN3aXRjaCAoZW5mb3JjZUFjdGlvbnMpIHtcclxuICAgICAgICAgICAgY2FzZSB0cnVlOlxyXG4gICAgICAgICAgICBjYXNlIFwib2JzZXJ2ZWRcIjpcclxuICAgICAgICAgICAgICAgIGVhID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGZhbHNlOlxyXG4gICAgICAgICAgICBjYXNlIFwibmV2ZXJcIjpcclxuICAgICAgICAgICAgICAgIGVhID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInN0cmljdFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiYWx3YXlzXCI6XHJcbiAgICAgICAgICAgICAgICBlYSA9IFwic3RyaWN0XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGZhaWwoXCJJbnZhbGlkIHZhbHVlIGZvciAnZW5mb3JjZUFjdGlvbnMnOiAnXCIgKyBlbmZvcmNlQWN0aW9ucyArIFwiJywgZXhwZWN0ZWQgJ25ldmVyJywgJ2Fsd2F5cycgb3IgJ29ic2VydmVkJ1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnMgPSBlYTtcclxuICAgICAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IGVhID09PSB0cnVlIHx8IGVhID09PSBcInN0cmljdFwiID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uID0gISFjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb247XHJcbiAgICB9XHJcbiAgICBpZiAocmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlID0gISFyZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZTtcclxuICAgIH1cclxuICAgIGlmIChvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24gPSAhIW9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uO1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9ICFnbG9iYWxTdGF0ZS5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbjtcclxuICAgIH1cclxuICAgIGlmIChjb21wdXRlZENvbmZpZ3VyYWJsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuY29tcHV0ZWRDb25maWd1cmFibGUgPSAhIWNvbXB1dGVkQ29uZmlndXJhYmxlO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc2FibGVFcnJvckJvdW5kYXJpZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChkaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJXQVJOSU5HOiBEZWJ1ZyBmZWF0dXJlIG9ubHkuIE1vYlggd2lsbCBOT1QgcmVjb3ZlciBmcm9tIGVycm9ycyB3aGVuIGBkaXNhYmxlRXJyb3JCb3VuZGFyaWVzYCBpcyBlbmFibGVkLlwiKTtcclxuICAgICAgICBnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID0gISFkaXNhYmxlRXJyb3JCb3VuZGFyaWVzO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlYWN0aW9uU2NoZWR1bGVyKSB7XHJcbiAgICAgICAgc2V0UmVhY3Rpb25TY2hlZHVsZXIocmVhY3Rpb25TY2hlZHVsZXIpO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlKHRoaW5nLCBkZWNvcmF0b3JzKSB7XHJcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICBpbnZhcmlhbnQoaXNQbGFpbk9iamVjdChkZWNvcmF0b3JzKSwgXCJEZWNvcmF0b3JzIHNob3VsZCBiZSBhIGtleSB2YWx1ZSBtYXBcIik7XHJcbiAgICB2YXIgdGFyZ2V0ID0gdHlwZW9mIHRoaW5nID09PSBcImZ1bmN0aW9uXCIgPyB0aGluZy5wcm90b3R5cGUgOiB0aGluZztcclxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICB2YXIgcHJvcGVydHlEZWNvcmF0b3JzID0gZGVjb3JhdG9yc1twcm9wXTtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcGVydHlEZWNvcmF0b3JzKSkge1xyXG4gICAgICAgICAgICBwcm9wZXJ0eURlY29yYXRvcnMgPSBbcHJvcGVydHlEZWNvcmF0b3JzXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIGludmFyaWFudChwcm9wZXJ0eURlY29yYXRvcnMuZXZlcnkoZnVuY3Rpb24gKGRlY29yYXRvcikgeyByZXR1cm4gdHlwZW9mIGRlY29yYXRvciA9PT0gXCJmdW5jdGlvblwiOyB9KSwgXCJEZWNvcmF0ZTogZXhwZWN0ZWQgYSBkZWNvcmF0b3IgZnVuY3Rpb24gb3IgYXJyYXkgb2YgZGVjb3JhdG9yIGZ1bmN0aW9ucyBmb3IgJ1wiICsgcHJvcCArIFwiJ1wiKTtcclxuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKTtcclxuICAgICAgICB2YXIgbmV3RGVzY3JpcHRvciA9IHByb3BlcnR5RGVjb3JhdG9ycy5yZWR1Y2UoZnVuY3Rpb24gKGFjY0Rlc2NyaXB0b3IsIGRlY29yYXRvcikgeyByZXR1cm4gZGVjb3JhdG9yKHRhcmdldCwgcHJvcCwgYWNjRGVzY3JpcHRvcik7IH0sIGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIGlmIChuZXdEZXNjcmlwdG9yKVxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCBuZXdEZXNjcmlwdG9yKTtcclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBwcm9wIGluIGRlY29yYXRvcnMpIHtcclxuICAgICAgICBfbG9vcF8xKHByb3ApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaW5nO1xyXG59XG5cbmZ1bmN0aW9uIGV4dGVuZE9ic2VydmFibGUodGFyZ2V0LCBwcm9wZXJ0aWVzLCBkZWNvcmF0b3JzLCBvcHRpb25zKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaW52YXJpYW50KGFyZ3VtZW50cy5sZW5ndGggPj0gMiAmJiBhcmd1bWVudHMubGVuZ3RoIDw9IDQsIFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdGVkIDItNCBhcmd1bWVudHNcIik7XHJcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIsIFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdHMgYW4gb2JqZWN0IGFzIGZpcnN0IGFyZ3VtZW50XCIpO1xyXG4gICAgICAgIGludmFyaWFudCghaXNPYnNlcnZhYmxlTWFwKHRhcmdldCksIFwiJ2V4dGVuZE9ic2VydmFibGUnIHNob3VsZCBub3QgYmUgdXNlZCBvbiBtYXBzLCB1c2UgbWFwLm1lcmdlIGluc3RlYWRcIik7XHJcbiAgICB9XHJcbiAgICBvcHRpb25zID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKTtcclxuICAgIHZhciBkZWZhdWx0RGVjb3JhdG9yID0gZ2V0RGVmYXVsdERlY29yYXRvckZyb21PYmplY3RPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRhcmdldCk7IC8vIEZpeGVzICMxNzQwXHJcbiAgICBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zLm5hbWUsIGRlZmF1bHREZWNvcmF0b3IuZW5oYW5jZXIpOyAvLyBtYWtlIHN1cmUgb2JqZWN0IGlzIG9ic2VydmFibGUsIGV2ZW4gd2l0aG91dCBpbml0aWFsIHByb3BzXHJcbiAgICBpZiAocHJvcGVydGllcylcclxuICAgICAgICBleHRlbmRPYnNlcnZhYmxlT2JqZWN0V2l0aFByb3BlcnRpZXModGFyZ2V0LCBwcm9wZXJ0aWVzLCBkZWNvcmF0b3JzLCBkZWZhdWx0RGVjb3JhdG9yKTtcclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdERlY29yYXRvckZyb21PYmplY3RPcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBvcHRpb25zLmRlZmF1bHREZWNvcmF0b3IgfHwgKG9wdGlvbnMuZGVlcCA9PT0gZmFsc2UgPyByZWZEZWNvcmF0b3IgOiBkZWVwRGVjb3JhdG9yKTtcclxufVxyXG5mdW5jdGlvbiBleHRlbmRPYnNlcnZhYmxlT2JqZWN0V2l0aFByb3BlcnRpZXModGFyZ2V0LCBwcm9wZXJ0aWVzLCBkZWNvcmF0b3JzLCBkZWZhdWx0RGVjb3JhdG9yKSB7XHJcbiAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpbnZhcmlhbnQoIWlzT2JzZXJ2YWJsZShwcm9wZXJ0aWVzKSwgXCJFeHRlbmRpbmcgYW4gb2JqZWN0IHdpdGggYW5vdGhlciBvYnNlcnZhYmxlIChvYmplY3QpIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBjb25zdHJ1Y3QgYW4gZXhwbGljaXQgcHJvcGVydHltYXAsIHVzaW5nIGB0b0pTYCBpZiBuZWVkLiBTZWUgaXNzdWUgIzU0MFwiKTtcclxuICAgICAgICBpZiAoZGVjb3JhdG9ycykge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldFBsYWluT2JqZWN0S2V5cyhkZWNvcmF0b3JzKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXNfMSA9IF9fdmFsdWVzKGtleXMpLCBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCk7ICFrZXlzXzFfMS5kb25lOyBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c18xXzEudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIHByb3BlcnRpZXMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKFwiVHJ5aW5nIHRvIGRlY2xhcmUgYSBkZWNvcmF0b3IgZm9yIHVuc3BlY2lmaWVkIHByb3BlcnR5ICdcIiArIHN0cmluZ2lmeUtleShrZXkpICsgXCInXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5c18xXzEgJiYgIWtleXNfMV8xLmRvbmUgJiYgKF9hID0ga2V5c18xLnJldHVybikpIF9hLmNhbGwoa2V5c18xKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBnZXRQbGFpbk9iamVjdEtleXMocHJvcGVydGllcyk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5c18yID0gX192YWx1ZXMoa2V5cyksIGtleXNfMl8xID0ga2V5c18yLm5leHQoKTsgIWtleXNfMl8xLmRvbmU7IGtleXNfMl8xID0ga2V5c18yLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNfMl8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3BlcnRpZXMsIGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHByb3BlcnRpZXMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKFwiJ2V4dGVuZE9ic2VydmFiZScgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHMgYXMgc2Vjb25kIGFyZ3VtZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXB1dGVkKGRlc2NyaXB0b3IudmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKFwiUGFzc2luZyBhICdjb21wdXRlZCcgYXMgaW5pdGlhbCBwcm9wZXJ0eSB2YWx1ZSBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGJ5IGV4dGVuZE9ic2VydmFibGUuIFVzZSBhIGdldHRlciBvciBkZWNvcmF0b3IgaW5zdGVhZFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzICYmIGtleSBpbiBkZWNvcmF0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgPyBkZWNvcmF0b3JzW2tleV1cclxuICAgICAgICAgICAgICAgICAgICA6IGRlc2NyaXB0b3IuZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY29tcHV0ZWREZWNvcmF0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBkZWZhdWx0RGVjb3JhdG9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB0eXBlb2YgZGVjb3JhdG9yICE9PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbChcIk5vdCBhIHZhbGlkIGRlY29yYXRvciBmb3IgJ1wiICsgc3RyaW5naWZ5S2V5KGtleSkgKyBcIicsIGdvdDogXCIgKyBkZWNvcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdERlc2NyaXB0b3IgPSBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdERlc2NyaXB0b3IgLy8gb3RoZXJ3aXNlLCBhc3N1bWUgYWxyZWFkeSBhcHBsaWVkLCBkdWUgdG8gYGFwcGx5VG9JbnN0YW5jZWBcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHJlc3VsdERlc2NyaXB0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5c18yXzEgJiYgIWtleXNfMl8xLmRvbmUgJiYgKF9iID0ga2V5c18yLnJldHVybikpIF9iLmNhbGwoa2V5c18yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgZW5kQmF0Y2goKTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmN5VHJlZSh0aGluZywgcHJvcGVydHkpIHtcclxuICAgIHJldHVybiBub2RlVG9EZXBlbmRlbmN5VHJlZShnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSkpO1xyXG59XHJcbmZ1bmN0aW9uIG5vZGVUb0RlcGVuZGVuY3lUcmVlKG5vZGUpIHtcclxuICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lXHJcbiAgICB9O1xyXG4gICAgaWYgKG5vZGUub2JzZXJ2aW5nICYmIG5vZGUub2JzZXJ2aW5nLmxlbmd0aCA+IDApXHJcbiAgICAgICAgcmVzdWx0LmRlcGVuZGVuY2llcyA9IHVuaXF1ZShub2RlLm9ic2VydmluZykubWFwKG5vZGVUb0RlcGVuZGVuY3lUcmVlKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJUcmVlKHRoaW5nLCBwcm9wZXJ0eSkge1xyXG4gICAgcmV0dXJuIG5vZGVUb09ic2VydmVyVHJlZShnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSkpO1xyXG59XHJcbmZ1bmN0aW9uIG5vZGVUb09ic2VydmVyVHJlZShub2RlKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZVxyXG4gICAgfTtcclxuICAgIGlmIChoYXNPYnNlcnZlcnMobm9kZSkpXHJcbiAgICAgICAgcmVzdWx0Lm9ic2VydmVycyA9IEFycmF5LmZyb20oZ2V0T2JzZXJ2ZXJzKG5vZGUpKS5tYXAobm9kZVRvT2JzZXJ2ZXJUcmVlKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cblxudmFyIGdlbmVyYXRvcklkID0gMDtcclxuZnVuY3Rpb24gRmxvd0NhbmNlbGxhdGlvbkVycm9yKCkge1xyXG4gICAgdGhpcy5tZXNzYWdlID0gXCJGTE9XX0NBTkNFTExFRFwiO1xyXG59XHJcbkZsb3dDYW5jZWxsYXRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XHJcbmZ1bmN0aW9uIGlzRmxvd0NhbmNlbGxhdGlvbkVycm9yKGVycm9yKSB7XHJcbiAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBGbG93Q2FuY2VsbGF0aW9uRXJyb3I7XHJcbn1cclxuZnVuY3Rpb24gZmxvdyhnZW5lcmF0b3IpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxyXG4gICAgICAgIGZhaWwoISFwcm9jZXNzLmVudi5OT0RFX0VOViAmJiBcIkZsb3cgZXhwZWN0cyAxIGFyZ3VtZW50IGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBkZWNvcmF0b3JcIik7XHJcbiAgICB2YXIgbmFtZSA9IGdlbmVyYXRvci5uYW1lIHx8IFwiPHVubmFtZWQgZmxvdz5cIjtcclxuICAgIC8vIEltcGxlbWVudGF0aW9uIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS90ai9jby9ibG9iL21hc3Rlci9pbmRleC5qc1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY3R4ID0gdGhpcztcclxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICB2YXIgcnVuSWQgPSArK2dlbmVyYXRvcklkO1xyXG4gICAgICAgIHZhciBnZW4gPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIGluaXRcIiwgZ2VuZXJhdG9yKS5hcHBseShjdHgsIGFyZ3MpO1xyXG4gICAgICAgIHZhciByZWplY3RvcjtcclxuICAgICAgICB2YXIgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciBzdGVwSWQgPSAwO1xyXG4gICAgICAgICAgICByZWplY3RvciA9IHJlamVjdDtcclxuICAgICAgICAgICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzKSB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHZhciByZXQ7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGFjdGlvbihuYW1lICsgXCIgLSBydW5pZDogXCIgKyBydW5JZCArIFwiIC0geWllbGQgXCIgKyBzdGVwSWQrKywgZ2VuLm5leHQpLmNhbGwoZ2VuLCByZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmV4dChyZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uUmVqZWN0ZWQoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHZhciByZXQ7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGFjdGlvbihuYW1lICsgXCIgLSBydW5pZDogXCIgKyBydW5JZCArIFwiIC0geWllbGQgXCIgKyBzdGVwSWQrKywgZ2VuLnRocm93KS5jYWxsKGdlbiwgZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQocmV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBuZXh0KHJldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldCAmJiB0eXBlb2YgcmV0LnRoZW4gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFzeW5jIGl0ZXJhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LnRoZW4obmV4dCwgcmVqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0LmRvbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmV0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJldC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1Byb21pc2UudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb25GdWxmaWxsZWQodW5kZWZpbmVkKTsgLy8ga2ljayBvZmYgdGhlIHByb2Nlc3NcclxuICAgICAgICB9KTtcclxuICAgICAgICBwcm9taXNlLmNhbmNlbCA9IGFjdGlvbihuYW1lICsgXCIgLSBydW5pZDogXCIgKyBydW5JZCArIFwiIC0gY2FuY2VsXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nUHJvbWlzZSlcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxQcm9taXNlKHBlbmRpbmdQcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHkgYmxvY2sgY2FuIHJldHVybiAob3IgeWllbGQpIHN0dWZmLi5cclxuICAgICAgICAgICAgICAgIHZhciByZXMgPSBnZW4ucmV0dXJuKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICAvLyBlYXQgYW55dGhpbmcgdGhhdCBwcm9taXNlIHdvdWxkIGRvLCBpdCdzIGNhbmNlbGxlZCFcclxuICAgICAgICAgICAgICAgIHZhciB5aWVsZGVkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShyZXMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgeWllbGRlZFByb21pc2UudGhlbihub29wLCBub29wKTtcclxuICAgICAgICAgICAgICAgIGNhbmNlbFByb21pc2UoeWllbGRlZFByb21pc2UpOyAvLyBtYXliZSBpdCBjYW4gYmUgY2FuY2VsbGVkIDopXHJcbiAgICAgICAgICAgICAgICAvLyByZWplY3Qgb3VyIG9yaWdpbmFsIHByb21pc2VcclxuICAgICAgICAgICAgICAgIHJlamVjdG9yKG5ldyBGbG93Q2FuY2VsbGF0aW9uRXJyb3IoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdG9yKGUpOyAvLyB0aGVyZSBjb3VsZCBiZSBhIHRocm93aW5nIGZpbmFsbHkgYmxvY2tcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjYW5jZWxQcm9taXNlKHByb21pc2UpIHtcclxuICAgIGlmICh0eXBlb2YgcHJvbWlzZS5jYW5jZWwgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBwcm9taXNlLmNhbmNlbCgpO1xyXG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdFJlYWRzKHRoaW5nLCBwcm9wT3JIYW5kbGVyLCBoYW5kbGVyKSB7XHJcbiAgICB2YXIgdGFyZ2V0O1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0aGluZykgfHwgaXNPYnNlcnZhYmxlQXJyYXkodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVZhbHVlKHRoaW5nKSkge1xyXG4gICAgICAgIHRhcmdldCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh0aGluZykpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHByb3BPckhhbmRsZXIgIT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAgICAgXCJJbnRlcmNlcHRSZWFkcyBjYW4gb25seSBiZSB1c2VkIHdpdGggYSBzcGVjaWZpYyBwcm9wZXJ0eSwgbm90IHdpdGggYW4gb2JqZWN0IGluIGdlbmVyYWxcIik7XHJcbiAgICAgICAgdGFyZ2V0ID0gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BPckhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIFwiRXhwZWN0ZWQgb2JzZXJ2YWJsZSBtYXAsIG9iamVjdCBvciBhcnJheSBhcyBmaXJzdCBhcnJheVwiKTtcclxuICAgIH1cclxuICAgIGlmICh0YXJnZXQuZGVoYW5jZXIgIT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJBbiBpbnRlcmNlcHQgcmVhZGVyIHdhcyBhbHJlYWR5IGVzdGFibGlzaGVkXCIpO1xyXG4gICAgdGFyZ2V0LmRlaGFuY2VyID0gdHlwZW9mIHByb3BPckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIiA/IHByb3BPckhhbmRsZXIgOiBoYW5kbGVyO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0YXJnZXQuZGVoYW5jZXIgPSB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdCh0aGluZywgcHJvcE9ySGFuZGxlciwgaGFuZGxlcikge1xyXG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdFByb3BlcnR5KHRoaW5nLCBwcm9wT3JIYW5kbGVyLCBoYW5kbGVyKTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gaW50ZXJjZXB0SW50ZXJjZXB0YWJsZSh0aGluZywgcHJvcE9ySGFuZGxlcik7XHJcbn1cclxuZnVuY3Rpb24gaW50ZXJjZXB0SW50ZXJjZXB0YWJsZSh0aGluZywgaGFuZGxlcikge1xyXG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKS5pbnRlcmNlcHQoaGFuZGxlcik7XHJcbn1cclxuZnVuY3Rpb24gaW50ZXJjZXB0UHJvcGVydHkodGhpbmcsIHByb3BlcnR5LCBoYW5kbGVyKSB7XHJcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KS5pbnRlcmNlcHQoaGFuZGxlcik7XHJcbn1cblxuZnVuY3Rpb24gX2lzQ29tcHV0ZWQodmFsdWUsIHByb3BlcnR5KSB7XHJcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodmFsdWUpID09PSBmYWxzZSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmICghdmFsdWVbJG1vYnhdLnZhbHVlcy5oYXMocHJvcGVydHkpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIGF0b20gPSBnZXRBdG9tKHZhbHVlLCBwcm9wZXJ0eSk7XHJcbiAgICAgICAgcmV0dXJuIGlzQ29tcHV0ZWRWYWx1ZShhdG9tKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpc0NvbXB1dGVkVmFsdWUodmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQ29tcHV0ZWQodmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSlcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCJpc0NvbXB1dGVkIGV4cGVjdHMgb25seSAxIGFyZ3VtZW50LiBVc2UgaXNPYnNlcnZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlcIik7XHJcbiAgICByZXR1cm4gX2lzQ29tcHV0ZWQodmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQ29tcHV0ZWRQcm9wKHZhbHVlLCBwcm9wTmFtZSkge1xyXG4gICAgaWYgKHR5cGVvZiBwcm9wTmFtZSAhPT0gXCJzdHJpbmdcIilcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCJpc0NvbXB1dGVkIGV4cGVjdGVkIGEgcHJvcGVydHkgbmFtZSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XHJcbiAgICByZXR1cm4gX2lzQ29tcHV0ZWQodmFsdWUsIHByb3BOYW1lKTtcclxufVxuXG5mdW5jdGlvbiBfaXNPYnNlcnZhYmxlKHZhbHVlLCBwcm9wZXJ0eSkge1xyXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIChpc09ic2VydmFibGVNYXAodmFsdWUpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHZhbHVlKSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKFwiaXNPYnNlcnZhYmxlKG9iamVjdCwgcHJvcGVydHlOYW1lKSBpcyBub3Qgc3VwcG9ydGVkIGZvciBhcnJheXMgYW5kIG1hcHMuIFVzZSBtYXAuaGFzIG9yIGFycmF5Lmxlbmd0aCBpbnN0ZWFkLlwiKTtcclxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVbJG1vYnhdLnZhbHVlcy5oYXMocHJvcGVydHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBGb3IgZmlyc3QgY2hlY2ssIHNlZSAjNzAxXHJcbiAgICByZXR1cm4gKGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkgfHxcclxuICAgICAgICAhIXZhbHVlWyRtb2J4XSB8fFxyXG4gICAgICAgIGlzQXRvbSh2YWx1ZSkgfHxcclxuICAgICAgICBpc1JlYWN0aW9uKHZhbHVlKSB8fFxyXG4gICAgICAgIGlzQ29tcHV0ZWRWYWx1ZSh2YWx1ZSkpO1xyXG59XHJcbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEpXHJcbiAgICAgICAgZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCJpc09ic2VydmFibGUgZXhwZWN0cyBvbmx5IDEgYXJndW1lbnQuIFVzZSBpc09ic2VydmFibGVQcm9wIHRvIGluc3BlY3QgdGhlIG9ic2VydmFiaWxpdHkgb2YgYSBwcm9wZXJ0eVwiKTtcclxuICAgIHJldHVybiBfaXNPYnNlcnZhYmxlKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiBpc09ic2VydmFibGVQcm9wKHZhbHVlLCBwcm9wTmFtZSkge1xyXG4gICAgaWYgKHR5cGVvZiBwcm9wTmFtZSAhPT0gXCJzdHJpbmdcIilcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJleHBlY3RlZCBhIHByb3BlcnR5IG5hbWUgYXMgc2Vjb25kIGFyZ3VtZW50XCIpO1xyXG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BOYW1lKTtcclxufVxuXG5mdW5jdGlvbiBrZXlzKG9iaikge1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ialskbW9ieF0uZ2V0S2V5cygpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ob2JqLmtleXMoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmoua2V5cygpKTtcclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7IHJldHVybiBpbmRleDsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICBcIidrZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMsIHNldHMgYW5kIG1hcHNcIik7XHJcbn1cclxuZnVuY3Rpb24gdmFsdWVzKG9iaikge1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gb2JqW2tleV07IH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gb2JqLmdldChrZXkpOyB9KTtcclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iai52YWx1ZXMoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmouc2xpY2UoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgIFwiJ3ZhbHVlcygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzLCBzZXRzIGFuZCBtYXBzXCIpO1xyXG59XHJcbmZ1bmN0aW9uIGVudHJpZXMob2JqKSB7XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcclxuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBba2V5LCBvYmpba2V5XV07IH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gW2tleSwgb2JqLmdldChrZXkpXTsgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmouZW50cmllcygpKTtcclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoZnVuY3Rpb24gKGtleSwgaW5kZXgpIHsgcmV0dXJuIFtpbmRleCwga2V5XTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICBcIidlbnRyaWVzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XHJcbn1cclxuZnVuY3Rpb24gc2V0KG9iaiwga2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgIWlzT2JzZXJ2YWJsZVNldChvYmopKSB7XHJcbiAgICAgICAgc3RhcnRCYXRjaCgpO1xyXG4gICAgICAgIHZhciB2YWx1ZXNfMSA9IGtleTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXlfMSBpbiB2YWx1ZXNfMSlcclxuICAgICAgICAgICAgICAgIHNldChvYmosIGtleV8xLCB2YWx1ZXNfMVtrZXlfMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgZW5kQmF0Y2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XHJcbiAgICAgICAgdmFyIGFkbSA9IG9ialskbW9ieF07XHJcbiAgICAgICAgdmFyIGV4aXN0aW5nT2JzZXJ2YWJsZSA9IGFkbS52YWx1ZXMuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nT2JzZXJ2YWJsZSkge1xyXG4gICAgICAgICAgICBhZG0ud3JpdGUoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhZG0uYWRkT2JzZXJ2YWJsZVByb3Aoa2V5LCB2YWx1ZSwgYWRtLmRlZmF1bHRFbmhhbmNlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcclxuICAgICAgICBvYmouc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcclxuICAgICAgICBvYmouYWRkKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgIGtleSA9IHBhcnNlSW50KGtleSwgMTApO1xyXG4gICAgICAgIGludmFyaWFudChrZXkgPj0gMCwgXCJOb3QgYSB2YWxpZCBpbmRleDogJ1wiICsga2V5ICsgXCInXCIpO1xyXG4gICAgICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgICAgICBpZiAoa2V5ID49IG9iai5sZW5ndGgpXHJcbiAgICAgICAgICAgIG9iai5sZW5ndGggPSBrZXkgKyAxO1xyXG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgZW5kQmF0Y2goKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBcIidzZXQoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZW1vdmUob2JqLCBrZXkpIHtcclxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIG9ialskbW9ieF0ucmVtb3ZlKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xyXG4gICAgICAgIG9iai5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XHJcbiAgICAgICAgb2JqLmRlbGV0ZShrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKVxyXG4gICAgICAgICAgICBrZXkgPSBwYXJzZUludChrZXksIDEwKTtcclxuICAgICAgICBpbnZhcmlhbnQoa2V5ID49IDAsIFwiTm90IGEgdmFsaWQgaW5kZXg6ICdcIiArIGtleSArIFwiJ1wiKTtcclxuICAgICAgICBvYmouc3BsaWNlKGtleSwgMSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCIncmVtb3ZlKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcclxuICAgICAgICAvLyByZXR1cm4ga2V5cyhvYmopLmluZGV4T2Yoa2V5KSA+PSAwXHJcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbWluaXN0cmF0aW9uKG9iaik7XHJcbiAgICAgICAgcmV0dXJuIGFkbS5oYXMoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iai5oYXMoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iai5oYXMoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcclxuICAgICAgICByZXR1cm4ga2V5ID49IDAgJiYga2V5IDwgb2JqLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBcIidoYXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXQob2JqLCBrZXkpIHtcclxuICAgIGlmICghaGFzKG9iaiwga2V5KSlcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcclxuICAgICAgICByZXR1cm4gb2JqLmdldChrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBcIidnZXQoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiKTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBvYnNlcnZlKHRoaW5nLCBwcm9wT3JDYiwgY2JPckZpcmUsIGZpcmVJbW1lZGlhdGVseSkge1xyXG4gICAgaWYgKHR5cGVvZiBjYk9yRmlyZSA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIHJldHVybiBvYnNlcnZlT2JzZXJ2YWJsZVByb3BlcnR5KHRoaW5nLCBwcm9wT3JDYiwgY2JPckZpcmUsIGZpcmVJbW1lZGlhdGVseSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmVPYnNlcnZhYmxlKHRoaW5nLCBwcm9wT3JDYiwgY2JPckZpcmUpO1xyXG59XHJcbmZ1bmN0aW9uIG9ic2VydmVPYnNlcnZhYmxlKHRoaW5nLCBsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcpLm9ic2VydmUobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSk7XHJcbn1cclxuZnVuY3Rpb24gb2JzZXJ2ZU9ic2VydmFibGVQcm9wZXJ0eSh0aGluZywgcHJvcGVydHksIGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZywgcHJvcGVydHkpLm9ic2VydmUobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSk7XHJcbn1cblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgZGV0ZWN0Q3ljbGVzOiB0cnVlLFxyXG4gICAgZXhwb3J0TWFwc0FzT2JqZWN0czogdHJ1ZSxcclxuICAgIHJlY3Vyc2VFdmVyeXRoaW5nOiBmYWxzZVxyXG59O1xyXG5mdW5jdGlvbiBjYWNoZShtYXAsIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zLmRldGVjdEN5Y2xlcylcclxuICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIHRvSlNIZWxwZXIoc291cmNlLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKSB7XHJcbiAgICBpZiAoIW9wdGlvbnMucmVjdXJzZUV2ZXJ5dGhpbmcgJiYgIWlzT2JzZXJ2YWJsZShzb3VyY2UpKVxyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gXCJvYmplY3RcIilcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgLy8gRGlyZWN0bHkgcmV0dXJuIG51bGwgaWYgc291cmNlIGlzIG51bGxcclxuICAgIGlmIChzb3VyY2UgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAvLyBEaXJlY3RseSByZXR1cm4gdGhlIERhdGUgb2JqZWN0IGl0c2VsZiBpZiBjb250YWluZWQgaW4gdGhlIG9ic2VydmFibGVcclxuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBEYXRlKVxyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlVmFsdWUoc291cmNlKSlcclxuICAgICAgICByZXR1cm4gdG9KU0hlbHBlcihzb3VyY2UuZ2V0KCksIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pO1xyXG4gICAgLy8gbWFrZSBzdXJlIHdlIHRyYWNrIHRoZSBrZXlzIG9mIHRoZSBvYmplY3RcclxuICAgIGlmIChpc09ic2VydmFibGUoc291cmNlKSlcclxuICAgICAgICBrZXlzKHNvdXJjZSk7XHJcbiAgICB2YXIgZGV0ZWN0Q3ljbGVzID0gb3B0aW9ucy5kZXRlY3RDeWNsZXMgPT09IHRydWU7XHJcbiAgICBpZiAoZGV0ZWN0Q3ljbGVzICYmIHNvdXJjZSAhPT0gbnVsbCAmJiBfX2FscmVhZHlTZWVuLmhhcyhzb3VyY2UpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYWxyZWFkeVNlZW4uZ2V0KHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkoc291cmNlKSB8fCBBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcclxuICAgICAgICB2YXIgcmVzXzEgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIFtdLCBvcHRpb25zKTtcclxuICAgICAgICB2YXIgdG9BZGQgPSBzb3VyY2UubWFwKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdG9KU0hlbHBlcih2YWx1ZSwgb3B0aW9ucywgX19hbHJlYWR5U2Vlbik7IH0pO1xyXG4gICAgICAgIHJlc18xLmxlbmd0aCA9IHRvQWRkLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRvQWRkLmxlbmd0aDsgaSA8IGw7IGkrKylcclxuICAgICAgICAgICAgcmVzXzFbaV0gPSB0b0FkZFtpXTtcclxuICAgICAgICByZXR1cm4gcmVzXzE7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KHNvdXJjZSkgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkgPT09IFNldC5wcm90b3R5cGUpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5leHBvcnRNYXBzQXNPYmplY3RzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzXzIgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIG5ldyBTZXQoKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzXzIuYWRkKHRvSlNIZWxwZXIodmFsdWUsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNfMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByZXNfMyA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwgW10sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJlc18zLnB1c2godG9KU0hlbHBlcih2YWx1ZSwgb3B0aW9ucywgX19hbHJlYWR5U2VlbikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc18zO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVNYXAoc291cmNlKSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKSA9PT0gTWFwLnByb3RvdHlwZSkge1xyXG4gICAgICAgIGlmIChvcHRpb25zLmV4cG9ydE1hcHNBc09iamVjdHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHZhciByZXNfNCA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwgbmV3IE1hcCgpLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgIHJlc180LnNldChrZXksIHRvSlNIZWxwZXIodmFsdWUsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNfNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByZXNfNSA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwge30sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmVzXzVba2V5XSA9IHRvSlNIZWxwZXIodmFsdWUsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc181O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBzaXR1YXRpb24gdGhhdCBzb3VyY2UgaXMgYW4gT2JzZXJ2YWJsZU9iamVjdCBvciBhIHBsYWluIG9iamVjdFxyXG4gICAgdmFyIHJlcyA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwge30sIG9wdGlvbnMpO1xyXG4gICAgZ2V0UGxhaW5PYmplY3RLZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmVzW2tleV0gPSB0b0pTSGVscGVyKHNvdXJjZVtrZXldLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiB0b0pTKHNvdXJjZSwgb3B0aW9ucykge1xyXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImJvb2xlYW5cIilcclxuICAgICAgICBvcHRpb25zID0geyBkZXRlY3RDeWNsZXM6IG9wdGlvbnMgfTtcclxuICAgIGlmICghb3B0aW9ucylcclxuICAgICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XHJcbiAgICBvcHRpb25zLmRldGVjdEN5Y2xlcyA9XHJcbiAgICAgICAgb3B0aW9ucy5kZXRlY3RDeWNsZXMgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA/IG9wdGlvbnMucmVjdXJzZUV2ZXJ5dGhpbmcgPT09IHRydWVcclxuICAgICAgICAgICAgOiBvcHRpb25zLmRldGVjdEN5Y2xlcyA9PT0gdHJ1ZTtcclxuICAgIHZhciBfX2FscmVhZHlTZWVuO1xyXG4gICAgaWYgKG9wdGlvbnMuZGV0ZWN0Q3ljbGVzKVxyXG4gICAgICAgIF9fYWxyZWFkeVNlZW4gPSBuZXcgTWFwKCk7XHJcbiAgICByZXR1cm4gdG9KU0hlbHBlcihzb3VyY2UsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pO1xyXG59XG5cbmZ1bmN0aW9uIHRyYWNlKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGVudGVyQnJlYWtQb2ludCA9IGZhbHNlO1xyXG4gICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IFwiYm9vbGVhblwiKVxyXG4gICAgICAgIGVudGVyQnJlYWtQb2ludCA9IGFyZ3MucG9wKCk7XHJcbiAgICB2YXIgZGVyaXZhdGlvbiA9IGdldEF0b21Gcm9tQXJncyhhcmdzKTtcclxuICAgIGlmICghZGVyaXZhdGlvbikge1xyXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBcIid0cmFjZShicmVhaz8pJyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBhIHRyYWNrZWQgY29tcHV0ZWQgdmFsdWUgb3IgYSBSZWFjdGlvbi4gQ29uc2lkZXIgcGFzc2luZyBpbiB0aGUgY29tcHV0ZWQgdmFsdWUgb3IgcmVhY3Rpb24gZXhwbGljaXRseVwiKTtcclxuICAgIH1cclxuICAgIGlmIChkZXJpdmF0aW9uLmlzVHJhY2luZyA9PT0gVHJhY2VNb2RlLk5PTkUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlttb2J4LnRyYWNlXSAnXCIgKyBkZXJpdmF0aW9uLm5hbWUgKyBcIicgdHJhY2luZyBlbmFibGVkXCIpO1xyXG4gICAgfVxyXG4gICAgZGVyaXZhdGlvbi5pc1RyYWNpbmcgPSBlbnRlckJyZWFrUG9pbnQgPyBUcmFjZU1vZGUuQlJFQUsgOiBUcmFjZU1vZGUuTE9HO1xyXG59XHJcbmZ1bmN0aW9uIGdldEF0b21Gcm9tQXJncyhhcmdzKSB7XHJcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSk7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICByZXR1cm4gZ2V0QXRvbShhcmdzWzBdLCBhcmdzWzFdKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogRHVyaW5nIGEgdHJhbnNhY3Rpb24gbm8gdmlld3MgYXJlIHVwZGF0ZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgdHJhbnNhY3Rpb24uXHJcbiAqIFRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHJ1biBzeW5jaHJvbm91c2x5IG5vbmV0aGVsZXNzLlxyXG4gKlxyXG4gKiBAcGFyYW0gYWN0aW9uIGEgZnVuY3Rpb24gdGhhdCB1cGRhdGVzIHNvbWUgcmVhY3RpdmUgc3RhdGVcclxuICogQHJldHVybnMgYW55IHZhbHVlIHRoYXQgd2FzIHJldHVybmVkIGJ5IHRoZSAnYWN0aW9uJyBwYXJhbWV0ZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmFuc2FjdGlvbihhY3Rpb24sIHRoaXNBcmcpIHtcclxuICAgIGlmICh0aGlzQXJnID09PSB2b2lkIDApIHsgdGhpc0FyZyA9IHVuZGVmaW5lZDsgfVxyXG4gICAgc3RhcnRCYXRjaCgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gYWN0aW9uLmFwcGx5KHRoaXNBcmcpO1xyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgZW5kQmF0Y2goKTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiB3aGVuKHByZWRpY2F0ZSwgYXJnMSwgYXJnMikge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgfHwgKGFyZzEgJiYgdHlwZW9mIGFyZzEgPT09IFwib2JqZWN0XCIpKVxyXG4gICAgICAgIHJldHVybiB3aGVuUHJvbWlzZShwcmVkaWNhdGUsIGFyZzEpO1xyXG4gICAgcmV0dXJuIF93aGVuKHByZWRpY2F0ZSwgYXJnMSwgYXJnMiB8fCB7fSk7XHJcbn1cclxuZnVuY3Rpb24gX3doZW4ocHJlZGljYXRlLCBlZmZlY3QsIG9wdHMpIHtcclxuICAgIHZhciB0aW1lb3V0SGFuZGxlO1xyXG4gICAgaWYgKHR5cGVvZiBvcHRzLnRpbWVvdXQgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghZGlzcG9zZXJbJG1vYnhdLmlzRGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGRpc3Bvc2VyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJXSEVOX1RJTUVPVVRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5vbkVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMub25FcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRzLnRpbWVvdXQpO1xyXG4gICAgfVxyXG4gICAgb3B0cy5uYW1lID0gb3B0cy5uYW1lIHx8IFwiV2hlbkBcIiArIGdldE5leHRJZCgpO1xyXG4gICAgdmFyIGVmZmVjdEFjdGlvbiA9IGNyZWF0ZUFjdGlvbihvcHRzLm5hbWUgKyBcIi1lZmZlY3RcIiwgZWZmZWN0KTtcclxuICAgIHZhciBkaXNwb3NlciA9IGF1dG9ydW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICBpZiAocHJlZGljYXRlKCkpIHtcclxuICAgICAgICAgICAgci5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aW1lb3V0SGFuZGxlKVxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpO1xyXG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBvcHRzKTtcclxuICAgIHJldHVybiBkaXNwb3NlcjtcclxufVxyXG5mdW5jdGlvbiB3aGVuUHJvbWlzZShwcmVkaWNhdGUsIG9wdHMpIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgb3B0cyAmJiBvcHRzLm9uRXJyb3IpXHJcbiAgICAgICAgcmV0dXJuIGZhaWwoXCJ0aGUgb3B0aW9ucyAnb25FcnJvcicgYW5kICdwcm9taXNlJyBjYW5ub3QgYmUgY29tYmluZWRcIik7XHJcbiAgICB2YXIgY2FuY2VsO1xyXG4gICAgdmFyIHJlcyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgZGlzcG9zZXIgPSBfd2hlbihwcmVkaWNhdGUsIHJlc29sdmUsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRzKSwgeyBvbkVycm9yOiByZWplY3QgfSkpO1xyXG4gICAgICAgIGNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZGlzcG9zZXIoKTtcclxuICAgICAgICAgICAgcmVqZWN0KFwiV0hFTl9DQU5DRUxMRURcIik7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgcmVzLmNhbmNlbCA9IGNhbmNlbDtcclxuICAgIHJldHVybiByZXM7XHJcbn1cblxuZnVuY3Rpb24gZ2V0QWRtKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIHRhcmdldFskbW9ieF07XHJcbn1cclxuZnVuY3Rpb24gaXNQcm9wZXJ0eUtleSh2YWwpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJzeW1ib2xcIjtcclxufVxyXG4vLyBPcHRpbWl6YXRpb246IHdlIGRvbid0IG5lZWQgdGhlIGludGVybWVkaWF0ZSBvYmplY3RzIGFuZCBjb3VsZCBoYXZlIGEgY29tcGxldGVseSBjdXN0b20gYWRtaW5pc3RyYXRpb24gZm9yIER5bmFtaWNPYmplY3RzLFxyXG4vLyBhbmQgc2tpcCBlaXRoZXIgdGhlIGludGVybmFsIHZhbHVlcyBtYXAsIG9yIHRoZSBiYXNlIG9iamVjdCB3aXRoIGl0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycyFcclxudmFyIG9iamVjdFByb3h5VHJhcHMgPSB7XHJcbiAgICBoYXM6IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJG1vYnggfHwgbmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiIHx8IG5hbWUgPT09IG1vYnhEaWRSdW5MYXp5SW5pdGlhbGl6ZXJzU3ltYm9sKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB2YXIgYWRtID0gZ2V0QWRtKHRhcmdldCk7XHJcbiAgICAgICAgLy8gTVdFOiBzaG91bGQgYGluYCBvcGVyYXRvciBiZSByZWFjdGl2ZT8gSWYgbm90LCBiZWxvdyBjb2RlIHBhdGggd2lsbCBiZSBmYXN0ZXIgLyBtb3JlIG1lbW9yeSBlZmZpY2llbnRcclxuICAgICAgICAvLyBUT0RPOiBjaGVjayBwZXJmb3JtYW5jZSBzdGF0cyFcclxuICAgICAgICAvLyBpZiAoYWRtLnZhbHVlcy5nZXQobmFtZSBhcyBzdHJpbmcpKSByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIGlmIChpc1Byb3BlcnR5S2V5KG5hbWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gYWRtLmhhcyhuYW1lKTtcclxuICAgICAgICByZXR1cm4gbmFtZSBpbiB0YXJnZXQ7XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICRtb2J4IHx8IG5hbWUgPT09IFwiY29uc3RydWN0b3JcIiB8fCBuYW1lID09PSBtb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1N5bWJvbClcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtuYW1lXTtcclxuICAgICAgICB2YXIgYWRtID0gZ2V0QWRtKHRhcmdldCk7XHJcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBhZG0udmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIEF0b20pIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9ic2VydmFibGUuZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmaXhlcyAjMTc5NiwgYmVjYXVzZSBkZWxldGluZyBhIHByb3AgdGhhdCBoYXMgYW5cclxuICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCB2YWx1ZSB3b24ndCByZXRyaWdnZXIgYSBvYnNlcnZlciAobm8gdmlzaWJsZSBlZmZlY3QpLFxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGF1dG9ydW4gd291bGRuJ3Qgc3Vic2NyaWJlIHRvIGZ1dHVyZSBrZXkgY2hhbmdlcyAoc2VlIGFsc28gbmV4dCBjb21tZW50KVxyXG4gICAgICAgICAgICAgICAgYWRtLmhhcyhuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc3RhcnQgbGlzdGVuaW5nIHRvIGZ1dHVyZSBrZXlzXHJcbiAgICAgICAgLy8gbm90ZSB0aGF0IHdlIG9ubHkgZG8gdGhpcyBoZXJlIGZvciBvcHRpbWl6YXRpb25cclxuICAgICAgICBpZiAoaXNQcm9wZXJ0eUtleShuYW1lKSlcclxuICAgICAgICAgICAgYWRtLmhhcyhuYW1lKTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdO1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoIWlzUHJvcGVydHlLZXkobmFtZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBzZXQodGFyZ2V0LCBuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUpIHtcclxuICAgICAgICBpZiAoIWlzUHJvcGVydHlLZXkobmFtZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB2YXIgYWRtID0gZ2V0QWRtKHRhcmdldCk7XHJcbiAgICAgICAgYWRtLnJlbW92ZShuYW1lKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBvd25LZXlzOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbSh0YXJnZXQpO1xyXG4gICAgICAgIGFkbS5rZXlzQXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcclxuICAgIH0sXHJcbiAgICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIGZhaWwoXCJEeW5hbWljIG9ic2VydmFibGUgb2JqZWN0cyBjYW5ub3QgYmUgZnJvemVuXCIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gY3JlYXRlRHluYW1pY09ic2VydmFibGVPYmplY3QoYmFzZSkge1xyXG4gICAgdmFyIHByb3h5ID0gbmV3IFByb3h5KGJhc2UsIG9iamVjdFByb3h5VHJhcHMpO1xyXG4gICAgYmFzZVskbW9ieF0ucHJveHkgPSBwcm94eTtcclxuICAgIHJldHVybiBwcm94eTtcclxufVxuXG5mdW5jdGlvbiBoYXNJbnRlcmNlcHRvcnMoaW50ZXJjZXB0YWJsZSkge1xyXG4gICAgcmV0dXJuIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzICE9PSB1bmRlZmluZWQgJiYgaW50ZXJjZXB0YWJsZS5pbnRlcmNlcHRvcnMubGVuZ3RoID4gMDtcclxufVxyXG5mdW5jdGlvbiByZWdpc3RlckludGVyY2VwdG9yKGludGVyY2VwdGFibGUsIGhhbmRsZXIpIHtcclxuICAgIHZhciBpbnRlcmNlcHRvcnMgPSBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9ycyB8fCAoaW50ZXJjZXB0YWJsZS5pbnRlcmNlcHRvcnMgPSBbXSk7XHJcbiAgICBpbnRlcmNlcHRvcnMucHVzaChoYW5kbGVyKTtcclxuICAgIHJldHVybiBvbmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaWR4ID0gaW50ZXJjZXB0b3JzLmluZGV4T2YoaGFuZGxlcik7XHJcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpXHJcbiAgICAgICAgICAgIGludGVyY2VwdG9ycy5zcGxpY2UoaWR4LCAxKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGludGVyY2VwdENoYW5nZShpbnRlcmNlcHRhYmxlLCBjaGFuZ2UpIHtcclxuICAgIHZhciBwcmV2VSA9IHVudHJhY2tlZFN0YXJ0KCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEludGVyY2VwdG9yIGNhbiBtb2RpZnkgdGhlIGFycmF5LCBjb3B5IGl0IHRvIGF2b2lkIGNvbmN1cnJlbnQgbW9kaWZpY2F0aW9uLCBzZWUgIzE5NTBcclxuICAgICAgICB2YXIgaW50ZXJjZXB0b3JzID0gX19zcHJlYWQoKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzIHx8IFtdKSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBpbnRlcmNlcHRvcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNoYW5nZSA9IGludGVyY2VwdG9yc1tpXShjaGFuZ2UpO1xyXG4gICAgICAgICAgICBpbnZhcmlhbnQoIWNoYW5nZSB8fCBjaGFuZ2UudHlwZSwgXCJJbnRlcmNlcHQgaGFuZGxlcnMgc2hvdWxkIHJldHVybiBub3RoaW5nIG9yIGEgY2hhbmdlIG9iamVjdFwiKTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHVudHJhY2tlZEVuZChwcmV2VSk7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gaGFzTGlzdGVuZXJzKGxpc3RlbmFibGUpIHtcclxuICAgIHJldHVybiBsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycyAhPT0gdW5kZWZpbmVkICYmIGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzLmxlbmd0aCA+IDA7XHJcbn1cclxuZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcihsaXN0ZW5hYmxlLCBoYW5kbGVyKSB7XHJcbiAgICB2YXIgbGlzdGVuZXJzID0gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnMgfHwgKGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzID0gW10pO1xyXG4gICAgbGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgICByZXR1cm4gb25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IGxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xyXG4gICAgICAgIGlmIChpZHggIT09IC0xKVxyXG4gICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMobGlzdGVuYWJsZSwgY2hhbmdlKSB7XHJcbiAgICB2YXIgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpO1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzO1xyXG4gICAgaWYgKCFsaXN0ZW5lcnMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBsaXN0ZW5lcnNbaV0oY2hhbmdlKTtcclxuICAgIH1cclxuICAgIHVudHJhY2tlZEVuZChwcmV2VSk7XHJcbn1cblxudmFyIE1BWF9TUExJQ0VfU0laRSA9IDEwMDAwOyAvLyBTZWUgZS5nLiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzg1OVxyXG52YXIgYXJyYXlUcmFwcyA9IHtcclxuICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAkbW9ieClcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFskbW9ieF07XHJcbiAgICAgICAgaWYgKG5hbWUgPT09IFwibGVuZ3RoXCIpXHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRbJG1vYnhdLmdldEFycmF5TGVuZ3RoKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheUV4dGVuc2lvbnMuZ2V0LmNhbGwodGFyZ2V0LCBuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmICFpc05hTihuYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXlFeHRlbnNpb25zLmdldC5jYWxsKHRhcmdldCwgcGFyc2VJbnQobmFtZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyYXlFeHRlbnNpb25zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheUV4dGVuc2lvbnNbbmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXRbbmFtZV07XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSBcImxlbmd0aFwiKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFskbW9ieF0uc2V0QXJyYXlMZW5ndGgodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgYXJyYXlFeHRlbnNpb25zLnNldC5jYWxsKHRhcmdldCwgbmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIgfHwgaXNOYU4obmFtZSkpIHtcclxuICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBudW1lcmljIHN0cmluZ1xyXG4gICAgICAgICAgICBhcnJheUV4dGVuc2lvbnMuc2V0LmNhbGwodGFyZ2V0LCBwYXJzZUludChuYW1lKSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIGZhaWwoXCJPYnNlcnZhYmxlIGFycmF5cyBjYW5ub3QgYmUgZnJvemVuXCIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZUFycmF5KGluaXRpYWxWYWx1ZXMsIGVuaGFuY2VyLCBuYW1lLCBvd25lZCkge1xyXG4gICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKTsgfVxyXG4gICAgaWYgKG93bmVkID09PSB2b2lkIDApIHsgb3duZWQgPSBmYWxzZTsgfVxyXG4gICAgdmFyIGFkbSA9IG5ldyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbihuYW1lLCBlbmhhbmNlciwgb3duZWQpO1xyXG4gICAgYWRkSGlkZGVuRmluYWxQcm9wKGFkbS52YWx1ZXMsICRtb2J4LCBhZG0pO1xyXG4gICAgdmFyIHByb3h5ID0gbmV3IFByb3h5KGFkbS52YWx1ZXMsIGFycmF5VHJhcHMpO1xyXG4gICAgYWRtLnByb3h5ID0gcHJveHk7XHJcbiAgICBpZiAoaW5pdGlhbFZhbHVlcyAmJiBpbml0aWFsVmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBwcmV2ID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCh0cnVlKTtcclxuICAgICAgICBhZG0uc3BsaWNlV2l0aEFycmF5KDAsIDAsIGluaXRpYWxWYWx1ZXMpO1xyXG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XHJcbnZhciBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKG5hbWUsIGVuaGFuY2VyLCBvd25lZCkge1xyXG4gICAgICAgIHRoaXMub3duZWQgPSBvd25lZDtcclxuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMucHJveHkgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5sYXN0S25vd25MZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuYXRvbSA9IG5ldyBBdG9tKG5hbWUgfHwgXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSk7XHJcbiAgICAgICAgdGhpcy5lbmhhbmNlciA9IGZ1bmN0aW9uIChuZXdWLCBvbGRWKSB7IHJldHVybiBlbmhhbmNlcihuZXdWLCBvbGRWLCBuYW1lICsgXCJbLi5dXCIpOyB9O1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmRlaGFuY2VWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmRlaGFuY2VWYWx1ZXMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZXMubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAodGhpcy5kZWhhbmNlcik7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSA9PT0gdm9pZCAwKSB7IGZpcmVJbW1lZGlhdGVseSA9IGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSkge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcih7XHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHksXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNwbGljZVwiLFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDAsXHJcbiAgICAgICAgICAgICAgICBhZGRlZDogdGhpcy52YWx1ZXMuc2xpY2UoKSxcclxuICAgICAgICAgICAgICAgIGFkZGVkQ291bnQ6IHRoaXMudmFsdWVzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIHJlbW92ZWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiAwXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmdldEFycmF5TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLnNldEFycmF5TGVuZ3RoID0gZnVuY3Rpb24gKG5ld0xlbmd0aCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmV3TGVuZ3RoICE9PSBcIm51bWJlclwiIHx8IG5ld0xlbmd0aCA8IDApXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4LmFycmF5XSBPdXQgb2YgcmFuZ2U6IFwiICsgbmV3TGVuZ3RoKTtcclxuICAgICAgICB2YXIgY3VycmVudExlbmd0aCA9IHRoaXMudmFsdWVzLmxlbmd0aDtcclxuICAgICAgICBpZiAobmV3TGVuZ3RoID09PSBjdXJyZW50TGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgZWxzZSBpZiAobmV3TGVuZ3RoID4gY3VycmVudExlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgbmV3SXRlbXMgPSBuZXcgQXJyYXkobmV3TGVuZ3RoIC0gY3VycmVudExlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoIC0gY3VycmVudExlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgbmV3SXRlbXNbaV0gPSB1bmRlZmluZWQ7IC8vIE5vIEFycmF5LmZpbGwgZXZlcnl3aGVyZS4uLlxyXG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheShjdXJyZW50TGVuZ3RoLCAwLCBuZXdJdGVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXkobmV3TGVuZ3RoLCBjdXJyZW50TGVuZ3RoIC0gbmV3TGVuZ3RoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUudXBkYXRlQXJyYXlMZW5ndGggPSBmdW5jdGlvbiAob2xkTGVuZ3RoLCBkZWx0YSkge1xyXG4gICAgICAgIGlmIChvbGRMZW5ndGggIT09IHRoaXMubGFzdEtub3duTGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieF0gTW9kaWZpY2F0aW9uIGV4Y2VwdGlvbjogdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiBhbiBvYnNlcnZhYmxlIGFycmF5IHdhcyBjaGFuZ2VkLlwiKTtcclxuICAgICAgICB0aGlzLmxhc3RLbm93bkxlbmd0aCArPSBkZWx0YTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuc3BsaWNlV2l0aEFycmF5ID0gZnVuY3Rpb24gKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKHRoaXMuYXRvbSk7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMudmFsdWVzLmxlbmd0aDtcclxuICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgIGVsc2UgaWYgKGluZGV4ID4gbGVuZ3RoKVxyXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcclxuICAgICAgICBlbHNlIGlmIChpbmRleCA8IDApXHJcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5tYXgoMCwgbGVuZ3RoICsgaW5kZXgpO1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKVxyXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IGxlbmd0aCAtIGluZGV4O1xyXG4gICAgICAgIGVsc2UgaWYgKGRlbGV0ZUNvdW50ID09PSB1bmRlZmluZWQgfHwgZGVsZXRlQ291bnQgPT09IG51bGwpXHJcbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZGVsZXRlQ291bnQsIGxlbmd0aCAtIGluZGV4KSk7XHJcbiAgICAgICAgaWYgKG5ld0l0ZW1zID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIG5ld0l0ZW1zID0gRU1QVFlfQVJSQVk7XHJcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3BsaWNlXCIsXHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IGRlbGV0ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgYWRkZWQ6IG5ld0l0ZW1zXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBFTVBUWV9BUlJBWTtcclxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBjaGFuZ2UucmVtb3ZlZENvdW50O1xyXG4gICAgICAgICAgICBuZXdJdGVtcyA9IGNoYW5nZS5hZGRlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3SXRlbXMgPSBuZXdJdGVtcy5sZW5ndGggPT09IDAgPyBuZXdJdGVtcyA6IG5ld0l0ZW1zLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gX3RoaXMuZW5oYW5jZXIodiwgdW5kZWZpbmVkKTsgfSk7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoRGVsdGEgPSBuZXdJdGVtcy5sZW5ndGggLSBkZWxldGVDb3VudDtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVBcnJheUxlbmd0aChsZW5ndGgsIGxlbmd0aERlbHRhKTsgLy8gY2hlY2tzIGlmIGludGVybmFsIGFycmF5IHdhc24ndCBtb2RpZmllZFxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzID0gdGhpcy5zcGxpY2VJdGVtc0ludG9WYWx1ZXMoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcyk7XHJcbiAgICAgICAgaWYgKGRlbGV0ZUNvdW50ICE9PSAwIHx8IG5ld0l0ZW1zLmxlbmd0aCAhPT0gMClcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnlBcnJheVNwbGljZShpbmRleCwgbmV3SXRlbXMsIHJlcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlcyhyZXMpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5zcGxpY2VJdGVtc0ludG9WYWx1ZXMgPSBmdW5jdGlvbiAoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAobmV3SXRlbXMubGVuZ3RoIDwgTUFYX1NQTElDRV9TSVpFKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnZhbHVlcykuc3BsaWNlLmFwcGx5KF9hLCBfX3NwcmVhZChbaW5kZXgsIGRlbGV0ZUNvdW50XSwgbmV3SXRlbXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLnZhbHVlcy5zbGljZShpbmRleCwgaW5kZXggKyBkZWxldGVDb3VudCk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVzID0gdGhpcy52YWx1ZXNcclxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCBpbmRleClcclxuICAgICAgICAgICAgICAgIC5jb25jYXQobmV3SXRlbXMsIHRoaXMudmFsdWVzLnNsaWNlKGluZGV4ICsgZGVsZXRlQ291bnQpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm5vdGlmeUFycmF5Q2hpbGRVcGRhdGUgPSBmdW5jdGlvbiAoaW5kZXgsIG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICAgIHZhciBub3RpZnlTcHkgPSAhdGhpcy5vd25lZCAmJiBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XHJcbiAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAvLyBUaGUgcmVhc29uIHdoeSB0aGlzIGlzIG9uIHJpZ2h0IGhhbmQgc2lkZSBoZXJlIChhbmQgbm90IGFib3ZlKSwgaXMgdGhpcyB3YXkgdGhlIHVnbGlmaWVyIHdpbGwgZHJvcCBpdCwgYnV0IGl0IHdvbid0XHJcbiAgICAgICAgLy8gY2F1c2UgYW55IHJ1bnRpbWUgb3ZlcmhlYWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSB3aXRob3V0IE5PREVfRU5WIHNldCwgdW5sZXNzIHNweWluZyBpcyBlbmFibGVkXHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IG5hbWU6IHRoaXMuYXRvbS5uYW1lIH0pKTtcclxuICAgICAgICB0aGlzLmF0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xyXG4gICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUubm90aWZ5QXJyYXlTcGxpY2UgPSBmdW5jdGlvbiAoaW5kZXgsIGFkZGVkLCByZW1vdmVkKSB7XHJcbiAgICAgICAgdmFyIG5vdGlmeVNweSA9ICF0aGlzLm93bmVkICYmIGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XHJcbiAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcclxuICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHksXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNwbGljZVwiLFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZDogcmVtb3ZlZCxcclxuICAgICAgICAgICAgICAgIGFkZGVkOiBhZGRlZCxcclxuICAgICAgICAgICAgICAgIHJlbW92ZWRDb3VudDogcmVtb3ZlZC5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhZGRlZC5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IG5hbWU6IHRoaXMuYXRvbS5uYW1lIH0pKTtcclxuICAgICAgICB0aGlzLmF0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgIC8vIGNvbmZvcm06IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L29ic2VydmVcclxuICAgICAgICBpZiAobm90aWZ5KVxyXG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uO1xyXG59KCkpO1xyXG52YXIgYXJyYXlFeHRlbnNpb25zID0ge1xyXG4gICAgaW50ZXJjZXB0OiBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzWyRtb2J4XS5pbnRlcmNlcHQoaGFuZGxlcik7XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24gKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgICAgICBpZiAoZmlyZUltbWVkaWF0ZWx5ID09PSB2b2lkIDApIHsgZmlyZUltbWVkaWF0ZWx5ID0gZmFsc2U7IH1cclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgcmV0dXJuIGFkbS5vYnNlcnZlKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpO1xyXG4gICAgfSxcclxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDApO1xyXG4gICAgfSxcclxuICAgIHJlcGxhY2U6IGZ1bmN0aW9uIChuZXdJdGVtcykge1xyXG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcclxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheSgwLCBhZG0udmFsdWVzLmxlbmd0aCwgbmV3SXRlbXMpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhpcyBhcnJheSBiYWNrIHRvIGEgKHNoYWxsb3cpIGphdmFzY3JpcHQgc3RydWN0dXJlLlxyXG4gICAgICogRm9yIGEgZGVlcCBjbG9uZSB1c2UgbW9ieC50b0pTXHJcbiAgICAgKi9cclxuICAgIHRvSlM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgpO1xyXG4gICAgfSxcclxuICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFVzZWQgYnkgSlNPTi5zdHJpbmdpZnlcclxuICAgICAgICByZXR1cm4gdGhpcy50b0pTKCk7XHJcbiAgICB9LFxyXG4gICAgLypcclxuICAgICAqIGZ1bmN0aW9ucyB0aGF0IGRvIGFsdGVyIHRoZSBpbnRlcm5hbCBzdHJ1Y3R1cmUgb2YgdGhlIGFycmF5LCAoYmFzZWQgb24gbGliLmVzNi5kLnRzKVxyXG4gICAgICogc2luY2UgdGhlc2UgZnVuY3Rpb25zIGFsdGVyIHRoZSBpbm5lciBzdHJ1Y3R1cmUgb2YgdGhlIGFycmF5LCB0aGUgaGF2ZSBzaWRlIGVmZmVjdHMuXHJcbiAgICAgKiBCZWNhdXNlIHRoZSBoYXZlIHNpZGUgZWZmZWN0cywgdGhleSBzaG91bGQgbm90IGJlIHVzZWQgaW4gY29tcHV0ZWQgZnVuY3Rpb24sXHJcbiAgICAgKiBhbmQgZm9yIHRoYXQgcmVhc29uIHRoZSBkbyBub3QgY2FsbCBkZXBlbmRlbmN5U3RhdGUubm90aWZ5T2JzZXJ2ZWRcclxuICAgICAqL1xyXG4gICAgc3BsaWNlOiBmdW5jdGlvbiAoaW5kZXgsIGRlbGV0ZUNvdW50KSB7XHJcbiAgICAgICAgdmFyIG5ld0l0ZW1zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgbmV3SXRlbXNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcclxuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheShpbmRleCk7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBhZG0uc3BsaWNlV2l0aEFycmF5KGluZGV4LCBkZWxldGVDb3VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZG0uc3BsaWNlV2l0aEFycmF5KGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpO1xyXG4gICAgfSxcclxuICAgIHNwbGljZVdpdGhBcnJheTogZnVuY3Rpb24gKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpIHtcclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXkoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcyk7XHJcbiAgICB9LFxyXG4gICAgcHVzaDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcclxuICAgICAgICBhZG0uc3BsaWNlV2l0aEFycmF5KGFkbS52YWx1ZXMubGVuZ3RoLCAwLCBpdGVtcyk7XHJcbiAgICAgICAgcmV0dXJuIGFkbS52YWx1ZXMubGVuZ3RoO1xyXG4gICAgfSxcclxuICAgIHBvcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZShNYXRoLm1heCh0aGlzWyRtb2J4XS52YWx1ZXMubGVuZ3RoIC0gMSwgMCksIDEpWzBdO1xyXG4gICAgfSxcclxuICAgIHNoaWZ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDAsIDEpWzBdO1xyXG4gICAgfSxcclxuICAgIHVuc2hpZnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBpdGVtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheSgwLCAwLCBpdGVtcyk7XHJcbiAgICAgICAgcmV0dXJuIGFkbS52YWx1ZXMubGVuZ3RoO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyByZXZlcnNlIGJ5IGRlZmF1bHQgbXV0YXRlcyBpbiBwbGFjZSBiZWZvcmUgcmV0dXJuaW5nIHRoZSByZXN1bHRcclxuICAgICAgICAvLyB3aGljaCBtYWtlcyBpdCBib3RoIGEgJ2Rlcml2YXRpb24nIGFuZCBhICdtdXRhdGlvbicuXHJcbiAgICAgICAgLy8gc28gd2UgZGV2aWF0ZSBmcm9tIHRoZSBkZWZhdWx0IGFuZCBqdXN0IG1ha2UgaXQgYW4gZGVydml0YXRpb25cclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4XSBgb2JzZXJ2YWJsZUFycmF5LnJldmVyc2UoKWAgd2lsbCBub3QgdXBkYXRlIHRoZSBhcnJheSBpbiBwbGFjZS4gVXNlIGBvYnNlcnZhYmxlQXJyYXkuc2xpY2UoKS5yZXZlcnNlKClgIHRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBhbmQgcGVyZm9ybSB0aGUgb3BlcmF0aW9uIG9uIGEgY29weSwgb3IgYG9ic2VydmFibGVBcnJheS5yZXBsYWNlKG9ic2VydmFibGVBcnJheS5zbGljZSgpLnJldmVyc2UoKSlgIHRvIHJldmVyc2UgJiB1cGRhdGUgaW4gcGxhY2VcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuc2xpY2UoKTtcclxuICAgICAgICByZXR1cm4gY2xvbmUucmV2ZXJzZS5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcclxuICAgIH0sXHJcbiAgICBzb3J0OiBmdW5jdGlvbiAoY29tcGFyZUZuKSB7XHJcbiAgICAgICAgLy8gc29ydCBieSBkZWZhdWx0IG11dGF0ZXMgaW4gcGxhY2UgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0XHJcbiAgICAgICAgLy8gd2hpY2ggZ29lcyBhZ2FpbnN0IGFsbCBnb29kIHByYWN0aWNlcy4gTGV0J3Mgbm90IGNoYW5nZSB0aGUgYXJyYXkgaW4gcGxhY2UhXHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0gYG9ic2VydmFibGVBcnJheS5zb3J0KClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgYXJyYXkgaW4gcGxhY2UuIFVzZSBgb2JzZXJ2YWJsZUFycmF5LnNsaWNlKCkuc29ydCgpYCB0byBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgYW5kIHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBvbiBhIGNvcHksIG9yIGBvYnNlcnZhYmxlQXJyYXkucmVwbGFjZShvYnNlcnZhYmxlQXJyYXkuc2xpY2UoKS5zb3J0KCkpYCB0byBzb3J0ICYgdXBkYXRlIGluIHBsYWNlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLnNsaWNlKCk7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lLnNvcnQuYXBwbHkoY2xvbmUsIGFyZ3VtZW50cyk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgdmFyIGlkeCA9IGFkbS5kZWhhbmNlVmFsdWVzKGFkbS52YWx1ZXMpLmluZGV4T2YodmFsdWUpO1xyXG4gICAgICAgIGlmIChpZHggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdldDogZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xyXG4gICAgICAgIGlmIChhZG0pIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4IDwgYWRtLnZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGFkbS5hdG9tLnJlcG9ydE9ic2VydmVkKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLmRlaGFuY2VWYWx1ZShhZG0udmFsdWVzW2luZGV4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnguYXJyYXldIEF0dGVtcHQgdG8gcmVhZCBhbiBhcnJheSBpbmRleCAoXCIgKyBpbmRleCArIFwiKSB0aGF0IGlzIG91dCBvZiBib3VuZHMgKFwiICsgYWRtLnZhbHVlcy5sZW5ndGggKyBcIikuIFBsZWFzZSBjaGVjayBsZW5ndGggZmlyc3QuIE91dCBvZiBib3VuZCBpbmRpY2VzIHdpbGwgbm90IGJlIHRyYWNrZWQgYnkgTW9iWFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uIChpbmRleCwgbmV3VmFsdWUpIHtcclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgdmFyIHZhbHVlcyA9IGFkbS52YWx1ZXM7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgdmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgYXQgaW5kZXggaW4gcmFuZ2VcclxuICAgICAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQoYWRtLmF0b20pO1xyXG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKGFkbSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UoYWRtLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IGFkbS5wcm94eSxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gYWRtLmVuaGFuY2VyKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gbmV3VmFsdWUgIT09IG9sZFZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYWRtLm5vdGlmeUFycmF5Q2hpbGRVcGRhdGUoaW5kZXgsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IHZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gYWRkIGEgbmV3IGl0ZW1cclxuICAgICAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheShpbmRleCwgMCwgW25ld1ZhbHVlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBvdXQgb2YgYm91bmRzXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4LmFycmF5XSBJbmRleCBvdXQgb2YgYm91bmRzLCBcIiArIGluZGV4ICsgXCIgaXMgbGFyZ2VyIHRoYW4gXCIgKyB2YWx1ZXMubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbltcclxuICAgIFwiY29uY2F0XCIsXHJcbiAgICBcImV2ZXJ5XCIsXHJcbiAgICBcImZpbHRlclwiLFxyXG4gICAgXCJmb3JFYWNoXCIsXHJcbiAgICBcImluZGV4T2ZcIixcclxuICAgIFwiam9pblwiLFxyXG4gICAgXCJsYXN0SW5kZXhPZlwiLFxyXG4gICAgXCJtYXBcIixcclxuICAgIFwicmVkdWNlXCIsXHJcbiAgICBcInJlZHVjZVJpZ2h0XCIsXHJcbiAgICBcInNsaWNlXCIsXHJcbiAgICBcInNvbWVcIixcclxuICAgIFwidG9TdHJpbmdcIixcclxuICAgIFwidG9Mb2NhbGVTdHJpbmdcIlxyXG5dLmZvckVhY2goZnVuY3Rpb24gKGZ1bmNOYW1lKSB7XHJcbiAgICBhcnJheUV4dGVuc2lvbnNbZnVuY05hbWVdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcclxuICAgICAgICBhZG0uYXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgIHZhciByZXMgPSBhZG0uZGVoYW5jZVZhbHVlcyhhZG0udmFsdWVzKTtcclxuICAgICAgICByZXR1cm4gcmVzW2Z1bmNOYW1lXS5hcHBseShyZXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG59KTtcclxudmFyIGlzT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb25cIiwgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24pO1xyXG5mdW5jdGlvbiBpc09ic2VydmFibGVBcnJheSh0aGluZykge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaW5nKSAmJiBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKHRoaW5nWyRtb2J4XSk7XHJcbn1cblxudmFyIF9hO1xyXG52YXIgT2JzZXJ2YWJsZU1hcE1hcmtlciA9IHt9O1xyXG4vLyBqdXN0IGV4dGVuZCBNYXA/IFNlZSBhbHNvIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL25lc3RoYXJ1cy8xM2I0ZDc0ZjJlZjRhMmY0MzU3ZGJkM2ZjMjNjMWU1NFxyXG4vLyBCdXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTU1NlxyXG52YXIgT2JzZXJ2YWJsZU1hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVNYXAoaW5pdGlhbERhdGEsIGVuaGFuY2VyLCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKGVuaGFuY2VyID09PSB2b2lkIDApIHsgZW5oYW5jZXIgPSBkZWVwRW5oYW5jZXI7IH1cclxuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIk9ic2VydmFibGVNYXBAXCIgKyBnZXROZXh0SWQoKTsgfVxyXG4gICAgICAgIHRoaXMuZW5oYW5jZXIgPSBlbmhhbmNlcjtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXNbX2FdID0gT2JzZXJ2YWJsZU1hcE1hcmtlcjtcclxuICAgICAgICB0aGlzLl9rZXlzQXRvbSA9IGNyZWF0ZUF0b20odGhpcy5uYW1lICsgXCIua2V5cygpXCIpO1xyXG4gICAgICAgIHRoaXNbU3ltYm9sLnRvU3RyaW5nVGFnXSA9IFwiTWFwXCI7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBNYXAgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4Lm1hcCByZXF1aXJlcyBNYXAgcG9seWZpbGwgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuIENoZWNrIGJhYmVsLXBvbHlmaWxsIG9yIGNvcmUtanMvZXM2L21hcC5qc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLl9oYXNNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5tZXJnZShpbml0aWFsRGF0YSk7XHJcbiAgICB9XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5faGFzID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmhhcyhrZXkpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzKGtleSk7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5faGFzTWFwLmdldChrZXkpO1xyXG4gICAgICAgIGlmICghZW50cnkpIHtcclxuICAgICAgICAgICAgLy8gdG9kbzogcmVwbGFjZSB3aXRoIGF0b20gKGJyZWFraW5nIGNoYW5nZSlcclxuICAgICAgICAgICAgdmFyIG5ld0VudHJ5ID0gKGVudHJ5ID0gbmV3IE9ic2VydmFibGVWYWx1ZSh0aGlzLl9oYXMoa2V5KSwgcmVmZXJlbmNlRW5oYW5jZXIsIHRoaXMubmFtZSArIFwiLlwiICsgc3RyaW5naWZ5S2V5KGtleSkgKyBcIj9cIiwgZmFsc2UpKTtcclxuICAgICAgICAgICAgdGhpcy5faGFzTWFwLnNldChrZXksIG5ld0VudHJ5KTtcclxuICAgICAgICAgICAgb25CZWNvbWVVbm9ic2VydmVkKG5ld0VudHJ5LCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5faGFzTWFwLmRlbGV0ZShrZXkpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5LmdldCgpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGhhc0tleSA9IHRoaXMuX2hhcyhrZXkpO1xyXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBoYXNLZXkgPyBcInVwZGF0ZVwiIDogXCJhZGRcIixcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IGtleVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgdmFsdWUgPSBjaGFuZ2UubmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChoYXNLZXkpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmFsdWUoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRWYWx1ZShrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5faGFzKGtleSkpIHtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxyXG4gICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkZWxldGVcIixcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHRoaXMuX2RhdGEuZ2V0KGtleSkudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oX19hc3NpZ24oe30sIGNoYW5nZSksIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlSGFzTWFwRW50cnkoa2V5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IF90aGlzLl9kYXRhLmdldChrZXkpO1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZSh1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2RhdGEuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5KVxyXG4gICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX3VwZGF0ZUhhc01hcEVudHJ5ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLl9oYXNNYXAuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnNldE5ld1ZhbHVlKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX3VwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKGtleSwgbmV3VmFsdWUpIHtcclxuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IHRoaXMuX2RhdGEuZ2V0KGtleSk7XHJcbiAgICAgICAgbmV3VmFsdWUgPSBvYnNlcnZhYmxlLnByZXBhcmVOZXdWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQpIHtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxyXG4gICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IG9ic2VydmFibGUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IG5hbWU6IHRoaXMubmFtZSwga2V5OiBrZXkgfSkpO1xyXG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldE5ld1ZhbHVlKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5fYWRkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5fa2V5c0F0b20pO1xyXG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKG5ld1ZhbHVlLCBfdGhpcy5lbmhhbmNlciwgX3RoaXMubmFtZSArIFwiLlwiICsgc3RyaW5naWZ5S2V5KGtleSksIGZhbHNlKTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGEuc2V0KGtleSwgb2JzZXJ2YWJsZSk7XHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JzZXJ2YWJsZS52YWx1ZTsgLy8gdmFsdWUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWRcclxuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUhhc01hcEVudHJ5KGtleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIF90aGlzLl9rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XHJcbiAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcclxuICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZFwiLFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgbmFtZToga2V5LFxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2hhbmdlKSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcclxuICAgICAgICBpZiAobm90aWZ5KVxyXG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWUodGhpcy5fZGF0YS5nZXQoa2V5KS5nZXQoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlKHVuZGVmaW5lZCk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuZGVoYW5jZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2tleXNBdG9tLnJlcG9ydE9ic2VydmVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEua2V5cygpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIGtleXMgPSBBcnJheS5mcm9tKHRoaXMua2V5cygpKTtcclxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcclxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRJbmRleCA8IGtleXMubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBzZWxmLmdldChrZXlzW25leHRJbmRleCsrXSksIGRvbmU6IGZhbHNlIH1cclxuICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIGtleXMgPSBBcnJheS5mcm9tKHRoaXMua2V5cygpKTtcclxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcclxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRJbmRleCA8IGtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbbmV4dEluZGV4KytdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBba2V5LCBzZWxmLmdldChrZXkpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGVbKF9hID0gJG1vYngsIFN5bWJvbC5pdGVyYXRvcildID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2I7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2MgPSBfX3ZhbHVlcyh0aGlzKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9lID0gX19yZWFkKF9kLnZhbHVlLCAyKSwga2V5ID0gX2VbMF0sIHZhbHVlID0gX2VbMV07XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBrZXksIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2QgJiYgIV9kLmRvbmUgJiYgKF9iID0gX2MucmV0dXJuKSkgX2IuY2FsbChfYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogTWVyZ2UgYW5vdGhlciBvYmplY3QgaW50byB0aGlzIG9iamVjdCwgcmV0dXJucyB0aGlzLiAqL1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChpc09ic2VydmFibGVNYXAob3RoZXIpKSB7XHJcbiAgICAgICAgICAgIG90aGVyID0gb3RoZXIudG9KUygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG90aGVyKSlcclxuICAgICAgICAgICAgICAgIGdldFBsYWluT2JqZWN0S2V5cyhvdGhlcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBfdGhpcy5zZXQoa2V5LCBvdGhlcltrZXldKTsgfSk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3RoZXIpKVxyXG4gICAgICAgICAgICAgICAgb3RoZXIuZm9yRWFjaChmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2MgPSBfX3JlYWQoX2IsIDIpLCBrZXkgPSBfY1swXSwgdmFsdWUgPSBfY1sxXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRVM2TWFwKG90aGVyKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG90aGVyLmNvbnN0cnVjdG9yICE9PSBNYXApXHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbChcIkNhbm5vdCBpbml0aWFsaXplIGZyb20gY2xhc3NlcyB0aGF0IGluaGVyaXQgZnJvbSBNYXA6IFwiICsgb3RoZXIuY29uc3RydWN0b3IubmFtZSk7IC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgb3RoZXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gX3RoaXMuc2V0KGtleSwgdmFsdWUpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvdGhlciAhPT0gbnVsbCAmJiBvdGhlciAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgZmFpbChcIkNhbm5vdCBpbml0aWFsaXplIG1hcCBmcm9tIFwiICsgb3RoZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1bnRyYWNrZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVfMiwgX2I7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9jID0gX192YWx1ZXMoX3RoaXMua2V5cygpKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2QudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2QgJiYgIV9kLmRvbmUgJiYgKF9iID0gX2MucmV0dXJuKSkgX2IuY2FsbChfYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gZ3JhYiBhbGwgdGhlIGtleXMgdGhhdCBhcmUgcHJlc2VudCBpbiB0aGUgbmV3IG1hcCBidXQgbm90IHByZXNlbnQgaW4gdGhlIGN1cnJlbnQgbWFwXHJcbiAgICAgICAgICAgIC8vIGFuZCBkZWxldGUgdGhlbSBmcm9tIHRoZSBtYXAsIHRoZW4gbWVyZ2UgdGhlIG5ldyBtYXBcclxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGNhdXNlIHJlYWN0aW9ucyBvbmx5IG9uIGNoYW5nZWQgdmFsdWVzXHJcbiAgICAgICAgICAgIHZhciBuZXdLZXlzID0gZ2V0TWFwTGlrZUtleXModmFsdWVzKTtcclxuICAgICAgICAgICAgdmFyIG9sZEtleXMgPSBBcnJheS5mcm9tKF90aGlzLmtleXMoKSk7XHJcbiAgICAgICAgICAgIHZhciBtaXNzaW5nS2V5cyA9IG9sZEtleXMuZmlsdGVyKGZ1bmN0aW9uIChrKSB7IHJldHVybiBuZXdLZXlzLmluZGV4T2YoaykgPT09IC0xOyB9KTtcclxuICAgICAgICAgICAgbWlzc2luZ0tleXMuZm9yRWFjaChmdW5jdGlvbiAoaykgeyByZXR1cm4gX3RoaXMuZGVsZXRlKGspOyB9KTtcclxuICAgICAgICAgICAgX3RoaXMubWVyZ2UodmFsdWVzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2tleXNBdG9tLnJlcG9ydE9ic2VydmVkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhLnNpemU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBwbGFpbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoaXMgbWFwLlxyXG4gICAgICogTm90ZSB0aGF0IGFsbCB0aGUga2V5cyBiZWluZyBzdHJpbmdpZmllZC5cclxuICAgICAqIElmIHRoZXJlIGFyZSBkdXBsaWNhdGluZyBrZXlzIGFmdGVyIGNvbnZlcnRpbmcgdGhlbSB0byBzdHJpbmdzLCBiZWhhdmlvdXIgaXMgdW5kZXRlcm1pbmVkLlxyXG4gICAgICovXHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS50b1BPSk8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVfMywgX2I7XHJcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9jID0gX192YWx1ZXModGhpcyksIF9kID0gX2MubmV4dCgpOyAhX2QuZG9uZTsgX2QgPSBfYy5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfZSA9IF9fcmVhZChfZC52YWx1ZSwgMiksIGtleSA9IF9lWzBdLCB2YWx1ZSA9IF9lWzFdO1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgbGllIGFib3V0IHN5bWJvbCBrZXkgdHlwZXMgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTg2M1xyXG4gICAgICAgICAgICAgICAgcmVzW3R5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBzdHJpbmdpZnlLZXkoa2V5KV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8zXzEpIHsgZV8zID0geyBlcnJvcjogZV8zXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYiA9IF9jLnJldHVybikpIF9iLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzaGFsbG93IG5vbiBvYnNlcnZhYmxlIG9iamVjdCBjbG9uZSBvZiB0aGlzIG1hcC5cclxuICAgICAqIE5vdGUgdGhhdCB0aGUgdmFsdWVzIG1pZ3RoIHN0aWxsIGJlIG9ic2VydmFibGUuIEZvciBhIGRlZXAgY2xvbmUgdXNlIG1vYngudG9KUy5cclxuICAgICAqL1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9KUyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE1hcCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gVXNlZCBieSBKU09OLnN0cmluZ2lmeVxyXG4gICAgICAgIHJldHVybiB0aGlzLnRvUE9KTygpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLm5hbWUgK1xyXG4gICAgICAgICAgICBcIlt7IFwiICtcclxuICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmtleXMoKSlcclxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc3RyaW5naWZ5S2V5KGtleSkgKyBcIjogXCIgKyAoXCJcIiArIF90aGlzLmdldChrZXkpKTsgfSlcclxuICAgICAgICAgICAgICAgIC5qb2luKFwiLCBcIikgK1xyXG4gICAgICAgICAgICBcIiB9XVwiKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmVzIHRoaXMgb2JqZWN0LiBUcmlnZ2VycyBmb3IgdGhlIGV2ZW50cyAnYWRkJywgJ3VwZGF0ZScgYW5kICdkZWxldGUnLlxyXG4gICAgICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qvb2JzZXJ2ZVxyXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcclxuICAgICAqL1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIGludmFyaWFudChmaXJlSW1tZWRpYXRlbHkgIT09IHRydWUsIFwiYG9ic2VydmVgIGRvZXNuJ3Qgc3VwcG9ydCBmaXJlSW1tZWRpYXRlbHk9dHJ1ZSBpbiBjb21iaW5hdGlvbiB3aXRoIG1hcHMuXCIpO1xyXG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5pbnRlcmNlcHQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlTWFwO1xyXG59KCkpO1xyXG4vKiAndmFyJyBmaXhlcyBzbWFsbC1idWlsZCBpc3N1ZSAqL1xyXG52YXIgaXNPYnNlcnZhYmxlTWFwID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVNYXBcIiwgT2JzZXJ2YWJsZU1hcCk7XG5cbnZhciBfYSQxO1xyXG52YXIgT2JzZXJ2YWJsZVNldE1hcmtlciA9IHt9O1xyXG52YXIgT2JzZXJ2YWJsZVNldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVTZXQoaW5pdGlhbERhdGEsIGVuaGFuY2VyLCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKGVuaGFuY2VyID09PSB2b2lkIDApIHsgZW5oYW5jZXIgPSBkZWVwRW5oYW5jZXI7IH1cclxuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIk9ic2VydmFibGVTZXRAXCIgKyBnZXROZXh0SWQoKTsgfVxyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpc1tfYSQxXSA9IE9ic2VydmFibGVTZXRNYXJrZXI7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLl9hdG9tID0gY3JlYXRlQXRvbSh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXNbU3ltYm9sLnRvU3RyaW5nVGFnXSA9IFwiU2V0XCI7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBTZXQgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LnNldCByZXF1aXJlcyBTZXQgcG9seWZpbGwgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuIENoZWNrIGJhYmVsLXBvbHlmaWxsIG9yIGNvcmUtanMvZXM2L3NldC5qc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbmhhbmNlciA9IGZ1bmN0aW9uIChuZXdWLCBvbGRWKSB7IHJldHVybiBlbmhhbmNlcihuZXdWLCBvbGRWLCBuYW1lKTsgfTtcclxuICAgICAgICBpZiAoaW5pdGlhbERhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlKGluaXRpYWxEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5kZWhhbmNlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1bnRyYWNrZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVfMSwgX2I7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9jID0gX192YWx1ZXMoX3RoaXMuX2RhdGEudmFsdWVzKCkpLCBfZCA9IF9jLm5leHQoKTsgIV9kLmRvbmU7IF9kID0gX2MubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9kLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZWxldGUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2QgJiYgIV9kLmRvbmUgJiYgKF9iID0gX2MucmV0dXJuKSkgX2IuY2FsbChfYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFja0ZuLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgdmFyIGVfMiwgX2I7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2MgPSBfX3ZhbHVlcyh0aGlzKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gX2QudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja0ZuLmNhbGwodGhpc0FyZywgdmFsdWUsIHZhbHVlLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYiA9IF9jLnJldHVybikpIF9iLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9ic2VydmFibGVTZXQucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9hdG9tLnJlcG9ydE9ic2VydmVkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhLnNpemU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKHRoaXMuX2F0b20pO1xyXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZFwiLFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBpZGVhbGx5LCB2YWx1ZSA9IGNoYW5nZS52YWx1ZSB3b3VsZCBiZSBkb25lIGhlcmUsIHNvIHRoYXQgdmFsdWVzIGNhbiBiZVxyXG4gICAgICAgICAgICAvLyBjaGFuZ2VkIGJ5IGludGVyY2VwdG9yLiBTYW1lIGFwcGxpZXMgZm9yIG90aGVyIFNldCBhbmQgTWFwIGFwaSdzLlxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaGFzKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGF0YS5hZGQoX3RoaXMuZW5oYW5jZXIodmFsdWUsIHVuZGVmaW5lZCkpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2F0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxyXG4gICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRcIixcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoY2hhbmdlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRlbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCk7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XHJcbiAgICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRlbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2hhbmdlKSwgeyBuYW1lOiB0aGlzLm5hbWUgfSkpO1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fYXRvbS5yZXBvcnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGF0YS5kZWxldGUodmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2F0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5oYXModGhpcy5kZWhhbmNlVmFsdWUodmFsdWUpKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xyXG4gICAgICAgIHZhciBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSk7XHJcbiAgICAgICAgdmFyIHZhbHVlcyA9IEFycmF5LmZyb20odGhpcy52YWx1ZXMoKSk7XHJcbiAgICAgICAgcmV0dXJuIG1ha2VJdGVyYWJsZSh7XHJcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IG5leHRJbmRleDtcclxuICAgICAgICAgICAgICAgIG5leHRJbmRleCArPSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IDwgdmFsdWVzLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZTogW2tleXNbaW5kZXhdLCB2YWx1ZXNbaW5kZXhdXSwgZG9uZTogZmFsc2UgfVxyXG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9hdG9tLnJlcG9ydE9ic2VydmVkKCk7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xyXG4gICAgICAgIHZhciBvYnNlcnZhYmxlVmFsdWVzID0gQXJyYXkuZnJvbSh0aGlzLl9kYXRhLnZhbHVlcygpKTtcclxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcclxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRJbmRleCA8IG9ic2VydmFibGVWYWx1ZXMubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBzZWxmLmRlaGFuY2VWYWx1ZShvYnNlcnZhYmxlVmFsdWVzW25leHRJbmRleCsrXSksIGRvbmU6IGZhbHNlIH1cclxuICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZVNldChvdGhlcikpIHtcclxuICAgICAgICAgICAgb3RoZXIgPSBvdGhlci50b0pTKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3RoZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgb3RoZXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIF90aGlzLmFkZCh2YWx1ZSk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRVM2U2V0KG90aGVyKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBfdGhpcy5hZGQodmFsdWUpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvdGhlciAhPT0gbnVsbCAmJiBvdGhlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBmYWlsKFwiQ2Fubm90IGluaXRpYWxpemUgc2V0IGZyb20gXCIgKyBvdGhlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgICAgICAvLyBUT0RPICdmaXJlSW1tZWRpYXRlbHknIGNhbiBiZSB0cnVlP1xyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBpbnZhcmlhbnQoZmlyZUltbWVkaWF0ZWx5ICE9PSB0cnVlLCBcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgZmlyZUltbWVkaWF0ZWx5PXRydWUgaW4gY29tYmluYXRpb24gd2l0aCBzZXRzLlwiKTtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS50b0pTID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2V0KHRoaXMpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIlsgXCIgKyBBcnJheS5mcm9tKHRoaXMpLmpvaW4oXCIsIFwiKSArIFwiIF1cIjtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZVsoX2EkMSA9ICRtb2J4LCBTeW1ib2wuaXRlcmF0b3IpXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZVNldDtcclxufSgpKTtcclxudmFyIGlzT2JzZXJ2YWJsZVNldCA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJPYnNlcnZhYmxlU2V0XCIsIE9ic2VydmFibGVTZXQpO1xuXG52YXIgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKHRhcmdldCwgdmFsdWVzLCBuYW1lLCBkZWZhdWx0RW5oYW5jZXIpIHtcclxuICAgICAgICBpZiAodmFsdWVzID09PSB2b2lkIDApIHsgdmFsdWVzID0gbmV3IE1hcCgpOyB9XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRFbmhhbmNlciA9IGRlZmF1bHRFbmhhbmNlcjtcclxuICAgICAgICB0aGlzLmtleXNBdG9tID0gbmV3IEF0b20obmFtZSArIFwiLmtleXNcIik7XHJcbiAgICB9XHJcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmdldChrZXkpLmdldCgpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoa2V5LCBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMudGFyZ2V0O1xyXG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpcy52YWx1ZXMuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKG9ic2VydmFibGUgaW5zdGFuY2VvZiBDb21wdXRlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmFibGUuc2V0KG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbnRlcmNlcHRcclxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCBpbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdWYWx1ZSA9IG9ic2VydmFibGUucHJlcGFyZU5ld1ZhbHVlKG5ld1ZhbHVlKTtcclxuICAgICAgICAvLyBub3RpZnkgc3B5ICYgb2JzZXJ2ZXJzXHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQpIHtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxyXG4gICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHkgfHwgaW5zdGFuY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IG9ic2VydmFibGUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IG5hbWU6IHRoaXMubmFtZSwga2V5OiBrZXkgfSkpO1xyXG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldE5ld1ZhbHVlKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgbWFwID0gdGhpcy5wZW5kaW5nS2V5cyB8fCAodGhpcy5wZW5kaW5nS2V5cyA9IG5ldyBNYXAoKSk7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gbWFwLmdldChrZXkpO1xyXG4gICAgICAgIGlmIChlbnRyeSlcclxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5LmdldCgpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZXhpc3RzID0gISF0aGlzLnZhbHVlcy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgLy8gUG9zc2libGUgb3B0aW1pemF0aW9uOiBEb24ndCBoYXZlIGEgc2VwYXJhdGUgbWFwIGZvciBub24gZXhpc3Rpbmcga2V5cyxcclxuICAgICAgICAgICAgLy8gYnV0IHN0b3JlIHRoZW0gaW4gdGhlIHZhbHVlcyBtYXAgaW5zdGVhZCwgdXNpbmcgYSBzcGVjaWFsIHN5bWJvbCB0byBkZW5vdGUgXCJub3QgZXhpc3RpbmdcIlxyXG4gICAgICAgICAgICBlbnRyeSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoZXhpc3RzLCByZWZlcmVuY2VFbmhhbmNlciwgdGhpcy5uYW1lICsgXCIuXCIgKyBzdHJpbmdpZnlLZXkoa2V5KSArIFwiP1wiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIG1hcC5zZXQoa2V5LCBlbnRyeSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlbnRyeS5nZXQoKTsgLy8gcmVhZCB0byBzdWJzY3JpYmVcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5hZGRPYnNlcnZhYmxlUHJvcCA9IGZ1bmN0aW9uIChwcm9wTmFtZSwgbmV3VmFsdWUsIGVuaGFuY2VyKSB7XHJcbiAgICAgICAgaWYgKGVuaGFuY2VyID09PSB2b2lkIDApIHsgZW5oYW5jZXIgPSB0aGlzLmRlZmF1bHRFbmhhbmNlcjsgfVxyXG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldDtcclxuICAgICAgICBhc3NlcnRQcm9wZXJ0eUNvbmZpZ3VyYWJsZSh0YXJnZXQsIHByb3BOYW1lKTtcclxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5IHx8IHRhcmdldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IHByb3BOYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRcIixcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUobmV3VmFsdWUsIGVuaGFuY2VyLCB0aGlzLm5hbWUgKyBcIi5cIiArIHN0cmluZ2lmeUtleShwcm9wTmFtZSksIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnZhbHVlcy5zZXQocHJvcE5hbWUsIG9ic2VydmFibGUpO1xyXG4gICAgICAgIG5ld1ZhbHVlID0gb2JzZXJ2YWJsZS52YWx1ZTsgLy8gb2JzZXJ2YWJsZVZhbHVlIG1pZ2h0IGhhdmUgY2hhbmdlZCBpdFxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BOYW1lLCBnZW5lcmF0ZU9ic2VydmFibGVQcm9wQ29uZmlnKHByb3BOYW1lKSk7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlQcm9wZXJ0eUFkZGl0aW9uKHByb3BOYW1lLCBuZXdWYWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5hZGRDb21wdXRlZFByb3AgPSBmdW5jdGlvbiAocHJvcGVydHlPd25lciwgLy8gd2hlcmUgaXMgdGhlIHByb3BlcnR5IGRlY2xhcmVkP1xyXG4gICAgcHJvcE5hbWUsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XHJcbiAgICAgICAgb3B0aW9ucy5uYW1lID0gb3B0aW9ucy5uYW1lIHx8IHRoaXMubmFtZSArIFwiLlwiICsgc3RyaW5naWZ5S2V5KHByb3BOYW1lKTtcclxuICAgICAgICB0aGlzLnZhbHVlcy5zZXQocHJvcE5hbWUsIG5ldyBDb21wdXRlZFZhbHVlKG9wdGlvbnMpKTtcclxuICAgICAgICBpZiAocHJvcGVydHlPd25lciA9PT0gdGFyZ2V0IHx8IGlzUHJvcGVydHlDb25maWd1cmFibGUocHJvcGVydHlPd25lciwgcHJvcE5hbWUpKVxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcGVydHlPd25lciwgcHJvcE5hbWUsIGdlbmVyYXRlQ29tcHV0ZWRQcm9wQ29uZmlnKHByb3BOYW1lKSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlcy5oYXMoa2V5KSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldDtcclxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5IHx8IHRhcmdldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzdGFydEJhdGNoKCk7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICAgICAgdmFyIG9sZE9ic2VydmFibGUgPSB0aGlzLnZhbHVlcy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gb2xkT2JzZXJ2YWJsZSAmJiBvbGRPYnNlcnZhYmxlLmdldCgpO1xyXG4gICAgICAgICAgICBvbGRPYnNlcnZhYmxlICYmIG9sZE9ic2VydmFibGUuc2V0KHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIC8vIG5vdGlmeSBrZXkgYW5kIGtleXNldCBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgdGhpcy5rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nS2V5cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5wZW5kaW5nS2V5cy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeSlcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5zZXQoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSB0aGUgcHJvcFxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy50YXJnZXRba2V5XTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcclxuICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5IHx8IHRhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oX19hc3NpZ24oe30sIGNoYW5nZSksIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuaWxsZWdhbEFjY2VzcyA9IGZ1bmN0aW9uIChvd25lciwgcHJvcE5hbWUpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGlzIGhhcHBlbnMgaWYgYSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZCB0aHJvdWdoIHRoZSBwcm90b3R5cGUgY2hhaW4sIGJ1dCB0aGUgcHJvcGVydHkgd2FzXHJcbiAgICAgICAgICogZGVjbGFyZWQgZGlyZWN0bHkgYXMgb3duIHByb3BlcnR5IG9uIHRoZSBwcm90b3R5cGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBFLmcuOlxyXG4gICAgICAgICAqIGNsYXNzIEEge1xyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKiBleHRlbmRPYnNlcnZhYmxlKEEucHJvdG90eXBlLCB7IHg6IDEgfSlcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIGNsYXNzQiBleHRlbnMgQSB7XHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqIGNvbnNvbGUubG9nKG5ldyBCKCkueClcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEl0IGlzIHVuY2xlYXIgd2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgJ3N0YXRpYycgb3IgaW5oZXJpdGVkLlxyXG4gICAgICAgICAqIEVpdGhlciB1c2UgYGNvbnNvbGUubG9nKEEueClgXHJcbiAgICAgICAgICogb3I6IGRlY29yYXRlKEEsIHsgeDogb2JzZXJ2YWJsZSB9KVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogV2hlbiB1c2luZyBkZWNvcmF0ZSwgdGhlIHByb3BlcnR5IHdpbGwgYWx3YXlzIGJlIHJlZGVjbGFyZWQgYXMgb3duIHByb3BlcnR5IG9uIHRoZSBhY3R1YWwgaW5zdGFuY2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zb2xlLndhcm4oXCJQcm9wZXJ0eSAnXCIgKyBwcm9wTmFtZSArIFwiJyBvZiAnXCIgKyBvd25lciArIFwiJyB3YXMgYWNjZXNzZWQgdGhyb3VnaCB0aGUgcHJvdG90eXBlIGNoYWluLiBVc2UgJ2RlY29yYXRlJyBpbnN0ZWFkIHRvIGRlY2xhcmUgdGhlIHByb3Agb3IgYWNjZXNzIGl0IHN0YXRpY2FsbHkgdGhyb3VnaCBpdCdzIG93bmVyXCIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2ZXMgdGhpcyBvYmplY3QuIFRyaWdnZXJzIGZvciB0aGUgZXZlbnRzICdhZGQnLCAndXBkYXRlJyBhbmQgJ2RlbGV0ZScuXHJcbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXHJcbiAgICAgKiBmb3IgY2FsbGJhY2sgZGV0YWlsc1xyXG4gICAgICovXHJcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGZpcmVJbW1lZGlhdGVseSkge1xyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBpbnZhcmlhbnQoZmlyZUltbWVkaWF0ZWx5ICE9PSB0cnVlLCBcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgdGhlIGZpcmUgaW1tZWRpYXRlbHkgcHJvcGVydHkgZm9yIG9ic2VydmFibGUgb2JqZWN0cy5cIik7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm5vdGlmeVByb3BlcnR5QWRkaXRpb24gPSBmdW5jdGlvbiAoa2V5LCBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XHJcbiAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XHJcbiAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRcIixcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCB0aGlzLnRhcmdldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oX19hc3NpZ24oe30sIGNoYW5nZSksIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdLZXlzKSB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMucGVuZGluZ0tleXMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeSlcclxuICAgICAgICAgICAgICAgIGVudHJ5LnNldCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5nZXRLZXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlXzEsIF9hO1xyXG4gICAgICAgIHRoaXMua2V5c0F0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcclxuICAgICAgICAvLyByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRoaXMudmFsdWVzKSBhcyBhbnlcclxuICAgICAgICB2YXIgcmVzID0gW107XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLnZhbHVlcyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfZCA9IF9fcmVhZChfYy52YWx1ZSwgMiksIGtleSA9IF9kWzBdLCB2YWx1ZSA9IF9kWzFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JzZXJ2YWJsZVZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbjtcclxufSgpKTtcclxuZnVuY3Rpb24gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgbmFtZSwgZGVmYXVsdEVuaGFuY2VyKSB7XHJcbiAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIlwiOyB9XHJcbiAgICBpZiAoZGVmYXVsdEVuaGFuY2VyID09PSB2b2lkIDApIHsgZGVmYXVsdEVuaGFuY2VyID0gZGVlcEVuaGFuY2VyOyB9XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgJG1vYngpKVxyXG4gICAgICAgIHJldHVybiB0YXJnZXRbJG1vYnhdO1xyXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgaW52YXJpYW50KE9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KSwgXCJDYW5ub3QgbWFrZSB0aGUgZGVzaWduYXRlZCBvYmplY3Qgb2JzZXJ2YWJsZTsgaXQgaXMgbm90IGV4dGVuc2libGVcIik7XHJcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodGFyZ2V0KSlcclxuICAgICAgICBuYW1lID0gKHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lIHx8IFwiT2JzZXJ2YWJsZU9iamVjdFwiKSArIFwiQFwiICsgZ2V0TmV4dElkKCk7XHJcbiAgICBpZiAoIW5hbWUpXHJcbiAgICAgICAgbmFtZSA9IFwiT2JzZXJ2YWJsZU9iamVjdEBcIiArIGdldE5leHRJZCgpO1xyXG4gICAgdmFyIGFkbSA9IG5ldyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24odGFyZ2V0LCBuZXcgTWFwKCksIHN0cmluZ2lmeUtleShuYW1lKSwgZGVmYXVsdEVuaGFuY2VyKTtcclxuICAgIGFkZEhpZGRlblByb3AodGFyZ2V0LCAkbW9ieCwgYWRtKTtcclxuICAgIHJldHVybiBhZG07XHJcbn1cclxudmFyIG9ic2VydmFibGVQcm9wZXJ0eUNvbmZpZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG52YXIgY29tcHV0ZWRQcm9wZXJ0eUNvbmZpZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZU9ic2VydmFibGVQcm9wQ29uZmlnKHByb3BOYW1lKSB7XHJcbiAgICByZXR1cm4gKG9ic2VydmFibGVQcm9wZXJ0eUNvbmZpZ3NbcHJvcE5hbWVdIHx8XHJcbiAgICAgICAgKG9ic2VydmFibGVQcm9wZXJ0eUNvbmZpZ3NbcHJvcE5hbWVdID0ge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLnJlYWQocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzWyRtb2J4XS53cml0ZShwcm9wTmFtZSwgdik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QWRtaW5pc3RyYXRpb25Gb3JDb21wdXRlZFByb3BPd25lcihvd25lcikge1xyXG4gICAgdmFyIGFkbSA9IG93bmVyWyRtb2J4XTtcclxuICAgIGlmICghYWRtKSB7XHJcbiAgICAgICAgLy8gYmVjYXVzZSBjb21wdXRlZCBwcm9wcyBhcmUgZGVjbGFyZWQgb24gcHJvdHksXHJcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgaW5zdGFuY2UgbWlnaHQgbm90IGhhdmUgYmVlbiBpbml0aWFsaXplZCB5ZXRcclxuICAgICAgICBpbml0aWFsaXplSW5zdGFuY2Uob3duZXIpO1xyXG4gICAgICAgIHJldHVybiBvd25lclskbW9ieF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWRtO1xyXG59XHJcbmZ1bmN0aW9uIGdlbmVyYXRlQ29tcHV0ZWRQcm9wQ29uZmlnKHByb3BOYW1lKSB7XHJcbiAgICByZXR1cm4gKGNvbXB1dGVkUHJvcGVydHlDb25maWdzW3Byb3BOYW1lXSB8fFxyXG4gICAgICAgIChjb21wdXRlZFByb3BlcnR5Q29uZmlnc1twcm9wTmFtZV0gPSB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZ2xvYmFsU3RhdGUuY29tcHV0ZWRDb25maWd1cmFibGUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbkZvckNvbXB1dGVkUHJvcE93bmVyKHRoaXMpLnJlYWQocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICBnZXRBZG1pbmlzdHJhdGlvbkZvckNvbXB1dGVkUHJvcE93bmVyKHRoaXMpLndyaXRlKHByb3BOYW1lLCB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKTtcclxufVxyXG52YXIgaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXCIsIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbik7XHJcbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZU9iamVjdCh0aGluZykge1xyXG4gICAgaWYgKGlzT2JqZWN0KHRoaW5nKSkge1xyXG4gICAgICAgIC8vIEluaXRpYWxpemVycyBydW4gbGF6aWx5IHdoZW4gdHJhbnNwaWxpbmcgdG8gYmFiZWwsIHNvIG1ha2Ugc3VyZSB0aGV5IGFyZSBydW4uLi5cclxuICAgICAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpbmcpO1xyXG4gICAgICAgIHJldHVybiBpc09ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbih0aGluZ1skbW9ieF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XG5cbmZ1bmN0aW9uIGdldEF0b20odGhpbmcsIHByb3BlcnR5KSB7XHJcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmIHRoaW5nICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KHRoaW5nKSkge1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgICAgICAgICAgXCJJdCBpcyBub3QgcG9zc2libGUgdG8gZ2V0IGluZGV4IGF0b21zIGZyb20gYXJyYXlzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpbmdbJG1vYnhdLmF0b207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc09ic2VydmFibGVTZXQodGhpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGluZ1skbW9ieF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpKSB7XHJcbiAgICAgICAgICAgIHZhciBhbnlUaGluZyA9IHRoaW5nO1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIHJldHVybiBhbnlUaGluZy5fa2V5c0F0b207XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gYW55VGhpbmcuX2RhdGEuZ2V0KHByb3BlcnR5KSB8fCBhbnlUaGluZy5faGFzTWFwLmdldChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSlcclxuICAgICAgICAgICAgICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0aGUgZW50cnkgJ1wiICsgcHJvcGVydHkgKyBcIicgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG9ic2VydmFibGUgbWFwICdcIiArIGdldERlYnVnTmFtZSh0aGluZykgKyBcIidcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJbml0aWFsaXplcnMgcnVuIGxhemlseSB3aGVuIHRyYW5zcGlsaW5nIHRvIGJhYmVsLCBzbyBtYWtlIHN1cmUgdGhleSBhcmUgcnVuLi4uXHJcbiAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaW5nKTtcclxuICAgICAgICBpZiAocHJvcGVydHkgJiYgIXRoaW5nWyRtb2J4XSlcclxuICAgICAgICAgICAgdGhpbmdbcHJvcGVydHldOyAvLyBTZWUgIzEwNzJcclxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSkge1xyXG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwicGxlYXNlIHNwZWNpZnkgYSBwcm9wZXJ0eVwiKTtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGluZ1skbW9ieF0udmFsdWVzLmdldChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSlcclxuICAgICAgICAgICAgICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgICAgICAgICAgXCJubyBvYnNlcnZhYmxlIHByb3BlcnR5ICdcIiArIHByb3BlcnR5ICsgXCInIGZvdW5kIG9uIHRoZSBvYnNlcnZhYmxlIG9iamVjdCAnXCIgKyBnZXREZWJ1Z05hbWUodGhpbmcpICsgXCInXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzQXRvbSh0aGluZykgfHwgaXNDb21wdXRlZFZhbHVlKHRoaW5nKSB8fCBpc1JlYWN0aW9uKHRoaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBpZiAoaXNSZWFjdGlvbih0aGluZ1skbW9ieF0pKSB7XHJcbiAgICAgICAgICAgIC8vIGRpc3Bvc2VyIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgIHJldHVybiB0aGluZ1skbW9ieF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQ2Fubm90IG9idGFpbiBhdG9tIGZyb20gXCIgKyB0aGluZyk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KSB7XHJcbiAgICBpZiAoIXRoaW5nKVxyXG4gICAgICAgIGZhaWwoXCJFeHBlY3Rpbmcgc29tZSBvYmplY3RcIik7XHJcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24oZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKTtcclxuICAgIGlmIChpc0F0b20odGhpbmcpIHx8IGlzQ29tcHV0ZWRWYWx1ZSh0aGluZykgfHwgaXNSZWFjdGlvbih0aGluZykpXHJcbiAgICAgICAgcmV0dXJuIHRoaW5nO1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0aGluZykgfHwgaXNPYnNlcnZhYmxlU2V0KHRoaW5nKSlcclxuICAgICAgICByZXR1cm4gdGhpbmc7XHJcbiAgICAvLyBJbml0aWFsaXplcnMgcnVuIGxhemlseSB3aGVuIHRyYW5zcGlsaW5nIHRvIGJhYmVsLCBzbyBtYWtlIHN1cmUgdGhleSBhcmUgcnVuLi4uXHJcbiAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpbmcpO1xyXG4gICAgaWYgKHRoaW5nWyRtb2J4XSlcclxuICAgICAgICByZXR1cm4gdGhpbmdbJG1vYnhdO1xyXG4gICAgZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJDYW5ub3Qgb2J0YWluIGFkbWluaXN0cmF0aW9uIGZyb20gXCIgKyB0aGluZyk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVidWdOYW1lKHRoaW5nLCBwcm9wZXJ0eSkge1xyXG4gICAgdmFyIG5hbWVkO1xyXG4gICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSk7XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVPYmplY3QodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZU1hcCh0aGluZykgfHwgaXNPYnNlcnZhYmxlU2V0KHRoaW5nKSlcclxuICAgICAgICBuYW1lZCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKTtcclxuICAgIGVsc2VcclxuICAgICAgICBuYW1lZCA9IGdldEF0b20odGhpbmcpOyAvLyB2YWxpZCBmb3IgYXJyYXlzIGFzIHdlbGxcclxuICAgIHJldHVybiBuYW1lZC5uYW1lO1xyXG59XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbmZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiLCBkZXB0aCkge1xyXG4gICAgaWYgKGRlcHRoID09PSB2b2lkIDApIHsgZGVwdGggPSAtMTsgfVxyXG4gICAgcmV0dXJuIGVxKGEsIGIsIGRlcHRoKTtcclxufVxyXG4vLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvYmxvYi81YzIzN2E3YzY4MmZiNjhmZDUzNzgyMDNmMGJmMjJkY2UxNjI0ODU0L3VuZGVyc2NvcmUuanMjTDExODYtTDEyODlcclxuLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cclxuZnVuY3Rpb24gZXEoYSwgYiwgZGVwdGgsIGFTdGFjaywgYlN0YWNrKSB7XHJcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXHJcbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cclxuICAgIGlmIChhID09PSBiKVxyXG4gICAgICAgIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcclxuICAgIC8vIGBudWxsYCBvciBgdW5kZWZpbmVkYCBvbmx5IGVxdWFsIHRvIGl0c2VsZiAoc3RyaWN0IGNvbXBhcmlzb24pLlxyXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cclxuICAgIGlmIChhICE9PSBhKVxyXG4gICAgICAgIHJldHVybiBiICE9PSBiO1xyXG4gICAgLy8gRXhoYXVzdCBwcmltaXRpdmUgY2hlY2tzXHJcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhO1xyXG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBiICE9IFwib2JqZWN0XCIpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cclxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xyXG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxyXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFJlZ0V4cF1cIjpcclxuICAgICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxyXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFN0cmluZ11cIjpcclxuICAgICAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcclxuICAgICAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxyXG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIGEgPT09IFwiXCIgKyBiO1xyXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IE51bWJlcl1cIjpcclxuICAgICAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cclxuICAgICAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXHJcbiAgICAgICAgICAgIGlmICgrYSAhPT0gK2EpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gK2IgIT09ICtiO1xyXG4gICAgICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xyXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IERhdGVdXCI6XHJcbiAgICAgICAgY2FzZSBcIltvYmplY3QgQm9vbGVhbl1cIjpcclxuICAgICAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxyXG4gICAgICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXHJcbiAgICAgICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cclxuICAgICAgICAgICAgcmV0dXJuICthID09PSArYjtcclxuICAgICAgICBjYXNlIFwiW29iamVjdCBTeW1ib2xdXCI6XHJcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudmFsdWVPZi5jYWxsKGEpID09PSBTeW1ib2wudmFsdWVPZi5jYWxsKGIpKTtcclxuICAgICAgICBjYXNlIFwiW29iamVjdCBNYXBdXCI6XHJcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU2V0XVwiOlxyXG4gICAgICAgICAgICAvLyBNYXBzIGFuZCBTZXRzIGFyZSB1bndyYXBwZWQgdG8gYXJyYXlzIG9mIGVudHJ5LXBhaXJzLCBhZGRpbmcgYW4gaW5jaWRlbnRhbCBsZXZlbC5cclxuICAgICAgICAgICAgLy8gSGlkZSB0aGlzIGV4dHJhIGxldmVsIGJ5IGluY3JlYXNpbmcgdGhlIGRlcHRoLlxyXG4gICAgICAgICAgICBpZiAoZGVwdGggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGVwdGgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxyXG4gICAgYSA9IHVud3JhcChhKTtcclxuICAgIGIgPSB1bndyYXAoYik7XHJcbiAgICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSBcIltvYmplY3QgQXJyYXldXCI7XHJcbiAgICBpZiAoIWFyZUFycmF5cykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYSAhPSBcIm9iamVjdFwiIHx8IHR5cGVvZiBiICE9IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcclxuICAgICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxyXG4gICAgICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjtcclxuICAgICAgICBpZiAoYUN0b3IgIT09IGJDdG9yICYmXHJcbiAgICAgICAgICAgICEodHlwZW9mIGFDdG9yID09PSBcImZ1bmN0aW9uXCIgJiZcclxuICAgICAgICAgICAgICAgIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBiQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmXHJcbiAgICAgICAgICAgICAgICBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKSAmJlxyXG4gICAgICAgICAgICAoXCJjb25zdHJ1Y3RvclwiIGluIGEgJiYgXCJjb25zdHJ1Y3RvclwiIGluIGIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZGVwdGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkZXB0aCA8IDApIHtcclxuICAgICAgICBkZXB0aCA9IC0xO1xyXG4gICAgfVxyXG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xyXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXHJcbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXHJcbiAgICAvLyBJdCdzIGRvbmUgaGVyZSBzaW5jZSB3ZSBvbmx5IG5lZWQgdGhlbSBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzIGNvbXBhcmlzb24uXHJcbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XHJcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XHJcbiAgICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcclxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xyXG4gICAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxyXG4gICAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cclxuICAgICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpXHJcbiAgICAgICAgICAgIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcclxuICAgIH1cclxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cclxuICAgIGFTdGFjay5wdXNoKGEpO1xyXG4gICAgYlN0YWNrLnB1c2goYik7XHJcbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cclxuICAgIGlmIChhcmVBcnJheXMpIHtcclxuICAgICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cclxuICAgICAgICBsZW5ndGggPSBhLmxlbmd0aDtcclxuICAgICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXHJcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XHJcbiAgICAgICAgICAgIGlmICghZXEoYVtsZW5ndGhdLCBiW2xlbmd0aF0sIGRlcHRoIC0gMSwgYVN0YWNrLCBiU3RhY2spKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxyXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYSk7XHJcbiAgICAgICAgdmFyIGtleSA9IHZvaWQgMDtcclxuICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcclxuICAgICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XHJcbiAgICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxyXG4gICAgICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XHJcbiAgICAgICAgICAgIGlmICghKGhhcyQxKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGRlcHRoIC0gMSwgYVN0YWNrLCBiU3RhY2spKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cclxuICAgIGFTdGFjay5wb3AoKTtcclxuICAgIGJTdGFjay5wb3AoKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIHVud3JhcChhKSB7XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkoYSkpXHJcbiAgICAgICAgcmV0dXJuIGEuc2xpY2UoKTtcclxuICAgIGlmIChpc0VTNk1hcChhKSB8fCBpc09ic2VydmFibGVNYXAoYSkpXHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYS5lbnRyaWVzKCkpO1xyXG4gICAgaWYgKGlzRVM2U2V0KGEpIHx8IGlzT2JzZXJ2YWJsZVNldChhKSlcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShhLmVudHJpZXMoKSk7XHJcbiAgICByZXR1cm4gYTtcclxufVxyXG5mdW5jdGlvbiBoYXMkMShhLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwga2V5KTtcclxufVxuXG5mdW5jdGlvbiBtYWtlSXRlcmFibGUoaXRlcmF0b3IpIHtcclxuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBnZXRTZWxmO1xyXG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNlbGYoKSB7XHJcbiAgICByZXR1cm4gdGhpcztcclxufVxuXG4vKlxyXG5UaGUgb25seSByZWFzb24gZm9yIHRoaXMgZmlsZSB0byBleGlzdCBpcyBwdXJlIGhvcnJvcjpcclxuV2l0aG91dCBpdCByb2xsdXAgY2FuIG1ha2UgdGhlIGJ1bmRsaW5nIGZhaWwgYXQgYW55IHBvaW50IGluIHRpbWU7IHdoZW4gaXQgcm9sbHMgdXAgdGhlIGZpbGVzIGluIHRoZSB3cm9uZyBvcmRlclxyXG5pdCB3aWxsIGNhdXNlIHVuZGVmaW5lZCBlcnJvcnMgKGZvciBleGFtcGxlIGJlY2F1c2Ugc3VwZXIgY2xhc3NlcyBvciBsb2NhbCB2YXJpYWJsZXMgbm90IGJlaW5nIGhvaXN0ZWQpLlxyXG5XaXRoIHRoaXMgZmlsZSB0aGF0IHdpbGwgc3RpbGwgaGFwcGVuLFxyXG5idXQgYXQgbGVhc3QgaW4gdGhpcyBmaWxlIHdlIGNhbiBtYWdpY2FsbHkgcmVvcmRlciB0aGUgaW1wb3J0cyB3aXRoIHRyaWFsIGFuZCBlcnJvciB1bnRpbCB0aGUgYnVpbGQgc3VjY2VlZHMgYWdhaW4uXHJcbiovXG5cbi8qKlxyXG4gKiAoYykgTWljaGVsIFdlc3RzdHJhdGUgMjAxNSAtIDIwMThcclxuICogTUlUIExpY2Vuc2VkXHJcbiAqXHJcbiAqIFdlbGNvbWUgdG8gdGhlIG1vYnggc291cmNlcyEgVG8gZ2V0IGFuIGdsb2JhbCBvdmVydmlldyBvZiBob3cgTW9iWCBpbnRlcm5hbGx5IHdvcmtzLFxyXG4gKiB0aGlzIGlzIGEgZ29vZCBwbGFjZSB0byBzdGFydDpcclxuICogaHR0cHM6Ly9tZWRpdW0uY29tL0Btd2VzdHN0cmF0ZS9iZWNvbWluZy1mdWxseS1yZWFjdGl2ZS1hbi1pbi1kZXB0aC1leHBsYW5hdGlvbi1vZi1tb2JzZXJ2YWJsZS01NTk5NTI2MmEyNTQjLnh2Ymg2cWQ3NFxyXG4gKlxyXG4gKiBTb3VyY2UgZm9sZGVyczpcclxuICogPT09PT09PT09PT09PT09XHJcbiAqXHJcbiAqIC0gYXBpLyAgICAgTW9zdCBvZiB0aGUgcHVibGljIHN0YXRpYyBtZXRob2RzIGV4cG9zZWQgYnkgdGhlIG1vZHVsZSBjYW4gYmUgZm91bmQgaGVyZS5cclxuICogLSBjb3JlLyAgICBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgTW9iWCBhbGdvcml0aG07IGF0b21zLCBkZXJpdmF0aW9ucywgcmVhY3Rpb25zLCBkZXBlbmRlbmN5IHRyZWVzLCBvcHRpbWl6YXRpb25zLiBDb29sIHN0dWZmIGNhbiBiZSBmb3VuZCBoZXJlLlxyXG4gKiAtIHR5cGVzLyAgIEFsbCB0aGUgbWFnaWMgdGhhdCBpcyBuZWVkIHRvIGhhdmUgb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIHZhbHVlcyBpcyBpbiB0aGlzIGZvbGRlci4gSW5jbHVkaW5nIHRoZSBtb2RpZmllcnMgbGlrZSBgYXNGbGF0YC5cclxuICogLSB1dGlscy8gICBVdGlsaXR5IHN0dWZmLlxyXG4gKlxyXG4gKi9cclxuaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieF0gTW9iWCA1KyByZXF1aXJlcyBQcm94eSBhbmQgU3ltYm9sIG9iamVjdHMuIElmIHlvdXIgZW52aXJvbm1lbnQgZG9lc24ndCBzdXBwb3J0IFN5bWJvbCBvciBQcm94eSBvYmplY3RzLCBwbGVhc2UgZG93bmdyYWRlIHRvIE1vYlggNC4gRm9yIFJlYWN0IE5hdGl2ZSBBbmRyb2lkLCBjb25zaWRlciB1cGdyYWRpbmcgSlNDb3JlLlwiKTtcclxufVxyXG50cnkge1xyXG4gICAgLy8gZGVmaW5lIHByb2Nlc3MuZW52IGlmIG5lZWRlZFxyXG4gICAgLy8gaWYgdGhpcyBpcyBub3QgYSBwcm9kdWN0aW9uIGJ1aWxkIGluIHRoZSBmaXJzdCBwbGFjZVxyXG4gICAgLy8gKGluIHdoaWNoIGNhc2UgdGhlIGV4cHJlc3Npb24gYmVsb3cgd291bGQgYmUgc3Vic3RpdHV0ZWQgd2l0aCAncHJvZHVjdGlvbicpXHJcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOVjtcclxufVxyXG5jYXRjaCAoZSkge1xyXG4gICAgdmFyIGcgPSBnZXRHbG9iYWwoKTtcclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIilcclxuICAgICAgICBnLnByb2Nlc3MgPSB7fTtcclxuICAgIGcucHJvY2Vzcy5lbnYgPSB7fTtcclxufVxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gdGVzdENvZGVNaW5pZmljYXRpb24oKSB7IH1cclxuICAgIGlmICh0ZXN0Q29kZU1pbmlmaWNhdGlvbi5uYW1lICE9PSBcInRlc3RDb2RlTWluaWZpY2F0aW9uXCIgJiZcclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuSUdOT1JFX01PQlhfTUlOSUZZX1dBUk5JTkcgIT09IFwidHJ1ZVwiKSB7XHJcbiAgICAgICAgLy8gdHJpY2sgc28gaXQgZG9lc24ndCBnZXQgcmVwbGFjZWRcclxuICAgICAgICB2YXIgdmFyTmFtZSA9IFtcInByb2Nlc3NcIiwgXCJlbnZcIiwgXCJOT0RFX0VOVlwiXS5qb2luKFwiLlwiKTtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0geW91IGFyZSBydW5uaW5nIGEgbWluaWZpZWQgYnVpbGQsIGJ1dCAnXCIgKyB2YXJOYW1lICsgXCInIHdhcyBub3Qgc2V0IHRvICdwcm9kdWN0aW9uJyBpbiB5b3VyIGJ1bmRsZXIuIFRoaXMgcmVzdWx0cyBpbiBhbiB1bm5lY2Vzc2FyaWx5IGxhcmdlIGFuZCBzbG93IGJ1bmRsZVwiKTtcclxuICAgIH1cclxufSkoKTtcclxuaWYgKHR5cGVvZiBfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYW5keWtvZy9tb2J4LWRldnRvb2xzL1xyXG4gICAgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0TW9ieCh7XHJcbiAgICAgICAgc3B5OiBzcHksXHJcbiAgICAgICAgZXh0cmFzOiB7XHJcbiAgICAgICAgICAgIGdldERlYnVnTmFtZTogZ2V0RGVidWdOYW1lXHJcbiAgICAgICAgfSxcclxuICAgICAgICAkbW9ieDogJG1vYnhcclxuICAgIH0pO1xyXG59XG5cbmV4cG9ydCB7ICRtb2J4LCBGbG93Q2FuY2VsbGF0aW9uRXJyb3IsIElEZXJpdmF0aW9uU3RhdGUsIE9ic2VydmFibGVNYXAsIE9ic2VydmFibGVTZXQsIFJlYWN0aW9uLCBhbGxvd1N0YXRlQ2hhbmdlcyBhcyBfYWxsb3dTdGF0ZUNoYW5nZXMsIGFsbG93U3RhdGVDaGFuZ2VzSW5zaWRlQ29tcHV0ZWQgYXMgX2FsbG93U3RhdGVDaGFuZ2VzSW5zaWRlQ29tcHV0ZWQsIGFsbG93U3RhdGVSZWFkc0VuZCBhcyBfYWxsb3dTdGF0ZVJlYWRzRW5kLCBhbGxvd1N0YXRlUmVhZHNTdGFydCBhcyBfYWxsb3dTdGF0ZVJlYWRzU3RhcnQsIF9lbmRBY3Rpb24sIGdldEFkbWluaXN0cmF0aW9uIGFzIF9nZXRBZG1pbmlzdHJhdGlvbiwgZ2V0R2xvYmFsU3RhdGUgYXMgX2dldEdsb2JhbFN0YXRlLCBpbnRlcmNlcHRSZWFkcyBhcyBfaW50ZXJjZXB0UmVhZHMsIGlzQ29tcHV0aW5nRGVyaXZhdGlvbiBhcyBfaXNDb21wdXRpbmdEZXJpdmF0aW9uLCByZXNldEdsb2JhbFN0YXRlIGFzIF9yZXNldEdsb2JhbFN0YXRlLCBfc3RhcnRBY3Rpb24sIGFjdGlvbiwgYXV0b3J1biwgY29tcGFyZXIsIGNvbXB1dGVkLCBjb25maWd1cmUsIGNyZWF0ZUF0b20sIGRlY29yYXRlLCBlbnRyaWVzLCBleHRlbmRPYnNlcnZhYmxlLCBmbG93LCBnZXQsIGdldEF0b20sIGdldERlYnVnTmFtZSwgZ2V0RGVwZW5kZW5jeVRyZWUsIGdldE9ic2VydmVyVHJlZSwgaGFzLCBpbnRlcmNlcHQsIGlzQWN0aW9uLCBpc0FycmF5TGlrZSwgaXNPYnNlcnZhYmxlVmFsdWUgYXMgaXNCb3hlZE9ic2VydmFibGUsIGlzQ29tcHV0ZWQsIGlzQ29tcHV0ZWRQcm9wLCBpc0Zsb3dDYW5jZWxsYXRpb25FcnJvciwgaXNPYnNlcnZhYmxlLCBpc09ic2VydmFibGVBcnJheSwgaXNPYnNlcnZhYmxlTWFwLCBpc09ic2VydmFibGVPYmplY3QsIGlzT2JzZXJ2YWJsZVByb3AsIGlzT2JzZXJ2YWJsZVNldCwga2V5cywgb2JzZXJ2YWJsZSwgb2JzZXJ2ZSwgb25CZWNvbWVPYnNlcnZlZCwgb25CZWNvbWVVbm9ic2VydmVkLCBvblJlYWN0aW9uRXJyb3IsIHJlYWN0aW9uLCByZW1vdmUsIHJ1bkluQWN0aW9uLCBzZXQsIHNweSwgdG9KUywgdHJhY2UsIHRyYW5zYWN0aW9uLCB1bnRyYWNrZWQsIHZhbHVlcywgd2hlbiB9O1xuIiwiaW1wb3J0IHsgYWN0aW9uLCBhdXRvcnVuLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgKiBhcyBtb2J4IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgY3JlYXRlLCBwZXJzaXN0IH0gZnJvbSAnbW9ieC1wZXJzaXN0JztcblxubW9ieC5jb25maWd1cmUoeyBlbmZvcmNlQWN0aW9uczogXCJvYnNlcnZlZFwiIH0pO1xuXG5leHBvcnQgY2xhc3MgTVZhcmlhYmxlIHtcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgaWQgPSAnJztcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgdmFsdWUgPSAnJztcbn1cblxuZXhwb3J0IGNsYXNzIE1Qcm9wZXJ0eSB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGlkID0gJyc7XG59XG5cbmV4cG9ydCBjbGFzcyBNUmVxdWlyZW1lbnQge1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBpZCA9ICcnO1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSB0eXBlID0gJyc7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIHZhbHVlID0gJyc7XG59XG5cbmV4cG9ydCBjbGFzcyBNVGFza1Byb3BlcnR5IHtcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgaWQgPSAnJztcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgYWNjZXNzID0gJyc7XG59XG5cbmV4cG9ydCBjbGFzcyBNVGFzayB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGlkID0gJyc7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGV4ZVZhbHVlID0gJyc7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGV4ZVJlYWNoYWJsZSA9ICcnO1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBlbnZWYWx1ZSA9ICcnO1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBlbnZSZWFjaGFibGUgPSAnJztcbiAgQHBlcnNpc3QoJ2xpc3QnLCBNVGFza1Byb3BlcnR5KSBAb2JzZXJ2YWJsZSBwcm9wZXJ0aWVzID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JykgQG9ic2VydmFibGUgcmVxdWlyZW1lbnRzID0gW107XG59XG5cbmV4cG9ydCBjbGFzcyBNQ29sbGVjdGlvbiB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGlkID0gJyc7XG4gIEBwZXJzaXN0KCdsaXN0JykgQG9ic2VydmFibGUgdGFza3MgPSBbXTtcbiAgQHBlcnNpc3QoJ2xpc3QnKSBAb2JzZXJ2YWJsZSByZXF1aXJlbWVudHMgPSBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIE1Hcm91cCB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGlkID0gJyc7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIG4gPSAnJztcbiAgQHBlcnNpc3QoJ2xpc3QnKSBAb2JzZXJ2YWJsZSB0YXNrcyA9IFtdO1xuICBAcGVyc2lzdCgnbGlzdCcpIEBvYnNlcnZhYmxlIGNvbGxlY3Rpb25zID0gW107XG59XG5cbmV4cG9ydCBjbGFzcyBNTWFpbiB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGlkID0gJ21haW4nO1xuICBAcGVyc2lzdCgnbGlzdCcpIEBvYnNlcnZhYmxlIHRhc2tzID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JykgQG9ic2VydmFibGUgY29sbGVjdGlvbnMgPSBbXTtcbiAgQHBlcnNpc3QoJ2xpc3QnLCBNR3JvdXApIEBvYnNlcnZhYmxlIGdyb3VwcyA9IFtdO1xufVxuXG5jbGFzcyBTdG9yZSB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIHRvcG9sb2d5SWQgPSAnbmV3JztcblxuICBAcGVyc2lzdCgnbGlzdCcsIE1WYXJpYWJsZSkgQG9ic2VydmFibGUgdmFyaWFibGVzID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JywgTVByb3BlcnR5KSBAb2JzZXJ2YWJsZSBwcm9wZXJ0aWVzID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JywgTVJlcXVpcmVtZW50KSBAb2JzZXJ2YWJsZSByZXF1aXJlbWVudHMgPSBbXTtcbiAgQHBlcnNpc3QoJ2xpc3QnLCBNVGFzaykgQG9ic2VydmFibGUgdGFza3MgPSBbXTtcbiAgQHBlcnNpc3QoJ2xpc3QnLCBNQ29sbGVjdGlvbikgQG9ic2VydmFibGUgY29sbGVjdGlvbnMgPSBbXTtcbiAgQHBlcnNpc3QoJ29iamVjdCcsIE1NYWluKSBAb2JzZXJ2YWJsZSBtYWluID0gbmV3IE1NYWluO1xuXG4gIEBhY3Rpb24gcmVzZXQgPSAoKSA9PiB7XG4gICAgdGhpcy50b3BvbG9neUlkID0gJ25ldyc7XG4gICAgdGhpcy52YXJpYWJsZXMgPSBbXTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSBbXTtcbiAgICB0aGlzLnJlcXVpcmVtZW50cyA9IFtdO1xuICAgIHRoaXMudGFza3MgPSBbXTtcbiAgICB0aGlzLmNvbGxlY3Rpb25zID0gW107XG4gICAgdGhpcy5tYWluID0gbmV3IE1NYWluO1xuICB9XG5cbiAgQGFjdGlvbiBzZXRUb3BvbG9neUlkID0gKGlkKSA9PiB7IHRoaXMudG9wb2xvZ3lJZCA9IGlkOyB9XG5cbiAgQGFjdGlvbiBzZXRWYXJpYWJsZXMgPSAodmFyaWFibGVzKSA9PiB7IHRoaXMudmFyaWFibGVzID0gdmFyaWFibGVzOyB9XG4gIEBhY3Rpb24gc2V0UHJvcGVydGllcyA9IChwcm9wZXJ0aWVzKSA9PiB7IHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7IH1cbiAgQGFjdGlvbiBzZXRSZXF1aXJlbWVudHMgPSAocmVxdWlyZW1lbnRzKSA9PiB7IHRoaXMucmVxdWlyZW1lbnRzID0gcmVxdWlyZW1lbnRzOyB9XG4gIEBhY3Rpb24gc2V0VGFza3MgPSAodGFza3MpID0+IHsgdGhpcy50YXNrcyA9IHRhc2tzOyB9XG4gIEBhY3Rpb24gc2V0Q29sbGVjdGlvbnMgPSAoY29sbGVjdGlvbnMpID0+IHsgdGhpcy5jb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zOyB9XG4gIEBhY3Rpb24gc2V0TWFpbiA9IChtYWluKSA9PiB7IHRoaXMubWFpbiA9IG1haW47IH1cblxuICBAYWN0aW9uIGFkZFZhcmlhYmxlID0gKG5ld1ZhcmlhYmxlKSA9PiB7IHRoaXMudmFyaWFibGVzLnB1c2gobmV3VmFyaWFibGUpOyB9XG4gIEBhY3Rpb24gYWRkUHJvcGVydHkgPSAobmV3UHJvcGVydHkpID0+IHsgdGhpcy5wcm9wZXJ0aWVzLnB1c2gobmV3UHJvcGVydHkpOyB9XG4gIEBhY3Rpb24gYWRkUmVxdWlyZW1lbnQgPSAobmV3UmVxdWlyZW1lbnQpID0+IHsgdGhpcy5yZXF1aXJlbWVudHMucHVzaChuZXdSZXF1aXJlbWVudCk7IH1cbiAgQGFjdGlvbiBhZGRUYXNrID0gKG5ld1Rhc2spID0+IHsgdGhpcy50YXNrcy5wdXNoKG5ld1Rhc2spOyB9XG4gIEBhY3Rpb24gYWRkQ29sbGVjdGlvbiA9IChuZXdDb2xsZWN0aW9uKSA9PiB7IHRoaXMuY29sbGVjdGlvbnMucHVzaChuZXdDb2xsZWN0aW9uKTsgfVxuICBAYWN0aW9uIGFkZE1haW5Hcm91cCA9IChuZXdHcm91cCkgPT4geyB0aGlzLm1haW4uZ3JvdXBzLnB1c2gobmV3R3JvdXApOyB9XG5cbiAgQGFjdGlvbiByZW1vdmVWYXJpYWJsZSA9IChpKSA9PiB7XG4gICAgdGhpcy52YXJpYWJsZXMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgQGFjdGlvbiByZW1vdmVQcm9wZXJ0eSA9IChpKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlZFByb3BlcnR5SWQgPSB0aGlzLnByb3BlcnRpZXMuc3BsaWNlKGksIDEpWzBdLmlkO1xuICAgIHRoaXMudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgIHRhc2sucHJvcGVydGllcyA9IHRhc2sucHJvcGVydGllcy5maWx0ZXIocHJvcGVydHkgPT4gcHJvcGVydHkuaWQgIT09IHJlbW92ZWRQcm9wZXJ0eUlkKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gcmVtb3ZlUmVxdWlyZW1lbnQgPSAoaSkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZWRSZXF1aXJlbWVudElkID0gdGhpcy5yZXF1aXJlbWVudHMuc3BsaWNlKGksIDEpWzBdLmlkO1xuXG4gICAgdGhpcy50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgdGFzay5yZXF1aXJlbWVudHMgPSB0YXNrLnJlcXVpcmVtZW50cy5maWx0ZXIocmVxdWlyZW1lbnQgPT4gcmVxdWlyZW1lbnQgIT09IHJlbW92ZWRSZXF1aXJlbWVudElkKTtcbiAgICB9KTtcblxuICAgIHRoaXMuY29sbGVjdGlvbnMuZm9yRWFjaChjb2xsZWN0aW9uID0+IHtcbiAgICAgIGNvbGxlY3Rpb24ucmVxdWlyZW1lbnRzID0gY29sbGVjdGlvbi5yZXF1aXJlbWVudHMuZmlsdGVyKHJlcXVpcmVtZW50ID0+IHJlcXVpcmVtZW50ICE9PSByZW1vdmVkUmVxdWlyZW1lbnRJZCk7XG4gICAgfSk7XG4gIH1cblxuICBAYWN0aW9uIHJlbW92ZVRhc2sgPSAoaSkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZWRUYXNrSWQgPSB0aGlzLnRhc2tzLnNwbGljZShpLCAxKVswXS5pZDtcblxuICAgIHRoaXMubWFpbi50YXNrcyA9IHRoaXMubWFpbi50YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrICE9PSByZW1vdmVkVGFza0lkKTtcbiAgICB0aGlzLmNvbGxlY3Rpb25zLmZvckVhY2goY29sbGVjdGlvbiA9PiB7XG4gICAgICBjb2xsZWN0aW9uLnRhc2tzID0gY29sbGVjdGlvbi50YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrICE9PSByZW1vdmVkVGFza0lkKTtcbiAgICB9KTtcbiAgICB0aGlzLm1haW4uZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgZ3JvdXAudGFza3MgPSBncm91cC50YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrICE9PSByZW1vdmVkVGFza0lkKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gcmVtb3ZlQ29sbGVjdGlvbiA9IChpKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlZENvbGxlY3Rpb25JZCA9IHRoaXMuY29sbGVjdGlvbnMuc3BsaWNlKGksIDEpWzBdLmlkO1xuICAgIHRoaXMubWFpbi5jb2xsZWN0aW9ucyA9IHRoaXMubWFpbi5jb2xsZWN0aW9ucy5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uICE9PSByZW1vdmVkQ29sbGVjdGlvbklkKTtcbiAgICB0aGlzLm1haW4uZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgZ3JvdXAuY29sbGVjdGlvbnMgPSBncm91cC5jb2xsZWN0aW9ucy5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uICE9PSByZW1vdmVkQ29sbGVjdGlvbklkKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gcmVtb3ZlTWFpbkdyb3VwID0gKGkpID0+IHtcbiAgICB0aGlzLm1haW4uZ3JvdXBzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIC8vIEBhY3Rpb24gZWRpdFZhcmlhYmxlID0gKGksIHZhcmlhYmxlKSA9PiB7IH1cbiAgQGFjdGlvbiBlZGl0UHJvcGVydHkgPSAoaSwgdXBkYXRlZFByb3BlcnR5KSA9PiB7XG4gICAgY29uc3Qgb2xkSWQgPSB0aGlzLnByb3BlcnRpZXNbaV0uaWQ7XG4gICAgdGhpcy5wcm9wZXJ0aWVzW2ldID0gdXBkYXRlZFByb3BlcnR5O1xuXG4gICAgdGhpcy50YXNrcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgdC5wcm9wZXJ0aWVzLmZvckVhY2gocCA9PiB7XG4gICAgICAgIGlmIChwLmlkID09PSBvbGRJZCkge1xuICAgICAgICAgIHAuaWQgPSB1cGRhdGVkUHJvcGVydHkuaWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgQGFjdGlvbiBlZGl0UmVxdWlyZW1lbnQgPSAoaSwgdXBkYXRlZFJlcXVpcmVtZW50KSA9PiB7XG4gICAgY29uc3Qgb2xkSWQgPSB0aGlzLnJlcXVpcmVtZW50c1tpXS5pZDtcbiAgICB0aGlzLnJlcXVpcmVtZW50c1tpXSA9IHVwZGF0ZWRSZXF1aXJlbWVudDtcblxuICAgIHRoaXMudGFza3MuZm9yRWFjaCh0ID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdC5yZXF1aXJlbWVudHMuaW5kZXhPZihvbGRJZCk7XG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0LnJlcXVpcmVtZW50c1tpbmRleF0gPSB1cGRhdGVkUmVxdWlyZW1lbnQuaWQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb25zLmZvckVhY2goYyA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IGMucmVxdWlyZW1lbnRzLmluZGV4T2Yob2xkSWQpO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgYy5yZXF1aXJlbWVudHNbaW5kZXhdID0gdXBkYXRlZFJlcXVpcmVtZW50LmlkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgQGFjdGlvbiBlZGl0VGFzayA9IChpLCB1cGRhdGVkVGFzaykgPT4ge1xuICAgIGNvbnN0IG9sZElkID0gdGhpcy50YXNrc1tpXS5pZDtcbiAgICB0aGlzLnRhc2tzW2ldID0gdXBkYXRlZFRhc2s7XG5cbiAgICAvLyB1cGRhdGUgY29sbGVjdGlvbnMgd2l0aCBuZXcgdGFzayBpbmZvXG4gICAgdGhpcy5jb2xsZWN0aW9ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICBjLnRhc2tzLmZvckVhY2goKHQsIGksIGEpID0+IHtcbiAgICAgICAgaWYgKHQgPT09IG9sZElkKSB7XG4gICAgICAgICAgYVtpXSA9IHVwZGF0ZWRUYXNrLmlkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBncm91cHMgd2l0aCBuZXcgdGFzayBpbmZvXG4gICAgdGhpcy5tYWluLmdyb3Vwcy5mb3JFYWNoKChnKSA9PiB7XG4gICAgICBnLnRhc2tzLmZvckVhY2goKHQsIGksIGEpID0+IHtcbiAgICAgICAgaWYgKHQgPT09IG9sZElkKSB7XG4gICAgICAgICAgYVtpXSA9IHVwZGF0ZWRUYXNrLmlkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBtYWluIHdpdGggbmV3IHRhc2sgaW5mb1xuICAgIHRoaXMubWFpbi50YXNrcy5mb3JFYWNoKCh0LCBpLCBhKSA9PiB7XG4gICAgICBpZiAodCA9PT0gb2xkSWQpIHtcbiAgICAgICAgYVtpXSA9IHVwZGF0ZWRUYXNrLmlkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgQGFjdGlvbiBlZGl0Q29sbGVjdGlvbiA9IChpLCB1cGRhdGVkQ29sbGVjdGlvbikgPT4ge1xuICAgIGNvbnN0IG9sZElkID0gdGhpcy5jb2xsZWN0aW9uc1tpXS5pZDtcbiAgICB0aGlzLmNvbGxlY3Rpb25zW2ldID0gdXBkYXRlZENvbGxlY3Rpb247XG5cbiAgICAvLyB1cGRhdGUgZ3JvdXBzIHdpdGggbmV3IGNvbGxlY3Rpb24gaW5mb1xuICAgIHRoaXMubWFpbi5ncm91cHMuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgZy5jb2xsZWN0aW9ucy5mb3JFYWNoKChjLCBpLCBhKSA9PiB7XG4gICAgICAgIGlmIChjID09PSBvbGRJZCkge1xuICAgICAgICAgIGFbaV0gPSB1cGRhdGVkQ29sbGVjdGlvbi5pZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgbWFpbiB3aXRoIG5ldyBjb2xsZWN0aW9uIGluZm9cbiAgICB0aGlzLm1haW4uY29sbGVjdGlvbnMuZm9yRWFjaCgoYywgaSwgYSkgPT4ge1xuICAgICAgaWYgKGMgPT09IG9sZElkKSB7XG4gICAgICAgIGFbaV0gPSB1cGRhdGVkQ29sbGVjdGlvbi5pZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gZWRpdE1haW5Hcm91cCA9IChpLCB1cGRhdGVkR3JvdXApID0+IHtcbiAgICB0aGlzLm1haW4uZ3JvdXBzW2ldID0gdXBkYXRlZEdyb3VwO1xuICB9XG5cbiAgaGFzVmFyaWFibGUgPSAoaWQpID0+IHsgcmV0dXJuIHRoaXMudmFyaWFibGVzLnNvbWUoZWwgPT4gZWwuaWQgPT09IGlkKTsgfVxuICBoYXNQcm9wZXJ0eSA9IChpZCkgPT4geyByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLnNvbWUoZWwgPT4gZWwuaWQgPT09IGlkKTsgfVxuICBoYXNSZXF1aXJlbWVudCA9IChpZCkgPT4geyByZXR1cm4gdGhpcy5yZXF1aXJlbWVudHMuc29tZShlbCA9PiBlbC5pZCA9PT0gaWQpOyB9XG4gIGhhc1Rhc2sgPSAoaWQpID0+IHsgcmV0dXJuIHRoaXMudGFza3Muc29tZShlbCA9PiBlbC5pZCA9PT0gaWQpOyB9XG4gIGhhc0NvbGxlY3Rpb24gPSAoaWQpID0+IHsgcmV0dXJuIHRoaXMuY29sbGVjdGlvbnMuc29tZShlbCA9PiBlbC5pZCA9PT0gaWQpOyB9XG4gIGhhc01haW5Hcm91cCA9IChpZCkgPT4geyByZXR1cm4gdGhpcy5tYWluLmdyb3Vwcy5zb21lKGVsID0+IGVsLmlkID09PSBpZCk7IH1cbn1cblxuY29uc3QgaHlkcmF0ZSA9IGNyZWF0ZSh7IHN0b3JhZ2U6IGxvY2FsU3RvcmFnZSwganNvbmlmeTogdHJ1ZSB9KTtcblxuY29uc3Qgc3RvcmUgPSBuZXcgU3RvcmUoKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmU7XG5cbmh5ZHJhdGUoJ3RvcG9sb2d5RWRpdG9yJywgc3RvcmUpO1xuXG5hdXRvcnVuKCgpID0+IHtcbiAgLy8gY29uc29sZS5sb2coJ3N0b3JlLnRvcG9sb2d5SWQ6ICcgKyBzdG9yZS50b3BvbG9neUlkKTtcbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfdmFsdWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgX1N0eWxlQ29uZmlnID0gcmVxdWlyZShcIi4vdXRpbHMvU3R5bGVDb25maWdcIik7XG5cbnZhciBfU2FmZUFuY2hvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2FmZUFuY2hvclwiKSk7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgYmxvY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgY29tcG9uZW50Q2xhc3M6IF9lbGVtZW50VHlwZS5kZWZhdWx0LFxuICBocmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIEhUTUwgYnV0dG9uIHR5cGUgYXR0cmlidXRlXG4gICAqIEBkZWZhdWx0VmFsdWUgJ2J1dHRvbidcbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSlcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZVxufTtcblxudmFyIEJ1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXJBbmNob3IgPSBmdW5jdGlvbiByZW5kZXJBbmNob3IoZWxlbWVudFByb3BzLCBjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2FmZUFuY2hvci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgZWxlbWVudFByb3BzLmRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJCdXR0b24gPSBmdW5jdGlvbiByZW5kZXJCdXR0b24oX3JlZiwgY2xhc3NOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudENsYXNzID0gX3JlZi5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgZWxlbWVudFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfcmVmLCBbXCJjb21wb25lbnRDbGFzc1wiXSk7XG4gICAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudENsYXNzIHx8ICdidXR0b24nO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICB0eXBlOiBlbGVtZW50UHJvcHMudHlwZSB8fCAnYnV0dG9uJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wcy5ibG9jayxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImFjdGl2ZVwiLCBcImJsb2NrXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge1xuICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICB9LCBfZXh0ZW5kczJbKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGJzUHJvcHMsICdibG9jaycpXSA9IGJsb2NrLCBfZXh0ZW5kczIpKTtcbiAgICB2YXIgZnVsbENsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpO1xuXG4gICAgaWYgKGVsZW1lbnRQcm9wcy5ocmVmKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJBbmNob3IoZWxlbWVudFByb3BzLCBmdWxsQ2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJCdXR0b24oZWxlbWVudFByb3BzLCBmdWxsQ2xhc3NOYW1lKTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5CdXR0b24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnYnRuJywgKDAsIF9ib290c3RyYXBVdGlscy5ic1NpemVzKShbX1N0eWxlQ29uZmlnLlNpemUuTEFSR0UsIF9TdHlsZUNvbmZpZy5TaXplLlNNQUxMLCBfU3R5bGVDb25maWcuU2l6ZS5YU01BTExdLCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzU3R5bGVzKSgoMCwgX3ZhbHVlcy5kZWZhdWx0KShfU3R5bGVDb25maWcuU3RhdGUpLmNvbmNhdChbX1N0eWxlQ29uZmlnLlN0eWxlLkRFRkFVTFQsIF9TdHlsZUNvbmZpZy5TdHlsZS5QUklNQVJZLCBfU3R5bGVDb25maWcuU3R5bGUuTElOS10pLCBfU3R5bGVDb25maWcuU3R5bGUuREVGQVVMVCwgQnV0dG9uKSkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9Gb3JtQ29udHJvbEZlZWRiYWNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ29udHJvbEZlZWRiYWNrXCIpKTtcblxudmFyIF9Gb3JtQ29udHJvbFN0YXRpYyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xTdGF0aWNcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBfU3R5bGVDb25maWcgPSByZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IF9lbGVtZW50VHlwZS5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBPbmx5IHJlbGV2YW50IGlmIGBjb21wb25lbnRDbGFzc2AgaXMgYCdpbnB1dCdgLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVXNlcyBgY29udHJvbElkYCBmcm9tIGA8Rm9ybUdyb3VwPmAgaWYgbm90IGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxuICAgKi9cbiAgaWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgcmVmIHRvIHRoZSBgPGlucHV0PmAgZWxlbWVudC4gT25seSBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgaGVyZS5cbiAgICpcbiAgICogYGBganNcbiAgICogPEZvcm1Db250cm9sIGlucHV0UmVmPXtyZWYgPT4geyB0aGlzLmlucHV0ID0gcmVmOyB9fSAvPlxuICAgKiBgYGBcbiAgICovXG4gIGlucHV0UmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnaW5wdXQnXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIEZvcm1Db250cm9sID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRm9ybUNvbnRyb2wsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvcm1Db250cm9sKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGb3JtQ29udHJvbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgZm9ybUdyb3VwID0gdGhpcy5jb250ZXh0LiRic19mb3JtR3JvdXA7XG4gICAgdmFyIGNvbnRyb2xJZCA9IGZvcm1Hcm91cCAmJiBmb3JtR3JvdXAuY29udHJvbElkO1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcyRpZCA9PT0gdm9pZCAwID8gY29udHJvbElkIDogX3RoaXMkcHJvcHMkaWQsXG4gICAgICAgIGlucHV0UmVmID0gX3RoaXMkcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYnNTaXplID0gX3RoaXMkcHJvcHMuYnNTaXplLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwidHlwZVwiLCBcImlkXCIsIFwiaW5wdXRSZWZcIiwgXCJjbGFzc05hbWVcIiwgXCJic1NpemVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb250cm9sSWQgPT0gbnVsbCB8fCBpZCA9PT0gY29udHJvbElkLCAnYGNvbnRyb2xJZGAgaXMgaWdub3JlZCBvbiBgPEZvcm1Db250cm9sPmAgd2hlbiBgaWRgIGlzIHNwZWNpZmllZC4nKSA6IHZvaWQgMDsgLy8gaW5wdXRbdHlwZT1cImZpbGVcIl0gc2hvdWxkIG5vdCBoYXZlIC5mb3JtLWNvbnRyb2wuXG5cbiAgICB2YXIgY2xhc3NlcztcblxuICAgIGlmICh0eXBlICE9PSAnZmlsZScpIHtcbiAgICAgIGNsYXNzZXMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKTtcbiAgICB9IC8vIElmIHVzZXIgcHJvdmlkZXMgYSBzaXplLCBtYWtlIHN1cmUgdG8gYXBwZW5kIGl0IHRvIGNsYXNzZXMgYXMgaW5wdXQtXG4gICAgLy8gZS5nLiBpZiBic1NpemUgaXMgc21hbGwsIGl0IHdpbGwgYXBwZW5kIGlucHV0LXNtXG5cblxuICAgIGlmIChic1NpemUpIHtcbiAgICAgIHZhciBzaXplID0gX1N0eWxlQ29uZmlnLlNJWkVfTUFQW2JzU2l6ZV0gfHwgYnNTaXplO1xuICAgICAgY2xhc3Nlc1soMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoe1xuICAgICAgICBic0NsYXNzOiAnaW5wdXQnXG4gICAgICB9LCBzaXplKV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgaWQ6IGlkLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Gb3JtQ29udHJvbC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5Gb3JtQ29udHJvbC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5Gb3JtQ29udHJvbC5GZWVkYmFjayA9IF9Gb3JtQ29udHJvbEZlZWRiYWNrLmRlZmF1bHQ7XG5Gb3JtQ29udHJvbC5TdGF0aWMgPSBfRm9ybUNvbnRyb2xTdGF0aWMuZGVmYXVsdDtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnZm9ybS1jb250cm9sJywgKDAsIF9ib290c3RyYXBVdGlscy5ic1NpemVzKShbX1N0eWxlQ29uZmlnLlNpemUuU01BTEwsIF9TdHlsZUNvbmZpZy5TaXplLkxBUkdFXSwgRm9ybUNvbnRyb2wpKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9JbnB1dEdyb3VwQWRkb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0R3JvdXBBZGRvblwiKSk7XG5cbnZhciBfSW5wdXRHcm91cEJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5wdXRHcm91cEJ1dHRvblwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIF9TdHlsZUNvbmZpZyA9IHJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpO1xuXG52YXIgSW5wdXRHcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKElucHV0R3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElucHV0R3JvdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IElucHV0R3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBJbnB1dEdyb3VwO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5JbnB1dEdyb3VwLkFkZG9uID0gX0lucHV0R3JvdXBBZGRvbi5kZWZhdWx0O1xuSW5wdXRHcm91cC5CdXR0b24gPSBfSW5wdXRHcm91cEJ1dHRvbi5kZWZhdWx0O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdpbnB1dC1ncm91cCcsICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNTaXplcykoW19TdHlsZUNvbmZpZy5TaXplLkxBUkdFLCBfU3R5bGVDb25maWcuU2l6ZS5TTUFMTF0sIElucHV0R3JvdXApKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfZXZlbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvZXZlbnRzXCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudFwiKSk7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy91dGlsL2luRE9NXCIpKTtcblxudmFyIF9zY3JvbGxiYXJTaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfTW9kYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1vdmVybGF5cy9saWIvTW9kYWxcIikpO1xuXG52YXIgX2lzT3ZlcmZsb3dpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvaXNPdmVyZmxvd2luZ1wiKSk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSk7XG5cbnZhciBfRmFkZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRmFkZVwiKSk7XG5cbnZhciBfTW9kYWxCb2R5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbEJvZHlcIikpO1xuXG52YXIgX01vZGFsRGlhbG9nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbERpYWxvZ1wiKSk7XG5cbnZhciBfTW9kYWxGb290ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vZGFsRm9vdGVyXCIpKTtcblxudmFyIF9Nb2RhbEhlYWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxIZWFkZXJcIikpO1xuXG52YXIgX01vZGFsVGl0bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vZGFsVGl0bGVcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpO1xuXG52YXIgX3NwbGl0Q29tcG9uZW50UHJvcHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9zcGxpdENvbXBvbmVudFByb3BzXCIpKTtcblxudmFyIF9TdHlsZUNvbmZpZyA9IHJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpO1xuXG52YXIgcHJvcFR5cGVzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX01vZGFsLmRlZmF1bHQucHJvcFR5cGVzLCBfTW9kYWxEaWFsb2cuZGVmYXVsdC5wcm9wVHlwZXMsIHtcbiAgLyoqXG4gICAqIEluY2x1ZGUgYSBiYWNrZHJvcCBjb21wb25lbnQuIFNwZWNpZnkgJ3N0YXRpYycgZm9yIGEgYmFja2Ryb3AgdGhhdCBkb2Vzbid0XG4gICAqIHRyaWdnZXIgYW4gXCJvbkhpZGVcIiB3aGVuIGNsaWNrZWQuXG4gICAqL1xuICBiYWNrZHJvcDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnc3RhdGljJywgdHJ1ZSwgZmFsc2VdKSxcblxuICAvKipcbiAgICogQWRkIGFuIG9wdGlvbmFsIGV4dHJhIGNsYXNzIG5hbWUgdG8gLm1vZGFsLWJhY2tkcm9wXG4gICAqIEl0IGNvdWxkIGVuZCB1cCBsb29raW5nIGxpa2UgY2xhc3M9XCJtb2RhbC1iYWNrZHJvcCBmb28tbW9kYWwtYmFja2Ryb3AgaW5cIi5cbiAgICovXG4gIGJhY2tkcm9wQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDbG9zZSB0aGUgbW9kYWwgd2hlbiBlc2NhcGUga2V5IGlzIHByZXNzZWRcbiAgICovXG4gIGtleWJvYXJkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogT3BlbiBhbmQgY2xvc2UgdGhlIE1vZGFsIHdpdGggYSBzbGlkZSBhbmQgZmFkZSBhbmltYXRpb24uXG4gICAqL1xuICBhbmltYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIENvbXBvbmVudCB0eXBlIHRoYXQgcHJvdmlkZXMgdGhlIG1vZGFsIGNvbnRlbnQgTWFya3VwLiBUaGlzIGlzIGEgdXNlZnVsXG4gICAqIHByb3Agd2hlbiB5b3Ugd2FudCB0byB1c2UgeW91ciBvd24gc3R5bGVzIGFuZCBtYXJrdXAgdG8gY3JlYXRlIGEgY3VzdG9tXG4gICAqIG1vZGFsIGNvbXBvbmVudC5cbiAgICovXG4gIGRpYWxvZ0NvbXBvbmVudENsYXNzOiBfZWxlbWVudFR5cGUuZGVmYXVsdCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdFxuICAgKiBvcGVucywgYW5kIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGZhbHNlIGFzIGl0IG1ha2VzIHRoZSBNb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4tcmVhZGVycy5cbiAgICovXG4gIGF1dG9Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBNb2RhbCB3aGlsZVxuICAgKiBvcGVuLiBDb25zaWRlciBsZWF2aW5nIHRoZSBkZWZhdWx0IHZhbHVlIGhlcmUsIGFzIGl0IGlzIG5lY2Vzc2FyeSB0byBtYWtlXG4gICAqIHRoZSBNb2RhbCB3b3JrIHdlbGwgd2l0aCBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBzdWNoIGFzIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZW5mb3JjZUZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlblxuICAgKi9cbiAgcmVzdG9yZUZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgc2hvdyBpdHNlbGYuXG4gICAqL1xuICBzaG93OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBoZWFkZXIgY2xvc2VCdXR0b24gb3Igbm9uLXN0YXRpYyBiYWNrZHJvcCBpc1xuICAgKiBjbGlja2VkLiBSZXF1aXJlZCBpZiBlaXRoZXIgYXJlIHNwZWNpZmllZC5cbiAgICovXG4gIG9uSGlkZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgcmlnaHQgYmVmb3JlIHRoZSBNb2RhbCB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBNb2RhbCBiZWdpbnMgdG8gdHJhbnNpdGlvbiBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBNb2RhbCBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIG91dFxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29udGFpbmVyOiBfTW9kYWwuZGVmYXVsdC5wcm9wVHlwZXMuY29udGFpbmVyXG59KTtcbnZhciBkZWZhdWx0UHJvcHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBfTW9kYWwuZGVmYXVsdC5kZWZhdWx0UHJvcHMsIHtcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBkaWFsb2dDb21wb25lbnRDbGFzczogX01vZGFsRGlhbG9nLmRlZmF1bHRcbn0pO1xudmFyIGNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAkYnNfbW9kYWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgb25IaWRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xuICB9KVxufTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lLCByZWFjdC9uby1tdWx0aS1jb21wICovXG5cbmZ1bmN0aW9uIERpYWxvZ1RyYW5zaXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZhZGUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICB0aW1lb3V0OiBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gQmFja2Ryb3BUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9GYWRlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgdGltZW91dDogTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTlxuICB9KSk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cblxudmFyIE1vZGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTW9kYWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVEaWFsb2dCYWNrZHJvcE1vdXNlRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLl93YWl0aW5nRm9yTW91c2VVcCA9IHRydWU7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIHZhciBkaWFsb2dOb2RlID0gX3RoaXMuX21vZGFsLmdldERpYWxvZ0VsZW1lbnQoKTtcblxuICAgICAgaWYgKF90aGlzLl93YWl0aW5nRm9yTW91c2VVcCAmJiBldi50YXJnZXQgPT09IGRpYWxvZ05vZGUpIHtcbiAgICAgICAgX3RoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5fd2FpdGluZ0Zvck1vdXNlVXAgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBfdGhpcy5oYW5kbGVFbnRlcmluZy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUgPSBfdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZURpYWxvZ0NsaWNrID0gX3RoaXMuaGFuZGxlRGlhbG9nQ2xpY2suYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuICAgIF90aGlzLnNldE1vZGFsUmVmID0gX3RoaXMuc2V0TW9kYWxSZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICRic19tb2RhbDoge1xuICAgICAgICBvbkhpZGU6IHRoaXMucHJvcHMub25IaWRlXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAvLyBDbGVhbiB1cCB0aGUgbGlzdGVuZXIgaWYgd2UgbmVlZCB0by5cbiAgICB0aGlzLmhhbmRsZUV4aXRlZCgpO1xuICB9O1xuXG4gIF9wcm90by5zZXRNb2RhbFJlZiA9IGZ1bmN0aW9uIHNldE1vZGFsUmVmKHJlZikge1xuICAgIHRoaXMuX21vZGFsID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVEaWFsb2dDbGljayA9IGZ1bmN0aW9uIGhhbmRsZURpYWxvZ0NsaWNrKGUpIHtcbiAgICBpZiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljayB8fCBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkhpZGUoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZygpIHtcbiAgICAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgIF9ldmVudHMuZGVmYXVsdC5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG5cbiAgICB0aGlzLnVwZGF0ZVN0eWxlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpIHtcbiAgICAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgIF9ldmVudHMuZGVmYXVsdC5vZmYod2luZG93LCAncmVzaXplJywgdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVXaW5kb3dSZXNpemUgPSBmdW5jdGlvbiBoYW5kbGVXaW5kb3dSZXNpemUoKSB7XG4gICAgdGhpcy51cGRhdGVTdHlsZSgpO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdHlsZSA9IGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKCkge1xuICAgIGlmICghX2luRE9NLmRlZmF1bHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGlhbG9nTm9kZSA9IHRoaXMuX21vZGFsLmdldERpYWxvZ0VsZW1lbnQoKTtcblxuICAgIHZhciBkaWFsb2dIZWlnaHQgPSBkaWFsb2dOb2RlLnNjcm9sbEhlaWdodDtcbiAgICB2YXIgZG9jdW1lbnQgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoZGlhbG9nTm9kZSk7XG4gICAgdmFyIGJvZHlJc092ZXJmbG93aW5nID0gKDAsIF9pc092ZXJmbG93aW5nLmRlZmF1bHQpKF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMucHJvcHMuY29udGFpbmVyIHx8IGRvY3VtZW50LmJvZHkpKTtcbiAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gZGlhbG9nSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/ICgwLCBfc2Nyb2xsYmFyU2l6ZS5kZWZhdWx0KSgpIDogdW5kZWZpbmVkLFxuICAgICAgICBwYWRkaW5nTGVmdDogIWJvZHlJc092ZXJmbG93aW5nICYmIG1vZGFsSXNPdmVyZmxvd2luZyA/ICgwLCBfc2Nyb2xsYmFyU2l6ZS5kZWZhdWx0KSgpIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYWNrZHJvcCA9IF90aGlzJHByb3BzLmJhY2tkcm9wLFxuICAgICAgICBiYWNrZHJvcENsYXNzTmFtZSA9IF90aGlzJHByb3BzLmJhY2tkcm9wQ2xhc3NOYW1lLFxuICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb24sXG4gICAgICAgIHNob3cgPSBfdGhpcyRwcm9wcy5zaG93LFxuICAgICAgICBEaWFsb2cgPSBfdGhpcyRwcm9wcy5kaWFsb2dDb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBvbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJiYWNrZHJvcFwiLCBcImJhY2tkcm9wQ2xhc3NOYW1lXCIsIFwiYW5pbWF0aW9uXCIsIFwic2hvd1wiLCBcImRpYWxvZ0NvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJjaGlsZHJlblwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRlZFwiXSk7XG5cbiAgICB2YXIgX3NwbGl0Q29tcG9uZW50UHJvcHMgPSAoMCwgX3NwbGl0Q29tcG9uZW50UHJvcHMyLmRlZmF1bHQpKHByb3BzLCBfTW9kYWwuZGVmYXVsdCksXG4gICAgICAgIGJhc2VNb2RhbFByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMF0sXG4gICAgICAgIGRpYWxvZ1Byb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMV07XG5cbiAgICB2YXIgaW5DbGFzc05hbWUgPSBzaG93ICYmICFhbmltYXRpb24gJiYgJ2luJztcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTW9kYWwuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgYmFzZU1vZGFsUHJvcHMsIHtcbiAgICAgIHJlZjogdGhpcy5zZXRNb2RhbFJlZixcbiAgICAgIHNob3c6IHNob3csXG4gICAgICBjb250YWluZXJDbGFzc05hbWU6ICgwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShwcm9wcywgJ29wZW4nKSxcbiAgICAgIHRyYW5zaXRpb246IGFuaW1hdGlvbiA/IERpYWxvZ1RyYW5zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICBiYWNrZHJvcDogYmFja2Ryb3AsXG4gICAgICBiYWNrZHJvcFRyYW5zaXRpb246IGFuaW1hdGlvbiA/IEJhY2tkcm9wVHJhbnNpdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgIGJhY2tkcm9wQ2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKHByb3BzLCAnYmFja2Ryb3AnKSwgYmFja2Ryb3BDbGFzc05hbWUsIGluQ2xhc3NOYW1lKSxcbiAgICAgIG9uRW50ZXJpbmc6ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKG9uRW50ZXJpbmcsIHRoaXMuaGFuZGxlRW50ZXJpbmcpLFxuICAgICAgb25FeGl0ZWQ6ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKG9uRXhpdGVkLCB0aGlzLmhhbmRsZUV4aXRlZCksXG4gICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlTW91c2VVcFxuICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KERpYWxvZywgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZGlhbG9nUHJvcHMsIHtcbiAgICAgIHN0eWxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0aGlzLnN0YXRlLnN0eWxlLCBzdHlsZSksXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGluQ2xhc3NOYW1lKSxcbiAgICAgIG9uQ2xpY2s6IGJhY2tkcm9wID09PSB0cnVlID8gdGhpcy5oYW5kbGVEaWFsb2dDbGljayA6IG51bGwsXG4gICAgICBvbk1vdXNlRG93bkRpYWxvZzogdGhpcy5oYW5kbGVEaWFsb2dCYWNrZHJvcE1vdXNlRG93blxuICAgIH0pLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTW9kYWwucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTW9kYWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuTW9kYWwuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbk1vZGFsLkJvZHkgPSBfTW9kYWxCb2R5LmRlZmF1bHQ7XG5Nb2RhbC5IZWFkZXIgPSBfTW9kYWxIZWFkZXIuZGVmYXVsdDtcbk1vZGFsLlRpdGxlID0gX01vZGFsVGl0bGUuZGVmYXVsdDtcbk1vZGFsLkZvb3RlciA9IF9Nb2RhbEZvb3Rlci5kZWZhdWx0O1xuTW9kYWwuRGlhbG9nID0gX01vZGFsRGlhbG9nLmRlZmF1bHQ7XG5Nb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwO1xuTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MDtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnbW9kYWwnLCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSwgX1N0eWxlQ29uZmlnLlNpemUuU01BTExdLCBNb2RhbCkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbW9ieF8xID0gcmVxdWlyZShcIm1vYnhcIik7XG52YXIgc2VyaWFsaXpyXzEgPSByZXF1aXJlKFwic2VyaWFsaXpyXCIpO1xudmFyIFN0b3JhZ2UgPSByZXF1aXJlKFwiLi9zdG9yYWdlXCIpO1xudmFyIG1lcmdlX3hfMSA9IHJlcXVpcmUoXCIuL21lcmdlLXhcIik7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xudmFyIHBlcnNpc3Rfb2JqZWN0XzEgPSByZXF1aXJlKFwiLi9wZXJzaXN0LW9iamVjdFwiKTtcbmZ1bmN0aW9uIHBlcnNpc3QoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBhID0gYXJnc1swXSwgYiA9IGFyZ3NbMV0sIGMgPSBhcmdzWzJdO1xuICAgIGlmIChhIGluIHR5cGVzXzEudHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6cl8xLnNlcmlhbGl6YWJsZSh0eXBlc18xLnR5cGVzW2FdKGIpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHBlcnNpc3Rfb2JqZWN0XzEucGVyc2lzdE9iamVjdCh0YXJnZXQsIGEpOyB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6cl8xLnNlcmlhbGl6YWJsZS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG59XG5leHBvcnRzLnBlcnNpc3QgPSBwZXJzaXN0O1xuZnVuY3Rpb24gY3JlYXRlKF9hKSB7XG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIF9jID0gX2Iuc3RvcmFnZSwgc3RvcmFnZSA9IF9jID09PSB2b2lkIDAgPyBTdG9yYWdlIDogX2MsIF9kID0gX2IuanNvbmlmeSwganNvbmlmeSA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2QsIF9lID0gX2IuZGVib3VuY2UsIGRlYm91bmNlID0gX2UgPT09IHZvaWQgMCA/IDAgOiBfZTtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYWxTdG9yYWdlID09PSBzdG9yYWdlKVxuICAgICAgICBzdG9yYWdlID0gU3RvcmFnZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHlkcmF0ZShrZXksIHN0b3JlLCBpbml0aWFsU3RhdGUpIHtcbiAgICAgICAgaWYgKGluaXRpYWxTdGF0ZSA9PT0gdm9pZCAwKSB7IGluaXRpYWxTdGF0ZSA9IHt9OyB9XG4gICAgICAgIHZhciBzY2hlbWEgPSBzZXJpYWxpenJfMS5nZXREZWZhdWx0TW9kZWxTY2hlbWEoc3RvcmUpO1xuICAgICAgICBmdW5jdGlvbiBoeWRyYXRpb24oKSB7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGQpIHsgcmV0dXJuICFqc29uaWZ5ID8gZCA6IEpTT04ucGFyc2UoZCk7IH0pXG4gICAgICAgICAgICAgICAgLnRoZW4obW9ieF8xLmFjdGlvbihcIlttb2J4LXBlcnNpc3QgXCIgKyBrZXkgKyBcIl0gTE9BRF9EQVRBXCIsIGZ1bmN0aW9uIChwZXJzaXN0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGVyc2lzdGVkICYmIHR5cGVvZiBwZXJzaXN0ZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6cl8xLnVwZGF0ZShzY2hlbWEsIHN0b3JlLCBwZXJzaXN0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXJnZV94XzEubWVyZ2VPYnNlcnZhYmxlcyhzdG9yZSwgaW5pdGlhbFN0YXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmU7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBwcm9taXNlLnJlaHlkcmF0ZSA9IGh5ZHJhdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBoeWRyYXRpb24oKTtcbiAgICAgICAgbW9ieF8xLnJlYWN0aW9uKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlcmlhbGl6cl8xLnNlcmlhbGl6ZShzY2hlbWEsIHN0b3JlKTsgfSwgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIHN0b3JhZ2Uuc2V0SXRlbShrZXksICFqc29uaWZ5ID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpKTsgfSwge1xuICAgICAgICAgICAgZGVsYXk6IGRlYm91bmNlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbiIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwiaW1wb3J0IHsgUmVhY3Rpb24sIF9hbGxvd1N0YXRlQ2hhbmdlcywgX2FsbG93U3RhdGVSZWFkc1N0YXJ0LCBfYWxsb3dTdGF0ZVJlYWRzRW5kLCAkbW9ieCwgY3JlYXRlQXRvbSwgdW50cmFja2VkLCBpc09ic2VydmFibGVNYXAsIGlzT2JzZXJ2YWJsZU9iamVjdCwgaXNPYnNlcnZhYmxlQXJyYXksIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyBQdXJlQ29tcG9uZW50LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIG1lbW8sIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1VzaW5nU3RhdGljUmVuZGVyaW5nLCBPYnNlcnZlciwgb2JzZXJ2ZXIgYXMgb2JzZXJ2ZXIkMSB9IGZyb20gJ21vYngtcmVhY3QtbGl0ZSc7XG5leHBvcnQgeyBPYnNlcnZlciwgaXNPYnNlcnZlckJhdGNoZWQsIGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcsIG9ic2VydmVyQmF0Y2hpbmcsIG9ic2VydmVyQmF0Y2hpbmdPcHRPdXQsIHVzZUFzT2JzZXJ2YWJsZVNvdXJjZSwgdXNlTG9jYWxTdG9yZSwgdXNlT2JzZXJ2ZXIsIHVzZVN0YXRpY1JlbmRlcmluZyB9IGZyb20gJ21vYngtcmVhY3QtbGl0ZSc7XG5cbnZhciBzeW1ib2xJZCA9IDA7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN5bWJvbChuYW1lKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gU3ltYm9sKG5hbWUpO1xuICB9XG5cbiAgdmFyIHN5bWJvbCA9IFwiX18kbW9ieC1yZWFjdCBcIiArIG5hbWUgKyBcIiAoXCIgKyBzeW1ib2xJZCArIFwiKVwiO1xuICBzeW1ib2xJZCsrO1xuICByZXR1cm4gc3ltYm9sO1xufVxuXG52YXIgY3JlYXRlZFN5bWJvbHMgPSB7fTtcbmZ1bmN0aW9uIG5ld1N5bWJvbChuYW1lKSB7XG4gIGlmICghY3JlYXRlZFN5bWJvbHNbbmFtZV0pIHtcbiAgICBjcmVhdGVkU3ltYm9sc1tuYW1lXSA9IGNyZWF0ZVN5bWJvbChuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVkU3ltYm9sc1tuYW1lXTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIC8vRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9jNjk5MDRhNTExYjkwMDI2NjkzNTE2ODIyMzA2M2RkODc3MmRmYzQwL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvc2hhbGxvd0VxdWFsLmpzXG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSBcIm9iamVjdFwiIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9jNjk5MDRhNTExYjkwMDI2NjkzNTE2ODIyMzA2M2RkODc3MmRmYzQwL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvc2hhbGxvd0VxdWFsLmpzXG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn0gLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21yaWRnd2F5L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC5qc1xuXG5cbnZhciBob2lzdEJsYWNrTGlzdCA9IHtcbiAgJCR0eXBlb2Y6IDEsXG4gIHJlbmRlcjogMSxcbiAgY29tcGFyZTogMSxcbiAgdHlwZTogMSxcbiAgY2hpbGRDb250ZXh0VHlwZXM6IDEsXG4gIGNvbnRleHRUeXBlOiAxLFxuICBjb250ZXh0VHlwZXM6IDEsXG4gIGRlZmF1bHRQcm9wczogMSxcbiAgZ2V0RGVmYXVsdFByb3BzOiAxLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IDEsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogMSxcbiAgbWl4aW5zOiAxLFxuICBwcm9wVHlwZXM6IDFcbn07XG5mdW5jdGlvbiBjb3B5U3RhdGljUHJvcGVydGllcyhiYXNlLCB0YXJnZXQpIHtcbiAgdmFyIHByb3RvUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZSkpO1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiYXNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhvaXN0QmxhY2tMaXN0W2tleV0gJiYgcHJvdG9Qcm9wcy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwga2V5KSk7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxyXG4gKiBIZWxwZXIgdG8gc2V0IGBwcm9wYCB0byBgdGhpc2AgYXMgbm9uLWVudW1lcmFibGUgKGhpZGRlbiBwcm9wKVxyXG4gKiBAcGFyYW0gdGFyZ2V0XHJcbiAqIEBwYXJhbSBwcm9wXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKi9cblxuZnVuY3Rpb24gc2V0SGlkZGVuUHJvcCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gIGlmICghT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgfVxufVxuLyoqXHJcbiAqIFV0aWxpdGllcyBmb3IgcGF0Y2hpbmcgY29tcG9uZW50V2lsbFVubW91bnQsIHRvIG1ha2Ugc3VyZSBAZGlzcG9zZU9uVW5tb3VudCB3b3JrcyBjb3JyZWN0bHkgaWNtIHdpdGggdXNlciBkZWZpbmVkIGhvb2tzXHJcbiAqIGFuZCB0aGUgaGFuZGxlciBwcm92aWRlZCBieSBtb2J4LXJlYWN0XHJcbiAqL1xuXG52YXIgbW9ieE1peGlucyA9XG4vKiNfX1BVUkVfXyovXG5uZXdTeW1ib2woXCJwYXRjaE1peGluc1wiKTtcbnZhciBtb2J4UGF0Y2hlZERlZmluaXRpb24gPVxuLyojX19QVVJFX18qL1xubmV3U3ltYm9sKFwicGF0Y2hlZERlZmluaXRpb25cIik7XG5cbmZ1bmN0aW9uIGdldE1peGlucyh0YXJnZXQsIG1ldGhvZE5hbWUpIHtcbiAgdmFyIG1peGlucyA9IHRhcmdldFttb2J4TWl4aW5zXSA9IHRhcmdldFttb2J4TWl4aW5zXSB8fCB7fTtcbiAgdmFyIG1ldGhvZE1peGlucyA9IG1peGluc1ttZXRob2ROYW1lXSA9IG1peGluc1ttZXRob2ROYW1lXSB8fCB7fTtcbiAgbWV0aG9kTWl4aW5zLmxvY2tzID0gbWV0aG9kTWl4aW5zLmxvY2tzIHx8IDA7XG4gIG1ldGhvZE1peGlucy5tZXRob2RzID0gbWV0aG9kTWl4aW5zLm1ldGhvZHMgfHwgW107XG4gIHJldHVybiBtZXRob2RNaXhpbnM7XG59XG5cbmZ1bmN0aW9uIHdyYXBwZXIocmVhbE1ldGhvZCwgbWl4aW5zKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgLy8gbG9ja3MgYXJlIHVzZWQgdG8gZW5zdXJlIHRoYXQgbWl4aW5zIGFyZSBpbnZva2VkIG9ubHkgb25jZSBwZXIgaW52b2NhdGlvbiwgZXZlbiBvbiByZWN1cnNpdmUgY2FsbHNcbiAgbWl4aW5zLmxvY2tzKys7XG5cbiAgdHJ5IHtcbiAgICB2YXIgcmV0VmFsO1xuXG4gICAgaWYgKHJlYWxNZXRob2QgIT09IHVuZGVmaW5lZCAmJiByZWFsTWV0aG9kICE9PSBudWxsKSB7XG4gICAgICByZXRWYWwgPSByZWFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIHJldHVybiByZXRWYWw7XG4gIH0gZmluYWxseSB7XG4gICAgbWl4aW5zLmxvY2tzLS07XG5cbiAgICBpZiAobWl4aW5zLmxvY2tzID09PSAwKSB7XG4gICAgICBtaXhpbnMubWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChteCkge1xuICAgICAgICBteC5hcHBseShfdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKHJlYWxNZXRob2QsIG1peGlucykge1xuICB2YXIgZm4gPSBmdW5jdGlvbiBmbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLmNhbGwuYXBwbHkod3JhcHBlciwgW3RoaXMsIHJlYWxNZXRob2QsIG1peGluc10uY29uY2F0KGFyZ3MpKTtcbiAgfTtcblxuICByZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIHBhdGNoKHRhcmdldCwgbWV0aG9kTmFtZSwgbWl4aW5NZXRob2QpIHtcbiAgdmFyIG1peGlucyA9IGdldE1peGlucyh0YXJnZXQsIG1ldGhvZE5hbWUpO1xuXG4gIGlmIChtaXhpbnMubWV0aG9kcy5pbmRleE9mKG1peGluTWV0aG9kKSA8IDApIHtcbiAgICBtaXhpbnMubWV0aG9kcy5wdXNoKG1peGluTWV0aG9kKTtcbiAgfVxuXG4gIHZhciBvbGREZWZpbml0aW9uID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG1ldGhvZE5hbWUpO1xuXG4gIGlmIChvbGREZWZpbml0aW9uICYmIG9sZERlZmluaXRpb25bbW9ieFBhdGNoZWREZWZpbml0aW9uXSkge1xuICAgIC8vIGFscmVhZHkgcGF0Y2hlZCBkZWZpbml0aW9uLCBkbyBub3QgcmVwYXRjaFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbE1ldGhvZCA9IHRhcmdldFttZXRob2ROYW1lXTtcbiAgdmFyIG5ld0RlZmluaXRpb24gPSBjcmVhdGVEZWZpbml0aW9uKHRhcmdldCwgbWV0aG9kTmFtZSwgb2xkRGVmaW5pdGlvbiA/IG9sZERlZmluaXRpb24uZW51bWVyYWJsZSA6IHVuZGVmaW5lZCwgbWl4aW5zLCBvcmlnaW5hbE1ldGhvZCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG1ldGhvZE5hbWUsIG5ld0RlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWZpbml0aW9uKHRhcmdldCwgbWV0aG9kTmFtZSwgZW51bWVyYWJsZSwgbWl4aW5zLCBvcmlnaW5hbE1ldGhvZCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgd3JhcHBlZEZ1bmMgPSB3cmFwRnVuY3Rpb24ob3JpZ2luYWxNZXRob2QsIG1peGlucyk7XG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbbW9ieFBhdGNoZWREZWZpbml0aW9uXSA9IHRydWUsIF9yZWYuZ2V0ID0gZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB3cmFwcGVkRnVuYztcbiAgfSwgX3JlZi5zZXQgPSBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICBpZiAodGhpcyA9PT0gdGFyZ2V0KSB7XG4gICAgICB3cmFwcGVkRnVuYyA9IHdyYXBGdW5jdGlvbih2YWx1ZSwgbWl4aW5zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2hlbiBpdCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgcHJvdG90eXBlL2EgY2hpbGQgcHJvdG90eXBlIHBhdGNoIHRoYXQgcGFydGljdWxhciBjYXNlIGFnYWluIHNlcGFyYXRlbHlcbiAgICAgIC8vIHNpbmNlIHdlIG5lZWQgdG8gc3RvcmUgc2VwYXJhdGUgdmFsdWVzIGRlcGVuZGluZyBvbiB3ZXRoZXIgaXQgaXMgdGhlIGFjdHVhbCBpbnN0YW5jZSwgdGhlIHByb3RvdHlwZSwgZXRjXG4gICAgICAvLyBlLmcuIHRoZSBtZXRob2QgZm9yIHN1cGVyIG1pZ2h0IG5vdCBiZSB0aGUgc2FtZSBhcyB0aGUgbWV0aG9kIGZvciB0aGUgcHJvdG90eXBlIHdoaWNoIG1pZ2h0IGJlIG5vdCB0aGUgc2FtZVxuICAgICAgLy8gYXMgdGhlIG1ldGhvZCBmb3IgdGhlIGluc3RhbmNlXG4gICAgICB2YXIgbmV3RGVmaW5pdGlvbiA9IGNyZWF0ZURlZmluaXRpb24odGhpcywgbWV0aG9kTmFtZSwgZW51bWVyYWJsZSwgbWl4aW5zLCB2YWx1ZSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbWV0aG9kTmFtZSwgbmV3RGVmaW5pdGlvbik7XG4gICAgfVxuICB9LCBfcmVmLmNvbmZpZ3VyYWJsZSA9IHRydWUsIF9yZWYuZW51bWVyYWJsZSA9IGVudW1lcmFibGUsIF9yZWY7XG59XG5cbnZhciBtb2J4QWRtaW5Qcm9wZXJ0eSA9ICRtb2J4IHx8IFwiJG1vYnhcIjtcbnZhciBtb2J4T2JzZXJ2ZXJQcm9wZXJ0eSA9XG4vKiNfX1BVUkVfXyovXG5uZXdTeW1ib2woXCJpc01vYlhSZWFjdE9ic2VydmVyXCIpO1xudmFyIG1vYnhJc1VubW91bnRlZCA9XG4vKiNfX1BVUkVfXyovXG5uZXdTeW1ib2woXCJpc1VubW91bnRlZFwiKTtcbnZhciBza2lwUmVuZGVyS2V5ID1cbi8qI19fUFVSRV9fKi9cbm5ld1N5bWJvbChcInNraXBSZW5kZXJcIik7XG52YXIgaXNGb3JjaW5nVXBkYXRlS2V5ID1cbi8qI19fUFVSRV9fKi9cbm5ld1N5bWJvbChcImlzRm9yY2luZ1VwZGF0ZVwiKTtcbmZ1bmN0aW9uIG1ha2VDbGFzc0NvbXBvbmVudE9ic2VydmVyKGNvbXBvbmVudENsYXNzKSB7XG4gIHZhciB0YXJnZXQgPSBjb21wb25lbnRDbGFzcy5wcm90b3R5cGU7XG5cbiAgaWYgKGNvbXBvbmVudENsYXNzW21vYnhPYnNlcnZlclByb3BlcnR5XSkge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHRhcmdldCk7XG4gICAgY29uc29sZS53YXJuKFwiVGhlIHByb3ZpZGVkIGNvbXBvbmVudCBjbGFzcyAoXCIgKyBkaXNwbGF5TmFtZSArIFwiKSBcXG4gICAgICAgICAgICAgICAgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZCBhcyBhbiBvYnNlcnZlciBjb21wb25lbnQuXCIpO1xuICB9IGVsc2Uge1xuICAgIGNvbXBvbmVudENsYXNzW21vYnhPYnNlcnZlclByb3BlcnR5XSA9IHRydWU7XG4gIH1cblxuICBpZiAodGFyZ2V0LmNvbXBvbmVudFdpbGxSZWFjdCkgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbXBvbmVudFdpbGxSZWFjdCBsaWZlLWN5Y2xlIGV2ZW50IGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIik7XG5cbiAgaWYgKGNvbXBvbmVudENsYXNzW1wiX19wcm90b19fXCJdICE9PSBQdXJlQ29tcG9uZW50KSB7XG4gICAgaWYgKCF0YXJnZXQuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB0YXJnZXQuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gb2JzZXJ2ZXJTQ1U7ZWxzZSBpZiAodGFyZ2V0LnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPT0gb2JzZXJ2ZXJTQ1UpIC8vIG4uYi4gdW5lcXVhbCBjaGVjaywgaW5zdGVhZCBvZiBleGlzdGVuY2UgY2hlY2ssIGFzIEBvYnNlcnZlciBtaWdodCBiZSBvbiBzdXBlcmNsYXNzIGFzIHdlbGxcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0IGlzIG5vdCBhbGxvd2VkIHRvIHVzZSBzaG91bGRDb21wb25lbnRVcGRhdGUgaW4gb2JzZXJ2ZXIgYmFzZWQgY29tcG9uZW50cy5cIik7XG4gIH0gLy8gdGhpcy5wcm9wcyBhbmQgdGhpcy5zdGF0ZSBhcmUgbWFkZSBvYnNlcnZhYmxlLCBqdXN0IHRvIG1ha2Ugc3VyZSBAY29tcHV0ZWQgZmllbGRzIHRoYXRcbiAgLy8gYXJlIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQsIGFuZCB3aGljaCByZWx5IG9uIHN0YXRlIG9yIHByb3BzLCByZS1jb21wdXRlIGlmIHN0YXRlIG9yIHByb3BzIGNoYW5nZVxuICAvLyAob3RoZXJ3aXNlIHRoZSBjb21wdXRlZCB3b3VsZG4ndCB1cGRhdGUgYW5kIGJlY29tZSBzdGFsZSBvbiBwcm9wcyBjaGFuZ2UsIHNpbmNlIHByb3BzIGFyZSBub3Qgb2JzZXJ2YWJsZSlcbiAgLy8gSG93ZXZlciwgdGhpcyBzb2x1dGlvbiBpcyBub3Qgd2l0aG91dCBpdCdzIG93biBwcm9ibGVtczogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4LXJlYWN0L2lzc3Vlcz91dGY4PSVFMiU5QyU5MyZxPWlzJTNBaXNzdWUrbGFiZWwlM0FvYnNlcnZhYmxlLXByb3BzLW9yLW5vdCtcblxuXG4gIG1ha2VPYnNlcnZhYmxlUHJvcCh0YXJnZXQsIFwicHJvcHNcIik7XG4gIG1ha2VPYnNlcnZhYmxlUHJvcCh0YXJnZXQsIFwic3RhdGVcIik7XG4gIHZhciBiYXNlUmVuZGVyID0gdGFyZ2V0LnJlbmRlcjtcblxuICB0YXJnZXQucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYWtlQ29tcG9uZW50UmVhY3RpdmUuY2FsbCh0aGlzLCBiYXNlUmVuZGVyKTtcbiAgfTtcblxuICBwYXRjaCh0YXJnZXQsIFwiY29tcG9uZW50V2lsbFVubW91bnRcIiwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyRyZW5kZXIkbW9ieEFkbWk7XG5cbiAgICBpZiAoaXNVc2luZ1N0YXRpY1JlbmRlcmluZygpID09PSB0cnVlKSByZXR1cm47XG4gICAgKF90aGlzJHJlbmRlciRtb2J4QWRtaSA9IHRoaXMucmVuZGVyW21vYnhBZG1pblByb3BlcnR5XSkgPT09IG51bGwgfHwgX3RoaXMkcmVuZGVyJG1vYnhBZG1pID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRyZW5kZXIkbW9ieEFkbWkuZGlzcG9zZSgpO1xuICAgIHRoaXNbbW9ieElzVW5tb3VudGVkXSA9IHRydWU7XG5cbiAgICBpZiAoIXRoaXMucmVuZGVyW21vYnhBZG1pblByb3BlcnR5XSkge1xuICAgICAgLy8gUmVuZGVyIG1heSBoYXZlIGJlZW4gaG90LXN3YXBwZWQgYW5kL29yIG92ZXJyaWRlbiBieSBhIHN1YmNsYXNzLlxuICAgICAgdmFyIF9kaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHRoaXMpO1xuXG4gICAgICBjb25zb2xlLndhcm4oXCJUaGUgcmVhY3RpdmUgcmVuZGVyIG9mIGFuIG9ic2VydmVyIGNsYXNzIGNvbXBvbmVudCAoXCIgKyBfZGlzcGxheU5hbWUgKyBcIikgXFxuICAgICAgICAgICAgICAgIHdhcyBvdmVycmlkZW4gYWZ0ZXIgTW9iWCBhdHRhY2hlZC4gVGhpcyBtYXkgcmVzdWx0IGluIGEgbWVtb3J5IGxlYWsgaWYgdGhlIFxcbiAgICAgICAgICAgICAgICBvdmVycmlkZW4gcmVhY3RpdmUgcmVuZGVyIHdhcyBub3QgcHJvcGVybHkgZGlzcG9zZWQuXCIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb21wb25lbnRDbGFzcztcbn0gLy8gR2VuZXJhdGVzIGEgZnJpZW5kbHkgbmFtZSBmb3IgZGVidWdnaW5nXG5cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKGNvbXApIHtcbiAgcmV0dXJuIGNvbXAuZGlzcGxheU5hbWUgfHwgY29tcC5uYW1lIHx8IGNvbXAuY29uc3RydWN0b3IgJiYgKGNvbXAuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgY29tcC5jb25zdHJ1Y3Rvci5uYW1lKSB8fCBcIjxjb21wb25lbnQ+XCI7XG59XG5cbmZ1bmN0aW9uIG1ha2VDb21wb25lbnRSZWFjdGl2ZShyZW5kZXIpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoaXNVc2luZ1N0YXRpY1JlbmRlcmluZygpID09PSB0cnVlKSByZXR1cm4gcmVuZGVyLmNhbGwodGhpcyk7XG4gIC8qKlxyXG4gICAqIElmIHByb3BzIGFyZSBzaGFsbG93bHkgbW9kaWZpZWQsIHJlYWN0IHdpbGwgcmVuZGVyIGFueXdheSxcclxuICAgKiBzbyBhdG9tLnJlcG9ydENoYW5nZWQoKSBzaG91bGQgbm90IHJlc3VsdCBpbiB5ZXQgYW5vdGhlciByZS1yZW5kZXJcclxuICAgKi9cblxuICBzZXRIaWRkZW5Qcm9wKHRoaXMsIHNraXBSZW5kZXJLZXksIGZhbHNlKTtcbiAgLyoqXHJcbiAgICogZm9yY2VVcGRhdGUgd2lsbCByZS1hc3NpZ24gdGhpcy5wcm9wcy4gV2UgZG9uJ3Qgd2FudCB0aGF0IHRvIGNhdXNlIGEgbG9vcCxcclxuICAgKiBzbyBkZXRlY3QgdGhlc2UgY2hhbmdlc1xyXG4gICAqL1xuXG4gIHNldEhpZGRlblByb3AodGhpcywgaXNGb3JjaW5nVXBkYXRlS2V5LCBmYWxzZSk7XG4gIHZhciBpbml0aWFsTmFtZSA9IGdldERpc3BsYXlOYW1lKHRoaXMpO1xuICB2YXIgYmFzZVJlbmRlciA9IHJlbmRlci5iaW5kKHRoaXMpO1xuICB2YXIgaXNSZW5kZXJpbmdQZW5kaW5nID0gZmFsc2U7XG4gIHZhciByZWFjdGlvbiA9IG5ldyBSZWFjdGlvbihpbml0aWFsTmFtZSArIFwiLnJlbmRlcigpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlzUmVuZGVyaW5nUGVuZGluZykge1xuICAgICAgLy8gTi5CLiBHZXR0aW5nIGhlcmUgKmJlZm9yZSBtb3VudGluZyogbWVhbnMgdGhhdCBhIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBoYXMgc2lkZSBlZmZlY3RzIChzZWUgdGhlIHJlbGV2YW50IHRlc3QgaW4gbWlzYy5qcylcbiAgICAgIC8vIFRoaXMgdW5pZGlvbWF0aWMgUmVhY3QgdXNhZ2UgYnV0IFJlYWN0IHdpbGwgY29ycmVjdGx5IHdhcm4gYWJvdXQgdGhpcyBzbyB3ZSBjb250aW51ZSBhcyB1c3VhbFxuICAgICAgLy8gU2VlICM4NSAvIFB1bGwgIzQ0XG4gICAgICBpc1JlbmRlcmluZ1BlbmRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoX3RoaXNbbW9ieElzVW5tb3VudGVkXSAhPT0gdHJ1ZSkge1xuICAgICAgICB2YXIgaGFzRXJyb3IgPSB0cnVlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0SGlkZGVuUHJvcChfdGhpcywgaXNGb3JjaW5nVXBkYXRlS2V5LCB0cnVlKTtcbiAgICAgICAgICBpZiAoIV90aGlzW3NraXBSZW5kZXJLZXldKSBDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlLmNhbGwoX3RoaXMpO1xuICAgICAgICAgIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgc2V0SGlkZGVuUHJvcChfdGhpcywgaXNGb3JjaW5nVXBkYXRlS2V5LCBmYWxzZSk7XG4gICAgICAgICAgaWYgKGhhc0Vycm9yKSByZWFjdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZWFjdGlvbltcInJlYWN0Q29tcG9uZW50XCJdID0gdGhpcztcbiAgcmVhY3RpdmVSZW5kZXJbbW9ieEFkbWluUHJvcGVydHldID0gcmVhY3Rpb247XG4gIHRoaXMucmVuZGVyID0gcmVhY3RpdmVSZW5kZXI7XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmVSZW5kZXIoKSB7XG4gICAgaXNSZW5kZXJpbmdQZW5kaW5nID0gZmFsc2U7XG4gICAgdmFyIGV4Y2VwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB2YXIgcmVuZGVyaW5nID0gdW5kZWZpbmVkO1xuICAgIHJlYWN0aW9uLnRyYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlbmRlcmluZyA9IF9hbGxvd1N0YXRlQ2hhbmdlcyhmYWxzZSwgYmFzZVJlbmRlcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGV4Y2VwdGlvbiA9IGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZXhjZXB0aW9uKSB7XG4gICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlcmluZztcbiAgfVxuXG4gIHJldHVybiByZWFjdGl2ZVJlbmRlci5jYWxsKHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvYnNlcnZlclNDVShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICBpZiAoaXNVc2luZ1N0YXRpY1JlbmRlcmluZygpKSB7XG4gICAgY29uc29sZS53YXJuKFwiW21vYngtcmVhY3RdIEl0IHNlZW1zIHRoYXQgYSByZS1yZW5kZXJpbmcgb2YgYSBSZWFjdCBjb21wb25lbnQgaXMgdHJpZ2dlcmVkIHdoaWxlIGluIHN0YXRpYyAoc2VydmVyLXNpZGUpIG1vZGUuIFBsZWFzZSBtYWtlIHN1cmUgY29tcG9uZW50cyBhcmUgcmVuZGVyZWQgb25seSBvbmNlIHNlcnZlci1zaWRlLlwiKTtcbiAgfSAvLyB1cGRhdGUgb24gYW55IHN0YXRlIGNoYW5nZXMgKGFzIGlzIHRoZSBkZWZhdWx0KVxuXG5cbiAgaWYgKHRoaXMuc3RhdGUgIT09IG5leHRTdGF0ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHVwZGF0ZSBpZiBwcm9wcyBhcmUgc2hhbGxvd2x5IG5vdCBlcXVhbCwgaW5zcGlyZWQgYnkgUHVyZVJlbmRlck1peGluXG4gIC8vIHdlIGNvdWxkIHJldHVybiBqdXN0ICdmYWxzZScgaGVyZSwgYW5kIGF2b2lkIHRoZSBgc2tpcFJlbmRlcmAgY2hlY2tzIGV0Y1xuICAvLyBob3dldmVyLCBpdCBpcyBuaWNlciBpZiBsaWZlY3ljbGUgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgbGlrZSB1c3VhbGx5LFxuICAvLyBzbyB3ZSByZXR1cm4gdHJ1ZSBoZXJlIGlmIHByb3BzIGFyZSBzaGFsbG93bHkgbW9kaWZpZWQuXG5cblxuICByZXR1cm4gIXNoYWxsb3dFcXVhbCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xufVxuXG5mdW5jdGlvbiBtYWtlT2JzZXJ2YWJsZVByb3AodGFyZ2V0LCBwcm9wTmFtZSkge1xuICB2YXIgdmFsdWVIb2xkZXJLZXkgPSBuZXdTeW1ib2woXCJyZWFjdFByb3BfXCIgKyBwcm9wTmFtZSArIFwiX3ZhbHVlSG9sZGVyXCIpO1xuICB2YXIgYXRvbUhvbGRlcktleSA9IG5ld1N5bWJvbChcInJlYWN0UHJvcF9cIiArIHByb3BOYW1lICsgXCJfYXRvbUhvbGRlclwiKTtcblxuICBmdW5jdGlvbiBnZXRBdG9tKCkge1xuICAgIGlmICghdGhpc1thdG9tSG9sZGVyS2V5XSkge1xuICAgICAgc2V0SGlkZGVuUHJvcCh0aGlzLCBhdG9tSG9sZGVyS2V5LCBjcmVhdGVBdG9tKFwicmVhY3RpdmUgXCIgKyBwcm9wTmFtZSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzW2F0b21Ib2xkZXJLZXldO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwcmV2UmVhZFN0YXRlID0gZmFsc2U7XG5cbiAgICAgIGlmIChfYWxsb3dTdGF0ZVJlYWRzU3RhcnQgJiYgX2FsbG93U3RhdGVSZWFkc0VuZCkge1xuICAgICAgICBwcmV2UmVhZFN0YXRlID0gX2FsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpO1xuICAgICAgfVxuXG4gICAgICBnZXRBdG9tLmNhbGwodGhpcykucmVwb3J0T2JzZXJ2ZWQoKTtcblxuICAgICAgaWYgKF9hbGxvd1N0YXRlUmVhZHNTdGFydCAmJiBfYWxsb3dTdGF0ZVJlYWRzRW5kKSB7XG4gICAgICAgIF9hbGxvd1N0YXRlUmVhZHNFbmQocHJldlJlYWRTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzW3ZhbHVlSG9sZGVyS2V5XTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHYpIHtcbiAgICAgIGlmICghdGhpc1tpc0ZvcmNpbmdVcGRhdGVLZXldICYmICFzaGFsbG93RXF1YWwodGhpc1t2YWx1ZUhvbGRlcktleV0sIHYpKSB7XG4gICAgICAgIHNldEhpZGRlblByb3AodGhpcywgdmFsdWVIb2xkZXJLZXksIHYpO1xuICAgICAgICBzZXRIaWRkZW5Qcm9wKHRoaXMsIHNraXBSZW5kZXJLZXksIHRydWUpO1xuICAgICAgICBnZXRBdG9tLmNhbGwodGhpcykucmVwb3J0Q2hhbmdlZCgpO1xuICAgICAgICBzZXRIaWRkZW5Qcm9wKHRoaXMsIHNraXBSZW5kZXJLZXksIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEhpZGRlblByb3AodGhpcywgdmFsdWVIb2xkZXJLZXksIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmZvcjsgLy8gVXNpbmcgcmVhY3QtaXMgaGFkIHNvbWUgaXNzdWVzIChhbmQgb3BlcmF0ZXMgb24gZWxlbWVudHMsIG5vdCBvbiB0eXBlcyksIHNlZSAjNjA4IC8gIzYwOVxuXG52YXIgUmVhY3RGb3J3YXJkUmVmU3ltYm9sID0gaGFzU3ltYm9sID9cbi8qI19fUFVSRV9fKi9cblN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSA6IHR5cGVvZiBmb3J3YXJkUmVmID09PSBcImZ1bmN0aW9uXCIgJiZcbi8qI19fUFVSRV9fKi9cbmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzKSB7XG4gIHJldHVybiBudWxsO1xufSlbXCIkJHR5cGVvZlwiXTtcbnZhciBSZWFjdE1lbW9TeW1ib2wgPSBoYXNTeW1ib2wgP1xuLyojX19QVVJFX18qL1xuU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikgOiB0eXBlb2YgbWVtbyA9PT0gXCJmdW5jdGlvblwiICYmXG4vKiNfX1BVUkVfXyovXG5tZW1vKGZ1bmN0aW9uIChwcm9wcykge1xuICByZXR1cm4gbnVsbDtcbn0pW1wiJCR0eXBlb2ZcIl07XG4vKipcclxuICogT2JzZXJ2ZXIgZnVuY3Rpb24gLyBkZWNvcmF0b3JcclxuICovXG5cbmZ1bmN0aW9uIG9ic2VydmVyKGNvbXBvbmVudCkge1xuICBpZiAoY29tcG9uZW50W1wiaXNNb2J4SW5qZWN0b3JcIl0gPT09IHRydWUpIHtcbiAgICBjb25zb2xlLndhcm4oXCJNb2J4IG9ic2VydmVyOiBZb3UgYXJlIHRyeWluZyB0byB1c2UgJ29ic2VydmVyJyBvbiBhIGNvbXBvbmVudCB0aGF0IGFscmVhZHkgaGFzICdpbmplY3QnLiBQbGVhc2UgYXBwbHkgJ29ic2VydmVyJyBiZWZvcmUgYXBwbHlpbmcgJ2luamVjdCdcIik7XG4gIH1cblxuICBpZiAoUmVhY3RNZW1vU3ltYm9sICYmIGNvbXBvbmVudFtcIiQkdHlwZW9mXCJdID09PSBSZWFjdE1lbW9TeW1ib2wpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2J4IG9ic2VydmVyOiBZb3UgYXJlIHRyeWluZyB0byB1c2UgJ29ic2VydmVyJyBvbiBhIGZ1bmN0aW9uIGNvbXBvbmVudCB3cmFwcGVkIGluIGVpdGhlciBhbm90aGVyIG9ic2VydmVyIG9yICdSZWFjdC5tZW1vJy4gVGhlIG9ic2VydmVyIGFscmVhZHkgYXBwbGllcyAnUmVhY3QubWVtbycgZm9yIHlvdS5cIik7XG4gIH0gLy8gVW53cmFwIGZvcndhcmQgcmVmcyBpbnRvIGA8T2JzZXJ2ZXI+YCBjb21wb25lbnRcbiAgLy8gd2UgbmVlZCB0byB1bndyYXAgdGhlIHJlbmRlciwgYmVjYXVzZSBpdCBpcyB0aGUgaW5uZXIgcmVuZGVyIHRoYXQgbmVlZHMgdG8gYmUgdHJhY2tlZCxcbiAgLy8gbm90IHRoZSBGb3J3YXJkUmVmIEhvQ1xuXG5cbiAgaWYgKFJlYWN0Rm9yd2FyZFJlZlN5bWJvbCAmJiBjb21wb25lbnRbXCIkJHR5cGVvZlwiXSA9PT0gUmVhY3RGb3J3YXJkUmVmU3ltYm9sKSB7XG4gICAgdmFyIGJhc2VSZW5kZXIgPSBjb21wb25lbnRbXCJyZW5kZXJcIl07XG4gICAgaWYgKHR5cGVvZiBiYXNlUmVuZGVyICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcInJlbmRlciBwcm9wZXJ0eSBvZiBGb3J3YXJkUmVmIHdhcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZihmdW5jdGlvbiBPYnNlcnZlckZvcndhcmRSZWYoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KE9ic2VydmVyLCBudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBiYXNlUmVuZGVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSAvLyBGdW5jdGlvbiBjb21wb25lbnRcblxuXG4gIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSBcImZ1bmN0aW9uXCIgJiYgKCFjb21wb25lbnQucHJvdG90eXBlIHx8ICFjb21wb25lbnQucHJvdG90eXBlLnJlbmRlcikgJiYgIWNvbXBvbmVudFtcImlzUmVhY3RDbGFzc1wiXSAmJiAhT2JqZWN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mLmNhbGwoQ29tcG9uZW50LCBjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIG9ic2VydmVyJDEoY29tcG9uZW50KTtcbiAgfVxuXG4gIHJldHVybiBtYWtlQ2xhc3NDb21wb25lbnRPYnNlcnZlcihjb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIE1vYlhQcm92aWRlckNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuUmVhY3RfX2RlZmF1bHQuY3JlYXRlQ29udGV4dCh7fSk7XG5mdW5jdGlvbiBQcm92aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIHN0b3JlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJjaGlsZHJlblwiXSk7XG5cbiAgdmFyIHBhcmVudFZhbHVlID0gUmVhY3RfX2RlZmF1bHQudXNlQ29udGV4dChNb2JYUHJvdmlkZXJDb250ZXh0KTtcbiAgdmFyIG11dGFibGVQcm92aWRlclJlZiA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihfZXh0ZW5kcyh7fSwgcGFyZW50VmFsdWUsIHt9LCBzdG9yZXMpKTtcbiAgdmFyIHZhbHVlID0gbXV0YWJsZVByb3ZpZGVyUmVmLmN1cnJlbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciBuZXdWYWx1ZSA9IF9leHRlbmRzKHt9LCB2YWx1ZSwge30sIHN0b3Jlcyk7IC8vIHNwcmVhZCBpbiBwcmV2aW91cyBzdGF0ZSBmb3IgdGhlIGNvbnRleHQgYmFzZWQgc3RvcmVzXG5cblxuICAgIGlmICghc2hhbGxvd0VxdWFsKHZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1vYlggUHJvdmlkZXI6IFRoZSBzZXQgb2YgcHJvdmlkZWQgc3RvcmVzIGhhcyBjaGFuZ2VkLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC1yZWFjdCN0aGUtc2V0LW9mLXByb3ZpZGVkLXN0b3Jlcy1oYXMtY2hhbmdlZC1lcnJvci5cIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTW9iWFByb3ZpZGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5Qcm92aWRlci5kaXNwbGF5TmFtZSA9IFwiTW9iWFByb3ZpZGVyXCI7XG5cbi8qKlxyXG4gKiBTdG9yZSBJbmplY3Rpb25cclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlSW5qZWN0b3IoZ3JhYlN0b3Jlc0ZuLCBjb21wb25lbnQsIGluamVjdE5hbWVzLCBtYWtlUmVhY3RpdmUpIHtcbiAgLy8gU3VwcG9ydCBmb3J3YXJkIHJlZnNcbiAgdmFyIEluamVjdG9yID0gUmVhY3RfX2RlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHZhciBuZXdQcm9wcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG5cbiAgICB2YXIgY29udGV4dCA9IFJlYWN0X19kZWZhdWx0LnVzZUNvbnRleHQoTW9iWFByb3ZpZGVyQ29udGV4dCk7XG4gICAgT2JqZWN0LmFzc2lnbihuZXdQcm9wcywgZ3JhYlN0b3Jlc0ZuKGNvbnRleHQgfHwge30sIG5ld1Byb3BzKSB8fCB7fSk7XG5cbiAgICBpZiAocmVmKSB7XG4gICAgICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBuZXdQcm9wcyk7XG4gIH0pO1xuICBpZiAobWFrZVJlYWN0aXZlKSBJbmplY3RvciA9IG9ic2VydmVyKEluamVjdG9yKTtcbiAgSW5qZWN0b3JbXCJpc01vYnhJbmplY3RvclwiXSA9IHRydWU7IC8vIGFzc2lnbmVkIGxhdGUgdG8gc3VwcHJlc3Mgb2JzZXJ2ZXIgd2FybmluZ1xuICAvLyBTdGF0aWMgZmllbGRzIGZyb20gY29tcG9uZW50IHNob3VsZCBiZSB2aXNpYmxlIG9uIHRoZSBnZW5lcmF0ZWQgSW5qZWN0b3JcblxuICBjb3B5U3RhdGljUHJvcGVydGllcyhjb21wb25lbnQsIEluamVjdG9yKTtcbiAgSW5qZWN0b3JbXCJ3cmFwcGVkQ29tcG9uZW50XCJdID0gY29tcG9uZW50O1xuICBJbmplY3Rvci5kaXNwbGF5TmFtZSA9IGdldEluamVjdE5hbWUoY29tcG9uZW50LCBpbmplY3ROYW1lcyk7XG4gIHJldHVybiBJbmplY3Rvcjtcbn1cblxuZnVuY3Rpb24gZ2V0SW5qZWN0TmFtZShjb21wb25lbnQsIGluamVjdE5hbWVzKSB7XG4gIHZhciBkaXNwbGF5TmFtZTtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Lm5hbWUgfHwgY29tcG9uZW50LmNvbnN0cnVjdG9yICYmIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5uYW1lIHx8IFwiQ29tcG9uZW50XCI7XG4gIGlmIChpbmplY3ROYW1lcykgZGlzcGxheU5hbWUgPSBcImluamVjdC13aXRoLVwiICsgaW5qZWN0TmFtZXMgKyBcIihcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtlbHNlIGRpc3BsYXlOYW1lID0gXCJpbmplY3QoXCIgKyBjb21wb25lbnROYW1lICsgXCIpXCI7XG4gIHJldHVybiBkaXNwbGF5TmFtZTtcbn1cblxuZnVuY3Rpb24gZ3JhYlN0b3Jlc0J5TmFtZShzdG9yZU5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYmFzZVN0b3JlcywgbmV4dFByb3BzKSB7XG4gICAgc3RvcmVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yZU5hbWUpIHtcbiAgICAgIGlmIChzdG9yZU5hbWUgaW4gbmV4dFByb3BzIC8vIHByZWZlciBwcm9wcyBvdmVyIHN0b3Jlc1xuICAgICAgKSByZXR1cm47XG4gICAgICBpZiAoIShzdG9yZU5hbWUgaW4gYmFzZVN0b3JlcykpIHRocm93IG5ldyBFcnJvcihcIk1vYlggaW5qZWN0b3I6IFN0b3JlICdcIiArIHN0b3JlTmFtZSArIFwiJyBpcyBub3QgYXZhaWxhYmxlISBNYWtlIHN1cmUgaXQgaXMgcHJvdmlkZWQgYnkgc29tZSBQcm92aWRlclwiKTtcbiAgICAgIG5leHRQcm9wc1tzdG9yZU5hbWVdID0gYmFzZVN0b3Jlc1tzdG9yZU5hbWVdO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXh0UHJvcHM7XG4gIH07XG59XG4vKipcclxuICogaGlnaGVyIG9yZGVyIGNvbXBvbmVudCB0aGF0IGluamVjdHMgc3RvcmVzIHRvIGEgY2hpbGQuXHJcbiAqIHRha2VzIGVpdGhlciBhIHZhcmFyZ3MgbGlzdCBvZiBzdHJpbmdzLCB3aGljaCBhcmUgc3RvcmVzIHJlYWQgZnJvbSB0aGUgY29udGV4dCxcclxuICogb3IgYSBmdW5jdGlvbiB0aGF0IG1hbnVhbGx5IG1hcHMgdGhlIGF2YWlsYWJsZSBzdG9yZXMgZnJvbSB0aGUgY29udGV4dCB0byBwcm9wczpcclxuICogc3RvcmVzVG9Qcm9wcyhtb2J4U3RvcmVzLCBwcm9wcywgY29udGV4dCkgPT4gbmV3UHJvcHNcclxuICovXG5cblxuZnVuY3Rpb24gaW5qZWN0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc3RvcmVOYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzdG9yZU5hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBncmFiU3RvcmVzRm4gPSBhcmd1bWVudHNbMF07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0b3JlSW5qZWN0b3IoZ3JhYlN0b3Jlc0ZuLCBjb21wb25lbnRDbGFzcywgZ3JhYlN0b3Jlc0ZuLm5hbWUsIHRydWUpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0b3JlSW5qZWN0b3IoZ3JhYlN0b3Jlc0J5TmFtZShzdG9yZU5hbWVzKSwgY29tcG9uZW50Q2xhc3MsIHN0b3JlTmFtZXMuam9pbihcIi1cIiksIGZhbHNlKTtcbiAgICB9O1xuICB9XG59XG5cbnZhciBwcm90b1N0b3JlS2V5ID1cbi8qI19fUFVSRV9fKi9cbm5ld1N5bWJvbChcImRpc3Bvc2VPblVubW91bnRQcm90b1wiKTtcbnZhciBpbnN0U3RvcmVLZXkgPVxuLyojX19QVVJFX18qL1xubmV3U3ltYm9sKFwiZGlzcG9zZU9uVW5tb3VudEluc3RcIik7XG5cbmZ1bmN0aW9uIHJ1bkRpc3Bvc2Vyc09uV2lsbFVubW91bnQoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIFtdLmNvbmNhdCh0aGlzW3Byb3RvU3RvcmVLZXldIHx8IFtdLCB0aGlzW2luc3RTdG9yZUtleV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHByb3BLZXlPckZ1bmN0aW9uKSB7XG4gICAgdmFyIHByb3AgPSB0eXBlb2YgcHJvcEtleU9yRnVuY3Rpb24gPT09IFwic3RyaW5nXCIgPyBfdGhpc1twcm9wS2V5T3JGdW5jdGlvbl0gOiBwcm9wS2V5T3JGdW5jdGlvbjtcblxuICAgIGlmIChwcm9wICE9PSB1bmRlZmluZWQgJiYgcHJvcCAhPT0gbnVsbCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcCkpIHByb3AubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBmKCk7XG4gICAgICB9KTtlbHNlIHByb3AoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkaXNwb3NlT25Vbm1vdW50KHRhcmdldCwgcHJvcGVydHlLZXlPckZ1bmN0aW9uKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BlcnR5S2V5T3JGdW5jdGlvbikpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXlPckZ1bmN0aW9uLm1hcChmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHJldHVybiBkaXNwb3NlT25Vbm1vdW50KHRhcmdldCwgZm4pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KS5jb25zdHJ1Y3RvcjtcbiAgdmFyIGMyID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldC5jb25zdHJ1Y3Rvcik7IC8vIFNwZWNpYWwgY2FzZSBmb3IgcmVhY3QtaG90LWxvYWRlclxuXG4gIHZhciBjMyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSk7XG5cbiAgaWYgKCEoYyA9PT0gUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50IHx8IGMgPT09IFJlYWN0X19kZWZhdWx0LlB1cmVDb21wb25lbnQgfHwgYzIgPT09IFJlYWN0X19kZWZhdWx0LkNvbXBvbmVudCB8fCBjMiA9PT0gUmVhY3RfX2RlZmF1bHQuUHVyZUNvbXBvbmVudCB8fCBjMyA9PT0gUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50IHx8IGMzID09PSBSZWFjdF9fZGVmYXVsdC5QdXJlQ29tcG9uZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4LXJlYWN0XSBkaXNwb3NlT25Vbm1vdW50IG9ubHkgc3VwcG9ydHMgZGlyZWN0IHN1YmNsYXNzZXMgb2YgUmVhY3QuQ29tcG9uZW50IG9yIFJlYWN0LlB1cmVDb21wb25lbnQuXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eUtleU9yRnVuY3Rpb24gIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHByb3BlcnR5S2V5T3JGdW5jdGlvbiAhPT0gXCJmdW5jdGlvblwiICYmICFBcnJheS5pc0FycmF5KHByb3BlcnR5S2V5T3JGdW5jdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC1yZWFjdF0gZGlzcG9zZU9uVW5tb3VudCBvbmx5IHdvcmtzIGlmIHRoZSBwYXJhbWV0ZXIgaXMgZWl0aGVyIGEgcHJvcGVydHkga2V5IG9yIGEgZnVuY3Rpb24uXCIpO1xuICB9IC8vIGRlY29yYXRvcidzIHRhcmdldCBpcyB0aGUgcHJvdG90eXBlLCBzbyBpdCBkb2Vzbid0IGhhdmUgYW55IGluc3RhbmNlIHByb3BlcnRpZXMgbGlrZSBwcm9wc1xuXG5cbiAgdmFyIGlzRGVjb3JhdG9yID0gdHlwZW9mIHByb3BlcnR5S2V5T3JGdW5jdGlvbiA9PT0gXCJzdHJpbmdcIjsgLy8gYWRkIHByb3BlcnR5IGtleSAvIGZ1bmN0aW9uIHdlIHdhbnQgcnVuIChkaXNwb3NlZCkgdG8gdGhlIHN0b3JlXG5cbiAgdmFyIGNvbXBvbmVudFdhc0FscmVhZHlNb2RpZmllZCA9ICEhdGFyZ2V0W3Byb3RvU3RvcmVLZXldIHx8ICEhdGFyZ2V0W2luc3RTdG9yZUtleV07XG4gIHZhciBzdG9yZSA9IGlzRGVjb3JhdG9yID8gLy8gZGVjb3JhdG9ycyBhcmUgYWRkZWQgdG8gdGhlIHByb3RvdHlwZSBzdG9yZVxuICB0YXJnZXRbcHJvdG9TdG9yZUtleV0gfHwgKHRhcmdldFtwcm90b1N0b3JlS2V5XSA9IFtdKSA6IC8vIGZ1bmN0aW9ucyBhcmUgYWRkZWQgdG8gdGhlIGluc3RhbmNlIHN0b3JlXG4gIHRhcmdldFtpbnN0U3RvcmVLZXldIHx8ICh0YXJnZXRbaW5zdFN0b3JlS2V5XSA9IFtdKTtcbiAgc3RvcmUucHVzaChwcm9wZXJ0eUtleU9yRnVuY3Rpb24pOyAvLyB0d2VhayB0aGUgY29tcG9uZW50IGNsYXNzIGNvbXBvbmVudFdpbGxVbm1vdW50IGlmIG5vdCBkb25lIGFscmVhZHlcblxuICBpZiAoIWNvbXBvbmVudFdhc0FscmVhZHlNb2RpZmllZCkge1xuICAgIHBhdGNoKHRhcmdldCwgXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLCBydW5EaXNwb3NlcnNPbldpbGxVbm1vdW50KTtcbiAgfSAvLyByZXR1cm4gdGhlIGRpc3Bvc2VyIGFzIGlzIGlmIGludm9rZWQgYXMgYSBub24gZGVjb3JhdG9yXG5cblxuICBpZiAodHlwZW9mIHByb3BlcnR5S2V5T3JGdW5jdGlvbiAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleU9yRnVuY3Rpb247XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdG9yKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gNiA/IF9sZW4gLSA2IDogMCksIF9rZXkgPSA2OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICByZXN0W19rZXkgLSA2XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IFwiPDxhbm9ueW1vdXM+PlwiO1xuICAgICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsID0gcHJvcHNbcHJvcE5hbWVdID09PSBudWxsID8gXCJudWxsXCIgOiBcInVuZGVmaW5lZFwiO1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgXCIgKyBsb2NhdGlvbiArIFwiIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgXCIgKyBcImluIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYFwiICsgYWN0dWFsICsgXCJgLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSByZXN0IGFyZyBpcyBuZWNlc3NhcnkgZm9yIHNvbWUgUmVhY3QgaW50ZXJuYWxzIC0gZmFpbHMgdGVzdHMgb3RoZXJ3aXNlXG4gICAgICAgIHJldHVybiB2YWxpZGF0b3IuYXBwbHkodm9pZCAwLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lXS5jb25jYXQocmVzdCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7IC8vIEFkZCBpc1JlcXVpcmVkIHRvIHNhdGlzZnkgUmVxdWlyYWJsZVxuXG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn0gLy8gQ29waWVkIGZyb20gUmVhY3QuUHJvcFR5cGVzXG5cblxuZnVuY3Rpb24gaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkge1xuICAvLyBOYXRpdmUgU3ltYm9sLlxuICBpZiAocHJvcFR5cGUgPT09IFwic3ltYm9sXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuXG5cbiAgaWYgKHByb3BWYWx1ZVtcIkBAdG9TdHJpbmdUYWdcIl0gPT09IFwiU3ltYm9sXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG5cblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcblxuXG5mdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIFwiYXJyYXlcIjtcbiAgfVxuXG4gIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgcmV0dXJuIFwib2JqZWN0XCI7XG4gIH1cblxuICBpZiAoaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gXCJzeW1ib2xcIjtcbiAgfVxuXG4gIHJldHVybiBwcm9wVHlwZTtcbn0gLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuLy8gQ29waWVkIGZyb20gUmVhY3QuUHJvcFR5cGVzXG5cblxuZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG5cbiAgaWYgKHByb3BUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiBcImRhdGVcIjtcbiAgICB9IGVsc2UgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIFwicmVnZXhwXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGFsbG93TmF0aXZlVHlwZSwgbW9ieFR5cGUpIHtcbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICByZXR1cm4gdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChhbGxvd05hdGl2ZVR5cGUpIHtcbiAgICAgICAgaWYgKGdldFByb3BUeXBlKHByb3BzW3Byb3BOYW1lXSkgPT09IG1vYnhUeXBlLnRvTG93ZXJDYXNlKCkpIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW9ieENoZWNrZXI7XG5cbiAgICAgIHN3aXRjaCAobW9ieFR5cGUpIHtcbiAgICAgICAgY2FzZSBcIkFycmF5XCI6XG4gICAgICAgICAgbW9ieENoZWNrZXIgPSBpc09ic2VydmFibGVBcnJheTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiT2JqZWN0XCI6XG4gICAgICAgICAgbW9ieENoZWNrZXIgPSBpc09ic2VydmFibGVPYmplY3Q7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIk1hcFwiOlxuICAgICAgICAgIG1vYnhDaGVja2VyID0gaXNPYnNlcnZhYmxlTWFwO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBtb2J4VHlwZTogXCIgKyBtb2J4VHlwZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgICAgIGlmICghbW9ieENoZWNrZXIocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICB2YXIgbmF0aXZlVHlwZUV4cGVjdGF0aW9uTWVzc2FnZSA9IGFsbG93TmF0aXZlVHlwZSA/IFwiIG9yIGphdmFzY3JpcHQgYFwiICsgbW9ieFR5cGUudG9Mb3dlckNhc2UoKSArIFwiYFwiIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBwcmVjaXNlVHlwZSArIFwiYCBzdXBwbGllZCB0b1wiICsgXCIgYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYG1vYnguT2JzZXJ2YWJsZVwiICsgbW9ieFR5cGUgKyBcImBcIiArIG5hdGl2ZVR5cGVFeHBlY3RhdGlvbk1lc3NhZ2UgKyBcIi5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZUFycmF5T2ZUeXBlQ2hlY2tlcihhbGxvd05hdGl2ZVR5cGUsIHR5cGVDaGVja2VyKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4yID4gNSA/IF9sZW4yIC0gNSA6IDApLCBfa2V5MiA9IDU7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIHJlc3RbX2tleTIgLSA1XSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVudHJhY2tlZChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlByb3BlcnR5IGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBvZiBjb21wb25lbnQgYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCBoYXMgXCIgKyBcImludmFsaWQgUHJvcFR5cGUgbm90YXRpb24uXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVycm9yID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcihhbGxvd05hdGl2ZVR5cGUsIFwiQXJyYXlcIikocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVycm9yID0gdHlwZUNoZWNrZXIuYXBwbHkodm9pZCAwLCBbcHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgXCJbXCIgKyBpICsgXCJdXCJdLmNvbmNhdChyZXN0KSk7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxudmFyIG9ic2VydmFibGVBcnJheSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGZhbHNlLCBcIkFycmF5XCIpO1xudmFyIG9ic2VydmFibGVBcnJheU9mID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU9ic2VydmFibGVBcnJheU9mVHlwZUNoZWNrZXIuYmluZChudWxsLCBmYWxzZSk7XG52YXIgb2JzZXJ2YWJsZU1hcCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGZhbHNlLCBcIk1hcFwiKTtcbnZhciBvYnNlcnZhYmxlT2JqZWN0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoZmFsc2UsIFwiT2JqZWN0XCIpO1xudmFyIGFycmF5T3JPYnNlcnZhYmxlQXJyYXkgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcih0cnVlLCBcIkFycmF5XCIpO1xudmFyIGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZiA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyLmJpbmQobnVsbCwgdHJ1ZSk7XG52YXIgb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IodHJ1ZSwgXCJPYmplY3RcIik7XG52YXIgUHJvcFR5cGVzID0ge1xuICBvYnNlcnZhYmxlQXJyYXk6IG9ic2VydmFibGVBcnJheSxcbiAgb2JzZXJ2YWJsZUFycmF5T2Y6IG9ic2VydmFibGVBcnJheU9mLFxuICBvYnNlcnZhYmxlTWFwOiBvYnNlcnZhYmxlTWFwLFxuICBvYnNlcnZhYmxlT2JqZWN0OiBvYnNlcnZhYmxlT2JqZWN0LFxuICBhcnJheU9yT2JzZXJ2YWJsZUFycmF5OiBhcnJheU9yT2JzZXJ2YWJsZUFycmF5LFxuICBhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2Y6IGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZixcbiAgb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0OiBvYmplY3RPck9ic2VydmFibGVPYmplY3Rcbn07XG5cbmlmICghQ29tcG9uZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0IHJlcXVpcmVzIFJlYWN0IHRvIGJlIGF2YWlsYWJsZVwiKTtcbmlmICghb2JzZXJ2YWJsZSkgdGhyb3cgbmV3IEVycm9yKFwibW9ieC1yZWFjdCByZXF1aXJlcyBtb2J4IHRvIGJlIGF2YWlsYWJsZVwiKTtcblxuZXhwb3J0IHsgTW9iWFByb3ZpZGVyQ29udGV4dCwgUHJvcFR5cGVzLCBQcm92aWRlciwgZGlzcG9zZU9uVW5tb3VudCwgaW5qZWN0LCBvYnNlcnZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9ieHJlYWN0LmVzbS5qcy5tYXBcbiIsInZhciBfT2JqZWN0JGFzc2lnbiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gX09iamVjdCRhc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwidmFyIF9PYmplY3QkY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gX09iamVjdCRjcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCJ2YXIgX09iamVjdCRrZXlzID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2tleXNcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICB2YXIgc291cmNlS2V5cyA9IF9PYmplY3Qka2V5cyhzb3VyY2UpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBfU3R5bGVDb25maWcgPSByZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKTtcblxudmFyIF9WYWxpZENvbXBvbmVudENoaWxkcmVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuXCIpKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldHMgYGlkYCBvbiBgPEZvcm1Db250cm9sPmAgYW5kIGBodG1sRm9yYCBvbiBgPEZvcm1Hcm91cC5MYWJlbD5gLlxuICAgKi9cbiAgY29udHJvbElkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICB2YWxpZGF0aW9uU3RhdGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdlcnJvcicsIG51bGxdKVxufTtcbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG52YXIgRm9ybUdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRm9ybUdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtR3JvdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm1Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjb250cm9sSWQgPSBfdGhpcyRwcm9wcy5jb250cm9sSWQsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0ZSA9IF90aGlzJHByb3BzLnZhbGlkYXRpb25TdGF0ZTtcbiAgICByZXR1cm4ge1xuICAgICAgJGJzX2Zvcm1Hcm91cDoge1xuICAgICAgICBjb250cm9sSWQ6IGNvbnRyb2xJZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlOiB2YWxpZGF0aW9uU3RhdGVcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5oYXNGZWVkYmFjayA9IGZ1bmN0aW9uIGhhc0ZlZWRiYWNrKGNoaWxkcmVuKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0LnNvbWUoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLmJzUm9sZSA9PT0gJ2ZlZWRiYWNrJyB8fCBjaGlsZC5wcm9wcy5jaGlsZHJlbiAmJiBfdGhpcy5oYXNGZWVkYmFjayhjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3RoaXMkcHJvcHMyLnZhbGlkYXRpb25TdGF0ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wczIsIFtcInZhbGlkYXRpb25TdGF0ZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzQW5kT21pdCkocHJvcHMsIFsnY29udHJvbElkJ10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKSwge1xuICAgICAgJ2hhcy1mZWVkYmFjayc6IHRoaXMuaGFzRmVlZGJhY2soY2hpbGRyZW4pXG4gICAgfSk7XG5cbiAgICBpZiAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjbGFzc2VzW1wiaGFzLVwiICsgdmFsaWRhdGlvblN0YXRlXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybUdyb3VwO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Gb3JtR3JvdXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRm9ybUdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2Zvcm0tZ3JvdXAnLCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSwgX1N0eWxlQ29uZmlnLlNpemUuU01BTExdLCBGb3JtR3JvdXApKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2lzQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvYXJyYXkvaXMtYXJyYXlcIikpO1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX092ZXJsYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL092ZXJsYXlcIikpO1xuXG52YXIgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKTtcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBvbmUgaXMgaW5zaWRlIG9yIGVxdWFsIHRvIHRoZSBvZiB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVcbiAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSBvZlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT25lT2Yob25lLCBvZikge1xuICBpZiAoKDAsIF9pc0FycmF5LmRlZmF1bHQpKG9mKSkge1xuICAgIHJldHVybiBvZi5pbmRleE9mKG9uZSkgPj0gMDtcbiAgfVxuXG4gIHJldHVybiBvbmUgPT09IG9mO1xufVxuXG52YXIgdHJpZ2dlclR5cGUgPSBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydjbGljaycsICdob3ZlcicsICdmb2N1cyddKTtcblxudmFyIHByb3BUeXBlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIF9PdmVybGF5LmRlZmF1bHQucHJvcFR5cGVzLCB7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoaWNoIGFjdGlvbiBvciBhY3Rpb25zIHRyaWdnZXIgT3ZlcmxheSB2aXNpYmlsaXR5XG4gICAqL1xuICB0cmlnZ2VyOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFt0cmlnZ2VyVHlwZSwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YodHJpZ2dlclR5cGUpXSksXG5cbiAgLyoqXG4gICAqIEEgbWlsbGlzZWNvbmQgZGVsYXkgYW1vdW50IHRvIHNob3cgYW5kIGhpZGUgdGhlIE92ZXJsYXkgb25jZSB0cmlnZ2VyZWRcbiAgICovXG4gIGRlbGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBBIG1pbGxpc2Vjb25kIGRlbGF5IGFtb3VudCBiZWZvcmUgc2hvd2luZyB0aGUgT3ZlcmxheSBvbmNlIHRyaWdnZXJlZC5cbiAgICovXG4gIGRlbGF5U2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogQSBtaWxsaXNlY29uZCBkZWxheSBhbW91bnQgYmVmb3JlIGhpZGluZyB0aGUgT3ZlcmxheSBvbmNlIHRyaWdnZXJlZC5cbiAgICovXG4gIGRlbGF5SGlkZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgLy8gRklYTUU6IFRoaXMgc2hvdWxkIGJlIGBkZWZhdWx0U2hvd2AuXG5cbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsIHZpc2liaWxpdHkgc3RhdGUgb2YgdGhlIE92ZXJsYXkuIEZvciBtb3JlIG51YW5jZWQgdmlzaWJpbGl0eVxuICAgKiBjb250cm9sLCBjb25zaWRlciB1c2luZyB0aGUgT3ZlcmxheSBjb21wb25lbnQgZGlyZWN0bHkuXG4gICAqL1xuICBkZWZhdWx0T3ZlcmxheVNob3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQW4gZWxlbWVudCBvciB0ZXh0IHRvIG92ZXJsYXkgbmV4dCB0byB0aGUgdGFyZ2V0LlxuICAgKi9cbiAgb3ZlcmxheTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Nb3VzZU91dDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbk1vdXNlT3ZlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8vIE92ZXJyaWRkZW4gcHJvcHMgZnJvbSBgPE92ZXJsYXk+YC5cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRhcmdldDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtudWxsXSksXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkhpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbbnVsbF0pLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtudWxsXSlcbn0pO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGVmYXVsdE92ZXJsYXlTaG93bjogZmFsc2UsXG4gIHRyaWdnZXI6IFsnaG92ZXInLCAnZm9jdXMnXVxufTtcblxudmFyIE92ZXJsYXlUcmlnZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoT3ZlcmxheVRyaWdnZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE92ZXJsYXlUcmlnZ2VyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlVG9nZ2xlID0gX3RoaXMuaGFuZGxlVG9nZ2xlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVEZWxheWVkU2hvdyA9IF90aGlzLmhhbmRsZURlbGF5ZWRTaG93LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVEZWxheWVkSGlkZSA9IF90aGlzLmhhbmRsZURlbGF5ZWRIaWRlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVIaWRlID0gX3RoaXMuaGFuZGxlSGlkZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZU92ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vdXNlT3Zlck91dChfdGhpcy5oYW5kbGVEZWxheWVkU2hvdywgZSwgJ2Zyb21FbGVtZW50Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlT3V0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVNb3VzZU92ZXJPdXQoX3RoaXMuaGFuZGxlRGVsYXllZEhpZGUsIGUsICd0b0VsZW1lbnQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX21vdW50Tm9kZSA9IG51bGw7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93OiBwcm9wcy5kZWZhdWx0T3ZlcmxheVNob3duXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT3ZlcmxheVRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX21vdW50Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMucmVuZGVyT3ZlcmxheSgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5yZW5kZXJPdmVybGF5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgX3JlYWN0RG9tLmRlZmF1bHQudW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLl9tb3VudE5vZGUpO1xuXG4gICAgdGhpcy5fbW91bnROb2RlID0gbnVsbDtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5faG92ZXJTaG93RGVsYXkpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9ob3ZlckhpZGVEZWxheSk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZURlbGF5ZWRIaWRlID0gZnVuY3Rpb24gaGFuZGxlRGVsYXllZEhpZGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5faG92ZXJTaG93RGVsYXkgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hvdmVyU2hvd0RlbGF5KTtcbiAgICAgIHRoaXMuX2hvdmVyU2hvd0RlbGF5ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuc2hvdyB8fCB0aGlzLl9ob3ZlckhpZGVEZWxheSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlbGF5ID0gdGhpcy5wcm9wcy5kZWxheUhpZGUgIT0gbnVsbCA/IHRoaXMucHJvcHMuZGVsYXlIaWRlIDogdGhpcy5wcm9wcy5kZWxheTtcblxuICAgIGlmICghZGVsYXkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2hvdmVySGlkZURlbGF5ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuX2hvdmVySGlkZURlbGF5ID0gbnVsbDtcblxuICAgICAgX3RoaXMyLmhpZGUoKTtcbiAgICB9LCBkZWxheSk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZURlbGF5ZWRTaG93ID0gZnVuY3Rpb24gaGFuZGxlRGVsYXllZFNob3coKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5faG92ZXJIaWRlRGVsYXkgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hvdmVySGlkZURlbGF5KTtcbiAgICAgIHRoaXMuX2hvdmVySGlkZURlbGF5ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5zaG93IHx8IHRoaXMuX2hvdmVyU2hvd0RlbGF5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVsYXkgPSB0aGlzLnByb3BzLmRlbGF5U2hvdyAhPSBudWxsID8gdGhpcy5wcm9wcy5kZWxheVNob3cgOiB0aGlzLnByb3BzLmRlbGF5O1xuXG4gICAgaWYgKCFkZWxheSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faG92ZXJTaG93RGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5faG92ZXJTaG93RGVsYXkgPSBudWxsO1xuXG4gICAgICBfdGhpczMuc2hvdygpO1xuICAgIH0sIGRlbGF5KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlSGlkZSA9IGZ1bmN0aW9uIGhhbmRsZUhpZGUoKSB7XG4gICAgdGhpcy5oaWRlKCk7XG4gIH07IC8vIFNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZUVudGVyIGFuZCBtb3VzZUxlYXZlLlxuICAvLyBSZWFjdCdzIGJ1aWx0IHZlcnNpb24gaXMgYnJva2VuOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzQyNTFcbiAgLy8gZm9yIGNhc2VzIHdoZW4gdGhlIHRyaWdnZXIgaXMgZGlzYWJsZWQgYW5kIG1vdXNlT3V0L092ZXIgY2FuIGNhdXNlIGZsaWNrZXJcbiAgLy8gbW92aW5nIGZyb20gb25lIGNoaWxkIGVsZW1lbnQgdG8gYW5vdGhlci5cblxuXG4gIF9wcm90by5oYW5kbGVNb3VzZU92ZXJPdXQgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU92ZXJPdXQoaGFuZGxlciwgZSwgcmVsYXRlZE5hdGl2ZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgdmFyIHJlbGF0ZWQgPSBlLnJlbGF0ZWRUYXJnZXQgfHwgZS5uYXRpdmVFdmVudFtyZWxhdGVkTmF0aXZlXTtcblxuICAgIGlmICgoIXJlbGF0ZWQgfHwgcmVsYXRlZCAhPT0gdGFyZ2V0KSAmJiAhKDAsIF9jb250YWlucy5kZWZhdWx0KSh0YXJnZXQsIHJlbGF0ZWQpKSB7XG4gICAgICBoYW5kbGVyKGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNob3cpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvdzogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFrZU92ZXJsYXkgPSBmdW5jdGlvbiBtYWtlT3ZlcmxheShvdmVybGF5LCBwcm9wcykge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PdmVybGF5LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICBzaG93OiB0aGlzLnN0YXRlLnNob3csXG4gICAgICBvbkhpZGU6IHRoaXMuaGFuZGxlSGlkZSxcbiAgICAgIHRhcmdldDogdGhpc1xuICAgIH0pLCBvdmVybGF5KTtcbiAgfTtcblxuICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiByZW5kZXJPdmVybGF5KCkge1xuICAgIF9yZWFjdERvbS5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHRoaXMsIHRoaXMuX292ZXJsYXksIHRoaXMuX21vdW50Tm9kZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICB0cmlnZ2VyID0gX3RoaXMkcHJvcHMudHJpZ2dlcixcbiAgICAgICAgb3ZlcmxheSA9IF90aGlzJHByb3BzLm92ZXJsYXksXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uQmx1ciA9IF90aGlzJHByb3BzLm9uQmx1cixcbiAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgIG9uRm9jdXMgPSBfdGhpcyRwcm9wcy5vbkZvY3VzLFxuICAgICAgICBvbk1vdXNlT3V0ID0gX3RoaXMkcHJvcHMub25Nb3VzZU91dCxcbiAgICAgICAgb25Nb3VzZU92ZXIgPSBfdGhpcyRwcm9wcy5vbk1vdXNlT3ZlcixcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJ0cmlnZ2VyXCIsIFwib3ZlcmxheVwiLCBcImNoaWxkcmVuXCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbk1vdXNlT3V0XCIsIFwib25Nb3VzZU92ZXJcIl0pO1xuICAgIGRlbGV0ZSBwcm9wcy5kZWxheTtcbiAgICBkZWxldGUgcHJvcHMuZGVsYXlTaG93O1xuICAgIGRlbGV0ZSBwcm9wcy5kZWxheUhpZGU7XG4gICAgZGVsZXRlIHByb3BzLmRlZmF1bHRPdmVybGF5U2hvd247XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHZhciBjaGlsZFByb3BzID0gY2hpbGQucHJvcHM7XG4gICAgdmFyIHRyaWdnZXJQcm9wcyA9IHt9O1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuc2hvdykge1xuICAgICAgdHJpZ2dlclByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10gPSBvdmVybGF5LnByb3BzLmlkO1xuICAgIH0gLy8gRklYTUU6IFRoZSBsb2dpYyBoZXJlIGZvciBwYXNzaW5nIHRocm91Z2ggaGFuZGxlcnMgb24gdGhpcyBjb21wb25lbnQgaXNcbiAgICAvLyBpbmNvbnNpc3RlbnQuIFdlIHNob3VsZG4ndCBiZSBwYXNzaW5nIGFueSBvZiB0aGVzZSBwcm9wcyB0aHJvdWdoLlxuXG5cbiAgICB0cmlnZ2VyUHJvcHMub25DbGljayA9ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGNoaWxkUHJvcHMub25DbGljaywgb25DbGljayk7XG5cbiAgICBpZiAoaXNPbmVPZignY2xpY2snLCB0cmlnZ2VyKSkge1xuICAgICAgdHJpZ2dlclByb3BzLm9uQ2xpY2sgPSAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KSh0cmlnZ2VyUHJvcHMub25DbGljaywgdGhpcy5oYW5kbGVUb2dnbGUpO1xuICAgIH1cblxuICAgIGlmIChpc09uZU9mKCdob3ZlcicsIHRyaWdnZXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoISh0cmlnZ2VyID09PSAnaG92ZXInKSwgJ1tyZWFjdC1ib290c3RyYXBdIFNwZWNpZnlpbmcgb25seSB0aGUgYFwiaG92ZXJcImAgdHJpZ2dlciBsaW1pdHMgdGhlICcgKyAndmlzaWJpbGl0eSBvZiB0aGUgb3ZlcmxheSB0byBqdXN0IG1vdXNlIHVzZXJzLiBDb25zaWRlciBhbHNvICcgKyAnaW5jbHVkaW5nIHRoZSBgXCJmb2N1c1wiYCB0cmlnZ2VyIHNvIHRoYXQgdG91Y2ggYW5kIGtleWJvYXJkIG9ubHkgJyArICd1c2VycyBjYW4gc2VlIHRoZSBvdmVybGF5IGFzIHdlbGwuJykgOiB2b2lkIDA7XG4gICAgICB0cmlnZ2VyUHJvcHMub25Nb3VzZU92ZXIgPSAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShjaGlsZFByb3BzLm9uTW91c2VPdmVyLCBvbk1vdXNlT3ZlciwgdGhpcy5oYW5kbGVNb3VzZU92ZXIpO1xuICAgICAgdHJpZ2dlclByb3BzLm9uTW91c2VPdXQgPSAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShjaGlsZFByb3BzLm9uTW91c2VPdXQsIG9uTW91c2VPdXQsIHRoaXMuaGFuZGxlTW91c2VPdXQpO1xuICAgIH1cblxuICAgIGlmIChpc09uZU9mKCdmb2N1cycsIHRyaWdnZXIpKSB7XG4gICAgICB0cmlnZ2VyUHJvcHMub25Gb2N1cyA9ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGNoaWxkUHJvcHMub25Gb2N1cywgb25Gb2N1cywgdGhpcy5oYW5kbGVEZWxheWVkU2hvdyk7XG4gICAgICB0cmlnZ2VyUHJvcHMub25CbHVyID0gKDAsIF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoY2hpbGRQcm9wcy5vbkJsdXIsIG9uQmx1ciwgdGhpcy5oYW5kbGVEZWxheWVkSGlkZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fb3ZlcmxheSA9IHRoaXMubWFrZU92ZXJsYXkob3ZlcmxheSwgcHJvcHMpO1xuICAgIHJldHVybiAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHRyaWdnZXJQcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIE92ZXJsYXlUcmlnZ2VyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5PdmVybGF5VHJpZ2dlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5PdmVybGF5VHJpZ2dlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgX2RlZmF1bHQgPSBPdmVybGF5VHJpZ2dlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfaXNSZXF1aXJlZEZvckExMXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeVwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFuIGh0bWwgaWQgYXR0cmlidXRlLCBuZWNlc3NhcnkgZm9yIGFjY2Vzc2liaWxpdHlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHJlcXVpcmVkXG4gICAqL1xuICBpZDogKDAsIF9pc1JlcXVpcmVkRm9yQTExeS5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSkpLFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gdGhlIFBvcG92ZXIgaXMgcG9zaXRpb25lZCB0b3dhcmRzLlxuICAgKi9cbiAgcGxhY2VtZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcInRvcFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3Zlci5cbiAgICovXG4gIHBvc2l0aW9uVG9wOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcImxlZnRcIiBwb3NpdGlvbiB2YWx1ZSBmb3IgdGhlIFBvcG92ZXIuXG4gICAqL1xuICBwb3NpdGlvbkxlZnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwidG9wXCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBQb3BvdmVyIGFycm93LlxuICAgKi9cbiAgYXJyb3dPZmZzZXRUb3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwibGVmdFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3ZlciBhcnJvdy5cbiAgICovXG4gIGFycm93T2Zmc2V0TGVmdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaXRsZSBjb250ZW50XG4gICAqL1xuICB0aXRsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbnZhciBQb3BvdmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUG9wb3ZlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUG9wb3Zlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcGxhY2VtZW50ID0gX3RoaXMkcHJvcHMucGxhY2VtZW50LFxuICAgICAgICBwb3NpdGlvblRvcCA9IF90aGlzJHByb3BzLnBvc2l0aW9uVG9wLFxuICAgICAgICBwb3NpdGlvbkxlZnQgPSBfdGhpcyRwcm9wcy5wb3NpdGlvbkxlZnQsXG4gICAgICAgIGFycm93T2Zmc2V0VG9wID0gX3RoaXMkcHJvcHMuYXJyb3dPZmZzZXRUb3AsXG4gICAgICAgIGFycm93T2Zmc2V0TGVmdCA9IF90aGlzJHByb3BzLmFycm93T2Zmc2V0TGVmdCxcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcInBsYWNlbWVudFwiLCBcInBvc2l0aW9uVG9wXCIsIFwicG9zaXRpb25MZWZ0XCIsIFwiYXJyb3dPZmZzZXRUb3BcIiwgXCJhcnJvd09mZnNldExlZnRcIiwgXCJ0aXRsZVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3BsYWNlbWVudF0gPSB0cnVlLCBfZXh0ZW5kczIpKTtcbiAgICB2YXIgb3V0ZXJTdHlsZSA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRvcDogcG9zaXRpb25Ub3AsXG4gICAgICBsZWZ0OiBwb3NpdGlvbkxlZnRcbiAgICB9LCBzdHlsZSk7XG4gICAgdmFyIGFycm93U3R5bGUgPSB7XG4gICAgICB0b3A6IGFycm93T2Zmc2V0VG9wLFxuICAgICAgbGVmdDogYXJyb3dPZmZzZXRMZWZ0XG4gICAgfTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJvbGU6IFwidG9vbHRpcFwiLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKSxcbiAgICAgIHN0eWxlOiBvdXRlclN0eWxlXG4gICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcImFycm93XCIsXG4gICAgICBzdHlsZTogYXJyb3dTdHlsZVxuICAgIH0pLCB0aXRsZSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ3RpdGxlJylcbiAgICB9LCB0aXRsZSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ2NvbnRlbnQnKVxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFBvcG92ZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvcG92ZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ3BvcG92ZXInLCBQb3BvdmVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmdldENsYXNzU2V0ID0gZ2V0Q2xhc3NTZXQ7XG5leHBvcnRzLnNwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcztcbmV4cG9ydHMuc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQ7XG5leHBvcnRzLmFkZFN0eWxlID0gYWRkU3R5bGU7XG5leHBvcnRzLl9jdXJyeSA9IGV4cG9ydHMuYnNTaXplcyA9IGV4cG9ydHMuYnNTdHlsZXMgPSBleHBvcnRzLmJzQ2xhc3MgPSB2b2lkIDA7XG5cbnZhciBfZW50cmllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZW50cmllc1wiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfaW52YXJpYW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW52YXJpYW50XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9TdHlsZUNvbmZpZyA9IHJlcXVpcmUoXCIuL1N0eWxlQ29uZmlnXCIpO1xuXG4vLyBUT0RPOiBUaGUgcHVibGljbHkgZXhwb3NlZCBwYXJ0cyBvZiB0aGlzIHNob3VsZCBiZSBpbiBsaWIvQm9vdHN0cmFwVXRpbHMuXG5mdW5jdGlvbiBjdXJyeShmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgbGFzdCA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcblxuICAgIGlmICh0eXBlb2YgbGFzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3MuY29uY2F0KFtDb21wb25lbnRdKSk7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlZml4KHByb3BzLCB2YXJpYW50KSB7XG4gIHZhciBic0NsYXNzID0gKHByb3BzLmJzQ2xhc3MgfHwgJycpLnRyaW0oKTtcbiAgIShic0NsYXNzICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoZmFsc2UsICdBIGBic0NsYXNzYCBwcm9wIGlzIHJlcXVpcmVkIGZvciB0aGlzIGNvbXBvbmVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGJzQ2xhc3MgKyAodmFyaWFudCA/IFwiLVwiICsgdmFyaWFudCA6ICcnKTtcbn1cblxudmFyIGJzQ2xhc3MgPSBjdXJyeShmdW5jdGlvbiAoZGVmYXVsdENsYXNzLCBDb21wb25lbnQpIHtcbiAgdmFyIHByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXMgfHwgKENvbXBvbmVudC5wcm9wVHlwZXMgPSB7fSk7XG4gIHZhciBkZWZhdWx0UHJvcHMgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzIHx8IChDb21wb25lbnQuZGVmYXVsdFByb3BzID0ge30pO1xuICBwcm9wVHlwZXMuYnNDbGFzcyA9IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmc7XG4gIGRlZmF1bHRQcm9wcy5ic0NsYXNzID0gZGVmYXVsdENsYXNzO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSk7XG5leHBvcnRzLmJzQ2xhc3MgPSBic0NsYXNzO1xudmFyIGJzU3R5bGVzID0gY3VycnkoZnVuY3Rpb24gKHN0eWxlcywgZGVmYXVsdFN0eWxlLCBDb21wb25lbnQpIHtcbiAgaWYgKHR5cGVvZiBkZWZhdWx0U3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlO1xuICAgIGRlZmF1bHRTdHlsZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBleGlzdGluZyA9IENvbXBvbmVudC5TVFlMRVMgfHwgW107XG4gIHZhciBwcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzIHx8IHt9O1xuICBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICBpZiAoZXhpc3RpbmcuaW5kZXhPZihzdHlsZSkgPT09IC0xKSB7XG4gICAgICBleGlzdGluZy5wdXNoKHN0eWxlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBwcm9wVHlwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihleGlzdGluZyk7IC8vIGV4cG9zZSB0aGUgdmFsdWVzIG9uIHRoZSBwcm9wVHlwZSBmdW5jdGlvbiBmb3IgZG9jdW1lbnRhdGlvblxuXG5cbiAgQ29tcG9uZW50LlNUWUxFUyA9IGV4aXN0aW5nO1xuICBwcm9wVHlwZS5fdmFsdWVzID0gZXhpc3Rpbmc7XG4gIENvbXBvbmVudC5wcm9wVHlwZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wVHlwZXMsIHtcbiAgICBic1N0eWxlOiBwcm9wVHlwZVxuICB9KTtcblxuICBpZiAoZGVmYXVsdFN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcyB8fCAoQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IHt9KTtcbiAgICBkZWZhdWx0UHJvcHMuYnNTdHlsZSA9IGRlZmF1bHRTdHlsZTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59KTtcbmV4cG9ydHMuYnNTdHlsZXMgPSBic1N0eWxlcztcbnZhciBic1NpemVzID0gY3VycnkoZnVuY3Rpb24gKHNpemVzLCBkZWZhdWx0U2l6ZSwgQ29tcG9uZW50KSB7XG4gIGlmICh0eXBlb2YgZGVmYXVsdFNpemUgIT09ICdzdHJpbmcnKSB7XG4gICAgQ29tcG9uZW50ID0gZGVmYXVsdFNpemU7XG4gICAgZGVmYXVsdFNpemUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgZXhpc3RpbmcgPSBDb21wb25lbnQuU0laRVMgfHwgW107XG4gIHZhciBwcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzIHx8IHt9O1xuICBzaXplcy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgaWYgKGV4aXN0aW5nLmluZGV4T2Yoc2l6ZSkgPT09IC0xKSB7XG4gICAgICBleGlzdGluZy5wdXNoKHNpemUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZXhpc3RpbmcuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHZhciBtYXBwZWRTaXplID0gX1N0eWxlQ29uZmlnLlNJWkVfTUFQW3NpemVdO1xuXG4gICAgaWYgKG1hcHBlZFNpemUgJiYgbWFwcGVkU2l6ZSAhPT0gc2l6ZSkge1xuICAgICAgdmFsdWVzLnB1c2gobWFwcGVkU2l6ZSk7XG4gICAgfVxuXG4gICAgdmFsdWVzLnB1c2goc2l6ZSk7XG4gIH0pO1xuXG4gIHZhciBwcm9wVHlwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZih2YWx1ZXMpO1xuXG4gIHByb3BUeXBlLl92YWx1ZXMgPSB2YWx1ZXM7IC8vIGV4cG9zZSB0aGUgdmFsdWVzIG9uIHRoZSBwcm9wVHlwZSBmdW5jdGlvbiBmb3IgZG9jdW1lbnRhdGlvblxuXG4gIENvbXBvbmVudC5TSVpFUyA9IGV4aXN0aW5nO1xuICBDb21wb25lbnQucHJvcFR5cGVzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcFR5cGVzLCB7XG4gICAgYnNTaXplOiBwcm9wVHlwZVxuICB9KTtcblxuICBpZiAoZGVmYXVsdFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghQ29tcG9uZW50LmRlZmF1bHRQcm9wcykge1xuICAgICAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIENvbXBvbmVudC5kZWZhdWx0UHJvcHMuYnNTaXplID0gZGVmYXVsdFNpemU7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufSk7XG5leHBvcnRzLmJzU2l6ZXMgPSBic1NpemVzO1xuXG5mdW5jdGlvbiBnZXRDbGFzc1NldChwcm9wcykge1xuICB2YXIgX2NsYXNzZXM7XG5cbiAgdmFyIGNsYXNzZXMgPSAoX2NsYXNzZXMgPSB7fSwgX2NsYXNzZXNbcHJlZml4KHByb3BzKV0gPSB0cnVlLCBfY2xhc3Nlcyk7XG5cbiAgaWYgKHByb3BzLmJzU2l6ZSkge1xuICAgIHZhciBic1NpemUgPSBfU3R5bGVDb25maWcuU0laRV9NQVBbcHJvcHMuYnNTaXplXSB8fCBwcm9wcy5ic1NpemU7XG4gICAgY2xhc3Nlc1twcmVmaXgocHJvcHMsIGJzU2l6ZSldID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9wcy5ic1N0eWxlKSB7XG4gICAgY2xhc3Nlc1twcmVmaXgocHJvcHMsIHByb3BzLmJzU3R5bGUpXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuZnVuY3Rpb24gZ2V0QnNQcm9wcyhwcm9wcykge1xuICByZXR1cm4ge1xuICAgIGJzQ2xhc3M6IHByb3BzLmJzQ2xhc3MsXG4gICAgYnNTaXplOiBwcm9wcy5ic1NpemUsXG4gICAgYnNTdHlsZTogcHJvcHMuYnNTdHlsZSxcbiAgICBic1JvbGU6IHByb3BzLmJzUm9sZVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0JzUHJvcChwcm9wTmFtZSkge1xuICByZXR1cm4gcHJvcE5hbWUgPT09ICdic0NsYXNzJyB8fCBwcm9wTmFtZSA9PT0gJ2JzU2l6ZScgfHwgcHJvcE5hbWUgPT09ICdic1N0eWxlJyB8fCBwcm9wTmFtZSA9PT0gJ2JzUm9sZSc7XG59XG5cbmZ1bmN0aW9uIHNwbGl0QnNQcm9wcyhwcm9wcykge1xuICB2YXIgZWxlbWVudFByb3BzID0ge307XG4gICgwLCBfZW50cmllcy5kZWZhdWx0KShwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwcm9wTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgIHByb3BWYWx1ZSA9IF9yZWZbMV07XG5cbiAgICBpZiAoIWlzQnNQcm9wKHByb3BOYW1lKSkge1xuICAgICAgZWxlbWVudFByb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW2dldEJzUHJvcHMocHJvcHMpLCBlbGVtZW50UHJvcHNdO1xufVxuXG5mdW5jdGlvbiBzcGxpdEJzUHJvcHNBbmRPbWl0KHByb3BzLCBvbWl0dGVkUHJvcE5hbWVzKSB7XG4gIHZhciBpc09taXR0ZWRQcm9wID0ge307XG4gIG9taXR0ZWRQcm9wTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICBpc09taXR0ZWRQcm9wW3Byb3BOYW1lXSA9IHRydWU7XG4gIH0pO1xuICB2YXIgZWxlbWVudFByb3BzID0ge307XG4gICgwLCBfZW50cmllcy5kZWZhdWx0KShwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBfcmVmMlswXSxcbiAgICAgICAgcHJvcFZhbHVlID0gX3JlZjJbMV07XG5cbiAgICBpZiAoIWlzQnNQcm9wKHByb3BOYW1lKSAmJiAhaXNPbWl0dGVkUHJvcFtwcm9wTmFtZV0pIHtcbiAgICAgIGVsZW1lbnRQcm9wc1twcm9wTmFtZV0gPSBwcm9wVmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtnZXRCc1Byb3BzKHByb3BzKSwgZWxlbWVudFByb3BzXTtcbn1cbi8qKlxuICogQWRkIGEgc3R5bGUgdmFyaWFudCB0byBhIENvbXBvbmVudC4gTXV0YXRlcyB0aGUgcHJvcFR5cGVzIG9mIHRoZSBjb21wb25lbnRcbiAqIGluIG9yZGVyIHRvIHZhbGlkYXRlIHRoZSBuZXcgdmFyaWFudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGFkZFN0eWxlKENvbXBvbmVudCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0eWxlVmFyaWFudCA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgc3R5bGVWYXJpYW50W19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgYnNTdHlsZXMoc3R5bGVWYXJpYW50KShDb21wb25lbnQpO1xufVxuXG52YXIgX2N1cnJ5ID0gY3Vycnk7XG5leHBvcnRzLl9jdXJyeSA9IF9jdXJyeTsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsImltcG9ydCB7IHNweSwgY29uZmlndXJlLCBnZXREZXBlbmRlbmN5VHJlZSwgUmVhY3Rpb24sIG9ic2VydmFibGUsIHJ1bkluQWN0aW9uLCB0cmFuc2FjdGlvbiB9IGZyb20gJ21vYngnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgbWVtbywgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcblxuaWYgKCF1c2VTdGF0ZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0LWxpdGUgcmVxdWlyZXMgUmVhY3Qgd2l0aCBIb29rcyBzdXBwb3J0XCIpO1xufVxuXG5pZiAoIXNweSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0LWxpdGUgcmVxdWlyZXMgbW9ieCBhdCBsZWFzdCB2ZXJzaW9uIDQgdG8gYmUgYXZhaWxhYmxlXCIpO1xufVxuXG52YXIgZ2xvYmFsSXNVc2luZ1N0YXRpY1JlbmRlcmluZyA9IGZhbHNlO1xuZnVuY3Rpb24gdXNlU3RhdGljUmVuZGVyaW5nKGVuYWJsZSkge1xuICBnbG9iYWxJc1VzaW5nU3RhdGljUmVuZGVyaW5nID0gZW5hYmxlO1xufVxuZnVuY3Rpb24gaXNVc2luZ1N0YXRpY1JlbmRlcmluZygpIHtcbiAgcmV0dXJuIGdsb2JhbElzVXNpbmdTdGF0aWNSZW5kZXJpbmc7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHVzZUZvcmNlVXBkYXRlKCkge1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoMCksXG4gICAgICBzZXRUaWNrID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciB1cGRhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGljayhmdW5jdGlvbiAodGljaykge1xuICAgICAgcmV0dXJuIHRpY2sgKyAxO1xuICAgIH0pO1xuICB9LCBbXSk7XG4gIHJldHVybiB1cGRhdGU7XG59XG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgcmV0dXJuICFwcm90byB8fCBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cbmZ1bmN0aW9uIGdldFN5bWJvbChuYW1lKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gU3ltYm9sLmZvcihuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBcIl9fJG1vYngtcmVhY3QgXCIgKyBuYW1lICsgXCJfX1wiO1xufVxudmFyIG1vY2tHbG9iYWwgPSB7fTtcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZ2xvYmFsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICByZXR1cm4gbW9ja0dsb2JhbDtcbn1cblxudmFyIG9ic2VydmVyQmF0Y2hpbmdDb25maWd1cmVkU3ltYm9sID1cbi8qI19fUFVSRV9fKi9cbmdldFN5bWJvbChcIm9ic2VydmVyQmF0Y2hpbmdcIik7XG52YXIgb2JzZXJ2ZXJCYXRjaGluZyA9IGZ1bmN0aW9uIG9ic2VydmVyQmF0Y2hpbmcocmVhY3Rpb25TY2hlZHVsZXIpIHtcbiAgaWYgKHR5cGVvZiByZWFjdGlvblNjaGVkdWxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29uZmlndXJlKHtcbiAgICAgIHJlYWN0aW9uU2NoZWR1bGVyOiByZWFjdGlvblNjaGVkdWxlclxuICAgIH0pO1xuICB9XG5cbiAgZ2V0R2xvYmFsKClbb2JzZXJ2ZXJCYXRjaGluZ0NvbmZpZ3VyZWRTeW1ib2xdID0gdHJ1ZTtcbn07XG52YXIgb2JzZXJ2ZXJCYXRjaGluZ09wdE91dCA9IGZ1bmN0aW9uIG9ic2VydmVyQmF0Y2hpbmdPcHRPdXQoKSB7XG4gIGNvbmZpZ3VyZSh7XG4gICAgcmVhY3Rpb25TY2hlZHVsZXI6IHVuZGVmaW5lZFxuICB9KTtcbiAgZ2V0R2xvYmFsKClbb2JzZXJ2ZXJCYXRjaGluZ0NvbmZpZ3VyZWRTeW1ib2xdID0gdHJ1ZTtcbn07XG52YXIgaXNPYnNlcnZlckJhdGNoZWQgPSBmdW5jdGlvbiBpc09ic2VydmVyQmF0Y2hlZCgpIHtcbiAgcmV0dXJuIGdldEdsb2JhbCgpW29ic2VydmVyQmF0Y2hpbmdDb25maWd1cmVkU3ltYm9sXTtcbn07XG5cbmZ1bmN0aW9uIHByaW50RGVidWdWYWx1ZSh2KSB7XG4gIHJldHVybiBnZXREZXBlbmRlbmN5VHJlZSh2KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhY2tpbmdEYXRhKHJlYWN0aW9uKSB7XG4gIHZhciB0cmFja2luZ0RhdGEgPSB7XG4gICAgY2xlYW5BdDogRGF0ZS5ub3coKSArIENMRUFOVVBfTEVBS0VEX1JFQUNUSU9OU19BRlRFUl9NSUxMSVMsXG4gICAgcmVhY3Rpb246IHJlYWN0aW9uXG4gIH07XG4gIHJldHVybiB0cmFja2luZ0RhdGE7XG59XG4vKipcclxuICogVGhlIG1pbmltdW0gdGltZSBiZWZvcmUgd2UnbGwgY2xlYW4gdXAgYSBSZWFjdGlvbiBjcmVhdGVkIGluIGEgcmVuZGVyXHJcbiAqIGZvciBhIGNvbXBvbmVudCB0aGF0IGhhc24ndCBtYW5hZ2VkIHRvIHJ1biBpdHMgZWZmZWN0cy4gVGhpcyBuZWVkcyB0b1xyXG4gKiBiZSBiaWcgZW5vdWdoIHRvIGVuc3VyZSB0aGF0IGEgY29tcG9uZW50IHdvbid0IHR1cm4gdXAgYW5kIGhhdmUgaXRzXHJcbiAqIGVmZmVjdHMgcnVuIHdpdGhvdXQgYmVpbmcgcmUtcmVuZGVyZWQuXHJcbiAqL1xuXG52YXIgQ0xFQU5VUF9MRUFLRURfUkVBQ1RJT05TX0FGVEVSX01JTExJUyA9IDEwMDAwO1xuLyoqXHJcbiAqIFRoZSBmcmVxdWVuY3kgd2l0aCB3aGljaCB3ZSdsbCBjaGVjayBmb3IgbGVha2VkIHJlYWN0aW9ucy5cclxuICovXG5cbnZhciBDTEVBTlVQX1RJTUVSX0xPT1BfTUlMTElTID0gMTAwMDA7XG4vKipcclxuICogUmVhY3Rpb25zIGNyZWF0ZWQgYnkgY29tcG9uZW50cyB0aGF0IGhhdmUgeWV0IHRvIGJlIGZ1bGx5IG1vdW50ZWQuXHJcbiAqL1xuXG52YXIgdW5jb21taXR0ZWRSZWFjdGlvblJlZnMgPVxuLyojX19QVVJFX18qL1xubmV3IFNldCgpO1xuLyoqXHJcbiAqIExhdGVzdCAndW5jb21taXR0ZWQgcmVhY3Rpb25zJyBjbGVhbnVwIHRpbWVyIGhhbmRsZS5cclxuICovXG5cbnZhciByZWFjdGlvbkNsZWFudXBIYW5kbGU7XG5cbmZ1bmN0aW9uIGVuc3VyZUNsZWFudXBUaW1lclJ1bm5pbmcoKSB7XG4gIGlmIChyZWFjdGlvbkNsZWFudXBIYW5kbGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlYWN0aW9uQ2xlYW51cEhhbmRsZSA9IHNldFRpbWVvdXQoY2xlYW5VbmNvbW1pdHRlZFJlYWN0aW9ucywgQ0xFQU5VUF9USU1FUl9MT09QX01JTExJUyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVDbGVhbnVwT2ZSZWFjdGlvbklmTGVha2VkKHJlZikge1xuICB1bmNvbW1pdHRlZFJlYWN0aW9uUmVmcy5hZGQocmVmKTtcbiAgZW5zdXJlQ2xlYW51cFRpbWVyUnVubmluZygpO1xufVxuZnVuY3Rpb24gcmVjb3JkUmVhY3Rpb25Bc0NvbW1pdHRlZChyZWFjdGlvblJlZikge1xuICB1bmNvbW1pdHRlZFJlYWN0aW9uUmVmcy5kZWxldGUocmVhY3Rpb25SZWYpO1xufVxuLyoqXHJcbiAqIFJ1biBieSB0aGUgY2xlYW51cCB0aW1lciB0byBkaXNwb3NlIGFueSBvdXRzdGFuZGluZyByZWFjdGlvbnNcclxuICovXG5cbmZ1bmN0aW9uIGNsZWFuVW5jb21taXR0ZWRSZWFjdGlvbnMoKSB7XG4gIHJlYWN0aW9uQ2xlYW51cEhhbmRsZSA9IHVuZGVmaW5lZDsgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgY2FuZGlkYXRlIGxlYWtlZCByZWFjdGlvbnM7IHRob3NlIG9sZGVyXG4gIC8vIHRoYW4gQ0xFQU5VUF9MRUFLRURfUkVBQ1RJT05TX0FGVEVSX01JTExJUyBnZXQgdGlkaWVkLlxuXG4gIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICB1bmNvbW1pdHRlZFJlYWN0aW9uUmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIgdHJhY2tpbmcgPSByZWYuY3VycmVudDtcblxuICAgIGlmICh0cmFja2luZykge1xuICAgICAgaWYgKG5vdyA+PSB0cmFja2luZy5jbGVhbkF0KSB7XG4gICAgICAgIC8vIEl0J3MgdGltZSB0byB0aWR5IHVwIHRoaXMgbGVha2VkIHJlYWN0aW9uLlxuICAgICAgICB0cmFja2luZy5yZWFjdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdW5jb21taXR0ZWRSZWFjdGlvblJlZnMuZGVsZXRlKHJlZik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAodW5jb21taXR0ZWRSZWFjdGlvblJlZnMuc2l6ZSA+IDApIHtcbiAgICAvLyBXZSd2ZSBqdXN0IGZpbmlzaGVkIGEgcm91bmQgb2YgY2xlYW51cHMgYnV0IHRoZXJlIGFyZSBzdGlsbFxuICAgIC8vIHNvbWUgbGVhayBjYW5kaWRhdGVzIG91dHN0YW5kaW5nLlxuICAgIGVuc3VyZUNsZWFudXBUaW1lclJ1bm5pbmcoKTtcbiAgfVxufVxuXG52YXIgRU1QVFlfT0JKRUNUID0ge307XG5cbmZ1bmN0aW9uIG9ic2VydmVyQ29tcG9uZW50TmFtZUZvcihiYXNlQ29tcG9uZW50TmFtZSkge1xuICByZXR1cm4gXCJvYnNlcnZlclwiICsgYmFzZUNvbXBvbmVudE5hbWU7XG59XG5cbnZhciB3YXJuZWRBYm91dEJhdGNoaW5nID0gZmFsc2U7XG5mdW5jdGlvbiB1c2VPYnNlcnZlcihmbiwgYmFzZUNvbXBvbmVudE5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKGJhc2VDb21wb25lbnROYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlQ29tcG9uZW50TmFtZSA9IFwib2JzZXJ2ZWRcIjtcbiAgfVxuXG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0gRU1QVFlfT0JKRUNUO1xuICB9XG5cbiAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSkge1xuICAgIHJldHVybiBmbigpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhd2FybmVkQWJvdXRCYXRjaGluZyAmJiAhaXNPYnNlcnZlckJhdGNoZWQoKSkge1xuICAgIGNvbnNvbGUud2FybihcIltNb2JYXSBZb3UgaGF2ZW4ndCBjb25maWd1cmVkIG9ic2VydmVyIGJhdGNoaW5nIHdoaWNoIG1pZ2h0IHJlc3VsdCBpbiB1bmV4cGVjdGVkIGJlaGF2aW9yIGluIHNvbWUgY2FzZXMuIFNlZSBtb3JlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC1yZWFjdC1saXRlLyNvYnNlcnZlci1iYXRjaGluZ1wiKTtcbiAgICB3YXJuZWRBYm91dEJhdGNoaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciB3YW50ZWRGb3JjZVVwZGF0ZUhvb2sgPSBvcHRpb25zLnVzZUZvcmNlVXBkYXRlIHx8IHVzZUZvcmNlVXBkYXRlO1xuICB2YXIgZm9yY2VVcGRhdGUgPSB3YW50ZWRGb3JjZVVwZGF0ZUhvb2soKTsgLy8gU3RyaWN0TW9kZS9Db25jdXJyZW50TW9kZS9TdXNwZW5zZSBtYXkgbWVhbiB0aGF0IG91ciBjb21wb25lbnQgaXNcbiAgLy8gcmVuZGVyZWQgYW5kIGFiYW5kb25lZCBtdWx0aXBsZSB0aW1lcywgc28gd2UgbmVlZCB0byB0cmFjayBsZWFrZWRcbiAgLy8gUmVhY3Rpb25zLlxuXG4gIHZhciByZWFjdGlvblRyYWNraW5nUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIGlmICghcmVhY3Rpb25UcmFja2luZ1JlZi5jdXJyZW50KSB7XG4gICAgLy8gRmlyc3QgcmVuZGVyIGZvciB0aGlzIGNvbXBvbmVudCAob3IgZmlyc3QgdGltZSBzaW5jZSBhIHByZXZpb3VzXG4gICAgLy8gcmVhY3Rpb24gZnJvbSBhbiBhYmFuZG9uZWQgcmVuZGVyIHdhcyBkaXNwb3NlZCkuXG4gICAgdmFyIG5ld1JlYWN0aW9uID0gbmV3IFJlYWN0aW9uKG9ic2VydmVyQ29tcG9uZW50TmFtZUZvcihiYXNlQ29tcG9uZW50TmFtZSksIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIE9ic2VydmFibGUgaGFzIGNoYW5nZWQsIG1lYW5pbmcgd2Ugd2FudCB0byByZS1yZW5kZXJcbiAgICAgIC8vIEJVVCBpZiB3ZSdyZSBhIGNvbXBvbmVudCB0aGF0IGhhc24ndCB5ZXQgZ290IHRvIHRoZSB1c2VFZmZlY3QoKVxuICAgICAgLy8gc3RhZ2UsIHdlIG1pZ2h0IGJlIGEgY29tcG9uZW50IHRoYXQgX3N0YXJ0ZWRfIHRvIHJlbmRlciwgYnV0XG4gICAgICAvLyBnb3QgZHJvcHBlZCwgYW5kIHdlIGRvbid0IHdhbnQgdG8gbWFrZSBzdGF0ZSBjaGFuZ2VzIHRoZW4uXG4gICAgICAvLyAoSXQgdHJpZ2dlcnMgd2FybmluZ3MgaW4gU3RyaWN0TW9kZSwgZm9yIGEgc3RhcnQuKVxuICAgICAgaWYgKHRyYWNraW5nRGF0YS5tb3VudGVkKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgcmVhY2hlZCB1c2VFZmZlY3QoKSwgc28gd2UncmUgbW91bnRlZCwgYW5kIGNhbiB0cmlnZ2VyIGFuIHVwZGF0ZVxuICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UgaGF2ZW4ndCB5ZXQgcmVhY2hlZCB1c2VFZmZlY3QoKSwgc28gd2UnbGwgbmVlZCB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyXG4gICAgICAgIC8vIHdoZW4gKGFuZCBpZikgdXNlRWZmZWN0KCkgYXJyaXZlcy4gIFRoZSBlYXNpZXN0IHdheSB0byBkbyB0aGF0IGlzIGp1c3QgdG9cbiAgICAgICAgLy8gZHJvcCBvdXIgY3VycmVudCByZWFjdGlvbiBhbmQgYWxsb3cgdXNlRWZmZWN0KCkgdG8gcmVjcmVhdGUgaXQuXG4gICAgICAgIG5ld1JlYWN0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgcmVhY3Rpb25UcmFja2luZ1JlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgdHJhY2tpbmdEYXRhID0gY3JlYXRlVHJhY2tpbmdEYXRhKG5ld1JlYWN0aW9uKTtcbiAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQgPSB0cmFja2luZ0RhdGE7XG4gICAgc2NoZWR1bGVDbGVhbnVwT2ZSZWFjdGlvbklmTGVha2VkKHJlYWN0aW9uVHJhY2tpbmdSZWYpO1xuICB9XG5cbiAgdmFyIHJlYWN0aW9uID0gcmVhY3Rpb25UcmFja2luZ1JlZi5jdXJyZW50LnJlYWN0aW9uO1xuICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHJlYWN0aW9uLCBwcmludERlYnVnVmFsdWUpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIENhbGxlZCBvbiBmaXJzdCBtb3VudCBvbmx5XG4gICAgcmVjb3JkUmVhY3Rpb25Bc0NvbW1pdHRlZChyZWFjdGlvblRyYWNraW5nUmVmKTtcblxuICAgIGlmIChyZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIEdyZWF0LiBXZSd2ZSBhbHJlYWR5IGdvdCBvdXIgcmVhY3Rpb24gZnJvbSBvdXIgcmVuZGVyO1xuICAgICAgLy8gYWxsIHdlIG5lZWQgdG8gZG8gaXMgdG8gcmVjb3JkIHRoYXQgaXQncyBub3cgbW91bnRlZCxcbiAgICAgIC8vIHRvIGFsbG93IGZ1dHVyZSBvYnNlcnZhYmxlIGNoYW5nZXMgdG8gdHJpZ2dlciByZS1yZW5kZXJzXG4gICAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQubW91bnRlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSByZWFjdGlvbiB3ZSBzZXQgdXAgaW4gb3VyIHJlbmRlciBoYXMgYmVlbiBkaXNwb3NlZC5cbiAgICAgIC8vIFRoaXMgaXMgZWl0aGVyIGR1ZSB0byBiYWQgdGltaW5ncyBvZiByZW5kZXJpbmdzLCBlLmcuIG91clxuICAgICAgLy8gY29tcG9uZW50IHdhcyBwYXVzZWQgZm9yIGEgX3ZlcnlfIGxvbmcgdGltZSwgYW5kIG91clxuICAgICAgLy8gcmVhY3Rpb24gZ290IGNsZWFuZWQgdXAsIG9yIHdlIGdvdCBhIG9ic2VydmFibGUgY2hhbmdlXG4gICAgICAvLyBiZXR3ZWVuIHJlbmRlciBhbmQgdXNlRWZmZWN0XG4gICAgICAvLyBSZS1jcmVhdGUgdGhlIHJlYWN0aW9uXG4gICAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQgPSB7XG4gICAgICAgIHJlYWN0aW9uOiBuZXcgUmVhY3Rpb24ob2JzZXJ2ZXJDb21wb25lbnROYW1lRm9yKGJhc2VDb21wb25lbnROYW1lKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFdlJ3ZlIGRlZmluaXRlbHkgYWxyZWFkeSBiZWVuIG1vdW50ZWQgYXQgdGhpcyBwb2ludFxuICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pLFxuICAgICAgICBjbGVhbkF0OiBJbmZpbml0eVxuICAgICAgfTtcbiAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlYWN0aW9uVHJhY2tpbmdSZWYuY3VycmVudC5yZWFjdGlvbi5kaXNwb3NlKCk7XG4gICAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gcmVuZGVyIHRoZSBvcmlnaW5hbCBjb21wb25lbnQsIGJ1dCBoYXZlIHRoZVxuICAvLyByZWFjdGlvbiB0cmFjayB0aGUgb2JzZXJ2YWJsZXMsIHNvIHRoYXQgcmVuZGVyaW5nXG4gIC8vIGNhbiBiZSBpbnZhbGlkYXRlZCAoc2VlIGFib3ZlKSBvbmNlIGEgZGVwZW5kZW5jeSBjaGFuZ2VzXG5cbiAgdmFyIHJlbmRlcmluZztcbiAgdmFyIGV4Y2VwdGlvbjtcbiAgcmVhY3Rpb24udHJhY2soZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZW5kZXJpbmcgPSBmbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGV4Y2VwdGlvbiA9IGU7XG4gICAgfVxuICB9KTtcblxuICBpZiAoZXhjZXB0aW9uKSB7XG4gICAgdGhyb3cgZXhjZXB0aW9uOyAvLyByZS10aHJvdyBhbnkgZXhjZXB0aW9ucyBjYXRjaGVkIGR1cmluZyByZW5kZXJpbmdcbiAgfVxuXG4gIHJldHVybiByZW5kZXJpbmc7XG59XG5cbmZ1bmN0aW9uIG9ic2VydmVyKGJhc2VDb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgLy8gVGhlIHdvcmtpbmcgb2Ygb2JzZXJ2ZXIgaXMgZXhwbGFpbmVkIHN0ZXAgYnkgc3RlcCBpbiB0aGlzIHRhbGs6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Y1BGNGlCZWRvRjAmZmVhdHVyZT15b3V0dS5iZSZ0PTEzMDdcbiAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSkge1xuICAgIHJldHVybiBiYXNlQ29tcG9uZW50O1xuICB9XG5cbiAgdmFyIHJlYWxPcHRpb25zID0gX2V4dGVuZHMoe1xuICAgIGZvcndhcmRSZWY6IGZhbHNlXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciBiYXNlQ29tcG9uZW50TmFtZSA9IGJhc2VDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgYmFzZUNvbXBvbmVudC5uYW1lO1xuXG4gIHZhciB3cmFwcGVkQ29tcG9uZW50ID0gZnVuY3Rpb24gd3JhcHBlZENvbXBvbmVudChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIHVzZU9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBiYXNlQ29tcG9uZW50KHByb3BzLCByZWYpO1xuICAgIH0sIGJhc2VDb21wb25lbnROYW1lKTtcbiAgfTtcblxuICB3cmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYmFzZUNvbXBvbmVudE5hbWU7IC8vIG1lbW87IHdlIGFyZSBub3QgaW50ZXJlc3RlZCBpbiBkZWVwIHVwZGF0ZXNcbiAgLy8gaW4gcHJvcHM7IHdlIGFzc3VtZSB0aGF0IGlmIGRlZXAgb2JqZWN0cyBhcmUgY2hhbmdlZCxcbiAgLy8gdGhpcyBpcyBpbiBvYnNlcnZhYmxlcywgd2hpY2ggd291bGQgaGF2ZSBiZWVuIHRyYWNrZWQgYW55d2F5XG5cbiAgdmFyIG1lbW9Db21wb25lbnQ7XG5cbiAgaWYgKHJlYWxPcHRpb25zLmZvcndhcmRSZWYpIHtcbiAgICAvLyB3ZSBoYXZlIHRvIHVzZSBmb3J3YXJkUmVmIGhlcmUgYmVjYXVzZTpcbiAgICAvLyAxLiBpdCBjYW5ub3QgZ28gYmVmb3JlIG1lbW8sIG9ubHkgYWZ0ZXIgaXRcbiAgICAvLyAyLiBmb3J3YXJkUmVmIGNvbnZlcnRzIHRoZSBmdW5jdGlvbiBpbnRvIGFuIGFjdHVhbCBjb21wb25lbnQsIHNvIHdlIGNhbid0IGxldCB0aGUgYmFzZUNvbXBvbmVudCBkbyBpdFxuICAgIC8vICAgIHNpbmNlIGl0IHdvdWxkbid0IGJlIGEgY2FsbGFibGUgZnVuY3Rpb24gYW55bW9yZVxuICAgIG1lbW9Db21wb25lbnQgPSBtZW1vKGZvcndhcmRSZWYod3JhcHBlZENvbXBvbmVudCkpO1xuICB9IGVsc2Uge1xuICAgIG1lbW9Db21wb25lbnQgPSBtZW1vKHdyYXBwZWRDb21wb25lbnQpO1xuICB9XG5cbiAgY29weVN0YXRpY1Byb3BlcnRpZXMoYmFzZUNvbXBvbmVudCwgbWVtb0NvbXBvbmVudCk7XG4gIG1lbW9Db21wb25lbnQuZGlzcGxheU5hbWUgPSBiYXNlQ29tcG9uZW50TmFtZTtcbiAgcmV0dXJuIG1lbW9Db21wb25lbnQ7XG59IC8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmlkZ3dheS9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ibG9iL21hc3Rlci9zcmMvaW5kZXguanNcblxudmFyIGhvaXN0QmxhY2tMaXN0ID0ge1xuICAkJHR5cGVvZjogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBjb3B5U3RhdGljUHJvcGVydGllcyhiYXNlLCB0YXJnZXQpIHtcbiAgT2JqZWN0LmtleXMoYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFob2lzdEJsYWNrTGlzdFtrZXldKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwga2V5KSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gT2JzZXJ2ZXJDb21wb25lbnQoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgcmVuZGVyID0gX3JlZi5yZW5kZXI7XG4gIHZhciBjb21wb25lbnQgPSBjaGlsZHJlbiB8fCByZW5kZXI7XG5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHVzZU9ic2VydmVyKGNvbXBvbmVudCk7XG59XG5cbk9ic2VydmVyQ29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IE9ic2VydmVyUHJvcHNDaGVjayxcbiAgcmVuZGVyOiBPYnNlcnZlclByb3BzQ2hlY2tcbn07XG5PYnNlcnZlckNvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiT2JzZXJ2ZXJcIjtcblxuZnVuY3Rpb24gT2JzZXJ2ZXJQcm9wc0NoZWNrKHByb3BzLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgdmFyIGV4dHJhS2V5ID0ga2V5ID09PSBcImNoaWxkcmVuXCIgPyBcInJlbmRlclwiIDogXCJjaGlsZHJlblwiO1xuICB2YXIgaGFzUHJvcCA9IHR5cGVvZiBwcm9wc1trZXldID09PSBcImZ1bmN0aW9uXCI7XG4gIHZhciBoYXNFeHRyYVByb3AgPSB0eXBlb2YgcHJvcHNbZXh0cmFLZXldID09PSBcImZ1bmN0aW9uXCI7XG5cbiAgaWYgKGhhc1Byb3AgJiYgaGFzRXh0cmFQcm9wKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIk1vYlggT2JzZXJ2ZXI6IERvIG5vdCB1c2UgY2hpbGRyZW4gYW5kIHJlbmRlciBpbiB0aGUgc2FtZSB0aW1lIGluYFwiICsgY29tcG9uZW50TmFtZSk7XG4gIH1cblxuICBpZiAoaGFzUHJvcCB8fCBoYXNFeHRyYVByb3ApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgdHlwZW9mIHByb3BzW2tleV0gKyBcImAgc3VwcGxpZWQgdG9cIiArIFwiIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBmdW5jdGlvbmAuXCIpO1xufVxuXG5mdW5jdGlvbiB1c2VBc09ic2VydmFibGVTb3VyY2VJbnRlcm5hbChjdXJyZW50LCB1c2VkQnlMb2NhbFN0b3JlKSB7XG4gIHZhciBjdWxwcml0ID0gdXNlZEJ5TG9jYWxTdG9yZSA/IFwidXNlTG9jYWxTdG9yZVwiIDogXCJ1c2VBc09ic2VydmFibGVTb3VyY2VcIjtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHVzZWRCeUxvY2FsU3RvcmUpIHtcbiAgICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoY3VycmVudCksXG4gICAgICAgIGluaXRpYWxTb3VyY2UgPSBfUmVhY3QkdXNlU3RhdGVbMF07XG5cbiAgICBpZiAoaW5pdGlhbFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIGN1cnJlbnQgPT09IHVuZGVmaW5lZCB8fCBpbml0aWFsU291cmNlID09PSB1bmRlZmluZWQgJiYgY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtYWtlIHN1cmUgeW91IG5ldmVyIHBhc3MgYHVuZGVmaW5lZGAgdG8gXCIgKyBjdWxwcml0KTtcbiAgICB9XG4gIH1cblxuICBpZiAodXNlZEJ5TG9jYWxTdG9yZSAmJiBjdXJyZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaXNQbGFpbk9iamVjdChjdXJyZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihjdWxwcml0ICsgXCIgZXhwZWN0cyBhIHBsYWluIG9iamVjdCBhcyBcIiArICh1c2VkQnlMb2NhbFN0b3JlID8gXCJzZWNvbmRcIiA6IFwiZmlyc3RcIikgKyBcIiBhcmd1bWVudFwiKTtcbiAgfVxuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBvYnNlcnZhYmxlKGN1cnJlbnQsIHt9LCB7XG4gICAgICBkZWVwOiBmYWxzZVxuICAgIH0pO1xuICB9KSxcbiAgICAgIHJlcyA9IF9SZWFjdCR1c2VTdGF0ZTJbMF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBPYmplY3Qua2V5cyhyZXMpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoY3VycmVudCkubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidGhlIHNoYXBlIG9mIG9iamVjdHMgcGFzc2VkIHRvIFwiICsgY3VscHJpdCArIFwiIHNob3VsZCBiZSBzdGFibGVcIik7XG4gIH1cblxuICBydW5JbkFjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmFzc2lnbihyZXMsIGN1cnJlbnQpO1xuICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHVzZUFzT2JzZXJ2YWJsZVNvdXJjZShjdXJyZW50KSB7XG4gIHJldHVybiB1c2VBc09ic2VydmFibGVTb3VyY2VJbnRlcm5hbChjdXJyZW50LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHVzZUxvY2FsU3RvcmUoaW5pdGlhbGl6ZXIsIGN1cnJlbnQpIHtcbiAgdmFyIHNvdXJjZSA9IHVzZUFzT2JzZXJ2YWJsZVNvdXJjZUludGVybmFsKGN1cnJlbnQsIHRydWUpO1xuICByZXR1cm4gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIHZhciBsb2NhbCA9IG9ic2VydmFibGUoaW5pdGlhbGl6ZXIoc291cmNlKSk7XG5cbiAgICBpZiAoaXNQbGFpbk9iamVjdChsb2NhbCkpIHtcbiAgICAgIHJ1bkluQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgT2JqZWN0LmtleXMobG9jYWwpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGxvY2FsW2tleV07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgTm8gaWRlYSB3aHkgdHMyNTM2IGlzIHBvcHBpbmcgb3V0IGhlcmVcbiAgICAgICAgICAgIGxvY2FsW2tleV0gPSB3cmFwSW5UcmFuc2FjdGlvbih2YWx1ZSwgbG9jYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWw7XG4gIH0pWzBdO1xufSAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGJhbi10eXBlc1xuXG5mdW5jdGlvbiB3cmFwSW5UcmFuc2FjdGlvbihmbiwgY29udGV4dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgeyBPYnNlcnZlckNvbXBvbmVudCBhcyBPYnNlcnZlciwgaXNPYnNlcnZlckJhdGNoZWQsIGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcsIG9ic2VydmVyLCBvYnNlcnZlckJhdGNoaW5nLCBvYnNlcnZlckJhdGNoaW5nT3B0T3V0LCB1c2VBc09ic2VydmFibGVTb3VyY2UsIHVzZUZvcmNlVXBkYXRlLCB1c2VMb2NhbFN0b3JlLCB1c2VPYnNlcnZlciwgdXNlU3RhdGljUmVuZGVyaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2J4cmVhY3RsaXRlLmVzbS5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGVsZW1lbnRUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgUmVhY3RFbGVtZW50ICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLGV4cGVjdGVkIGFuIGVsZW1lbnQgdHlwZSAoYSBzdHJpbmcgJykgKyAnLCBjb21wb25lbnQgY2xhc3MsIG9yIGZ1bmN0aW9uIGNvbXBvbmVudCkuJyk7XG4gIH1cblxuICBpZiAoISgwLCBfcmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUpKHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgKGEgc3RyaW5nICcpICsgJywgY29tcG9uZW50IGNsYXNzLCBvciBmdW5jdGlvbiBjb21wb25lbnQpLicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGVsZW1lbnRUeXBlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2F4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxudmFyIF9heGlvczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9heGlvcyk7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9qc0Jhc2UgPSByZXF1aXJlKCdqcy1iYXNlNjQnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbnZhciBsb2cgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KSgnZ2l0aHViOnJlcXVlc3QnKTtcblxuLyoqXG4gKiBUaGUgZXJyb3Igc3RydWN0dXJlIHJldHVybmVkIHdoZW4gYSBuZXR3b3JrIGNhbGwgZmFpbHNcbiAqL1xuXG52YXIgUmVzcG9uc2VFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgIF9pbmhlcml0cyhSZXNwb25zZUVycm9yLCBfRXJyb3IpO1xuXG4gICAvKipcbiAgICAqIENvbnN0cnVjdCBhIG5ldyBSZXNwb25zZUVycm9yXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIGFuIG1lc3NhZ2UgdG8gcmV0dXJuIGluc3RlYWQgb2YgdGhlIHRoZSBkZWZhdWx0IGVycm9yIG1lc3NhZ2VcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHJlcXVlc3RlZCBwYXRoXG4gICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgLSB0aGUgb2JqZWN0IHJldHVybmVkIGJ5IEF4aW9zXG4gICAgKi9cbiAgIGZ1bmN0aW9uIFJlc3BvbnNlRXJyb3IobWVzc2FnZSwgcGF0aCwgcmVzcG9uc2UpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNwb25zZUVycm9yKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlc3BvbnNlRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXNwb25zZUVycm9yKSkuY2FsbCh0aGlzLCBtZXNzYWdlKSk7XG5cbiAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgX3RoaXMucmVxdWVzdCA9IHJlc3BvbnNlLmNvbmZpZztcbiAgICAgIF90aGlzLnJlc3BvbnNlID0gKHJlc3BvbnNlIHx8IHt9KS5yZXNwb25zZSB8fCByZXNwb25zZTtcbiAgICAgIF90aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgIHJldHVybiBfdGhpcztcbiAgIH1cblxuICAgcmV0dXJuIFJlc3BvbnNlRXJyb3I7XG59KEVycm9yKTtcblxuLyoqXG4gKiBSZXF1ZXN0YWJsZSB3cmFwcyB0aGUgbG9naWMgZm9yIG1ha2luZyBodHRwIHJlcXVlc3RzIHRvIHRoZSBBUElcbiAqL1xuXG5cbnZhciBSZXF1ZXN0YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgIC8qKlxuICAgICogRWl0aGVyIGEgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIG9yIGFuIG9hdXRoIHRva2VuIGZvciBHaXRodWJcbiAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFJlcXVlc3RhYmxlLmF1dGhcbiAgICAqIEBwcm9wIHtzdHJpbmd9IFt1c2VybmFtZV0gLSB0aGUgR2l0aHViIHVzZXJuYW1lXG4gICAgKiBAcHJvcCB7c3RyaW5nfSBbcGFzc3dvcmRdIC0gdGhlIHVzZXIncyBwYXNzd29yZFxuICAgICogQHByb3Age3Rva2VufSBbdG9rZW5dIC0gYW4gT0F1dGggdG9rZW5cbiAgICAqL1xuICAgLyoqXG4gICAgKiBJbml0aWFsaXplIHRoZSBodHRwIGludGVybmFscy5cbiAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gW2F1dGhdIC0gdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWIuIElmIGF1dGggaXNcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBwcm92aWRlZCByZXF1ZXN0IHdpbGwgYmUgbWFkZSB1bmF1dGhlbnRpY2F0ZWRcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW0FjY2VwdEhlYWRlcj12M10gLSB0aGUgYWNjZXB0IGhlYWRlciBmb3IgdGhlIHJlcXVlc3RzXG4gICAgKi9cbiAgIGZ1bmN0aW9uIFJlcXVlc3RhYmxlKGF1dGgsIGFwaUJhc2UsIEFjY2VwdEhlYWRlcikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3RhYmxlKTtcblxuICAgICAgdGhpcy5fX2FwaUJhc2UgPSBhcGlCYXNlIHx8ICdodHRwczovL2FwaS5naXRodWIuY29tJztcbiAgICAgIHRoaXMuX19hdXRoID0ge1xuICAgICAgICAgdG9rZW46IGF1dGgudG9rZW4sXG4gICAgICAgICB1c2VybmFtZTogYXV0aC51c2VybmFtZSxcbiAgICAgICAgIHBhc3N3b3JkOiBhdXRoLnBhc3N3b3JkXG4gICAgICB9O1xuICAgICAgdGhpcy5fX0FjY2VwdEhlYWRlciA9IEFjY2VwdEhlYWRlciB8fCAndjMnO1xuXG4gICAgICBpZiAoYXV0aC50b2tlbikge1xuICAgICAgICAgdGhpcy5fX2F1dGhvcml6YXRpb25IZWFkZXIgPSAndG9rZW4gJyArIGF1dGgudG9rZW47XG4gICAgICB9IGVsc2UgaWYgKGF1dGgudXNlcm5hbWUgJiYgYXV0aC5wYXNzd29yZCkge1xuICAgICAgICAgdGhpcy5fX2F1dGhvcml6YXRpb25IZWFkZXIgPSAnQmFzaWMgJyArIF9qc0Jhc2UuQmFzZTY0LmVuY29kZShhdXRoLnVzZXJuYW1lICsgJzonICsgYXV0aC5wYXNzd29yZCk7XG4gICAgICB9XG4gICB9XG5cbiAgIC8qKlxuICAgICogQ29tcHV0ZSB0aGUgVVJMIHRvIHVzZSB0byBtYWtlIGEgcmVxdWVzdC5cbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIGVpdGhlciBhIFVSTCByZWxhdGl2ZSB0byB0aGUgQVBJIGJhc2Ugb3IgYW4gYWJzb2x1dGUgVVJMXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gdGhlIFVSTCB0byB1c2VcbiAgICAqL1xuXG5cbiAgIF9jcmVhdGVDbGFzcyhSZXF1ZXN0YWJsZSwgW3tcbiAgICAgIGtleTogJ19fZ2V0VVJMJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfX2dldFVSTChwYXRoKSB7XG4gICAgICAgICB2YXIgdXJsID0gcGF0aDtcblxuICAgICAgICAgaWYgKHBhdGguaW5kZXhPZignLy8nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHVybCA9IHRoaXMuX19hcGlCYXNlICsgcGF0aDtcbiAgICAgICAgIH1cblxuICAgICAgICAgdmFyIG5ld0NhY2hlQnVzdGVyID0gJ3RpbWVzdGFtcD0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UoLyh0aW1lc3RhbXA9XFxkKykvLCBuZXdDYWNoZUJ1c3Rlcik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29tcHV0ZSB0aGUgaGVhZGVycyByZXF1aXJlZCBmb3IgYW4gQVBJIHJlcXVlc3QuXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByYXcgLSBpZiB0aGUgcmVxdWVzdCBzaG91bGQgYmUgdHJlYXRlZCBhcyBKU09OIG9yIGFzIGEgcmF3IHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBBY2NlcHRIZWFkZXIgLSB0aGUgYWNjZXB0IGhlYWRlciBmb3IgdGhlIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gLSB0aGUgaGVhZGVycyB0byB1c2UgaW4gdGhlIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdfX2dldFJlcXVlc3RIZWFkZXJzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfX2dldFJlcXVlc3RIZWFkZXJzKHJhdywgQWNjZXB0SGVhZGVyKSB7XG4gICAgICAgICB2YXIgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi4nICsgKEFjY2VwdEhlYWRlciB8fCB0aGlzLl9fQWNjZXB0SGVhZGVyKVxuICAgICAgICAgfTtcblxuICAgICAgICAgaWYgKHJhdykge1xuICAgICAgICAgICAgaGVhZGVycy5BY2NlcHQgKz0gJy5yYXcnO1xuICAgICAgICAgfVxuICAgICAgICAgaGVhZGVycy5BY2NlcHQgKz0gJytqc29uJztcblxuICAgICAgICAgaWYgKHRoaXMuX19hdXRob3JpemF0aW9uSGVhZGVyKSB7XG4gICAgICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSB0aGlzLl9fYXV0aG9yaXphdGlvbkhlYWRlcjtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciBBUEkgcmVxdWVzdHNcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdE9wdGlvbnM9e31dIC0gdGhlIGN1cnJlbnQgb3B0aW9ucyBmb3IgdGhlIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gLSB0aGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnX2dldE9wdGlvbnNXaXRoRGVmYXVsdHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRPcHRpb25zV2l0aERlZmF1bHRzKCkge1xuICAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICAgaWYgKCEocmVxdWVzdE9wdGlvbnMudmlzaWJpbGl0eSB8fCByZXF1ZXN0T3B0aW9ucy5hZmZpbGlhdGlvbikpIHtcbiAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnR5cGUgPSByZXF1ZXN0T3B0aW9ucy50eXBlIHx8ICdhbGwnO1xuICAgICAgICAgfVxuICAgICAgICAgcmVxdWVzdE9wdGlvbnMuc29ydCA9IHJlcXVlc3RPcHRpb25zLnNvcnQgfHwgJ3VwZGF0ZWQnO1xuICAgICAgICAgcmVxdWVzdE9wdGlvbnMucGVyX3BhZ2UgPSByZXF1ZXN0T3B0aW9ucy5wZXJfcGFnZSB8fCAnMTAwJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgICByZXR1cm4gcmVxdWVzdE9wdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogaWYgYSBgRGF0ZWAgaXMgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW4gSVNPIHN0cmluZ1xuICAgICAgICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIG9iamVjdCB0byBhdHRlbXB0IHRvIGNvZXJjZSBpbnRvIGFuIElTTyBkYXRlIHN0cmluZ1xuICAgICAgICogQHJldHVybiB7c3RyaW5nfSAtIHRoZSBJU08gcmVwcmVzZW50YXRpb24gb2YgYGRhdGVgIG9yIHdoYXRldmVyIHdhcyBwYXNzZWQgaW4gaWYgaXQgd2FzIG5vdCBhIGRhdGVcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdfZGF0ZVRvSVNPJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZGF0ZVRvSVNPKGRhdGUpIHtcbiAgICAgICAgIGlmIChkYXRlICYmIGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBkYXRlID0gZGF0ZS50b0lTT1N0cmluZygpO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIHJlc3VsdCBvZiB0aGUgQVBJIHJlcXVlc3QuXG4gICAgICAgKiBAY2FsbGJhY2sgUmVxdWVzdGFibGUuY2FsbGJhY2tcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuRXJyb3J9IGVycm9yIC0gdGhlIGVycm9yIHJldHVybmVkIGJ5IHRoZSBBUEkgb3IgYG51bGxgXG4gICAgICAgKiBAcGFyYW0geyhPYmplY3R8dHJ1ZSl9IHJlc3VsdCAtIHRoZSBkYXRhIHJldHVybmVkIGJ5IHRoZSBBUEkgb3IgYHRydWVgIGlmIHRoZSBBUEkgcmV0dXJucyBgMjA0IE5vIENvbnRlbnRgXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdCAtIHRoZSByYXcge0BsaW5rY29kZSBodHRwczovL2dpdGh1Yi5jb20vbXphYnJpc2tpZS9heGlvcyNyZXNwb25zZS1zY2hlbWEgUmVzcG9uc2V9XG4gICAgICAgKi9cbiAgICAgIC8qKlxuICAgICAgICogTWFrZSBhIHJlcXVlc3QuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIC0gdGhlIG1ldGhvZCBmb3IgdGhlIHJlcXVlc3QgKEdFVCwgUFVULCBQT1NULCBERUxFVEUpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIGZvciB0aGUgcmVxdWVzdFxuICAgICAgICogQHBhcmFtIHsqfSBbZGF0YV0gLSB0aGUgZGF0YSB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuIEZvciBIVFRQIG1ldGhvZHMgdGhhdCBkb24ndCBoYXZlIGEgYm9keSB0aGUgZGF0YVxuICAgICAgICogICAgICAgICAgICAgICAgICAgd2lsbCBiZSBzZW50IGFzIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB0aGUgY2FsbGJhY2sgZm9yIHRoZSByZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyYXc9ZmFsc2VdIC0gaWYgdGhlIHJlcXVlc3Qgc2hvdWxkIGJlIHNlbnQgYXMgcmF3LiBJZiB0aGlzIGlzIGEgZmFsc3kgdmFsdWUgdGhlbiB0aGVcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCB3aWxsIGJlIG1hZGUgYXMgSlNPTlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ19yZXF1ZXN0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVxdWVzdChtZXRob2QsIHBhdGgsIGRhdGEsIGNiLCByYXcpIHtcbiAgICAgICAgIHZhciB1cmwgPSB0aGlzLl9fZ2V0VVJMKHBhdGgpO1xuXG4gICAgICAgICB2YXIgQWNjZXB0SGVhZGVyID0gKGRhdGEgfHwge30pLkFjY2VwdEhlYWRlcjtcbiAgICAgICAgIGlmIChBY2NlcHRIZWFkZXIpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhLkFjY2VwdEhlYWRlcjtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBoZWFkZXJzID0gdGhpcy5fX2dldFJlcXVlc3RIZWFkZXJzKHJhdywgQWNjZXB0SGVhZGVyKTtcblxuICAgICAgICAgdmFyIHF1ZXJ5UGFyYW1zID0ge307XG5cbiAgICAgICAgIHZhciBzaG91bGRVc2VEYXRhQXNQYXJhbXMgPSBkYXRhICYmICh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZGF0YSkpID09PSAnb2JqZWN0JyAmJiBtZXRob2RIYXNOb0JvZHkobWV0aG9kKTtcbiAgICAgICAgIGlmIChzaG91bGRVc2VEYXRhQXNQYXJhbXMpIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zID0gZGF0YTtcbiAgICAgICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbXMsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiByYXcgPyAndGV4dCcgOiAnanNvbidcbiAgICAgICAgIH07XG5cbiAgICAgICAgIGxvZyhjb25maWcubWV0aG9kICsgJyB0byAnICsgY29uZmlnLnVybCk7XG4gICAgICAgICB2YXIgcmVxdWVzdFByb21pc2UgPSAoMCwgX2F4aW9zMi5kZWZhdWx0KShjb25maWcpLmNhdGNoKGNhbGxiYWNrRXJyb3JPclRocm93KGNiLCBwYXRoKSk7XG5cbiAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgcmVxdWVzdFByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICYmIE9iamVjdC5rZXlzKHJlc3BvbnNlLmRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vIFdoZW4gZGF0YSBoYXMgcmVzdWx0c1xuICAgICAgICAgICAgICAgICAgY2IobnVsbCwgcmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcubWV0aG9kICE9PSAnR0VUJyAmJiBPYmplY3Qua2V5cyhyZXNwb25zZS5kYXRhKS5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUcnVlIHdoZW4gc3VjY2Vzc2Z1bCBzdWJtaXQgYSByZXF1ZXN0IGFuZCByZWNlaXZlIGEgZW1wdHkgb2JqZWN0XG4gICAgICAgICAgICAgICAgICBjYihudWxsLCByZXNwb25zZS5zdGF0dXMgPCAzMDAsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjYihudWxsLCByZXNwb25zZS5kYXRhLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIHJlcXVlc3RQcm9taXNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE1ha2UgYSByZXF1ZXN0IHRvIGFuIGVuZHBvaW50IHRoZSByZXR1cm5zIDIwNCB3aGVuIHRydWUgYW5kIDQwNCB3aGVuIGZhbHNlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIHRvIHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gYW55IHF1ZXJ5IHBhcmFtZXRlcnMgZm9yIHRoZSByZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHRoZSBjYWxsYmFjayB0aGF0IHdpbGwgcmVjZWl2ZSBgdHJ1ZWAgb3IgYGZhbHNlYFxuICAgICAgICogQHBhcmFtIHttZXRob2R9IFttZXRob2Q9R0VUXSAtIEhUVFAgTWV0aG9kIHRvIHVzZVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ19yZXF1ZXN0MjA0b3I0MDQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXF1ZXN0MjA0b3I0MDQocGF0aCwgZGF0YSwgY2IpIHtcbiAgICAgICAgIHZhciBtZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICdHRVQnO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChtZXRob2QsIHBhdGgsIGRhdGEpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICBjYihudWxsLCB0cnVlLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgIH0sIGZ1bmN0aW9uIGZhaWx1cmUocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgICBjYihudWxsLCBmYWxzZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgIGNiKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IHJlc3BvbnNlO1xuICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTWFrZSBhIHJlcXVlc3QgYW5kIGZldGNoIGFsbCB0aGUgYXZhaWxhYmxlIGRhdGEuIEdpdGh1YiB3aWxsIHBhZ2luYXRlIHJlc3BvbnNlcyBzbyBmb3IgcXVlcmllc1xuICAgICAgICogdGhhdCBtaWdodCBzcGFuIG11bHRpcGxlIHBhZ2VzIHRoaXMgbWV0aG9kIGlzIHByZWZlcnJlZCB0byB7QGxpbmsgUmVxdWVzdGFibGUjcmVxdWVzdH1cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggdG8gcmVxdWVzdFxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgcXVlcnkgcGFyYW1ldGVycyB0byBpbmNsdWRlXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gdGhlIGZ1bmN0aW9uIHRvIHJlY2VpdmUgdGhlIGRhdGEuIFRoZSByZXR1cm5lZCBkYXRhIHdpbGwgYWx3YXlzIGJlIGFuIGFycmF5LlxuICAgICAgICogQHBhcmFtIHtPYmplY3RbXX0gcmVzdWx0cyAtIHRoZSBwYXJ0aWFsIHJlc3VsdHMuIFRoaXMgYXJndW1lbnQgaXMgaW50ZW5kZWQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBhIHByb21pc2Ugd2hpY2ggd2lsbCByZXNvbHZlIHdoZW4gYWxsIHBhZ2VzIGhhdmUgYmVlbiBmZXRjaGVkXG4gICAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIHdpbGwgYmUgZm9sZGVkIGludG8ge0BsaW5rIFJlcXVlc3RhYmxlI19yZXF1ZXN0fSBpbiB0aGUgMi4wIHJlbGVhc2UuXG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnX3JlcXVlc3RBbGxQYWdlcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlcXVlc3RBbGxQYWdlcyhwYXRoLCBvcHRpb25zLCBjYiwgcmVzdWx0cykge1xuICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgcGF0aCwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBfcmVzdWx0cztcblxuICAgICAgICAgICAgdmFyIHRoaXNHcm91cCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgIHRoaXNHcm91cCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgdGhpc0dyb3VwID0gcmVzcG9uc2UuZGF0YS5pdGVtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICdjYW5ub3QgZmlndXJlIG91dCBob3cgdG8gYXBwZW5kICcgKyByZXNwb25zZS5kYXRhICsgJyB0byB0aGUgcmVzdWx0IHNldCc7XG4gICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVzcG9uc2VFcnJvcihtZXNzYWdlLCBwYXRoLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoX3Jlc3VsdHMgPSByZXN1bHRzKS5wdXNoLmFwcGx5KF9yZXN1bHRzLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpc0dyb3VwKSk7XG5cbiAgICAgICAgICAgIHZhciBuZXh0VXJsID0gZ2V0TmV4dFBhZ2UocmVzcG9uc2UuaGVhZGVycy5saW5rKTtcbiAgICAgICAgICAgIGlmIChuZXh0VXJsKSB7XG4gICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIG9wdGlvbnMucGFnZSA9IHBhcnNlSW50KG5leHRVcmwubWF0Y2goLyhwYWdlPVswLTldKikvZykuc2hpZnQoKS5zcGxpdCgnPScpLnBvcCgpKTtcbiAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMucGFnZSAhPT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgICBsb2coJ2dldHRpbmcgbmV4dCBwYWdlOiAnICsgbmV4dFVybCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9yZXF1ZXN0QWxsUGFnZXMobmV4dFVybCwgb3B0aW9ucywgY2IsIHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdHMsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3VsdHM7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICB9KS5jYXRjaChjYWxsYmFja0Vycm9yT3JUaHJvdyhjYiwgcGF0aCkpO1xuICAgICAgfVxuICAgfV0pO1xuXG4gICByZXR1cm4gUmVxdWVzdGFibGU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVxdWVzdGFibGU7XG5cbi8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIC8vXG4vLyAgUHJpdmF0ZSBoZWxwZXIgZnVuY3Rpb25zICAvL1xuLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gLy9cbnZhciBNRVRIT0RTX1dJVEhfTk9fQk9EWSA9IFsnR0VUJywgJ0hFQUQnLCAnREVMRVRFJ107XG5mdW5jdGlvbiBtZXRob2RIYXNOb0JvZHkobWV0aG9kKSB7XG4gICByZXR1cm4gTUVUSE9EU19XSVRIX05PX0JPRFkuaW5kZXhPZihtZXRob2QpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dFBhZ2UoKSB7XG4gICB2YXIgbGlua3NIZWFkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuXG4gICB2YXIgbGlua3MgPSBsaW5rc0hlYWRlci5zcGxpdCgvXFxzKixcXHMqLyk7IC8vIHNwbGl0cyBhbmQgc3RyaXBzIHRoZSB1cmxzXG4gICByZXR1cm4gbGlua3MucmVkdWNlKGZ1bmN0aW9uIChuZXh0VXJsLCBsaW5rKSB7XG4gICAgICBpZiAobGluay5zZWFyY2goL3JlbD1cIm5leHRcIi8pICE9PSAtMSkge1xuICAgICAgICAgcmV0dXJuIChsaW5rLm1hdGNoKC88KC4qKT4vKSB8fCBbXSlbMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0VXJsO1xuICAgfSwgdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tFcnJvck9yVGhyb3coY2IsIHBhdGgpIHtcbiAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKG9iamVjdCkge1xuICAgICAgdmFyIGVycm9yID0gdm9pZCAwO1xuICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnY29uZmlnJykpIHtcbiAgICAgICAgIHZhciBfb2JqZWN0JHJlc3BvbnNlID0gb2JqZWN0LnJlc3BvbnNlLFxuICAgICAgICAgICAgIHN0YXR1cyA9IF9vYmplY3QkcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgIHN0YXR1c1RleHQgPSBfb2JqZWN0JHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgX29iamVjdCRjb25maWcgPSBvYmplY3QuY29uZmlnLFxuICAgICAgICAgICAgIG1ldGhvZCA9IF9vYmplY3QkY29uZmlnLm1ldGhvZCxcbiAgICAgICAgICAgICB1cmwgPSBfb2JqZWN0JGNvbmZpZy51cmw7XG5cbiAgICAgICAgIHZhciBtZXNzYWdlID0gc3RhdHVzICsgJyBlcnJvciBtYWtpbmcgcmVxdWVzdCAnICsgbWV0aG9kICsgJyAnICsgdXJsICsgJzogXCInICsgc3RhdHVzVGV4dCArICdcIic7XG4gICAgICAgICBlcnJvciA9IG5ldyBSZXNwb25zZUVycm9yKG1lc3NhZ2UsIHBhdGgsIG9iamVjdCk7XG4gICAgICAgICBsb2cobWVzc2FnZSArICcgJyArIEpTT04uc3RyaW5naWZ5KG9iamVjdC5kYXRhKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgZXJyb3IgPSBvYmplY3Q7XG4gICAgICB9XG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgIGxvZygnZ29pbmcgdG8gZXJyb3IgY2FsbGJhY2snKTtcbiAgICAgICAgIGNiKGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICBsb2coJ3Rocm93aW5nIGVycm9yJyk7XG4gICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsY1hWbGMzUmhZbXhsTG1weklsMHNJbTVoYldWeklqcGJJbXh2WnlJc0lsSmxjM0J2Ym5ObFJYSnliM0lpTENKdFpYTnpZV2RsSWl3aWNHRjBhQ0lzSW5KbGMzQnZibk5sSWl3aWNtVnhkV1Z6ZENJc0ltTnZibVpwWnlJc0luTjBZWFIxY3lJc0lrVnljbTl5SWl3aVVtVnhkV1Z6ZEdGaWJHVWlMQ0poZFhSb0lpd2lZWEJwUW1GelpTSXNJa0ZqWTJWd2RFaGxZV1JsY2lJc0lsOWZZWEJwUW1GelpTSXNJbDlmWVhWMGFDSXNJblJ2YTJWdUlpd2lkWE5sY201aGJXVWlMQ0p3WVhOemQyOXlaQ0lzSWw5ZlFXTmpaWEIwU0dWaFpHVnlJaXdpWDE5aGRYUm9iM0pwZW1GMGFXOXVTR1ZoWkdWeUlpd2lRbUZ6WlRZMElpd2laVzVqYjJSbElpd2lkWEpzSWl3aWFXNWtaWGhQWmlJc0ltNWxkME5oWTJobFFuVnpkR1Z5SWl3aVJHRjBaU0lzSW1kbGRGUnBiV1VpTENKeVpYQnNZV05sSWl3aWNtRjNJaXdpYUdWaFpHVnljeUlzSWtGalkyVndkQ0lzSWtGMWRHaHZjbWw2WVhScGIyNGlMQ0p5WlhGMVpYTjBUM0IwYVc5dWN5SXNJblpwYzJsaWFXeHBkSGtpTENKaFptWnBiR2xoZEdsdmJpSXNJblI1Y0dVaUxDSnpiM0owSWl3aWNHVnlYM0JoWjJVaUxDSmtZWFJsSWl3aWRHOUpVMDlUZEhKcGJtY2lMQ0p0WlhSb2IyUWlMQ0prWVhSaElpd2lZMklpTENKZlgyZGxkRlZTVENJc0lsOWZaMlYwVW1WeGRXVnpkRWhsWVdSbGNuTWlMQ0p4ZFdWeWVWQmhjbUZ0Y3lJc0luTm9iM1ZzWkZWelpVUmhkR0ZCYzFCaGNtRnRjeUlzSW0xbGRHaHZaRWhoYzA1dlFtOWtlU0lzSW5WdVpHVm1hVzVsWkNJc0luQmhjbUZ0Y3lJc0luSmxjM0J2Ym5ObFZIbHdaU0lzSW5KbGNYVmxjM1JRY205dGFYTmxJaXdpWTJGMFkyZ2lMQ0pqWVd4c1ltRmphMFZ5Y205eVQzSlVhSEp2ZHlJc0luUm9aVzRpTENKUFltcGxZM1FpTENKclpYbHpJaXdpYkdWdVozUm9JaXdpWDNKbGNYVmxjM1FpTENKemRXTmpaWE56SWl3aVptRnBiSFZ5WlNJc0ltOXdkR2x2Ym5NaUxDSnlaWE4xYkhSeklpd2lkR2hwYzBkeWIzVndJaXdpUVhKeVlYa2lMQ0pwZEdWdGN5SXNJbkIxYzJnaUxDSnVaWGgwVlhKc0lpd2laMlYwVG1WNGRGQmhaMlVpTENKc2FXNXJJaXdpY0dGblpTSXNJbkJoY25ObFNXNTBJaXdpYldGMFkyZ2lMQ0p6YUdsbWRDSXNJbk53YkdsMElpd2ljRzl3SWl3aVgzSmxjWFZsYzNSQmJHeFFZV2RsY3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSk5SVlJJVDBSVFgxZEpWRWhmVGs5ZlFrOUVXU0lzSW14cGJtdHpTR1ZoWkdWeUlpd2liR2x1YTNNaUxDSnlaV1IxWTJVaUxDSnpaV0Z5WTJnaUxDSm9ZVzVrYkdWeUlpd2liMkpxWldOMElpd2laWEp5YjNJaUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0luTjBZWFIxYzFSbGVIUWlMQ0pLVTA5T0lpd2ljM1J5YVc1bmFXWjVJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3UVVGUFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdPenM3T3pzN0syVkJWRUU3T3pzN096czdRVUZYUVN4SlFVRk5RU3hOUVVGTkxIRkNRVUZOTEdkQ1FVRk9MRU5CUVZvN08wRkJSVUU3T3pzN1NVRkhUVU1zWVRzN08wRkJRMGc3T3pzN096dEJRVTFCTERCQ1FVRlpReXhQUVVGYUxFVkJRWEZDUXl4SlFVRnlRaXhGUVVFeVFrTXNVVUZCTTBJc1JVRkJjVU03UVVGQlFUczdRVUZCUVN4blNVRkROVUpHTEU5QlJEUkNPenRCUVVWc1F5eFpRVUZMUXl4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFFTeFpRVUZMUlN4UFFVRk1MRWRCUVdWRUxGTkJRVk5GTEUxQlFYaENPMEZCUTBFc1dVRkJTMFlzVVVGQlRDeEhRVUZuUWl4RFFVRkRRU3haUVVGWkxFVkJRV0lzUlVGQmFVSkJMRkZCUVdwQ0xFbEJRVFpDUVN4UlFVRTNRenRCUVVOQkxGbEJRVXRITEUxQlFVd3NSMEZCWTBnc1UwRkJVMGNzVFVGQmRrSTdRVUZNYTBNN1FVRk5jRU03T3p0RlFXSjNRa01zU3pzN1FVRm5RalZDT3pzN096dEpRVWROUXl4WE8wRkJRMGc3T3pzN096czdRVUZQUVRzN096czdPenRCUVU5QkxIZENRVUZaUXl4SlFVRmFMRVZCUVd0Q1F5eFBRVUZzUWl4RlFVRXlRa01zV1VGQk0wSXNSVUZCZVVNN1FVRkJRVHM3UVVGRGRFTXNWMEZCUzBNc1UwRkJUQ3hIUVVGcFFrWXNWMEZCVnl4M1FrRkJOVUk3UVVGRFFTeFhRVUZMUnl4TlFVRk1MRWRCUVdNN1FVRkRXRU1zWjBKQlFVOU1MRXRCUVV0TExFdEJSRVE3UVVGRldFTXNiVUpCUVZWT0xFdEJRVXROTEZGQlJrbzdRVUZIV0VNc2JVSkJRVlZRTEV0QlFVdFBPMEZCU0Vvc1QwRkJaRHRCUVV0QkxGZEJRVXRETEdOQlFVd3NSMEZCYzBKT0xHZENRVUZuUWl4SlFVRjBRenM3UVVGRlFTeFZRVUZKUml4TFFVRkxTeXhMUVVGVUxFVkJRV2RDTzBGQlEySXNZMEZCUzBrc2NVSkJRVXdzUjBGQk5rSXNWMEZCVjFRc1MwRkJTMHNzUzBGQk4wTTdRVUZEUml4UFFVWkVMRTFCUlU4c1NVRkJTVXdzUzBGQlMwMHNVVUZCVEN4SlFVRnBRazRzUzBGQlMwOHNVVUZCTVVJc1JVRkJiME03UVVGRGVFTXNZMEZCUzBVc2NVSkJRVXdzUjBGQk5rSXNWMEZCVjBNc1pVRkJUME1zVFVGQlVDeERRVUZqV0N4TFFVRkxUU3hSUVVGTUxFZEJRV2RDTEVkQlFXaENMRWRCUVhOQ1RpeExRVUZMVHl4UlFVRjZReXhEUVVGNFF6dEJRVU5HTzBGQlEwZzdPMEZCUlVRN096czdPenM3T3pzN0swSkJUVk5rTEVrc1JVRkJUVHRCUVVOYUxHRkJRVWx0UWl4TlFVRk5ia0lzU1VGQlZqczdRVUZGUVN4aFFVRkpRU3hMUVVGTGIwSXNUMEZCVEN4RFFVRmhMRWxCUVdJc1RVRkJkVUlzUTBGQlF5eERRVUUxUWl4RlFVRXJRanRCUVVNMVFrUXNhMEpCUVUwc1MwRkJTMVFzVTBGQlRDeEhRVUZwUWxZc1NVRkJka0k3UVVGRFJqczdRVUZGUkN4aFFVRkpjVUlzYVVKQlFXbENMR1ZCUVdVc1NVRkJTVU1zU1VGQlNpeEhRVUZYUXl4UFFVRllMRVZCUVhCRE8wRkJRMEVzWjBKQlFVOUtMRWxCUVVsTExFOUJRVW9zUTBGQldTeHBRa0ZCV2l4RlFVRXJRa2dzWTBGQkwwSXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096QkRRVTl2UWtrc1J5eEZRVUZMYUVJc1dTeEZRVUZqTzBGQlEzQkRMR0ZCUVVscFFpeFZRVUZWTzBGQlExZ3NORUpCUVdkQ0xHZERRVVJNTzBGQlJWZ3NjMEpCUVZVc05rSkJRVFpDYWtJc1owSkJRV2RDTEV0QlFVdE5MR05CUVd4RU8wRkJSa01zVlVGQlpEczdRVUZMUVN4aFFVRkpWU3hIUVVGS0xFVkJRVk03UVVGRFRrTXNiMEpCUVZGRExFMUJRVklzU1VGQmEwSXNUVUZCYkVJN1FVRkRSanRCUVVORVJDeHBRa0ZCVVVNc1RVRkJVaXhKUVVGclFpeFBRVUZzUWpzN1FVRkZRU3hoUVVGSkxFdEJRVXRZTEhGQ1FVRlVMRVZCUVdkRE8wRkJRemRDVlN4dlFrRkJVVVVzWVVGQlVpeEhRVUYzUWl4TFFVRkxXaXh4UWtGQk4wSTdRVUZEUmpzN1FVRkZSQ3huUWtGQlQxVXNUMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN1owUkJUVFpETzBGQlFVRXNZVUZCY2tKSExHTkJRWEZDTEhWRlFVRktMRVZCUVVrN08wRkJRekZETEdGQlFVa3NSVUZCUlVFc1pVRkJaVU1zVlVGQlppeEpRVUUyUWtRc1pVRkJaVVVzVjBGQk9VTXNRMEZCU2l4RlFVRm5SVHRCUVVNM1JFWXNNa0pCUVdWSExFbEJRV1lzUjBGQmMwSklMR1ZCUVdWSExFbEJRV1lzU1VGQmRVSXNTMEZCTjBNN1FVRkRSanRCUVVORVNDeDNRa0ZCWlVrc1NVRkJaaXhIUVVGelFrb3NaVUZCWlVrc1NVRkJaaXhKUVVGMVFpeFRRVUUzUXp0QlFVTkJTaXgzUWtGQlpVc3NVVUZCWml4SFFVRXdRa3dzWlVGQlpVc3NVVUZCWml4SlFVRXlRaXhMUVVGeVJDeERRVXd3UXl4RFFVdHJRanM3UVVGRk5VUXNaMEpCUVU5TUxHTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3YVVOQlMxZE5MRWtzUlVGQlRUdEJRVU5rTEdGQlFVbEJMRkZCUVZOQkxHZENRVUZuUW1Jc1NVRkJOMElzUlVGQmIwTTdRVUZEYWtOaExHMUNRVUZQUVN4TFFVRkxReXhYUVVGTUxFVkJRVkE3UVVGRFJqczdRVUZGUkN4blFrRkJUMFFzU1VGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN08wRkJUMEU3T3pzN096czdPenM3T3pzN095dENRVmRUUlN4TkxFVkJRVkZ5UXl4SkxFVkJRVTF6UXl4SkxFVkJRVTFETEVVc1JVRkJTV1FzUnl4RlFVRkxPMEZCUTI1RExHRkJRVTFPTEUxQlFVMHNTMEZCUzNGQ0xGRkJRVXdzUTBGQlkzaERMRWxCUVdRc1EwRkJXanM3UVVGRlFTeGhRVUZOVXl4bFFVRmxMRU5CUVVNMlFpeFJRVUZSTEVWQlFWUXNSVUZCWVRkQ0xGbEJRV3hETzBGQlEwRXNZVUZCU1VFc1dVRkJTaXhGUVVGclFqdEJRVU5tTEcxQ1FVRlBOa0lzUzBGQlN6ZENMRmxCUVZvN1FVRkRSanRCUVVORUxHRkJRVTFwUWl4VlFVRlZMRXRCUVV0bExHMUNRVUZNTEVOQlFYbENhRUlzUjBGQmVrSXNSVUZCT0VKb1FpeFpRVUU1UWl4RFFVRm9RanM3UVVGRlFTeGhRVUZKYVVNc1kwRkJZeXhGUVVGc1FqczdRVUZGUVN4aFFVRk5ReXgzUWtGQmQwSk1MRkZCUVZNc1VVRkJUMEVzU1VGQlVDeDVRMEZCVDBFc1NVRkJVQ3hQUVVGblFpeFJRVUY2UWl4SlFVRnpRMDBzWjBKQlFXZENVQ3hOUVVGb1FpeERRVUZ3UlR0QlFVTkJMR0ZCUVVsTkxIRkNRVUZLTEVWQlFUSkNPMEZCUTNoQ1JDd3dRa0ZCWTBvc1NVRkJaRHRCUVVOQlFTeHRRa0ZCVDA4c1UwRkJVRHRCUVVOR096dEJRVVZFTEdGQlFVMHhReXhUUVVGVE8wRkJRMXBuUWl4cFFrRkJTMEVzUjBGRVR6dEJRVVZhYTBJc2IwSkJRVkZCTEUxQlJrazdRVUZIV2xnc2NVSkJRVk5CTEU5QlNFYzdRVUZKV205Q0xHOUNRVUZSU2l4WFFVcEpPMEZCUzFwS0xHdENRVUZOUVN4SlFVeE5PMEZCVFZwVExEQkNRVUZqZEVJc1RVRkJUU3hOUVVGT0xFZEJRV1U3UVVGT2FrSXNWVUZCWmpzN1FVRlRRVFZDTEdGQlFVOU5MRTlCUVU5clF5eE5RVUZrTEZsQlFUSkNiRU1zVDBGQlQyZENMRWRCUVd4RE8wRkJRMEVzWVVGQlRUWkNMR2xDUVVGcFFpeHhRa0ZCVFRkRExFMUJRVTRzUlVGQll6aERMRXRCUVdRc1EwRkJiMEpETEhGQ1FVRnhRbGdzUlVGQmNrSXNSVUZCZVVKMlF5eEpRVUY2UWl4RFFVRndRaXhEUVVGMlFqczdRVUZGUVN4aFFVRkpkVU1zUlVGQlNpeEZRVUZSTzBGQlEweFRMREpDUVVGbFJ5eEpRVUZtTEVOQlFXOUNMRlZCUVVOc1JDeFJRVUZFTEVWQlFXTTdRVUZETDBJc2JVSkJRVWxCTEZOQlFWTnhReXhKUVVGVUxFbEJRV2xDWXl4UFFVRlBReXhKUVVGUUxFTkJRVmx3UkN4VFFVRlRjVU1zU1VGQmNrSXNSVUZCTWtKblFpeE5RVUV6UWl4SFFVRnZReXhEUVVGNlJDeEZRVUUwUkR0QlFVTjZSRHRCUVVOQlppeHhRa0ZCUnl4SlFVRklMRVZCUVZOMFF5eFRRVUZUY1VNc1NVRkJiRUlzUlVGQmQwSnlReXhSUVVGNFFqdEJRVU5HTEdkQ1FVaEVMRTFCUjA4c1NVRkJTVVVzVDBGQlQydERMRTFCUVZBc1MwRkJhMElzUzBGQmJFSXNTVUZCTWtKbExFOUJRVTlETEVsQlFWQXNRMEZCV1hCRUxGTkJRVk54UXl4SlFVRnlRaXhGUVVFeVFtZENMRTFCUVROQ0xFZEJRVzlETEVOQlFXNUZMRVZCUVhORk8wRkJRekZGTzBGQlEwRm1MSEZDUVVGSExFbEJRVWdzUlVGQlZYUkRMRk5CUVZOSExFMUJRVlFzUjBGQmEwSXNSMEZCTlVJc1JVRkJhME5JTEZGQlFXeERPMEZCUTBZc1owSkJTRTBzVFVGSFFUdEJRVU5LYzBNc2NVSkJRVWNzU1VGQlNDeEZRVUZUZEVNc1UwRkJVM0ZETEVsQlFXeENMRVZCUVhkQ2NrTXNVVUZCZUVJN1FVRkRSanRCUVVOSUxHRkJWa1E3UVVGWFJqczdRVUZGUkN4blFrRkJUeXRETEdOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3ZFVOQlVXbENhRVFzU1N4RlFVRk5jME1zU1N4RlFVRk5ReXhGTEVWQlFXOUNPMEZCUVVFc1lVRkJhRUpHTEUxQlFXZENMSFZGUVVGUUxFdEJRVTg3TzBGQlF6bERMR2RDUVVGUExFdEJRVXRyUWl4UlFVRk1MRU5CUVdOc1FpeE5RVUZrTEVWQlFYTkNja01zU1VGQmRFSXNSVUZCTkVKelF5eEpRVUUxUWl4RlFVTklZU3hKUVVSSExFTkJRMFVzVTBGQlUwc3NUMEZCVkN4RFFVRnBRblpFTEZGQlFXcENMRVZCUVRKQ08wRkJRemxDTEdkQ1FVRkpjME1zUlVGQlNpeEZRVUZSTzBGQlEweEJMR3RDUVVGSExFbEJRVWdzUlVGQlV5eEpRVUZVTEVWQlFXVjBReXhSUVVGbU8wRkJRMFk3UVVGRFJDeHRRa0ZCVHl4SlFVRlFPMEZCUTBZc1ZVRk9SeXhGUVUxRUxGTkJRVk4zUkN4UFFVRlVMRU5CUVdsQ2VFUXNVVUZCYWtJc1JVRkJNa0k3UVVGRE0wSXNaMEpCUVVsQkxGTkJRVk5CTEZGQlFWUXNRMEZCYTBKSExFMUJRV3hDTEV0QlFUWkNMRWRCUVdwRExFVkJRWE5ETzBGQlEyNURMRzFDUVVGSmJVTXNSVUZCU2l4RlFVRlJPMEZCUTB4QkxIRkNRVUZITEVsQlFVZ3NSVUZCVXl4TFFVRlVMRVZCUVdkQ2RFTXNVVUZCYUVJN1FVRkRSanRCUVVORUxITkNRVUZQTEV0QlFWQTdRVUZEUmpzN1FVRkZSQ3huUWtGQlNYTkRMRVZCUVVvc1JVRkJVVHRCUVVOTVFTeHJRa0ZCUjNSRExGRkJRVWc3UVVGRFJqdEJRVU5FTEd0Q1FVRk5RU3hSUVVGT08wRkJRMFlzVlVGc1FrY3NRMEZCVUR0QlFXMUNSanM3UVVGRlJEczdPenM3T3pzN096czdPenQxUTBGVmFVSkVMRWtzUlVGQlRUQkVMRThzUlVGQlUyNUNMRVVzUlVGQlNXOUNMRThzUlVGQlV6dEJRVUZCT3p0QlFVTXhRMEVzYlVKQlFWVkJMRmRCUVZjc1JVRkJja0k3TzBGQlJVRXNaMEpCUVU4c1MwRkJTMG9zVVVGQlRDeERRVUZqTEV0QlFXUXNSVUZCY1VKMlJDeEpRVUZ5UWl4RlFVRXlRakJFTEU5QlFUTkNMRVZCUTBoUUxFbEJSRWNzUTBGRFJTeFZRVUZEYkVRc1VVRkJSQ3hGUVVGak8wRkJRVUU3TzBGQlEycENMR2RDUVVGSk1rUXNhMEpCUVVvN1FVRkRRU3huUWtGQlNUTkVMRk5CUVZOeFF5eEpRVUZVTEZsQlFYbENkVUlzUzBGQk4wSXNSVUZCYjBNN1FVRkRha05FTERKQ1FVRlpNMFFzVTBGQlUzRkRMRWxCUVhKQ08wRkJRMFlzWVVGR1JDeE5RVVZQTEVsQlFVbHlReXhUUVVGVGNVTXNTVUZCVkN4RFFVRmpkMElzUzBGQlpDeFpRVUVyUWtRc1MwRkJia01zUlVGQk1FTTdRVUZET1VORUxESkNRVUZaTTBRc1UwRkJVM0ZETEVsQlFWUXNRMEZCWTNkQ0xFdEJRVEZDTzBGQlEwWXNZVUZHVFN4TlFVVkJPMEZCUTBvc2JVSkJRVWt2UkN3clEwRkJOa05GTEZOQlFWTnhReXhKUVVGMFJDeDFRa0ZCU2p0QlFVTkJMSEZDUVVGTkxFbEJRVWw0UXl4aFFVRktMRU5CUVd0Q1F5eFBRVUZzUWl4RlFVRXlRa01zU1VGQk0wSXNSVUZCYVVORExGRkJRV3BETEVOQlFVNDdRVUZEUmp0QlFVTkVMR2xEUVVGUk9FUXNTVUZCVWl4dlEwRkJaMEpJTEZOQlFXaENPenRCUVVWQkxHZENRVUZOU1N4VlFVRlZReXhaUVVGWmFFVXNVMEZCVTNsQ0xFOUJRVlFzUTBGQmFVSjNReXhKUVVFM1FpeERRVUZvUWp0QlFVTkJMR2RDUVVGSFJpeFBRVUZJTEVWQlFWazdRVUZEVkN4dFFrRkJTU3hEUVVGRFRpeFBRVUZNTEVWQlFXTTdRVUZEV0VFc05FSkJRVlVzUlVGQlZqdEJRVU5HTzBGQlEwUkJMSFZDUVVGUlV5eEpRVUZTTEVkQlFXVkRMRk5CUTJKS0xGRkJRVkZMTEV0QlFWSXNRMEZCWXl4blFrRkJaQ3hGUVVOSFF5eExRVVJJTEVkQlJVZERMRXRCUmtnc1EwRkZVeXhIUVVaVUxFVkJSMGRETEVkQlNFZ3NSVUZFWVN4RFFVRm1PMEZCVFVFc2JVSkJRVWtzUlVGQlJXUXNWMEZCVnl4UFFVRlBRU3hSUVVGUlV5eEpRVUZtTEV0QlFYZENMRkZCUVhKRExFTkJRVW9zUlVGQmIwUTdRVUZEYWtSMFJTdzRRMEZCTUVKdFJTeFBRVUV4UWp0QlFVTkJMSGxDUVVGUExFOUJRVXRUTEdkQ1FVRk1MRU5CUVhOQ1ZDeFBRVUYwUWl4RlFVRXJRazRzVDBGQkwwSXNSVUZCZDBOdVFpeEZRVUY0UXl4RlFVRTBRMjlDTEU5QlFUVkRMRU5CUVZBN1FVRkRSanRCUVVOSU96dEJRVVZFTEdkQ1FVRkpjRUlzUlVGQlNpeEZRVUZSTzBGQlEweEJMR3RDUVVGSExFbEJRVWdzUlVGQlUyOUNMRTlCUVZRc1JVRkJhMEl4UkN4UlFVRnNRanRCUVVOR096dEJRVVZFUVN4eFFrRkJVM0ZETEVsQlFWUXNSMEZCWjBKeFFpeFBRVUZvUWp0QlFVTkJMRzFDUVVGUE1VUXNVVUZCVUR0QlFVTkdMRlZCY0VOSExFVkJiME5FWjBRc1MwRndRME1zUTBGdlEwdERMSEZDUVVGeFFsZ3NSVUZCY2tJc1JVRkJlVUoyUXl4SlFVRjZRaXhEUVhCRFRDeERRVUZRTzBGQmNVTkdPenM3T3pzN1FVRkhTakJGTEU5QlFVOURMRTlCUVZBc1IwRkJhVUp5UlN4WFFVRnFRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRk5jMFVzZFVKQlFYVkNMRU5CUVVNc1MwRkJSQ3hGUVVGUkxFMUJRVklzUlVGQlowSXNVVUZCYUVJc1EwRkJOMEk3UVVGRFFTeFRRVUZUYUVNc1pVRkJWQ3hEUVVGNVFsQXNUVUZCZWtJc1JVRkJhVU03UVVGRE9VSXNWVUZCVDNWRExIRkNRVUZ4UW5oRUxFOUJRWEpDTEVOQlFUWkNhVUlzVFVGQk4wSXNUVUZCZVVNc1EwRkJReXhEUVVGcVJEdEJRVU5HT3p0QlFVVkVMRk5CUVZNMFFpeFhRVUZVTEVkQlFYVkRPMEZCUVVFc1QwRkJiRUpaTEZkQlFXdENMSFZGUVVGS0xFVkJRVWs3TzBGQlEzQkRMRTlCUVUxRExGRkJRVkZFTEZsQlFWbE9MRXRCUVZvc1EwRkJhMElzVTBGQmJFSXNRMEZCWkN4RFFVUnZReXhEUVVOUk8wRkJRelZETEZWQlFVOVBMRTFCUVUxRExFMUJRVTRzUTBGQllTeFZRVUZUWml4UFFVRlVMRVZCUVd0Q1JTeEpRVUZzUWl4RlFVRjNRanRCUVVONlF5eFZRVUZKUVN4TFFVRkxZeXhOUVVGTUxFTkJRVmtzV1VGQldpeE5RVUU0UWl4RFFVRkRMRU5CUVc1RExFVkJRWE5ETzBGQlEyNURMR2RDUVVGUExFTkJRVU5rTEV0QlFVdEhMRXRCUVV3c1EwRkJWeXhSUVVGWUxFdEJRWGRDTEVWQlFYcENMRVZCUVRaQ0xFTkJRVGRDTEVOQlFWQTdRVUZEUmpzN1FVRkZSQ3hoUVVGUFRDeFBRVUZRTzBGQlEwWXNTVUZPVFN4RlFVMUtia0lzVTBGT1NTeERRVUZRTzBGQlQwWTdPMEZCUlVRc1UwRkJVMHNzYjBKQlFWUXNRMEZCT0VKWUxFVkJRVGxDTEVWQlFXdERka01zU1VGQmJFTXNSVUZCZDBNN1FVRkRja01zVlVGQlR5eFRRVUZUYVVZc1QwRkJWQ3hEUVVGcFFrTXNUVUZCYWtJc1JVRkJlVUk3UVVGRE4wSXNWVUZCU1VNc1kwRkJTanRCUVVOQkxGVkJRVWxFTEU5QlFVOUZMR05CUVZBc1EwRkJjMElzVVVGQmRFSXNRMEZCU2l4RlFVRnhRenRCUVVGQkxHZERRVU00UWtZc1RVRkVPVUlzUTBGRE0wSnFSaXhSUVVReVFqdEJRVUZCTEdGQlEyaENSeXhOUVVSblFpeHZRa0ZEYUVKQkxFMUJSR2RDTzBGQlFVRXNZVUZEVW1sR0xGVkJSRkVzYjBKQlExSkJMRlZCUkZFN1FVRkJRU3c0UWtGRE9FSklMRTFCUkRsQ0xFTkJRMHN2UlN4TlFVUk1PMEZCUVVFc1lVRkRZMnRETEUxQlJHUXNhMEpCUTJOQkxFMUJSR1E3UVVGQlFTeGhRVU56UW14Q0xFZEJSSFJDTEd0Q1FVTnpRa0VzUjBGRWRFSTdPMEZCUld4RExHRkJRVWx3UWl4VlFVRmpTeXhOUVVGa0xEaENRVUUyUTJsRExFMUJRVGRETEZOQlFYVkViRUlzUjBGQmRrUXNWMEZCWjBWclJTeFZRVUZvUlN4TlFVRktPMEZCUTBGR0xHbENRVUZSTEVsQlFVbHlSaXhoUVVGS0xFTkJRV3RDUXl4UFFVRnNRaXhGUVVFeVFrTXNTVUZCTTBJc1JVRkJhVU5yUml4TlFVRnFReXhEUVVGU08wRkJRMEZ5Uml4aFFVRlBSU3hQUVVGUUxGTkJRV3RDZFVZc1MwRkJTME1zVTBGQlRDeERRVUZsVEN4UFFVRlBOVU1zU1VGQmRFSXNRMEZCYkVJN1FVRkRSaXhQUVV4RUxFMUJTMDg3UVVGRFNqWkRMR2xDUVVGUlJDeE5RVUZTTzBGQlEwWTdRVUZEUkN4VlFVRkpNME1zUlVGQlNpeEZRVUZSTzBGQlEwd3hReXhoUVVGSkxIbENRVUZLTzBGQlEwRXdReXhaUVVGSE5FTXNTMEZCU0R0QlFVTkdMRTlCU0VRc1RVRkhUenRCUVVOS2RFWXNZVUZCU1N4blFrRkJTanRCUVVOQkxHVkJRVTF6Uml4TFFVRk9PMEZCUTBZN1FVRkRTQ3hKUVdwQ1JEdEJRV3RDUmlJc0ltWnBiR1VpT2lKU1pYRjFaWE4wWVdKc1pTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUUdacGJHVmNiaUFxSUVCamIzQjVjbWxuYUhRZ0lESXdNVFlnV1dGb2IyOGdTVzVqTGx4dUlDb2dRR3hwWTJWdWMyVWdJQ0FnVEdsalpXNXpaV1FnZFc1a1pYSWdlMEJzYVc1cklHaDBkSEJ6T2k4dmMzQmtlQzV2Y21jdmJHbGpaVzV6WlhNdlFsTkVMVE10UTJ4aGRYTmxMVU5zWldGeUxtaDBiV3dnUWxORUxUTXRRMnhoZFhObExVTnNaV0Z5ZlM1Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUVkcGRHaDFZaTVxY3lCcGN5Qm1jbVZsYkhrZ1pHbHpkSEpwWW5WMFlXSnNaUzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdZWGhwYjNNZ1puSnZiU0FuWVhocGIzTW5PMXh1YVcxd2IzSjBJR1JsWW5WbklHWnliMjBnSjJSbFluVm5KenRjYm1sdGNHOXlkQ0I3UW1GelpUWTBmU0JtY205dElDZHFjeTFpWVhObE5qUW5PMXh1WEc1amIyNXpkQ0JzYjJjZ1BTQmtaV0oxWnlnbloybDBhSFZpT25KbGNYVmxjM1FuS1R0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWlhKeWIzSWdjM1J5ZFdOMGRYSmxJSEpsZEhWeWJtVmtJSGRvWlc0Z1lTQnVaWFIzYjNKcklHTmhiR3dnWm1GcGJITmNiaUFxTDF4dVkyeGhjM01nVW1WemNHOXVjMlZGY25KdmNpQmxlSFJsYm1SeklFVnljbTl5SUh0Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTI5dWMzUnlkV04wSUdFZ2JtVjNJRkpsYzNCdmJuTmxSWEp5YjNKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J0WlhOellXZGxJQzBnWVc0Z2JXVnpjMkZuWlNCMGJ5QnlaWFIxY200Z2FXNXpkR1ZoWkNCdlppQjBhR1VnZEdobElHUmxabUYxYkhRZ1pYSnliM0lnYldWemMyRm5aVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQmhkR2dnTFNCMGFHVWdjbVZ4ZFdWemRHVmtJSEJoZEdoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J5WlhOd2IyNXpaU0F0SUhSb1pTQnZZbXBsWTNRZ2NtVjBkWEp1WldRZ1lua2dRWGhwYjNOY2JpQWdJQ0FxTDF4dUlDQWdZMjl1YzNSeWRXTjBiM0lvYldWemMyRm5aU3dnY0dGMGFDd2djbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJSE4xY0dWeUtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2RHaHBjeTV3WVhSb0lEMGdjR0YwYUR0Y2JpQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRDQTlJSEpsYzNCdmJuTmxMbU52Ym1acFp6dGNiaUFnSUNBZ0lIUm9hWE11Y21WemNHOXVjMlVnUFNBb2NtVnpjRzl1YzJVZ2ZId2dlMzBwTG5KbGMzQnZibk5sSUh4OElISmxjM0J2Ym5ObE8xeHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMGRYTWdQU0J5WlhOd2IyNXpaUzV6ZEdGMGRYTTdYRzRnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nVW1WeGRXVnpkR0ZpYkdVZ2QzSmhjSE1nZEdobElHeHZaMmxqSUdadmNpQnRZV3RwYm1jZ2FIUjBjQ0J5WlhGMVpYTjBjeUIwYnlCMGFHVWdRVkJKWEc0Z0tpOWNibU5zWVhOeklGSmxjWFZsYzNSaFlteGxJSHRjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSV2wwYUdWeUlHRWdkWE5sY201aGJXVWdZVzVrSUhCaGMzTjNiM0prSUc5eUlHRnVJRzloZFhSb0lIUnZhMlZ1SUdadmNpQkhhWFJvZFdKY2JpQWdJQ0FxSUVCMGVYQmxaR1ZtSUh0UFltcGxZM1I5SUZKbGNYVmxjM1JoWW14bExtRjFkR2hjYmlBZ0lDQXFJRUJ3Y205d0lIdHpkSEpwYm1kOUlGdDFjMlZ5Ym1GdFpWMGdMU0IwYUdVZ1IybDBhSFZpSUhWelpYSnVZVzFsWEc0Z0lDQWdLaUJBY0hKdmNDQjdjM1J5YVc1bmZTQmJjR0Z6YzNkdmNtUmRJQzBnZEdobElIVnpaWEluY3lCd1lYTnpkMjl5WkZ4dUlDQWdJQ29nUUhCeWIzQWdlM1J2YTJWdWZTQmJkRzlyWlc1ZElDMGdZVzRnVDBGMWRHZ2dkRzlyWlc1Y2JpQWdJQ0FxTDF4dUlDQWdMeW9xWEc0Z0lDQWdLaUJKYm1sMGFXRnNhWHBsSUhSb1pTQm9kSFJ3SUdsdWRHVnlibUZzY3k1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVlYVjBhSDBnVzJGMWRHaGRJQzBnZEdobElHTnlaV1JsYm5ScFlXeHpJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSb2RXSXVJRWxtSUdGMWRHZ2dhWE5jYmlBZ0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZkQ0J3Y205MmFXUmxaQ0J5WlhGMVpYTjBJSGRwYkd3Z1ltVWdiV0ZrWlNCMWJtRjFkR2hsYm5ScFkyRjBaV1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZWEJwUW1GelpUMW9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0WFNBdElIUm9aU0JpWVhObElFZHBkR2gxWWlCQlVFa2dWVkpNWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMEZqWTJWd2RFaGxZV1JsY2oxMk0xMGdMU0IwYUdVZ1lXTmpaWEIwSUdobFlXUmxjaUJtYjNJZ2RHaGxJSEpsY1hWbGMzUnpYRzRnSUNBZ0tpOWNiaUFnSUdOdmJuTjBjblZqZEc5eUtHRjFkR2dzSUdGd2FVSmhjMlVzSUVGalkyVndkRWhsWVdSbGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlgyRndhVUpoYzJVZ1BTQmhjR2xDWVhObElIeDhJQ2RvZEhSd2N6b3ZMMkZ3YVM1bmFYUm9kV0l1WTI5dEp6dGNiaUFnSUNBZ0lIUm9hWE11WDE5aGRYUm9JRDBnZTF4dUlDQWdJQ0FnSUNBZ2RHOXJaVzQ2SUdGMWRHZ3VkRzlyWlc0c1hHNGdJQ0FnSUNBZ0lDQjFjMlZ5Ym1GdFpUb2dZWFYwYUM1MWMyVnlibUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lIQmhjM04zYjNKa09pQmhkWFJvTG5CaGMzTjNiM0prTEZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUhSb2FYTXVYMTlCWTJObGNIUklaV0ZrWlhJZ1BTQkJZMk5sY0hSSVpXRmtaWElnZkh3Z0ozWXpKenRjYmx4dUlDQWdJQ0FnYVdZZ0tHRjFkR2d1ZEc5clpXNHBJSHRjYmlBZ0lDQWdJQ0FnSUhSb2FYTXVYMTloZFhSb2IzSnBlbUYwYVc5dVNHVmhaR1Z5SUQwZ0ozUnZhMlZ1SUNjZ0t5QmhkWFJvTG5SdmEyVnVPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hoZFhSb0xuVnpaWEp1WVcxbElDWW1JR0YxZEdndWNHRnpjM2R2Y21RcElIdGNiaUFnSUNBZ0lDQWdJSFJvYVhNdVgxOWhkWFJvYjNKcGVtRjBhVzl1U0dWaFpHVnlJRDBnSjBKaGMybGpJQ2NnS3lCQ1lYTmxOalF1Wlc1amIyUmxLR0YxZEdndWRYTmxjbTVoYldVZ0t5QW5PaWNnS3lCaGRYUm9MbkJoYzNOM2IzSmtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRiMjF3ZFhSbElIUm9aU0JWVWt3Z2RHOGdkWE5sSUhSdklHMWhhMlVnWVNCeVpYRjFaWE4wTGx4dUlDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQndZWFJvSUMwZ1pXbDBhR1Z5SUdFZ1ZWSk1JSEpsYkdGMGFYWmxJSFJ2SUhSb1pTQkJVRWtnWW1GelpTQnZjaUJoYmlCaFluTnZiSFYwWlNCVlVreGNiaUFnSUNBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ0xTQjBhR1VnVlZKTUlIUnZJSFZ6WlZ4dUlDQWdJQ292WEc0Z0lDQmZYMmRsZEZWU1RDaHdZWFJvS1NCN1hHNGdJQ0FnSUNCc1pYUWdkWEpzSUQwZ2NHRjBhRHRjYmx4dUlDQWdJQ0FnYVdZZ0tIQmhkR2d1YVc1a1pYaFBaaWduTHk4bktTQTlQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJSFZ5YkNBOUlIUm9hWE11WDE5aGNHbENZWE5sSUNzZ2NHRjBhRHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYkdWMElHNWxkME5oWTJobFFuVnpkR1Z5SUQwZ0ozUnBiV1Z6ZEdGdGNEMG5JQ3NnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFhKc0xuSmxjR3hoWTJVb0x5aDBhVzFsYzNSaGJYQTlYRnhrS3lrdkxDQnVaWGREWVdOb1pVSjFjM1JsY2lrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTI5dGNIVjBaU0IwYUdVZ2FHVmhaR1Z5Y3lCeVpYRjFhWEpsWkNCbWIzSWdZVzRnUVZCSklISmxjWFZsYzNRdVhHNGdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0J5WVhjZ0xTQnBaaUIwYUdVZ2NtVnhkV1Z6ZENCemFHOTFiR1FnWW1VZ2RISmxZWFJsWkNCaGN5QktVMDlPSUc5eUlHRnpJR0VnY21GM0lISmxjWFZsYzNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JCWTJObGNIUklaV0ZrWlhJZ0xTQjBhR1VnWVdOalpYQjBJR2hsWVdSbGNpQm1iM0lnZEdobElISmxjWFZsYzNSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnTFNCMGFHVWdhR1ZoWkdWeWN5QjBieUIxYzJVZ2FXNGdkR2hsSUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1gxOW5aWFJTWlhGMVpYTjBTR1ZoWkdWeWN5aHlZWGNzSUVGalkyVndkRWhsWVdSbGNpa2dlMXh1SUNBZ0lDQWdiR1YwSUdobFlXUmxjbk1nUFNCN1hHNGdJQ0FnSUNBZ0lDQW5RMjl1ZEdWdWRDMVVlWEJsSnpvZ0oyRndjR3hwWTJGMGFXOXVMMnB6YjI0N1kyaGhjbk5sZEQxVlZFWXRPQ2NzWEc0Z0lDQWdJQ0FnSUNBblFXTmpaWEIwSnpvZ0oyRndjR3hwWTJGMGFXOXVMM1p1WkM1bmFYUm9kV0l1SnlBcklDaEJZMk5sY0hSSVpXRmtaWElnZkh3Z2RHaHBjeTVmWDBGalkyVndkRWhsWVdSbGNpa3NYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JwWmlBb2NtRjNLU0I3WEc0Z0lDQWdJQ0FnSUNCb1pXRmtaWEp6TGtGalkyVndkQ0FyUFNBbkxuSmhkeWM3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JvWldGa1pYSnpMa0ZqWTJWd2RDQXJQU0FuSzJwemIyNG5PMXh1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVmWDJGMWRHaHZjbWw2WVhScGIyNUlaV0ZrWlhJcElIdGNiaUFnSUNBZ0lDQWdJR2hsWVdSbGNuTXVRWFYwYUc5eWFYcGhkR2x2YmlBOUlIUm9hWE11WDE5aGRYUm9iM0pwZW1GMGFXOXVTR1ZoWkdWeU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2FHVmhaR1Z5Y3p0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJUWlhSeklIUm9aU0JrWldaaGRXeDBJRzl3ZEdsdmJuTWdabTl5SUVGUVNTQnlaWEYxWlhOMGMxeHVJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0eVpYRjFaWE4wVDNCMGFXOXVjejE3ZlYwZ0xTQjBhR1VnWTNWeWNtVnVkQ0J2Y0hScGIyNXpJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlNBdElIUm9aU0J2Y0hScGIyNXpJSFJ2SUhCaGMzTWdkRzhnZEdobElISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdYMmRsZEU5d2RHbHZibk5YYVhSb1JHVm1ZWFZzZEhNb2NtVnhkV1Z6ZEU5d2RHbHZibk1nUFNCN2ZTa2dlMXh1SUNBZ0lDQWdhV1lnS0NFb2NtVnhkV1Z6ZEU5d2RHbHZibk11ZG1semFXSnBiR2wwZVNCOGZDQnlaWEYxWlhOMFQzQjBhVzl1Y3k1aFptWnBiR2xoZEdsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUhKbGNYVmxjM1JQY0hScGIyNXpMblI1Y0dVZ1BTQnlaWEYxWlhOMFQzQjBhVzl1Y3k1MGVYQmxJSHg4SUNkaGJHd25PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVZ4ZFdWemRFOXdkR2x2Ym5NdWMyOXlkQ0E5SUhKbGNYVmxjM1JQY0hScGIyNXpMbk52Y25RZ2ZId2dKM1Z3WkdGMFpXUW5PMXh1SUNBZ0lDQWdjbVZ4ZFdWemRFOXdkR2x2Ym5NdWNHVnlYM0JoWjJVZ1BTQnlaWEYxWlhOMFQzQjBhVzl1Y3k1d1pYSmZjR0ZuWlNCOGZDQW5NVEF3SnpzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ4ZFdWemRFOXdkR2x2Ym5NN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nYVdZZ1lTQmdSR0YwWldBZ2FYTWdjR0Z6YzJWa0lIUnZJSFJvYVhNZ1puVnVZM1JwYjI0Z2FYUWdkMmxzYkNCaVpTQmpiMjUyWlhKMFpXUWdkRzhnWVc0Z1NWTlBJSE4wY21sdVoxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUhzcWZTQmtZWFJsSUMwZ2RHaGxJRzlpYW1WamRDQjBieUJoZEhSbGJYQjBJSFJ2SUdOdlpYSmpaU0JwYm5SdklHRnVJRWxUVHlCa1lYUmxJSE4wY21sdVoxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNBdElIUm9aU0JKVTA4Z2NtVndjbVZ6Wlc1MFlYUnBiMjRnYjJZZ1lHUmhkR1ZnSUc5eUlIZG9ZWFJsZG1WeUlIZGhjeUJ3WVhOelpXUWdhVzRnYVdZZ2FYUWdkMkZ6SUc1dmRDQmhJR1JoZEdWY2JpQWdJQ0FxTDF4dUlDQWdYMlJoZEdWVWIwbFRUeWhrWVhSbEtTQjdYRzRnSUNBZ0lDQnBaaUFvWkdGMFpTQW1KaUFvWkdGMFpTQnBibk4wWVc1alpXOW1JRVJoZEdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0JrWVhSbElEMGdaR0YwWlM1MGIwbFRUMU4wY21sdVp5Z3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaR0YwWlR0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJCSUdaMWJtTjBhVzl1SUhSb1lYUWdjbVZqWldsMlpYTWdkR2hsSUhKbGMzVnNkQ0J2WmlCMGFHVWdRVkJKSUhKbGNYVmxjM1F1WEc0Z0lDQWdLaUJBWTJGc2JHSmhZMnNnVW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVJYSnliM0o5SUdWeWNtOXlJQzBnZEdobElHVnljbTl5SUhKbGRIVnlibVZrSUdKNUlIUm9aU0JCVUVrZ2IzSWdZRzUxYkd4Z1hHNGdJQ0FnS2lCQWNHRnlZVzBnZXloUFltcGxZM1I4ZEhKMVpTbDlJSEpsYzNWc2RDQXRJSFJvWlNCa1lYUmhJSEpsZEhWeWJtVmtJR0o1SUhSb1pTQkJVRWtnYjNJZ1lIUnlkV1ZnSUdsbUlIUm9aU0JCVUVrZ2NtVjBkWEp1Y3lCZ01qQTBJRTV2SUVOdmJuUmxiblJnWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjbVZ4ZFdWemRDQXRJSFJvWlNCeVlYY2dlMEJzYVc1clkyOWtaU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YlhwaFluSnBjMnRwWlM5aGVHbHZjeU55WlhOd2IyNXpaUzF6WTJobGJXRWdVbVZ6Y0c5dWMyVjlYRzRnSUNBZ0tpOWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RXRnJaU0JoSUhKbGNYVmxjM1F1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiV1YwYUc5a0lDMGdkR2hsSUcxbGRHaHZaQ0JtYjNJZ2RHaGxJSEpsY1hWbGMzUWdLRWRGVkN3Z1VGVlVMQ0JRVDFOVUxDQkVSVXhGVkVVcFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0dGMGFDQXRJSFJvWlNCd1lYUm9JR1p2Y2lCMGFHVWdjbVZ4ZFdWemRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUhzcWZTQmJaR0YwWVYwZ0xTQjBhR1VnWkdGMFlTQjBieUJ6Wlc1a0lIUnZJSFJvWlNCelpYSjJaWEl1SUVadmNpQklWRlJRSUcxbGRHaHZaSE1nZEdoaGRDQmtiMjRuZENCb1lYWmxJR0VnWW05a2VTQjBhR1VnWkdGMFlWeHVJQ0FnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHNiQ0JpWlNCelpXNTBJR0Z6SUhGMVpYSjVJSEJoY21GdFpYUmxjbk5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IwYUdVZ1kyRnNiR0poWTJzZ1ptOXlJSFJvWlNCeVpYRjFaWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRnR5WVhjOVptRnNjMlZkSUMwZ2FXWWdkR2hsSUhKbGNYVmxjM1FnYzJodmRXeGtJR0psSUhObGJuUWdZWE1nY21GM0xpQkpaaUIwYUdseklHbHpJR0VnWm1Gc2Mza2dkbUZzZFdVZ2RHaGxiaUIwYUdWY2JpQWdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnhkV1Z6ZENCM2FXeHNJR0psSUcxaFpHVWdZWE1nU2xOUFRseHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnVUhKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmZjbVZ4ZFdWemRDaHRaWFJvYjJRc0lIQmhkR2dzSUdSaGRHRXNJR05pTENCeVlYY3BJSHRjYmlBZ0lDQWdJR052Ym5OMElIVnliQ0E5SUhSb2FYTXVYMTluWlhSVlVrd29jR0YwYUNrN1hHNWNiaUFnSUNBZ0lHTnZibk4wSUVGalkyVndkRWhsWVdSbGNpQTlJQ2hrWVhSaElIeDhJSHQ5S1M1QlkyTmxjSFJJWldGa1pYSTdYRzRnSUNBZ0lDQnBaaUFvUVdOalpYQjBTR1ZoWkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0JrWld4bGRHVWdaR0YwWVM1QlkyTmxjSFJJWldGa1pYSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpiMjV6ZENCb1pXRmtaWEp6SUQwZ2RHaHBjeTVmWDJkbGRGSmxjWFZsYzNSSVpXRmtaWEp6S0hKaGR5d2dRV05qWlhCMFNHVmhaR1Z5S1R0Y2JseHVJQ0FnSUNBZ2JHVjBJSEYxWlhKNVVHRnlZVzF6SUQwZ2UzMDdYRzVjYmlBZ0lDQWdJR052Ym5OMElITm9iM1ZzWkZWelpVUmhkR0ZCYzFCaGNtRnRjeUE5SUdSaGRHRWdKaVlnS0hSNWNHVnZaaUJrWVhSaElEMDlQU0FuYjJKcVpXTjBKeWtnSmlZZ2JXVjBhRzlrU0dGelRtOUNiMlI1S0cxbGRHaHZaQ2s3WEc0Z0lDQWdJQ0JwWmlBb2MyaHZkV3hrVlhObFJHRjBZVUZ6VUdGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNCeGRXVnllVkJoY21GdGN5QTlJR1JoZEdFN1hHNGdJQ0FnSUNBZ0lDQmtZWFJoSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCamIyNW1hV2NnUFNCN1hHNGdJQ0FnSUNBZ0lDQjFjbXc2SUhWeWJDeGNiaUFnSUNBZ0lDQWdJRzFsZEdodlpEb2diV1YwYUc5a0xGeHVJQ0FnSUNBZ0lDQWdhR1ZoWkdWeWN6b2dhR1ZoWkdWeWN5eGNiaUFnSUNBZ0lDQWdJSEJoY21GdGN6b2djWFZsY25sUVlYSmhiWE1zWEc0Z0lDQWdJQ0FnSUNCa1lYUmhPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMyVlVlWEJsT2lCeVlYY2dQeUFuZEdWNGRDY2dPaUFuYW5OdmJpY3NYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JzYjJjb1lDUjdZMjl1Wm1sbkxtMWxkR2h2WkgwZ2RHOGdKSHRqYjI1bWFXY3VkWEpzZldBcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnY21WeGRXVnpkRkJ5YjIxcGMyVWdQU0JoZUdsdmN5aGpiMjVtYVdjcExtTmhkR05vS0dOaGJHeGlZV05yUlhKeWIzSlBjbFJvY205M0tHTmlMQ0J3WVhSb0tTazdYRzVjYmlBZ0lDQWdJR2xtSUNoallpa2dlMXh1SUNBZ0lDQWdJQ0FnY21WeGRXVnpkRkJ5YjIxcGMyVXVkR2hsYmlnb2NtVnpjRzl1YzJVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaUzVrWVhSaElDWW1JRTlpYW1WamRDNXJaWGx6S0hKbGMzQnZibk5sTG1SaGRHRXBMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGZG9aVzRnWkdGMFlTQm9ZWE1nY21WemRXeDBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMklvYm5Wc2JDd2djbVZ6Y0c5dWMyVXVaR0YwWVN3Z2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoamIyNW1hV2N1YldWMGFHOWtJQ0U5UFNBblIwVlVKeUFtSmlCUFltcGxZM1F1YTJWNWN5aHlaWE53YjI1elpTNWtZWFJoS1M1c1pXNW5kR2dnUENBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVY25WbElIZG9aVzRnYzNWalkyVnpjMloxYkNCemRXSnRhWFFnWVNCeVpYRjFaWE4wSUdGdVpDQnlaV05sYVhabElHRWdaVzF3ZEhrZ2IySnFaV04wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWWlodWRXeHNMQ0FvY21WemNHOXVjMlV1YzNSaGRIVnpJRHdnTXpBd0tTd2djbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaUtHNTFiR3dzSUhKbGMzQnZibk5sTG1SaGRHRXNJSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WeGRXVnpkRkJ5YjIxcGMyVTdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RXRnJaU0JoSUhKbGNYVmxjM1FnZEc4Z1lXNGdaVzVrY0c5cGJuUWdkR2hsSUhKbGRIVnlibk1nTWpBMElIZG9aVzRnZEhKMVpTQmhibVFnTkRBMElIZG9aVzRnWm1Gc2MyVmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCd1lYUm9JQzBnZEdobElIQmhkR2dnZEc4Z2NtVnhkV1Z6ZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1JoZEdFZ0xTQmhibmtnY1hWbGNua2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2RHaGxJR05oYkd4aVlXTnJJSFJvWVhRZ2QybHNiQ0J5WldObGFYWmxJR0IwY25WbFlDQnZjaUJnWm1Gc2MyVmdYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UyMWxkR2h2WkgwZ1cyMWxkR2h2WkQxSFJWUmRJQzBnU0ZSVVVDQk5aWFJvYjJRZ2RHOGdkWE5sWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUY5eVpYRjFaWE4wTWpBMGIzSTBNRFFvY0dGMGFDd2daR0YwWVN3Z1kySXNJRzFsZEdodlpDQTlJQ2RIUlZRbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2h0WlhSb2IyUXNJSEJoZEdnc0lHUmhkR0VwWEc0Z0lDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaUJ6ZFdOalpYTnpLSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmlLRzUxYkd3c0lIUnlkV1VzSUhKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0Z1ptRnBiSFZ5WlNoeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExuSmxjM0J2Ym5ObExuTjBZWFIxY3lBOVBUMGdOREEwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmlLRzUxYkd3c0lHWmhiSE5sTENCeVpYTndiMjV6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJJb2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk5ZV3RsSUdFZ2NtVnhkV1Z6ZENCaGJtUWdabVYwWTJnZ1lXeHNJSFJvWlNCaGRtRnBiR0ZpYkdVZ1pHRjBZUzRnUjJsMGFIVmlJSGRwYkd3Z2NHRm5hVzVoZEdVZ2NtVnpjRzl1YzJWeklITnZJR1p2Y2lCeGRXVnlhV1Z6WEc0Z0lDQWdLaUIwYUdGMElHMXBaMmgwSUhOd1lXNGdiWFZzZEdsd2JHVWdjR0ZuWlhNZ2RHaHBjeUJ0WlhSb2IyUWdhWE1nY0hKbFptVnljbVZrSUhSdklIdEFiR2x1YXlCU1pYRjFaWE4wWVdKc1pTTnlaWEYxWlhOMGZWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCaGRHZ2dMU0IwYUdVZ2NHRjBhQ0IwYnlCeVpYRjFaWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJSFJvWlNCeGRXVnllU0J3WVhKaGJXVjBaWEp6SUhSdklHbHVZMngxWkdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCMGFHVWdablZ1WTNScGIyNGdkRzhnY21WalpXbDJaU0IwYUdVZ1pHRjBZUzRnVkdobElISmxkSFZ5Ym1Wa0lHUmhkR0VnZDJsc2JDQmhiSGRoZVhNZ1ltVWdZVzRnWVhKeVlYa3VYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEZ0ZGZTQnlaWE4xYkhSeklDMGdkR2hsSUhCaGNuUnBZV3dnY21WemRXeDBjeTRnVkdocGN5QmhjbWQxYldWdWRDQnBjeUJwYm5SbGJtUmxaQ0JtYjNJZ2FXNTBaWEp1WVd3Z2RYTmxJRzl1YkhrdVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElHRWdjSEp2YldselpTQjNhR2xqYUNCM2FXeHNJSEpsYzI5c2RtVWdkMmhsYmlCaGJHd2djR0ZuWlhNZ2FHRjJaU0JpWldWdUlHWmxkR05vWldSY2JpQWdJQ0FxSUVCa1pYQnlaV05oZEdWa0lGUm9hWE1nZDJsc2JDQmlaU0JtYjJ4a1pXUWdhVzUwYnlCN1FHeHBibXNnVW1WeGRXVnpkR0ZpYkdValgzSmxjWFZsYzNSOUlHbHVJSFJvWlNBeUxqQWdjbVZzWldGelpTNWNiaUFnSUNBcUwxeHVJQ0FnWDNKbGNYVmxjM1JCYkd4UVlXZGxjeWh3WVhSb0xDQnZjSFJwYjI1ekxDQmpZaXdnY21WemRXeDBjeWtnZTF4dUlDQWdJQ0FnY21WemRXeDBjeUE5SUhKbGMzVnNkSE1nZkh3Z1cxMDdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0J3WVhSb0xDQnZjSFJwYjI1ektWeHVJQ0FnSUNBZ0lDQWdMblJvWlc0b0tISmxjM0J2Ym5ObEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEdocGMwZHliM1Z3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG1SaGRHRWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwYzBkeWIzVndJRDBnY21WemNHOXVjMlV1WkdGMFlUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVnpjRzl1YzJVdVpHRjBZUzVwZEdWdGN5QnBibk4wWVc1alpXOW1JRUZ5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6UjNKdmRYQWdQU0J5WlhOd2IyNXpaUzVrWVhSaExtbDBaVzF6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WlhOellXZGxJRDBnWUdOaGJtNXZkQ0JtYVdkMWNtVWdiM1YwSUdodmR5QjBieUJoY0hCbGJtUWdKSHR5WlhOd2IyNXpaUzVrWVhSaGZTQjBieUIwYUdVZ2NtVnpkV3gwSUhObGRHQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dVbVZ6Y0c5dWMyVkZjbkp2Y2lodFpYTnpZV2RsTENCd1lYUm9MQ0J5WlhOd2IyNXpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29MaTR1ZEdocGMwZHliM1Z3S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdibVY0ZEZWeWJDQTlJR2RsZEU1bGVIUlFZV2RsS0hKbGMzQnZibk5sTG1obFlXUmxjbk11YkdsdWF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaHVaWGgwVlhKc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVjR0ZuWlNBOUlIQmhjbk5sU1c1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGgwVlhKc0xtMWhkR05vS0M4b2NHRm5aVDFiTUMwNVhTb3BMMmNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuTm9hV1owS0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjM0JzYVhRb0p6MG5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1d2IzQW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtHOXdkR2x2Ym5NZ0ppWWdkSGx3Wlc5bUlHOXdkR2x2Ym5NdWNHRm5aU0FoUFQwZ0oyNTFiV0psY2ljcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJjb1lHZGxkSFJwYm1jZ2JtVjRkQ0J3WVdkbE9pQWtlMjVsZUhSVmNteDlZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRFRnNiRkJoWjJWektHNWxlSFJWY213c0lHOXdkR2x2Ym5Nc0lHTmlMQ0J5WlhOMWJIUnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05pS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallpaHVkV3hzTENCeVpYTjFiSFJ6TENCeVpYTndiMjV6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTmxMbVJoZEdFZ1BTQnlaWE4xYkhSek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNCdmJuTmxPMXh1SUNBZ0lDQWdJQ0FnZlNrdVkyRjBZMmdvWTJGc2JHSmhZMnRGY25KdmNrOXlWR2h5YjNjb1kySXNJSEJoZEdncEtUdGNiaUFnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWlhGMVpYTjBZV0pzWlR0Y2JseHVMeThnTHk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeThnTHk5Y2JpOHZJQ0JRY21sMllYUmxJR2hsYkhCbGNpQm1kVzVqZEdsdmJuTWdJQzh2WEc0dkx5QXZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5QXZMMXh1WTI5dWMzUWdUVVZVU0U5RVUxOVhTVlJJWDA1UFgwSlBSRmtnUFNCYkowZEZWQ2NzSUNkSVJVRkVKeXdnSjBSRlRFVlVSU2RkTzF4dVpuVnVZM1JwYjI0Z2JXVjBhRzlrU0dGelRtOUNiMlI1S0cxbGRHaHZaQ2tnZTF4dUlDQWdjbVYwZFhKdUlFMUZWRWhQUkZOZlYwbFVTRjlPVDE5Q1QwUlpMbWx1WkdWNFQyWW9iV1YwYUc5a0tTQWhQVDBnTFRFN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFNWxlSFJRWVdkbEtHeHBibXR6U0dWaFpHVnlJRDBnSnljcElIdGNiaUFnSUdOdmJuTjBJR3hwYm10eklEMGdiR2x1YTNOSVpXRmtaWEl1YzNCc2FYUW9MMXhjY3lvc1hGeHpLaThwT3lBdkx5QnpjR3hwZEhNZ1lXNWtJSE4wY21sd2N5QjBhR1VnZFhKc2MxeHVJQ0FnY21WMGRYSnVJR3hwYm10ekxuSmxaSFZqWlNobWRXNWpkR2x2YmlodVpYaDBWWEpzTENCc2FXNXJLU0I3WEc0Z0lDQWdJQ0JwWmlBb2JHbHVheTV6WldGeVkyZ29MM0psYkQxY0ltNWxlSFJjSWk4cElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaHNhVzVyTG0xaGRHTm9LQzg4S0M0cUtUNHZLU0I4ZkNCYlhTbGJNVjA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhoMFZYSnNPMXh1SUNBZ2ZTd2dkVzVrWldacGJtVmtLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZMkZzYkdKaFkydEZjbkp2Y2s5eVZHaHliM2NvWTJJc0lIQmhkR2dwSUh0Y2JpQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm9ZVzVrYkdWeUtHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2JHVjBJR1Z5Y205eU8xeHVJQ0FnSUNBZ2FXWWdLRzlpYW1WamRDNW9ZWE5QZDI1UWNtOXdaWEowZVNnblkyOXVabWxuSnlrcElIdGNiaUFnSUNBZ0lDQWdJR052Ym5OMElIdHlaWE53YjI1elpUb2dlM04wWVhSMWN5d2djM1JoZEhWelZHVjRkSDBzSUdOdmJtWnBaem9nZTIxbGRHaHZaQ3dnZFhKc2ZYMGdQU0J2WW1wbFkzUTdYRzRnSUNBZ0lDQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlDaGdKSHR6ZEdGMGRYTjlJR1Z5Y205eUlHMWhhMmx1WnlCeVpYRjFaWE4wSUNSN2JXVjBhRzlrZlNBa2UzVnliSDA2SUZ3aUpIdHpkR0YwZFhOVVpYaDBmVndpWUNrN1hHNGdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlHNWxkeUJTWlhOd2IyNXpaVVZ5Y205eUtHMWxjM05oWjJVc0lIQmhkR2dzSUc5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0FnSUNCc2IyY29ZQ1I3YldWemMyRm5aWDBnSkh0S1UwOU9Mbk4wY21sdVoybG1lU2h2WW1wbFkzUXVaR0YwWVNsOVlDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQnZZbXBsWTNRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ0lHeHZaeWduWjI5cGJtY2dkRzhnWlhKeWIzSWdZMkZzYkdKaFkyc25LVHRjYmlBZ0lDQWdJQ0FnSUdOaUtHVnljbTl5S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNCc2IyY29KM1JvY205M2FXNW5JR1Z5Y205eUp5azdYRzRnSUNBZ0lDQWdJQ0IwYUhKdmR5Qmxjbkp2Y2p0Y2JpQWdJQ0FnSUgxY2JpQWdJSDA3WEc1OVhHNGlYWDA9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0YWJsZS5qcy5tYXBcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbGFiZWwtaGFzLWZvciAqL1xudmFyIHByb3BUeXBlcyA9IHtcbiAgaW5saW5lOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICB0aXRsZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogT25seSB2YWxpZCBpZiBgaW5saW5lYCBpcyBub3Qgc2V0LlxuICAgKi9cbiAgdmFsaWRhdGlvblN0YXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InLCBudWxsXSksXG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgcmVmIHRvIHRoZSBgPGlucHV0PmAgZWxlbWVudC4gT25seSBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgaGVyZS5cbiAgICpcbiAgICogYGBganNcbiAgICogPFJhZGlvIGlucHV0UmVmPXtyZWYgPT4geyB0aGlzLmlucHV0ID0gcmVmOyB9fSAvPlxuICAgKiBgYGBcbiAgICovXG4gIGlucHV0UmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGlubGluZTogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgdGl0bGU6ICcnXG59O1xuXG52YXIgUmFkaW8gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShSYWRpbywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmFkaW8oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJhZGlvLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlubGluZSA9IF90aGlzJHByb3BzLmlubGluZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3RoaXMkcHJvcHMudmFsaWRhdGlvblN0YXRlLFxuICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiaW5saW5lXCIsIFwiZGlzYWJsZWRcIiwgXCJ2YWxpZGF0aW9uU3RhdGVcIiwgXCJpbnB1dFJlZlwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwidGl0bGVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGlucHV0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIHR5cGU6IFwicmFkaW9cIixcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgIH0pKTtcblxuICAgIGlmIChpbmxpbmUpIHtcbiAgICAgIHZhciBfY2xhc3NlczI7XG5cbiAgICAgIHZhciBfY2xhc3NlcyA9IChfY2xhc3NlczIgPSB7fSwgX2NsYXNzZXMyWygwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShic1Byb3BzLCAnaW5saW5lJyldID0gdHJ1ZSwgX2NsYXNzZXMyLmRpc2FibGVkID0gZGlzYWJsZWQsIF9jbGFzc2VzMik7IC8vIFVzZSBhIHdhcm5pbmcgaGVyZSBpbnN0ZWFkIG9mIGluIHByb3BUeXBlcyB0byBnZXQgYmV0dGVyLWxvb2tpbmdcbiAgICAgIC8vIGdlbmVyYXRlZCBkb2N1bWVudGF0aW9uLlxuXG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSghdmFsaWRhdGlvblN0YXRlLCAnYHZhbGlkYXRpb25TdGF0ZWAgaXMgaWdub3JlZCBvbiBgPFJhZGlvIGlubGluZT5gLiBUbyBkaXNwbGF5ICcgKyAndmFsaWRhdGlvbiBzdGF0ZSBvbiBhbiBpbmxpbmUgcmFkaW8sIHNldCBgdmFsaWRhdGlvblN0YXRlYCBvbiBhICcgKyAncGFyZW50IGA8Rm9ybUdyb3VwPmAgb3Igb3RoZXIgZWxlbWVudCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgX2NsYXNzZXMpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgfSwgaW5wdXQsIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpLCB7XG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9KTtcblxuICAgIGlmICh2YWxpZGF0aW9uU3RhdGUpIHtcbiAgICAgIGNsYXNzZXNbXCJoYXMtXCIgKyB2YWxpZGF0aW9uU3RhdGVdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcbiAgICAgIHRpdGxlOiB0aXRsZVxuICAgIH0sIGlucHV0LCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBSYWRpbztcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUmFkaW8ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUmFkaW8uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdyYWRpbycsIFJhZGlvKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5TdHlsZSA9IGV4cG9ydHMuU3RhdGUgPSBleHBvcnRzLkRFVklDRV9TSVpFUyA9IGV4cG9ydHMuU0laRV9NQVAgPSBleHBvcnRzLlNpemUgPSB2b2lkIDA7XG52YXIgU2l6ZSA9IHtcbiAgTEFSR0U6ICdsYXJnZScsXG4gIFNNQUxMOiAnc21hbGwnLFxuICBYU01BTEw6ICd4c21hbGwnXG59O1xuZXhwb3J0cy5TaXplID0gU2l6ZTtcbnZhciBTSVpFX01BUCA9IHtcbiAgbGFyZ2U6ICdsZycsXG4gIG1lZGl1bTogJ21kJyxcbiAgc21hbGw6ICdzbScsXG4gIHhzbWFsbDogJ3hzJyxcbiAgbGc6ICdsZycsXG4gIG1kOiAnbWQnLFxuICBzbTogJ3NtJyxcbiAgeHM6ICd4cydcbn07XG5leHBvcnRzLlNJWkVfTUFQID0gU0laRV9NQVA7XG52YXIgREVWSUNFX1NJWkVTID0gWydsZycsICdtZCcsICdzbScsICd4cyddO1xuZXhwb3J0cy5ERVZJQ0VfU0laRVMgPSBERVZJQ0VfU0laRVM7XG52YXIgU3RhdGUgPSB7XG4gIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbiAgV0FSTklORzogJ3dhcm5pbmcnLFxuICBEQU5HRVI6ICdkYW5nZXInLFxuICBJTkZPOiAnaW5mbydcbn07XG5leHBvcnRzLlN0YXRlID0gU3RhdGU7XG52YXIgU3R5bGUgPSB7XG4gIERFRkFVTFQ6ICdkZWZhdWx0JyxcbiAgUFJJTUFSWTogJ3ByaW1hcnknLFxuICBMSU5LOiAnbGluaycsXG4gIElOVkVSU0U6ICdpbnZlcnNlJ1xufTtcbmV4cG9ydHMuU3R5bGUgPSBTdHlsZTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgcmV0dXJuICgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkpO1xufTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gb3duZXJEb2N1bWVudDtcblxuZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2xhYmVsLWhhcy1mb3IgKi9cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGlubGluZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgdGl0bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE9ubHkgdmFsaWQgaWYgYGlubGluZWAgaXMgbm90IHNldC5cbiAgICovXG4gIHZhbGlkYXRpb25TdGF0ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnc3VjY2VzcycsICd3YXJuaW5nJywgJ2Vycm9yJywgbnVsbF0pLFxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhIHJlZiB0byB0aGUgYDxpbnB1dD5gIGVsZW1lbnQuIE9ubHkgZnVuY3Rpb25zIGNhbiBiZSB1c2VkIGhlcmUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIDxDaGVja2JveCBpbnB1dFJlZj17cmVmID0+IHsgdGhpcy5pbnB1dCA9IHJlZjsgfX0gLz5cbiAgICogYGBgXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbmxpbmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHRpdGxlOiAnJ1xufTtcblxudmFyIENoZWNrYm94ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoQ2hlY2tib3gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENoZWNrYm94KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDaGVja2JveC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpbmxpbmUgPSBfdGhpcyRwcm9wcy5pbmxpbmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0ZSA9IF90aGlzJHByb3BzLnZhbGlkYXRpb25TdGF0ZSxcbiAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wcy5pbnB1dFJlZixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICB0aXRsZSA9IF90aGlzJHByb3BzLnRpdGxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImlubGluZVwiLCBcImRpc2FibGVkXCIsIFwidmFsaWRhdGlvblN0YXRlXCIsIFwiaW5wdXRSZWZcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInRpdGxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBpbnB1dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9KSk7XG5cbiAgICBpZiAoaW5saW5lKSB7XG4gICAgICB2YXIgX2NsYXNzZXMyO1xuXG4gICAgICB2YXIgX2NsYXNzZXMgPSAoX2NsYXNzZXMyID0ge30sIF9jbGFzc2VzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ2lubGluZScpXSA9IHRydWUsIF9jbGFzc2VzMi5kaXNhYmxlZCA9IGRpc2FibGVkLCBfY2xhc3NlczIpOyAvLyBVc2UgYSB3YXJuaW5nIGhlcmUgaW5zdGVhZCBvZiBpbiBwcm9wVHlwZXMgdG8gZ2V0IGJldHRlci1sb29raW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgZG9jdW1lbnRhdGlvbi5cblxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoIXZhbGlkYXRpb25TdGF0ZSwgJ2B2YWxpZGF0aW9uU3RhdGVgIGlzIGlnbm9yZWQgb24gYDxDaGVja2JveCBpbmxpbmU+YC4gVG8gZGlzcGxheSAnICsgJ3ZhbGlkYXRpb24gc3RhdGUgb24gYW4gaW5saW5lIGNoZWNrYm94LCBzZXQgYHZhbGlkYXRpb25TdGF0ZWAgb24gYSAnICsgJ3BhcmVudCBgPEZvcm1Hcm91cD5gIG9yIG90aGVyIGVsZW1lbnQgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIF9jbGFzc2VzKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgIH0sIGlucHV0LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKSwge1xuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSk7XG5cbiAgICBpZiAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjbGFzc2VzW1wiaGFzLVwiICsgdmFsaWRhdGlvblN0YXRlXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKSxcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgICB0aXRsZTogdGl0bGVcbiAgICB9LCBpbnB1dCwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gQ2hlY2tib3g7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNoZWNrYm94LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNoZWNrYm94LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnY2hlY2tib3gnLCBDaGVja2JveCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICdsaWdodHNlYWdyZWVuJyxcbiAgJ2ZvcmVzdGdyZWVuJyxcbiAgJ2dvbGRlbnJvZCcsXG4gICdkb2RnZXJibHVlJyxcbiAgJ2RhcmtvcmNoaWQnLFxuICAnY3JpbXNvbidcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUwgRE9NIGFuZCBTVkcgRE9NIG1heSBoYXZlIGRpZmZlcmVudCBzdXBwb3J0IGxldmVscyxcbiAgLy8gc28gd2UgbmVlZCB0byBjaGVjayBvbiBjb250ZXh0IGluc3RlYWQgb2YgYSBkb2N1bWVudCByb290IGVsZW1lbnQuXG4gIHJldHVybiBfaW5ET00uZGVmYXVsdCA/IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgaWYgKGNvbnRleHQuY29udGFpbnMpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbGxiYWNrKGNvbnRleHQsIG5vZGUpO1xuICAgIH1cbiAgfSA6IGZhbGxiYWNrO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZmFsbGJhY2soY29udGV4dCwgbm9kZSkge1xuICBpZiAobm9kZSkgZG8ge1xuICAgIGlmIChub2RlID09PSBjb250ZXh0KSByZXR1cm4gdHJ1ZTtcbiAgfSB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50Tm9kZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZiAhPSBudWxsO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZikge1xuICAgIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgIH1cblxuICAgIGlmIChhY2MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByb3BWYWx1ZSk7XG5cbiAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBSZWFjdEVsZW1lbnQgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LiBZb3UgY2FuIHVzdWFsbHkgb2J0YWluIGEgUmVhY3RDb21wb25lbnQgb3IgRE9NRWxlbWVudCAnICsgJ2Zyb20gYSBSZWFjdEVsZW1lbnQgYnkgYXR0YWNoaW5nIGEgcmVmIHRvIGl0LicpO1xuICB9XG5cbiAgaWYgKChwcm9wVHlwZSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BWYWx1ZS5yZW5kZXIgIT09ICdmdW5jdGlvbicpICYmIHByb3BWYWx1ZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgcHJvcFZhbHVlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKHZhbGlkYXRlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldENvbnRhaW5lcjtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lciwgZGVmYXVsdENvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG4gIHJldHVybiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBkZWZhdWx0Q29udGFpbmVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRXaW5kb3c7XG5cbmZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIHJldHVybiBub2RlID09PSBub2RlLndpbmRvdyA/IG5vZGUgOiBub2RlLm5vZGVUeXBlID09PSA5ID8gbm9kZS5kZWZhdWx0VmlldyB8fCBub2RlLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFVzZXMgYGNvbnRyb2xJZGAgZnJvbSBgPEZvcm1Hcm91cD5gIGlmIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZC5cbiAgICovXG4gIGh0bWxGb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIHNyT25seTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzck9ubHk6IGZhbHNlXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIENvbnRyb2xMYWJlbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKENvbnRyb2xMYWJlbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29udHJvbExhYmVsKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDb250cm9sTGFiZWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGZvcm1Hcm91cCA9IHRoaXMuY29udGV4dC4kYnNfZm9ybUdyb3VwO1xuICAgIHZhciBjb250cm9sSWQgPSBmb3JtR3JvdXAgJiYgZm9ybUdyb3VwLmNvbnRyb2xJZDtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRodG1sRm9yID0gX3RoaXMkcHJvcHMuaHRtbEZvcixcbiAgICAgICAgaHRtbEZvciA9IF90aGlzJHByb3BzJGh0bWxGb3IgPT09IHZvaWQgMCA/IGNvbnRyb2xJZCA6IF90aGlzJHByb3BzJGh0bWxGb3IsXG4gICAgICAgIHNyT25seSA9IF90aGlzJHByb3BzLnNyT25seSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImh0bWxGb3JcIiwgXCJzck9ubHlcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb250cm9sSWQgPT0gbnVsbCB8fCBodG1sRm9yID09PSBjb250cm9sSWQsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Q29udHJvbExhYmVsPmAgd2hlbiBgaHRtbEZvcmAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuICAgIHZhciBjbGFzc2VzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIHtcbiAgICAgICdzci1vbmx5Jzogc3JPbmx5XG4gICAgfSk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDb250cm9sTGFiZWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNvbnRyb2xMYWJlbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Db250cm9sTGFiZWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuQ29udHJvbExhYmVsLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnY29udHJvbC1sYWJlbCcsIENvbnRyb2xMYWJlbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgbW9kZWwgc2NoZW1hIHRoYXQgKGRlKXNlcmlhbGl6ZXMgZnJvbSAvIHRvIHBsYWluIGphdmFzY3JpcHQgb2JqZWN0cy5cbiAqIEl0cyBmYWN0b3J5IG1ldGhvZCBpczogYCgpID0+ICh7fSlgXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciB0b2RvU2NoZW1hID0gY3JlYXRlU2ltcGxlU2NoZW1hKHtcbiAqICAgICB0aXRsZTogdHJ1ZSxcbiAqICAgICBkb25lOiB0cnVlLFxuICogfSk7XG4gKlxuICogdmFyIGpzb24gPSBzZXJpYWxpemUodG9kb1NjaGVtYSwgeyB0aXRsZTogJ1Rlc3QnLCBkb25lOiBmYWxzZSB9KTtcbiAqIHZhciB0b2RvID0gZGVzZXJpYWxpemUodG9kb1NjaGVtYSwganNvbik7XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIHByb3BlcnR5IG1hcHBpbmcsXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBtb2RlbCBzY2hlbWFcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2ltcGxlU2NoZW1hKHByb3BzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmFjdG9yeTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge31cbiAgICAgICAgfSxcbiAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgfVxufVxuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgICBqOiBmdW5jdGlvbiBqc29uKHYpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIFwiW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06IFwiICsgZXJyb3IubWVzc2FnZVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHZhciB2YXJpYWJsZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgICAgICB2YXIgdmFyaWFibGVzVG9Mb2cgPSBbXTtcblxuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgZm9ybWF0dGVkTWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uIG1lc3NhZ2VGb3JtYXR0ZXIobWF0Y2gsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKG1hdGNoID09PSBcIiUlXCIpIHJldHVybiBtYXRjaFxuXG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gdmFyaWFibGVzW2luZGV4KytdO1xuXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzVG9Mb2cucHVzaCh2YXJpYWJsZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyKHZhcmlhYmxlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNvbnNvbGUgJiYgdmFyaWFibGVzVG9Mb2cubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIHZhcmlhYmxlc1RvTG9nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltzZXJpYWxpenJdIFwiICsgKGZvcm1hdHRlZE1lc3NhZ2UgfHwgXCJJbGxlZ2FsIFN0YXRlXCIpKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gR1VBUkRFRF9OT09QKGVycikge1xuICAgIGlmIChlcnIpIC8vIHVuZ3VhcmRlZCBlcnJvci4uLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKVxufVxuXG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgdmFyIGZpcmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFmaXJlZCkge1xuICAgICAgICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiY2FsbGJhY2sgd2FzIGludm9rZWQgdHdpY2VcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJhbGxlbChhciwgcHJvY2Vzc29yLCBjYikge1xuICAgIC8vIFRPRE86IGxpbWl0IHBhcmFsbGVsaXphdGlvbj9cbiAgICBpZiAoYXIubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gdm9pZCBjYihudWxsLCBbXSlcbiAgICB2YXIgbGVmdCA9IGFyLmZpbHRlcihmdW5jdGlvbigpeyByZXR1cm4gdHJ1ZSB9KS5sZW5ndGg7IC8vIG9ubHkgY291bnQgaXRlbXMgcHJvY2Vzc2VkIGJ5IGZvckVhY2hcbiAgICB2YXIgcmVzdWx0QXJyYXkgPSBbXTtcbiAgICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gICAgdmFyIHByb2Nlc3NvckNiID0gZnVuY3Rpb24gKGlkeCwgZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgaWYgKCFmYWlsZWQpIHtcbiAgICAgICAgICAgICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNiKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRBcnJheVtpZHhdID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKC0tbGVmdCA9PT0gMClcbiAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHRBcnJheSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpZHgpIHtcbiAgICAgICAgcHJvY2Vzc29yKHZhbHVlLCBwcm9jZXNzb3JDYi5iaW5kKG51bGwsIGlkeCksIGlkeCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCJcbn1cblxuZnVuY3Rpb24gaXNNb2RlbFNjaGVtYSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyAmJiB0aGluZy5mYWN0b3J5ICYmIHRoaW5nLnByb3BzXG59XG5cbmZ1bmN0aW9uIGlzUHJvcFNjaGVtYSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyAmJiB0aGluZy5zZXJpYWxpemVyICYmIHRoaW5nLmRlc2VyaWFsaXplclxufVxuXG5mdW5jdGlvbiBpc0FsaWFzZWRQcm9wU2NoZW1hKHByb3BTY2hlbWEpIHtcbiAgICByZXR1cm4gdHlwZW9mIHByb3BTY2hlbWEgPT09IFwib2JqZWN0XCIgJiYgISFwcm9wU2NoZW1hLmpzb25uYW1lXG59XG5cbmZ1bmN0aW9uIGlzSWRlbnRpZmllclByb3BTY2hlbWEocHJvcFNjaGVtYSkge1xuICAgIHJldHVybiB0eXBlb2YgcHJvcFNjaGVtYSA9PT0gXCJvYmplY3RcIiAmJiBwcm9wU2NoZW1hLmlkZW50aWZpZXIgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNBc3NpZ25hYmxlVG8oYWN0dWFsVHlwZSwgZXhwZWN0ZWRUeXBlKSB7XG4gICAgd2hpbGUgKGFjdHVhbFR5cGUpIHtcbiAgICAgICAgaWYgKGFjdHVhbFR5cGUgPT09IGV4cGVjdGVkVHlwZSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIGFjdHVhbFR5cGUgPSBhY3R1YWxUeXBlLmV4dGVuZHM7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBpc01hcExpa2UodGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgJiYgdHlwZW9mIHRoaW5nLmtleXMgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdGhpbmcuY2xlYXIgPT09IFwiZnVuY3Rpb25cIlxufVxuXG5mdW5jdGlvbiBnZXRJZGVudGlmaWVyUHJvcChtb2RlbFNjaGVtYSkge1xuICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSk7XG4gICAgLy8gb3B0aW1pemF0aW9uOiBjYWNoZSB0aGlzIGxvb2t1cFxuICAgIHdoaWxlIChtb2RlbFNjaGVtYSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBtb2RlbFNjaGVtYS5wcm9wcylcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kZWxTY2hlbWEucHJvcHNbcHJvcE5hbWVdID09PSBcIm9iamVjdFwiICYmIG1vZGVsU2NoZW1hLnByb3BzW3Byb3BOYW1lXS5pZGVudGlmaWVyID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wTmFtZVxuICAgICAgICBtb2RlbFNjaGVtYSA9IG1vZGVsU2NoZW1hLmV4dGVuZHM7XG4gICAgfVxuICAgIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NBZGRpdGlvbmFsUHJvcEFyZ3MocHJvcFNjaGVtYSwgYWRkaXRpb25hbEFyZ3MpIHtcbiAgICBpZiAoYWRkaXRpb25hbEFyZ3MpIHtcbiAgICAgICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBhIHByb3BTY2hlbWFcIik7XG4gICAgICAgIHZhciBhcmdOYW1lcyA9IFtcImJlZm9yZURlc2VyaWFsaXplXCIsIFwiYWZ0ZXJEZXNlcmlhbGl6ZVwiXTtcbiAgICAgICAgYXJnTmFtZXMuZm9yRWFjaChmdW5jdGlvbihhcmdOYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFkZGl0aW9uYWxBcmdzW2FyZ05hbWVdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBwcm9wU2NoZW1hW2FyZ05hbWVdID0gYWRkaXRpb25hbEFyZ3NbYXJnTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFNjaGVtYVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0YW5kYXJkIG1vZGVsIHNjaGVtYSBhc3NvY2lhdGVkIHdpdGggYSBjbGFzcyAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHRoaW5nXG4gKiBAcmV0dXJucyB7TW9kZWxTY2hlbWF9IG1vZGVsIHNjaGVtYVxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0TW9kZWxTY2hlbWEodGhpbmcpIHtcbiAgICBpZiAoIXRoaW5nKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIGlmIChpc01vZGVsU2NoZW1hKHRoaW5nKSlcbiAgICAgICAgcmV0dXJuIHRoaW5nXG4gICAgaWYgKGlzTW9kZWxTY2hlbWEodGhpbmcuc2VyaWFsaXplSW5mbykpXG4gICAgICAgIHJldHVybiB0aGluZy5zZXJpYWxpemVJbmZvXG4gICAgaWYgKHRoaW5nLmNvbnN0cnVjdG9yICYmIHRoaW5nLmNvbnN0cnVjdG9yLnNlcmlhbGl6ZUluZm8pXG4gICAgICAgIHJldHVybiB0aGluZy5jb25zdHJ1Y3Rvci5zZXJpYWxpemVJbmZvXG59XG5cbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBtb2RlbCBzY2hlbWEgZm9yIGNsYXNzIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiBFdmVyeXdoZXJlIHdoZXJlIGEgbW9kZWwgc2NoZW1hIGlzIHJlcXVpcmVkIGFzIGFyZ3VtZW50LCB0aGlzIGNsYXNzIC8gY29uc3RydWN0b3IgZnVuY3Rpb25cbiAqIGNhbiBiZSBwYXNzZWQgaW4gYXMgd2VsbCAoZm9yIGV4YW1wbGUgd2hlbiB1c2luZyBgb2JqZWN0YCBvciBgcmVmYC5cbiAqXG4gKiBXaGVuIHBhc3NpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyB0byBgc2VyaWFsaXplYCwgaXQgaXMgbm90IHJlcXVpcmVkIHRvIHBhc3MgdGhlIG1vZGVsIHNjaGVtYVxuICogYXMgZmlyc3QgYXJndW1lbnQgYW55bW9yZSwgYmVjYXVzZSB0aGUgZGVmYXVsdCBzY2hlbWEgd2lsbCBiZSBpbmZlcnJlZCBmcm9tIHRoZSBpbnN0YW5jZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7Y29uc3RydWN0b3J8Y2xhc3N9IGNsYXp6IGNsYXNzIG9yIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge01vZGVsU2NoZW1hfSBtb2RlbFNjaGVtYSAtIGEgbW9kZWwgc2NoZW1hXG4gKiBAcmV0dXJucyB7TW9kZWxTY2hlbWF9IG1vZGVsIHNjaGVtYVxuICovXG5mdW5jdGlvbiBzZXREZWZhdWx0TW9kZWxTY2hlbWEoY2xhenosIG1vZGVsU2NoZW1hKSB7XG4gICAgaW52YXJpYW50KGlzTW9kZWxTY2hlbWEobW9kZWxTY2hlbWEpKTtcbiAgICByZXR1cm4gY2xhenouc2VyaWFsaXplSW5mbyA9IG1vZGVsU2NoZW1hXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1vZGVsIHNjaGVtYSB0aGF0IChkZSlzZXJpYWxpemVzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY29uc3RydWN0b3IgZnVuY3Rpb24gKGNsYXNzKS5cbiAqIFRoZSBjcmVhdGVkIG1vZGVsIHNjaGVtYSBpcyBhc3NvY2lhdGVkIGJ5IHRoZSB0YXJnZXRlZCB0eXBlIGFzIGRlZmF1bHQgbW9kZWwgc2NoZW1hLCBzZWUgc2V0RGVmYXVsdE1vZGVsU2NoZW1hLlxuICogSXRzIGZhY3RvcnkgbWV0aG9kIGlzIGAoKSA9PiBuZXcgY2xhenooKWAgKHVubGVzcyBvdmVycmlkZW4sIHNlZSB0aGlyZCBhcmcpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBUb2RvKHRpdGxlLCBkb25lKSB7XG4gKiAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICogICAgIHRoaXMuZG9uZSA9IGRvbmU7XG4gKiB9XG4gKlxuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiB0cnVlLFxuICogICAgIGRvbmU6IHRydWUsXG4gKiB9KTtcbiAqXG4gKiB2YXIganNvbiA9IHNlcmlhbGl6ZShuZXcgVG9kbygnVGVzdCcsIGZhbHNlKSk7XG4gKiB2YXIgdG9kbyA9IGRlc2VyaWFsaXplKFRvZG8sIGpzb24pO1xuICpcbiAqIEBwYXJhbSB7Y29uc3RydWN0b3J8Y2xhc3N9IGNsYXp6IGNsYXNzIG9yIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgcHJvcGVydHkgbWFwcGluZ1xuICogQHBhcmFtIHtmdW5jdGlvbn0gZmFjdG9yeSBvcHRpb25hbCBjdXN0b20gZmFjdG9yeS4gUmVjZWl2ZXMgY29udGV4dCBhcyBmaXJzdCBhcmdcbiAqIEByZXR1cm5zIHtvYmplY3R9IG1vZGVsIHNjaGVtYVxuICovXG5mdW5jdGlvbiBjcmVhdGVNb2RlbFNjaGVtYShjbGF6eiwgcHJvcHMsIGZhY3RvcnkpIHtcbiAgICBpbnZhcmlhbnQoY2xhenogIT09IE9iamVjdCwgXCJvbmUgY2Fubm90IHNpbXBseSBwdXQgZGVmaW5lIGEgbW9kZWwgc2NoZW1hIGZvciBPYmplY3RcIik7XG4gICAgaW52YXJpYW50KHR5cGVvZiBjbGF6eiA9PT0gXCJmdW5jdGlvblwiLCBcImV4cGVjdGVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXCIpO1xuICAgIHZhciBtb2RlbCA9IHtcbiAgICAgICAgdGFyZ2V0Q2xhc3M6IGNsYXp6LFxuICAgICAgICBmYWN0b3J5OiBmYWN0b3J5IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBjbGF6eigpXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzOiBwcm9wc1xuICAgIH07XG4gICAgLy8gZmluZCBzdXBlciBtb2RlbFxuICAgIGlmIChjbGF6ei5wcm90b3R5cGUuY29uc3RydWN0b3IgIT09IE9iamVjdCkge1xuICAgICAgICB2YXIgcyA9IGdldERlZmF1bHRNb2RlbFNjaGVtYShjbGF6ei5wcm90b3R5cGUuY29uc3RydWN0b3IpO1xuICAgICAgICBpZiAocyAmJiBzLnRhcmdldENsYXNzICE9PSBjbGF6eilcbiAgICAgICAgICAgIG1vZGVsLmV4dGVuZHMgPSBzO1xuICAgIH1cbiAgICBzZXREZWZhdWx0TW9kZWxTY2hlbWEoY2xhenosIG1vZGVsKTtcbiAgICByZXR1cm4gbW9kZWxcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGlzIGZpZWxkIGNvbnRhaW5zIGEgcHJpbWl0aXZlIHZhbHVlIChvciBEYXRlKSB3aGljaCBzaG91bGQgYmUgc2VyaWFsaXplZCBsaXRlcmFsbHkgdG8ganNvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiBwcmltaXRpdmUoKSxcbiAqIH0pO1xuICpcbiAqIGNvbnNvbGUuZGlyKHNlcmlhbGl6ZShuZXcgVG9kbygndGVzdCcpKSk7XG4gKiAvLyBvdXRwdXRzOiB7IHRpdGxlIDogXCJ0ZXN0XCIgfVxuICpcbiAqIEBwYXJhbSB7QWRkaXRpb25hbFByb3BBcmdzfSBhZGRpdGlvbmFsQXJncyBvcHRpb25hbCBvYmplY3QgdGhhdCBjb250YWlucyBiZWZvcmVEZXNlcmlhbGl6ZSBhbmQvb3IgYWZ0ZXJEZXNlcmlhbGl6ZSBoYW5kbGVyc1xuICogQHJldHVybnMge01vZGVsU2NoZW1hfVxuICovXG5mdW5jdGlvbiBwcmltaXRpdmUoYWRkaXRpb25hbEFyZ3MpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzZXJpYWxpemVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGludmFyaWFudChpc1ByaW1pdGl2ZSh2YWx1ZSksIFwidGhpcyB2YWx1ZSBpcyBub3QgcHJpbWl0aXZlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBkZXNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChqc29uVmFsdWUsIGRvbmUpIHtcbiAgICAgICAgICAgIGlmICghaXNQcmltaXRpdmUoanNvblZhbHVlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKFwiW3NlcmlhbGl6cl0gdGhpcyB2YWx1ZSBpcyBub3QgcHJpbWl0aXZlOiBcIiArIGpzb25WYWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB2b2lkIGRvbmUobnVsbCwganNvblZhbHVlKVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBJbiB0aGUgZXZlbnQgdGhhdCBhIHByb3BlcnR5IG5lZWRzIHRvIGJlIGRlc2VyaWFsaXplZCwgYnV0IG5vdCBzZXJpYWxpemVkLCB5b3UgY2FuIHVzZSB0aGUgU0tJUCBzeW1ib2wgdG8gb21pdCB0aGUgcHJvcGVydHkuIFRoaXMgaGFzIHRvIGJlIHVzZWQgd2l0aCB0aGUgY3VzdG9tIHNlcmlhbGl6ZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciBzY2hlbWEgPSBfLmNyZWF0ZVNpbXBsZVNjaGVtYSh7XG4gKiAgICAgYTogXy5jdXN0b20oXG4gKiAgICAgICAgIGZ1bmN0aW9uKHYpIHtcbiAqICAgICAgICAgICAgIHJldHVybiBfLlNLSVBcbiAqICAgICAgICAgfSxcbiAqICAgICAgICAgZnVuY3Rpb24odikge1xuICogICAgICAgICAgICAgcmV0dXJuIHY7XG4gKiAgICAgICAgIH1cbiAqICAgICApLFxuICogfSk7XG4gKiB0LmRlZXBFcXVhbChfLnNlcmlhbGl6ZShzLCB7IGE6IDQgfSksIHsgfSk7XG4gKiB0LmRlZXBFcXVhbChfLmRlc2VyaWFsaXplKHMsIHsgYTogNCB9KSwgeyBhOiA0IH0pO1xuICovXG52YXIgU0tJUCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2woXCJTS0lQXCIpIDogeyBTS0lQOiB0cnVlIH07XG5cbnZhciBfZGVmYXVsdFByaW1pdGl2ZVByb3AgPSBwcmltaXRpdmUoKTtcblxuLy8gVWdseSB3YXkgdG8gZ2V0IHRoZSBwYXJhbWV0ZXIgbmFtZXMgc2luY2UgdGhleSBhcmVuJ3QgZWFzaWx5IHJldHJpZXZhYmxlIHZpYSByZWZsZWN0aW9uXG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgQVJHVU1FTlRfTkFNRVMgPSAvKFteXFxzLF0rKS9nO1xuXG5mdW5jdGlvbiBnZXRQYXJhbU5hbWVzKGZ1bmMpIHtcbiAgICB2YXIgZm5TdHIgPSBmdW5jLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgXCJcIik7XG4gICAgdmFyIHJlc3VsdCA9IGZuU3RyLnNsaWNlKGZuU3RyLmluZGV4T2YoXCIoXCIpKzEsIGZuU3RyLmluZGV4T2YoXCIpXCIpKS5tYXRjaChBUkdVTUVOVF9OQU1FUyk7XG4gICAgaWYocmVzdWx0ID09PSBudWxsKVxuICAgICAgICByZXN1bHQgPSBbXTtcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6YWJsZURlY29yYXRvcihwcm9wU2NoZW1hLCB0YXJnZXQsIHByb3BOYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgaW52YXJpYW50KGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgXCJ0b28gZmV3IGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBAc2VyaWFsaXphYmxlIGFzIHByb3BlcnR5IGRlY29yYXRvclwiKTtcbiAgICAvLyBGaXggZm9yIEBzZXJpYWxpemFibGUgdXNlZCBpbiBjbGFzcyBjb25zdHJ1Y3RvciBwYXJhbXMgKHR5cGVzY3JpcHQpXG4gICAgdmFyIGZhY3Rvcnk7XG4gICAgaWYgKHByb3BOYW1lID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHRhcmdldCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICYmIHRhcmdldC5wcm90b3R5cGVcbiAgICAgICAgJiYgZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBkZXNjcmlwdG9yID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGludmFyaWFudChpc1Byb3BTY2hlbWEocHJvcFNjaGVtYSksIFwiQ29uc3RydWN0b3IgcGFyYW1zIG11c3QgdXNlIGFsaWFzKG5hbWUpXCIpO1xuICAgICAgICBpbnZhcmlhbnQocHJvcFNjaGVtYS5qc29ubmFtZSwgXCJDb25zdHJ1Y3RvciBwYXJhbXMgbXVzdCB1c2UgYWxpYXMobmFtZSlcIik7XG4gICAgICAgIHZhciBwYXJhbU5hbWVzID0gZ2V0UGFyYW1OYW1lcyh0YXJnZXQpO1xuICAgICAgICBpZiAocGFyYW1OYW1lcy5sZW5ndGggPj0gZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgcHJvcE5hbWUgPSBwYXJhbU5hbWVzW2Rlc2NyaXB0b3JdO1xuICAgICAgICAgICAgcHJvcFNjaGVtYS5wYXJhbU51bWJlciA9IGRlc2NyaXB0b3I7XG4gICAgICAgICAgICBkZXNjcmlwdG9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZhY3Rvcnkgc28gdGhlIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCBwcm9wZXJseVxuICAgICAgICAgICAgZmFjdG9yeSA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXQuY29uc3RydWN0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dC5tb2RlbFNjaGVtYS5wcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGNvbnRleHQubW9kZWxTY2hlbWEucHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wLnBhcmFtTnVtYmVyID09PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW2ldID0gY29udGV4dC5qc29uW3Byb3AuanNvbm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSh0YXJnZXQuY29uc3RydWN0b3IsIFtudWxsXS5jb25jYXQocGFyYW1zKSkpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGludmFyaWFudCh0eXBlb2YgcHJvcE5hbWUgPT09IFwic3RyaW5nXCIsIFwiaW5jb3JyZWN0IHVzYWdlIG9mIEBzZXJpYWxpemFibGUgZGVjb3JhdG9yXCIpO1xuICAgIHZhciBpbmZvID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCk7XG5cbiAgICBpZiAoIWluZm8gfHwgIXRhcmdldC5jb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcInNlcmlhbGl6ZUluZm9cIikpXG4gICAgICAgIGluZm8gPSBjcmVhdGVNb2RlbFNjaGVtYSh0YXJnZXQuY29uc3RydWN0b3IsIHt9LCBmYWN0b3J5KTtcbiAgICBpZiAoaW5mbyAmJiBpbmZvLnRhcmdldENsYXNzICE9PSB0YXJnZXQuY29uc3RydWN0b3IpXG4gICAgICAgIC8vIGZpeGVzIHR5cGVzY3JpcHQgaXNzdWUgdGhhdCB0ZW5kcyB0byBjb3B5IGZpZWxkcyBmcm9tIHN1cGVyIGNvbnN0cnVjdG9yIHRvIHN1YiBjb25zdHJ1Y3RvciBpbiBleHRlbmRzXG4gICAgICAgIGluZm8gPSBjcmVhdGVNb2RlbFNjaGVtYSh0YXJnZXQuY29uc3RydWN0b3IsIHt9LCBmYWN0b3J5KTtcbiAgICBpbmZvLnByb3BzW3Byb3BOYW1lXSA9IHByb3BTY2hlbWE7XG4gICAgLy8gTVdFOiB3aHkgd29uJ3QgYmFiZWwgd29yayB3aXRob3V0P1xuICAgIGlmIChkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmdldCAmJiAhZGVzY3JpcHRvci5zZXQpXG4gICAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIHJldHVybiBkZXNjcmlwdG9yXG59XG5cbi8qKlxuICogRGVjb3JhdG9yIHRoYXQgZGVmaW5lcyBhIG5ldyBwcm9wZXJ0eSBtYXBwaW5nIG9uIHRoZSBkZWZhdWx0IG1vZGVsIHNjaGVtYSBmb3IgdGhlIGNsYXNzXG4gKiBpdCBpcyB1c2VkIGluLlxuICpcbiAqIFdoZW4gdXNpbmcgdHlwZXNjcmlwdCwgdGhlIGRlY29yYXRvciBjYW4gYWxzbyBiZSB1c2VkIG9uIGZpZWxkcyBkZWNsYXJlZCBhcyBjb25zdHJ1Y3RvciBhcmd1bWVudHMgKHVzaW5nIHRoZSBgcHJpdmF0ZWAgLyBgcHJvdGVjdGVkYCAvIGBwdWJsaWNgIGtleXdvcmRzKS5cbiAqIFRoZSBkZWZhdWx0IGZhY3Rvcnkgd2lsbCB0aGVuIGludm9rZSB0aGUgY29uc3RydWN0b3Igd2l0aCB0aGUgY29ycmVjdCBhcmd1bWVudHMgYXMgd2VsbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgVG9kbyB7XG4gKiAgICAgQHNlcmlhbGl6YWJsZShwcmltaXRpdmUoKSlcbiAqICAgICB0aXRsZTsgLy8gc2hvcnRoYW5kIGZvciBwcmltaXR2ZXNcbiAqXG4gKiAgICAgQHNlcmlhbGl6YWJsZSBkb25lO1xuICpcbiAqICAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgZG9uZSkge1xuICogICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gKiAgICAgICAgIHRoaXMuZG9uZSA9IGRvbmU7XG4gKiAgICAgfVxuICogfVxuICpcbiAqIHZhciBqc29uID0gc2VyaWFsaXplKG5ldyBUb2RvKCdUZXN0JywgZmFsc2UpKTtcbiAqIHZhciB0b2RvID0gZGVzZXJpYWxpemUoVG9kbywganNvbik7XG4gKlxuICogQHBhcmFtIGFyZzFcbiAqIEBwYXJhbSBhcmcyXG4gKiBAcGFyYW0gYXJnM1xuICogQHJldHVybnMge1Byb3BlcnR5RGVzY3JpcHRvcn1cbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXphYmxlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBkZWNvcmF0ZWQgd2l0aCBwcm9wU2NoZW1hXG4gICAgICAgIHZhciBwcm9wU2NoZW1hID0gYXJnMSA9PT0gdHJ1ZSA/IF9kZWZhdWx0UHJpbWl0aXZlUHJvcCA6IGFyZzE7XG4gICAgICAgIGludmFyaWFudChpc1Byb3BTY2hlbWEocHJvcFNjaGVtYSksIFwiQHNlcmlhbGl6YWJsZSBleHBlY3RzIHByb3Agc2NoZW1hXCIpO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXphYmxlRGVjb3JhdG9yLmJpbmQobnVsbCwgcHJvcFNjaGVtYSlcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWNvcmF0ZWQgd2l0aG91dCBhcmd1bWVudHMsIHRyZWF0IGFzIHByaW1pdGl2ZVxuICAgICAgICByZXR1cm4gc2VyaWFsaXphYmxlRGVjb3JhdG9yKHByaW1pdGl2ZSgpLCBhcmcxLCBhcmcyLCBhcmczKVxuICAgIH1cbn1cblxuLyoqXG4gKiBTZXJpYWxpemVzIGFuIG9iamVjdCAoZ3JhcGgpIGludG8ganNvbiB1c2luZyB0aGUgcHJvdmlkZWQgbW9kZWwgc2NoZW1hLlxuICogVGhlIG1vZGVsIHNjaGVtYSBjYW4gYmUgb21pdHRlZCBpZiB0aGUgb2JqZWN0IHR5cGUgaGFzIGEgZGVmYXVsdCBtb2RlbCBzY2hlbWEgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICogSWYgYSBsaXN0IG9mIG9iamVjdHMgaXMgcHJvdmlkZWQsIHRoZXkgc2hvdWxkIGhhdmUgYW4gdW5pZm9ybSB0eXBlLlxuICpcbiAqIEBwYXJhbSBhcmcxIGNsYXNzIG9yIG1vZGVsc2NoZW1hIHRvIHVzZS4gT3B0aW9uYWxcbiAqIEBwYXJhbSBhcmcyIG9iamVjdChzKSB0byBzZXJpYWxpemVcbiAqIEByZXR1cm5zIHtvYmplY3R9IHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICovXG5mdW5jdGlvbiBzZXJpYWxpemUoYXJnMSwgYXJnMikge1xuICAgIGludmFyaWFudChhcmd1bWVudHMubGVuZ3RoID09PSAxIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIsIFwic2VyaWFsaXplIGV4cGVjdHMgb25lIG9yIDIgYXJndW1lbnRzXCIpO1xuICAgIHZhciB0aGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBhcmcxIDogYXJnMjtcbiAgICB2YXIgc2NoZW1hID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IG51bGwgOiBhcmcxO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaW5nKSkge1xuICAgICAgICBpZiAodGhpbmcubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIFtdIC8vIGRvbid0IGJvdGhlciBmaW5kaW5nIGEgc2NoZW1hXG4gICAgICAgIGVsc2UgaWYgKCFzY2hlbWEpXG4gICAgICAgICAgICBzY2hlbWEgPSBnZXREZWZhdWx0TW9kZWxTY2hlbWEodGhpbmdbMF0pO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgc2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHNjaGVtYSk7XG4gICAgfSBlbHNlIGlmICghc2NoZW1hKSB7XG4gICAgICAgIHNjaGVtYSA9IGdldERlZmF1bHRNb2RlbFNjaGVtYSh0aGluZyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHNjaGVtYSA9IGdldERlZmF1bHRNb2RlbFNjaGVtYShzY2hlbWEpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoISFzY2hlbWEsIFwiRmFpbGVkIHRvIGZpbmQgZGVmYXVsdCBzY2hlbWEgZm9yIFwiICsgYXJnMSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpbmcpKVxuICAgICAgICByZXR1cm4gdGhpbmcubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplV2l0aFNjaGVtYShzY2hlbWEsIGl0ZW0pXG4gICAgICAgIH0pXG4gICAgcmV0dXJuIHNlcmlhbGl6ZVdpdGhTY2hlbWEoc2NoZW1hLCB0aGluZylcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGFyU2NoZW1hSW52YXJpYW50KHByb3BEZWYpIHtcbiAgICBpbnZhcmlhbnQocHJvcERlZiA9PT0gdHJ1ZSB8fCBwcm9wRGVmLnBhdHRlcm4sIFwicHJvcCBzY2hlbWEgJyonIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCAndHJ1ZScgb3IgYSBwcm9wIGRlZiB3aXRoIGEgJ3BhdHRlcm4nOiBcIiArIEpTT04uc3RyaW5naWZ5KHByb3BEZWYpKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplV2l0aFNjaGVtYShzY2hlbWEsIG9iaikge1xuICAgIGludmFyaWFudChzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIiAmJiBzY2hlbWEucHJvcHMsIFwiRXhwZWN0ZWQgc2NoZW1hXCIpO1xuICAgIGludmFyaWFudChvYmogJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiwgXCJFeHBlY3RlZCBvYmplY3RcIik7XG4gICAgdmFyIHJlcztcbiAgICBpZiAoc2NoZW1hLmV4dGVuZHMpXG4gICAgICAgIHJlcyA9IHNlcmlhbGl6ZVdpdGhTY2hlbWEoc2NoZW1hLmV4dGVuZHMsIG9iaik7XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IG1ha2UgaW52YXJpYW50PzogIGludmFyaWFudCghb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5zZXJpYWxpemVJbmZvLCBcIm9iamVjdCBoYXMgYSBzZXJpYWxpemFibGUgc3VwZXJ0eXBlLCBidXQgbW9kZWxzY2hlbWEgZGlkIG5vdCBwcm92aWRlIGV4dGVuZHMgY2xhdXNlXCIpXG4gICAgICAgIHJlcyA9IHt9O1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzY2hlbWEucHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgcHJvcERlZiA9IHNjaGVtYS5wcm9wc1trZXldO1xuICAgICAgICBpZiAoa2V5ID09PSBcIipcIikge1xuICAgICAgICAgICAgc2VyaWFsaXplU3RhclByb3BzKHNjaGVtYSwgcHJvcERlZiwgb2JqLCByZXMpO1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BEZWYgPT09IHRydWUpXG4gICAgICAgICAgICBwcm9wRGVmID0gX2RlZmF1bHRQcmltaXRpdmVQcm9wO1xuICAgICAgICBpZiAocHJvcERlZiA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgdmFyIGpzb25WYWx1ZSA9IHByb3BEZWYuc2VyaWFsaXplcihvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICBpZiAoanNvblZhbHVlID09PSBTS0lQKXtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJlc1twcm9wRGVmLmpzb25uYW1lIHx8IGtleV0gPSBqc29uVmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVTdGFyUHJvcHMoc2NoZW1hLCBwcm9wRGVmLCBvYmosIHRhcmdldCkge1xuICAgIGNoZWNrU3RhclNjaGVtYUludmFyaWFudChwcm9wRGVmKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIGlmICghKGtleSBpbiBzY2hlbWEucHJvcHMpKSB7XG4gICAgICAgIGlmICgocHJvcERlZiA9PT0gdHJ1ZSkgfHwgKHByb3BEZWYucGF0dGVybiAmJiBwcm9wRGVmLnBhdHRlcm4udGVzdChrZXkpKSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAocHJvcERlZiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BEZWYucHJvcHMpIHtcbiAgICAgICAgICAgICAgICB2YXIganNvblZhbHVlID0gc2VyaWFsaXplKHByb3BEZWYsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoanNvblZhbHVlID09PSBTS0lQKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRvZG86IHByb3BEZWYuanNvbm5hbWUgY291bGQgYmUgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gb24ga2V5XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBqc29uVmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBqc29uVmFsdWUgPSBwcm9wRGVmLnNlcmlhbGl6ZXIodmFsdWUsIGtleSwgb2JqKTtcbiAgICAgICAgICAgICAgICBpZiAoanNvblZhbHVlID09PSBTS0lQKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRvZG86IHByb3BEZWYuanNvbm5hbWUgY291bGQgYmUgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gb24ga2V5XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBqc29uVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciByb290Q29udGV4dENhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxuZnVuY3Rpb24gQ29udGV4dChwYXJlbnRDb250ZXh0LCBtb2RlbFNjaGVtYSwganNvbiwgb25SZWFkeUNiLCBjdXN0b21BcmdzKSB7XG4gICAgdGhpcy5wYXJlbnRDb250ZXh0ID0gcGFyZW50Q29udGV4dDtcbiAgICB0aGlzLmlzUm9vdCA9ICFwYXJlbnRDb250ZXh0O1xuICAgIHRoaXMucGVuZGluZ0NhbGxiYWNrcyA9IDA7XG4gICAgdGhpcy5wZW5kaW5nUmVmc0NvdW50ID0gMDtcbiAgICB0aGlzLm9uUmVhZHlDYiA9IG9uUmVhZHlDYiB8fCBHVUFSREVEX05PT1A7XG4gICAgdGhpcy5qc29uID0ganNvbjtcbiAgICB0aGlzLnRhcmdldCA9IG51bGw7IC8vIGFsd2F5cyBzZXQgdGhpcyBwcm9wZXJ0eSB1c2luZyBzZXRUYXJnZXRcbiAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlbFNjaGVtYSA9IG1vZGVsU2NoZW1hO1xuICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICB0aGlzLnJvb3RDb250ZXh0ID0gdGhpcztcbiAgICAgICAgdGhpcy5hcmdzID0gY3VzdG9tQXJncztcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVmcyA9IHt9OyAvLyB1dWlkOiBbeyBtb2RlbFNjaGVtYSwgdXVpZCwgY2IgfV1cbiAgICAgICAgdGhpcy5yZXNvbHZlZFJlZnMgPSB7fTsgLy8gdXVpZDogW3sgbW9kZWxTY2hlbWEsIHZhbHVlIH1dXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yb290Q29udGV4dCA9IHBhcmVudENvbnRleHQucm9vdENvbnRleHQ7XG4gICAgICAgIHRoaXMuYXJncyA9IHBhcmVudENvbnRleHQuYXJncztcbiAgICB9XG59XG5cbkNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUNhbGxiYWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgdGhpcy5wZW5kaW5nQ2FsbGJhY2tzKys7XG4gICAgLy8gb25jZTogZGVmZW5kIGFnYWluc3QgdXNlci1sYW5kIGNhbGxpbmcgJ2RvbmUnIHR3aWNlXG4gICAgcmV0dXJuIG9uY2UoZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlYWR5Q2IoZXJyKTtcbiAgICAgICAgICAgICAgICByb290Q29udGV4dENhY2hlLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICAgICAgaWYgKC0tdGhpcy5wZW5kaW5nQ2FsbGJhY2tzID09PSB0aGlzLnBlbmRpbmdSZWZzQ291bnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nUmVmc0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhbGwgcGVuZGluZyBjYWxsYmFja3MgYXJlIHBlbmRpbmcgcmVmZXJlbmNlIHJlc29sdmVycy4gbm90IGdvb2QuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25SZWFkeUNiKG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVW5yZXNvbHZhYmxlIHJlZmVyZW5jZXMgaW4ganNvbjogXFxcIlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMucGVuZGluZ1JlZnMpLmZpbHRlcihmdW5jdGlvbiAodXVpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdSZWZzW3V1aWRdLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpLmpvaW4oXCJcXFwiLCBcXFwiXCIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxcIlwiXG4gICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICByb290Q29udGV4dENhY2hlLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUmVhZHlDYihudWxsLCB0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RDb250ZXh0Q2FjaGUuZGVsZXRlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSlcbn07XG5cbi8vIGdpdmVuIGFuIG9iamVjdCB3aXRoIHV1aWQsIG1vZGVsU2NoZW1hLCBjYWxsYmFjaywgYXdhaXRzIHVudGlsIHRoZSBnaXZlbiB1dWlkIGlzIGF2YWlsYWJsZVxuLy8gcmVzb2x2ZSBpbW1lZGlhdGVseSBpZiBwb3NzaWJsZVxuQ29udGV4dC5wcm90b3R5cGUuYXdhaXQgPSBmdW5jdGlvbiAobW9kZWxTY2hlbWEsIHV1aWQsIGNhbGxiYWNrKSB7XG4gICAgaW52YXJpYW50KHRoaXMuaXNSb290KTtcbiAgICBpZiAodXVpZCBpbiB0aGlzLnJlc29sdmVkUmVmcykge1xuICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLnJlc29sdmVkUmVmc1t1dWlkXS5maWx0ZXIoZnVuY3Rpb24gKHJlc29sdmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBc3NpZ25hYmxlVG8ocmVzb2x2ZWQubW9kZWxTY2hlbWEsIG1vZGVsU2NoZW1hKVxuICAgICAgICB9KVswXTtcbiAgICAgICAgaWYgKG1hdGNoKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgY2FsbGJhY2sobnVsbCwgbWF0Y2gudmFsdWUpXG4gICAgfVxuICAgIHRoaXMucGVuZGluZ1JlZnNDb3VudCsrO1xuICAgIGlmICghdGhpcy5wZW5kaW5nUmVmc1t1dWlkXSlcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVmc1t1dWlkXSA9IFtdO1xuICAgIHRoaXMucGVuZGluZ1JlZnNbdXVpZF0ucHVzaCh7XG4gICAgICAgIG1vZGVsU2NoZW1hOiBtb2RlbFNjaGVtYSxcbiAgICAgICAgdXVpZDogdXVpZCxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgfSk7XG59O1xuXG4vLyBnaXZlbiBhIG1vZGVsIHNjaGVtYSwgdXVpZCBhbmQgdmFsdWUsIHJlc29sdmUgYWxsIHJlZmVyZW5jZXMgdGhhdCB3aGVyZSBsb29raW5nIGZvciB0aGlzIG9iamVjdFxuQ29udGV4dC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChtb2RlbFNjaGVtYSwgdXVpZCwgdmFsdWUpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5pc1Jvb3QpO1xuICAgIGlmICghdGhpcy5yZXNvbHZlZFJlZnNbdXVpZF0pXG4gICAgICAgIHRoaXMucmVzb2x2ZWRSZWZzW3V1aWRdID0gW107XG4gICAgdGhpcy5yZXNvbHZlZFJlZnNbdXVpZF0ucHVzaCh7XG4gICAgICAgIG1vZGVsU2NoZW1hOiBtb2RlbFNjaGVtYSwgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gICAgaWYgKHV1aWQgaW4gdGhpcy5wZW5kaW5nUmVmcykge1xuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5wZW5kaW5nUmVmc1t1dWlkXS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIG9wdHMgPSB0aGlzLnBlbmRpbmdSZWZzW3V1aWRdW2ldO1xuICAgICAgICAgICAgaWYgKGlzQXNzaWduYWJsZVRvKG1vZGVsU2NoZW1hLCBvcHRzLm1vZGVsU2NoZW1hKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1JlZnNbdXVpZF0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1JlZnNDb3VudC0tO1xuICAgICAgICAgICAgICAgIG9wdHMuY2FsbGJhY2sobnVsbCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuLy8gc2V0IHRhcmdldCBhbmQgdXBkYXRlIHJvb3QgY29udGV4dCBjYWNoZVxuQ29udGV4dC5wcm90b3R5cGUuc2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGlmICh0aGlzLmlzUm9vdCAmJiB0aGlzLnRhcmdldCkge1xuICAgICAgICByb290Q29udGV4dENhY2hlLmRlbGV0ZSh0aGlzLnRhcmdldCk7XG4gICAgfVxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHJvb3RDb250ZXh0Q2FjaGUuc2V0KHRoaXMudGFyZ2V0LCB0aGlzKTtcbn07XG5cbi8vIGNhbGwgYWxsIHJlbWFpbmluZyByZWZlcmVuY2UgbG9va3VwIGNhbGxiYWNrcyBpbmRpY2F0aW5nIGFuIGVycm9yIGR1cmluZyByZWYgcmVzb2x1dGlvblxuQ29udGV4dC5wcm90b3R5cGUuY2FuY2VsQXdhaXRzID0gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudCh0aGlzLmlzUm9vdCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIE9iamVjdC5rZXlzKHRoaXMucGVuZGluZ1JlZnMpLmZvckVhY2goZnVuY3Rpb24gKHV1aWQpIHtcbiAgICAgICAgc2VsZi5wZW5kaW5nUmVmc1t1dWlkXS5mb3JFYWNoKGZ1bmN0aW9uIChyZWZPcHRzKSB7XG4gICAgICAgICAgICBzZWxmLnBlbmRpbmdSZWZzQ291bnQtLTtcbiAgICAgICAgICAgIHJlZk9wdHMuY2FsbGJhY2sobmV3IEVycm9yKFwiUmVmZXJlbmNlIHJlc29sdXRpb24gY2FuY2VsZWQgZm9yIFwiICsgdXVpZCkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLnBlbmRpbmdSZWZzID0ge307XG4gICAgdGhpcy5wZW5kaW5nUmVmc0NvdW50ID0gMDtcbn07XG5cbmZ1bmN0aW9uIGdldFRhcmdldENvbnRleHQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHJvb3RDb250ZXh0Q2FjaGUuZ2V0KHRhcmdldClcbn1cblxuLypcbiAqIERlc2VyaWFsaXphdGlvblxuICovXG5cbmZ1bmN0aW9uIHNjaGVtYUhhc0FsaWFzKHNjaGVtYSwgbmFtZSkge1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEucHJvcHMpXG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLnByb3BzW2tleV0gPT09IFwib2JqZWN0XCIgJiYgc2NoZW1hLnByb3BzW2tleV0uanNvbm5hbWUgPT09IG5hbWUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVN0YXJQcm9wcyhjb250ZXh0LCBzY2hlbWEsIHByb3BEZWYsIG9iaiwganNvbikge1xuICAgIGNoZWNrU3RhclNjaGVtYUludmFyaWFudChwcm9wRGVmKTtcbiAgICBmb3IgKHZhciBrZXkgaW4ganNvbikgaWYgKCEoa2V5IGluIHNjaGVtYS5wcm9wcykgJiYgIXNjaGVtYUhhc0FsaWFzKHNjaGVtYSwga2V5KSkge1xuICAgICAgICB2YXIganNvblZhbHVlID0ganNvbltrZXldO1xuICAgICAgICBpZiAocHJvcERlZiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gd2hlbiBkZXNlcmlhbGl6aW5nIHdlIGRvbid0IHdhbnQgdG8gc2lsZW50bHkgaWdub3JlICd1bnBhcnNlYWJsZSBkYXRhJyB0byBhdm9pZFxuICAgICAgICAgICAgLy8gY29uZnVzaW5nIGJ1Z3NcbiAgICAgICAgICAgIGludmFyaWFudChpc1ByaW1pdGl2ZShqc29uVmFsdWUpLFxuICAgICAgICAgICAgICAgIFwiZW5jb3VudGVyZWQgbm9uIHByaW1pdGl2ZSB2YWx1ZSB3aGlsZSBkZXNlcmlhbGl6aW5nICcqJyBwcm9wZXJ0aWVzIGluIHByb3BlcnR5ICdcIiArXG4gICAgICAgICAgICAgICAga2V5ICsgXCInOiBcIiArIGpzb25WYWx1ZSk7XG4gICAgICAgICAgICBvYmpba2V5XSA9IGpzb25WYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wRGVmLnBhdHRlcm4udGVzdChrZXkpKSB7XG4gICAgICAgICAgICBpZiAocHJvcERlZi5mYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdFZhbHVlID0gZGVzZXJpYWxpemVPYmplY3RXaXRoU2NoZW1hKGNvbnRleHQsIHByb3BEZWYsIGpzb25WYWx1ZSwgY29udGV4dC5jYWxsYmFjayB8fCBHVUFSREVEX05PT1AsIHt9KTtcbiAgICAgICAgICAgICAgICAvLyBkZXNlcmlhbGl6ZU9iamVjdFdpdGhTY2hlbWEgcmV0dXJucyB1bmRlZmluZWQgb24gZXJyb3JcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHJlc3VsdFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0VmFsdWUocmVzdWx0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFZhbHVlICE9PSBTS0lQKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHJlc3VsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb3BEZWYuZGVzZXJpYWxpemVyKGpzb25WYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGluZGl2aWR1YWwgcHJvcHMsIHVzZSByb290IGNvbnRleHQgYmFzZWQgY2FsbGJhY2tzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIHByb3BzIHRvIGNvbXBsZXRlIGFmdGVyIGNvbXBsZXRpbmcgdGhlIG9iamVjdCBpdHNlbGZcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxpbmcgcmVmZXJlbmNlIHJlc29sdmluZyBhbmQgc3VjaFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJvb3RDb250ZXh0LmNyZWF0ZUNhbGxiYWNrKHNldFZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGEganNvbiBzdHJ1Y3R1cmUgaW50byBhbiBvYmplY3QgZ3JhcGguXG4gKlxuICogVGhpcyBwcm9jZXNzIG1pZ2h0IGJlIGFzeW5jaHJvbm91cyAoZm9yIGV4YW1wbGUgaWYgdGhlcmUgYXJlIHJlZmVyZW5jZXMgd2l0aCBhbiBhc3luY2hyb25vdXNcbiAqIGxvb2t1cCBmdW5jdGlvbikuIFRoZSBmdW5jdGlvbiByZXR1cm5zIGFuIG9iamVjdCAob3IgYXJyYXkgb2Ygb2JqZWN0cyksIGJ1dCB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gKiBtaWdodCBiZSBpbmNvbXBsZXRlIHVudGlsIHRoZSBjYWxsYmFjayBoYXMgZmlyZWQgYXMgd2VsbCAod2hpY2ggbWlnaHQgaGFwcGVuIGltbWVkaWF0ZWx5KVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSBzY2hlbWEgdG8gdXNlIGZvciBkZXNlcmlhbGl6YXRpb25cbiAqIEBwYXJhbSB7anNvbn0ganNvbiBkYXRhIHRvIGRlc2VyaWFsaXplXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBub2RlIHN0eWxlIGNhbGxiYWNrIHRoYXQgaXMgaW52b2tlZCBvbmNlIHRoZSBkZXNlcmlhbGl6YXRpb24gaGFzXG4gKiAgIGZpbmlzaGVkLiBGaXJzdCBhcmd1bWVudCBpcyB0aGUgb3B0aW9uYWwgZXJyb3IsIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgZGVzZXJpYWxpemVkIG9iamVjdFxuICogICAoc2FtZSBhcyB0aGUgcmV0dXJuIHZhbHVlKVxuICogQHBhcmFtIHsqfSBjdXN0b21BcmdzIGN1c3RvbSBhcmd1bWVudHMgdGhhdCBhcmUgYXZhaWxhYmxlIGFzIGBjb250ZXh0LmFyZ3NgIGR1cmluZyB0aGVcbiAqICAgZGVzZXJpYWxpemF0aW9uIHByb2Nlc3MuIFRoaXMgY2FuIGJlIHVzZWQgYXMgZGVwZW5kZW5jeSBpbmplY3Rpb24gbWVjaGFuaXNtIHRvIHBhc3MgaW4sIGZvclxuICogICBleGFtcGxlLCBzdG9yZXMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fGFycmF5fSBkZXNlcmlhbGl6ZWQgb2JqZWN0LCBwb3NzaWJseSBpbmNvbXBsZXRlLlxuICovXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZShzY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKSB7XG4gICAgaW52YXJpYW50KGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgXCJkZXNlcmlhbGl6ZSBleHBlY3RzIGF0IGxlYXN0IDIgYXJndW1lbnRzXCIpO1xuICAgIHNjaGVtYSA9IGdldERlZmF1bHRNb2RlbFNjaGVtYShzY2hlbWEpO1xuICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKHNjaGVtYSksIFwiZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIG1vZGVsIHNjaGVtYVwiKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uKSkge1xuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgcGFyYWxsZWwoXG4gICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGNoaWxkSnNvbiwgaXRlbURvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBkZXNlcmlhbGl6ZU9iamVjdFdpdGhTY2hlbWEobnVsbCwgc2NoZW1hLCBjaGlsZEpzb24sIGl0ZW1Eb25lLCBjdXN0b21BcmdzKTtcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZSBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgc28gY2FuIGJlIHB1c2hlZFxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrIHx8IEdVQVJERURfTk9PUFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gaXRlbXNcbiAgICB9IGVsc2VcbiAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplT2JqZWN0V2l0aFNjaGVtYShudWxsLCBzY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKVxufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZU9iamVjdFdpdGhTY2hlbWEocGFyZW50Q29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKSB7XG4gICAgaWYgKGpzb24gPT09IG51bGwgfHwganNvbiA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBqc29uICE9PSBcIm9iamVjdFwiKVxuICAgICAgICByZXR1cm4gdm9pZCBjYWxsYmFjayhudWxsLCBudWxsKVxuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQocGFyZW50Q29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKTtcbiAgICB2YXIgdGFyZ2V0ID0gbW9kZWxTY2hlbWEuZmFjdG9yeShjb250ZXh0KTtcbiAgICAvLyB0b2RvIGFzeW5jIGludmFyaWFudFxuICAgIGludmFyaWFudCghIXRhcmdldCwgXCJObyBvYmplY3QgcmV0dXJuZWQgZnJvbSBmYWN0b3J5XCIpO1xuICAgIC8vIFRPRE86IG1ha2UgaW52YXJpYW50PyAgICAgICAgICAgIGludmFyaWFudChzY2hlbWEuZXh0ZW5kcyB8fFxuICAgIC8vICF0YXJnZXQuY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLnNlcmlhbGl6ZUluZm8sIFwib2JqZWN0IGhhcyBhIHNlcmlhbGl6YWJsZVxuICAgIC8vIHN1cGVydHlwZSwgYnV0IG1vZGVsc2NoZW1hIGRpZCBub3QgcHJvdmlkZSBleHRlbmRzIGNsYXVzZVwiKVxuICAgIGNvbnRleHQuc2V0VGFyZ2V0KHRhcmdldCk7XG4gICAgdmFyIGxvY2sgPSBjb250ZXh0LmNyZWF0ZUNhbGxiYWNrKEdVQVJERURfTk9PUCk7XG4gICAgZGVzZXJpYWxpemVQcm9wc1dpdGhTY2hlbWEoY29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIHRhcmdldCk7XG4gICAgbG9jaygpO1xuICAgIHJldHVybiB0YXJnZXRcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVQcm9wc1dpdGhTY2hlbWEoY29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIHRhcmdldCkge1xuICAgIGlmIChtb2RlbFNjaGVtYS5leHRlbmRzKVxuICAgICAgICBkZXNlcmlhbGl6ZVByb3BzV2l0aFNjaGVtYShjb250ZXh0LCBtb2RlbFNjaGVtYS5leHRlbmRzLCBqc29uLCB0YXJnZXQpO1xuXG4gICAgZnVuY3Rpb24gZGVzZXJpYWxpemVQcm9wKHByb3BEZWYsIGpzb25WYWx1ZSwgcHJvcE5hbWUpIHtcblxuICAgICAgICBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBTS0lQKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcHJlUHJvY2VzcyhyZXN1bHRDYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlcnIsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmluYWxDYWxsYmFjayhlcnJQcmVsaW1pbmFyeSwgZmluYWxPclJldHJ5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyclByZWxpbWluYXJ5ICYmIGZpbmFsT3JSZXRyeVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBwcm9wRGVmLmFmdGVyRGVzZXJpYWxpemUgPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wRGVmLmRlc2VyaWFsaXplcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbE9yUmV0cnlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVQcm9jZXNzKHJlc3VsdENhbGxiYWNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wTmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayhlcnJQcmVsaW1pbmFyeSwgZmluYWxPclJldHJ5VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb25BZnRlckRlc2VyaWFsaXplKGZpbmFsQ2FsbGJhY2ssIGVyciwgbmV3VmFsdWUsIGpzb25WYWx1ZSwganNvbixcbiAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWUsIGNvbnRleHQsIHByb3BEZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvcERlZi5kZXNlcmlhbGl6ZXIoXG4gICAgICAgICAgICBqc29uVmFsdWUsXG4gICAgICAgICAgICAvLyBmb3IgaW5kaXZpZHVhbCBwcm9wcywgdXNlIHJvb3QgY29udGV4dCBiYXNlZCBjYWxsYmFja3NcbiAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIHByb3BzIHRvIGNvbXBsZXRlIGFmdGVyIGNvbXBsZXRpbmcgdGhlIG9iamVjdCBpdHNlbGZcbiAgICAgICAgICAgIC8vIGVuYWJsaW5nIHJlZmVyZW5jZSByZXNvbHZpbmcgYW5kIHN1Y2hcbiAgICAgICAgICAgIHByZVByb2Nlc3MoY29udGV4dC5yb290Q29udGV4dC5jcmVhdGVDYWxsYmFjayhzZXRWYWx1ZSkpLFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIHRhcmdldFtwcm9wTmFtZV0gLy8gaW5pdGlhbCB2YWx1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKG1vZGVsU2NoZW1hLnByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgICB2YXIgcHJvcERlZiA9IG1vZGVsU2NoZW1hLnByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgICBmdW5jdGlvbiBjYWxsYmFja0Rlc2VyaWFsaXplKGVyciwganNvblZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWVyciAmJiBqc29uVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlc2VyaWFsaXplUHJvcChwcm9wRGVmLCBqc29uVmFsdWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcE5hbWUgPT09IFwiKlwiKSB7XG4gICAgICAgICAgICBkZXNlcmlhbGl6ZVN0YXJQcm9wcyhjb250ZXh0LCBtb2RlbFNjaGVtYSwgcHJvcERlZiwgdGFyZ2V0LCBqc29uKTtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wRGVmID09PSB0cnVlKVxuICAgICAgICAgICAgcHJvcERlZiA9IF9kZWZhdWx0UHJpbWl0aXZlUHJvcDtcbiAgICAgICAgaWYgKHByb3BEZWYgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIHZhciBqc29uQXR0ciA9IHByb3BEZWYuanNvbm5hbWUgfHwgcHJvcE5hbWU7XG4gICAgICAgIHZhciBqc29uVmFsdWUgPSBqc29uW2pzb25BdHRyXTtcbiAgICAgICAgb25CZWZvcmVEZXNlcmlhbGl6ZShjYWxsYmFja0Rlc2VyaWFsaXplLCBqc29uVmFsdWUsIGpzb24sIGpzb25BdHRyLCBjb250ZXh0LCBwcm9wRGVmKTtcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBvbkJlZm9yZURlc2VyaWFsaXplKFxuICAgIGNhbGxiYWNrLCBqc29uVmFsdWUsIGpzb25QYXJlbnRWYWx1ZSwgcHJvcE5hbWVPckluZGV4LCBjb250ZXh0LCBwcm9wRGVmKSB7XG5cbiAgICBpZiAocHJvcERlZiAmJiB0eXBlb2YgcHJvcERlZi5iZWZvcmVEZXNlcmlhbGl6ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHByb3BEZWYuYmVmb3JlRGVzZXJpYWxpemUoY2FsbGJhY2ssIGpzb25WYWx1ZSwganNvblBhcmVudFZhbHVlLCBwcm9wTmFtZU9ySW5kZXgsIGNvbnRleHQsXG4gICAgICAgICAgICBwcm9wRGVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBqc29uVmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25BZnRlckRlc2VyaWFsaXplKFxuICAgIGNhbGxiYWNrLCBlcnIsIG5ld1ZhbHVlLCBqc29uVmFsdWUsIGpzb25QYXJlbnRWYWx1ZSwgcHJvcE5hbWVPckluZGV4LCBjb250ZXh0LCBwcm9wRGVmKSB7XG5cbiAgICBpZiAocHJvcERlZiAmJiB0eXBlb2YgcHJvcERlZi5hZnRlckRlc2VyaWFsaXplID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcHJvcERlZi5hZnRlckRlc2VyaWFsaXplKGNhbGxiYWNrLCBlcnIsIG5ld1ZhbHVlLCBqc29uVmFsdWUsIGpzb25QYXJlbnRWYWx1ZSxcbiAgICAgICAgICAgIHByb3BOYW1lT3JJbmRleCwgY29udGV4dCwgcHJvcERlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBuZXdWYWx1ZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIGBvYmplY3RgIGluZGljYXRlcyB0aGF0IHRoaXMgcHJvcGVydHkgY29udGFpbnMgYW4gb2JqZWN0IHRoYXQgbmVlZHMgdG8gYmUgKGRlKXNlcmlhbGl6ZWRcbiAqIHVzaW5nIGl0cyBvd24gbW9kZWwgc2NoZW1hLlxuICpcbiAqIE4uQi4gbWluZCBpc3N1ZXMgd2l0aCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgd2hlbiBpbXBvcnRpbmcgbW9kZWwgc2NoZW1hJ3MgZnJvbSBvdGhlciBmaWxlcyEgVGhlIG1vZHVsZSByZXNvbHZlIGFsZ29yaXRobSBtaWdodCBleHBvc2UgY2xhc3NlcyBiZWZvcmUgYGNyZWF0ZU1vZGVsU2NoZW1hYCBpcyBleGVjdXRlZCBmb3IgdGhlIHRhcmdldCBjbGFzcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgU3ViVGFzayB7fVxuICogY2xhc3MgVG9kbyB7fVxuICpcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKFN1YlRhc2ssIHtcbiAqICAgICB0aXRsZTogdHJ1ZSxcbiAqIH0pO1xuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiB0cnVlLFxuICogICAgIHN1YlRhc2s6IG9iamVjdChTdWJUYXNrKSxcbiAqIH0pO1xuICpcbiAqIGNvbnN0IHRvZG8gPSBkZXNlcmlhbGl6ZShUb2RvLCB7XG4gKiAgICAgdGl0bGU6ICdUYXNrJyxcbiAqICAgICBzdWJUYXNrOiB7XG4gKiAgICAgICAgIHRpdGxlOiAnU3ViIHRhc2snLFxuICogICAgIH0sXG4gKiB9KTtcbiAqXG4gKiBAcGFyYW0ge01vZGVsU2NoZW1hfSBtb2RlbFNjaGVtYSB0byBiZSB1c2VkIHRvIChkZSlzZXJpYWxpemUgdGhlIG9iamVjdFxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFkZGl0aW9uYWxBcmdzIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zIGJlZm9yZURlc2VyaWFsaXplIGFuZC9vciBhZnRlckRlc2VyaWFsaXplIGhhbmRsZXJzXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gb2JqZWN0KG1vZGVsU2NoZW1hLCBhZGRpdGlvbmFsQXJncykge1xuICAgIGludmFyaWFudCh0eXBlb2YgbW9kZWxTY2hlbWEgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG1vZGVsU2NoZW1hID09PSBcImZ1bmN0aW9uXCIsIFwiTm8gbW9kZWxzY2hlbWEgcHJvdmlkZWQuIElmIHlvdSBhcmUgaW1wb3J0aW5nIGl0IGZyb20gYW5vdGhlciBmaWxlIGJlIGF3YXJlIG9mIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cIik7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSwgXCJleHBlY3RlZCBtb2RlbFNjaGVtYSwgZ290IFwiICsgbW9kZWxTY2hlbWEpO1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IG51bGwgfHwgaXRlbSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtXG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKG1vZGVsU2NoZW1hLCBpdGVtKVxuICAgICAgICB9LFxuICAgICAgICBkZXNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChjaGlsZEpzb24sIGRvbmUsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSwgXCJleHBlY3RlZCBtb2RlbFNjaGVtYSwgZ290IFwiICsgbW9kZWxTY2hlbWEpO1xuICAgICAgICAgICAgaWYgKGNoaWxkSnNvbiA9PT0gbnVsbCB8fCBjaGlsZEpzb24gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKG51bGwsIGNoaWxkSnNvbilcbiAgICAgICAgICAgIHJldHVybiB2b2lkIGRlc2VyaWFsaXplT2JqZWN0V2l0aFNjaGVtYShjb250ZXh0LCBtb2RlbFNjaGVtYSwgY2hpbGRKc29uLCBkb25lLCBhZGRpdGlvbmFsQXJncylcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzdWx0ID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXN1bHQsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogVGhlIGBzZXJpYWxpemVBbGxgIGRlY29yYXRvciBjYW4gbWF5IHVzZWQgb24gYSBjbGFzcyB0byBzaWduYWwgdGhhdCBhbGwgcHJpbWl0aXZlIHByb3BlcnRpZXMsXG4gKiBvciBjb21wbGV4IHByb3BlcnRpZXMgd2l0aCBhIG5hbWUgbWF0Y2hpbmcgYSBgcGF0dGVybmAsIHNob3VsZCBiZSBzZXJpYWxpemVkIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEBzZXJpYWxpemVBbGwgY2xhc3MgU3RvcmUge1xuICogICAgIGEgPSAzO1xuICogICAgIGI7XG4gKiB9XG4gKlxuICogY29uc3Qgc3RvcmUgPSBuZXcgU3RvcmUoKTtcbiAqIHN0b3JlLmMgPSA1O1xuICogc3RvcmUuZCA9IHt9O1xuICogdC5kZWVwRXF1YWwoc2VyaWFsaXplKHN0b3JlKSwgeyBjOiA1IH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKiBjbGFzcyBEYXRhVHlwZSB7XG4gKiAgICAgQHNlcmlhbGl6YWJsZVxuICogICAgIHg7XG4gKiAgICAgQHNlcmlhbGl6YWJsZVxuICogICAgIHk7XG4gKiB9XG4gKiBAc2VyaWFsaXplQWxsKC9eW2Etel0kLywgRGF0YVR5cGUpIGNsYXNzIENvbXBsZXhTdG9yZSB7XG4gKiB9XG4gKlxuICogY29uc3Qgc3RvcmUgPSBuZXcgQ29tcGxleFN0b3JlKCk7XG4gKiBzdG9yZS5hID0ge3g6IDEsIHk6IDJ9O1xuICogc3RvcmUuYiA9IHt9O1xuICogc3RvcmUuc29tZXRoaW5nRWxzZSA9IDU7XG4gKiB0LmRlZXBFcXVhbChzZXJpYWxpemUoc3RvcmUpLCB7IGE6IHt4OiAxLCB5OiAyfSwgYjogeyB4OiB1bmRlZmluZWQsIHk6IHVuZGVmaW5lZCB9IH0pO1xuICovXG5mdW5jdGlvbiBzZXJpYWxpemVBbGwodGFyZ2V0T3JQYXR0ZXJuLCBjbGF6ek9yU2NoZW1hKSB7XG4gICAgbGV0IHByb3BTY2hlbWE7XG4gICAgbGV0IGludm9rZUltbWVkaWF0ZWx5ID0gZmFsc2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXRPclBhdHRlcm4gPT09IFwiZnVuY3Rpb25cIiwgXCJAc2VyaWFsaXplQWxsIGNhbiBvbmx5IGJlIHVzZWQgYXMgY2xhc3MgZGVjb3JhdG9yXCIpO1xuICAgICAgICBwcm9wU2NoZW1hID0gdHJ1ZTtcbiAgICAgICAgaW52b2tlSW1tZWRpYXRlbHkgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXRPclBhdHRlcm4gPT09IFwib2JqZWN0XCIgJiYgdGFyZ2V0T3JQYXR0ZXJuLnRlc3QsIFwiQHNlcmlhbGl6ZUFsbCBwYXR0ZXJuIGRvZXNuJ3QgaGF2ZSB0ZXN0XCIpO1xuICAgICAgICBpZiAodHlwZW9mIGNsYXp6T3JTY2hlbWEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2xhenpPclNjaGVtYSA9IG9iamVjdChjbGF6ek9yU2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGNsYXp6T3JTY2hlbWEgPT09IFwib2JqZWN0XCIgJiYgY2xhenpPclNjaGVtYS5zZXJpYWxpemVyLCBcImNvdWxkbid0IHJlc29sdmUgc2NoZW1hXCIpO1xuICAgICAgICBwcm9wU2NoZW1hID0gT2JqZWN0LmFzc2lnbih7fSwgY2xhenpPclNjaGVtYSwge3BhdHRlcm46IHRhcmdldE9yUGF0dGVybn0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXN1bHQodGFyZ2V0KSB7XG4gICAgICAgIHZhciBpbmZvID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCk7XG4gICAgICAgIGlmICghaW5mbyB8fCAhdGFyZ2V0Lmhhc093blByb3BlcnR5KFwic2VyaWFsaXplSW5mb1wiKSkge1xuICAgICAgICAgICAgaW5mbyA9IGNyZWF0ZU1vZGVsU2NoZW1hKHRhcmdldCwge30pO1xuICAgICAgICAgICAgc2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCwgaW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCkucHJvcHNbXCIqXCJdID0gcHJvcFNjaGVtYTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgaWYgKGludm9rZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQodGFyZ2V0T3JQYXR0ZXJuKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLypcbiAqIERlc2VyaWFsaXphdGlvblxuICovXG5cblxuLyoqXG4gKiBDYW5jZWxzIGFuIGFzeW5jaHJvbm91cyBkZXNlcmlhbGl6YXRpb24gb3IgdXBkYXRlIG9wZXJhdGlvbiBmb3IgdGhlIHNwZWNpZmllZCB0YXJnZXQgb2JqZWN0LlxuICogQHBhcmFtIGluc3RhbmNlIG9iamVjdCB0aGF0IHdhcyBwcmV2aW91c2x5IHJldHVybmVkIGZyb20gZGVzZXJpYWxpemUgb3IgdXBkYXRlIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjYW5jZWxEZXNlcmlhbGl6ZShpbnN0YW5jZSkge1xuICAgIGludmFyaWFudCh0eXBlb2YgaW5zdGFuY2UgPT09IFwib2JqZWN0XCIgJiYgaW5zdGFuY2UgJiYgIUFycmF5LmlzQXJyYXkoaW5zdGFuY2UpLCBcImNhbmNlbERlc2VyaWFsaXplIG5lZWRzIGFuIG9iamVjdFwiKTtcbiAgICB2YXIgY29udGV4dCA9IGdldFRhcmdldENvbnRleHQoaW5zdGFuY2UpO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuY2FuY2VsQXdhaXRzKCk7XG4gICAgfVxufVxuXG4vKlxuICogVXBkYXRlXG4gKi9cblxuLyoqXG4gKiBTaW1pbGFyIHRvIGRlc2VyaWFsaXplLCBidXQgdXBkYXRlcyBhbiBleGlzdGluZyBvYmplY3QgaW5zdGFuY2UuXG4gKiBQcm9wZXJ0aWVzIHdpbGwgYWx3YXlzIHVwZGF0ZWQgZW50aXJlbHksIGJ1dCBwcm9wZXJ0aWVzIG5vdCBwcmVzZW50IGluIHRoZSBqc29uIHdpbGwgYmUga2VwdCBhcyBpcy5cbiAqIEZ1cnRoZXIgdGhpcyBtZXRob2QgYmVoYXZlcyBzaW1pbGFyIHRvIGRlc2VyaWFsaXplLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBtb2RlbFNjaGVtYSwgb3B0aW9uYWwgaWYgaXQgY2FuIGJlIGluZmVycmVkIGZyb20gdGhlIGluc3RhbmNlIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXQgdGFyZ2V0IGluc3RhbmNlIHRvIHVwZGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGpzb24gdGhlIGpzb24gdG8gZGVzZXJpYWxpemVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIHRoZSBjYWxsYmFjayB0byBpbnZva2Ugb25jZSBkZXNlcmlhbGl6YXRpb24gaGFzIGNvbXBsZXRlZC5cbiAqIEBwYXJhbSB7Kn0gY3VzdG9tQXJncyBjdXN0b20gYXJndW1lbnRzIHRoYXQgYXJlIGF2YWlsYWJsZSBhcyBgY29udGV4dC5hcmdzYCBkdXJpbmcgdGhlIGRlc2VyaWFsaXphdGlvbiBwcm9jZXNzLiBUaGlzIGNhbiBiZSB1c2VkIGFzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIG1lY2hhbmlzbSB0byBwYXNzIGluLCBmb3IgZXhhbXBsZSwgc3RvcmVzLlxuICogQHJldHVybnMge29iamVjdHxhcnJheX0gZGVzZXJpYWxpemVkIG9iamVjdCwgcG9zc2libHkgaW5jb21wbGV0ZS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlKG1vZGVsU2NoZW1hLCB0YXJnZXQsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKSB7XG4gICAgdmFyIGluZmVyTW9kZWxTY2hlbWEgPVxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAyIC8vIG9ubHkgdGFyZ2V0IGFuZCBqc29uXG4gICAgICAgIHx8IHR5cGVvZiBhcmd1bWVudHNbMl0gPT09IFwiZnVuY3Rpb25cIjsgLy8gY2FsbGJhY2sgYXMgdGhpcmQgYXJnXG5cbiAgICBpZiAoaW5mZXJNb2RlbFNjaGVtYSkge1xuICAgICAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCk7XG4gICAgICAgIGpzb24gPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGNhbGxiYWNrID0gYXJndW1lbnRzWzJdO1xuICAgICAgICBjdXN0b21BcmdzID0gYXJndW1lbnRzWzNdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKTtcbiAgICB9XG4gICAgaW52YXJpYW50KGlzTW9kZWxTY2hlbWEobW9kZWxTY2hlbWEpLCBcInVwZGF0ZSBmYWlsZWQgdG8gZGV0ZXJtaW5lIHNjaGVtYVwiKTtcbiAgICBpbnZhcmlhbnQodHlwZW9mIHRhcmdldCA9PT0gXCJvYmplY3RcIiAmJiB0YXJnZXQgJiYgIUFycmF5LmlzQXJyYXkodGFyZ2V0KSwgXCJ1cGRhdGUgbmVlZHMgYW4gb2JqZWN0XCIpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQobnVsbCwgbW9kZWxTY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKTtcbiAgICBjb250ZXh0LnNldFRhcmdldCh0YXJnZXQpO1xuICAgIHZhciBsb2NrID0gY29udGV4dC5jcmVhdGVDYWxsYmFjayhHVUFSREVEX05PT1ApO1xuICAgIHZhciByZXN1bHQgPSBkZXNlcmlhbGl6ZVByb3BzV2l0aFNjaGVtYShjb250ZXh0LCBtb2RlbFNjaGVtYSwganNvbiwgdGFyZ2V0KTtcbiAgICBsb2NrKCk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UmVnaXN0ZXJGdW5jdGlvbihpZCwgdmFsdWUsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0LnJvb3RDb250ZXh0LnJlc29sdmUoY29udGV4dC5tb2RlbFNjaGVtYSwgaWQsIGNvbnRleHQudGFyZ2V0KTtcbn1cblxuLyoqXG4gKlxuICpcbiAqIFNpbWlsYXIgdG8gcHJpbWl0aXZlLCBidXQgdGhpcyBmaWVsZCB3aWxsIGJlIG1hcmtlZCBhcyB0aGUgaWRlbnRpZmllciBmb3IgdGhlIGdpdmVuIE1vZGVsIHR5cGUuXG4gKiBUaGlzIGlzIHVzZWQgYnkgZm9yIGV4YW1wbGUgYHJlZmVyZW5jZSgpYCB0byBzZXJpYWxpemUgdGhlIHJlZmVyZW5jZVxuICpcbiAqIElkZW50aWZpZXIgYWNjZXB0cyBhbiBvcHRpb25hbCBgcmVnaXN0ZXJGbmAgd2l0aCB0aGUgc2lnbmF0dXJlOlxuICogYChpZCwgdGFyZ2V0LCBjb250ZXh0KSA9PiB2b2lkYFxuICogdGhhdCBjYW4gYmUgdXNlZCB0byByZWdpc3RlciB0aGlzIG9iamVjdCBpbiBzb21lIHN0b3JlLiBub3RlIHRoYXQgbm90IGFsbCBmaWVsZHMgb2YgdGhpcyBvYmplY3QgbWlnaHRcbiAqIGhhdmUgYmVlbiBkZXNlcmlhbGl6ZWQgeWV0LlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgdG9kb3MgPSB7fTtcbiAqXG4gKiB2YXIgcyA9IF8uY3JlYXRlU2ltcGxlU2NoZW1hKHtcbiAqICAgICBpZDogXy5pZGVudGlmaWVyKChpZCwgb2JqZWN0KSA9PiAodG9kb3NbaWRdID0gb2JqZWN0KSksXG4gKiAgICAgdGl0bGU6IHRydWUsXG4gKiB9KTtcbiAqXG4gKiBfLmRlc2VyaWFsaXplKHMsIHtcbiAqICAgICBpZDogMSxcbiAqICAgICB0aXRsZTogJ3Rlc3QwJyxcbiAqIH0pO1xuICogXy5kZXNlcmlhbGl6ZShzLCBbeyBpZDogMiwgdGl0bGU6ICd0ZXN0MicgfSwgeyBpZDogMSwgdGl0bGU6ICd0ZXN0MScgfV0pO1xuICpcbiAqIHQuZGVlcEVxdWFsKHRvZG9zLCB7XG4gKiAgICAgMTogeyBpZDogMSwgdGl0bGU6ICd0ZXN0MScgfSxcbiAqICAgICAyOiB7IGlkOiAyLCB0aXRsZTogJ3Rlc3QyJyB9LFxuICogfSk7XG4gKlxuICogQHBhcmFtIHsgUmVnaXN0ZXJGdW5jdGlvbiB8IEFkZGl0aW9uYWxQcm9wQXJncyB9IGFyZzEgb3B0aW9uYWwgcmVnaXN0ZXJGbjogZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBvYmplY3QgZHVyaW5nIGNyZWF0aW9uLlxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFyZzIgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gaWRlbnRpZmllcihhcmcxLCBhcmcyKSB7XG4gICAgdmFyIHJlZ2lzdGVyRm4sIGFkZGl0aW9uYWxBcmdzO1xuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJlZ2lzdGVyRm4gPSBhcmcxO1xuICAgICAgICBhZGRpdGlvbmFsQXJncyA9IGFyZzI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWRkaXRpb25hbEFyZ3MgPSBhcmcxO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWFkZGl0aW9uYWxBcmdzIHx8IHR5cGVvZiBhZGRpdGlvbmFsQXJncyA9PT0gXCJvYmplY3RcIiwgXCJBZGRpdGlvbmFsIHByb3BlcnR5IGFyZ3VtZW50cyBzaG91bGQgYmUgYW4gb2JqZWN0LCByZWdpc3RlciBmdW5jdGlvbiBzaG91bGQgYmUgb21pdHRlZCBvciBhIGZ1bnRpb25cIik7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgaWRlbnRpZmllcjogdHJ1ZSxcbiAgICAgICAgc2VyaWFsaXplcjogX2RlZmF1bHRQcmltaXRpdmVQcm9wLnNlcmlhbGl6ZXIsXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25WYWx1ZSwgZG9uZSwgY29udGV4dCkge1xuICAgICAgICAgICAgX2RlZmF1bHRQcmltaXRpdmVQcm9wLmRlc2VyaWFsaXplcihqc29uVmFsdWUsIGZ1bmN0aW9uKGVyciwgaWQpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0UmVnaXN0ZXJGdW5jdGlvbihpZCwgY29udGV4dC50YXJnZXQsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RlckZuKVxuICAgICAgICAgICAgICAgICAgICByZWdpc3RlckZuKGlkLCBjb250ZXh0LnRhcmdldCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgZG9uZShlcnIsIGlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIHByaW1pdGl2ZSwgc2VyaWFsaXplcyBpbnN0YW5jZXMgb2YgRGF0ZSBvYmplY3RzXG4gKlxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFkZGl0aW9uYWxBcmdzIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zIGJlZm9yZURlc2VyaWFsaXplIGFuZC9vciBhZnRlckRlc2VyaWFsaXplIGhhbmRsZXJzXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gZGF0ZShhZGRpdGlvbmFsQXJncykge1xuICAgIC8vIFRPRE86IGFkZCBmb3JtYXQgb3B0aW9uP1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIGludmFyaWFudCh2YWx1ZSBpbnN0YW5jZW9mIERhdGUsIFwiRXhwZWN0ZWQgRGF0ZSBvYmplY3RcIik7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuZ2V0VGltZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25WYWx1ZSwgZG9uZSkge1xuICAgICAgICAgICAgaWYgKGpzb25WYWx1ZSA9PT0gbnVsbCB8fCBqc29uVmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKG51bGwsIGpzb25WYWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB2b2lkIGRvbmUobnVsbCwgbmV3IERhdGUoanNvblZhbHVlKSlcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzdWx0ID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXN1bHQsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogQWxpYXMgaW5kaWNhdGVzIHRoYXQgdGhpcyBtb2RlbCBwcm9wZXJ0eSBzaG91bGQgYmUgbmFtZWQgZGlmZmVyZW50bHkgaW4gdGhlIGdlbmVyYXRlZCBqc29uLlxuICogQWxpYXMgc2hvdWxkIGJlIHRoZSBvdXRlcm1vc3QgcHJvcHNjaGVtYS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiBhbGlhcygndGFzaycsIHByaW1pdGl2ZSgpKSxcbiAqIH0pO1xuICpcbiAqIGNvbnNvbGUuZGlyKHNlcmlhbGl6ZShuZXcgVG9kbygndGVzdCcpKSk7XG4gKiAvLyB7IHRhc2sgOiBcInRlc3RcIiB9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUganNvbiBmaWVsZCB0byBiZSB1c2VkIGZvciB0aGlzIHByb3BlcnR5XG4gKiBAcGFyYW0ge1Byb3BTY2hlbWF9IHByb3BTY2hlbWEgcHJvcFNjaGVtYSB0byAoZGUpc2VyaWFsaXplIHRoZSBjb250ZW50cyBvZiB0aGlzIGZpZWxkXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gYWxpYXMobmFtZSwgcHJvcFNjaGVtYSkge1xuICAgIGludmFyaWFudChuYW1lICYmIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiLCBcImV4cGVjdGVkIHByb3AgbmFtZSBhcyBmaXJzdCBhcmd1bWVudFwiKTtcbiAgICBwcm9wU2NoZW1hID0gKCFwcm9wU2NoZW1hIHx8IHByb3BTY2hlbWEgPT09IHRydWUpICA/IF9kZWZhdWx0UHJpbWl0aXZlUHJvcCA6IHByb3BTY2hlbWE7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XG4gICAgaW52YXJpYW50KCFpc0FsaWFzZWRQcm9wU2NoZW1hKHByb3BTY2hlbWEpLCBcInByb3ZpZGVkIHByb3AgaXMgYWxyZWFkeSBhbGlhc2VkXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGpzb25uYW1lOiBuYW1lLFxuICAgICAgICBzZXJpYWxpemVyOiBwcm9wU2NoZW1hLnNlcmlhbGl6ZXIsXG4gICAgICAgIGRlc2VyaWFsaXplcjogcHJvcFNjaGVtYS5kZXNlcmlhbGl6ZXIsXG4gICAgICAgIGlkZW50aWZpZXI6IGlzSWRlbnRpZmllclByb3BTY2hlbWEocHJvcFNjaGVtYSksXG4gICAgICAgIGJlZm9yZURlc2VyaWFsaXplOiBwcm9wU2NoZW1hLmJlZm9yZURlc2VyaWFsaXplLFxuICAgICAgICBhZnRlckRlc2VyaWFsaXplOiBwcm9wU2NoZW1hLmFmdGVyRGVzZXJpYWxpemVcbiAgICB9XG59XG5cbi8qKlxuICogQ2FuIGJlIHVzZWQgdG8gY3JlYXRlIHNpbXBsZSBjdXN0b20gcHJvcFNjaGVtYS4gTXVsdGlwbGUgdGhpbmdzIGNhbiBiZSBkb25lIGluc2lkZSBvZiBhIGN1c3RvbSBwcm9wU2NoZW1hLCBsaWtlIGRlc2VyaWFsaXppbmcgYW5kIHNlcmlhbGl6aW5nIG90aGVyIChwb2x5bW9ycGhpYykgb2JqZWN0cywgc2tpcHBpbmcgdGhlIHNlcmlhbGl6YXRpb24gb2Ygc29tZXRoaW5nIG9yIGNoZWNraW5nIHRoZSBjb250ZXh0IG9mIHRoZSBvYmogYmVpbmcgKGRlKXNlcmlhbGl6ZWQuXG5cbiAqIFRoZSBgY3VzdG9tYCBmdW5jdGlvbiB0YWtlcyB0d28gcGFyYW1ldGVycywgdGhlIGBzZXJpYWxpemVyYCBmdW5jdGlvbiBhbmQgdGhlIGBkZXNlcmlhbGl6ZXJgIGZ1bmN0aW9uLlxuXG4gKiBUaGUgYHNlcmlhbGl6ZXJgIGZ1bmN0aW9uIGhhcyB0aGUgc2lnbmF0dXJlOlxuICogYCh2YWx1ZSwga2V5LCBvYmopID0+IHZvaWRgXG5cbiAqIFdoZW4gc2VyaWFsaXppbmcgdGhlIG9iamVjdCBge2E6IDF9YCB0aGUgYHNlcmlhbGl6ZXJgIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggYHNlcmlhbGl6ZXIoMSwgJ2EnLCB7YTogMX0pYC5cblxuICogVGhlIGBkZXNlcmlhbGl6ZXJgIGZ1bmN0aW9uIGhhcyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZSBmb3Igc3luY2hyb25vdXMgcHJvY2Vzc2luZ1xuICogYCh2YWx1ZSwgY29udGV4dCwgb2xkVmFsdWUpID0+IHZvaWRgXG5cbiAqIEZvciBhc3luY2hyb25vdXMgcHJvY2Vzc2luZyB0aGUgZnVuY3Rpb24gZXhwZWN0cyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZVxuICogYCh2YWx1ZSwgY29udGV4dCwgb2xkVmFsdWUsIGNhbGxiYWNrKSA9PiB2b2lkYFxuXG4gKiBXaGVuIGRlc2VyaWFsaXppbmcgdGhlIG9iamVjdCBge2I6IDJ9YCB0aGUgYGRlc2VyaWFsaXplcmAgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2l0aCBgZGVzZXJpYWxpemVyKDIsIGNvbnRleHRPYmopYCAoW2NvbnRleHRPYmogcmVmZXJlbmNlXShodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL3NlcmlhbGl6ciNkZXNlcmlhbGl6YXRpb24tY29udGV4dCkpLlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgc2NoZW1hRGVmYXVsdCA9IF8uY3JlYXRlU2ltcGxlU2NoZW1hKHtcbiAqICAgICBhOiBfLmN1c3RvbShcbiAqICAgICAgICAgZnVuY3Rpb24odikge1xuICogICAgICAgICAgICAgcmV0dXJuIHYgKyAyO1xuICogICAgICAgICB9LFxuICogICAgICAgICBmdW5jdGlvbih2KSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gdiAtIDI7XG4gKiAgICAgICAgIH1cbiAqICAgICApLFxuICogfSk7XG4gKiB0LmRlZXBFcXVhbChfLnNlcmlhbGl6ZShzY2hlbWFEZWZhdWx0LCB7IGE6IDQgfSksIHsgYTogNiB9KTtcbiAqIHQuZGVlcEVxdWFsKF8uZGVzZXJpYWxpemUoc2NoZW1hRGVmYXVsdCwgeyBhOiA2IH0pLCB7IGE6IDQgfSk7XG4gKlxuICogdmFyIHNjaGVtYVdpdGhBc3luY1Byb3BzID0gXy5jcmVhdGVTaW1wbGVTY2hlbWEoe1xuICogICAgIGE6IF8uY3VzdG9tQXN5bmMoXG4gKiAgICAgICAgIGZ1bmN0aW9uKHYpIHtcbiAqICAgICAgICAgICAgIHJldHVybiB2ICsgMjtcbiAqICAgICAgICAgfSxcbiAqICAgICAgICAgZnVuY3Rpb24odiwgY29udGV4dCwgb2xkVmFsdWUsIGNhbGxiYWNrKSB7XG4gKiAgICAgICAgICAgICBzb21lUHJvbWlzZSh2LCBjb250ZXh0LCBvbGRWYWx1ZSkudGhlbigocmVzdWx0KSA9PiB7XG4gKiAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0IC0gMilcbiAqICAgICAgICAgICAgIH0uY2F0Y2goKGVycikgPT4ge1xuICogICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgfVxuICogICAgICksXG4gKiB9KTtcbiAqIHQuZGVlcEVxdWFsKF8uc2VyaWFsaXplKHNjaGVtYVdpdGhBc3luY1Byb3BzLCB7IGE6IDQgfSksIHsgYTogNiB9KTtcbiAqIF8uZGVzZXJpYWxpemUoc2NoZW1hV2l0aEFzeW5jUHJvcHMsIHsgYTogNiB9LCAoZXJyLCByZXMpID0+IHtcbiAqICAgdC5kZWVwRXF1YWwocmVzLmEsIDQpXG4gKiB9O1xuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2VyaWFsaXplciBmdW5jdGlvbiB0aGF0IHRha2VzIGEgbW9kZWwgdmFsdWUgYW5kIHR1cm5zIGl0IGludG8gYSBqc29uIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkZXNlcmlhbGl6ZXIgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGpzb24gdmFsdWUgYW5kIHR1cm5zIGl0IGludG8gYSBtb2RlbCB2YWx1ZS4gSXQgYWxzbyB0YWtlcyBjb250ZXh0IGFyZ3VtZW50LCB3aGljaCBjYW4gYWxsb3cgeW91IHRvIGRlc2VyaWFsaXplIGJhc2VkIG9uIHRoZSBjb250ZXh0IG9mIG90aGVyIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBjdXN0b20oc2VyaWFsaXplciwgZGVzZXJpYWxpemVyLCBhZGRpdGlvbmFsQXJncykge1xuICAgIGludmFyaWFudCh0eXBlb2Ygc2VyaWFsaXplciA9PT0gXCJmdW5jdGlvblwiLCBcImZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBmdW5jdGlvblwiKTtcbiAgICBpbnZhcmlhbnQoKHR5cGVvZiBkZXNlcmlhbGl6ZXIgPT09IFwiZnVuY3Rpb25cIiksIFwic2Vjb25kIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIG9yIHByb21pc2VcIik7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogc2VyaWFsaXplcixcbiAgICAgICAgZGVzZXJpYWxpemVyOiBmdW5jdGlvbiAoanNvblZhbHVlLCBkb25lLCBjb250ZXh0LCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKGRlc2VyaWFsaXplci5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICBkZXNlcmlhbGl6ZXIoanNvblZhbHVlLCBjb250ZXh0LCBvbGRWYWx1ZSwgZG9uZSwgYWRkaXRpb25hbEFyZ3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKG51bGwsIGRlc2VyaWFsaXplcihqc29uVmFsdWUsIGNvbnRleHQsIG9sZFZhbHVlLCBudWxsLCBhZGRpdGlvbmFsQXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBPcHRpb25hbCBpbmRpY2F0ZXMgdGhhdCB0aGlzIG1vZGVsIHByb3BlcnR5IHNob3VsZG4ndCBiZSBzZXJpYWxpemVkIGlmIGl0IGlzbid0IHByZXNlbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKFRvZG8sIHtcbiAqICAgICB0aXRsZTogb3B0aW9uYWwocHJpbWl0aXZlKCkpLFxuICogfSk7XG4gKlxuICogY29uc29sZS5kaXIoc2VyaWFsaXplKG5ldyBUb2RvKCkpKTtcbiAqIC8vIHt9XG4gKlxuICogQHBhcmFtIHtQcm9wU2NoZW1hfSBwcm9wU2NoZW1hIHByb3BTY2hlbWEgdG8gKGRlKXNlcmlhbGl6ZSB0aGUgY29udGVudHMgb2YgdGhpcyBmaWVsZFxuICogQHJldHVybnMge1Byb3BTY2hlbWF9XG4gKi9cbmZ1bmN0aW9uIG9wdGlvbmFsKG5hbWUsIHByb3BTY2hlbWEpIHtcbiAgICBwcm9wU2NoZW1hID0gKCFwcm9wU2NoZW1hIHx8IHByb3BTY2hlbWEgPT09IHRydWUpICA/IF9kZWZhdWx0UHJpbWl0aXZlUHJvcCA6IHByb3BTY2hlbWE7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XG4gICAgY29uc3QgcHJvcFNlcmlhbGl6ZXIgPSBwcm9wU2NoZW1hLnNlcmlhbGl6ZXI7XG4gICAgaW52YXJpYW50KHR5cGVvZiBwcm9wU2VyaWFsaXplciA9PT0gXCJmdW5jdGlvblwiLCBcImV4cGVjdGVkIHByb3Agc2NoZW1hIHRvIGhhdmUgYSBjYWxsYWJsZSBzZXJpYWxpemVyXCIpO1xuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZXIoLi4uYXJncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBwcm9wU2VyaWFsaXplciguLi5hcmdzKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gU0tJUFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByb3BTY2hlbWEsIHtzZXJpYWxpemVyfSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdFJlZkxvb2t1cChtb2RlbFNjaGVtYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiByZXNvbHZlKHV1aWQsIGNiLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQucm9vdENvbnRleHQuYXdhaXQobW9kZWxTY2hlbWEsIHV1aWQsIGNiKTtcbiAgICB9XG59XG5cbi8qKlxuICogYHJlZmVyZW5jZWAgY2FuIGJlIHVzZWQgdG8gKGRlKXNlcmlhbGl6ZSByZWZlcmVuY2VzIHRoYXQgcG9pbnQgdG8gb3RoZXIgbW9kZWxzLlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgc2hvdWxkIGJlIGVpdGhlciBhIE1vZGVsU2NoZW1hIHRoYXQgaGFzIGFuIGBpZGVudGlmaWVyKClgIHByb3BlcnR5IChzZWUgaWRlbnRpZmllcilcbiAqIG9yIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyB3aGljaCBhdHRyaWJ1dGUgaW4gdGhlIHRhcmdldCBvYmplY3QgcmVwcmVzZW50cyB0aGUgaWRlbnRpZmllciBvZiB0aGUgb2JqZWN0LlxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgbG9va3VwIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBkdXJpbmcgZGVzZXJpYWxpemF0aW9uIHRvIHJlc29sdmUgYW4gaWRlbnRpZmllciB0b1xuICogYW4gb2JqZWN0LiBJdHMgc2lnbmF0dXJlIHNob3VsZCBiZSBhcyBmb2xsb3dzOlxuICpcbiAqIGBsb29rdXBGdW5jdGlvbihpZGVudGlmaWVyLCBjYWxsYmFjaywgY29udGV4dClgIHdoZXJlOlxuICogMS4gYGlkZW50aWZpZXJgIGlzIHRoZSBpZGVudGlmaWVyIGJlaW5nIHJlc29sdmVkXG4gKiAyLiBgY2FsbGJhY2tgIGlzIGEgbm9kZSBzdHlsZSBjYWxibGFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHdpdGggdGhlIGZvdW5kIG9iamVjdCAoYXMgc2Vjb25kIGFyZykgb3IgYW4gZXJyb3IgKGZpcnN0IGFyZylcbiAqIDMuIGBjb250ZXh0YCBzZWUgY29udGV4dC5cbiAqXG4gKiBUaGUgbG9va3VwRnVuY3Rpb24gaXMgb3B0aW9uYWwuIElmIGl0IGlzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCB0cnkgdG8gZmluZCBhbiBvYmplY3Qgb2YgdGhlIGV4cGVjdGVkIHR5cGUgYW5kIHJlcXVpcmVkIGlkZW50aWZpZXIgd2l0aGluIHRoZSBzYW1lIEpTT04gZG9jdW1lbnRcbiAqXG4gKiBOLkIuIG1pbmQgaXNzdWVzIHdpdGggY2lyY3VsYXIgZGVwZW5kZW5jaWVzIHdoZW4gaW1wb3J0aW5nIG1vZGVsIHNjaGVtYXMgZnJvbSBvdGhlciBmaWxlcyEgVGhlIG1vZHVsZSByZXNvbHZlIGFsZ29yaXRobSBtaWdodCBleHBvc2UgY2xhc3NlcyBiZWZvcmUgYGNyZWF0ZU1vZGVsU2NoZW1hYCBpcyBleGVjdXRlZCBmb3IgdGhlIHRhcmdldCBjbGFzcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgVXNlciB7fVxuICogY2xhc3MgUG9zdCB7fVxuICpcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKFVzZXIsIHtcbiAqICAgICB1dWlkOiBpZGVudGlmaWVyKCksXG4gKiAgICAgZGlzcGxheW5hbWU6IHByaW1pdGl2ZSgpLFxuICogfSk7XG4gKlxuICogY3JlYXRlTW9kZWxTY2hlbWEoUG9zdCwge1xuICogICAgIGF1dGhvcjogcmVmZXJlbmNlKFVzZXIsIGZpbmRVc2VyQnlJZCksXG4gKiAgICAgbWVzc2FnZTogcHJpbWl0aXZlKCksXG4gKiB9KTtcbiAqXG4gKiBmdW5jdGlvbiBmaW5kVXNlckJ5SWQodXVpZCwgY2FsbGJhY2spIHtcbiAqICAgICBmZXRjaCgnaHR0cDovL2hvc3QvdXNlci8nICsgdXVpZClcbiAqICAgICAgICAgLnRoZW4odXNlckRhdGEgPT4ge1xuICogICAgICAgICAgICAgZGVzZXJpYWxpemUoVXNlciwgdXNlckRhdGEsIGNhbGxiYWNrKTtcbiAqICAgICAgICAgfSlcbiAqICAgICAgICAgLmNhdGNoKGNhbGxiYWNrKTtcbiAqIH1cbiAqXG4gKiBkZXNlcmlhbGl6ZShcbiAqICAgICBQb3N0LFxuICogICAgIHtcbiAqICAgICAgICAgbWVzc2FnZTogJ0hlbGxvIFdvcmxkJyxcbiAqICAgICAgICAgYXV0aG9yOiAyMzQsXG4gKiAgICAgfSxcbiAqICAgICAoZXJyLCBwb3N0KSA9PiB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKHBvc3QpO1xuICogICAgIH1cbiAqICk7XG4gKlxuICogQHBhcmFtIHRhcmdldDogTW9kZWxTY2hlbWEgb3Igc3RyaW5nXG4gKiBAcGFyYW0ge1JlZkxvb2t1cEZ1bmN0aW9uIHwgQWRkaXRpb25hbFByb3BBcmdzfSBsb29rdXBGbiBvcHRpb25hbCBmdW5jdGlvbiBvciBhZGRpdGlvbmFsQXJncyBvYmplY3RcbiAqIEBwYXJhbSB7QWRkaXRpb25hbFByb3BBcmdzfSBhZGRpdGlvbmFsQXJncyBvcHRpb25hbCBvYmplY3QgdGhhdCBjb250YWlucyBiZWZvcmVEZXNlcmlhbGl6ZSBhbmQvb3IgYWZ0ZXJEZXNlcmlhbGl6ZSBoYW5kbGVyc1xuICogQHJldHVybnMge1Byb3BTY2hlbWF9XG4gKi9cbmZ1bmN0aW9uIHJlZmVyZW5jZSh0YXJnZXQsIGxvb2t1cEZuLCBhZGRpdGlvbmFsQXJncykge1xuICAgIGludmFyaWFudCghIXRhcmdldCwgXCJObyBtb2RlbHNjaGVtYSBwcm92aWRlZC4gSWYgeW91IGFyZSBpbXBvcnRpbmcgaXQgZnJvbSBhbm90aGVyIGZpbGUgYmUgYXdhcmUgb2YgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlwiKTtcbiAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB2YXIgY2hpbGRJZGVudGlmaWVyQXR0cmlidXRlO1xuICAgIGlmICh0eXBlb2YgbG9va3VwRm4gPT09IFwib2JqZWN0XCIgJiYgYWRkaXRpb25hbEFyZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhZGRpdGlvbmFsQXJncyA9IGxvb2t1cEZuO1xuICAgICAgICBsb29rdXBGbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIHRhcmdldCAhPT0gXCJzdHJpbmdcIiB8fCBsb29rdXBGbiAmJiB0eXBlb2YgbG9va3VwRm4gPT09IFwiZnVuY3Rpb25cIiwgXCJpZiB0aGUgcmVmZXJlbmNlIHRhcmdldCBpcyBzcGVjaWZpZWQgYnkgYXR0cmlidXRlIG5hbWUsIGEgbG9va3VwIGZ1bmN0aW9uIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICBpbnZhcmlhbnQoIWxvb2t1cEZuIHx8IHR5cGVvZiBsb29rdXBGbiA9PT0gXCJmdW5jdGlvblwiLCBcInNlY29uZCBhcmd1bWVudCBzaG91bGQgYmUgYSBsb29rdXAgZnVuY3Rpb24gb3IgYWRkaXRpb25hbCBhcmd1bWVudHMgb2JqZWN0XCIpO1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIGNoaWxkSWRlbnRpZmllckF0dHJpYnV0ZSA9IHRhcmdldDtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbW9kZWxTY2hlbWEgPSBnZXREZWZhdWx0TW9kZWxTY2hlbWEodGFyZ2V0KTtcbiAgICAgICAgICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSwgXCJleHBlY3RlZCBtb2RlbCBzY2hlbWEgb3Igc3RyaW5nIGFzIGZpcnN0IGFyZ3VtZW50IGZvciAncmVmJywgZ290IFwiICsgbW9kZWxTY2hlbWEpO1xuICAgICAgICAgICAgbG9va3VwRm4gPSBsb29rdXBGbiB8fCBjcmVhdGVEZWZhdWx0UmVmTG9va3VwKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGNoaWxkSWRlbnRpZmllckF0dHJpYnV0ZSA9IGdldElkZW50aWZpZXJQcm9wKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGludmFyaWFudCghIWNoaWxkSWRlbnRpZmllckF0dHJpYnV0ZSwgXCJwcm92aWRlZCBtb2RlbCBzY2hlbWEgZG9lc24ndCBkZWZpbmUgYW4gaWRlbnRpZmllcigpIHByb3BlcnR5IGFuZCBjYW5ub3QgYmUgdXNlZCBieSAncmVmJy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQpXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtW2NoaWxkSWRlbnRpZmllckF0dHJpYnV0ZV0gOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24oaWRlbnRpZmllclZhbHVlLCBkb25lLCBjb250ZXh0KSB7XG4gICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKVxuICAgICAgICAgICAgICAgIGluaXRpYWxpemUoKTtcbiAgICAgICAgICAgIGlmIChpZGVudGlmaWVyVmFsdWUgPT09IG51bGwgfHwgaWRlbnRpZmllclZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZG9uZShudWxsLCBpZGVudGlmaWVyVmFsdWUpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGxvb2t1cEZuKGlkZW50aWZpZXJWYWx1ZSwgZG9uZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlc3VsdCA9IHByb2Nlc3NBZGRpdGlvbmFsUHJvcEFyZ3MocmVzdWx0LCBhZGRpdGlvbmFsQXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIExpc3QgaW5kaWNhdGVzIHRoYXQgdGhpcyBwcm9wZXJ0eSBjb250YWlucyBhIGxpc3Qgb2YgdGhpbmdzLlxuICogQWNjZXB0cyBhIHN1YiBtb2RlbCBzY2hlbWEgdG8gc2VyaWFsaXplIHRoZSBjb250ZW50c1xuICpcbiAqIEBleGFtcGxlXG4gKiBjbGFzcyBTdWJUYXNrIHt9XG4gKiBjbGFzcyBUYXNrIHt9XG4gKiBjbGFzcyBUb2RvIHt9XG4gKlxuICogY3JlYXRlTW9kZWxTY2hlbWEoU3ViVGFzaywge1xuICogICAgIHRpdGxlOiB0cnVlLFxuICogfSk7XG4gKiBjcmVhdGVNb2RlbFNjaGVtYShUb2RvLCB7XG4gKiAgICAgdGl0bGU6IHRydWUsXG4gKiAgICAgc3ViVGFzazogbGlzdChvYmplY3QoU3ViVGFzaykpLFxuICogfSk7XG4gKlxuICogY29uc3QgdG9kbyA9IGRlc2VyaWFsaXplKFRvZG8sIHtcbiAqICAgICB0aXRsZTogJ1Rhc2snLFxuICogICAgIHN1YlRhc2s6IFtcbiAqICAgICAgICAge1xuICogICAgICAgICAgICAgdGl0bGU6ICdTdWIgdGFzayAxJyxcbiAqICAgICAgICAgfSxcbiAqICAgICBdLFxuICogfSk7XG4gKlxuICogQHBhcmFtIHtQcm9wU2NoZW1hfSBwcm9wU2NoZW1hIHRvIGJlIHVzZWQgdG8gKGRlKXNlcmlhbGl6ZSB0aGUgY29udGVudHMgb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBsaXN0KHByb3BTY2hlbWEsIGFkZGl0aW9uYWxBcmdzKSB7XG4gICAgcHJvcFNjaGVtYSA9IHByb3BTY2hlbWEgfHwgX2RlZmF1bHRQcmltaXRpdmVQcm9wO1xuICAgIGludmFyaWFudChpc1Byb3BTY2hlbWEocHJvcFNjaGVtYSksIFwiZXhwZWN0ZWQgcHJvcCBzY2hlbWEgYXMgZmlyc3QgYXJndW1lbnRcIik7XG4gICAgaW52YXJpYW50KCFpc0FsaWFzZWRQcm9wU2NoZW1hKHByb3BTY2hlbWEpLFxuICAgICAgICBcInByb3ZpZGVkIHByb3AgaXMgYWxpYXNlZCwgcGxlYXNlIHB1dCBhbGlhc2VzIGZpcnN0XCIpO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChhcikge1xuICAgICAgICAgICAgaWYgKGFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU0tJUFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW52YXJpYW50KGFyICYmIFwibGVuZ3RoXCIgaW4gYXIgJiYgXCJtYXBcIiBpbiBhciwgXCJleHBlY3RlZCBhcnJheSAobGlrZSkgb2JqZWN0XCIpO1xuICAgICAgICAgICAgcmV0dXJuIGFyLm1hcChwcm9wU2NoZW1hLnNlcmlhbGl6ZXIpXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25BcnJheSwgZG9uZSwgY29udGV4dCkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb25BcnJheSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgZG9uZShcIltzZXJpYWxpenJdIGV4cGVjdGVkIEpTT04gYXJyYXlcIilcblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0l0ZW0oanNvblZhbHVlLCBvbkl0ZW1Eb25lLCBpdGVtSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFja0JlZm9yZShlcnIsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wU2NoZW1hLmRlc2VyaWFsaXplcih2YWx1ZSwgZGVzZXJpYWxpemVEb25lLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSXRlbURvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlc2VyaWFsaXplRG9uZShlcnIsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFNjaGVtYS5hZnRlckRlc2VyaWFsaXplID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJEZXNlcmlhbGl6ZShjYWxsYmFja0FmdGVyLCBlcnIsIHZhbHVlLCBqc29uVmFsdWUsIGl0ZW1JbmRleCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wU2NoZW1hKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSXRlbURvbmUoZXJyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFja0FmdGVyKGVyclByZWxpbWluYXJ5LCBmaW5hbE9yUmV0cnlWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyUHJlbGltaW5hcnkgJiYgZmluYWxPclJldHJ5VmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHByb3BTY2hlbWEuYWZ0ZXJEZXNlcmlhbGl6ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BTY2hlbWEuZGVzZXJpYWxpemVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsT3JSZXRyeVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2VyaWFsaXplRG9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25JdGVtRG9uZShlcnJQcmVsaW1pbmFyeSwgZmluYWxPclJldHJ5VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb25CZWZvcmVEZXNlcmlhbGl6ZShjYWxsYmFja0JlZm9yZSwganNvblZhbHVlLCBqc29uQXJyYXksIGl0ZW1JbmRleCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcFNjaGVtYSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmFsbGVsKFxuICAgICAgICAgICAgICAgIGpzb25BcnJheSxcbiAgICAgICAgICAgICAgICBwcm9jZXNzSXRlbSxcbiAgICAgICAgICAgICAgICBkb25lXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIGxpc3QsIGJ1dCBtYXAgcmVwcmVzZW50cyBhIHN0cmluZyBrZXllZCBkeW5hbWljIGNvbGxlY3Rpb24uXG4gKiBUaGlzIGNhbiBiZSBib3RoIHBsYWluIG9iamVjdHMgKGRlZmF1bHQpIG9yIEVTNiBNYXAgbGlrZSBzdHJ1Y3R1cmVzLlxuICogVGhpcyB3aWxsIGJlIGluZmVycmVkIGZyb20gdGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIHRhcmdldHRlZCBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHsqfSBwcm9wU2NoZW1hXG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBtYXAocHJvcFNjaGVtYSwgYWRkaXRpb25hbEFyZ3MpIHtcbiAgICBwcm9wU2NoZW1hID0gcHJvcFNjaGVtYSB8fCBfZGVmYXVsdFByaW1pdGl2ZVByb3A7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBmaXJzdCBhcmd1bWVudFwiKTtcbiAgICBpbnZhcmlhbnQoIWlzQWxpYXNlZFByb3BTY2hlbWEocHJvcFNjaGVtYSksIFwicHJvdmlkZWQgcHJvcCBpcyBhbGlhc2VkLCBwbGVhc2UgcHV0IGFsaWFzZXMgZmlyc3RcIik7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIGludmFyaWFudChtICYmIHR5cGVvZiBtID09PSBcIm9iamVjdFwiLCBcImV4cGVjdGVkIG9iamVjdCBvciBNYXBcIik7XG4gICAgICAgICAgICB2YXIgaXNNYXAgPSBpc01hcExpa2UobSk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgICAgICBpZiAoaXNNYXApXG4gICAgICAgICAgICAgICAgbS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gcHJvcFNjaGVtYS5zZXJpYWxpemVyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2UgZm9yICh2YXIga2V5IGluIG0pXG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBwcm9wU2NoZW1hLnNlcmlhbGl6ZXIobVtrZXldKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemVyOiBmdW5jdGlvbiAoanNvbk9iamVjdCwgZG9uZSwgY29udGV4dCwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghanNvbk9iamVjdCB8fCB0eXBlb2YganNvbk9iamVjdCAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKFwiW3NlcmlhbGl6cl0gZXhwZWN0ZWQgSlNPTiBvYmplY3RcIilcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoanNvbk9iamVjdCk7XG4gICAgICAgICAgICBsaXN0KHByb3BTY2hlbWEsIGFkZGl0aW9uYWxBcmdzKS5kZXNlcmlhbGl6ZXIoXG4gICAgICAgICAgICAgICAga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNvbk9iamVjdFtrZXldXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKGVycilcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzTWFwID0gaXNNYXBMaWtlKG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBvbGRWYWx1ZSBpcyBhIG1hcCwgd2UgcmVjeWNsZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgYXJlIG1hbnkgdmFyaWF0aW9ucyBhbmQgdGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8ga25vdyBhYm91dCB0aGUgb3JpZ2luYWwgY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUuc2V0KGtleXNbaV0sIHZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVba2V5c1tpXV0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXMsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogU2ltaWxhciB0byBtYXAsIG1hcEFzQXJyYXkgY2FuIGJlIHVzZWQgdG8gc2VyaWFsaXplIGEgbWFwLWxpa2UgY29sbGVjdGlvbiB3aGVyZSB0aGUga2V5IGlzXG4gKiBjb250YWluZWQgaW4gdGhlICd2YWx1ZSBvYmplY3QnLiBFeGFtcGxlOiBjb25zaWRlciBNYXA8aWQ6IG51bWJlciwgY3VzdG9tZXI6IEN1c3RvbWVyPiB3aGVyZSB0aGVcbiAqIEN1c3RvbWVyIG9iamVjdCBoYXMgdGhlIGlkIHN0b3JlZCBvbiBpdHNlbGYuIG1hcEFzQXJyYXkgc3RvcmVzIGFsbCB2YWx1ZXMgZnJvbSB0aGUgbWFwIGludG8gYW5cbiAqIGFycmF5IHdoaWNoIGlzIHNlcmlhbGl6ZWQuIERlc2VyaWFsaXphdGlvbiByZXR1cm5zIGEgRVM2IE1hcCBvciBwbGFpbiBvYmplY3Qgb2JqZWN0IHdoZXJlIHRoZVxuICogYGtleVByb3BlcnR5TmFtZWAgb2YgZWFjaCBvYmplY3QgaXMgdXNlZCBmb3Iga2V5cy4gRm9yIEVTNiBtYXBzIHRoaXMgaGFzIHRoZSBiZW5lZml0IG9mIGJlaW5nXG4gKiBhbGxvd2VkIHRvIGhhdmUgbm9uLXN0cmluZyBrZXlzIGluIHRoZSBtYXAuIFRoZSBzZXJpYWxpemVkIGpzb24gYWxzbyBtYXkgYmUgc2xpZ2h0bHkgbW9yZVxuICogY29tcGFjdC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gcHJvcFNjaGVtYVxuICogQHBhcmFtIHtzdHJpbmd9IGtleVByb3BlcnR5TmFtZSAtIHRoZSBwcm9wZXJ0eSBvZiBzdG9yZWQgb2JqZWN0cyB1c2VkIGFzIGtleSBpbiB0aGUgbWFwXG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBtYXBBc0FycmF5KHByb3BTY2hlbWEsIGtleVByb3BlcnR5TmFtZSwgYWRkaXRpb25hbEFyZ3MpIHtcbiAgICBwcm9wU2NoZW1hID0gcHJvcFNjaGVtYSB8fCBfZGVmYXVsdFByaW1pdGl2ZVByb3A7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBmaXJzdCBhcmd1bWVudFwiKTtcbiAgICBpbnZhcmlhbnQoISFrZXlQcm9wZXJ0eU5hbWUsIFwiZXhwZWN0ZWQga2V5IHByb3BlcnR5IG5hbWUgYXMgc2Vjb25kIGFyZ3VtZW50XCIpO1xuICAgIHZhciByZXMgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQobSAmJiB0eXBlb2YgbSA9PT0gXCJvYmplY3RcIiwgXCJleHBlY3RlZCBvYmplY3Qgb3IgTWFwXCIpO1xuICAgICAgICAgICAgdmFyIGlzTWFwID0gaXNNYXBMaWtlKG0pO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgICAgICBpZiAoaXNNYXApIHtcbiAgICAgICAgICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3BTY2hlbWEuc2VyaWFsaXplcih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGZvciAodmFyIGtleSBpbiBtKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvcFNjaGVtYS5zZXJpYWxpemVyKG1ba2V5XSkpO1xuICAgICAgICAgICAgICAgIC8vIHJlc3VsdFtrZXldID0gcHJvcFNjaGVtYS5zZXJpYWxpemVyKG1ba2V5XSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemVyOiBmdW5jdGlvbiAoanNvbkFycmF5LCBkb25lLCBjb250ZXh0LCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgbGlzdChwcm9wU2NoZW1hLCBhZGRpdGlvbmFsQXJncykuZGVzZXJpYWxpemVyKFxuICAgICAgICAgICAgICAgIGpzb25BcnJheSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyLCB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIGRvbmUoZXJyKVxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNNYXAgPSBpc01hcExpa2Uob2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0ganNvbkFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS5zZXQodmFsdWVzW2ldW2tleVByb3BlcnR5TmFtZV0sIHZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVbdmFsdWVzW2ldW2tleVByb3BlcnR5TmFtZV0udG9TdHJpbmcoKV0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXMsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgdGhpcyBmaWVsZCBpcyBvbmx5IG5lZWQgdG8gcHV0dGVkIGluIHRoZSBzZXJpYWxpemVkIGpzb24gb3JcbiAqIGRlc2VyaWFsaXplZCBpbnN0YW5jZSwgd2l0aG91dCBhbnkgdHJhbnNmb3JtYXRpb25zLiBTdGF5IHdpdGggaXRzIG9yaWdpbmFsIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKE1vZGVsLCB7XG4gKiAgICAgcmF3RGF0YTogcmF3KCksXG4gKiB9KTtcbiAqXG4gKiBjb25zb2xlLmRpcihzZXJpYWxpemUobmV3IE1vZGVsKHsgcmF3RGF0YTogeyBhOiAxLCBiOiBbXSwgYzoge30gfSB9IH0pKSk7XG4gKiAvLyBvdXRwdXRzOiB7IHJhd0RhdGE6IHsgYTogMSwgYjogW10sIGM6IHt9IH0gfSB9XG4gKlxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFkZGl0aW9uYWxBcmdzIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zIGJlZm9yZURlc2VyaWFsaXplIGFuZC9vciBhZnRlckRlc2VyaWFsaXplIGhhbmRsZXJzXG4gKiBAcmV0dXJucyB7TW9kZWxTY2hlbWF9XG4gKi9cbmZ1bmN0aW9uIHJhdyhhZGRpdGlvbmFsQXJncykge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25WYWx1ZSwgZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgZG9uZShudWxsLCBqc29uVmFsdWUpXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlc3VsdCA9IHByb2Nlc3NBZGRpdGlvbmFsUHJvcEFyZ3MocmVzdWx0LCBhZGRpdGlvbmFsQXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKlxuICogIyMgTWFuYWdpbmcgbW9kZWwgc2NoZW1hc1xuICovXG4vLyB+IGRlcHJlY2F0ZWRcblxuZXhwb3J0IHsgY3JlYXRlU2ltcGxlU2NoZW1hLCBjcmVhdGVNb2RlbFNjaGVtYSwgZ2V0RGVmYXVsdE1vZGVsU2NoZW1hLCBzZXREZWZhdWx0TW9kZWxTY2hlbWEsIHNlcmlhbGl6YWJsZSwgc2VyaWFsaXplLCBzZXJpYWxpemVBbGwsIGNhbmNlbERlc2VyaWFsaXplLCBkZXNlcmlhbGl6ZSwgdXBkYXRlLCBwcmltaXRpdmUsIGlkZW50aWZpZXIsIGRhdGUsIGFsaWFzLCBjdXN0b20sIG9iamVjdCwgb2JqZWN0IGFzIGNoaWxkLCBvcHRpb25hbCwgcmVmZXJlbmNlLCByZWZlcmVuY2UgYXMgcmVmLCBsaXN0LCBtYXAsIG1hcEFzQXJyYXksIHJhdywgU0tJUCB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuLy8gTW9zdGx5IHRha2VuIGZyb20gUmVhY3RQcm9wVHlwZXMuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZVNhZmUgPSBjb21wb25lbnROYW1lIHx8ICc8PGFub255bW91cz4+JztcbiAgICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignUmVxdWlyZWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZVNhZmUgKyAnYCB3YXMgbm90IHNwZWNpZmllZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWVTYWZlICsgJ2AuJykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiA2ID8gX2xlbiAtIDYgOiAwKSwgX2tleSA9IDY7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDZdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZS5hcHBseSh1bmRlZmluZWQsIFtwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWVTYWZlLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lU2FmZV0uY29uY2F0KGFyZ3MpKTtcbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJ2YXIgX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpO1xuXG52YXIgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX1dlYWtNYXAgPSByZXF1aXJlKFwiLi4vY29yZS1qcy93ZWFrLW1hcFwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICBpZiAodHlwZW9mIF9XZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGUgPSBuZXcgX1dlYWtNYXAoKTtcblxuICBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9O1xuXG4gIHJldHVybiBjYWNoZTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7XG5cbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuICB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gX09iamVjdCRkZWZpbmVQcm9wZXJ0eSAmJiBfT2JqZWN0JGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDtcblxuICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICBfT2JqZWN0JGRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajtcblxuICBpZiAoY2FjaGUpIHtcbiAgICBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZDsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2h5cGhlbmF0ZVN0eWxlXCIpKTtcblxudmFyIF9nZXRDb21wdXRlZFN0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0Q29tcHV0ZWRTdHlsZVwiKSk7XG5cbnZhciBfcmVtb3ZlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbW92ZVN0eWxlXCIpKTtcblxudmFyIF9wcm9wZXJ0aWVzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb24vcHJvcGVydGllc1wiKTtcblxudmFyIF9pc1RyYW5zZm9ybSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RyYW5zaXRpb24vaXNUcmFuc2Zvcm1cIikpO1xuXG5mdW5jdGlvbiBzdHlsZShub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuICB2YXIgcHJvcHMgPSBwcm9wZXJ0eTtcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZS5zdHlsZVsoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpXSB8fCAoMCwgX2dldENvbXB1dGVkU3R5bGUyLmRlZmF1bHQpKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoKDAsIF9oeXBoZW5hdGVTdHlsZS5kZWZhdWx0KShwcm9wZXJ0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAocHJvcHMgPSB7fSlbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BzW2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAoMCwgX3JlbW92ZVN0eWxlLmRlZmF1bHQpKG5vZGUsICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzVHJhbnNmb3JtLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9ICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSArIFwiOiBcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgfVxuICB9KTtcblxuICBpZiAodHJhbnNmb3Jtcykge1xuICAgIGNzcyArPSBfcHJvcGVydGllcy50cmFuc2Zvcm0gKyBcIjogXCIgKyB0cmFuc2Zvcm1zICsgXCI7XCI7XG4gIH1cblxuICBub2RlLnN0eWxlLmNzc1RleHQgKz0gJzsnICsgY3NzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgb24gPSBmdW5jdGlvbiBvbigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gICAgfTtlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICAgIGUuY3VycmVudFRhcmdldCA9IG5vZGU7XG4gICAgICAgIGhhbmRsZXIuY2FsbChub2RlLCBlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0oKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBvZmYgPSBmdW5jdGlvbiBvZmYoKSB7fTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIG9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAgIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlIHx8IGZhbHNlKTtcbiAgICB9O2Vsc2UgaWYgKGRvY3VtZW50LmF0dGFjaEV2ZW50KSByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgcmV0dXJuIG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgfSgpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBvZmY7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBjb3B5cmlnaHQgIDIwMTMgTWljaGFlbCBBdWZyZWl0ZXIgKERldmVsb3BtZW50IFNlZWQpIGFuZCAyMDE2IFlhaG9vIEluYy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIGVzbGludCB2YWxpZC1qc2RvYzogW1wiZXJyb3JcIiwge1wicmVxdWlyZVJldHVybkRlc2NyaXB0aW9uXCI6IGZhbHNlfV0gKi9cblxudmFyIF9HaXN0ID0gcmVxdWlyZSgnLi9HaXN0Jyk7XG5cbnZhciBfR2lzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9HaXN0KTtcblxudmFyIF9Vc2VyID0gcmVxdWlyZSgnLi9Vc2VyJyk7XG5cbnZhciBfVXNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Vc2VyKTtcblxudmFyIF9Jc3N1ZSA9IHJlcXVpcmUoJy4vSXNzdWUnKTtcblxudmFyIF9Jc3N1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Jc3N1ZSk7XG5cbnZhciBfU2VhcmNoID0gcmVxdWlyZSgnLi9TZWFyY2gnKTtcblxudmFyIF9TZWFyY2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2VhcmNoKTtcblxudmFyIF9SYXRlTGltaXQgPSByZXF1aXJlKCcuL1JhdGVMaW1pdCcpO1xuXG52YXIgX1JhdGVMaW1pdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SYXRlTGltaXQpO1xuXG52YXIgX1JlcG9zaXRvcnkgPSByZXF1aXJlKCcuL1JlcG9zaXRvcnknKTtcblxudmFyIF9SZXBvc2l0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcG9zaXRvcnkpO1xuXG52YXIgX09yZ2FuaXphdGlvbiA9IHJlcXVpcmUoJy4vT3JnYW5pemF0aW9uJyk7XG5cbnZhciBfT3JnYW5pemF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09yZ2FuaXphdGlvbik7XG5cbnZhciBfVGVhbSA9IHJlcXVpcmUoJy4vVGVhbScpO1xuXG52YXIgX1RlYW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGVhbSk7XG5cbnZhciBfTWFya2Rvd24gPSByZXF1aXJlKCcuL01hcmtkb3duJyk7XG5cbnZhciBfTWFya2Rvd24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWFya2Rvd24pO1xuXG52YXIgX1Byb2plY3QgPSByZXF1aXJlKCcuL1Byb2plY3QnKTtcblxudmFyIF9Qcm9qZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb2plY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIEdpdEh1YiBlbmNhcHN1bGF0ZXMgdGhlIGZ1bmN0aW9uYWxpdHkgdG8gY3JlYXRlIHZhcmlvdXMgQVBJIHdyYXBwZXIgb2JqZWN0cy5cbiAqL1xudmFyIEdpdEh1YiA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBHaXRIdWIuXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gW2F1dGhdIC0gdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWIuIElmIGF1dGggaXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IHByb3ZpZGVkIHJlcXVlc3RzIHdpbGwgYmUgbWFkZSB1bmF1dGhlbnRpY2F0ZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICovXG4gIGZ1bmN0aW9uIEdpdEh1YihhdXRoKSB7XG4gICAgdmFyIGFwaUJhc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdodHRwczovL2FwaS5naXRodWIuY29tJztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHaXRIdWIpO1xuXG4gICAgdGhpcy5fX2FwaUJhc2UgPSBhcGlCYXNlO1xuICAgIHRoaXMuX19hdXRoID0gYXV0aCB8fCB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgR2lzdCB3cmFwcGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbaWRdIC0gdGhlIGlkIGZvciB0aGUgZ2lzdCwgbGVhdmUgdW5kZWZpbmVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgZ2lzdFxuICAgKiBAcmV0dXJuIHtHaXN0fVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhHaXRIdWIsIFt7XG4gICAga2V5OiAnZ2V0R2lzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdpc3QoaWQpIHtcbiAgICAgIHJldHVybiBuZXcgX0dpc3QyLmRlZmF1bHQoaWQsIHRoaXMuX19hdXRoLCB0aGlzLl9fYXBpQmFzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFVzZXIgd3JhcHBlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gLSB0aGUgbmFtZSBvZiB0aGUgdXNlciB0byBnZXQgaW5mb3JtYXRpb24gYWJvdXRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXZlIHVuZGVmaW5lZCBmb3IgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlclxuICAgICAqIEByZXR1cm4ge1VzZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFVzZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVc2VyKHVzZXIpIHtcbiAgICAgIHJldHVybiBuZXcgX1VzZXIyLmRlZmF1bHQodXNlciwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT3JnYW5pemF0aW9uIHdyYXBwZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3JnYW5pemF0aW9uIC0gdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvblxuICAgICAqIEByZXR1cm4ge09yZ2FuaXphdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0T3JnYW5pemF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3JnYW5pemF0aW9uKG9yZ2FuaXphdGlvbikge1xuICAgICAgcmV0dXJuIG5ldyBfT3JnYW5pemF0aW9uMi5kZWZhdWx0KG9yZ2FuaXphdGlvbiwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBuZXcgVGVhbSB3cmFwcGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRlYW1JZCAtIHRoZSBuYW1lIG9mIHRoZSB0ZWFtXG4gICAgICogQHJldHVybiB7dGVhbX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGVhbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRlYW0odGVhbUlkKSB7XG4gICAgICByZXR1cm4gbmV3IF9UZWFtMi5kZWZhdWx0KHRlYW1JZCwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUmVwb3NpdG9yeSB3cmFwcGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXIgLSB0aGUgdXNlciB3aG8gb3ducyB0aGUgcmVwb3NpdG9yeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXBvIC0gdGhlIG5hbWUgb2YgdGhlIHJlcG9zaXRvcnlcbiAgICAgKiBAcmV0dXJuIHtSZXBvc2l0b3J5fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSZXBvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVwbyh1c2VyLCByZXBvKSB7XG4gICAgICByZXR1cm4gbmV3IF9SZXBvc2l0b3J5Mi5kZWZhdWx0KHRoaXMuX2dldEZ1bGxOYW1lKHVzZXIsIHJlcG8pLCB0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBJc3N1ZSB3cmFwcGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXIgLSB0aGUgdXNlciB3aG8gb3ducyB0aGUgcmVwb3NpdG9yeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXBvIC0gdGhlIG5hbWUgb2YgdGhlIHJlcG9zaXRvcnlcbiAgICAgKiBAcmV0dXJuIHtJc3N1ZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0SXNzdWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXNzdWVzKHVzZXIsIHJlcG8pIHtcbiAgICAgIHJldHVybiBuZXcgX0lzc3VlMi5kZWZhdWx0KHRoaXMuX2dldEZ1bGxOYW1lKHVzZXIsIHJlcG8pLCB0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBTZWFyY2ggd3JhcHBlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSAtIHRoZSBxdWVyeSB0byBzZWFyY2ggZm9yXG4gICAgICogQHJldHVybiB7U2VhcmNofVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZWFyY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2gocXVlcnkpIHtcbiAgICAgIHJldHVybiBuZXcgX1NlYXJjaDIuZGVmYXVsdChxdWVyeSwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUmF0ZUxpbWl0IHdyYXBwZXJcbiAgICAgKiBAcmV0dXJuIHtSYXRlTGltaXR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFJhdGVMaW1pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhdGVMaW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgX1JhdGVMaW1pdDIuZGVmYXVsdCh0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBNYXJrZG93biB3cmFwcGVyXG4gICAgICogQHJldHVybiB7TWFya2Rvd259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldE1hcmtkb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWFya2Rvd24oKSB7XG4gICAgICByZXR1cm4gbmV3IF9NYXJrZG93bjIuZGVmYXVsdCh0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBQcm9qZWN0IHdyYXBwZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSB0aGUgaWQgb2YgdGhlIHByb2plY3RcbiAgICAgKiBAcmV0dXJuIHtQcm9qZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQcm9qZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvamVjdChpZCkge1xuICAgICAgcmV0dXJuIG5ldyBfUHJvamVjdDIuZGVmYXVsdChpZCwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgZnVsbCByZXBvc2l0b3J5IG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlciAtIHRoZSB1c2VybmFtZSAob3IgdGhlIGZ1bGwgbmFtZSlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIHRoZSByZXBvc2l0b3J5IG5hbWUsIG11c3Qgbm90IGJlIHBhc3NlZCBpZiBgdXNlcmAgaXMgdGhlIGZ1bGwgbmFtZVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHJlcG9zaXRvcnkncyBmdWxsIG5hbWVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2dldEZ1bGxOYW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEZ1bGxOYW1lKHVzZXIsIHJlcG8pIHtcbiAgICAgIHZhciBmdWxsbmFtZSA9IHVzZXI7XG5cbiAgICAgIGlmIChyZXBvKSB7XG4gICAgICAgIGZ1bGxuYW1lID0gdXNlciArICcvJyArIHJlcG87XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdWxsbmFtZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2l0SHViO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdpdEh1Yjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrZHBkRWgxWWk1cWN5SmRMQ0p1WVcxbGN5STZXeUpIYVhSSWRXSWlMQ0poZFhSb0lpd2lZWEJwUW1GelpTSXNJbDlmWVhCcFFtRnpaU0lzSWw5ZllYVjBhQ0lzSW1sa0lpd2lSMmx6ZENJc0luVnpaWElpTENKVmMyVnlJaXdpYjNKbllXNXBlbUYwYVc5dUlpd2lUM0puWVc1cGVtRjBhVzl1SWl3aWRHVmhiVWxrSWl3aVZHVmhiU0lzSW5KbGNHOGlMQ0pTWlhCdmMybDBiM0o1SWl3aVgyZGxkRVoxYkd4T1lXMWxJaXdpU1hOemRXVWlMQ0p4ZFdWeWVTSXNJbE5sWVhKamFDSXNJbEpoZEdWTWFXMXBkQ0lzSWsxaGNtdGtiM2R1SWl3aVVISnZhbVZqZENJc0ltWjFiR3h1WVcxbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN2NXcENRVUZCT3pzN096czdRVUZOUVRzN1FVRkZRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3pzN096czdRVUZGUVRzN08wbEJSMDFCTEUwN1FVRkRTRHM3T3pzN08wRkJUVUVzYTBKQlFWbERMRWxCUVZvc1JVRkJjMFE3UVVGQlFTeFJRVUZ3UTBNc1QwRkJiME1zZFVWQlFURkNMSGRDUVVFd1FqczdRVUZCUVRzN1FVRkRia1FzVTBGQlMwTXNVMEZCVEN4SFFVRnBRa1FzVDBGQmFrSTdRVUZEUVN4VFFVRkxSU3hOUVVGTUxFZEJRV05JTEZGQlFWRXNSVUZCZEVJN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096UkNRVXRSU1N4RkxFVkJRVWs3UVVGRFZDeGhRVUZQTEVsQlFVbERMR05CUVVvc1EwRkJVMFFzUlVGQlZDeEZRVUZoTEV0QlFVdEVMRTFCUVd4Q0xFVkJRVEJDTEV0QlFVdEVMRk5CUVM5Q0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pSQ1FVMVJTU3hKTEVWQlFVMDdRVUZEV0N4aFFVRlBMRWxCUVVsRExHTkJRVW9zUTBGQlUwUXNTVUZCVkN4RlFVRmxMRXRCUVV0SUxFMUJRWEJDTEVWQlFUUkNMRXRCUVV0RUxGTkJRV3BETEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdiME5CUzJkQ1RTeFpMRVZCUVdNN1FVRkRNMElzWVVGQlR5eEpRVUZKUXl4elFrRkJTaXhEUVVGcFFrUXNXVUZCYWtJc1JVRkJLMElzUzBGQlMwd3NUVUZCY0VNc1JVRkJORU1zUzBGQlMwUXNVMEZCYWtRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenMwUWtGTFVWRXNUU3hGUVVGUk8wRkJRMklzWVVGQlR5eEpRVUZKUXl4alFVRktMRU5CUVZORUxFMUJRVlFzUlVGQmFVSXNTMEZCUzFBc1RVRkJkRUlzUlVGQk9FSXNTMEZCUzBRc1UwRkJia01zUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdORUpCVFZGSkxFa3NSVUZCVFUwc1NTeEZRVUZOTzBGQlEycENMR0ZCUVU4c1NVRkJTVU1zYjBKQlFVb3NRMEZCWlN4TFFVRkxReXhaUVVGTUxFTkJRV3RDVWl4SlFVRnNRaXhGUVVGM1FrMHNTVUZCZUVJc1EwRkJaaXhGUVVFNFF5eExRVUZMVkN4TlFVRnVSQ3hGUVVFeVJDeExRVUZMUkN4VFFVRm9SU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czRRa0ZOVlVrc1NTeEZRVUZOVFN4SkxFVkJRVTA3UVVGRGJrSXNZVUZCVHl4SlFVRkpSeXhsUVVGS0xFTkJRVlVzUzBGQlMwUXNXVUZCVEN4RFFVRnJRbElzU1VGQmJFSXNSVUZCZDBKTkxFbEJRWGhDTEVOQlFWWXNSVUZCZVVNc1MwRkJTMVFzVFVGQk9VTXNSVUZCYzBRc1MwRkJTMFFzVTBGQk0wUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzeVFrRkxUMk1zU3l4RlFVRlBPMEZCUTFnc1lVRkJUeXhKUVVGSlF5eG5Ra0ZCU2l4RFFVRlhSQ3hMUVVGWUxFVkJRV3RDTEV0QlFVdGlMRTFCUVhaQ0xFVkJRU3RDTEV0QlFVdEVMRk5CUVhCRExFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenR0UTBGSlpUdEJRVU5hTEdGQlFVOHNTVUZCU1dkQ0xHMUNRVUZLTEVOQlFXTXNTMEZCUzJZc1RVRkJia0lzUlVGQk1rSXNTMEZCUzBRc1UwRkJhRU1zUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN08ydERRVWxqTzBGQlExZ3NZVUZCVHl4SlFVRkphVUlzYTBKQlFVb3NRMEZCWVN4TFFVRkxhRUlzVFVGQmJFSXNSVUZCTUVJc1MwRkJTMFFzVTBGQkwwSXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzclFrRkxWMFVzUlN4RlFVRkpPMEZCUTFvc1lVRkJUeXhKUVVGSlowSXNhVUpCUVVvc1EwRkJXV2hDTEVWQlFWb3NSVUZCWjBJc1MwRkJTMFFzVFVGQmNrSXNSVUZCTmtJc1MwRkJTMFFzVTBGQmJFTXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN2FVTkJUV0ZKTEVrc1JVRkJUVTBzU1N4RlFVRk5PMEZCUTNSQ0xGVkJRVWxUTEZkQlFWZG1MRWxCUVdZN08wRkJSVUVzVlVGQlNVMHNTVUZCU2l4RlFVRlZPMEZCUTFCVExHMUNRVUZqWml4SlFVRmtMRk5CUVhOQ1RTeEpRVUYwUWp0QlFVTkdPenRCUVVWRUxHRkJRVTlUTEZGQlFWQTdRVUZEUmpzN096czdPMEZCUjBwRExFOUJRVTlETEU5QlFWQXNSMEZCYVVKNFFpeE5RVUZxUWlJc0ltWnBiR1VpT2lKSGFYUklkV0l1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFQm1hV3hsWEc0Z0tpQkFZMjl3ZVhKcFoyaDBJQ0F5TURFeklFMXBZMmhoWld3Z1FYVm1jbVZwZEdWeUlDaEVaWFpsYkc5d2JXVnVkQ0JUWldWa0tTQmhibVFnTWpBeE5pQlpZV2h2YnlCSmJtTXVYRzRnS2lCQWJHbGpaVzV6WlNBZ0lDQk1hV05sYm5ObFpDQjFibVJsY2lCN1FHeHBibXNnYUhSMGNITTZMeTl6Y0dSNExtOXlaeTlzYVdObGJuTmxjeTlDVTBRdE15MURiR0YxYzJVdFEyeGxZWEl1YUhSdGJDQkNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSjlMbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdSMmwwYUhWaUxtcHpJR2x6SUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJoWW14bExseHVJQ292WEc0dktpQmxjMnhwYm5RZ2RtRnNhV1F0YW5Oa2IyTTZJRnRjSW1WeWNtOXlYQ0lzSUh0Y0luSmxjWFZwY21WU1pYUjFjbTVFWlhOamNtbHdkR2x2Ymx3aU9pQm1ZV3h6WlgxZElDb3ZYRzVjYm1sdGNHOXlkQ0JIYVhOMElHWnliMjBnSnk0dlIybHpkQ2M3WEc1cGJYQnZjblFnVlhObGNpQm1jbTl0SUNjdUwxVnpaWEluTzF4dWFXMXdiM0owSUVsemMzVmxJR1p5YjIwZ0p5NHZTWE56ZFdVbk8xeHVhVzF3YjNKMElGTmxZWEpqYUNCbWNtOXRJQ2N1TDFObFlYSmphQ2M3WEc1cGJYQnZjblFnVW1GMFpVeHBiV2wwSUdaeWIyMGdKeTR2VW1GMFpVeHBiV2wwSnp0Y2JtbHRjRzl5ZENCU1pYQnZjMmwwYjNKNUlHWnliMjBnSnk0dlVtVndiM05wZEc5eWVTYzdYRzVwYlhCdmNuUWdUM0puWVc1cGVtRjBhVzl1SUdaeWIyMGdKeTR2VDNKbllXNXBlbUYwYVc5dUp6dGNibWx0Y0c5eWRDQlVaV0Z0SUdaeWIyMGdKeTR2VkdWaGJTYzdYRzVwYlhCdmNuUWdUV0Z5YTJSdmQyNGdabkp2YlNBbkxpOU5ZWEpyWkc5M2JpYzdYRzVwYlhCdmNuUWdVSEp2YW1WamRDQm1jbTl0SUNjdUwxQnliMnBsWTNRbk8xeHVYRzR2S2lwY2JpQXFJRWRwZEVoMVlpQmxibU5oY0hOMWJHRjBaWE1nZEdobElHWjFibU4wYVc5dVlXeHBkSGtnZEc4Z1kzSmxZWFJsSUhaaGNtbHZkWE1nUVZCSklIZHlZWEJ3WlhJZ2IySnFaV04wY3k1Y2JpQXFMMXh1WTJ4aGMzTWdSMmwwU0hWaUlIdGNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJRWRwZEVoMVlpNWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZWFYwYUgwZ1cyRjFkR2hkSUMwZ2RHaGxJR055WldSbGJuUnBZV3h6SUhSdklHRjFkR2hsYm5ScFkyRjBaU0IwYnlCSGFYUm9kV0l1SUVsbUlHRjFkR2dnYVhOY2JpQWdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2ZENCd2NtOTJhV1JsWkNCeVpYRjFaWE4wY3lCM2FXeHNJR0psSUcxaFpHVWdkVzVoZFhSb1pXNTBhV05oZEdWa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzJGd2FVSmhjMlU5YUhSMGNITTZMeTloY0drdVoybDBhSFZpTG1OdmJWMGdMU0IwYUdVZ1ltRnpaU0JIYVhSb2RXSWdRVkJKSUZWU1RGeHVJQ0FnSUNvdlhHNGdJQ0JqYjI1emRISjFZM1J2Y2loaGRYUm9MQ0JoY0dsQ1lYTmxJRDBnSjJoMGRIQnpPaTh2WVhCcExtZHBkR2gxWWk1amIyMG5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWZZWEJwUW1GelpTQTlJR0Z3YVVKaGMyVTdYRzRnSUNBZ0lDQjBhR2x6TGw5ZllYVjBhQ0E5SUdGMWRHZ2dmSHdnZTMwN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTNKbFlYUmxJR0VnYm1WM0lFZHBjM1FnZDNKaGNIQmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdHBaRjBnTFNCMGFHVWdhV1FnWm05eUlIUm9aU0JuYVhOMExDQnNaV0YyWlNCMWJtUmxabWx1WldRZ2QyaGxiaUJqY21WaGRHbHVaeUJoSUc1bGR5Qm5hWE4wWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRIYVhOMGZWeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSSGFYTjBLR2xrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFZHBjM1FvYVdRc0lIUm9hWE11WDE5aGRYUm9MQ0IwYUdsekxsOWZZWEJwUW1GelpTazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJRlZ6WlhJZ2QzSmhjSEJsY2x4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRnQxYzJWeVhTQXRJSFJvWlNCdVlXMWxJRzltSUhSb1pTQjFjMlZ5SUhSdklHZGxkQ0JwYm1admNtMWhkR2x2YmlCaFltOTFkRnh1SUNBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXRjJaU0IxYm1SbFptbHVaV1FnWm05eUlIUm9aU0JoZFhSb1pXNTBhV05oZEdWa0lIVnpaWEpjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMVZ6WlhKOVhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEZWelpYSW9kWE5sY2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlZjMlZ5S0hWelpYSXNJSFJvYVhNdVgxOWhkWFJvTENCMGFHbHpMbDlmWVhCcFFtRnpaU2s3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dRM0psWVhSbElHRWdibVYzSUU5eVoyRnVhWHBoZEdsdmJpQjNjbUZ3Y0dWeVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYjNKbllXNXBlbUYwYVc5dUlDMGdkR2hsSUc1aGJXVWdiMllnZEdobElHOXlaMkZ1YVhwaGRHbHZibHh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdUM0puWVc1cGVtRjBhVzl1ZlZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJQY21kaGJtbDZZWFJwYjI0b2IzSm5ZVzVwZW1GMGFXOXVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUU5eVoyRnVhWHBoZEdsdmJpaHZjbWRoYm1sNllYUnBiMjRzSUhSb2FYTXVYMTloZFhSb0xDQjBhR2x6TGw5ZllYQnBRbUZ6WlNrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nWTNKbFlYUmxJR0VnYm1WM0lGUmxZVzBnZDNKaGNIQmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmxZVzFKWkNBdElIUm9aU0J1WVcxbElHOW1JSFJvWlNCMFpXRnRYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdDBaV0Z0ZlZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJVWldGdEtIUmxZVzFKWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlVaV0Z0S0hSbFlXMUpaQ3dnZEdocGN5NWZYMkYxZEdnc0lIUm9hWE11WDE5aGNHbENZWE5sS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ1VtVndiM05wZEc5eWVTQjNjbUZ3Y0dWeVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZFhObGNpQXRJSFJvWlNCMWMyVnlJSGRvYnlCdmQyNXpJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY21Wd2J5QXRJSFJvWlNCdVlXMWxJRzltSUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFNaWEJ2YzJsMGIzSjVmVnh1SUNBZ0lDb3ZYRzRnSUNCblpYUlNaWEJ2S0hWelpYSXNJSEpsY0c4cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVbVZ3YjNOcGRHOXllU2gwYUdsekxsOW5aWFJHZFd4c1RtRnRaU2gxYzJWeUxDQnlaWEJ2S1N3Z2RHaHBjeTVmWDJGMWRHZ3NJSFJvYVhNdVgxOWhjR2xDWVhObEtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGNtVmhkR1VnWVNCdVpYY2dTWE56ZFdVZ2QzSmhjSEJsY2x4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFZ6WlhJZ0xTQjBhR1VnZFhObGNpQjNhRzhnYjNkdWN5QjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsY0c4Z0xTQjBhR1VnYm1GdFpTQnZaaUIwYUdVZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1NYTnpkV1Y5WEc0Z0lDQWdLaTljYmlBZ0lHZGxkRWx6YzNWbGN5aDFjMlZ5TENCeVpYQnZLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVsemMzVmxLSFJvYVhNdVgyZGxkRVoxYkd4T1lXMWxLSFZ6WlhJc0lISmxjRzhwTENCMGFHbHpMbDlmWVhWMGFDd2dkR2hwY3k1ZlgyRndhVUpoYzJVcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QlRaV0Z5WTJnZ2QzSmhjSEJsY2x4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEYxWlhKNUlDMGdkR2hsSUhGMVpYSjVJSFJ2SUhObFlYSmphQ0JtYjNKY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFObFlYSmphSDFjYmlBZ0lDQXFMMXh1SUNBZ2MyVmhjbU5vS0hGMVpYSjVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZObFlYSmphQ2h4ZFdWeWVTd2dkR2hwY3k1ZlgyRjFkR2dzSUhSb2FYTXVYMTloY0dsQ1lYTmxLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnVW1GMFpVeHBiV2wwSUhkeVlYQndaWEpjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUpoZEdWTWFXMXBkSDFjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBVbUYwWlV4cGJXbDBLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlCU1lYUmxUR2x0YVhRb2RHaHBjeTVmWDJGMWRHZ3NJSFJvYVhNdVgxOWhjR2xDWVhObEtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGNtVmhkR1VnWVNCdVpYY2dUV0Z5YTJSdmQyNGdkM0poY0hCbGNseHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1RXRnlhMlJ2ZDI1OVhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEUxaGNtdGtiM2R1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5ZWEpyWkc5M2JpaDBhR2x6TGw5ZllYVjBhQ3dnZEdocGN5NWZYMkZ3YVVKaGMyVXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUJRY205cVpXTjBJSGR5WVhCd1pYSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2NISnZhbVZqZEZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmFtVmpkSDFjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBVSEp2YW1WamRDaHBaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXFaV04wS0dsa0xDQjBhR2x6TGw5ZllYVjBhQ3dnZEdocGN5NWZYMkZ3YVVKaGMyVXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnZiWEIxZEdWeklIUm9aU0JtZFd4c0lISmxjRzl6YVhSdmNua2dibUZ0WlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFZ6WlhJZ0xTQjBhR1VnZFhObGNtNWhiV1VnS0c5eUlIUm9aU0JtZFd4c0lHNWhiV1VwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZ3YnlBdElIUm9aU0J5WlhCdmMybDBiM0o1SUc1aGJXVXNJRzExYzNRZ2JtOTBJR0psSUhCaGMzTmxaQ0JwWmlCZ2RYTmxjbUFnYVhNZ2RHaGxJR1oxYkd3Z2JtRnRaVnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQjBhR1VnY21Wd2IzTnBkRzl5ZVNkeklHWjFiR3dnYm1GdFpWeHVJQ0FnSUNvdlhHNGdJQ0JmWjJWMFJuVnNiRTVoYldVb2RYTmxjaXdnY21Wd2J5a2dlMXh1SUNBZ0lDQWdiR1YwSUdaMWJHeHVZVzFsSUQwZ2RYTmxjanRjYmx4dUlDQWdJQ0FnYVdZZ0tISmxjRzhwSUh0Y2JpQWdJQ0FnSUNBZ0lHWjFiR3h1WVcxbElEMGdZQ1I3ZFhObGNuMHZKSHR5WlhCdmZXQTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQm1kV3hzYm1GdFpUdGNiaUFnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JIYVhSSWRXSTdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2l0SHViLmpzLm1hcFxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNlcmlhbGl6cl8xID0gcmVxdWlyZShcInNlcmlhbGl6clwiKTtcbmZ1bmN0aW9uIF93YWxrKHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdvYmplY3QnICYmIHYpXG4gICAgICAgIE9iamVjdC5rZXlzKHYpLm1hcChmdW5jdGlvbiAoaykgeyByZXR1cm4gX3dhbGsodltrXSk7IH0pO1xuICAgIHJldHVybiB2O1xufVxuZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6cl8xLmN1c3RvbShfd2FsaywgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHY7IH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0KHMpIHtcbiAgICByZXR1cm4gcyA/IHNlcmlhbGl6cl8xLm9iamVjdChzKSA6IF9kZWZhdWx0KCk7XG59XG5mdW5jdGlvbiBsaXN0KHMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXpyXzEubGlzdChvYmplY3QocykpO1xufVxuZnVuY3Rpb24gbWFwKHMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXpyXzEubWFwKG9iamVjdChzKSk7XG59XG5leHBvcnRzLnR5cGVzID0geyBvYmplY3Q6IG9iamVjdCwgbGlzdDogbGlzdCwgbWFwOiBtYXAgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIvKlxuICogIGJhc2U2NC5qc1xuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtQ2xhdXNlIExpY2Vuc2UuXG4gKiAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogIFJlZmVyZW5jZXM6XG4gKiAgICBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NFxuICovXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZ2xvYmFsKVxuICAgICAgICA6IHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZFxuICAgICAgICA/IGRlZmluZShmYWN0b3J5KSA6IGZhY3RvcnkoZ2xvYmFsKVxufSgoXG4gICAgdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZlxuICAgICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93XG4gICAgICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxcbjogdGhpc1xuKSwgZnVuY3Rpb24oZ2xvYmFsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIGV4aXN0aW5nIHZlcnNpb24gZm9yIG5vQ29uZmxpY3QoKVxuICAgIGdsb2JhbCA9IGdsb2JhbCB8fCB7fTtcbiAgICB2YXIgX0Jhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7XG4gICAgdmFyIHZlcnNpb24gPSBcIjIuNi40XCI7XG4gICAgLy8gY29uc3RhbnRzXG4gICAgdmFyIGI2NGNoYXJzXG4gICAgICAgID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuICAgIHZhciBiNjR0YWIgPSBmdW5jdGlvbihiaW4pIHtcbiAgICAgICAgdmFyIHQgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBiaW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB0W2Jpbi5jaGFyQXQoaSldID0gaTtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfShiNjRjaGFycyk7XG4gICAgdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG4gICAgLy8gZW5jb2RlciBzdHVmZlxuICAgIHZhciBjYl91dG9iID0gZnVuY3Rpb24oYykge1xuICAgICAgICBpZiAoYy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICB2YXIgY2MgPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICByZXR1cm4gY2MgPCAweDgwID8gY1xuICAgICAgICAgICAgICAgIDogY2MgPCAweDgwMCA/IChmcm9tQ2hhckNvZGUoMHhjMCB8IChjYyA+Pj4gNikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoY2MgJiAweDNmKSkpXG4gICAgICAgICAgICAgICAgOiAoZnJvbUNoYXJDb2RlKDB4ZTAgfCAoKGNjID4+PiAxMikgJiAweDBmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8ICgoY2MgPj4+ICA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKCBjYyAgICAgICAgICYgMHgzZikpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjYyA9IDB4MTAwMDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMCkgLSAweEQ4MDApICogMHg0MDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMSkgLSAweERDMDApO1xuICAgICAgICAgICAgcmV0dXJuIChmcm9tQ2hhckNvZGUoMHhmMCB8ICgoY2MgPj4+IDE4KSAmIDB4MDcpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKChjYyA+Pj4gMTIpICYgMHgzZikpXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGNjID4+PiAgNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8ICggY2MgICAgICAgICAmIDB4M2YpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG4gICAgdmFyIHV0b2IgPSBmdW5jdGlvbih1KSB7XG4gICAgICAgIHJldHVybiB1LnJlcGxhY2UocmVfdXRvYiwgY2JfdXRvYik7XG4gICAgfTtcbiAgICB2YXIgY2JfZW5jb2RlID0gZnVuY3Rpb24oY2NjKSB7XG4gICAgICAgIHZhciBwYWRsZW4gPSBbMCwgMiwgMV1bY2NjLmxlbmd0aCAlIDNdLFxuICAgICAgICBvcmQgPSBjY2MuY2hhckNvZGVBdCgwKSA8PCAxNlxuICAgICAgICAgICAgfCAoKGNjYy5sZW5ndGggPiAxID8gY2NjLmNoYXJDb2RlQXQoMSkgOiAwKSA8PCA4KVxuICAgICAgICAgICAgfCAoKGNjYy5sZW5ndGggPiAyID8gY2NjLmNoYXJDb2RlQXQoMikgOiAwKSksXG4gICAgICAgIGNoYXJzID0gW1xuICAgICAgICAgICAgYjY0Y2hhcnMuY2hhckF0KCBvcmQgPj4+IDE4KSxcbiAgICAgICAgICAgIGI2NGNoYXJzLmNoYXJBdCgob3JkID4+PiAxMikgJiA2MyksXG4gICAgICAgICAgICBwYWRsZW4gPj0gMiA/ICc9JyA6IGI2NGNoYXJzLmNoYXJBdCgob3JkID4+PiA2KSAmIDYzKSxcbiAgICAgICAgICAgIHBhZGxlbiA+PSAxID8gJz0nIDogYjY0Y2hhcnMuY2hhckF0KG9yZCAmIDYzKVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gY2hhcnMuam9pbignJyk7XG4gICAgfTtcbiAgICB2YXIgYnRvYSA9IGdsb2JhbC5idG9hICYmIHR5cGVvZiBnbG9iYWwuYnRvYSA9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gZnVuY3Rpb24oYil7IHJldHVybiBnbG9iYWwuYnRvYShiKSB9IDogZnVuY3Rpb24oYikge1xuICAgICAgICBpZiAoYi5tYXRjaCgvW15cXHgwMC1cXHhGRl0vKSkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICAgICAnVGhlIHN0cmluZyBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuJ1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYi5yZXBsYWNlKC9bXFxzXFxTXXsxLDN9L2csIGNiX2VuY29kZSk7XG4gICAgfTtcbiAgICB2YXIgX2VuY29kZSA9IGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgcmV0dXJuIGJ0b2EodXRvYihTdHJpbmcodSkpKTtcbiAgICB9O1xuICAgIHZhciBta1VyaVNhZmUgPSBmdW5jdGlvbiAoYjY0KSB7XG4gICAgICAgIHJldHVybiBiNjQucmVwbGFjZSgvWytcXC9dL2csIGZ1bmN0aW9uKG0wKSB7XG4gICAgICAgICAgICByZXR1cm4gbTAgPT0gJysnID8gJy0nIDogJ18nO1xuICAgICAgICB9KS5yZXBsYWNlKC89L2csICcnKTtcbiAgICB9O1xuICAgIHZhciBlbmNvZGUgPSBmdW5jdGlvbih1LCB1cmlzYWZlKSB7XG4gICAgICAgIHJldHVybiB1cmlzYWZlID8gbWtVcmlTYWZlKF9lbmNvZGUodSkpIDogX2VuY29kZSh1KTtcbiAgICB9O1xuICAgIHZhciBlbmNvZGVVUkkgPSBmdW5jdGlvbih1KSB7IHJldHVybiBlbmNvZGUodSwgdHJ1ZSkgfTtcbiAgICB2YXIgZnJvbVVpbnQ4QXJyYXk7XG4gICAgaWYgKGdsb2JhbC5VaW50OEFycmF5KSBmcm9tVWludDhBcnJheSA9IGZ1bmN0aW9uKGEsIHVyaXNhZmUpIHtcbiAgICAgICAgLy8gcmV0dXJuIGJ0b2EoZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGEpKTtcbiAgICAgICAgdmFyIGI2NCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSArPSAzKSB7XG4gICAgICAgICAgICB2YXIgYTAgPSBhW2ldLCBhMSA9IGFbaSsxXSwgYTIgPSBhW2krMl07XG4gICAgICAgICAgICB2YXIgb3JkID0gYTAgPDwgMTYgfCBhMSA8PCA4IHwgYTI7XG4gICAgICAgICAgICBiNjQgKz0gICAgYjY0Y2hhcnMuY2hhckF0KCBvcmQgPj4+IDE4KVxuICAgICAgICAgICAgICAgICsgICAgIGI2NGNoYXJzLmNoYXJBdCgob3JkID4+PiAxMikgJiA2MylcbiAgICAgICAgICAgICAgICArICggdHlwZW9mIGExICE9ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgID8gYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+ICA2KSAmIDYzKSA6ICc9JylcbiAgICAgICAgICAgICAgICArICggdHlwZW9mIGEyICE9ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgID8gYjY0Y2hhcnMuY2hhckF0KCBvcmQgICAgICAgICAmIDYzKSA6ICc9Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVyaXNhZmUgPyBta1VyaVNhZmUoYjY0KSA6IGI2NDtcbiAgICB9O1xuICAgIC8vIGRlY29kZXIgc3R1ZmZcbiAgICB2YXIgcmVfYnRvdSA9IC9bXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXXxbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfXxbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfS9nO1xuICAgIHZhciBjYl9idG91ID0gZnVuY3Rpb24oY2NjYykge1xuICAgICAgICBzd2l0Y2goY2NjYy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgdmFyIGNwID0gKCgweDA3ICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCAxOClcbiAgICAgICAgICAgICAgICB8ICAgICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgMTIpXG4gICAgICAgICAgICAgICAgfCAgICAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpIDw8ICA2KVxuICAgICAgICAgICAgICAgIHwgICAgICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDMpKSxcbiAgICAgICAgICAgIG9mZnNldCA9IGNwIC0gMHgxMDAwMDtcbiAgICAgICAgICAgIHJldHVybiAoZnJvbUNoYXJDb2RlKChvZmZzZXQgID4+PiAxMCkgKyAweEQ4MDApXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKChvZmZzZXQgJiAweDNGRikgKyAweERDMDApKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIGZyb21DaGFyQ29kZShcbiAgICAgICAgICAgICAgICAoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgfCAgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpXG4gICAgICAgICAgICApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICBmcm9tQ2hhckNvZGUoXG4gICAgICAgICAgICAgICAgKCgweDFmICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCA2KVxuICAgICAgICAgICAgICAgICAgICB8ICAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBidG91ID0gZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gYi5yZXBsYWNlKHJlX2J0b3UsIGNiX2J0b3UpO1xuICAgIH07XG4gICAgdmFyIGNiX2RlY29kZSA9IGZ1bmN0aW9uKGNjY2MpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNjY2MubGVuZ3RoLFxuICAgICAgICBwYWRsZW4gPSBsZW4gJSA0LFxuICAgICAgICBuID0gKGxlbiA+IDAgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMCldIDw8IDE4IDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDEgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMSldIDw8IDEyIDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDIgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMildIDw8ICA2IDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDMgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMyldICAgICAgIDogMCksXG4gICAgICAgIGNoYXJzID0gW1xuICAgICAgICAgICAgZnJvbUNoYXJDb2RlKCBuID4+PiAxNiksXG4gICAgICAgICAgICBmcm9tQ2hhckNvZGUoKG4gPj4+ICA4KSAmIDB4ZmYpLFxuICAgICAgICAgICAgZnJvbUNoYXJDb2RlKCBuICAgICAgICAgJiAweGZmKVxuICAgICAgICBdO1xuICAgICAgICBjaGFycy5sZW5ndGggLT0gWzAsIDAsIDIsIDFdW3BhZGxlbl07XG4gICAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgICB9O1xuICAgIHZhciBfYXRvYiA9IGdsb2JhbC5hdG9iICYmIHR5cGVvZiBnbG9iYWwuYXRvYiA9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gZnVuY3Rpb24oYSl7IHJldHVybiBnbG9iYWwuYXRvYihhKSB9IDogZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBhLnJlcGxhY2UoL1xcU3sxLDR9L2csIGNiX2RlY29kZSk7XG4gICAgfTtcbiAgICB2YXIgYXRvYiA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgcmV0dXJuIF9hdG9iKFN0cmluZyhhKS5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL10vZywgJycpKTtcbiAgICB9O1xuICAgIHZhciBfZGVjb2RlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gYnRvdShfYXRvYihhKSkgfTtcbiAgICB2YXIgX2Zyb21VUkkgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoYSkucmVwbGFjZSgvWy1fXS9nLCBmdW5jdGlvbihtMCkge1xuICAgICAgICAgICAgcmV0dXJuIG0wID09ICctJyA/ICcrJyA6ICcvJ1xuICAgICAgICB9KS5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL10vZywgJycpO1xuICAgIH07XG4gICAgdmFyIGRlY29kZSA9IGZ1bmN0aW9uKGEpe1xuICAgICAgICByZXR1cm4gX2RlY29kZShfZnJvbVVSSShhKSk7XG4gICAgfTtcbiAgICB2YXIgdG9VaW50OEFycmF5O1xuICAgIGlmIChnbG9iYWwuVWludDhBcnJheSkgdG9VaW50OEFycmF5ID0gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGF0b2IoX2Zyb21VUkkoYSkpLCBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5jaGFyQ29kZUF0KDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHZhciBub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBCYXNlNjQgPSBnbG9iYWwuQmFzZTY0O1xuICAgICAgICBnbG9iYWwuQmFzZTY0ID0gX0Jhc2U2NDtcbiAgICAgICAgcmV0dXJuIEJhc2U2NDtcbiAgICB9O1xuICAgIC8vIGV4cG9ydCBCYXNlNjRcbiAgICBnbG9iYWwuQmFzZTY0ID0ge1xuICAgICAgICBWRVJTSU9OOiB2ZXJzaW9uLFxuICAgICAgICBhdG9iOiBhdG9iLFxuICAgICAgICBidG9hOiBidG9hLFxuICAgICAgICBmcm9tQmFzZTY0OiBkZWNvZGUsXG4gICAgICAgIHRvQmFzZTY0OiBlbmNvZGUsXG4gICAgICAgIHV0b2I6IHV0b2IsXG4gICAgICAgIGVuY29kZTogZW5jb2RlLFxuICAgICAgICBlbmNvZGVVUkk6IGVuY29kZVVSSSxcbiAgICAgICAgYnRvdTogYnRvdSxcbiAgICAgICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgICAgIG5vQ29uZmxpY3Q6IG5vQ29uZmxpY3QsXG4gICAgICAgIGZyb21VaW50OEFycmF5OiBmcm9tVWludDhBcnJheSxcbiAgICAgICAgdG9VaW50OEFycmF5OiB0b1VpbnQ4QXJyYXlcbiAgICB9O1xuICAgIC8vIGlmIEVTNSBpcyBhdmFpbGFibGUsIG1ha2UgQmFzZTY0LmV4dGVuZFN0cmluZygpIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBub0VudW0gPSBmdW5jdGlvbih2KXtcbiAgICAgICAgICAgIHJldHVybiB7dmFsdWU6dixlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9O1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWwuQmFzZTY0LmV4dGVuZFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlLCAnZnJvbUJhc2U2NCcsIG5vRW51bShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGUodGhpcylcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZSwgJ3RvQmFzZTY0Jywgbm9FbnVtKGZ1bmN0aW9uICh1cmlzYWZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGUodGhpcywgdXJpc2FmZSlcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZSwgJ3RvQmFzZTY0VVJJJywgbm9FbnVtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy9cbiAgICAvLyBleHBvcnQgQmFzZTY0IHRvIHRoZSBuYW1lc3BhY2VcbiAgICAvL1xuICAgIGlmIChnbG9iYWxbJ01ldGVvciddKSB7IC8vIE1ldGVvci5qc1xuICAgICAgICBCYXNlNjQgPSBnbG9iYWwuQmFzZTY0O1xuICAgIH1cbiAgICAvLyBtb2R1bGUuZXhwb3J0cyBhbmQgQU1EIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuXG4gICAgLy8gbW9kdWxlLmV4cG9ydHMgaGFzIHByZWNlZGVuY2UuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzLkJhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKXsgcmV0dXJuIGdsb2JhbC5CYXNlNjQgfSk7XG4gICAgfVxuICAgIC8vIHRoYXQncyBpdCFcbiAgICByZXR1cm4ge0Jhc2U2NDogZ2xvYmFsLkJhc2U2NH1cbn0pKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2VudHJpZXNcIik7IiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBpZiAoc2FmZSAmJiB0YXJnZXRba2V5XSkgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2luRE9NID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvdXRpbC9pbkRPTScpO1xuXG52YXIgX2luRE9NMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luRE9NKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50ID0gcmVxdWlyZSgncHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50Jyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudE9yRWxlbWVudCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9nZXRDb250YWluZXIgPSByZXF1aXJlKCcuL3V0aWxzL2dldENvbnRhaW5lcicpO1xuXG52YXIgX2dldENvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb250YWluZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG52YXIgX0xlZ2FjeVBvcnRhbCA9IHJlcXVpcmUoJy4vTGVnYWN5UG9ydGFsJyk7XG5cbnZhciBfTGVnYWN5UG9ydGFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xlZ2FjeVBvcnRhbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGUgYDxQb3J0YWwvPmAgY29tcG9uZW50IHJlbmRlcnMgaXRzIGNoaWxkcmVuIGludG8gYSBuZXcgXCJzdWJ0cmVlXCIgb3V0c2lkZSBvZiBjdXJyZW50IGNvbXBvbmVudCBoaWVyYXJjaHkuXG4gKiBZb3UgY2FuIHRoaW5rIG9mIGl0IGFzIGEgZGVjbGFyYXRpdmUgYGFwcGVuZENoaWxkKClgLCBvciBqUXVlcnkncyBgJC5mbi5hcHBlbmRUbygpYC5cbiAqIFRoZSBjaGlsZHJlbiBvZiBgPFBvcnRhbC8+YCBjb21wb25lbnQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgYGNvbnRhaW5lcmAgc3BlY2lmaWVkLlxuICovXG52YXIgUG9ydGFsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcnRhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9ydGFsKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5nZXRNb3VudE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGU7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBQb3J0YWwucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGlmICghX2luRE9NMi5kZWZhdWx0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW5lciA9IHRoaXMucHJvcHMuY29udGFpbmVyO1xuXG4gICAgaWYgKHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lcigpO1xuICAgIH1cblxuICAgIGlmIChjb250YWluZXIgJiYgIV9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShjb250YWluZXIpKSB7XG4gICAgICAvLyBUaGUgY29udGFpbmVyIGlzIGEgUmVhY3QgY29tcG9uZW50IHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiByZW5kZXJlZC5cbiAgICAgIC8vIERvbid0IHNldCB0aGUgY29udGFpbmVyIG5vZGUgeWV0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0Q29udGFpbmVyKGNvbnRhaW5lcik7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSkge1xuICAgICAgdGhpcy5zZXRDb250YWluZXIodGhpcy5wcm9wcy5jb250YWluZXIpO1xuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSh0aGlzLnByb3BzLm9uUmVuZGVyZWQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5vblJlbmRlcmVkKSB7XG4gICAgICB0aGlzLnByb3BzLm9uUmVuZGVyZWQoKTtcbiAgICB9XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuY29udGFpbmVyICE9PSB0aGlzLnByb3BzLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy5zZXRDb250YWluZXIobmV4dFByb3BzLmNvbnRhaW5lcik7XG4gICAgfVxuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID0gbnVsbDtcbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLnNldENvbnRhaW5lciA9IGZ1bmN0aW9uIHNldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgICB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID0gKDAsIF9nZXRDb250YWluZXIyLmRlZmF1bHQpKGNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KSh0aGlzKS5ib2R5KTtcbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID8gX3JlYWN0RG9tMi5kZWZhdWx0LmNyZWF0ZVBvcnRhbCh0aGlzLnByb3BzLmNoaWxkcmVuLCB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFBvcnRhbDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvcnRhbC5kaXNwbGF5TmFtZSA9ICdQb3J0YWwnO1xuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgTm9kZSwgQ29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBQb3J0YWwgY2hpbGRyZW5cbiAgICogYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICBvblJlbmRlcmVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsID8gUG9ydGFsIDogX0xlZ2FjeVBvcnRhbDIuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9mZnNldDtcblxudmFyIF9jb250YWlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29udGFpbnNcIikpO1xuXG52YXIgX2lzV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBvZmZzZXQobm9kZSkge1xuICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKG5vZGUpLFxuICAgICAgd2luID0gKDAsIF9pc1dpbmRvdy5kZWZhdWx0KShkb2MpLFxuICAgICAgZG9jRWxlbSA9IGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgYm94ID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGhlaWdodDogMCxcbiAgICB3aWR0aDogMFxuICB9O1xuICBpZiAoIWRvYykgcmV0dXJuOyAvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblxuICBpZiAoISgwLCBfY29udGFpbnMuZGVmYXVsdCkoZG9jRWxlbSwgbm9kZSkpIHJldHVybiBib3g7XG4gIGlmIChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gdW5kZWZpbmVkKSBib3ggPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBJRTggZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGRvZXNuJ3Qgc3VwcG9ydCB3aWR0aCAmIGhlaWdodFxuXG4gIGJveCA9IHtcbiAgICB0b3A6IGJveC50b3AgKyAod2luLnBhZ2VZT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsVG9wKSAtIChkb2NFbGVtLmNsaWVudFRvcCB8fCAwKSxcbiAgICBsZWZ0OiBib3gubGVmdCArICh3aW4ucGFnZVhPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxMZWZ0KSAtIChkb2NFbGVtLmNsaWVudExlZnQgfHwgMCksXG4gICAgd2lkdGg6IChib3gud2lkdGggPT0gbnVsbCA/IG5vZGUub2Zmc2V0V2lkdGggOiBib3gud2lkdGgpIHx8IDAsXG4gICAgaGVpZ2h0OiAoYm94LmhlaWdodCA9PSBudWxsID8gbm9kZS5vZmZzZXRIZWlnaHQgOiBib3guaGVpZ2h0KSB8fCAwXG4gIH07XG4gIHJldHVybiBib3g7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxpemVTdHlsZU5hbWU7XG5cbnZhciBfY2FtZWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NhbWVsaXplXCIpKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzJhZWI4YTJhNmJlYjAwNjE3YTQyMTdmN2Y4Mjg0OTI0ZmEyYWQ4MTkvc3JjL3ZlbmRvci9jb3JlL2NhbWVsaXplU3R5bGVOYW1lLmpzXG4gKi9cbnZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuICgwLCBfY2FtZWxpemUuZGVmYXVsdCkoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbFRvcDtcblxudmFyIF9pc1dpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNXaW5kb3dcIikpO1xuXG5mdW5jdGlvbiBzY3JvbGxUb3Aobm9kZSwgdmFsKSB7XG4gIHZhciB3aW4gPSAoMCwgX2lzV2luZG93LmRlZmF1bHQpKG5vZGUpO1xuICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiB3aW4gPyAncGFnZVlPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWU9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDogbm9kZS5zY3JvbGxUb3A7XG4gIGlmICh3aW4pIHdpbi5zY3JvbGxUbygncGFnZVhPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWE9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCwgdmFsKTtlbHNlIG5vZGUuc2Nyb2xsVG9wID0gdmFsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICgwLCBfb24yLmRlZmF1bHQpKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcblxuICByZXR1cm4ge1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgKDAsIF9vZmYyLmRlZmF1bHQpKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgX29uID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvZXZlbnRzL29uJyk7XG5cbnZhciBfb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb24pO1xuXG52YXIgX29mZiA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL2V2ZW50cy9vZmYnKTtcblxudmFyIF9vZmYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2ZmKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25cIikpO1xuXG52YXIgX2ZhZGVTdHlsZXM7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBmYWRlIGluIG9yIGZhZGUgb3V0IGFuaW1hdGlvblxuICAgKi9cbiAgaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXYWl0IHVudGlsIHRoZSBmaXJzdCBcImVudGVyXCIgdHJhbnNpdGlvbiB0byBtb3VudCB0aGUgY29tcG9uZW50IChhZGQgaXQgdG8gdGhlIERPTSlcbiAgICovXG4gIG1vdW50T25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFVubW91bnQgdGhlIGNvbXBvbmVudCAocmVtb3ZlIGl0IGZyb20gdGhlIERPTSkgd2hlbiBpdCBpcyBmYWRlZCBvdXRcbiAgICovXG4gIHVubW91bnRPbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBSdW4gdGhlIGZhZGUgaW4gYW5pbWF0aW9uIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMsIGlmIGl0IGlzIGluaXRpYWxseVxuICAgKiBzaG93blxuICAgKi9cbiAgYXBwZWFyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRHVyYXRpb24gb2YgdGhlIGZhZGUgYW5pbWF0aW9uIGluIG1pbGxpc2Vjb25kcywgdG8gZW5zdXJlIHRoYXQgZmluaXNoaW5nXG4gICAqIGNhbGxiYWNrcyBhcmUgZmlyZWQgZXZlbiBpZiB0aGUgb3JpZ2luYWwgYnJvd3NlciB0cmFuc2l0aW9uIGVuZCBldmVudHMgYXJlXG4gICAqIGNhbmNlbGVkXG4gICAqL1xuICB0aW1lb3V0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBmYWRlcyBpblxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgc3RhcnRzIHRvIGZhZGUgaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgaGFzIGNvbXBvbmVudCBmYWRlZCBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgZmFkZXMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IHN0YXJ0cyB0byBmYWRlIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgZmFkZWQgb3V0XG4gICAqL1xuICBvbkV4aXRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIHRpbWVvdXQ6IDMwMCxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2Vcbn07XG52YXIgZmFkZVN0eWxlcyA9IChfZmFkZVN0eWxlcyA9IHt9LCBfZmFkZVN0eWxlc1tfVHJhbnNpdGlvbi5FTlRFUklOR10gPSAnaW4nLCBfZmFkZVN0eWxlc1tfVHJhbnNpdGlvbi5FTlRFUkVEXSA9ICdpbicsIF9mYWRlU3R5bGVzKTtcblxudmFyIEZhZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShGYWRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGYWRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGYWRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb24uZGVmYXVsdCwgcHJvcHMsIGZ1bmN0aW9uIChzdGF0dXMsIGlubmVyUHJvcHMpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoJ2ZhZGUnLCBjbGFzc05hbWUsIGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgZmFkZVN0eWxlc1tzdGF0dXNdKVxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBGYWRlO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5GYWRlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkZhZGUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIF9kZWZhdWx0ID0gRmFkZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzY3JvbGxiYXJTaXplO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbkRPTVwiKSk7XG5cbnZhciBzaXplO1xuXG5mdW5jdGlvbiBzY3JvbGxiYXJTaXplKHJlY2FsYykge1xuICBpZiAoIXNpemUgJiYgc2l6ZSAhPT0gMCB8fCByZWNhbGMpIHtcbiAgICBpZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNjcm9sbERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUudG9wID0gJy05OTk5cHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLndpZHRoID0gJzUwcHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc1MHB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgc2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2l6ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtlbHNlIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNPdmVyZmxvd2luZztcblxudmFyIF9pc1dpbmRvdyA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3F1ZXJ5L2lzV2luZG93Jyk7XG5cbnZhciBfaXNXaW5kb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNXaW5kb3cpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCdkb20taGVscGVycy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNCb2R5KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdib2R5Jztcbn1cblxuZnVuY3Rpb24gYm9keUlzT3ZlcmZsb3dpbmcobm9kZSkge1xuICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShub2RlKTtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cyLmRlZmF1bHQpKGRvYyk7XG4gIHZhciBmdWxsV2lkdGggPSB3aW4uaW5uZXJXaWR0aDtcblxuICAvLyBTdXBwb3J0OiBpZTgsIG5vIGlubmVyV2lkdGhcbiAgaWYgKCFmdWxsV2lkdGgpIHtcbiAgICB2YXIgZG9jdW1lbnRFbGVtZW50UmVjdCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgZnVsbFdpZHRoID0gZG9jdW1lbnRFbGVtZW50UmVjdC5yaWdodCAtIE1hdGguYWJzKGRvY3VtZW50RWxlbWVudFJlY3QubGVmdCk7XG4gIH1cblxuICByZXR1cm4gZG9jLmJvZHkuY2xpZW50V2lkdGggPCBmdWxsV2lkdGg7XG59XG5cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIHZhciB3aW4gPSAoMCwgX2lzV2luZG93Mi5kZWZhdWx0KShjb250YWluZXIpO1xuXG4gIHJldHVybiB3aW4gfHwgaXNCb2R5KGNvbnRhaW5lcikgPyBib2R5SXNPdmVyZmxvd2luZyhjb250YWluZXIpIDogY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgJ0xJQ0VOU0UnICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbCc7XG5cbmltcG9ydCB7IGhvdCB9IGZyb20gJ3JlYWN0LWhvdC1sb2FkZXInO1xuXG5pbXBvcnQgVG9wQmFyIGZyb20gJy4vVG9wQmFyJztcbmltcG9ydCBGaWxlQWN0aW9ucyBmcm9tICcuL0ZpbGVBY3Rpb25zJztcbmltcG9ydCBDb2xsZWN0aW9uTGlzdCBmcm9tICcuL0NvbGxlY3Rpb25MaXN0JztcbmltcG9ydCBHcm91cExpc3QgZnJvbSAnLi9Hcm91cExpc3QnO1xuaW1wb3J0IFByb3BlcnR5TGlzdCBmcm9tICcuL1Byb3BlcnR5TGlzdCc7XG5pbXBvcnQgUmVxdWlyZW1lbnRMaXN0IGZyb20gJy4vUmVxdWlyZW1lbnRMaXN0JztcbmltcG9ydCBUYXNrTGlzdCBmcm9tICcuL1Rhc2tMaXN0JztcbmltcG9ydCBNYWluRWRpdG9yIGZyb20gJy4vTWFpbkVkaXRvcic7XG5cbmltcG9ydCBzdG9yZSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBjbGFzcyBUb3BvbG9neUVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gIEBvYnNlcnZhYmxlIHNob3dSZXNldE1vZGFsID0gZmFsc2U7XG5cbiAgQGFjdGlvbiBvcGVuUmVzZXRNb2RhbCA9ICgpID0+IHsgdGhpcy5zaG93UmVzZXRNb2RhbCA9IHRydWU7IH1cbiAgQGFjdGlvbiBjbG9zZVJlc2V0TW9kYWwgPSAoKSA9PiB7IHRoaXMuc2hvd1Jlc2V0TW9kYWwgPSBmYWxzZTsgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgcHJvcGVydHlDaGVja2JveGVzID0gW107XG4gICAgbGV0IHRhc2tDaGVja2JveGVzID0gW107XG4gICAgbGV0IGNvbGxlY3Rpb25DaGVja2JveGVzID0gW107XG4gICAgbGV0IHJlcXVpcmVtZW50T3B0aW9ucyA9IFtdO1xuXG4gICAgc3RvcmUucHJvcGVydGllcy5mb3JFYWNoKChwLCBpKSA9PiB7XG4gICAgICBwcm9wZXJ0eUNoZWNrYm94ZXMucHVzaChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LXByb3BlcnR5XCIga2V5PXsndC1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17cC5pZH0+e3AuaWR9PC9kaXY+XG4gICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjb21wb25lbnRDbGFzcz1cInNlbGVjdFwiIHBsYWNlaG9sZGVyPVwiXCIgZGVmYXVsdFZhbHVlPVwiXCIgY2xhc3NOYW1lPVwiYWNjZXNzU2VsZWN0XCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWFkXCI+cmVhZDwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwid3JpdGVcIj53cml0ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicmVhZHdyaXRlXCI+cmVhZHdyaXRlPC9vcHRpb24+XG4gICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKCh0LCBpKSA9PiB7XG4gICAgICB0YXNrQ2hlY2tib3hlcy5wdXNoKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtdGFza1wiIGtleT17J3QtYm94JyArIGl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWxlbWVudC1uYW1lXCIgdGl0bGU9e3QuaWR9Pnt0LmlkfTwvZGl2PlxuICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPVwiYWRkLWNnLXRjLWNvdW50ZXJcIiB0eXBlPVwibnVtYmVyXCIgbWluPVwiMFwiIGRlZmF1bHRWYWx1ZT1cIjBcIiAvPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBzdG9yZS5jb2xsZWN0aW9ucy5mb3JFYWNoKChjLCBpKSA9PiB7XG4gICAgICBjb2xsZWN0aW9uQ2hlY2tib3hlcy5wdXNoKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtY29sbGVjdGlvblwiIGtleT17J2MtYm94JyArIGl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWxlbWVudC1uYW1lXCIgdGl0bGU9e2MuaWR9PntjLmlkfTwvZGl2PlxuICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPVwiYWRkLWNnLXRjLWNvdW50ZXJcIiB0eXBlPVwibnVtYmVyXCIgbWluPVwiMFwiIGRlZmF1bHRWYWx1ZT1cIjBcIiAvPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBzdG9yZS5yZXF1aXJlbWVudHMuZm9yRWFjaCgociwgaSkgPT4geyAvLyBUT0RPOiBoYW5kbGUgbXVsdGlwbGVcbiAgICAgIHJlcXVpcmVtZW50T3B0aW9ucy5wdXNoKDxvcHRpb24gdmFsdWU9e3IuaWR9IGtleT17J29wdGlvbicgKyBpfT57ci5pZH08L29wdGlvbj4pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxUb3BCYXIgLz5cblxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWdyb3VwIGxlZnQtcGFuZVwiPlxuICAgICAgICAgICAgPEZpbGVBY3Rpb25zIC8+XG4gICAgICAgICAgICA8UHJvcGVydHlMaXN0IC8+XG4gICAgICAgICAgICA8VGFza0xpc3QgcHJvcGVydHlDaGVja2JveGVzPXtwcm9wZXJ0eUNoZWNrYm94ZXN9IHJlcXVpcmVtZW50T3B0aW9ucz17cmVxdWlyZW1lbnRPcHRpb25zfSAvPlxuICAgICAgICAgICAgPENvbGxlY3Rpb25MaXN0IHRhc2tDaGVja2JveGVzPXt0YXNrQ2hlY2tib3hlc30gcmVxdWlyZW1lbnRPcHRpb25zPXtyZXF1aXJlbWVudE9wdGlvbnN9IC8+XG4gICAgICAgICAgICA8R3JvdXBMaXN0IHRhc2tDaGVja2JveGVzPXt0YXNrQ2hlY2tib3hlc30gY29sbGVjdGlvbkNoZWNrYm94ZXM9e2NvbGxlY3Rpb25DaGVja2JveGVzfSAvPlxuICAgICAgICAgICAgPFJlcXVpcmVtZW50TGlzdCAvPlxuXG4gICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tc20gYnRuLWRlZmF1bHRcIiBvbkNsaWNrPXt0aGlzLm9wZW5SZXNldE1vZGFsfT5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiIHRpdGxlPVwicmVzZXQgdGhlIHRvcG9sb2d5XCI+PC9zcGFuPiByZXNldFxuICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICA8TW9kYWwgc2hvdz17dGhpcy5zaG93UmVzZXRNb2RhbH0gb25IaWRlPXt0aGlzLmNsb3NlUmVzZXRNb2RhbH0+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxNb2RhbC5UaXRsZT5SZXNldCB0b3BvbG9neT88L01vZGFsLlRpdGxlPlxuICAgICAgICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgICAgPHA+VGhpcyB3aWxsIGNsZWFyIGFsbCB0aGUgY29udGVudHMgb2YgdGhlIHRvcG9sb2d5LjwvcD5cbiAgICAgICAgICAgICAgICAgIDxwPlVuc2F2ZWQgY2hhbmdlcyB3aWxsIGJlIGxvc3QuPC9wPlxuICAgICAgICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwiZGFuZ2VyXCIgb25DbGljaz17KCkgPT4geyBzdG9yZS5yZXNldCgpOyB0aGlzLmNsb3NlUmVzZXRNb2RhbCgpO30gfT5SZXNldDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmNsb3NlUmVzZXRNb2RhbH0+Q2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICAgIDwvTW9kYWw+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICA8TWFpbkVkaXRvciAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBob3QobW9kdWxlKShUb3BvbG9neUVkaXRvcik7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgXCJMSUNFTlNFXCIgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9wQmFyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgQG9ic2VydmFibGUgZWRpdGluZyA9IGZhbHNlO1xuXG4gIEBhY3Rpb24gdG9nZ2xlRWRpdGluZyA9ICgpID0+IHsgdGhpcy5lZGl0aW5nID0gISh0aGlzLmVkaXRpbmcpOyB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGhhbmRsZVRvcG9sb2d5SWRDaGFuZ2UgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBzdG9yZS5zZXRUb3BvbG9neUlkKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpO1xuICAgIHRoaXMudG9nZ2xlRWRpdGluZygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8bmF2IGNsYXNzTmFtZT1cImhlYWRlci1wYW5lIG5hdmJhciBuYXZiYXItaW52ZXJzZVwiIHJvbGU9XCJuYXZpZ2F0aW9uXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXZiYXItaGVhZGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJuYXZiYXItdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGRhdGEtdGFyZ2V0PVwiI2JzLWV4YW1wbGUtbmF2YmFyLWNvbGxhcHNlLTFcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic3Itb25seVwiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uLWJhclwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvbi1iYXJcIj48L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImljb24tYmFyXCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuYXZiYXItYnJhbmRcIiBocmVmPVwiI1wiPkREUyBUb3BvbG9neSBFZGl0b3I8L2E+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2VcIiBpZD1cImJzLWV4YW1wbGUtbmF2YmFyLWNvbGxhcHNlLTFcIj5cbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXYgbmF2YmFyLW5hdlwiPlxuICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiYWN0aXZlXCI+XG4gICAgICAgICAgICAgICAge3RoaXMuZWRpdGluZyA/XG4gICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJuYW1lLWNoYW5nZVwiIG9uU3VibWl0PXt0aGlzLmhhbmRsZVRvcG9sb2d5SWRDaGFuZ2V9PlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBhdXRvRm9jdXMgZGVmYXVsdFZhbHVlPXtzdG9yZS50b3BvbG9neUlkfT48L2lucHV0PlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwib2tcIiA+PC9pbnB1dD5cbiAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgb25DbGljaz17dGhpcy50b2dnbGVFZGl0aW5nfT57c3RvcmUudG9wb2xvZ3lJZH08L2E+fVxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L25hdj5cbiAgICApO1xuICB9XG59XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgJ0xJQ0VOU0UnICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdmtiZWF1dGlmeSBmcm9tICd2a2JlYXV0aWZ5JztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IEJ1dHRvbkdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uR3JvdXAnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuaW1wb3J0IFJhZGlvIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUmFkaW8nO1xuXG5pbXBvcnQgR2l0SHViIGZyb20gJ2dpdGh1Yi1hcGknO1xuXG5pbXBvcnQgc3RvcmUsIHsgTUNvbGxlY3Rpb24sIE1Hcm91cCwgTU1haW4sIE1Qcm9wZXJ0eSwgTVJlcXVpcmVtZW50LCBNVGFzaywgTVRhc2tQcm9wZXJ0eSwgTVZhcmlhYmxlIH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZUFjdGlvbnMgZXh0ZW5kcyBDb21wb25lbnQge1xuICBAb2JzZXJ2YWJsZSByZW1vdGVGaWxlcyA9IFtdO1xuICBAb2JzZXJ2YWJsZSBlcnJvciA9ICcnO1xuXG4gIEBhY3Rpb24gdXBkYXRlUmVtb3RlRmlsZXMgPSAoZmlsZXMpID0+IHsgdGhpcy5yZW1vdGVGaWxlcyA9IGZpbGVzOyB9XG4gIEBhY3Rpb24gYWRkUmVtb3RlRmlsZSA9IChmaWxlKSA9PiB7IHRoaXMucmVtb3RlRmlsZXMucHVzaChmaWxlKTsgfVxuICBAYWN0aW9uIHNldEVycm9yID0gKGUpID0+IHsgdGhpcy5lcnJvciA9IGU7IH1cblxuICByZW1vdGVVc2VyID0gJ0FsaWNlTzJHcm91cCc7XG4gIHJlbW90ZVJlcG8gPSAnQWxpY2VPMic7XG4gIHJlbW90ZVBhdGggPSAnQ29tbW9uL1RvcG9sb2dpZXMnO1xuXG4gIGZldGNoQnRuO1xuXG4gIGNhbmNlbEZldGNoID0gKCkgPT4ge1xuICAgIHRoaXMudXBkYXRlUmVtb3RlRmlsZXMoW10pO1xuICAgIHRoaXMuc2V0RXJyb3IoJycpO1xuICB9XG5cbiAgaGFuZGxlRmV0Y2ggPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IGZpbGVTZWxlY3Rpb25zID0gZS50YXJnZXRbMF0uZm9ybVsnZmlsZXMnXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZVNlbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChmaWxlU2VsZWN0aW9ucy5pdGVtKGkpLmNoZWNrZWQpIHtcbiAgICAgICAgY29uc3QgZ2l0aHViID0gbmV3IEdpdEh1YigpO1xuXG4gICAgICAgIGNvbnN0IHJlcG8gPSBnaXRodWIuZ2V0UmVwbyh0aGlzLnJlbW90ZVVzZXIsIHRoaXMucmVtb3RlUmVwbyk7XG4gICAgICAgIHJlcG8uZ2V0Q29udGVudHMoJ2RldicsICdDb21tb24vVG9wb2xvZ2llcycgKyAnLycgKyB0aGlzLnJlbW90ZUZpbGVzW2ldLm5hbWUsIHRydWUsIChlcnIsIGNvbnRlbnRzKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wcm9jZXNzWE1MKGNvbnRlbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5mZXRjaEJ0bi5oaWRlKCk7XG4gIH1cblxuICBmZXRjaFRvcG9sb2dpZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2l0aHViID0gbmV3IEdpdEh1YigpO1xuXG4gICAgdGhpcy5zZXRFcnJvcignJyk7XG5cbiAgICBjb25zdCByZXBvID0gZ2l0aHViLmdldFJlcG8odGhpcy5yZW1vdGVVc2VyLCB0aGlzLnJlbW90ZVJlcG8pO1xuXG4gICAgcmVwby5nZXRDb250ZW50cygnZGV2JywgdGhpcy5yZW1vdGVQYXRoLCB0cnVlLCAoZXJyLCBjb250ZW50cykgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICBpZiAoJ3Jlc3BvbnNlJyBpbiBlcnIpIHtcbiAgICAgICAgICB0aGlzLnNldEVycm9yKGVyci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJy4gUmF0ZSBsaW1pdDogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIucmVzcG9uc2UuaGVhZGVyc1sneC1yYXRlbGltaXQtbGltaXQnXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnLCByZW1haW5pbmc6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLnJlc3BvbnNlLmhlYWRlcnNbJ3gtcmF0ZWxpbWl0LXJlbWFpbmluZyddICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcsIHJlc2V0IGluOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKGVyci5yZXNwb25zZS5oZWFkZXJzWyd4LXJhdGVsaW1pdC1yZXNldCddICogMTAwMCkgKyAnLicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0RXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50cy5mb3JFYWNoKG9iamVjdCA9PiB7XG4gICAgICAgIGlmIChvYmplY3QubmFtZS5zdWJzdHIob2JqZWN0Lm5hbWUubGVuZ3RoIC0gNCkgIT09ICcueG1sJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdpZ25vcmluZyBmaWxlIHdpdGggbm9uLVhNTCBleHRlbnNpb246ICcgKyBvYmplY3QubmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsZSA9IHt9O1xuICAgICAgICBmaWxlLm5hbWUgPSBvYmplY3QubmFtZTtcbiAgICAgICAgZmlsZS51cmwgPSBvYmplY3QuZG93bmxvYWRfdXJsO1xuXG4gICAgICAgIHRoaXMuYWRkUmVtb3RlRmlsZShmaWxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvY2Vzc1hNTCA9ICh4bWxTdHJpbmcpID0+IHtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgY29uc3QgdmFyaWFibGVzID0gW107XG4gICAgY29uc3QgcHJvcGVydGllcyA9IFtdO1xuICAgIGNvbnN0IHJlcXVpcmVtZW50cyA9IFtdO1xuICAgIGNvbnN0IHRhc2tzID0gW107XG4gICAgY29uc3QgY29sbGVjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBtYWluID0gbmV3IE1NYWluO1xuXG4gICAgY29uc3QgeG1sID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHJpbmcsICdhcHBsaWNhdGlvbi94bWwnKTtcblxuICAgIC8vIHRvcG9sb2d5IG5hbWVcbiAgICBzdG9yZS5zZXRUb3BvbG9neUlkKHhtbC5xdWVyeVNlbGVjdG9yKCd0b3BvbG9neScpLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG5cbiAgICAvLyB2YXJpYWJsZXNcbiAgICB4bWwucXVlcnlTZWxlY3RvckFsbCgndG9wb2xvZ3k+dmFyJykuZm9yRWFjaCh2ID0+IHtcbiAgICAgIGNvbnN0IHZhcmlhYmxlID0gbmV3IE1WYXJpYWJsZTtcblxuICAgICAgdmFyaWFibGUuaWQgPSB2LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgIHZhcmlhYmxlLnZhbHVlID0gdi5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG5cbiAgICAgIHZhcmlhYmxlcy5wdXNoKHZhcmlhYmxlKTtcbiAgICB9KTtcbiAgICBzdG9yZS5zZXRWYXJpYWJsZXModmFyaWFibGVzKTtcblxuICAgIC8vIHByb3BlcnRpZXNcbiAgICB4bWwucXVlcnlTZWxlY3RvckFsbCgndG9wb2xvZ3k+cHJvcGVydHknKS5mb3JFYWNoKHAgPT4ge1xuICAgICAgY29uc3QgcHJvcGVydHkgPSBuZXcgTVByb3BlcnR5O1xuXG4gICAgICBwcm9wZXJ0eS5pZCA9IHAuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXG4gICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuICAgIH0pO1xuICAgIHN0b3JlLnNldFByb3BlcnRpZXMocHJvcGVydGllcyk7XG5cbiAgICAvLyByZXF1aXJlbWVudHNcbiAgICB4bWwucXVlcnlTZWxlY3RvckFsbCgndG9wb2xvZ3k+ZGVjbHJlcXVpcmVtZW50JykuZm9yRWFjaChyID0+IHtcbiAgICAgIGNvbnN0IHJlcXVpcmVtZW50ID0gbmV3IE1SZXF1aXJlbWVudDtcblxuICAgICAgcmVxdWlyZW1lbnQuaWQgPSByLmdldEF0dHJpYnV0ZSgnaWQnKTtcblxuICAgICAgci5xdWVyeVNlbGVjdG9yQWxsKCdob3N0UGF0dGVybicpLmZvckVhY2goaHAgPT4ge1xuICAgICAgICByZXF1aXJlbWVudC50eXBlID0gaHAuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gICAgICAgIHJlcXVpcmVtZW50LnZhbHVlID0gaHAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIHJlcXVpcmVtZW50cy5wdXNoKHJlcXVpcmVtZW50KTtcbiAgICB9KTtcbiAgICBzdG9yZS5zZXRSZXF1aXJlbWVudHMocmVxdWlyZW1lbnRzKTtcblxuICAgIC8vIHRhc2tzXG4gICAgeG1sLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RvcG9sb2d5PmRlY2x0YXNrJykuZm9yRWFjaCh0ID0+IHtcbiAgICAgIGNvbnN0IHRhc2sgPSBuZXcgTVRhc2s7XG5cbiAgICAgIHRhc2suaWQgPSB0LmdldEF0dHJpYnV0ZSgnaWQnKTtcblxuICAgICAgdC5xdWVyeVNlbGVjdG9yQWxsKCdyZXF1aXJlbWVudHMnKS5mb3JFYWNoKHIgPT4ge1xuICAgICAgICByLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lkJykuZm9yRWFjaChpID0+IHRhc2sucmVxdWlyZW1lbnRzLnB1c2goaS50ZXh0Q29udGVudCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHQucXVlcnlTZWxlY3RvckFsbCgnZXhlJykuZm9yRWFjaChlID0+IHtcbiAgICAgICAgaWYgKGUuaGFzQXR0cmlidXRlKCdyZWFjaGFibGUnKSkge1xuICAgICAgICAgIHRhc2suZXhlUmVhY2hhYmxlID0gZS5nZXRBdHRyaWJ1dGUoJ3JlYWNoYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRhc2suZXhlVmFsdWUgPSBlLnRleHRDb250ZW50O1xuICAgICAgfSk7XG5cbiAgICAgIHQucXVlcnlTZWxlY3RvckFsbCgnZW52JykuZm9yRWFjaChlID0+IHtcbiAgICAgICAgaWYgKGUuaGFzQXR0cmlidXRlKCdyZWFjaGFibGUnKSkge1xuICAgICAgICAgIHRhc2suZW52UmVhY2hhYmxlID0gZS5nZXRBdHRyaWJ1dGUoJ3JlYWNoYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRhc2suZW52VmFsdWUgPSBlLnRleHRDb250ZW50O1xuICAgICAgfSk7XG5cbiAgICAgIHQucXVlcnlTZWxlY3RvckFsbCgncHJvcGVydGllcz5pZCcpLmZvckVhY2gocCA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5ID0gbmV3IE1UYXNrUHJvcGVydHk7XG4gICAgICAgIHByb3BlcnR5LmlkID0gcC50ZXh0Q29udGVudDtcbiAgICAgICAgaWYgKHAuaGFzQXR0cmlidXRlKCdhY2Nlc3MnKSkge1xuICAgICAgICAgIHByb3BlcnR5LmFjY2VzcyA9IHAuZ2V0QXR0cmlidXRlKCdhY2Nlc3MnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wZXJ0eS5hY2Nlc3MgPSAncmVhZHdyaXRlJztcbiAgICAgICAgfVxuICAgICAgICB0YXNrLnByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG4gICAgICB9KTtcblxuICAgICAgdGFza3MucHVzaCh0YXNrKTtcbiAgICB9KTtcbiAgICBzdG9yZS5zZXRUYXNrcyh0YXNrcyk7XG5cbiAgICAvLyBjb2xsZWN0aW9uc1xuICAgIHhtbC5xdWVyeVNlbGVjdG9yQWxsKCd0b3BvbG9neT5kZWNsY29sbGVjdGlvbicpLmZvckVhY2goYyA9PiB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gbmV3IE1Db2xsZWN0aW9uO1xuICAgICAgY29sbGVjdGlvbi5pZCA9IGMuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXG4gICAgICBjLnF1ZXJ5U2VsZWN0b3JBbGwoJ3JlcXVpcmVtZW50cycpLmZvckVhY2gociA9PiB7XG4gICAgICAgIHIucXVlcnlTZWxlY3RvckFsbCgnaWQnKS5mb3JFYWNoKGkgPT4gY29sbGVjdGlvbi5yZXF1aXJlbWVudHMucHVzaChpLnRleHRDb250ZW50KSk7XG4gICAgICB9KTtcblxuICAgICAgYy5xdWVyeVNlbGVjdG9yQWxsKCd0YXNrcz5pZCcpLmZvckVhY2godCA9PiBjb2xsZWN0aW9uLnRhc2tzLnB1c2godC50ZXh0Q29udGVudCkpO1xuXG4gICAgICBjb2xsZWN0aW9ucy5wdXNoKGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHN0b3JlLnNldENvbGxlY3Rpb25zKGNvbGxlY3Rpb25zKTtcblxuICAgIC8vIG1haW5cbiAgICBtYWluLmlkID0geG1sLnF1ZXJ5U2VsZWN0b3IoJ3RvcG9sb2d5Pm1haW4nKS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG5cbiAgICB4bWwucXVlcnlTZWxlY3RvckFsbCgndG9wb2xvZ3k+bWFpbj50YXNrJykuZm9yRWFjaCh0ID0+IG1haW4udGFza3MucHVzaCh0LnRleHRDb250ZW50KSk7XG4gICAgeG1sLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RvcG9sb2d5Pm1haW4+Y29sbGVjdGlvbicpLmZvckVhY2goYyA9PiBtYWluLmNvbGxlY3Rpb25zLnB1c2goYy50ZXh0Q29udGVudCkpO1xuXG4gICAgLy8gZ3JvdXBzIGluIG1haW5cbiAgICB4bWwucXVlcnlTZWxlY3RvckFsbCgndG9wb2xvZ3k+bWFpbj5ncm91cCcpLmZvckVhY2goZyA9PiB7XG4gICAgICBjb25zdCBncm91cCA9IG5ldyBNR3JvdXA7XG4gICAgICBncm91cC5pZCA9IGcuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgZ3JvdXAubiA9IGcuZ2V0QXR0cmlidXRlKCduJyk7XG5cbiAgICAgIGcucXVlcnlTZWxlY3RvckFsbCgndGFzaycpLmZvckVhY2godCA9PiBncm91cC50YXNrcy5wdXNoKHQudGV4dENvbnRlbnQpKTtcbiAgICAgIGcucXVlcnlTZWxlY3RvckFsbCgnY29sbGVjdGlvbicpLmZvckVhY2goYyA9PiBncm91cC5jb2xsZWN0aW9ucy5wdXNoKGMudGV4dENvbnRlbnQpKTtcblxuICAgICAgbWFpbi5ncm91cHMucHVzaChncm91cCk7XG4gICAgfSk7XG4gICAgc3RvcmUuc2V0TWFpbihtYWluKTtcbiAgfVxuXG4gIGhhbmRsZUZpbGVMb2FkID0gKGUpID0+IHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuXG4gICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc1hNTChyZWFkZXIucmVzdWx0KTtcbiAgICAgIHRhcmdldC52YWx1ZSA9ICcnO1xuICAgIH07XG5cbiAgICByZWFkZXIucmVhZEFzVGV4dChlLnRhcmdldC5maWxlc1swXSk7XG4gIH1cblxuICBoYW5kbGVGaWxlU2F2ZSA9ICgpID0+IHtcbiAgICBjb25zdCB4bWxEb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudCgnJywgJycsIG51bGwpO1xuICAgIGNvbnN0IHJvb3QgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgndG9wb2xvZ3knKTtcbiAgICByb290LnNldEF0dHJpYnV0ZSgnaWQnLCBzdG9yZS50b3BvbG9neUlkKTtcblxuICAgIC8vIHZhcmlhYmxlc1xuICAgIHN0b3JlLnZhcmlhYmxlcy5mb3JFYWNoKHZhcmlhYmxlID0+IHtcbiAgICAgIGNvbnN0IG5ld1ZhcmlhYmxlID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ3ZhcicpO1xuICAgICAgbmV3VmFyaWFibGUuc2V0QXR0cmlidXRlKCdpZCcsIHZhcmlhYmxlLmlkKTtcbiAgICAgIG5ld1ZhcmlhYmxlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YXJpYWJsZS52YWx1ZSk7XG4gICAgICByb290LmFwcGVuZENoaWxkKG5ld1ZhcmlhYmxlKTtcbiAgICB9KTtcblxuICAgIC8vIHByb3BlcnRpZXNcbiAgICBzdG9yZS5wcm9wZXJ0aWVzLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgICAgY29uc3QgbmV3UHJvcGVydHkgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgncHJvcGVydHknKTtcbiAgICAgIG5ld1Byb3BlcnR5LnNldEF0dHJpYnV0ZSgnaWQnLCBwcm9wZXJ0eS5pZCk7XG4gICAgICByb290LmFwcGVuZENoaWxkKG5ld1Byb3BlcnR5KTtcbiAgICB9KTtcblxuICAgIC8vIHJlcXVpcmVtZW50c1xuICAgIHN0b3JlLnJlcXVpcmVtZW50cy5mb3JFYWNoKHJlcXVpcmVtZW50ID0+IHtcbiAgICAgIGNvbnN0IG5ld1JlcXVpcmVtZW50ID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ2RlY2xyZXF1aXJlbWVudCcpO1xuICAgICAgbmV3UmVxdWlyZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHJlcXVpcmVtZW50LmlkKTtcbiAgICAgIG5ld1JlcXVpcmVtZW50LnNldEF0dHJpYnV0ZSgndHlwZScsIHJlcXVpcmVtZW50LnR5cGUpO1xuICAgICAgbmV3UmVxdWlyZW1lbnQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHJlcXVpcmVtZW50LnZhbHVlKTtcblxuICAgICAgLy8gYXBwZW5kIHJlcXVpcmVtZW50IHRvIHRoZSByb290XG4gICAgICByb290LmFwcGVuZENoaWxkKG5ld1JlcXVpcmVtZW50KTtcbiAgICB9KTtcblxuICAgIC8vIHRhc2tzXG4gICAgc3RvcmUudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgIGNvbnN0IG5ld1Rhc2sgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgnZGVjbHRhc2snKTtcbiAgICAgIG5ld1Rhc2suc2V0QXR0cmlidXRlKCdpZCcsIHRhc2suaWQpO1xuXG4gICAgICAvLyBjcmVhdGUgYW5kIGFwcGVuZCB0YXNrIGV4ZVxuICAgICAgY29uc3QgdGFza0V4ZSA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdleGUnKTtcbiAgICAgIHRhc2tFeGUudGV4dENvbnRlbnQgPSB0YXNrLmV4ZVZhbHVlO1xuICAgICAgaWYgKHRhc2suZXhlUmVhY2hhYmxlICE9PSAnJykge1xuICAgICAgICB0YXNrRXhlLnNldEF0dHJpYnV0ZSgncmVhY2hhYmxlJywgdGFzay5leGVSZWFjaGFibGUpO1xuICAgICAgfVxuXG4gICAgICBuZXdUYXNrLmFwcGVuZENoaWxkKHRhc2tFeGUpO1xuXG4gICAgICBpZiAodGFzay5yZXF1aXJlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB0YXNrUmVxdWlyZW1lbnRzID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ3JlcXVpcmVtZW50cycpO1xuICAgICAgICB0YXNrLnJlcXVpcmVtZW50cy5mb3JFYWNoKHRhc2tSZXF1aXJlbWVudCA9PiB7XG4gICAgICAgICAgY29uc3QgcmVxdWlyZW1lbnQgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgnaWQnKTtcbiAgICAgICAgICByZXF1aXJlbWVudC50ZXh0Q29udGVudCA9IHRhc2tSZXF1aXJlbWVudDtcbiAgICAgICAgICB0YXNrUmVxdWlyZW1lbnRzLmFwcGVuZENoaWxkKHJlcXVpcmVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld1Rhc2suYXBwZW5kQ2hpbGQodGFza1JlcXVpcmVtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNyZWF0ZSBhbmQgYXBwZW5kIHRhc2sgZW52IChpZiBpdCBleGlzdHMpXG4gICAgICBpZiAodGFzay5lbnZWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgY29uc3QgdGFza0VudiA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdlbnYnKTtcbiAgICAgICAgdGFza0Vudi50ZXh0Q29udGVudCA9IHRhc2suZW52VmFsdWU7XG4gICAgICAgIGlmICh0YXNrLmVudlJlYWNoYWJsZSAhPT0gJycpIHtcbiAgICAgICAgICB0YXNrRW52LnNldEF0dHJpYnV0ZSgncmVhY2hhYmxlJywgdGFzay5lbnZSZWFjaGFibGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3VGFzay5hcHBlbmRDaGlsZCh0YXNrRW52KTtcbiAgICAgIH1cblxuICAgICAgLy8gY3JlYXRlIHRhc2sgcHJvcGVydGllc1xuICAgICAgaWYgKHRhc2sucHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXNDb250YWluZXIgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgncHJvcGVydGllcycpO1xuXG4gICAgICAgIHRhc2sucHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgICAgICBjb25zdCBuZXdQcm9wZXJ0eSA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdpZCcpO1xuICAgICAgICAgIG5ld1Byb3BlcnR5LnRleHRDb250ZW50ID0gcHJvcGVydHkuaWQ7XG4gICAgICAgICAgbmV3UHJvcGVydHkuc2V0QXR0cmlidXRlKCdhY2Nlc3MnLCBwcm9wZXJ0eS5hY2Nlc3MpO1xuICAgICAgICAgIHByb3BlcnRpZXNDb250YWluZXIuYXBwZW5kQ2hpbGQobmV3UHJvcGVydHkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhcHBlbmQgcHJvcGVydGllcyBjb250YWluZXJcbiAgICAgICAgbmV3VGFzay5hcHBlbmRDaGlsZChwcm9wZXJ0aWVzQ29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgcm9vdC5hcHBlbmRDaGlsZChuZXdUYXNrKTtcbiAgICB9KTtcblxuICAgIC8vIGNvbGxlY3Rpb25zXG4gICAgc3RvcmUuY29sbGVjdGlvbnMuZm9yRWFjaChjb2xsZWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IG5ld0NvbGxlY3Rpb24gPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgnZGVjbGNvbGxlY3Rpb24nKTtcbiAgICAgIG5ld0NvbGxlY3Rpb24uc2V0QXR0cmlidXRlKCdpZCcsIGNvbGxlY3Rpb24uaWQpO1xuXG4gICAgICBpZiAoY29sbGVjdGlvbi5yZXF1aXJlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uUmVxdWlyZW1lbnRzID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ3JlcXVpcmVtZW50cycpO1xuICAgICAgICBjb2xsZWN0aW9uLnJlcXVpcmVtZW50cy5mb3JFYWNoKGNvbGxlY3Rpb25SZXF1aXJlbWVudCA9PiB7XG4gICAgICAgICAgY29uc3QgcmVxdWlyZW1lbnQgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgnaWQnKTtcbiAgICAgICAgICByZXF1aXJlbWVudC50ZXh0Q29udGVudCA9IGNvbGxlY3Rpb25SZXF1aXJlbWVudDtcbiAgICAgICAgICBjb2xsZWN0aW9uUmVxdWlyZW1lbnRzLmFwcGVuZENoaWxkKHJlcXVpcmVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld0NvbGxlY3Rpb24uYXBwZW5kQ2hpbGQoY29sbGVjdGlvblJlcXVpcmVtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRhc2tzID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ3Rhc2tzJyk7XG5cbiAgICAgIGNvbGxlY3Rpb24udGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFzayA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdpZCcpO1xuICAgICAgICBuZXdUYXNrLnRleHRDb250ZW50ID0gdGFzaztcbiAgICAgICAgdGFza3MuYXBwZW5kQ2hpbGQobmV3VGFzayk7XG4gICAgICB9KTtcblxuICAgICAgbmV3Q29sbGVjdGlvbi5hcHBlbmRDaGlsZCh0YXNrcyk7XG5cbiAgICAgIHJvb3QuYXBwZW5kQ2hpbGQobmV3Q29sbGVjdGlvbik7XG4gICAgfSk7XG5cbiAgICAvLyBtYWluXG4gICAgY29uc3QgbWFpbiA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdtYWluJyk7XG4gICAgbWFpbi5zZXRBdHRyaWJ1dGUoJ2lkJywgc3RvcmUubWFpbi5pZCk7XG4gICAgLy8gdGFza3MgaW4gbWFpblxuICAgIHN0b3JlLm1haW4udGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgIGNvbnN0IG5ld1Rhc2sgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgndGFzaycpO1xuICAgICAgbmV3VGFzay50ZXh0Q29udGVudCA9IHRhc2s7XG4gICAgICBtYWluLmFwcGVuZENoaWxkKG5ld1Rhc2spO1xuICAgIH0pO1xuICAgIC8vIGNvbGxlY3Rpb25zIGluIG1haW5cbiAgICBzdG9yZS5tYWluLmNvbGxlY3Rpb25zLmZvckVhY2goY29sbGVjdGlvbiA9PiB7XG4gICAgICBjb25zdCBuZXdDb2xsZWN0aW9uID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ2NvbGxlY3Rpb24nKTtcbiAgICAgIG5ld0NvbGxlY3Rpb24udGV4dENvbnRlbnQgPSBjb2xsZWN0aW9uO1xuICAgICAgbWFpbi5hcHBlbmRDaGlsZChuZXdDb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICAvLyBncm91cHMgaW4gbWFpblxuICAgIHN0b3JlLm1haW4uZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgY29uc3QgbmV3R3JvdXAgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgnZ3JvdXAnKTtcbiAgICAgIG5ld0dyb3VwLnNldEF0dHJpYnV0ZSgnaWQnLCBncm91cC5pZCk7XG4gICAgICBuZXdHcm91cC5zZXRBdHRyaWJ1dGUoJ24nLCBncm91cC5uKTtcblxuICAgICAgZ3JvdXAudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFzayA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCd0YXNrJyk7XG4gICAgICAgIG5ld1Rhc2sudGV4dENvbnRlbnQgPSB0YXNrO1xuICAgICAgICBuZXdHcm91cC5hcHBlbmRDaGlsZChuZXdUYXNrKTtcbiAgICAgIH0pO1xuICAgICAgZ3JvdXAuY29sbGVjdGlvbnMuZm9yRWFjaChjb2xsZWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgbmV3Q29sbGVjdGlvbiA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdjb2xsZWN0aW9uJyk7XG4gICAgICAgIG5ld0NvbGxlY3Rpb24udGV4dENvbnRlbnQgPSBjb2xsZWN0aW9uO1xuICAgICAgICBuZXdHcm91cC5hcHBlbmRDaGlsZChuZXdDb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuXG4gICAgICBtYWluLmFwcGVuZENoaWxkKG5ld0dyb3VwKTtcbiAgICB9KTtcblxuICAgIHJvb3QuYXBwZW5kQ2hpbGQobWFpbik7XG5cbiAgICB4bWxEb2MuYXBwZW5kQ2hpbGQocm9vdCk7XG5cbiAgICBsZXQgeG1sU3RyaW5nID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh4bWxEb2MpO1xuXG4gICAgeG1sU3RyaW5nID0gdmtiZWF1dGlmeS54bWwoeG1sU3RyaW5nKTtcblxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbeG1sU3RyaW5nXSwgeyB0eXBlOiAndGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04JyB9KTtcbiAgICBzYXZlQXMoYmxvYiwgc3RvcmUudG9wb2xvZ3lJZCArICcueG1sJyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW0gZmlsZS1hY3Rpb25zXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGNlbnRlcmVkXCI+XG4gICAgICAgICAgPEJ1dHRvbkdyb3VwPlxuICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJidG4tZmlsZVwiIGNvbXBvbmVudENsYXNzPVwic3BhblwiIGJzU2l6ZT1cInNtYWxsXCIgdGl0bGU9XCJsb2FkIHRvcG9sb2d5IGZpbGUgZnJvbSBkaXNrXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZmxvcHB5LW9wZW5cIj48L3NwYW4+IGxvYWQ8aW5wdXQgdHlwZT1cImZpbGVcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVGaWxlTG9hZH0gdmFsdWU9XCJcIiAvPlxuICAgICAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJib3R0b21cIiByZWY9e2VsID0+IHRoaXMuZmV0Y2hCdG4gPSBlbH0gb25FbnRlcj17dGhpcy5mZXRjaFRvcG9sb2dpZXN9IG9uRXhpdD17dGhpcy5jYW5jZWxGZXRjaH0gb3ZlcmxheT17XG4gICAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImZldGNoLXBvcG92ZXJcIiB0aXRsZT1cImZldGNoIHJlbW90ZSB0b3BvbG9naWVzXCIgaWQ9XCJmZXRjaHJlbW90ZXRvcG9sb2dpZXNcIj5cbiAgICAgICAgICAgICAgICA8cD5GZXRjaGluZyB0b3BvbG9naWVzIGZyb208YnIgLz48c3BhbiBjbGFzc05hbWU9XCJtb25vIG1vbm9iZ1wiPnt0aGlzLnJlbW90ZVVzZXJ9L3t0aGlzLnJlbW90ZVJlcG99L3t0aGlzLnJlbW90ZVBhdGh9PC9zcGFuPjwvcD5cbiAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVGZXRjaH0+XG4gICAgICAgICAgICAgICAgICB7dGhpcy5lcnJvciAhPT0gJycgPyA8cCBjbGFzc05hbWU9XCJlcnJvclwiPnt0aGlzLmVycm9yfTwvcD4gOiAnJ31cbiAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbW90ZUZpbGVzLm1hcCgoZmlsZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoPFJhZGlvIHRpdGxlPXtmaWxlLnVybH0ga2V5PXtmaWxlLm5hbWUgKyBpfSBuYW1lPVwiZmlsZXNcIiBjbGFzc05hbWU9XCJtb25vXCI+e2ZpbGUubmFtZX08L1JhZGlvPik7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMlwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5sb2FkPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4gdGhpcy5mZXRjaEJ0bi5oaWRlKCl9PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBic1NpemU9XCJzbWFsbFwiIHRpdGxlPVwiZmV0Y2ggdG9wb2xvZ3kgZmlsZSBmcm9tIGEgcmVtb3RlIHJlcG9zaXRvcnlcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNsb3VkLWRvd25sb2FkXCI+PC9zcGFuPiBmZXRjaFxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG5cbiAgICAgICAgICAgIDxCdXR0b24gYnNTaXplPVwic21hbGxcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUZpbGVTYXZlfSB0aXRsZT1cInNhdmUgdGhlIHRvcG9sb2d5IHRvIGRpc2tcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktc2F2ZVwiPjwvc3Bhbj4gc2F2ZVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9CdXR0b25Hcm91cD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxyXG4qIHZrQmVhdXRpZnkgLSBqYXZhc2NyaXB0IHBsdWdpbiB0byBwcmV0dHktcHJpbnQgb3IgbWluaWZ5IHRleHQgaW4gWE1MLCBKU09OLCBDU1MgYW5kIFNRTCBmb3JtYXRzLlxyXG4qXHJcbiogQ29weXJpZ2h0IChjKSAyMDEyIFZhZGltIEtpcnl1a2hpblxyXG4qIHZraXJ5dWtoaW4gQCBnbWFpbC5jb21cclxuKiBodHRwOi8vd3d3LmVzbGluc3RydWN0b3IubmV0L3ZrYmVhdXRpZnkvXHJcbipcclxuKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczpcclxuKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcbiogICBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLmh0bWxcclxuKlxyXG4qICAgUHJldHR5IHByaW50XHJcbipcclxuKiAgICAgICAgdmtiZWF1dGlmeS54bWwodGV4dCBbLGluZGVudF9wYXR0ZXJuXSk7XHJcbiogICAgICAgIHZrYmVhdXRpZnkuanNvbih0ZXh0IFssaW5kZW50X3BhdHRlcm5dKTtcclxuKiAgICAgICAgdmtiZWF1dGlmeS5jc3ModGV4dCBbLGluZGVudF9wYXR0ZXJuXSk7XHJcbiogICAgICAgIHZrYmVhdXRpZnkuc3FsKHRleHQgWyxpbmRlbnRfcGF0dGVybl0pO1xyXG4qXHJcbiogICAgICAgIEB0ZXh0IC0gU3RyaW5nOyB0ZXh0IHRvIGJlYXR1Znk7XHJcbiogICAgICAgIEBpbmRlbnRfcGF0dGVybiAtIEludGVnZXIgfCBTdHJpbmc7XHJcbiogICAgICAgICAgICAgICAgSW50ZWdlcjogIG51bWJlciBvZiB3aGl0ZSBzcGFjZXM7XHJcbiogICAgICAgICAgICAgICAgU3RyaW5nOiAgIGNoYXJhY3RlciBzdHJpbmcgdG8gdmlzdWFsaXplIGluZGVudGF0aW9uICggY2FuIGFsc28gYmUgYSBzZXQgb2Ygd2hpdGUgc3BhY2VzIClcclxuKiAgIE1pbmlmeVxyXG4qXHJcbiogICAgICAgIHZrYmVhdXRpZnkueG1sbWluKHRleHQgWyxwcmVzZXJ2ZV9jb21tZW50c10pO1xyXG4qICAgICAgICB2a2JlYXV0aWZ5Lmpzb25taW4odGV4dCk7XHJcbiogICAgICAgIHZrYmVhdXRpZnkuY3NzbWluKHRleHQgWyxwcmVzZXJ2ZV9jb21tZW50c10pO1xyXG4qICAgICAgICB2a2JlYXV0aWZ5LnNxbG1pbih0ZXh0KTtcclxuKlxyXG4qICAgICAgICBAdGV4dCAtIFN0cmluZzsgdGV4dCB0byBtaW5pZnk7XHJcbiogICAgICAgIEBwcmVzZXJ2ZV9jb21tZW50cyAtIEJvb2w7IFtvcHRpb25hbF07XHJcbiogICAgICAgICAgICAgICAgU2V0IHRoaXMgZmxhZyB0byB0cnVlIHRvIHByZXZlbnQgcmVtb3ZpbmcgY29tbWVudHMgZnJvbSBAdGV4dCAoIG1pbnhtbCBhbmQgbWluY3NzIGZ1bmN0aW9ucyBvbmx5LiApXHJcbipcclxuKiAgIEV4YW1wbGVzOlxyXG4qICAgICAgICB2a2JlYXV0aWZ5LnhtbCh0ZXh0KTsgLy8gcHJldHR5IHByaW50IFhNTFxyXG4qICAgICAgICB2a2JlYXV0aWZ5Lmpzb24odGV4dCwgNCApOyAvLyBwcmV0dHkgcHJpbnQgSlNPTlxyXG4qICAgICAgICB2a2JlYXV0aWZ5LmNzcyh0ZXh0LCAnLiAuIC4gLicpOyAvLyBwcmV0dHkgcHJpbnQgQ1NTXHJcbiogICAgICAgIHZrYmVhdXRpZnkuc3FsKHRleHQsICctLS0tJyk7IC8vIHByZXR0eSBwcmludCBTUUxcclxuKlxyXG4qICAgICAgICB2a2JlYXV0aWZ5LnhtbG1pbih0ZXh0LCB0cnVlKTsvLyBtaW5pZnkgWE1MLCBwcmVzZXJ2ZSBjb21tZW50c1xyXG4qICAgICAgICB2a2JlYXV0aWZ5Lmpzb25taW4odGV4dCk7Ly8gbWluaWZ5IEpTT05cclxuKiAgICAgICAgdmtiZWF1dGlmeS5jc3NtaW4odGV4dCk7Ly8gbWluaWZ5IENTUywgcmVtb3ZlIGNvbW1lbnRzICggZGVmYXVsdCApXHJcbiogICAgICAgIHZrYmVhdXRpZnkuc3FsbWluKHRleHQpOy8vIG1pbmlmeSBTUUxcclxuKlxyXG4qL1xyXG5mdW5jdGlvbiBjcmVhdGVTaGlmdEFycihzdGVwKSB7XHJcblxyXG5cdHZhciBzcGFjZSA9ICcgICAgJztcclxuXHJcblx0aWYgKCBpc05hTihwYXJzZUludChzdGVwKSkgKSB7ICAvLyBhcmd1bWVudCBpcyBzdHJpbmdcclxuXHRcdHNwYWNlID0gc3RlcDtcclxuXHR9IGVsc2UgeyAvLyBhcmd1bWVudCBpcyBpbnRlZ2VyXHJcblx0XHRzd2l0Y2goc3RlcCkge1xyXG5cdFx0XHRjYXNlIDE6IHNwYWNlID0gJyAnOyBicmVhaztcclxuXHRcdFx0Y2FzZSAyOiBzcGFjZSA9ICcgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDM6IHNwYWNlID0gJyAgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDQ6IHNwYWNlID0gJyAgICAnOyBicmVhaztcclxuXHRcdFx0Y2FzZSA1OiBzcGFjZSA9ICcgICAgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDY6IHNwYWNlID0gJyAgICAgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDc6IHNwYWNlID0gJyAgICAgICAnOyBicmVhaztcclxuXHRcdFx0Y2FzZSA4OiBzcGFjZSA9ICcgICAgICAgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDk6IHNwYWNlID0gJyAgICAgICAgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDEwOiBzcGFjZSA9ICcgICAgICAgICAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMTE6IHNwYWNlID0gJyAgICAgICAgICAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMTI6IHNwYWNlID0gJyAgICAgICAgICAgICc7IGJyZWFrO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dmFyIHNoaWZ0ID0gWydcXG4nXTsgLy8gYXJyYXkgb2Ygc2hpZnRzXHJcblx0Zm9yKHZhciBpeD0wO2l4PDEwMDtpeCsrKSB7XHJcblx0XHRzaGlmdC5wdXNoKHNoaWZ0W2l4XStzcGFjZSk7XHJcblx0fVxyXG5cdHJldHVybiBzaGlmdDtcclxufVxyXG5cclxuZnVuY3Rpb24gdmtiZWF1dGlmeSgpe1xyXG5cdHRoaXMuc3RlcCA9ICcgICAgJzsgLy8gNCBzcGFjZXNcclxuXHR0aGlzLnNoaWZ0ID0gY3JlYXRlU2hpZnRBcnIodGhpcy5zdGVwKTtcclxufTtcclxuXHJcbnZrYmVhdXRpZnkucHJvdG90eXBlLnhtbCA9IGZ1bmN0aW9uKHRleHQsc3RlcCkge1xyXG5cclxuXHR2YXIgYXIgPSB0ZXh0LnJlcGxhY2UoLz5cXHN7MCx9PC9nLFwiPjxcIilcclxuXHRcdFx0XHQgLnJlcGxhY2UoLzwvZyxcIn46On48XCIpXHJcblx0XHRcdFx0IC5yZXBsYWNlKC9cXHMqeG1sbnNcXDovZyxcIn46On54bWxuczpcIilcclxuXHRcdFx0XHQgLnJlcGxhY2UoL1xccyp4bWxuc1xcPS9nLFwifjo6fnhtbG5zPVwiKVxyXG5cdFx0XHRcdCAuc3BsaXQoJ346On4nKSxcclxuXHRcdGxlbiA9IGFyLmxlbmd0aCxcclxuXHRcdGluQ29tbWVudCA9IGZhbHNlLFxyXG5cdFx0ZGVlcCA9IDAsXHJcblx0XHRzdHIgPSAnJyxcclxuXHRcdGl4ID0gMCxcclxuXHRcdHNoaWZ0ID0gc3RlcCA/IGNyZWF0ZVNoaWZ0QXJyKHN0ZXApIDogdGhpcy5zaGlmdDtcclxuXHJcblx0XHRmb3IoaXg9MDtpeDxsZW47aXgrKykge1xyXG5cdFx0XHQvLyBzdGFydCBjb21tZW50IG9yIDwhW0NEQVRBWy4uLl1dPiBvciA8IURPQ1RZUEUgLy9cclxuXHRcdFx0aWYoYXJbaXhdLnNlYXJjaCgvPCEvKSA+IC0xKSB7XHJcblx0XHRcdFx0c3RyICs9IHNoaWZ0W2RlZXBdK2FyW2l4XTtcclxuXHRcdFx0XHRpbkNvbW1lbnQgPSB0cnVlO1xyXG5cdFx0XHRcdC8vIGVuZCBjb21tZW50ICBvciA8IVtDREFUQVsuLi5dXT4gLy9cclxuXHRcdFx0XHRpZihhcltpeF0uc2VhcmNoKC8tLT4vKSA+IC0xIHx8IGFyW2l4XS5zZWFyY2goL1xcXT4vKSA+IC0xIHx8IGFyW2l4XS5zZWFyY2goLyFET0NUWVBFLykgPiAtMSApIHtcclxuXHRcdFx0XHRcdGluQ29tbWVudCA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdC8vIGVuZCBjb21tZW50ICBvciA8IVtDREFUQVsuLi5dXT4gLy9cclxuXHRcdFx0aWYoYXJbaXhdLnNlYXJjaCgvLS0+LykgPiAtMSB8fCBhcltpeF0uc2VhcmNoKC9cXF0+LykgPiAtMSkge1xyXG5cdFx0XHRcdHN0ciArPSBhcltpeF07XHJcblx0XHRcdFx0aW5Db21tZW50ID0gZmFsc2U7XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHQvLyA8ZWxtPjwvZWxtPiAvL1xyXG5cdFx0XHRpZiggL148XFx3Ly5leGVjKGFyW2l4LTFdKSAmJiAvXjxcXC9cXHcvLmV4ZWMoYXJbaXhdKSAmJlxyXG5cdFx0XHRcdC9ePFtcXHc6XFwtXFwuXFwsXSsvLmV4ZWMoYXJbaXgtMV0pID09IC9ePFxcL1tcXHc6XFwtXFwuXFwsXSsvLmV4ZWMoYXJbaXhdKVswXS5yZXBsYWNlKCcvJywnJykpIHtcclxuXHRcdFx0XHRzdHIgKz0gYXJbaXhdO1xyXG5cdFx0XHRcdGlmKCFpbkNvbW1lbnQpIGRlZXAtLTtcclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdCAvLyA8ZWxtPiAvL1xyXG5cdFx0XHRpZihhcltpeF0uc2VhcmNoKC88XFx3LykgPiAtMSAmJiBhcltpeF0uc2VhcmNoKC88XFwvLykgPT0gLTEgJiYgYXJbaXhdLnNlYXJjaCgvXFwvPi8pID09IC0xICkge1xyXG5cdFx0XHRcdHN0ciA9ICFpbkNvbW1lbnQgPyBzdHIgKz0gc2hpZnRbZGVlcCsrXSthcltpeF0gOiBzdHIgKz0gYXJbaXhdO1xyXG5cdFx0XHR9IGVsc2VcclxuXHRcdFx0IC8vIDxlbG0+Li4uPC9lbG0+IC8vXHJcblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzxcXHcvKSA+IC0xICYmIGFyW2l4XS5zZWFyY2goLzxcXC8vKSA+IC0xKSB7XHJcblx0XHRcdFx0c3RyID0gIWluQ29tbWVudCA/IHN0ciArPSBzaGlmdFtkZWVwXSthcltpeF0gOiBzdHIgKz0gYXJbaXhdO1xyXG5cdFx0XHR9IGVsc2VcclxuXHRcdFx0Ly8gPC9lbG0+IC8vXHJcblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzxcXC8vKSA+IC0xKSB7XHJcblx0XHRcdFx0c3RyID0gIWluQ29tbWVudCA/IHN0ciArPSBzaGlmdFstLWRlZXBdK2FyW2l4XSA6IHN0ciArPSBhcltpeF07XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHQvLyA8ZWxtLz4gLy9cclxuXHRcdFx0aWYoYXJbaXhdLnNlYXJjaCgvXFwvPi8pID4gLTEgKSB7XHJcblx0XHRcdFx0c3RyID0gIWluQ29tbWVudCA/IHN0ciArPSBzaGlmdFtkZWVwXSthcltpeF0gOiBzdHIgKz0gYXJbaXhdO1xyXG5cdFx0XHR9IGVsc2VcclxuXHRcdFx0Ly8gPD8geG1sIC4uLiA/PiAvL1xyXG5cdFx0XHRpZihhcltpeF0uc2VhcmNoKC88XFw/LykgPiAtMSkge1xyXG5cdFx0XHRcdHN0ciArPSBzaGlmdFtkZWVwXSthcltpeF07XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHQvLyB4bWxucyAvL1xyXG5cdFx0XHRpZiggYXJbaXhdLnNlYXJjaCgveG1sbnNcXDovKSA+IC0xICB8fCBhcltpeF0uc2VhcmNoKC94bWxuc1xcPS8pID4gLTEpIHtcclxuXHRcdFx0XHRzdHIgKz0gc2hpZnRbZGVlcF0rYXJbaXhdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRzdHIgKz0gYXJbaXhdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdHJldHVybiAgKHN0clswXSA9PSAnXFxuJykgPyBzdHIuc2xpY2UoMSkgOiBzdHI7XHJcbn1cclxuXHJcbnZrYmVhdXRpZnkucHJvdG90eXBlLmpzb24gPSBmdW5jdGlvbih0ZXh0LHN0ZXApIHtcclxuXHJcblx0dmFyIHN0ZXAgPSBzdGVwID8gc3RlcCA6IHRoaXMuc3RlcDtcclxuXHJcblx0aWYgKHR5cGVvZiBKU09OID09PSAndW5kZWZpbmVkJyApIHJldHVybiB0ZXh0O1xyXG5cclxuXHRpZiAoIHR5cGVvZiB0ZXh0ID09PSBcInN0cmluZ1wiICkgcmV0dXJuIEpTT04uc3RyaW5naWZ5KEpTT04ucGFyc2UodGV4dCksIG51bGwsIHN0ZXApO1xyXG5cdGlmICggdHlwZW9mIHRleHQgPT09IFwib2JqZWN0XCIgKSByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGV4dCwgbnVsbCwgc3RlcCk7XHJcblxyXG5cdHJldHVybiB0ZXh0OyAvLyB0ZXh0IGlzIG5vdCBzdHJpbmcgbm9yIG9iamVjdFxyXG59XHJcblxyXG52a2JlYXV0aWZ5LnByb3RvdHlwZS5jc3MgPSBmdW5jdGlvbih0ZXh0LCBzdGVwKSB7XHJcblxyXG5cdHZhciBhciA9IHRleHQucmVwbGFjZSgvXFxzezEsfS9nLCcgJylcclxuXHRcdFx0XHQucmVwbGFjZSgvXFx7L2csXCJ7fjo6flwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC9cXH0vZyxcIn46On59fjo6flwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC9cXDsvZyxcIjt+Ojp+XCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoL1xcL1xcKi9nLFwifjo6fi8qXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoL1xcKlxcLy9nLFwiKi9+Ojp+XCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoL346On5cXHN7MCx9fjo6fi9nLFwifjo6flwiKVxyXG5cdFx0XHRcdC5zcGxpdCgnfjo6ficpLFxyXG5cdFx0bGVuID0gYXIubGVuZ3RoLFxyXG5cdFx0ZGVlcCA9IDAsXHJcblx0XHRzdHIgPSAnJyxcclxuXHRcdGl4ID0gMCxcclxuXHRcdHNoaWZ0ID0gc3RlcCA/IGNyZWF0ZVNoaWZ0QXJyKHN0ZXApIDogdGhpcy5zaGlmdDtcclxuXHJcblx0XHRmb3IoaXg9MDtpeDxsZW47aXgrKykge1xyXG5cclxuXHRcdFx0aWYoIC9cXHsvLmV4ZWMoYXJbaXhdKSkgIHtcclxuXHRcdFx0XHRzdHIgKz0gc2hpZnRbZGVlcCsrXSthcltpeF07XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHRpZiggL1xcfS8uZXhlYyhhcltpeF0pKSAge1xyXG5cdFx0XHRcdHN0ciArPSBzaGlmdFstLWRlZXBdK2FyW2l4XTtcclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdGlmKCAvXFwqXFxcXC8uZXhlYyhhcltpeF0pKSAge1xyXG5cdFx0XHRcdHN0ciArPSBzaGlmdFtkZWVwXSthcltpeF07XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0c3RyICs9IHNoaWZ0W2RlZXBdK2FyW2l4XTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxuezEsfS8sJycpO1xyXG59XHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmZ1bmN0aW9uIGlzU3VicXVlcnkoc3RyLCBwYXJlbnRoZXNpc0xldmVsKSB7XHJcblx0cmV0dXJuICBwYXJlbnRoZXNpc0xldmVsIC0gKHN0ci5yZXBsYWNlKC9cXCgvZywnJykubGVuZ3RoIC0gc3RyLnJlcGxhY2UoL1xcKS9nLCcnKS5sZW5ndGggKVxyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdF9zcWwoc3RyLCB0YWIpIHtcclxuXHJcblx0cmV0dXJuIHN0ci5yZXBsYWNlKC9cXHN7MSx9L2csXCIgXCIpXHJcblxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gQU5EIC9pZyxcIn46On5cIit0YWIrdGFiK1wiQU5EIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gQkVUV0VFTiAvaWcsXCJ+Ojp+XCIrdGFiK1wiQkVUV0VFTiBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIENBU0UgL2lnLFwifjo6flwiK3RhYitcIkNBU0UgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBFTFNFIC9pZyxcIn46On5cIit0YWIrXCJFTFNFIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gRU5EIC9pZyxcIn46On5cIit0YWIrXCJFTkQgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBGUk9NIC9pZyxcIn46On5GUk9NIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gR1JPVVBcXHN7MSx9QlkvaWcsXCJ+Ojp+R1JPVVAgQlkgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBIQVZJTkcgL2lnLFwifjo6fkhBVklORyBcIilcclxuXHRcdFx0XHQvLy5yZXBsYWNlKC8gU0VUIC9pZyxcIiBTRVR+Ojp+XCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBJTiAvaWcsXCIgSU4gXCIpXHJcblxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gSk9JTiAvaWcsXCJ+Ojp+Sk9JTiBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIENST1NTfjo6fnsxLH1KT0lOIC9pZyxcIn46On5DUk9TUyBKT0lOIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gSU5ORVJ+Ojp+ezEsfUpPSU4gL2lnLFwifjo6fklOTkVSIEpPSU4gXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBMRUZUfjo6fnsxLH1KT0lOIC9pZyxcIn46On5MRUZUIEpPSU4gXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBSSUdIVH46On57MSx9Sk9JTiAvaWcsXCJ+Ojp+UklHSFQgSk9JTiBcIilcclxuXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBPTiAvaWcsXCJ+Ojp+XCIrdGFiK1wiT04gXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBPUiAvaWcsXCJ+Ojp+XCIrdGFiK3RhYitcIk9SIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gT1JERVJcXHN7MSx9QlkvaWcsXCJ+Ojp+T1JERVIgQlkgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBPVkVSIC9pZyxcIn46On5cIit0YWIrXCJPVkVSIFwiKVxyXG5cclxuXHRcdFx0XHQucmVwbGFjZSgvXFwoXFxzezAsfVNFTEVDVCAvaWcsXCJ+Ojp+KFNFTEVDVCBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvXFwpXFxzezAsfVNFTEVDVCAvaWcsXCIpfjo6flNFTEVDVCBcIilcclxuXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBUSEVOIC9pZyxcIiBUSEVOfjo6flwiK3RhYitcIlwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gVU5JT04gL2lnLFwifjo6flVOSU9Ofjo6flwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gVVNJTkcgL2lnLFwifjo6flVTSU5HIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gV0hFTiAvaWcsXCJ+Ojp+XCIrdGFiK1wiV0hFTiBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIFdIRVJFIC9pZyxcIn46On5XSEVSRSBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIFdJVEggL2lnLFwifjo6fldJVEggXCIpXHJcblxyXG5cdFx0XHRcdC8vLnJlcGxhY2UoL1xcLFxcc3swLH1cXCgvaWcsXCIsfjo6figgXCIpXHJcblx0XHRcdFx0Ly8ucmVwbGFjZSgvXFwsL2lnLFwiLH46On5cIit0YWIrdGFiK1wiXCIpXHJcblxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gQUxMIC9pZyxcIiBBTEwgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBBUyAvaWcsXCIgQVMgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBBU0MgL2lnLFwiIEFTQyBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIERFU0MgL2lnLFwiIERFU0MgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBESVNUSU5DVCAvaWcsXCIgRElTVElOQ1QgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBFWElTVFMgL2lnLFwiIEVYSVNUUyBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIE5PVCAvaWcsXCIgTk9UIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gTlVMTCAvaWcsXCIgTlVMTCBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIExJS0UgL2lnLFwiIExJS0UgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoL1xcc3swLH1TRUxFQ1QgL2lnLFwiU0VMRUNUIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC9cXHN7MCx9VVBEQVRFIC9pZyxcIlVQREFURSBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIFNFVCAvaWcsXCIgU0VUIFwiKVxyXG5cclxuXHRcdFx0XHQucmVwbGFjZSgvfjo6fnsxLH0vZyxcIn46On5cIilcclxuXHRcdFx0XHQuc3BsaXQoJ346On4nKTtcclxufVxyXG5cclxudmtiZWF1dGlmeS5wcm90b3R5cGUuc3FsID0gZnVuY3Rpb24odGV4dCxzdGVwKSB7XHJcblxyXG5cdHZhciBhcl9ieV9xdW90ZSA9IHRleHQucmVwbGFjZSgvXFxzezEsfS9nLFwiIFwiKVxyXG5cdFx0XHRcdFx0XHRcdC5yZXBsYWNlKC9cXCcvaWcsXCJ+Ojp+XFwnXCIpXHJcblx0XHRcdFx0XHRcdFx0LnNwbGl0KCd+Ojp+JyksXHJcblx0XHRsZW4gPSBhcl9ieV9xdW90ZS5sZW5ndGgsXHJcblx0XHRhciA9IFtdLFxyXG5cdFx0ZGVlcCA9IDAsXHJcblx0XHR0YWIgPSB0aGlzLnN0ZXAsLy8rdGhpcy5zdGVwLFxyXG5cdFx0aW5Db21tZW50ID0gdHJ1ZSxcclxuXHRcdGluUXVvdGUgPSBmYWxzZSxcclxuXHRcdHBhcmVudGhlc2lzTGV2ZWwgPSAwLFxyXG5cdFx0c3RyID0gJycsXHJcblx0XHRpeCA9IDAsXHJcblx0XHRzaGlmdCA9IHN0ZXAgPyBjcmVhdGVTaGlmdEFycihzdGVwKSA6IHRoaXMuc2hpZnQ7O1xyXG5cclxuXHRcdGZvcihpeD0wO2l4PGxlbjtpeCsrKSB7XHJcblx0XHRcdGlmKGl4JTIpIHtcclxuXHRcdFx0XHRhciA9IGFyLmNvbmNhdChhcl9ieV9xdW90ZVtpeF0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFyID0gYXIuY29uY2F0KHNwbGl0X3NxbChhcl9ieV9xdW90ZVtpeF0sIHRhYikgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGxlbiA9IGFyLmxlbmd0aDtcclxuXHRcdGZvcihpeD0wO2l4PGxlbjtpeCsrKSB7XHJcblxyXG5cdFx0XHRwYXJlbnRoZXNpc0xldmVsID0gaXNTdWJxdWVyeShhcltpeF0sIHBhcmVudGhlc2lzTGV2ZWwpO1xyXG5cclxuXHRcdFx0aWYoIC9cXHN7MCx9XFxzezAsfVNFTEVDVFxcc3swLH0vLmV4ZWMoYXJbaXhdKSkgIHtcclxuXHRcdFx0XHRhcltpeF0gPSBhcltpeF0ucmVwbGFjZSgvXFwsL2csXCIsXFxuXCIrdGFiK3RhYitcIlwiKVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiggL1xcc3swLH1cXHN7MCx9U0VUXFxzezAsfS8uZXhlYyhhcltpeF0pKSAge1xyXG5cdFx0XHRcdGFyW2l4XSA9IGFyW2l4XS5yZXBsYWNlKC9cXCwvZyxcIixcXG5cIit0YWIrdGFiK1wiXCIpXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKCAvXFxzezAsfVxcKFxcc3swLH1TRUxFQ1RcXHN7MCx9Ly5leGVjKGFyW2l4XSkpICB7XHJcblx0XHRcdFx0ZGVlcCsrO1xyXG5cdFx0XHRcdHN0ciArPSBzaGlmdFtkZWVwXSthcltpeF07XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHRpZiggL1xcJy8uZXhlYyhhcltpeF0pICkgIHtcclxuXHRcdFx0XHRpZihwYXJlbnRoZXNpc0xldmVsPDEgJiYgZGVlcCkge1xyXG5cdFx0XHRcdFx0ZGVlcC0tO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRzdHIgKz0gYXJbaXhdO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgIHtcclxuXHRcdFx0XHRzdHIgKz0gc2hpZnRbZGVlcF0rYXJbaXhdO1xyXG5cdFx0XHRcdGlmKHBhcmVudGhlc2lzTGV2ZWw8MSAmJiBkZWVwKSB7XHJcblx0XHRcdFx0XHRkZWVwLS07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBqdW5rID0gMDtcclxuXHRcdH1cclxuXHJcblx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXlxcbnsxLH0vLCcnKS5yZXBsYWNlKC9cXG57MSx9L2csXCJcXG5cIik7XHJcblx0XHRyZXR1cm4gc3RyO1xyXG59XHJcblxyXG5cclxudmtiZWF1dGlmeS5wcm90b3R5cGUueG1sbWluID0gZnVuY3Rpb24odGV4dCwgcHJlc2VydmVDb21tZW50cykge1xyXG5cclxuXHR2YXIgc3RyID0gcHJlc2VydmVDb21tZW50cyA/IHRleHRcclxuXHRcdFx0XHRcdFx0XHQgICA6IHRleHQucmVwbGFjZSgvXFw8IVsgXFxyXFxuXFx0XSooLS0oW15cXC1dfFtcXHJcXG5dfC1bXlxcLV0pKi0tWyBcXHJcXG5cXHRdKilcXD4vZyxcIlwiKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQgLnJlcGxhY2UoL1sgXFxyXFxuXFx0XXsxLH14bWxucy9nLCAnIHhtbG5zJyk7XHJcblx0cmV0dXJuICBzdHIucmVwbGFjZSgvPlxcc3swLH08L2csXCI+PFwiKTtcclxufVxyXG5cclxudmtiZWF1dGlmeS5wcm90b3R5cGUuanNvbm1pbiA9IGZ1bmN0aW9uKHRleHQpIHtcclxuXHJcblx0aWYgKHR5cGVvZiBKU09OID09PSAndW5kZWZpbmVkJyApIHJldHVybiB0ZXh0O1xyXG5cclxuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZSh0ZXh0KSwgbnVsbCwgMCk7XHJcblxyXG59XHJcblxyXG52a2JlYXV0aWZ5LnByb3RvdHlwZS5jc3NtaW4gPSBmdW5jdGlvbih0ZXh0LCBwcmVzZXJ2ZUNvbW1lbnRzKSB7XHJcblxyXG5cdHZhciBzdHIgPSBwcmVzZXJ2ZUNvbW1lbnRzID8gdGV4dFxyXG5cdFx0XHRcdFx0XHRcdCAgIDogdGV4dC5yZXBsYWNlKC9cXC9cXCooW14qXXxbXFxyXFxuXXwoXFwqKyhbXiovXXxbXFxyXFxuXSkpKSpcXCorXFwvL2csXCJcIikgO1xyXG5cclxuXHRyZXR1cm4gc3RyLnJlcGxhY2UoL1xcc3sxLH0vZywnICcpXHJcblx0XHRcdCAgLnJlcGxhY2UoL1xce1xcc3sxLH0vZyxcIntcIilcclxuXHRcdFx0ICAucmVwbGFjZSgvXFx9XFxzezEsfS9nLFwifVwiKVxyXG5cdFx0XHQgIC5yZXBsYWNlKC9cXDtcXHN7MSx9L2csXCI7XCIpXHJcblx0XHRcdCAgLnJlcGxhY2UoL1xcL1xcKlxcc3sxLH0vZyxcIi8qXCIpXHJcblx0XHRcdCAgLnJlcGxhY2UoL1xcKlxcL1xcc3sxLH0vZyxcIiovXCIpO1xyXG59XHJcblxyXG52a2JlYXV0aWZ5LnByb3RvdHlwZS5zcWxtaW4gPSBmdW5jdGlvbih0ZXh0KSB7XHJcblx0cmV0dXJuIHRleHQucmVwbGFjZSgvXFxzezEsfS9nLFwiIFwiKS5yZXBsYWNlKC9cXHN7MSx9XFwoLyxcIihcIikucmVwbGFjZSgvXFxzezEsfVxcKS8sXCIpXCIpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyB2a2JlYXV0aWZ5KCk7XHJcbiIsIihmdW5jdGlvbihhLGIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sYik7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyliKCk7ZWxzZXtiKCksYS5GaWxlU2F2ZXI9e2V4cG9ydHM6e319LmV4cG9ydHN9fSkodGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYj9iPXthdXRvQm9tOiExfTpcIm9iamVjdFwiIT10eXBlb2YgYiYmKGNvbnNvbGUud2FybihcIkRlcHJlY2F0ZWQ6IEV4cGVjdGVkIHRoaXJkIGFyZ3VtZW50IHRvIGJlIGEgb2JqZWN0XCIpLGI9e2F1dG9Cb206IWJ9KSxiLmF1dG9Cb20mJi9eXFxzKig/OnRleHRcXC9cXFMqfGFwcGxpY2F0aW9uXFwveG1sfFxcUypcXC9cXFMqXFwreG1sKVxccyo7LipjaGFyc2V0XFxzKj1cXHMqdXRmLTgvaS50ZXN0KGEudHlwZSk/bmV3IEJsb2IoW1wiXFx1RkVGRlwiLGFdLHt0eXBlOmEudHlwZX0pOmF9ZnVuY3Rpb24gYyhiLGMsZCl7dmFyIGU9bmV3IFhNTEh0dHBSZXF1ZXN0O2Uub3BlbihcIkdFVFwiLGIpLGUucmVzcG9uc2VUeXBlPVwiYmxvYlwiLGUub25sb2FkPWZ1bmN0aW9uKCl7YShlLnJlc3BvbnNlLGMsZCl9LGUub25lcnJvcj1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJjb3VsZCBub3QgZG93bmxvYWQgZmlsZVwiKX0sZS5zZW5kKCl9ZnVuY3Rpb24gZChhKXt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiSEVBRFwiLGEsITEpO3RyeXtiLnNlbmQoKX1jYXRjaChhKXt9cmV0dXJuIDIwMDw9Yi5zdGF0dXMmJjI5OT49Yi5zdGF0dXN9ZnVuY3Rpb24gZShhKXt0cnl7YS5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIikpfWNhdGNoKGMpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7Yi5pbml0TW91c2VFdmVudChcImNsaWNrXCIsITAsITAsd2luZG93LDAsMCwwLDgwLDIwLCExLCExLCExLCExLDAsbnVsbCksYS5kaXNwYXRjaEV2ZW50KGIpfX12YXIgZj1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cud2luZG93PT09d2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZi5zZWxmPT09c2VsZj9zZWxmOlwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbC5nbG9iYWw9PT1nbG9iYWw/Z2xvYmFsOnZvaWQgMCxhPWYuc2F2ZUFzfHwoXCJvYmplY3RcIiE9dHlwZW9mIHdpbmRvd3x8d2luZG93IT09Zj9mdW5jdGlvbigpe306XCJkb3dubG9hZFwiaW4gSFRNTEFuY2hvckVsZW1lbnQucHJvdG90eXBlP2Z1bmN0aW9uKGIsZyxoKXt2YXIgaT1mLlVSTHx8Zi53ZWJraXRVUkwsaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtnPWd8fGIubmFtZXx8XCJkb3dubG9hZFwiLGouZG93bmxvYWQ9ZyxqLnJlbD1cIm5vb3BlbmVyXCIsXCJzdHJpbmdcIj09dHlwZW9mIGI/KGouaHJlZj1iLGoub3JpZ2luPT09bG9jYXRpb24ub3JpZ2luP2Uoaik6ZChqLmhyZWYpP2MoYixnLGgpOmUoaixqLnRhcmdldD1cIl9ibGFua1wiKSk6KGouaHJlZj1pLmNyZWF0ZU9iamVjdFVSTChiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5yZXZva2VPYmplY3RVUkwoai5ocmVmKX0sNEU0KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShqKX0sMCkpfTpcIm1zU2F2ZU9yT3BlbkJsb2JcImluIG5hdmlnYXRvcj9mdW5jdGlvbihmLGcsaCl7aWYoZz1nfHxmLm5hbWV8fFwiZG93bmxvYWRcIixcInN0cmluZ1wiIT10eXBlb2YgZiluYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihiKGYsaCksZyk7ZWxzZSBpZihkKGYpKWMoZixnLGgpO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7aS5ocmVmPWYsaS50YXJnZXQ9XCJfYmxhbmtcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShpKX0pfX06ZnVuY3Rpb24oYSxiLGQsZSl7aWYoZT1lfHxvcGVuKFwiXCIsXCJfYmxhbmtcIiksZSYmKGUuZG9jdW1lbnQudGl0bGU9ZS5kb2N1bWVudC5ib2R5LmlubmVyVGV4dD1cImRvd25sb2FkaW5nLi4uXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBhKXJldHVybiBjKGEsYixkKTt2YXIgZz1cImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiPT09YS50eXBlLGg9L2NvbnN0cnVjdG9yL2kudGVzdChmLkhUTUxFbGVtZW50KXx8Zi5zYWZhcmksaT0vQ3JpT1NcXC9bXFxkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYoKGl8fGcmJmgpJiZcIm9iamVjdFwiPT10eXBlb2YgRmlsZVJlYWRlcil7dmFyIGo9bmV3IEZpbGVSZWFkZXI7ai5vbmxvYWRlbmQ9ZnVuY3Rpb24oKXt2YXIgYT1qLnJlc3VsdDthPWk/YTphLnJlcGxhY2UoL15kYXRhOlteO10qOy8sXCJkYXRhOmF0dGFjaG1lbnQvZmlsZTtcIiksZT9lLmxvY2F0aW9uLmhyZWY9YTpsb2NhdGlvbj1hLGU9bnVsbH0sai5yZWFkQXNEYXRhVVJMKGEpfWVsc2V7dmFyIGs9Zi5VUkx8fGYud2Via2l0VVJMLGw9ay5jcmVhdGVPYmplY3RVUkwoYSk7ZT9lLmxvY2F0aW9uPWw6bG9jYXRpb24uaHJlZj1sLGU9bnVsbCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ay5yZXZva2VPYmplY3RVUkwobCl9LDRFNCl9fSk7Zi5zYXZlQXM9YS5zYXZlQXM9YSxcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9YSl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVNhdmVyLm1pbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWxsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvYWxsXCIpKTtcblxudmFyIF9CdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvblwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdmVydGljYWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBqdXN0aWZpZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IGJsb2NrIGJ1dHRvbnM7IG9ubHkgdXNlZnVsIHdoZW4gdXNlZCB3aXRoIHRoZSBcInZlcnRpY2FsXCIgcHJvcC5cbiAgICogQHR5cGUge2Jvb2x9XG4gICAqL1xuICBibG9jazogKDAsIF9hbGwuZGVmYXVsdCkoX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGJsb2NrID0gX3JlZi5ibG9jayxcbiAgICAgICAgdmVydGljYWwgPSBfcmVmLnZlcnRpY2FsO1xuICAgIHJldHVybiBibG9jayAmJiAhdmVydGljYWwgPyBuZXcgRXJyb3IoJ2BibG9ja2AgcmVxdWlyZXMgYHZlcnRpY2FsYCB0byBiZSBzZXQgdG8gaGF2ZSBhbnkgZWZmZWN0JykgOiBudWxsO1xuICB9KVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGJsb2NrOiBmYWxzZSxcbiAganVzdGlmaWVkOiBmYWxzZSxcbiAgdmVydGljYWw6IGZhbHNlXG59O1xuXG52YXIgQnV0dG9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShCdXR0b25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uR3JvdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJ1dHRvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBibG9jayA9IF90aGlzJHByb3BzLmJsb2NrLFxuICAgICAgICBqdXN0aWZpZWQgPSBfdGhpcyRwcm9wcy5qdXN0aWZpZWQsXG4gICAgICAgIHZlcnRpY2FsID0gX3RoaXMkcHJvcHMudmVydGljYWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJibG9ja1wiLCBcImp1c3RpZmllZFwiLCBcInZlcnRpY2FsXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcyldID0gIXZlcnRpY2FsLCBfZXh0ZW5kczJbKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGJzUHJvcHMsICd2ZXJ0aWNhbCcpXSA9IHZlcnRpY2FsLCBfZXh0ZW5kczJbKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGJzUHJvcHMsICdqdXN0aWZpZWQnKV0gPSBqdXN0aWZpZWQsIF9leHRlbmRzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoX0J1dHRvbi5kZWZhdWx0LmRlZmF1bHRQcm9wcywgJ2Jsb2NrJyldID0gYmxvY2ssIF9leHRlbmRzMikpO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uR3JvdXA7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbkdyb3VwLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJ1dHRvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnYnRuLWdyb3VwJywgQnV0dG9uR3JvdXApO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlIFwiTElDRU5TRVwiICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtR3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtR3JvdXAnO1xuaW1wb3J0IElucHV0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwJztcbmltcG9ydCBPdmVybGF5VHJpZ2dlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5cbmltcG9ydCBDb2xsZWN0aW9uIGZyb20gJy4vQ29sbGVjdGlvbic7XG5cbmltcG9ydCBzdG9yZSwgeyBNQ29sbGVjdGlvbiB9IGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGxlY3Rpb25MaXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB0YXNrQ2hlY2tib3hlczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgcmVxdWlyZW1lbnRPcHRpb25zOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxuICB9O1xuXG4gIEBvYnNlcnZhYmxlIGlucHV0VmFsaWQgPSBmYWxzZTtcbiAgQG9ic2VydmFibGUgY29sbGVjdGlvbnNWaXNpYmxlID0gdHJ1ZTtcblxuICBAYWN0aW9uIHNldElucHV0VmFsaWRpdHkgPSAodmFsaWQpID0+IHsgdGhpcy5pbnB1dFZhbGlkID0gdmFsaWQ7IH1cbiAgQGFjdGlvbiB0b2dnbGVDb2xsZWN0aW9uc1Zpc2liaWxpdHkgPSAoKSA9PiB7IHRoaXMuY29sbGVjdGlvbnNWaXNpYmxlID0gIXRoaXMuY29sbGVjdGlvbnNWaXNpYmxlOyB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGFkZENvbGxlY3Rpb25CdG47XG5cbiAgaGFuZGxlQWRkQ29sbGVjdGlvbiA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gY2FuY2VsIGlmIElEIGlzIGVtcHR5LCBvciBpZiBJRCBhbHJlYWR5IGV4aXN0c1xuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJyB8fCBzdG9yZS5oYXNDb2xsZWN0aW9uKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgTUNvbGxlY3Rpb247XG4gICAgY29sbGVjdGlvbi5pZCA9IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWU7XG5cbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKCh0LCBqKSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudGFyZ2V0WzBdLmZvcm1baiArIDFdLnZhbHVlOyBpKyspIHtcbiAgICAgICAgY29sbGVjdGlvbi50YXNrcy5wdXNoKHQuaWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bJ3JlcXVpcmVtZW50cyddLnZhbHVlICE9PSAnJykgeyAvLyBUT0RPOiBoYW5kbGUgbXVsdGlwbGVcbiAgICAgIGNvbGxlY3Rpb24ucmVxdWlyZW1lbnRzLnB1c2goZS50YXJnZXRbMF0uZm9ybVsncmVxdWlyZW1lbnRzJ10udmFsdWUpO1xuICAgIH1cblxuICAgIHN0b3JlLmFkZENvbGxlY3Rpb24oY29sbGVjdGlvbik7XG4gICAgdGhpcy5hZGRDb2xsZWN0aW9uQnRuLmhpZGUoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZyYWdtZW50PlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtIGNvbGxlY3Rpb25zLWhlYWRlclwiPlxuICAgICAgICAgIGNvbGxlY3Rpb25zXG4gICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgcmVmPXsoZWwpID0+IHRoaXMuYWRkQ29sbGVjdGlvbkJ0biA9IGVsfSBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IG92ZXJsYXk9e1xuICAgICAgICAgICAgPFBvcG92ZXIgY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXIgY29sbGVjdGlvbi1wb3BvdmVyXCIgdGl0bGU9XCJhZGQgbmV3IGNvbGxlY3Rpb25cIiBpZD1cImFkZG5ld2NvbGxlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlQWRkQ29sbGVjdGlvbn0+XG4gICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5pZDwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnJyA6ICdpbnZhbGlkLWlucHV0J30gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG5cbiAgICAgICAgICAgICAgICA8cD5UYXNrcyBpbiB0aGlzIGNvbGxlY3Rpb246PC9wPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnRhc2tDaGVja2JveGVzfVxuXG4gICAgICAgICAgICAgICAgPHA+UmVxdWlyZW1lbnQgZm9yIHRoaXMgY29sbGVjdGlvbiAob3B0aW9uYWwpOjwvcD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtcmVxdWlyZW1lbnRcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWxlbWVudC1uYW1lXCI+UmVxdWlyZW1lbnQ8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjb21wb25lbnRDbGFzcz1cInNlbGVjdFwiIG5hbWU9XCJyZXF1aXJlbWVudHNcIiBwbGFjZWhvbGRlcj1cIlwiIGRlZmF1bHRWYWx1ZT1cIlwiIGNsYXNzTmFtZT1cImFjY2Vzc1NlbGVjdFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMucmVxdWlyZW1lbnRPcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmFkZDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXsoKSA9PiB7IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKTsgdGhpcy5hZGRDb2xsZWN0aW9uQnRuLmhpZGUoKTsgfX0+Y2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgIH0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMgYWRkLWNvbGxlY3Rpb24tYnRuXCIgdGl0bGU9XCJhZGQgbmV3IGNvbGxlY3Rpb25cIj48L3NwYW4+XG4gICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmNvbGxlY3Rpb25zVmlzaWJsZSA/ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAgdG9nZ2xlLXByb3BlcnR5LWJ0bicgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24gdG9nZ2xlLXByb3BlcnR5LWJ0bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5jb2xsZWN0aW9uc1Zpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxlY3Rpb25zVmlzaWJpbGl0eX0+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPXt0aGlzLmNvbGxlY3Rpb25zVmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gY29sbGVjdGlvbnMnIDogJ2ludmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIGNvbGxlY3Rpb25zJ30+XG4gICAgICAgICAge3N0b3JlLmNvbGxlY3Rpb25zLm1hcCgoYywgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxDb2xsZWN0aW9uIGNvbGxlY3Rpb249e2N9IGtleT17aX0gaW5kZXg9e2l9IC8+O1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L2xpPlxuICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgJ0xJQ0VOU0UnICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cCc7XG5pbXBvcnQgSW5wdXRHcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWwnO1xuaW1wb3J0IE92ZXJsYXlUcmlnZ2VyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvT3ZlcmxheVRyaWdnZXInO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Qb3BvdmVyJztcblxuaW1wb3J0IHN0b3JlLCB7IE1Db2xsZWN0aW9uIH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfTtcblxuICBAb2JzZXJ2YWJsZSBib2R5VmlzaWJsZSA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSBpbnB1dFZhbGlkID0gdHJ1ZTtcbiAgQG9ic2VydmFibGUgZGVsZXRlTW9kYWxWaXNpYmxlID0gZmFsc2U7XG5cbiAgQGFjdGlvbiB0b2dnbGVCb2R5VmlzaWJpbGl0eSA9ICgpID0+IHsgdGhpcy5ib2R5VmlzaWJsZSA9ICEodGhpcy5ib2R5VmlzaWJsZSk7IH1cbiAgQGFjdGlvbiBzZXRJbnB1dFZhbGlkaXR5ID0gKHZhbGlkKSA9PiB7IHRoaXMuaW5wdXRWYWxpZCA9IHZhbGlkOyB9XG4gIEBhY3Rpb24gb3BlbkRlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IHRydWU7IH1cbiAgQGFjdGlvbiBjbG9zZURlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IGZhbHNlOyB9XG5cbiAgZWRpdENvbGxlY3Rpb25CdG47XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGhpZGVFZGl0Q29sbGVjdGlvbkJ1dHRvbiA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKTtcbiAgICB0aGlzLmVkaXRDb2xsZWN0aW9uQnRuLmhpZGUoKTtcbiAgfVxuXG4gIGhhbmRsZUVkaXRDb2xsZWN0aW9uID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG90aGVyQ29sbGVjdGlvbnMgPSBzdG9yZS5jb2xsZWN0aW9ucy5maWx0ZXIoYyA9PiBjLmlkICE9PSB0aGlzLnByb3BzLmNvbGxlY3Rpb24uaWQpO1xuICAgIGlmIChvdGhlckNvbGxlY3Rpb25zLnNvbWUoYyA9PiBjLmlkID09PSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb2xsZWN0aW9uID0gbmV3IE1Db2xsZWN0aW9uO1xuICAgIGNvbGxlY3Rpb24uaWQgPSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlO1xuXG4gICAgc3RvcmUudGFza3MuZm9yRWFjaCgodCwgaW5kZXgpID0+IHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVtpbmRleCArIDFdLnZhbHVlOyBpKyspIHtcbiAgICAgICAgY29sbGVjdGlvbi50YXNrcy5wdXNoKHQuaWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bJ3JlcXVpcmVtZW50cyddLnZhbHVlICE9PSAnJykge1xuICAgICAgY29sbGVjdGlvbi5yZXF1aXJlbWVudHMucHVzaChlLnRhcmdldFswXS5mb3JtWydyZXF1aXJlbWVudHMnXS52YWx1ZSk7XG4gICAgfVxuXG4gICAgc3RvcmUuZWRpdENvbGxlY3Rpb24odGhpcy5wcm9wcy5pbmRleCwgY29sbGVjdGlvbik7XG4gICAgdGhpcy5lZGl0Q29sbGVjdGlvbkJ0bi5oaWRlKCk7XG4gIH1cblxuICBoYW5kbGVSZW1vdmVDb2xsZWN0aW9uID0gKCkgPT4ge1xuICAgIHN0b3JlLnJlbW92ZUNvbGxlY3Rpb24odGhpcy5wcm9wcy5pbmRleCk7XG4gICAgdGhpcy5jbG9zZURlbGV0ZU1vZGFsKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdmFyIFRhc2tDaGVja2JveGVzID0gW107XG4gICAgbGV0IHJlcXVpcmVtZW50T3B0aW9ucyA9IFtdO1xuICAgIGxldCBjdXJyZW50UmVxdWlyZW1lbnQgPSAnJztcbiAgICBsZXQgcmVxdWlyZW1lbnRDb250YWluZXJzID0gW107XG5cbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKCh0YXNrLCBpKSA9PiB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdGhpcy5wcm9wcy5jb2xsZWN0aW9uLnRhc2tzLmZvckVhY2goY3VycmVudFRhc2sgPT4ge1xuICAgICAgICBpZiAodGFzay5pZCA9PT0gY3VycmVudFRhc2spIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFRhc2tDaGVja2JveGVzLnB1c2goXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC10YXNrXCIga2V5PXsndC1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17dGFzay5pZH0+e3Rhc2suaWR9PC9kaXY+XG4gICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJhZGQtY2ctdGMtY291bnRlclwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgZGVmYXVsdFZhbHVlPXtjb3VudH0gLz5cbiAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgc3RvcmUucmVxdWlyZW1lbnRzLmZvckVhY2goKHJlcXVpcmVtZW50LCBpKSA9PiB7XG4gICAgICByZXF1aXJlbWVudE9wdGlvbnMucHVzaChcbiAgICAgICAgPG9wdGlvbiB2YWx1ZT17cmVxdWlyZW1lbnQuaWR9IGtleT17J29wdGlvbicgKyBpfT57cmVxdWlyZW1lbnQuaWR9PC9vcHRpb24+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGhpcy5wcm9wcy5jb2xsZWN0aW9uLnJlcXVpcmVtZW50cy5mb3JFYWNoKChyZXF1aXJlbWVudCwgaSkgPT4ge1xuICAgICAgbGV0IGVsID0gc3RvcmUucmVxdWlyZW1lbnRzLmZpbmQociA9PiByLmlkID09PSByZXF1aXJlbWVudCk7XG4gICAgICBpZiAoZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50UmVxdWlyZW1lbnQgPSByZXF1aXJlbWVudDtcbiAgICAgICAgcmVxdWlyZW1lbnRDb250YWluZXJzLnB1c2goXG4gICAgICAgICAgPGRpdiBrZXk9eydyZXF1aXJlbWVudCcgKyBpfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJlcXVpcmVtZW50LWNoaWxkXCI+XG4gICAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwcm9wLWFjY2Vzc1wiIHRpdGxlPXsoZWwudHlwZSA9PT0gJ2hvc3RuYW1lJykgPyAnaG9zdCBuYW1lJyA6ICcnfT57KGVsLnR5cGUgPT09ICdob3N0bmFtZScpID8gJ0hOICcgOiAnJ308L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInByb3AtYWNjZXNzXCIgdGl0bGU9eyhlbC50eXBlID09PSAnd25uYW1lJykgPyAnU1NIIHdvcmtlciBub2RlIG5hbWUnIDogJyd9PnsoZWwudHlwZSA9PT0gJ3dubmFtZScpID8gJ1dOICcgOiAnJ308L3NwYW4+XG4gICAgICAgICAgICAgIHtyZXF1aXJlbWVudH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbGxlY3Rpb25cIj5cbiAgICAgICAgPGg1PlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdGFza3NcIj48L3NwYW4+XG4gICAgICAgICAge3RoaXMucHJvcHMuY29sbGVjdGlvbi5pZH1cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuYm9keVZpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUJvZHlWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoXCIgdGl0bGU9XCJyZW1vdmVcIiBvbkNsaWNrPXt0aGlzLm9wZW5EZWxldGVNb2RhbH0+PC9zcGFuPlxuICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZX0gb25IaWRlPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PlxuICAgICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPkRlbGV0ZSA8c3Ryb25nPnt0aGlzLnByb3BzLmNvbGxlY3Rpb24uaWR9PC9zdHJvbmc+PzwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICA8cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBjb2xsZWN0aW9uIDxzdHJvbmc+e3RoaXMucHJvcHMuY29sbGVjdGlvbi5pZH0/PC9zdHJvbmc+PC9wPlxuICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwiZGFuZ2VyXCIgb25DbGljaz17dGhpcy5oYW5kbGVSZW1vdmVDb2xsZWN0aW9ufT5EZWxldGU8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PkNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPC9Nb2RhbD5cblxuICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHJlZj17KGVsKSA9PiB0aGlzLmVkaXRDb2xsZWN0aW9uQnRuID0gZWx9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gb3ZlcmxheT17XG4gICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciBjb2xsZWN0aW9uLXBvcG92ZXJcIiB0aXRsZT1cImVkaXQgY29sbGVjdGlvblwiIGlkPXt0aGlzLnByb3BzLmNvbGxlY3Rpb24uaWR9PlxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVFZGl0Q29sbGVjdGlvbn0+XG4gICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5pZDwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnJyA6ICdpbnZhbGlkLWlucHV0J30gZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmNvbGxlY3Rpb24uaWR9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuXG4gICAgICAgICAgICAgICAgPHA+VGFza3MgaW4gdGhpcyBjb2xsZWN0aW9uOjwvcD5cbiAgICAgICAgICAgICAgICB7VGFza0NoZWNrYm94ZXN9XG5cbiAgICAgICAgICAgICAgICA8cD5SZXF1aXJlbWVudCBmb3IgdGhpcyBjb2xsZWN0aW9uIChvcHRpb25hbCk6PC9wPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC1yZXF1aXJlbWVudFwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIj5SZXF1aXJlbWVudDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIGNvbXBvbmVudENsYXNzPVwic2VsZWN0XCIgbmFtZT1cInJlcXVpcmVtZW50c1wiIHBsYWNlaG9sZGVyPVwiXCIgZGVmYXVsdFZhbHVlPXtjdXJyZW50UmVxdWlyZW1lbnR9IGNsYXNzTmFtZT1cImFjY2Vzc1NlbGVjdFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAge3JlcXVpcmVtZW50T3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5lZGl0PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9e3RoaXMuaGlkZUVkaXRDb2xsZWN0aW9uQnV0dG9ufT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZWRpdFwiIHRpdGxlPVwiZWRpdFwiPjwvc3Bhbj5cbiAgICAgICAgICA8L092ZXJsYXlUcmlnZ2VyPlxuICAgICAgICA8L2g1PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5ib2R5VmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lcicgOiAnaW52aXNpYmxlLWNvbnRhaW5lcid9PlxuICAgICAgICAgIHt0aGlzLnByb3BzLmNvbGxlY3Rpb24udGFza3MubWFwKCh0YXNrLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPHNwYW4ga2V5PXtpfT57dGFza308L3NwYW4+O1xuICAgICAgICAgIH0pfVxuICAgICAgICAgIHtyZXF1aXJlbWVudENvbnRhaW5lcnN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlIFwiTElDRU5TRVwiICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuXG5pbXBvcnQgR3JvdXAgZnJvbSAnLi9Hcm91cCc7XG5cbmltcG9ydCBzdG9yZSwgeyBNR3JvdXAgfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cExpc3QgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRhc2tDaGVja2JveGVzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uQ2hlY2tib3hlczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgQG9ic2VydmFibGUgaW5wdXRWYWxpZCA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSBncm91cHNWaXNpYmxlID0gdHJ1ZTtcblxuICBAYWN0aW9uIHNldElucHV0VmFsaWRpdHkgPSAodmFsaWQpID0+IHsgdGhpcy5pbnB1dFZhbGlkID0gdmFsaWQ7IH1cbiAgQGFjdGlvbiB0b2dnbGVHcm91cHNWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLmdyb3Vwc1Zpc2libGUgPSAhdGhpcy5ncm91cHNWaXNpYmxlOyB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGFkZEdyb3VwQnRuO1xuXG4gIGhhbmRsZUFkZEdyb3VwID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgLy8gY2FuY2VsIGlmIElEIGlzIGVtcHR5LCBvciBpZiBJRCBhbHJlYWR5IGV4aXN0c1xuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJyB8fCBzdG9yZS5oYXNNYWluR3JvdXAoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSkpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZ3JvdXAgPSBuZXcgTUdyb3VwO1xuICAgIGdyb3VwLmlkID0gZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZTtcbiAgICBncm91cC5uID0gZS50YXJnZXRbMF0uZm9ybVsxXS52YWx1ZTtcblxuICAgIGxldCB0YXNrc0luZGV4ID0gMDtcbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKCh0LCBqKSA9PiB7XG4gICAgICB0YXNrc0luZGV4Kys7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudGFyZ2V0WzBdLmZvcm1baiArIDJdLnZhbHVlOyBpKyspIHtcbiAgICAgICAgZ3JvdXAudGFza3MucHVzaCh0LmlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdG9yZS5jb2xsZWN0aW9ucy5mb3JFYWNoKChjLCBqKSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudGFyZ2V0WzBdLmZvcm1bdGFza3NJbmRleCArIGogKyAyXS52YWx1ZTsgaSsrKSB7XG4gICAgICAgIGdyb3VwLmNvbGxlY3Rpb25zLnB1c2goYy5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdG9yZS5hZGRNYWluR3JvdXAoZ3JvdXApO1xuICAgIHRoaXMuYWRkR3JvdXBCdG4uaGlkZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RnJhZ21lbnQ+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW0gZ3JvdXBzLWhlYWRlclwiPlxuICAgICAgICAgIGdyb3Vwc1xuICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHJlZj17KGVsKSA9PiB0aGlzLmFkZEdyb3VwQnRuID0gZWx9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gb3ZlcmxheT17XG4gICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciBncm91cC1wb3BvdmVyXCIgdGl0bGU9XCJhZGQgbmV3IGdyb3VwXCIgaWQ9XCJhZGRuZXdncm91cFwiPlxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVBZGRHcm91cH0+XG4gICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5pZDwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnJyA6ICdpbnZhbGlkLWlucHV0J30gLz5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPm48L0lucHV0R3JvdXAuQWRkb24+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPVwiYWRkLWNnLXRjLWNvdW50ZXJcIiB0eXBlPVwidGV4dFwiIGRlZmF1bHRWYWx1ZT1cIjFcIiAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICA8cD5UYXNrcyBpbiB0aGlzIGdyb3VwOjwvcD5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50YXNrQ2hlY2tib3hlc31cbiAgICAgICAgICAgICAgICA8cD5Db2xsZWN0aW9ucyBpbiB0aGlzIGdyb3VwOjwvcD5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb2xsZWN0aW9uQ2hlY2tib3hlc31cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmFkZDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXsoKSA9PiB7IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKTsgdGhpcy5hZGRHcm91cEJ0bi5oaWRlKCk7IH19PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICB9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzIGFkZC1ncm91cC1idG5cIiB0aXRsZT1cImFkZCBuZXcgZ3JvdXBcIj48L3NwYW4+XG4gICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmdyb3Vwc1Zpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIHRvZ2dsZS1wcm9wZXJ0eS1idG4nIDogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duIHRvZ2dsZS1wcm9wZXJ0eS1idG4nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuZ3JvdXBzVmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlR3JvdXBzVmlzaWJpbGl0eX0+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPXt0aGlzLmdyb3Vwc1Zpc2libGUgPyAndmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIGdyb3VwcycgOiAnaW52aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gZ3JvdXBzJ30+XG4gICAgICAgICAge3N0b3JlLm1haW4uZ3JvdXBzLm1hcCgoZywgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxHcm91cCBncm91cD17Z30ga2V5PXtpfSBpbmRleD17aX0gLz47XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvbGk+XG4gICAgICA8L0ZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSAnTElDRU5TRScgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbic7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuXG5pbXBvcnQgc3RvcmUsIHsgTUdyb3VwIH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JvdXAgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGdyb3VwOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9O1xuXG4gIEBvYnNlcnZhYmxlIGJvZHlWaXNpYmxlID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIGlucHV0VmFsaWQgPSB0cnVlO1xuICBAb2JzZXJ2YWJsZSBkZWxldGVNb2RhbFZpc2libGUgPSBmYWxzZTtcblxuICBAYWN0aW9uIHRvZ2dsZUJvZHlWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLmJvZHlWaXNpYmxlID0gISh0aGlzLmJvZHlWaXNpYmxlKTsgfVxuICBAYWN0aW9uIHNldElucHV0VmFsaWRpdHkgPSAodmFsaWQpID0+IHsgdGhpcy5pbnB1dFZhbGlkID0gdmFsaWQ7IH1cbiAgQGFjdGlvbiBvcGVuRGVsZXRlTW9kYWwgPSAoKSA9PiB7IHRoaXMuZGVsZXRlTW9kYWxWaXNpYmxlID0gdHJ1ZTsgfVxuICBAYWN0aW9uIGNsb3NlRGVsZXRlTW9kYWwgPSAoKSA9PiB7IHRoaXMuZGVsZXRlTW9kYWxWaXNpYmxlID0gZmFsc2U7IH1cblxuICBlZGl0R3JvdXBCdG47XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGhpZGVFZGl0R3JvdXBCdXR0b24gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSk7XG4gICAgdGhpcy5lZGl0R3JvdXBCdG4uaGlkZSgpO1xuICB9XG5cbiAgaGFuZGxlRWRpdEdyb3VwID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG90aGVyR3JvdXBzID0gc3RvcmUubWFpbi5ncm91cHMuZmlsdGVyKGcgPT4gZy5pZCAhPT0gdGhpcy5wcm9wcy5ncm91cC5pZCk7XG4gICAgaWYgKG90aGVyR3JvdXBzLnNvbWUoZyA9PiBnLmlkID09PSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBncm91cCA9IG5ldyBNR3JvdXA7XG4gICAgZ3JvdXAuaWQgPSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlO1xuICAgIGdyb3VwLm4gPSBlLnRhcmdldFswXS5mb3JtWzFdLnZhbHVlO1xuXG4gICAgdmFyIHRhc2tzSW5kZXggPSAwO1xuICAgIHN0b3JlLnRhc2tzLmZvckVhY2goKHQsIGluZGV4KSA9PiB7XG4gICAgICB0YXNrc0luZGV4Kys7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUudGFyZ2V0WzBdLmZvcm1baW5kZXggKyAyXS52YWx1ZTsgaSsrKSB7XG4gICAgICAgIGdyb3VwLnRhc2tzLnB1c2godC5pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3RvcmUuY29sbGVjdGlvbnMuZm9yRWFjaCgoYywgaW5kZXgpID0+IHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVt0YXNrc0luZGV4ICsgaW5kZXggKyAyXS52YWx1ZTsgaSsrKSB7XG4gICAgICAgIGdyb3VwLmNvbGxlY3Rpb25zLnB1c2goYy5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdG9yZS5lZGl0TWFpbkdyb3VwKHRoaXMucHJvcHMuaW5kZXgsIGdyb3VwKTtcbiAgICB0aGlzLmVkaXRHcm91cEJ0bi5oaWRlKCk7XG5cbiAgfVxuXG4gIGhhbmRsZVJlbW92ZUdyb3VwID0gKCkgPT4ge1xuICAgIHN0b3JlLnJlbW92ZU1haW5Hcm91cCh0aGlzLnByb3BzLmluZGV4KTtcbiAgICB0aGlzLmNsb3NlRGVsZXRlTW9kYWwoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB2YXIgVGFza0NoZWNrYm94ZXMgPSBbXTtcbiAgICB2YXIgQ29sbGVjdGlvbkNoZWNrYm94ZXMgPSBbXTtcblxuICAgIHN0b3JlLnRhc2tzLmZvckVhY2goKHRhc2ssIGkpID0+IHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICB0aGlzLnByb3BzLmdyb3VwLnRhc2tzLmZvckVhY2goY3VycmVudFRhc2sgPT4ge1xuICAgICAgICBpZiAodGFzay5pZCA9PT0gY3VycmVudFRhc2spIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFRhc2tDaGVja2JveGVzLnB1c2goXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC10YXNrXCIga2V5PXsndC1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17dGFzay5pZH0+e3Rhc2suaWR9PC9kaXY+XG4gICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJhZGQtY2ctdGMtY291bnRlclwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgZGVmYXVsdFZhbHVlPXtjb3VudH0gLz5cbiAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgc3RvcmUuY29sbGVjdGlvbnMuZm9yRWFjaCgoY29sbGVjdGlvbiwgaSkgPT4ge1xuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIHRoaXMucHJvcHMuZ3JvdXAuY29sbGVjdGlvbnMuZm9yRWFjaChjdXJyZW50Q29sbGVjdGlvbiA9PiB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uLmlkID09PSBjdXJyZW50Q29sbGVjdGlvbikge1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgQ29sbGVjdGlvbkNoZWNrYm94ZXMucHVzaChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LWNvbGxlY3Rpb25cIiBrZXk9eydjLWJveCcgKyBpfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiIHRpdGxlPXtjb2xsZWN0aW9uLmlkfT57Y29sbGVjdGlvbi5pZH08L2Rpdj5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT1cImFkZC1jZy10Yy1jb3VudGVyXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBkZWZhdWx0VmFsdWU9e2NvdW50fSAvPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cFwiPlxuICAgICAgICA8aDU+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10YXNrc1wiPjwvc3Bhbj5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5ncm91cC5pZH1cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuYm9keVZpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUJvZHlWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoXCIgdGl0bGU9XCJyZW1vdmVcIiBvbkNsaWNrPXt0aGlzLm9wZW5EZWxldGVNb2RhbH0+PC9zcGFuPlxuICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZX0gb25IaWRlPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PlxuICAgICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPkRlbGV0ZSA8c3Ryb25nPnt0aGlzLnByb3BzLmdyb3VwLmlkfTwvc3Ryb25nPj88L01vZGFsLlRpdGxlPlxuICAgICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgICAgICA8TW9kYWwuQm9keT5cbiAgICAgICAgICAgICAgPHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGUgZ3JvdXAgPHN0cm9uZz57dGhpcy5wcm9wcy5ncm91cC5pZH0/PC9zdHJvbmc+PC9wPlxuICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwiZGFuZ2VyXCIgb25DbGljaz17dGhpcy5oYW5kbGVSZW1vdmVHcm91cH0+RGVsZXRlPC9CdXR0b24+XG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5jbG9zZURlbGV0ZU1vZGFsfT5DYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDwvTW9kYWw+XG5cbiAgICAgICAgICA8T3ZlcmxheVRyaWdnZXIgdHJpZ2dlcj1cImNsaWNrXCIgcGxhY2VtZW50PVwicmlnaHRcIiByZWY9eyhlbCkgPT4gdGhpcy5lZGl0R3JvdXBCdG4gPSBlbH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBvdmVybGF5PXtcbiAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIGdyb3VwLXBvcG92ZXJcIiB0aXRsZT1cImVkaXQgZ3JvdXBcIiBpZD17dGhpcy5wcm9wcy5ncm91cC5pZH0+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUVkaXRHcm91cH0+XG4gICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5pZDwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnJyA6ICdpbnZhbGlkLWlucHV0J30gZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmdyb3VwLmlkfSAvPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAuQWRkb24+bjwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJhZGQtY2ctdGMtY291bnRlclwiIHR5cGU9XCJ0ZXh0XCIgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmdyb3VwLm59IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDxwPlRhc2tzIGluIHRoaXMgZ3JvdXA6PC9wPlxuICAgICAgICAgICAgICAgIHtUYXNrQ2hlY2tib3hlc31cbiAgICAgICAgICAgICAgICA8cD5Db2xsZWN0aW9ucyBpbiB0aGlzIGdyb3VwOjwvcD5cbiAgICAgICAgICAgICAgICB7Q29sbGVjdGlvbkNoZWNrYm94ZXN9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5lZGl0PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9e3RoaXMuaGlkZUVkaXRHcm91cEJ1dHRvbn0+Y2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgIH0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWVkaXRcIiB0aXRsZT1cImVkaXRcIj48L3NwYW4+XG4gICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgPC9oNT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3RoaXMuYm9keVZpc2libGUgPyAndmlzaWJsZS1jb250YWluZXInIDogJ2ludmlzaWJsZS1jb250YWluZXInfT5cbiAgICAgICAgICA8ZGl2PjxzdHJvbmc+IG46IDwvc3Ryb25nPjxzcGFuIGNsYXNzTmFtZT1cInBsYWluXCI+e3RoaXMucHJvcHMuZ3JvdXAubn08L3NwYW4+PC9kaXY+XG4gICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC10YXNrc1wiPlxuICAgICAgICAgICAge3RoaXMucHJvcHMuZ3JvdXAudGFza3MubWFwKCh0YXNrLCBpKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiA8c3BhbiBrZXk9e2l9Pnt0YXNrfTwvc3Bhbj47XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLWNvbGxlY3Rpb25zXCI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5ncm91cC5jb2xsZWN0aW9ucy5tYXAoKGNvbGxlY3Rpb24sIGkpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGtleT17aX0+e2NvbGxlY3Rpb259PC9zcGFuPjtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSBcIkxJQ0VOU0VcIiAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi9Qcm9wZXJ0eSc7XG5cbmltcG9ydCBzdG9yZSwgeyBNUHJvcGVydHkgfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9wZXJ0eUxpc3QgZXh0ZW5kcyBDb21wb25lbnQge1xuICBAb2JzZXJ2YWJsZSBpbnB1dFZhbGlkID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIHByb3BlcnRpZXNWaXNpYmxlID0gdHJ1ZTtcblxuICBAYWN0aW9uIHNldElucHV0VmFsaWRpdHkgPSAodmFsaWQpID0+IHsgdGhpcy5pbnB1dFZhbGlkID0gdmFsaWQ7IH1cbiAgQGFjdGlvbiB0b2dnbGVQcm9wZXJ0aWVzVmlzaWJpbGl0eSA9ICgpID0+IHsgdGhpcy5wcm9wZXJ0aWVzVmlzaWJsZSA9ICF0aGlzLnByb3BlcnRpZXNWaXNpYmxlOyB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGFkZFByb3BlcnR5QnRuO1xuXG4gIGhhbmRsZUFkZFByb3BlcnR5ID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSA9PT0gJycgfHwgc3RvcmUuaGFzUHJvcGVydHkoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSkpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcGVydHkgPSBuZXcgTVByb3BlcnR5O1xuICAgIHByb3BlcnR5LmlkID0gZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZTtcblxuICAgIHN0b3JlLmFkZFByb3BlcnR5KHByb3BlcnR5KTtcbiAgICB0aGlzLmFkZFByb3BlcnR5QnRuLmhpZGUoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZyYWdtZW50PlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtIHByb3BlcnRpZXMtaGVhZGVyXCI+XG4gICAgICAgICAgcHJvcGVydGllc1xuICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHJlZj17KGVsKSA9PiB0aGlzLmFkZFByb3BlcnR5QnRuID0gZWx9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gb3ZlcmxheT17XG4gICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciBwcm9wZXJ0eS1wb3BvdmVyXCIgdGl0bGU9XCJhZGQgbmV3IHByb3BlcnR5XCIgaWQ9XCJhZGRuZXdwcm9wZXJ0eVwiPlxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVBZGRQcm9wZXJ0eX0+XG4gICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5pZCZuYnNwOzwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cyBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJycgOiAnaW52YWxpZC1pbnB1dCd9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMlwiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIHR5cGU9XCJzdWJtaXRcIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJwcmltYXJ5XCI+YWRkPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9eygpID0+IHsgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpOyB0aGlzLmFkZFByb3BlcnR5QnRuLmhpZGUoKTsgfX0+Y2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgIH0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMgYWRkLXByb3BlcnR5LWJ0blwiIHRpdGxlPVwiYWRkIG5ldyBwcm9wZXJ0eVwiPjwvc3Bhbj5cbiAgICAgICAgICA8L092ZXJsYXlUcmlnZ2VyPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcGVydGllc1Zpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIHRvZ2dsZS1wcm9wZXJ0eS1idG4nIDogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duIHRvZ2dsZS1wcm9wZXJ0eS1idG4nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMucHJvcGVydGllc1Zpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZVByb3BlcnRpZXNWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9e3RoaXMucHJvcGVydGllc1Zpc2libGUgPyAndmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIHByb3BlcnRpZXMnIDogJ2ludmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIHByb3BlcnRpZXMnfT5cbiAgICAgICAgICB7c3RvcmUucHJvcGVydGllcy5tYXAoKHAsIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8UHJvcGVydHkgcHJvcGVydHk9e3B9IGtleT17aX0gaW5kZXg9e2l9IC8+O1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L2xpPlxuICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgJ0xJQ0VOU0UnICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IE1vZGFsIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWwnO1xuXG5pbXBvcnQgc3RvcmUsIHsgTVByb3BlcnR5IH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvcGVydHkgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHByb3BlcnR5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9O1xuXG4gIEBvYnNlcnZhYmxlIGJvZHlWaXNpYmxlID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIGVkaXRpbmcgPSBmYWxzZTtcbiAgQG9ic2VydmFibGUgZGVsZXRlTW9kYWxWaXNpYmxlID0gZmFsc2U7XG5cbiAgQGFjdGlvbiB0b2dnbGVCb2R5VmlzaWJpbGl0eSA9ICgpID0+IHsgdGhpcy5ib2R5VmlzaWJsZSA9ICEodGhpcy5ib2R5VmlzaWJsZSk7IH1cbiAgQGFjdGlvbiB0b2dnbGVFZGl0aW5nID0gKCkgPT4geyBpZiAoIXRoaXMuZWRpdGluZykgeyB0aGlzLmVkaXRpbmcgPSB0cnVlOyB0aGlzLmJvZHlWaXNpYmxlID0gdHJ1ZTsgfSBlbHNlIHsgdGhpcy5lZGl0aW5nID0gZmFsc2U7IH0gfVxuICBAYWN0aW9uIG9wZW5EZWxldGVNb2RhbCA9ICgpID0+IHsgdGhpcy5kZWxldGVNb2RhbFZpc2libGUgPSB0cnVlOyB9XG4gIEBhY3Rpb24gY2xvc2VEZWxldGVNb2RhbCA9ICgpID0+IHsgdGhpcy5kZWxldGVNb2RhbFZpc2libGUgPSBmYWxzZTsgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSA9ICgpID0+IHRydWVcblxuICBoYW5kbGVFZGl0UHJvcGVydHkgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJyB8fCBzdG9yZS5oYXNQcm9wZXJ0eShlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlKSkge1xuICAgICAgdGhpcy50b2dnbGVFZGl0aW5nKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcGVydHkgPSBuZXcgTVByb3BlcnR5O1xuICAgIHByb3BlcnR5LmlkID0gZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZTtcblxuICAgIHN0b3JlLmVkaXRQcm9wZXJ0eSh0aGlzLnByb3BzLmluZGV4LCBwcm9wZXJ0eSk7XG4gICAgdGhpcy50b2dnbGVFZGl0aW5nKCk7XG4gIH1cblxuICBoYW5kbGVSZW1vdmVQcm9wZXJ0eSA9ICgpID0+IHtcbiAgICBzdG9yZS5yZW1vdmVQcm9wZXJ0eSh0aGlzLnByb3BzLmluZGV4KTtcbiAgICB0aGlzLmNsb3NlRGVsZXRlTW9kYWwoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9wZXJ0eVwiPlxuICAgICAgICA8aDU+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10YXNrc1wiPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlbGVtZW50LXRpdGxlXCIgdGl0bGU9e3RoaXMucHJvcHMucHJvcGVydHkuaWR9Pnt0aGlzLnByb3BzLnByb3BlcnR5LmlkfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuYm9keVZpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUJvZHlWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoXCIgdGl0bGU9XCJkZWxldGVcIiBvbkNsaWNrPXt0aGlzLm9wZW5EZWxldGVNb2RhbH0+PC9zcGFuPlxuICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZX0gb25IaWRlPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PlxuICAgICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPkRlbGV0ZSA8c3Ryb25nPnt0aGlzLnByb3BzLnByb3BlcnR5LmlkfTwvc3Ryb25nPj88L01vZGFsLlRpdGxlPlxuICAgICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgICAgICA8TW9kYWwuQm9keT5cbiAgICAgICAgICAgICAgPHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGUgcHJvcGVydHkgPHN0cm9uZz57dGhpcy5wcm9wcy5wcm9wZXJ0eS5pZH0/PC9zdHJvbmc+PC9wPlxuICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwiZGFuZ2VyXCIgb25DbGljaz17dGhpcy5oYW5kbGVSZW1vdmVQcm9wZXJ0eX0+RGVsZXRlPC9CdXR0b24+XG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5jbG9zZURlbGV0ZU1vZGFsfT5DYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDwvTW9kYWw+XG5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWVkaXRcIiB0aXRsZT1cImVkaXRcIiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUVkaXRpbmd9Pjwvc3Bhbj5cbiAgICAgICAgPC9oNT5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT17dGhpcy5ib2R5VmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lcicgOiAnaW52aXNpYmxlLWNvbnRhaW5lcid9PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7dGhpcy5lZGl0aW5nID9cbiAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlRWRpdFByb3BlcnR5fT5cbiAgICAgICAgICAgICAgICA8c3Ryb25nPmlkOiA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiBhdXRvRm9jdXMgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLnByb3BlcnR5LmlkfT48L2lucHV0PlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi14cyBidG4tcHJpbWFyeVwiIHR5cGU9XCJzdWJtaXRcIj5vazwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9e3RoaXMucHJvcHMucHJvcGVydHkuaWR9PjxzdHJvbmc+aWQ6PC9zdHJvbmc+IHt0aGlzLnByb3BzLnByb3BlcnR5LmlkfTwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSBcIkxJQ0VOU0VcIiAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBDb250cm9sTGFiZWwgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Db250cm9sTGFiZWwnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cCc7XG5pbXBvcnQgSW5wdXRHcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAnO1xuaW1wb3J0IE92ZXJsYXlUcmlnZ2VyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvT3ZlcmxheVRyaWdnZXInO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Qb3BvdmVyJztcbmltcG9ydCBSYWRpbyBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1JhZGlvJztcblxuaW1wb3J0IFJlcXVpcmVtZW50IGZyb20gJy4vUmVxdWlyZW1lbnQnO1xuXG5pbXBvcnQgc3RvcmUsIHsgTVJlcXVpcmVtZW50IH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWlyZW1lbnRMaXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgQG9ic2VydmFibGUgaW5wdXRWYWxpZCA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSByZXF1aXJlbWVudHNWaXNpYmxlID0gdHJ1ZTtcblxuICBAYWN0aW9uIHNldElucHV0VmFsaWRpdHkgPSAodmFsaWQpID0+IHsgdGhpcy5pbnB1dFZhbGlkID0gdmFsaWQ7IH1cbiAgQGFjdGlvbiB0b2dnbGVSZXF1aXJlbWVudHNWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLnJlcXVpcmVtZW50c1Zpc2libGUgPSAhdGhpcy5yZXF1aXJlbWVudHNWaXNpYmxlOyB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGFkZFJlcXVpcmVtZW50QnRuO1xuXG4gIGhhbmRsZUFkZFJlcXVpcmVtZW50ID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBjYW5jZWwgaWYgSUQgb3IgdmFsdWUgaXMgZW1wdHksIG9yIGlmIElEIGFscmVhZHkgZXhpc3RzXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUgPT09ICcnIHx8IGUudGFyZ2V0WzBdLmZvcm1bM10udmFsdWUgPT09ICcnIHx8IHN0b3JlLmhhc1JlcXVpcmVtZW50KGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVpcmVtZW50ID0gbmV3IE1SZXF1aXJlbWVudDtcbiAgICByZXF1aXJlbWVudC5pZCA9IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWU7XG4gICAgcmVxdWlyZW1lbnQudmFsdWUgPSBlLnRhcmdldFswXS5mb3JtWzNdLnZhbHVlO1xuICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0WzBdLmZvcm1bM10udmFsdWUpO1xuXG4gICAgLy8gc2V0IHRoZSB0eXBlIGFjY29yZGluZyB0byB0aGUgcmFkaW8gYnV0dG9uIHZhbHVlXG4gICAgZS50YXJnZXRbMF0uZm9ybVsxXS5jaGVja2VkID8gcmVxdWlyZW1lbnQudHlwZSA9ICdob3N0bmFtZScgOiByZXF1aXJlbWVudC50eXBlID0gJ3dubmFtZSc7XG5cbiAgICBzdG9yZS5hZGRSZXF1aXJlbWVudChyZXF1aXJlbWVudCk7XG4gICAgdGhpcy5hZGRSZXF1aXJlbWVudEJ0bi5oaWRlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbSByZXF1aXJlbWVudHMtaGVhZGVyXCI+XG4gICAgICAgICAgcmVxdWlyZW1lbnRzXG4gICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgcmVmPXsoZWwpID0+IHRoaXMuYWRkUmVxdWlyZW1lbnRCdG4gPSBlbH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBvdmVybGF5PXtcbiAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIHJlcXVpcmVtZW50LXBvcG92ZXJcIiB0aXRsZT1cImFkZCBuZXcgcmVxdWlyZW1lbnRcIiBpZD1cImFkZG5ld3JlcXVpcmVtZW50XCI+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUFkZFJlcXVpcmVtZW50fT5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbCBjbGFzc05hbWU9XCJwYXR0ZXJuLWxhYmVsXCI+UGF0dGVybiBUeXBlPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8UmFkaW8gbmFtZT1cInBhdHRlcm5UeXBlXCIgaW5saW5lIGRlZmF1bHRDaGVja2VkIHRpdGxlPVwiaG9zdCBuYW1lXCI+aG9zdG5hbWU8L1JhZGlvPlxuICAgICAgICAgICAgICAgICAgPFJhZGlvIG5hbWU9XCJwYXR0ZXJuVHlwZVwiIGlubGluZSB0aXRsZT1cIlNTSCB3b3JrZXIgbm9kZSBuYW1lXCI+d25uYW1lPC9SYWRpbz5cbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPnBhdHRlcm48L0lucHV0R3JvdXAuQWRkb24+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgdHlwZT1cInRleHRcIiBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJycgOiAnbW9ubyBpbnZhbGlkLWlucHV0J30gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5hZGQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4geyB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSk7IHRoaXMuYWRkUmVxdWlyZW1lbnRCdG4uaGlkZSgpOyB9fT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tcGx1cyBhZGQtcmVxdWlyZW1lbnQtYnRuXCIgdGl0bGU9XCJhZGQgbmV3IHJlcXVpcmVtZW50XCI+PC9zcGFuPlxuICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5yZXF1aXJlbWVudHNWaXNpYmxlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCB0b2dnbGUtcHJvcGVydHktYnRuJyA6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93biB0b2dnbGUtcHJvcGVydHktYnRuJ31cbiAgICAgICAgICAgIHRpdGxlPXt0aGlzLnJlcXVpcmVtZW50c1Zpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZVJlcXVpcmVtZW50c1Zpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT17dGhpcy5yZXF1aXJlbWVudHNWaXNpYmxlID8gJ3Zpc2libGUtY29udGFpbmVyIGxpc3QtZ3JvdXAtaXRlbSByZXF1aXJlbWVudHMnIDogJ2ludmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIHJlcXVpcmVtZW50cyd9PlxuICAgICAgICAgIHtzdG9yZS5yZXF1aXJlbWVudHMubWFwKChyLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPFJlcXVpcmVtZW50IHJlcXVpcmVtZW50PXtyfSBrZXk9e2l9IGluZGV4PXtpfSAvPjtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9saT5cbiAgICAgIDwvRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlICdMSUNFTlNFJyAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBDb250cm9sTGFiZWwgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Db250cm9sTGFiZWwnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cCc7XG5pbXBvcnQgSW5wdXRHcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWwnO1xuaW1wb3J0IE92ZXJsYXlUcmlnZ2VyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvT3ZlcmxheVRyaWdnZXInO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Qb3BvdmVyJztcbmltcG9ydCBSYWRpbyBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1JhZGlvJztcblxuaW1wb3J0IHN0b3JlLCB7IE1SZXF1aXJlbWVudCB9IGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcXVpcmVtZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICByZXF1aXJlbWVudDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfTtcblxuICBAb2JzZXJ2YWJsZSBib2R5VmlzaWJsZSA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSBpbnB1dFZhbGlkID0gdHJ1ZTtcbiAgQG9ic2VydmFibGUgZGVsZXRlTW9kYWxWaXNpYmxlID0gZmFsc2U7XG5cbiAgQGFjdGlvbiB0b2dnbGVCb2R5VmlzaWJpbGl0eSA9ICgpID0+IHsgdGhpcy5ib2R5VmlzaWJsZSA9ICEodGhpcy5ib2R5VmlzaWJsZSk7IH1cbiAgQGFjdGlvbiBzZXRJbnB1dFZhbGlkaXR5ID0gKHZhbGlkKSA9PiB7IHRoaXMuaW5wdXRWYWxpZCA9IHZhbGlkOyB9XG4gIEBhY3Rpb24gb3BlbkRlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IHRydWU7IH1cbiAgQGFjdGlvbiBjbG9zZURlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IGZhbHNlOyB9XG5cbiAgZWRpdFJlcXVpcmVtZW50QnRuO1xuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSA9ICgpID0+IHRydWVcblxuICBoaWRlRWRpdFJlcXVpcmVtZW50QnV0dG9uID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpO1xuICAgIHRoaXMuZWRpdFJlcXVpcmVtZW50QnRuLmhpZGUoKTtcbiAgfVxuXG4gIGhhbmRsZUVkaXRSZXF1aXJlbWVudCA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gY2FuY2VsIGlmIElEIG9yIHZhbHVlIGlzIGVtcHR5XG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUgPT09ICcnIHx8IGUudGFyZ2V0WzBdLmZvcm1bM10udmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGNhbmNlbCBpZiBJRCBhbHJlYWR5IGV4aXN0cyAoZXhjZXB0IGl0cyBvd24gSUQpXG4gICAgY29uc3Qgb3RoZXJSZXF1aXJlbWVudHMgPSBzdG9yZS5yZXF1aXJlbWVudHMuZmlsdGVyKHIgPT4gci5pZCAhPT0gdGhpcy5wcm9wcy5yZXF1aXJlbWVudC5pZCk7XG4gICAgaWYgKG90aGVyUmVxdWlyZW1lbnRzLnNvbWUociA9PiByLmlkID09PSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1aXJlbWVudCA9IG5ldyBNUmVxdWlyZW1lbnQ7XG4gICAgcmVxdWlyZW1lbnQuaWQgPSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlO1xuICAgIHJlcXVpcmVtZW50LnZhbHVlID0gZS50YXJnZXRbMF0uZm9ybVszXS52YWx1ZTtcblxuICAgIC8vIHNldCB0aGUgdHlwZSBhY2NvcmRpbmcgdG8gdGhlIHJhZGlvIGJ1dHRvbiB2YWx1ZVxuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzFdLmNoZWNrZWQpIHtcbiAgICAgIHJlcXVpcmVtZW50LnR5cGUgPSAnaG9zdG5hbWUnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1aXJlbWVudC50eXBlID0gJ3dubmFtZSc7XG4gICAgfVxuXG4gICAgc3RvcmUuZWRpdFJlcXVpcmVtZW50KHRoaXMucHJvcHMuaW5kZXgsIHJlcXVpcmVtZW50KTtcbiAgICB0aGlzLmVkaXRSZXF1aXJlbWVudEJ0bi5oaWRlKCk7XG4gIH1cblxuICBoYW5kbGVSZW1vdmVSZXF1aXJlbWVudCA9ICgpID0+IHtcbiAgICBzdG9yZS5yZW1vdmVSZXF1aXJlbWVudCh0aGlzLnByb3BzLmluZGV4KTtcbiAgICB0aGlzLmNsb3NlRGVsZXRlTW9kYWwoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXF1aXJlbWVudFwiPlxuICAgICAgICA8aDU+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10YXNrc1wiPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlbGVtZW50LXRpdGxlXCIgdGl0bGU9e3RoaXMucHJvcHMucmVxdWlyZW1lbnQuaWR9Pnt0aGlzLnByb3BzLnJlcXVpcmVtZW50LmlkfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuYm9keVZpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUJvZHlWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoXCIgdGl0bGU9XCJkZWxldGVcIiBvbkNsaWNrPXt0aGlzLm9wZW5EZWxldGVNb2RhbH0+PC9zcGFuPlxuICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZX0gb25IaWRlPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PlxuICAgICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPkRlbGV0ZSA8c3Ryb25nPnt0aGlzLnByb3BzLnJlcXVpcmVtZW50LmlkfTwvc3Ryb25nPj88L01vZGFsLlRpdGxlPlxuICAgICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgICAgICA8TW9kYWwuQm9keT5cbiAgICAgICAgICAgICAgPHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGUgcmVxdWlyZW1lbnQgPHN0cm9uZz57dGhpcy5wcm9wcy5yZXF1aXJlbWVudC5pZH0/PC9zdHJvbmc+PC9wPlxuICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwiZGFuZ2VyXCIgb25DbGljaz17dGhpcy5oYW5kbGVSZW1vdmVSZXF1aXJlbWVudH0+RGVsZXRlPC9CdXR0b24+XG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5jbG9zZURlbGV0ZU1vZGFsfT5DYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDwvTW9kYWw+XG5cbiAgICAgICAgICA8T3ZlcmxheVRyaWdnZXIgdHJpZ2dlcj1cImNsaWNrXCIgcGxhY2VtZW50PVwicmlnaHRcIiByZWY9eyhlbCkgPT4gdGhpcy5lZGl0UmVxdWlyZW1lbnRCdG4gPSBlbH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBvdmVybGF5PXtcbiAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIHJlcXVpcmVtZW50LXBvcG92ZXJcIiB0aXRsZT1cImVkaXQgcmVxdWlyZW1lbnRcIiBpZD17dGhpcy5wcm9wcy5yZXF1aXJlbWVudC5pZH0+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUVkaXRSZXF1aXJlbWVudH0+XG4gICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5pZDwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLnJlcXVpcmVtZW50LmlkfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbCBjbGFzc05hbWU9XCJwYXR0ZXJuLWxhYmVsXCI+UGF0dGVybiBUeXBlPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8UmFkaW8gbmFtZT1cInBhdHRlcm5UeXBlXCIgaW5saW5lIGRlZmF1bHRDaGVja2VkPXt0aGlzLnByb3BzLnJlcXVpcmVtZW50LnR5cGUgPT09ICdob3N0bmFtZScgPyB0cnVlIDogZmFsc2V9IHRpdGxlPVwiaG9zdCBuYW1lXCI+aG9zdG5hbWU8L1JhZGlvPlxuICAgICAgICAgICAgICAgICAgPFJhZGlvIG5hbWU9XCJwYXR0ZXJuVHlwZVwiIGlubGluZSBkZWZhdWx0Q2hlY2tlZD17dGhpcy5wcm9wcy5yZXF1aXJlbWVudC50eXBlID09PSAnd25uYW1lJyA/IHRydWUgOiBmYWxzZX0gdGl0bGU9XCJTU0ggd29ya2VyIG5vZGUgbmFtZVwiPndubmFtZTwvUmFkaW8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5wYXR0ZXJuPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMucmVxdWlyZW1lbnQudmFsdWV9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJ21vbm8nIDogJ21vbm8gaW52YWxpZC1pbnB1dCd9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMlwiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIHR5cGU9XCJzdWJtaXRcIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJwcmltYXJ5XCI+c2F2ZTwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXt0aGlzLmhpZGVFZGl0UmVxdWlyZW1lbnRCdXR0b259PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICB9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0XCIgdGl0bGU9XCJlZGl0IHRhc2tcIj48L3NwYW4+XG4gICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgPC9oNT5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT17dGhpcy5ib2R5VmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lcicgOiAnaW52aXNpYmxlLWNvbnRhaW5lcid9PlxuICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICA8c3Ryb25nPnBhdHRlcm46PC9zdHJvbmc+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiY29kZVwiIHJlYWRPbmx5IHZhbHVlPXt0aGlzLnByb3BzLnJlcXVpcmVtZW50LnZhbHVlfSB0aXRsZT17dGhpcy5wcm9wcy5yZXF1aXJlbWVudC52YWx1ZX0+PC9pbnB1dD5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBhdHRlcm4tdHlwZVwiIHRpdGxlPVwicGF0dGVybiB0eXBlXCI+e3RoaXMucHJvcHMucmVxdWlyZW1lbnQudHlwZX08L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSBcIkxJQ0VOU0VcIiAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbic7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9DaGVja2JveCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuXG5pbXBvcnQgVGFzayBmcm9tICcuL1Rhc2snO1xuXG5pbXBvcnQgc3RvcmUsIHsgTVRhc2sgfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrTGlzdCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcHJvcGVydHlDaGVja2JveGVzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICByZXF1aXJlbWVudE9wdGlvbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXG4gIH07XG5cbiAgQG9ic2VydmFibGUgaW5wdXRWYWxpZCA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSB0YXNrc1Zpc2libGUgPSB0cnVlO1xuXG4gIEBhY3Rpb24gc2V0SW5wdXRWYWxpZGl0eSA9ICh2YWxpZCkgPT4geyB0aGlzLmlucHV0VmFsaWQgPSB2YWxpZDsgfVxuICBAYWN0aW9uIHRvZ2dsZVRhc2tzVmlzaWJpbGl0eSA9ICgpID0+IHsgdGhpcy50YXNrc1Zpc2libGUgPSAhdGhpcy50YXNrc1Zpc2libGU7IH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgYWRkVGFza0J0bjtcblxuICBoYW5kbGVBZGRUYXNrID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBjYW5jZWwgaWYgSUQgb3IgZXhlIGlzIGVtcHR5LCBvciBpZiBJRCBhbHJlYWR5IGV4aXN0c1xuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJyB8fCBlLnRhcmdldFswXS5mb3JtWzFdLnZhbHVlID09PSAnJyB8fCBzdG9yZS5oYXNUYXNrKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRhc2sgPSBuZXcgTVRhc2s7XG4gICAgdGFzay5pZCA9IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWU7XG5cbiAgICB0YXNrLmV4ZVZhbHVlID0gZS50YXJnZXRbMF0uZm9ybVsxXS52YWx1ZTtcbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVsyXS5jaGVja2VkKSB7XG4gICAgICB0YXNrLmV4ZVJlYWNoYWJsZSA9ICd0cnVlJztcbiAgICB9XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVszXS52YWx1ZSAhPT0gJycpIHtcbiAgICAgIHRhc2suZW52VmFsdWUgPSBlLnRhcmdldFswXS5mb3JtWzNdLnZhbHVlO1xuICAgICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bNF0uY2hlY2tlZCkge1xuICAgICAgICB0YXNrLmVudlJlYWNoYWJsZSA9ICd0cnVlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9yZS5wcm9wZXJ0aWVzLmZvckVhY2goKHAsIGkpID0+IHtcbiAgICAgIGlmIChlLnRhcmdldFswXS5mb3JtW2kgKyA1XS52YWx1ZSA9PT0gJ3JlYWQnKSB7XG4gICAgICAgIHRhc2sucHJvcGVydGllcy5wdXNoKHsgaWQ6IHAuaWQsIGFjY2VzczogJ3JlYWQnIH0pO1xuICAgICAgfSBlbHNlIGlmIChlLnRhcmdldFswXS5mb3JtW2kgKyA1XS52YWx1ZSA9PT0gJ3dyaXRlJykge1xuICAgICAgICB0YXNrLnByb3BlcnRpZXMucHVzaCh7IGlkOiBwLmlkLCBhY2Nlc3M6ICd3cml0ZScgfSk7XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0WzBdLmZvcm1baSArIDVdLnZhbHVlID09PSAncmVhZHdyaXRlJykge1xuICAgICAgICB0YXNrLnByb3BlcnRpZXMucHVzaCh7IGlkOiBwLmlkLCBhY2Nlc3M6ICdyZWFkd3JpdGUnIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bJ3JlcXVpcmVtZW50cyddLnZhbHVlICE9PSAnJykgeyAvLyBUT0RPOiBoYW5kbGUgbXVsdGlwbGVcbiAgICAgIHRhc2sucmVxdWlyZW1lbnRzLnB1c2goZS50YXJnZXRbMF0uZm9ybVsncmVxdWlyZW1lbnRzJ10udmFsdWUpO1xuICAgIH1cblxuICAgIHN0b3JlLmFkZFRhc2sodGFzayk7XG4gICAgdGhpcy5hZGRUYXNrQnRuLmhpZGUoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZyYWdtZW50PlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtIHRhc2tzLWhlYWRlclwiPlxuICAgICAgICAgIHRhc2tzXG4gICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgcmVmPXsoZWwpID0+IHRoaXMuYWRkVGFza0J0biA9IGVsfSBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IG92ZXJsYXk9e1xuICAgICAgICAgICAgPFBvcG92ZXIgY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXIgdGFzay1wb3BvdmVyXCIgdGl0bGU9XCJhZGQgbmV3IHRhc2tcIiBpZD1cImFkZG5ld3Rhc2tcIj5cbiAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlQWRkVGFza30+XG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbiBzdHlsZT17eyB3aWR0aDogJzMycHgnLCB0ZXh0QWxpZ246ICdyaWdodCcsIHBhZGRpbmc6ICcwIDEwcHggMCAwJyB9fT5pZDwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHN0eWxlPXt7IHdpZHRoOiAnMjM1cHgnIH19IHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSAvPlxuICAgICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNXB4JywgbWFyZ2luQm90dG9tOiAnNXB4JyB9fT5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAuQWRkb24gc3R5bGU9e3sgd2lkdGg6ICczMnB4JywgdGV4dEFsaWduOiAncmlnaHQnLCBwYWRkaW5nOiAnMCAxMHB4IDAgMCcgfX0+ZXhlPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3R5bGU9e3sgd2lkdGg6ICcyMzVweCcgfX0gdHlwZT1cInRleHRcIiBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJ21vbm8nIDogJ21vbm8gaW52YWxpZC1pbnB1dCd9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxDaGVja2JveD5yZWFjaGFibGUgKG9wdGlvbmFsKTwvQ2hlY2tib3g+XG4gICAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICc1cHgnLCBtYXJnaW5Cb3R0b206ICc1cHgnIH19PlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbiBzdHlsZT17eyB3aWR0aDogJzMycHgnLCB0ZXh0QWxpZ246ICdyaWdodCcsIHBhZGRpbmc6ICcwIDEwcHggMCAwJyB9fT5lbnY8L0lucHV0R3JvdXAuQWRkb24+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBzdHlsZT17eyB3aWR0aDogJzIzNXB4JyB9fSB0eXBlPVwidGV4dFwiIGNsYXNzTmFtZT1cIm1vbm9cIiAvPlxuICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3g+cmVhY2hhYmxlIChvcHRpb25hbCk8L0NoZWNrYm94PlxuICAgICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuXG4gICAgICAgICAgICAgICAgPHA+UHJvcGVydGllcyBpbiB0aGlzIHRhc2s6PC9wPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnByb3BlcnR5Q2hlY2tib3hlc31cblxuICAgICAgICAgICAgICAgIDxwPlJlcXVpcmVtZW50IGZvciB0aGlzIHRhc2sgKG9wdGlvbmFsKTo8L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LXJlcXVpcmVtZW50XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiPlJlcXVpcmVtZW50PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY29tcG9uZW50Q2xhc3M9XCJzZWxlY3RcIiBuYW1lPVwicmVxdWlyZW1lbnRzXCIgcGxhY2Vob2xkZXI9XCJcIiBkZWZhdWx0VmFsdWU9XCJcIiBjbGFzc05hbWU9XCJhY2Nlc3NTZWxlY3RcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnJlcXVpcmVtZW50T3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5hZGQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4geyB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSk7IHRoaXMuYWRkVGFza0J0bi5oaWRlKCk7IH19PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICB9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzIGFkZC10YXNrLWJ0blwiIHRpdGxlPVwiYWRkIG5ldyB0YXNrXCI+PC9zcGFuPlxuICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy50YXNrc1Zpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIHRvZ2dsZS1wcm9wZXJ0eS1idG4nIDogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duIHRvZ2dsZS1wcm9wZXJ0eS1idG4nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMudGFza3NWaXNpYmxlID8gJ2hpZGUnIDogJ3Nob3cnfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVUYXNrc1Zpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT17dGhpcy50YXNrc1Zpc2libGUgPyAndmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIHRhc2tzJyA6ICdpbnZpc2libGUtY29udGFpbmVyIGxpc3QtZ3JvdXAtaXRlbSB0YXNrcyd9PlxuICAgICAgICAgIHtzdG9yZS50YXNrcy5tYXAoKHQsIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8VGFzayB0YXNrPXt0fSBrZXk9e2l9IGluZGV4PXtpfSAvPjtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9saT5cbiAgICAgIDwvRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlICdMSUNFTlNFJyAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBDaGVja2JveCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0NoZWNrYm94JztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtR3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtR3JvdXAnO1xuaW1wb3J0IElucHV0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwJztcbmltcG9ydCBNb2RhbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL01vZGFsJztcbmltcG9ydCBPdmVybGF5VHJpZ2dlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5cbmltcG9ydCBzdG9yZSwgeyBNVGFzayB9IGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2sgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRhc2s6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBpbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH07XG5cbiAgQG9ic2VydmFibGUgYm9keVZpc2libGUgPSBmYWxzZTtcbiAgQG9ic2VydmFibGUgaW5wdXRWYWxpZCA9IHRydWU7XG4gIEBvYnNlcnZhYmxlIGRlbGV0ZU1vZGFsVmlzaWJsZSA9IGZhbHNlO1xuXG4gIEBhY3Rpb24gdG9nZ2xlQm9keVZpc2liaWxpdHkgPSAoKSA9PiB7IHRoaXMuYm9keVZpc2libGUgPSAhKHRoaXMuYm9keVZpc2libGUpOyB9XG4gIEBhY3Rpb24gc2V0SW5wdXRWYWxpZGl0eSA9ICh2YWxpZCkgPT4geyB0aGlzLmlucHV0VmFsaWQgPSB2YWxpZDsgfVxuICBAYWN0aW9uIG9wZW5EZWxldGVNb2RhbCA9ICgpID0+IHsgdGhpcy5kZWxldGVNb2RhbFZpc2libGUgPSB0cnVlOyB9XG4gIEBhY3Rpb24gY2xvc2VEZWxldGVNb2RhbCA9ICgpID0+IHsgdGhpcy5kZWxldGVNb2RhbFZpc2libGUgPSBmYWxzZTsgfVxuXG4gIGVkaXRUYXNrQnRuO1xuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSA9ICgpID0+IHRydWVcblxuICBoaWRlRWRpdFRhc2tCdXR0b24gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSk7XG4gICAgdGhpcy5lZGl0VGFza0J0bi5oaWRlKCk7XG4gIH1cblxuICBoYW5kbGVFZGl0VGFzayA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gY2FuY2VsIGlmIElEIG9yIGV4ZSBpcyBlbXB0eVxuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJyB8fCBlLnRhcmdldFswXS5mb3JtWzFdLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjYW5jZWwgaWYgSUQgYWxyZWFkeSBleGlzdHMgKGV4Y2VwdCBpdHMgb3duIElEKVxuICAgIGNvbnN0IG90aGVyVGFza3MgPSBzdG9yZS50YXNrcy5maWx0ZXIodCA9PiB0LmlkICE9PSB0aGlzLnByb3BzLnRhc2suaWQpO1xuICAgIGlmIChvdGhlclRhc2tzLnNvbWUodCA9PiB0LmlkID09PSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0YXNrID0gbmV3IE1UYXNrO1xuICAgIHRhc2suaWQgPSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlO1xuICAgIHRhc2suZXhlVmFsdWUgPSBlLnRhcmdldFswXS5mb3JtWzFdLnZhbHVlO1xuXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMl0uY2hlY2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGFzay5leGVSZWFjaGFibGUgPSAndHJ1ZSc7XG4gICAgfVxuXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bM10udmFsdWUgIT09ICcnKSB7XG4gICAgICB0YXNrLmVudlZhbHVlID0gZS50YXJnZXRbMF0uZm9ybVszXS52YWx1ZTtcbiAgICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzRdLmNoZWNrZWQgPT0gdHJ1ZSkge1xuICAgICAgICB0YXNrLmVudlJlYWNoYWJsZSA9ICd0cnVlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9yZS5wcm9wZXJ0aWVzLmZvckVhY2goKHAsIGkpID0+IHtcbiAgICAgIGlmIChlLnRhcmdldFswXS5mb3JtW2kgKyA1XS52YWx1ZSA9PT0gJ3JlYWQnKSB7XG4gICAgICAgIHRhc2sucHJvcGVydGllcy5wdXNoKHsgaWQ6IHAuaWQsIGFjY2VzczogJ3JlYWQnIH0pO1xuICAgICAgfSBlbHNlIGlmIChlLnRhcmdldFswXS5mb3JtW2kgKyA1XS52YWx1ZSA9PT0gJ3dyaXRlJykge1xuICAgICAgICB0YXNrLnByb3BlcnRpZXMucHVzaCh7IGlkOiBwLmlkLCBhY2Nlc3M6ICd3cml0ZScgfSk7XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0WzBdLmZvcm1baSArIDVdLnZhbHVlID09PSAncmVhZHdyaXRlJykge1xuICAgICAgICB0YXNrLnByb3BlcnRpZXMucHVzaCh7IGlkOiBwLmlkLCBhY2Nlc3M6ICdyZWFkd3JpdGUnIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bJ3JlcXVpcmVtZW50cyddLnZhbHVlICE9PSAnJykge1xuICAgICAgdGFzay5yZXF1aXJlbWVudHMucHVzaChlLnRhcmdldFswXS5mb3JtWydyZXF1aXJlbWVudHMnXS52YWx1ZSk7XG4gICAgfVxuXG4gICAgc3RvcmUuZWRpdFRhc2sodGhpcy5wcm9wcy5pbmRleCwgdGFzayk7XG4gICAgdGhpcy5lZGl0VGFza0J0bi5oaWRlKCk7XG4gIH1cblxuICBoYW5kbGVSZW1vdmVUYXNrID0gKCkgPT4ge1xuICAgIHN0b3JlLnJlbW92ZVRhc2sodGhpcy5wcm9wcy5pbmRleCk7XG4gICAgdGhpcy5jbG9zZURlbGV0ZU1vZGFsKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdmFyIHByb3BlcnR5Q2hlY2tib3hlcyA9IFtdO1xuICAgIGxldCByZXF1aXJlbWVudE9wdGlvbnMgPSBbXTtcbiAgICB2YXIgY3VycmVudFJlcXVpcmVtZW50ID0gJyc7XG4gICAgdmFyIHJlcXVpcmVtZW50Q29udGFpbmVycyA9IFtdO1xuICAgIHZhciBleGVSZWFjaGFibGU7XG4gICAgdmFyIGVudlZhbHVlO1xuICAgIHZhciBleGVSZWFjaGFibGVDaGVja2JveCA9IGZhbHNlO1xuICAgIHZhciBlbnZSZWFjaGFibGVDaGVja2JveCA9IGZhbHNlO1xuICAgIHZhciBlbnZQcmVzZW50ID0gZmFsc2U7XG5cbiAgICBzdG9yZS5wcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5LCBpKSA9PiB7XG4gICAgICB2YXIgYWNjZXNzID0gJyc7XG4gICAgICB0aGlzLnByb3BzLnRhc2sucHJvcGVydGllcy5mb3JFYWNoKGN1cnJlbnRQcm9wZXJ0eSA9PiB7XG4gICAgICAgIGlmIChwcm9wZXJ0eS5pZCA9PT0gY3VycmVudFByb3BlcnR5LmlkKSB7XG4gICAgICAgICAgYWNjZXNzID0gY3VycmVudFByb3BlcnR5LmFjY2VzcztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBwcm9wZXJ0eUNoZWNrYm94ZXMucHVzaChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LXByb3BlcnR5XCIga2V5PXsndC1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17cHJvcGVydHkuaWR9Pntwcm9wZXJ0eS5pZH08L2Rpdj5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNvbXBvbmVudENsYXNzPVwic2VsZWN0XCIgcGxhY2Vob2xkZXI9XCJcIiBkZWZhdWx0VmFsdWU9e2FjY2Vzc30gY2xhc3NOYW1lPVwiYWNjZXNzU2VsZWN0XCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWFkXCI+cmVhZDwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwid3JpdGVcIj53cml0ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicmVhZHdyaXRlXCI+cmVhZHdyaXRlPC9vcHRpb24+XG4gICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBzdG9yZS5yZXF1aXJlbWVudHMuZm9yRWFjaCgocmVxdWlyZW1lbnQsIGkpID0+IHtcbiAgICAgIHJlcXVpcmVtZW50T3B0aW9ucy5wdXNoKFxuICAgICAgICA8b3B0aW9uIHZhbHVlPXtyZXF1aXJlbWVudC5pZH0ga2V5PXsnb3B0aW9uJyArIGl9PntyZXF1aXJlbWVudC5pZH08L29wdGlvbj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy50YXNrLmV4ZVJlYWNoYWJsZSAhPT0gJycpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnRhc2suZXhlUmVhY2hhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgZXhlUmVhY2hhYmxlID0gPHNwYW4gY2xhc3NOYW1lPVwicmVhY2hhYmxlXCIgdGl0bGU9XCJleGVjdXRhYmxlIGlzIGF2YWlsYWJsZSBvbiB3b3JrZXIgbm9kZXNcIj4ocmVhY2hhYmxlKTwvc3Bhbj47XG4gICAgICAgIGV4ZVJlYWNoYWJsZUNoZWNrYm94ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy50YXNrLmV4ZVJlYWNoYWJsZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICBleGVSZWFjaGFibGUgPSA8c3BhbiBjbGFzc05hbWU9XCJyZWFjaGFibGVcIiB0aXRsZT1cImV4ZWN1dGFibGUgaXMgbm90IGF2YWlsYWJsZSBvbiB3b3JrZXIgbm9kZXNcIj4odW5yZWFjaGFibGUpPC9zcGFuPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy50YXNrLmVudlZhbHVlICE9PSAnJykge1xuICAgICAgZW52UHJlc2VudCA9IHRydWU7XG4gICAgICBpZiAodGhpcy5wcm9wcy50YXNrLmVudlJlYWNoYWJsZSAhPT0gJycpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudGFzay5lbnZSZWFjaGFibGUgPT09ICd0cnVlJykge1xuICAgICAgICAgIGVudlZhbHVlID0gPGxpPjxzcGFuPjxzdHJvbmc+ZW52Ojwvc3Ryb25nPjwvc3Bhbj4gPGlucHV0IGNsYXNzTmFtZT1cImNvZGVcIiByZWFkT25seSB2YWx1ZT17dGhpcy5wcm9wcy50YXNrLmVudlZhbHVlfT48L2lucHV0PjxzcGFuIGNsYXNzTmFtZT1cInJlYWNoYWJsZVwiIHRpdGxlPVwiZXhlY3V0YWJsZSBpcyBhdmFpbGFibGUgb24gd29ya2VyIG5vZGVzXCI+KHJlYWNoYWJsZSk8L3NwYW4+PC9saT47XG4gICAgICAgICAgZW52UmVhY2hhYmxlQ2hlY2tib3ggPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudGFzay5lbnZSZWFjaGFibGUgPT09ICdmYWxzZScpIHtcbiAgICAgICAgICBlbnZWYWx1ZSA9IDxsaT48c3Bhbj48c3Ryb25nPmVudjo8L3N0cm9uZz48L3NwYW4+IDxpbnB1dCBjbGFzc05hbWU9XCJjb2RlXCIgcmVhZE9ubHkgdmFsdWU9e3RoaXMucHJvcHMudGFzay5lbnZWYWx1ZX0+PC9pbnB1dD48c3BhbiBjbGFzc05hbWU9XCJyZWFjaGFibGVcIiB0aXRsZT1cImV4ZWN1dGFibGUgaXMgbm90IGF2YWlsYWJsZSBvbiB3b3JrZXIgbm9kZXNcIj4odW5yZWFjaGFibGUpPC9zcGFuPjwvbGk+O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnZWYWx1ZSA9IDxsaT48c3Bhbj48c3Ryb25nPmVudjo8L3N0cm9uZz48L3NwYW4+IDxpbnB1dCBjbGFzc05hbWU9XCJjb2RlXCIgcmVhZE9ubHkgdmFsdWU9e3RoaXMucHJvcHMudGFzay5lbnZWYWx1ZX0+PC9pbnB1dD48L2xpPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLnRhc2sucmVxdWlyZW1lbnRzLmZvckVhY2goKHJlcXVpcmVtZW50LCBpKSA9PiB7IC8vIFRPRE86IGhhbmRsZSBtdWx0aXBsZVxuICAgICAgbGV0IGVsID0gc3RvcmUucmVxdWlyZW1lbnRzLmZpbmQociA9PiByLmlkID09PSByZXF1aXJlbWVudCk7XG4gICAgICBpZiAoZWwgIT09IHVuZGVmaW5lZClcbiAgICAgIHtcbiAgICAgICAgY3VycmVudFJlcXVpcmVtZW50ID0gcmVxdWlyZW1lbnQ7XG4gICAgICAgIHJlcXVpcmVtZW50Q29udGFpbmVycy5wdXNoKFxuICAgICAgICAgIDxkaXYga2V5PXsncmVxdWlyZW1lbnQnICsgaX0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZXF1aXJlbWVudC1jaGlsZFwiPlxuICAgICAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcC1hY2Nlc3NcIiB0aXRsZT17KGVsLnR5cGUgPT09ICdob3N0bmFtZScpID8gJ2hvc3QgbmFtZScgOiAnJ30+eyhlbC50eXBlID09PSAnaG9zdG5hbWUnKSA/ICdITiAnIDogJyd9PC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwcm9wLWFjY2Vzc1wiIHRpdGxlPXsoZWwudHlwZSA9PT0gJ3dubmFtZScpID8gJ1NTSCB3b3JrZXIgbm9kZSBuYW1lJyA6ICcnfT57KGVsLnR5cGUgPT09ICd3bm5hbWUnKSA/ICdXTiAnIDogJyd9PC9zcGFuPlxuICAgICAgICAgICAgICB7cmVxdWlyZW1lbnR9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrXCI+XG4gICAgICAgIDxoNT5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRhc2tzXCI+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImVsZW1lbnQtdGl0bGVcIiB0aXRsZT17dGhpcy5wcm9wcy50YXNrLmlkfT57dGhpcy5wcm9wcy50YXNrLmlkfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuYm9keVZpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUJvZHlWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoXCIgdGl0bGU9XCJkZWxldGVcIiBvbkNsaWNrPXt0aGlzLm9wZW5EZWxldGVNb2RhbH0+PC9zcGFuPlxuICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZX0gb25IaWRlPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PlxuICAgICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPkRlbGV0ZSA8c3Ryb25nPnt0aGlzLnByb3BzLnRhc2suaWR9PC9zdHJvbmc+PzwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICA8cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSB0YXNrIDxzdHJvbmc+e3RoaXMucHJvcHMudGFzay5pZH0/PC9zdHJvbmc+PC9wPlxuICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwiZGFuZ2VyXCIgb25DbGljaz17dGhpcy5oYW5kbGVSZW1vdmVUYXNrfT5EZWxldGU8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PkNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPC9Nb2RhbD5cblxuICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHJlZj17KGVsKSA9PiB0aGlzLmVkaXRUYXNrQnRuID0gZWx9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gb3ZlcmxheT17XG4gICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciB0YXNrLXBvcG92ZXJcIiB0aXRsZT1cImVkaXQgdGFza1wiIGlkPXt0aGlzLnByb3BzLnRhc2suaWR9PlxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVFZGl0VGFza30+XG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbiBzdHlsZT17eyB3aWR0aDogJzMycHgnLCB0ZXh0QWxpZ246ICdyaWdodCcsIHBhZGRpbmc6ICcwIDEwcHggMCAwJyB9fT5pZDwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHN0eWxlPXt7IHdpZHRoOiAnMjM1cHgnIH19IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlkXCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMudGFzay5pZH0gLz5cbiAgICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwIHN0eWxlPXt7IG1hcmdpblRvcDogJzVweCcsIG1hcmdpbkJvdHRvbTogJzVweCcgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uIHN0eWxlPXt7IHdpZHRoOiAnMzJweCcsIHRleHRBbGlnbjogJ3JpZ2h0JywgcGFkZGluZzogJzAgMTBweCAwIDAnIH19PmV4ZTwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHN0eWxlPXt7IHdpZHRoOiAnMjM1cHgnIH19IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImV4ZVwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnbW9ubycgOiAnbW9ubyBpbnZhbGlkLWlucHV0J30gZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLnRhc2suZXhlVmFsdWUgfHwgJyd9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxDaGVja2JveCBuYW1lPVwiZXhlUmVhY2hhYmxlXCIgZGVmYXVsdENoZWNrZWQ9e2V4ZVJlYWNoYWJsZUNoZWNrYm94fT5leGUgcmVhY2hhYmxlIChvcHRpb25hbCk8L0NoZWNrYm94PlxuICAgICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNXB4JywgbWFyZ2luQm90dG9tOiAnNXB4JyB9fT5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAuQWRkb24gc3R5bGU9e3sgd2lkdGg6ICczMnB4JywgdGV4dEFsaWduOiAncmlnaHQnLCBwYWRkaW5nOiAnMCAxMHB4IDAgMCcgfX0+ZW52PC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3R5bGU9e3sgd2lkdGg6ICcyMzVweCcgfX0gdHlwZT1cInRleHRcIiBuYW1lPVwiZW52XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9XCJtb25vXCIgZGVmYXVsdFZhbHVlPXtlbnZQcmVzZW50ID8gdGhpcy5wcm9wcy50YXNrLmVudlZhbHVlIHx8ICcnIDogJyd9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxDaGVja2JveCBuYW1lPVwiZW52UmVhY2hhYmxlXCIgZGVmYXVsdENoZWNrZWQ9e2VudlJlYWNoYWJsZUNoZWNrYm94fT5lbnYgcmVhY2hhYmxlIChvcHRpb25hbCk8L0NoZWNrYm94PlxuICAgICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuXG4gICAgICAgICAgICAgICAgPHA+UHJvcGVydGllcyBpbiB0aGlzIHRhc2s6PC9wPlxuICAgICAgICAgICAgICAgIHtwcm9wZXJ0eUNoZWNrYm94ZXN9XG5cbiAgICAgICAgICAgICAgICA8cD5SZXF1aXJlbWVudCBmb3IgdGhpcyB0YXNrIChvcHRpb25hbCk6PC9wPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC1yZXF1aXJlbWVudFwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIj5SZXF1aXJlbWVudDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIGNvbXBvbmVudENsYXNzPVwic2VsZWN0XCIgbmFtZT1cInJlcXVpcmVtZW50c1wiIHBsYWNlaG9sZGVyPVwiXCIgZGVmYXVsdFZhbHVlPXtjdXJyZW50UmVxdWlyZW1lbnR9IGNsYXNzTmFtZT1cImFjY2Vzc1NlbGVjdFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAge3JlcXVpcmVtZW50T3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5zYXZlPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9e3RoaXMuaGlkZUVkaXRUYXNrQnV0dG9ufT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZWRpdFwiIHRpdGxlPVwiZWRpdCB0YXNrXCI+PC9zcGFuPlxuICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG4gICAgICAgIDwvaDU+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9e3RoaXMuYm9keVZpc2libGUgPyAndmlzaWJsZS1jb250YWluZXInIDogJ2ludmlzaWJsZS1jb250YWluZXInfT5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICA8c3Bhbj48c3Ryb25nPmV4ZTo8L3N0cm9uZz48L3NwYW4+XG4gICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiY29kZVwiIHJlYWRPbmx5IHZhbHVlPXt0aGlzLnByb3BzLnRhc2suZXhlVmFsdWV9IHRpdGxlPXt0aGlzLnByb3BzLnRhc2suZXhlVmFsdWV9PjwvaW5wdXQ+XG4gICAgICAgICAgICB7ZXhlUmVhY2hhYmxlfVxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAge2VudlZhbHVlfVxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy50YXNrLnByb3BlcnRpZXMubWFwKHByb3BlcnR5ID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuICg8c3BhbiB0aXRsZT17cHJvcGVydHkuaWR9IGtleT17cHJvcGVydHkuaWR9PlxuICAgICAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInByb3AtYWNjZXNzXCIgdGl0bGU9eyhwcm9wZXJ0eS5hY2Nlc3MgPT09ICd3cml0ZScpID8gJ3dyaXRlJyA6ICcnfT57KHByb3BlcnR5LmFjY2VzcyA9PT0gJ3dyaXRlJykgPyAnVyAnIDogJyd9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInByb3AtYWNjZXNzXCIgdGl0bGU9eyhwcm9wZXJ0eS5hY2Nlc3MgPT09ICdyZWFkJykgPyAncmVhZCcgOiAnJ30+eyhwcm9wZXJ0eS5hY2Nlc3MgPT09ICdyZWFkJykgPyAnUiAnIDogJyd9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInByb3AtYWNjZXNzXCIgdGl0bGU9eyhwcm9wZXJ0eS5hY2Nlc3MgPT09ICdyZWFkd3JpdGUnKSA/ICdyZWFkICYgd3JpdGUnIDogJyd9PnsocHJvcGVydHkuYWNjZXNzID09PSAncmVhZHdyaXRlJykgPyAnUlcgJyA6ICcnfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7cHJvcGVydHkuaWR9XG4gICAgICAgICAgICAgIDwvc3Bhbj4pO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAge3JlcXVpcmVtZW50Q29udGFpbmVyc31cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSAnTElDRU5TRScgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuaW1wb3J0IEJhZGdlIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQmFkZ2UnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbic7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuaW1wb3J0IE92ZXJsYXlUcmlnZ2VyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvT3ZlcmxheVRyaWdnZXInO1xuXG5pbXBvcnQgc3RvcmUsIHsgTU1haW4gfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluRWRpdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgZWRpdFRhc2tzSW5NYWluQnRuO1xuICBlZGl0Q29sbGVjdGlvbnNJbk1haW5CdG47XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGhhbmRsZUVkaXRUYXNrc0luTWFpbiA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgbWFpbiA9IG5ldyBNTWFpbjtcbiAgICBtYWluLmlkID0gc3RvcmUubWFpbi5pZDtcbiAgICBtYWluLmNvbGxlY3Rpb25zID0gc3RvcmUubWFpbi5jb2xsZWN0aW9ucztcbiAgICBtYWluLmdyb3VwcyA9IHN0b3JlLm1haW4uZ3JvdXBzO1xuXG4gICAgc3RvcmUudGFza3MuZm9yRWFjaCgodCwgaW5kZXgpID0+IHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVtpbmRleF0udmFsdWU7IGkrKykge1xuICAgICAgICBtYWluLnRhc2tzLnB1c2godC5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmVkaXRUYXNrc0luTWFpbkJ0bi5oaWRlKCk7XG4gICAgc3RvcmUuc2V0TWFpbihtYWluKTtcbiAgfVxuXG4gIGhhbmRsZUVkaXRDb2xsZWN0aW9uc0luTWFpbiA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgbWFpbiA9IG5ldyBNTWFpbjtcbiAgICBtYWluLmlkID0gc3RvcmUubWFpbi5pZDtcbiAgICBtYWluLnRhc2tzID0gc3RvcmUubWFpbi50YXNrcztcbiAgICBtYWluLmdyb3VwcyA9IHN0b3JlLm1haW4uZ3JvdXBzO1xuXG4gICAgc3RvcmUuY29sbGVjdGlvbnMuZm9yRWFjaCgoYywgaW5kZXgpID0+IHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVtpbmRleF0udmFsdWU7IGkrKykge1xuICAgICAgICBtYWluLmNvbGxlY3Rpb25zLnB1c2goYy5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdG9yZS5zZXRNYWluKG1haW4pO1xuICAgIHRoaXMuZWRpdENvbGxlY3Rpb25zSW5NYWluQnRuLmhpZGUoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBUYXNrQ2hlY2tib3hlcyA9IFtdO1xuICAgIGNvbnN0IENvbGxlY3Rpb25DaGVja2JveGVzID0gW107XG5cbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKCh0LCBpKSA9PiB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgc3RvcmUubWFpbi50YXNrcy5mb3JFYWNoKGN1cnJlbnRUYXNrID0+IHtcbiAgICAgICAgaWYgKHQuaWQgPT09IGN1cnJlbnRUYXNrKSB7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBUYXNrQ2hlY2tib3hlcy5wdXNoKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtdGFza1wiIGtleT17J3QtYm94JyArIGl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWxlbWVudC1uYW1lXCIgdGl0bGU9e3QuaWR9Pnt0LmlkfTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT1cImFkZC1jZy10Yy1jb3VudGVyXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBkZWZhdWx0VmFsdWU9e2NvdW50fSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBzdG9yZS5jb2xsZWN0aW9ucy5mb3JFYWNoKChjLCBpKSA9PiB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgc3RvcmUubWFpbi5jb2xsZWN0aW9ucy5mb3JFYWNoKGN1cnJlbnRDb2xsZWN0aW9uID0+IHtcbiAgICAgICAgaWYgKGMuaWQgPT09IGN1cnJlbnRDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBDb2xsZWN0aW9uQ2hlY2tib3hlcy5wdXNoKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtY29sbGVjdGlvblwiIGtleT17J2MtYm94JyArIGl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWxlbWVudC1uYW1lXCIgdGl0bGU9e2MuaWR9PntjLmlkfTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT1cImFkZC1jZy10Yy1jb3VudGVyXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBkZWZhdWx0VmFsdWU9e2NvdW50fSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbCBwYW5lbC1kZWZhdWx0IG1haW4tcGFuZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWhlYWRpbmdcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJwYW5lbC10aXRsZVwiPntzdG9yZS5tYWluLmlkfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJtYWluLWVkaXRvci1ib2R5XCIgY2xhc3NOYW1lPVwicGFuZWwtYm9keVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy00IGNlbnRlcmVkIG1haW4tZWxlbWVudCBtYWluLWVsZW1lbnQtdGFza3NcIj5cbiAgICAgICAgICAgICAgPGg1IGNsYXNzTmFtZT1cIm1haW4taGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgdGFza3MgaW4gbWFpblxuICAgICAgICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJib3R0b21cIiByZWY9eyhlbCkgPT4gdGhpcy5lZGl0VGFza3NJbk1haW5CdG4gPSBlbH0gb3ZlcmxheT17XG4gICAgICAgICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciB0YXNrLXBvcG92ZXJcIiB0aXRsZT1cIm1vZGlmeSB0YXNrcyBpbiBtYWluXCIgaWQ9XCJ0YXNrc2lubWFpblwiPlxuICAgICAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVFZGl0VGFza3NJbk1haW59PlxuICAgICAgICAgICAgICAgICAgICAgIHtUYXNrQ2hlY2tib3hlc31cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmVkaXQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4gdGhpcy5lZGl0VGFza3NJbk1haW5CdG4uaGlkZSgpfT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZWRpdCBhZGQtdGFzay1idG4gZWRpdC1tYWluLWJ0blwiIHRpdGxlPVwiZWRpdCB0YXNrcyBpbiBtYWluXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG4gICAgICAgICAgICAgIDwvaDU+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtdGFza3NcIj5cbiAgICAgICAgICAgICAgICB7c3RvcmUubWFpbi50YXNrcy5tYXAoKHRhc2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiA8c3BhbiBrZXk9e2l9Pnt0YXNrfTwvc3Bhbj47XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy00IGNlbnRlcmVkIG1haW4tZWxlbWVudCBtYWluLWVsZW1lbnQtY29sbGVjdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGg1IGNsYXNzTmFtZT1cIm1haW4taGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbnMgaW4gbWFpblxuICAgICAgICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJib3R0b21cIiByZWY9eyhlbCkgPT4gdGhpcy5lZGl0Q29sbGVjdGlvbnNJbk1haW5CdG4gPSBlbH0gb3ZlcmxheT17XG4gICAgICAgICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciBjb2xsZWN0aW9uLXBvcG92ZXJcIiB0aXRsZT1cIm1vZGlmeSBjb2xsZWN0aW9ucyBpbiBtYWluXCIgaWQ9XCJjb2xsZWN0aW9uc2lubWFpblwiPlxuICAgICAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVFZGl0Q29sbGVjdGlvbnNJbk1haW59PlxuICAgICAgICAgICAgICAgICAgICAgIHtDb2xsZWN0aW9uQ2hlY2tib3hlc31cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmVkaXQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4gdGhpcy5lZGl0Q29sbGVjdGlvbnNJbk1haW5CdG4uaGlkZSgpfT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZWRpdCBhZGQtY29sbGVjdGlvbi1idG4gZWRpdC1tYWluLWJ0blwiIHRpdGxlPVwiZWRpdCBjb2xsZWN0aW9ucyBpbiBtYWluXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG4gICAgICAgICAgICAgIDwvaDU+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtY29sbGVjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICB7c3RvcmUubWFpbi5jb2xsZWN0aW9ucy5tYXAoKGNvbGxlY3Rpb24sIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiA8c3BhbiBrZXk9e2l9Pntjb2xsZWN0aW9ufTwvc3Bhbj47XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy00IGNlbnRlcmVkIG1haW4tZWxlbWVudCBtYWluLWVsZW1lbnQtZ3JvdXBzXCI+XG4gICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9XCJtYWluLWhlYWRlclwiPmdyb3VwczwvaDU+XG4gICAgICAgICAgICAgIHtzdG9yZS5tYWluLmdyb3Vwcy5tYXAoKGcsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtZ3JvdXBzXCIga2V5PXtpbmRleH0+PHNwYW4+e2cuaWR9IDxCYWRnZT57Zy5ufTwvQmFkZ2U+PC9zcGFuPjwvZGl2PjtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxuLy8gVE9ETzogYHB1bGxSaWdodGAgZG9lc24ndCBiZWxvbmcgaGVyZS4gVGhlcmUncyBubyBzcGVjaWFsIGhhbmRsaW5nIGhlcmUuXG52YXIgcHJvcFR5cGVzID0ge1xuICBwdWxsUmlnaHQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgcHVsbFJpZ2h0OiBmYWxzZVxufTtcblxudmFyIEJhZGdlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoQmFkZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJhZGdlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCYWRnZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiBoYXNDb250ZW50KGNoaWxkcmVuKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkIHx8IGNoaWxkID09PSAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHVsbFJpZ2h0ID0gX3RoaXMkcHJvcHMucHVsbFJpZ2h0LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wicHVsbFJpZ2h0XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIHtcbiAgICAgICdwdWxsLXJpZ2h0JzogcHVsbFJpZ2h0LFxuICAgICAgLy8gSGFjayBmb3IgY29sbGFwc2luZyBvbiBJRTguXG4gICAgICBoaWRkZW46ICF0aGlzLmhhc0NvbnRlbnQoY2hpbGRyZW4pXG4gICAgfSk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIEJhZGdlO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5CYWRnZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5CYWRnZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2JhZGdlJywgQmFkZ2UpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAvLyB0aGlzIGlzIGp1c3Qgc2VydmVyIGVudmlyb25tZW50XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L3JlYWN0LWhvdC1sb2FkZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSBpZiAoIW1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xuICBtb2R1bGUuZXhwb3J0cy5BcHBDb250YWluZXIud2FybkFib3V0SE1SRGlzYWJsZWQgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cy5ob3Quc2hvdWxkV3JhcFdpdGhBcHBDb250YWluZXIgPSB0cnVlO1xufSBlbHNlIHtcbiAgdmFyIGV2YWxBbGxvd2VkID0gZmFsc2U7XG4gIHZhciBldmFsRXJyb3IgPSBudWxsO1xuICB0cnkge1xuICAgIGV2YWwoJ2V2YWxBbGxvd2VkID0gdHJ1ZScpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gZXZhbCBub3QgYWxsb3dlZCBkdWUgdG8gQ1NQXG4gICAgZXZhbEVycm9yID0gZSAmJiBlLm1lc3NhZ2UgPyBlLm1lc3NhZ2UgOiAndW5rbm93biByZWFzb24nO1xuICB9XG5cbiAgLy8gVE9ETzogZG9udCB1c2UgZXZhbCB0byB1cGRhdGUgbWV0aG9kcy4gc2VlICMxMjczXG4gIC8vIFJITCBuZWVkcyBzZXRQcm90b3R5cGVPZiB0byBvcGVyYXRlIENvbXBvbmVudCBpbmhlcml0YW5jZSwgYW5kIGV2YWwgdG8gcGF0Y2ggbWV0aG9kc1xuICB2YXIganNGZWF0dXJlc1ByZXNlbnQgPSAhIU9iamVjdC5zZXRQcm90b3R5cGVPZjtcblxuICBpZiAoIWpzRmVhdHVyZXNQcmVzZW50IHx8ICFldmFsQWxsb3dlZCkge1xuICAgIC8vIHdlIGFyZSBub3QgaW4gcHJvZCBtb2RlLCBidXQgUkhMIGNvdWxkIG5vdCBiZSBhY3RpdmF0ZWRcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnUmVhY3QtSG90LUxvYWRlciBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQ6JyxcbiAgICAgIFtcbiAgICAgICAgIWpzRmVhdHVyZXNQcmVzZW50ICYmIFwic29tZSBKUyBmZWF0dXJlcyBhcmUgbWlzc2luZ1wiLFxuICAgICAgICAhZXZhbEFsbG93ZWQgJiYgXCJgZXZhbGAgaXMgbm90IGFsbG93ZWQoXCIgKyBldmFsRXJyb3IgKyBcIilcIlxuICAgICAgXS5qb2luKCcsJyksXG4gICAgICAnLidcbiAgICApO1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L3JlYWN0LWhvdC1sb2FkZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5yZWFjdEhvdExvYWRlckdsb2JhbCA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLmRldmVsb3BtZW50LmpzJyk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSBcIkxJQ0VOU0VcIiAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgVG9wb2xvZ3lFZGl0b3IgZnJvbSAnLi9jb21wb25lbnRzL1RvcG9sb2d5RWRpdG9yJztcblxuUmVhY3RET00ucmVuZGVyKDxUb3BvbG9neUVkaXRvciAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4nKSk7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEzLjFcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjtcbmZ1bmN0aW9uIGdldEl0ZW0oa2V5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0SXRlbSA9IGdldEl0ZW07XG5mdW5jdGlvbiByZW1vdmVJdGVtKGtleSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVtb3ZlSXRlbSA9IHJlbW92ZUl0ZW07XG5mdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5zZXRJdGVtID0gc2V0SXRlbTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG1vYnhfMSA9IHJlcXVpcmUoXCJtb2J4XCIpO1xuZnVuY3Rpb24gbWVyZ2VPYnNlcnZhYmxlcyh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHZhciB0ID0gdGFyZ2V0O1xuICAgIHZhciBzID0gc291cmNlO1xuICAgIGlmICh0eXBlb2YgdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0KSB7XG4gICAgICAgICAgICBpZiAodFtrZXldICYmIHR5cGVvZiB0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiBzW2tleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vYnhfMS5pc09ic2VydmFibGVNYXAodFtrZXldKSlcbiAgICAgICAgICAgICAgICAgICAgdFtrZXldLm1lcmdlKHNba2V5XSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW9ieF8xLmlzT2JzZXJ2YWJsZUFycmF5KHRba2V5XSkpXG4gICAgICAgICAgICAgICAgICAgIHRba2V5XS5yZXBsYWNlKHNba2V5XSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW9ieF8xLmlzT2JzZXJ2YWJsZU9iamVjdCh0W2tleV0pKVxuICAgICAgICAgICAgICAgICAgICB0W2tleV0gPSBtZXJnZU9ic2VydmFibGVzKHRba2V5XSwgc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdFtrZXldID0gc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0O1xufVxuZXhwb3J0cy5tZXJnZU9ic2VydmFibGVzID0gbWVyZ2VPYnNlcnZhYmxlcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNlcmlhbGl6cl8xID0gcmVxdWlyZShcInNlcmlhbGl6clwiKTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG4vLyBjb25zdCBkZW1vID0ge1xuLy8gICAgIHRpdGxlOiB0cnVlLFxuLy8gICAgIG5hbWU6IHtcbi8vICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4vLyAgICAgICAgIHNjaGVtYToge1xuLy8gICAgICAgICAgICAgZmlyc3Q6IHRydWUsXG4vLyAgICAgICAgICAgICBzZWNvbmQ6IHRydWUsXG4vLyAgICAgICAgICAgICBsYXN0OiB0cnVlXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG5mdW5jdGlvbiBwZXJzaXN0T2JqZWN0KHRhcmdldCwgc2NoZW1hKSB7XG4gICAgdmFyIG1vZGVsID0gY3JlYXRlTW9kZWwoc2NoZW1hKTtcbiAgICBzZXJpYWxpenJfMS5zZXREZWZhdWx0TW9kZWxTY2hlbWEodGFyZ2V0LCBtb2RlbCk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmV4cG9ydHMucGVyc2lzdE9iamVjdCA9IHBlcnNpc3RPYmplY3Q7XG5mdW5jdGlvbiBjcmVhdGVNb2RlbChwYXJhbXMpIHtcbiAgICB2YXIgc2NoZW1hID0ge307XG4gICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXNba2V5XS50eXBlIGluIHR5cGVzXzEudHlwZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1trZXldLnNjaGVtYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hW2tleV0gPSB0eXBlc18xLnR5cGVzW3BhcmFtc1trZXldLnR5cGVdKGNyZWF0ZU1vZGVsKHBhcmFtc1trZXldLnNjaGVtYSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hW2tleV0gPSB0eXBlc18xLnR5cGVzW3BhcmFtc1trZXldLnR5cGVdKHBhcmFtc1trZXldLnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmFtc1trZXldID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzY2hlbWFba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VyaWFsaXpyXzEuY3JlYXRlU2ltcGxlU2NoZW1hKHNjaGVtYSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxMyBNaWNoYWVsIEF1ZnJlaXRlciAoRGV2ZWxvcG1lbnQgU2VlZCkgYW5kIDIwMTYgWWFob28gSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4vKipcbiAqIEEgR2lzdCBjYW4gcmV0cmlldmUgYW5kIG1vZGlmeSBnaXN0cy5cbiAqL1xudmFyIEdpc3QgPSBmdW5jdGlvbiAoX1JlcXVlc3RhYmxlKSB7XG4gIF9pbmhlcml0cyhHaXN0LCBfUmVxdWVzdGFibGUpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBHaXN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSB0aGUgaWQgb2YgdGhlIGdpc3QgKG5vdCByZXF1aXJlZCB3aGVuIGNyZWF0aW5nIGEgZ2lzdClcbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAqL1xuICBmdW5jdGlvbiBHaXN0KGlkLCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdpc3QpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEdpc3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihHaXN0KSkuY2FsbCh0aGlzLCBhdXRoLCBhcGlCYXNlKSk7XG5cbiAgICBfdGhpcy5fX2lkID0gaWQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGEgZ2lzdC5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNnZXQtYS1zaW5nbGUtZ2lzdFxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBnaXN0XG4gICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoR2lzdCwgW3tcbiAgICBrZXk6ICdyZWFkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZChjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvZ2lzdHMvJyArIHRoaXMuX19pZCwgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBnaXN0LlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy8jY3JlYXRlLWEtZ2lzdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBnaXN0IC0gdGhlIGRhdGEgZm9yIHRoZSBuZXcgZ2lzdFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG5ldyBnaXN0IHVwb24gY3JlYXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBQcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShnaXN0LCBjYikge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9naXN0cycsIGdpc3QsIGNiKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBfdGhpczIuX19pZCA9IHJlc3BvbnNlLmRhdGEuaWQ7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGdpc3QuXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNkZWxldGUtYS1naXN0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9naXN0cy8nICsgdGhpcy5fX2lkLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yayBhIGdpc3QuXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNmb3JrLWEtZ2lzdFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIHJlY2VpdmUgdGhlIGdpc3RcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBQcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZvcmsnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JrKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvZm9ya3MnLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgZ2lzdC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI2VkaXQtYS1naXN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGdpc3QgLSB0aGUgbmV3IGRhdGEgZm9yIHRoZSBnaXN0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHRoZSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBBUEkgcmVzdWx0XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZ2lzdCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvZ2lzdHMvJyArIHRoaXMuX19pZCwgZ2lzdCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXIgYSBnaXN0LlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy8jc3Rhci1hLWdpc3RcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3RhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXIoY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQVVQnLCAnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL3N0YXInLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5zdGFyIGEgZ2lzdC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI3Vuc3Rhci1hLWdpc3RcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndW5zdGFyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zdGFyKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9naXN0cy8nICsgdGhpcy5fX2lkICsgJy9zdGFyJywgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgZ2lzdCBpcyBzdGFycmVkIGJ5IHRoZSB1c2VyLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy8jY2hlY2staWYtYS1naXN0LWlzLXN0YXJyZWRcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIGdpc3QgaXMgc3RhcnJlZCBhbmQgZmFsc2UgaWYgdGhlIGdpc3QgaXMgbm90IHN0YXJyZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBQcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzU3RhcnJlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzU3RhcnJlZChjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QyMDRvcjQwNCgnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL3N0YXInLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgZ2lzdCdzIGNvbW1pdHNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI2xpc3QtZ2lzdC1jb21taXRzXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgYXJyYXkgb2YgY29tbWl0c1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdENvbW1pdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0Q29tbWl0cyhjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL2NvbW1pdHMnLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggb25lIG9mIHRoZSBnaXN0J3MgcmV2aXNpb24uXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNnZXQtYS1zcGVjaWZpYy1yZXZpc2lvbi1vZi1hLWdpc3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmV2aXNpb24gLSB0aGUgaWQgb2YgdGhlIHJldmlzaW9uXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmV2aXNpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBQcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFJldmlzaW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmV2aXNpb24ocmV2aXNpb24sIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9naXN0cy8nICsgdGhpcy5fX2lkICsgJy8nICsgcmV2aXNpb24sIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBnaXN0J3MgY29tbWVudHNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvY29tbWVudHMvI2xpc3QtY29tbWVudHMtb24tYS1naXN0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgYXJyYXkgb2YgY29tbWVudHNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpc3RDb21tZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RDb21tZW50cyhjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL2NvbW1lbnRzJywgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZldGNoIG9uZSBvZiB0aGUgZ2lzdCdzIGNvbW1lbnRzXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzL2NvbW1lbnRzLyNnZXQtYS1zaW5nbGUtY29tbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb21tZW50IC0gdGhlIGlkIG9mIHRoZSBjb21tZW50XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tbWVudFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q29tbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbW1lbnQoY29tbWVudCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL2NvbW1lbnRzLycgKyBjb21tZW50LCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tbWVudCBvbiBhIGdpc3RcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvY29tbWVudHMvI2NyZWF0ZS1hLWNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29tbWVudCAtIHRoZSBjb21tZW50IHRvIGFkZFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB0aGUgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyB0aGUgQVBJIHJlc3VsdFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlQ29tbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQoY29tbWVudCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9naXN0cy8nICsgdGhpcy5fX2lkICsgJy9jb21tZW50cycsIHsgYm9keTogY29tbWVudCB9LCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRWRpdCBhIGNvbW1lbnQgb24gdGhlIGdpc3RcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvY29tbWVudHMvI2VkaXQtYS1jb21tZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbW1lbnQgLSB0aGUgaWQgb2YgdGhlIGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYm9keSAtIHRoZSBuZXcgY29tbWVudFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG1vZGlmaWVkIGNvbW1lbnRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VkaXRDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWRpdENvbW1lbnQoY29tbWVudCwgYm9keSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvY29tbWVudHMvJyArIGNvbW1lbnQsIHsgYm9keTogYm9keSB9LCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgY29tbWVudCBvbiB0aGUgZ2lzdC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvY29tbWVudHMvI2RlbGV0ZS1hLWNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29tbWVudCAtIHRoZSBpZCBvZiB0aGUgY29tbWVudFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlQ29tbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUNvbW1lbnQoY29tbWVudCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL2NvbW1lbnRzLycgKyBjb21tZW50LCBudWxsLCBjYik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdpc3Q7XG59KF9SZXF1ZXN0YWJsZTMuZGVmYXVsdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gR2lzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrZHBjM1F1YW5NaVhTd2libUZ0WlhNaU9sc2lSMmx6ZENJc0ltbGtJaXdpWVhWMGFDSXNJbUZ3YVVKaGMyVWlMQ0pmWDJsa0lpd2lZMklpTENKZmNtVnhkV1Z6ZENJc0ltZHBjM1FpTENKMGFHVnVJaXdpY21WemNHOXVjMlVpTENKa1lYUmhJaXdpWDNKbGNYVmxjM1F5TURSdmNqUXdOQ0lzSWw5eVpYRjFaWE4wUVd4c1VHRm5aWE1pTENKeVpYWnBjMmx2YmlJc0ltTnZiVzFsYm5RaUxDSmliMlI1SWl3aVVtVnhkV1Z6ZEdGaWJHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPMEZCVDBFN096czdPenM3T3pzN0syVkJVRUU3T3pzN096czdRVUZUUVRzN08wbEJSMDFCTEVrN096dEJRVU5JT3pzN096czdRVUZOUVN4blFrRkJXVU1zUlVGQldpeEZRVUZuUWtNc1NVRkJhRUlzUlVGQmMwSkRMRTlCUVhSQ0xFVkJRU3RDTzBGQlFVRTdPMEZCUVVFc05FZEJRM1JDUkN4SlFVUnpRaXhGUVVOb1FrTXNUMEZFWjBJN08wRkJSVFZDTEZWQlFVdERMRWxCUVV3c1IwRkJXVWdzUlVGQldqdEJRVVkwUWp0QlFVYzVRanM3UVVGRlJEczdPenM3T3pzN096dDVRa0ZOUzBrc1JTeEZRVUZKTzBGQlEwNHNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxSaXhKUVVGd1F5eEZRVUUwUXl4SlFVRTFReXhGUVVGclJFTXNSVUZCYkVRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3pKQ1FVOVBSU3hKTEVWQlFVMUdMRVVzUlVGQlNUdEJRVUZCT3p0QlFVTmtMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEUxQlFXUXNSVUZCYzBJc1VVRkJkRUlzUlVGQlowTkRMRWxCUVdoRExFVkJRWE5EUml4RlFVRjBReXhGUVVOSVJ5eEpRVVJITEVOQlEwVXNWVUZCUTBNc1VVRkJSQ3hGUVVGak8wRkJRMnBDTEdWQlFVdE1MRWxCUVV3c1IwRkJXVXNzVTBGQlUwTXNTVUZCVkN4RFFVRmpWQ3hGUVVFeFFqdEJRVU5CTEdWQlFVOVJMRkZCUVZBN1FVRkRSaXhQUVVwSExFTkJRVkE3UVVGTFJqczdRVUZGUkRzN096czdPenM3T3pSQ1FVMVBTaXhGTEVWQlFVazdRVUZEVWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eFJRVUZrTEdOQlFXdERMRXRCUVV0R0xFbEJRWFpETEVWQlFTdERMRWxCUVM5RExFVkJRWEZFUXl4RlFVRnlSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dDVRa0ZOUzBFc1JTeEZRVUZKTzBGQlEwNHNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVFVGQlpDeGpRVUZuUXl4TFFVRkxSaXhKUVVGeVF5eGhRVUZ0UkN4SlFVRnVSQ3hGUVVGNVJFTXNSVUZCZWtRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3pKQ1FVOVBSU3hKTEVWQlFVMUdMRVVzUlVGQlNUdEJRVU5rTEdGQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFOUJRV1FzWTBGQmFVTXNTMEZCUzBZc1NVRkJkRU1zUlVGQk9FTkhMRWxCUVRsRExFVkJRVzlFUml4RlFVRndSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dDVRa0ZOUzBFc1JTeEZRVUZKTzBGQlEwNHNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxSaXhKUVVGd1F5eFpRVUZwUkN4SlFVRnFSQ3hGUVVGMVJFTXNSVUZCZGtRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TWtKQlRVOUJMRVVzUlVGQlNUdEJRVU5TTEdGQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxGRkJRV1FzWTBGQmEwTXNTMEZCUzBZc1NVRkJka01zV1VGQmIwUXNTVUZCY0VRc1JVRkJNRVJETEVWQlFURkVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096aENRVTFWUVN4RkxFVkJRVWs3UVVGRFdDeGhRVUZQTEV0QlFVdE5MR2RDUVVGTUxHRkJRV2RETEV0QlFVdFFMRWxCUVhKRExGbEJRV3RFTEVsQlFXeEVMRVZCUVhkRVF5eEZRVUY0UkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenRuUTBGTldVRXNSU3hGUVVGSk8wRkJRMklzWVVGQlR5eExRVUZMVHl4blFrRkJUQ3hoUVVGblF5eExRVUZMVWl4SlFVRnlReXhsUVVGeFJDeEpRVUZ5UkN4RlFVRXlSRU1zUlVGQk0wUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08yZERRVTlaVVN4UkxFVkJRVlZTTEVVc1JVRkJTVHRCUVVOMlFpeGhRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdEdMRWxCUVhCRExGTkJRVFJEVXl4UlFVRTFReXhGUVVGM1JDeEpRVUY0UkN4RlFVRTRSRklzUlVGQk9VUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN2FVTkJUV0ZCTEVVc1JVRkJTVHRCUVVOa0xHRkJRVThzUzBGQlMwOHNaMEpCUVV3c1lVRkJaME1zUzBGQlMxSXNTVUZCY2tNc1owSkJRWE5FTEVsQlFYUkVMRVZCUVRSRVF5eEZRVUUxUkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3SzBKQlQxZFRMRThzUlVGQlUxUXNSU3hGUVVGSk8wRkJRM0pDTEdGQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFdEJRV1FzWTBGQkswSXNTMEZCUzBZc1NVRkJjRU1zYTBKQlFYRkVWU3hQUVVGeVJDeEZRVUZuUlN4SlFVRm9SU3hGUVVGelJWUXNSVUZCZEVVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzJ0RFFVOWpVeXhQTEVWQlFWTlVMRVVzUlVGQlNUdEJRVU40UWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eE5RVUZrTEdOQlFXZERMRXRCUVV0R0xFbEJRWEpETEdkQ1FVRnpSQ3hGUVVGRFZ5eE5RVUZOUkN4UFFVRlFMRVZCUVhSRUxFVkJRWFZGVkN4RlFVRjJSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPMmREUVZGWlV5eFBMRVZCUVZORExFa3NSVUZCVFZZc1JTeEZRVUZKTzBGQlF6VkNMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEU5QlFXUXNZMEZCYVVNc1MwRkJTMFlzU1VGQmRFTXNhMEpCUVhWRVZTeFBRVUYyUkN4RlFVRnJSU3hGUVVGRFF5eE5RVUZOUVN4SlFVRlFMRVZCUVd4RkxFVkJRV2RHVml4RlFVRm9SaXhEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdhME5CVDJOVExFOHNSVUZCVTFRc1JTeEZRVUZKTzBGQlEzaENMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEZGQlFXUXNZMEZCYTBNc1MwRkJTMFlzU1VGQmRrTXNhMEpCUVhkRVZTeFBRVUY0UkN4RlFVRnRSU3hKUVVGdVJTeEZRVUY1UlZRc1JVRkJla1VzUTBGQlVEdEJRVU5HT3pzN08wVkJOVXRsVnl4eFFqczdRVUVyUzI1Q1F5eFBRVUZQUXl4UFFVRlFMRWRCUVdsQ2JFSXNTVUZCYWtJaUxDSm1hV3hsSWpvaVIybHpkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1FHWnBiR1ZjYmlBcUlFQmpiM0I1Y21sbmFIUWdJREl3TVRNZ1RXbGphR0ZsYkNCQmRXWnlaV2wwWlhJZ0tFUmxkbVZzYjNCdFpXNTBJRk5sWldRcElHRnVaQ0F5TURFMklGbGhhRzl2SUVsdVl5NWNiaUFxSUVCc2FXTmxibk5sSUNBZ0lFeHBZMlZ1YzJWa0lIVnVaR1Z5SUh0QWJHbHVheUJvZEhSd2N6b3ZMM053WkhndWIzSm5MMnhwWTJWdWMyVnpMMEpUUkMwekxVTnNZWFZ6WlMxRGJHVmhjaTVvZEcxc0lFSlRSQzB6TFVOc1lYVnpaUzFEYkdWaGNuMHVYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQkhhWFJvZFdJdWFuTWdhWE1nWm5KbFpXeDVJR1JwYzNSeWFXSjFkR0ZpYkdVdVhHNGdLaTljYmx4dWFXMXdiM0owSUZKbGNYVmxjM1JoWW14bElHWnliMjBnSnk0dlVtVnhkV1Z6ZEdGaWJHVW5PMXh1WEc0dktpcGNiaUFxSUVFZ1IybHpkQ0JqWVc0Z2NtVjBjbWxsZG1VZ1lXNWtJRzF2WkdsbWVTQm5hWE4wY3k1Y2JpQXFMMXh1WTJ4aGMzTWdSMmx6ZENCbGVIUmxibVJ6SUZKbGNYVmxjM1JoWW14bElIdGNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ1IybHpkQzVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnBaQ0F0SUhSb1pTQnBaQ0J2WmlCMGFHVWdaMmx6ZENBb2JtOTBJSEpsY1hWcGNtVmtJSGRvWlc0Z1kzSmxZWFJwYm1jZ1lTQm5hWE4wS1Z4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1aGRYUm9mU0JiWVhWMGFGMGdMU0JwYm1admNtMWhkR2x2YmlCeVpYRjFhWEpsWkNCMGJ5QmhkWFJvWlc1MGFXTmhkR1VnZEc4Z1IybDBhSFZpWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMkZ3YVVKaGMyVTlhSFIwY0hNNkx5OWhjR2t1WjJsMGFIVmlMbU52YlYwZ0xTQjBhR1VnWW1GelpTQkhhWFJvZFdJZ1FWQkpJRlZTVEZ4dUlDQWdJQ292WEc0Z0lDQmpiMjV6ZEhKMVkzUnZjaWhwWkN3Z1lYVjBhQ3dnWVhCcFFtRnpaU2tnZTF4dUlDQWdJQ0FnYzNWd1pYSW9ZWFYwYUN3Z1lYQnBRbUZ6WlNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlmYVdRZ1BTQnBaRHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkdaWFJqYUNCaElHZHBjM1F1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsemRITXZJMmRsZEMxaExYTnBibWRzWlMxbmFYTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQm5hWE4wWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQlFjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUhKbFlXUW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wyZHBjM1J6THlSN2RHaHBjeTVmWDJsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnWjJsemRDNWNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OW5hWE4wY3k4alkzSmxZWFJsTFdFdFoybHpkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHZHBjM1FnTFNCMGFHVWdaR0YwWVNCbWIzSWdkR2hsSUc1bGR5Qm5hWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J1WlhjZ1oybHpkQ0IxY0c5dUlHTnlaV0YwYVc5dVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0JRY205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHTnlaV0YwWlNobmFYTjBMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQW5MMmRwYzNSekp5d2daMmx6ZEN3Z1kySXBYRzRnSUNBZ0lDQWdJQ0F1ZEdobGJpZ29jbVZ6Y0c5dWMyVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgxOXBaQ0E5SUhKbGMzQnZibk5sTG1SaGRHRXVhV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkVaV3hsZEdVZ1lTQm5hWE4wTGx4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJkcGMzUnpMeU5rWld4bGRHVXRZUzFuYVhOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJ5ZFdVZ2FXWWdkR2hsSUhKbGNYVmxjM1FnYzNWalkyVmxaSE5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElGQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWkdWc1pYUmxLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SRVZNUlZSRkp5d2dZQzluYVhOMGN5OGtlM1JvYVhNdVgxOXBaSDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUm05eWF5QmhJR2RwYzNRdVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybHpkSE12STJadmNtc3RZUzFuYVhOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2RHaGxJR1oxYm1OMGFXOXVJSFJvWVhRZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCbmFYTjBYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCUWNtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR1p2Y21zb1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5bmFYTjBjeThrZTNSb2FYTXVYMTlwWkgwdlptOXlhM05nTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVlhCa1lYUmxJR0VnWjJsemRDNWNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OW5hWE4wY3k4alpXUnBkQzFoTFdkcGMzUmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbmFYTjBJQzBnZEdobElHNWxkeUJrWVhSaElHWnZjaUIwYUdVZ1oybHpkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSFJvWlNCbWRXNWpkR2x2YmlCMGFHRjBJSEpsWTJWcGRtVnpJSFJvWlNCQlVFa2djbVZ6ZFd4MFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0JRY205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lIVndaR0YwWlNobmFYTjBMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJCVkVOSUp5d2dZQzluYVhOMGN5OGtlM1JvYVhNdVgxOXBaSDFnTENCbmFYTjBMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVTNSaGNpQmhJR2RwYzNRdVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybHpkSE12STNOMFlYSXRZUzFuYVhOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJ5ZFdVZ2FXWWdkR2hsSUhKbGNYVmxjM1FnYVhNZ2MzVmpZMlZ6YzJaMWJGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnVUhKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnpkR0Z5S0dOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duVUZWVUp5d2dZQzluYVhOMGN5OGtlM1JvYVhNdVgxOXBaSDB2YzNSaGNtQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQlZibk4wWVhJZ1lTQm5hWE4wTGx4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJkcGMzUnpMeU4xYm5OMFlYSXRZUzFuYVhOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJ5ZFdVZ2FXWWdkR2hsSUhKbGNYVmxjM1FnYVhNZ2MzVmpZMlZ6YzJaMWJGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnVUhKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQjFibk4wWVhJb1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkRVJVeEZWRVVuTENCZ0wyZHBjM1J6THlSN2RHaHBjeTVmWDJsa2ZTOXpkR0Z5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOb1pXTnJJR2xtSUdFZ1oybHpkQ0JwY3lCemRHRnljbVZrSUdKNUlIUm9aU0IxYzJWeUxseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyZHBjM1J6THlOamFHVmpheTFwWmkxaExXZHBjM1F0YVhNdGMzUmhjbkpsWkZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBjblZsSUdsbUlIUm9aU0JuYVhOMElHbHpJSE4wWVhKeVpXUWdZVzVrSUdaaGJITmxJR2xtSUhSb1pTQm5hWE4wSUdseklHNXZkQ0J6ZEdGeWNtVmtYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCUWNtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR2x6VTNSaGNuSmxaQ2hqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUXlNRFJ2Y2pRd05DaGdMMmRwYzNSekx5UjdkR2hwY3k1ZlgybGtmUzl6ZEdGeVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFeHBjM1FnZEdobElHZHBjM1FuY3lCamIyMXRhWFJ6WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsemRITXZJMnhwYzNRdFoybHpkQzFqYjIxdGFYUnpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmhjbkpoZVNCdlppQmpiMjF0YVhSelhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0JRY205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JEYjIxdGFYUnpLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRFRnNiRkJoWjJWektHQXZaMmx6ZEhNdkpIdDBhR2x6TGw5ZmFXUjlMMk52YlcxcGRITmdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSbVYwWTJnZ2IyNWxJRzltSUhSb1pTQm5hWE4wSjNNZ2NtVjJhWE5wYjI0dVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybHpkSE12STJkbGRDMWhMWE53WldOcFptbGpMWEpsZG1semFXOXVMVzltTFdFdFoybHpkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxkbWx6YVc5dUlDMGdkR2hsSUdsa0lHOW1JSFJvWlNCeVpYWnBjMmx2Ymx4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnY21WMmFYTnBiMjVjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElGQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWjJWMFVtVjJhWE5wYjI0b2NtVjJhWE5wYjI0c0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5bmFYTjBjeThrZTNSb2FYTXVYMTlwWkgwdkpIdHlaWFpwYzJsdmJuMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dUR2x6ZENCMGFHVWdaMmx6ZENkeklHTnZiVzFsYm5SelhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybHpkSE12WTI5dGJXVnVkSE12STJ4cGMzUXRZMjl0YldWdWRITXRiMjR0WVMxbmFYTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmhjbkpoZVNCdlppQmpiMjF0Wlc1MGMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnNhWE4wUTI5dGJXVnVkSE1vWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBRV3hzVUdGblpYTW9ZQzluYVhOMGN5OGtlM1JvYVhNdVgxOXBaSDB2WTI5dGJXVnVkSE5nTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUm1WMFkyZ2diMjVsSUc5bUlIUm9aU0JuYVhOMEozTWdZMjl0YldWdWRITmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OW5hWE4wY3k5amIyMXRaVzUwY3k4aloyVjBMV0V0YzJsdVoyeGxMV052YlcxbGJuUmNiaUFnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCamIyMXRaVzUwSUMwZ2RHaGxJR2xrSUc5bUlIUm9aU0JqYjIxdFpXNTBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmpiMjF0Wlc1MFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0JRY205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRU52YlcxbGJuUW9ZMjl0YldWdWRDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wyZHBjM1J6THlSN2RHaHBjeTVmWDJsa2ZTOWpiMjF0Wlc1MGN5OGtlMk52YlcxbGJuUjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU52YlcxbGJuUWdiMjRnWVNCbmFYTjBYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmx6ZEhNdlkyOXRiV1Z1ZEhNdkkyTnlaV0YwWlMxaExXTnZiVzFsYm5SY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JqYjIxdFpXNTBJQzBnZEdobElHTnZiVzFsYm5RZ2RHOGdZV1JrWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZEdobElHWjFibU4wYVc5dUlIUm9ZWFFnY21WalpXbDJaWE1nZEdobElFRlFTU0J5WlhOMWJIUmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUZCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdZM0psWVhSbFEyOXRiV1Z1ZENoamIyMXRaVzUwTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCUFUxUW5MQ0JnTDJkcGMzUnpMeVI3ZEdocGN5NWZYMmxrZlM5amIyMXRaVzUwYzJBc0lIdGliMlI1T2lCamIyMXRaVzUwZlN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFVmthWFFnWVNCamIyMXRaVzUwSUc5dUlIUm9aU0JuYVhOMFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybHpkSE12WTI5dGJXVnVkSE12STJWa2FYUXRZUzFqYjIxdFpXNTBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1kyOXRiV1Z1ZENBdElIUm9aU0JwWkNCdlppQjBhR1VnWTI5dGJXVnVkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHSnZaSGtnTFNCMGFHVWdibVYzSUdOdmJXMWxiblJjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJRzF2WkdsbWFXVmtJR052YlcxbGJuUmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaV1JwZEVOdmJXMWxiblFvWTI5dGJXVnVkQ3dnWW05a2VTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZaMmx6ZEhNdkpIdDBhR2x6TGw5ZmFXUjlMMk52YlcxbGJuUnpMeVI3WTI5dGJXVnVkSDFnTENCN1ltOWtlVG9nWW05a2VYMHNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJFWld4bGRHVWdZU0JqYjIxdFpXNTBJRzl1SUhSb1pTQm5hWE4wTGx4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJkcGMzUnpMMk52YlcxbGJuUnpMeU5rWld4bGRHVXRZUzFqYjIxdFpXNTBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1kyOXRiV1Z1ZENBdElIUm9aU0JwWkNCdlppQjBhR1VnWTI5dGJXVnVkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGNuVmxJR2xtSUhSb1pTQnlaWEYxWlhOMElITjFZMk5sWldSelhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0JRY205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHUmxiR1YwWlVOdmJXMWxiblFvWTI5dGJXVnVkQ3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RFUlV4RlZFVW5MQ0JnTDJkcGMzUnpMeVI3ZEdocGN5NWZYMmxrZlM5amIyMXRaVzUwY3k4a2UyTnZiVzFsYm5SOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVkcGMzUTdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2lzdC5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFByZXZpb3VzIGxvZyB0aW1lc3RhbXAuXG4gKi9cblxudmFyIHByZXZUaW1lO1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICByZXR1cm4gZGVidWc7XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbnZhciBsb2cgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KSgnZ2l0aHViOnVzZXInKTtcblxuLyoqXG4gKiBBIFVzZXIgYWxsb3dzIHNjb3Bpbmcgb2YgQVBJIHJlcXVlc3RzIHRvIGEgcGFydGljdWxhciBHaXRodWIgdXNlci5cbiAqL1xuXG52YXIgVXNlciA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgIF9pbmhlcml0cyhVc2VyLCBfUmVxdWVzdGFibGUpO1xuXG4gICAvKipcbiAgICAqIENyZWF0ZSBhIFVzZXIuXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJuYW1lXSAtIHRoZSB1c2VyIHRvIHVzZSBmb3IgdXNlci1zY29wZWQgcXVlcmllc1xuICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW2FwaUJhc2U9aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbV0gLSB0aGUgYmFzZSBHaXRodWIgQVBJIFVSTFxuICAgICovXG4gICBmdW5jdGlvbiBVc2VyKHVzZXJuYW1lLCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXNlcik7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChVc2VyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVXNlcikpLmNhbGwodGhpcywgYXV0aCwgYXBpQmFzZSkpO1xuXG4gICAgICBfdGhpcy5fX3VzZXIgPSB1c2VybmFtZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgIH1cblxuICAgLyoqXG4gICAgKiBHZXQgdGhlIHVybCBmb3IgdGhlIHJlcXVlc3QuIChkZXBlbmRlbnQgb24gaWYgd2UncmUgcmVxdWVzdGluZyBmb3IgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlciBvciBub3QpXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZHBvaW50IC0gdGhlIGVuZHBvaW50IGJlaW5nIHJlcXVlc3RlZFxuICAgICogQHJldHVybiB7c3RyaW5nfSAtIHRoZSByZXNvbHZlZCBlbmRwb2ludFxuICAgICovXG5cblxuICAgX2NyZWF0ZUNsYXNzKFVzZXIsIFt7XG4gICAgICBrZXk6ICdfX2dldFNjb3BlZFVybCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX19nZXRTY29wZWRVcmwoZW5kcG9pbnQpIHtcbiAgICAgICAgIGlmICh0aGlzLl9fdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50ID8gJy91c2Vycy8nICsgdGhpcy5fX3VzZXIgKyAnLycgKyBlbmRwb2ludCA6ICcvdXNlcnMvJyArIHRoaXMuX191c2VyO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIHN3aXRjaCAoZW5kcG9pbnQpIHtcbiAgICAgICAgICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gJy91c2VyJztcblxuICAgICAgICAgICAgICAgY2FzZSAnbm90aWZpY2F0aW9ucyc6XG4gICAgICAgICAgICAgICBjYXNlICdnaXN0cyc6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gJy8nICsgZW5kcG9pbnQ7XG5cbiAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gJy91c2VyLycgKyBlbmRwb2ludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSB1c2VyJ3MgcmVwb3NpdG9yaWVzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvI2xpc3QtdXNlci1yZXBvc2l0b3JpZXNcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBhbnkgb3B0aW9ucyB0byByZWZpbmUgdGhlIHNlYXJjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiByZXBvc2l0b3JpZXNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0UmVwb3MnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RSZXBvcyhvcHRpb25zLCBjYikge1xuICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYiA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICB9XG5cbiAgICAgICAgIG9wdGlvbnMgPSB0aGlzLl9nZXRPcHRpb25zV2l0aERlZmF1bHRzKG9wdGlvbnMpO1xuXG4gICAgICAgICBsb2coJ0ZldGNoaW5nIHJlcG9zaXRvcmllcyB3aXRoIG9wdGlvbnM6ICcgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKHRoaXMuX19nZXRTY29wZWRVcmwoJ3JlcG9zJyksIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSBvcmdzIHRoYXQgdGhlIHVzZXIgYmVsb25ncyB0b1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvI2xpc3QtdXNlci1vcmdhbml6YXRpb25zXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIG9yZ2FuaXphdGlvbnNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0T3JncycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdE9yZ3MoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCB0aGlzLl9fZ2V0U2NvcGVkVXJsKCdvcmdzJyksIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IGZvbGxvd2VycyBvZiBhIHVzZXJcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My91c2Vycy9mb2xsb3dlcnMvI2xpc3QtZm9sbG93ZXJzLW9mLWEtdXNlclxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBmb2xsb3dlcnNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0Rm9sbG93ZXJzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0Rm9sbG93ZXJzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgdGhpcy5fX2dldFNjb3BlZFVybCgnZm9sbG93ZXJzJyksIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHVzZXJzIGZvbGxvd2VkIGJ5IGFub3RoZXIgdXNlclxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3VzZXJzL2ZvbGxvd2Vycy8jbGlzdC11c2Vycy1mb2xsb3dlZC1ieS1hbm90aGVyLXVzZXJcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2Ygd2hvIGEgdXNlciBpcyBmb2xsb3dpbmdcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0Rm9sbG93aW5nJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0Rm9sbG93aW5nKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgdGhpcy5fX2dldFNjb3BlZFVybCgnZm9sbG93aW5nJyksIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSB1c2VyJ3MgZ2lzdHNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy8jbGlzdC1hLXVzZXJzLWdpc3RzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGdpc3RzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdEdpc3RzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0R2lzdHMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCB0aGlzLl9fZ2V0U2NvcGVkVXJsKCdnaXN0cycpLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCB0aGUgdXNlcidzIG5vdGlmaWNhdGlvbnNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9hY3Rpdml0eS9ub3RpZmljYXRpb25zLyNsaXN0LXlvdXItbm90aWZpY2F0aW9uc1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIGFueSBvcHRpb25zIHRvIHJlZmluZSB0aGUgc2VhcmNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHJlcG9zaXRvcmllc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3ROb3RpZmljYXRpb25zJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0Tm90aWZpY2F0aW9ucyhvcHRpb25zLCBjYikge1xuICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgIH1cblxuICAgICAgICAgb3B0aW9ucy5zaW5jZSA9IHRoaXMuX2RhdGVUb0lTTyhvcHRpb25zLnNpbmNlKTtcbiAgICAgICAgIG9wdGlvbnMuYmVmb3JlID0gdGhpcy5fZGF0ZVRvSVNPKG9wdGlvbnMuYmVmb3JlKTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsIHRoaXMuX19nZXRTY29wZWRVcmwoJ25vdGlmaWNhdGlvbnMnKSwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNob3cgdGhlIHVzZXIncyBwcm9maWxlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvdXNlcnMvI2dldC1hLXNpbmdsZS11c2VyXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSB1c2VyJ3MgaW5mb3JtYXRpb25cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRQcm9maWxlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9maWxlKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgdGhpcy5fX2dldFNjb3BlZFVybCgnJyksIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHRoZSBsaXN0IG9mIHN0YXJyZWQgcmVwb3NpdG9yaWVzIGZvciB0aGUgdXNlclxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2FjdGl2aXR5L3N0YXJyaW5nLyNsaXN0LXJlcG9zaXRvcmllcy1iZWluZy1zdGFycmVkXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHN0YXJyZWQgcmVwb3NpdG9yaWVzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFN0YXJyZWRSZXBvcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdFN0YXJyZWRSZXBvcyhjYikge1xuICAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cygpO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcyh0aGlzLl9fZ2V0U2NvcGVkVXJsKCdzdGFycmVkJyksIHJlcXVlc3RPcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB0aGUgbGlzdCBvZiBzdGFycmVkIGdpc3RzIGZvciB0aGUgdXNlclxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNsaXN0LXN0YXJyZWQtZ2lzdHNcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBhbnkgb3B0aW9ucyB0byByZWZpbmUgdGhlIHNlYXJjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBnaXN0c1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RTdGFycmVkR2lzdHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RTdGFycmVkR2lzdHMob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYiA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICB9XG4gICAgICAgICBvcHRpb25zLnNpbmNlID0gdGhpcy5fZGF0ZVRvSVNPKG9wdGlvbnMuc2luY2UpO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvZ2lzdHMvc3RhcnJlZCcsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IGVtYWlsIGFkZHJlc3NlcyBmb3IgYSB1c2VyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvdXNlcnMvZW1haWxzLyNsaXN0LWVtYWlsLWFkZHJlc3Nlcy1mb3ItYS11c2VyXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGVtYWlsc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldEVtYWlscycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RW1haWxzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy91c2VyL2VtYWlscycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBIYXZlIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIgZm9sbG93IHRoaXMgdXNlclxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3VzZXJzL2ZvbGxvd2Vycy8jZm9sbG93LWEtdXNlclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJuYW1lIC0gdGhlIHVzZXIgdG8gZm9sbG93XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdmb2xsb3cnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvbGxvdyh1c2VybmFtZSwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQVVQnLCAnL3VzZXIvZm9sbG93aW5nLycgKyB1c2VybmFtZSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhdmUgdGhlIGN1cnJlbnRseSBhdXRoZW50aWNhdGVkIHVzZXIgdW5mb2xsb3cgdGhpcyB1c2VyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvdXNlcnMvZm9sbG93ZXJzLyNmb2xsb3ctYS11c2VyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgLSB0aGUgdXNlciB0byB1bmZvbGxvd1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHJlY2VpdmVzIHRydWUgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1bmZvbGxvdycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdW5mb2xsb3codXNlcm5hbWUsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy91c2VyL2ZvbGxvd2luZy8nICsgdXNlcm5hbWUsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGUgYSBuZXcgcmVwb3NpdG9yeSBmb3IgdGhlIGN1cnJlbnRseSBhdXRoZW50aWNhdGVkIHVzZXJcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jY3JlYXRlXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIHRoZSByZXBvc2l0b3J5IGRlZmluaXRpb25cbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIEFQSSByZXNwb25zZVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NyZWF0ZVJlcG8nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJlcG8ob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy91c2VyL3JlcG9zJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuICAgfV0pO1xuXG4gICByZXR1cm4gVXNlcjtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxWelpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJHOW5JaXdpVlhObGNpSXNJblZ6WlhKdVlXMWxJaXdpWVhWMGFDSXNJbUZ3YVVKaGMyVWlMQ0pmWDNWelpYSWlMQ0psYm1Sd2IybHVkQ0lzSW05d2RHbHZibk1pTENKallpSXNJbDluWlhSUGNIUnBiMjV6VjJsMGFFUmxabUYxYkhSeklpd2lTbE5QVGlJc0luTjBjbWx1WjJsbWVTSXNJbDl5WlhGMVpYTjBRV3hzVUdGblpYTWlMQ0pmWDJkbGRGTmpiM0JsWkZWeWJDSXNJbDl5WlhGMVpYTjBJaXdpYzJsdVkyVWlMQ0pmWkdGMFpWUnZTVk5QSWl3aVltVm1iM0psSWl3aWNtVnhkV1Z6ZEU5d2RHbHZibk1pTENKU1pYRjFaWE4wWVdKc1pTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lJN096czdRVUZQUVRzN096dEJRVU5CT3pzN096czdPenM3T3l0bFFWSkJPenM3T3pzN08wRkJVMEVzU1VGQlRVRXNUVUZCVFN4eFFrRkJUU3hoUVVGT0xFTkJRVm83TzBGQlJVRTdPenM3U1VGSFRVTXNTVHM3TzBGQlEwZzdPenM3T3p0QlFVMUJMR2xDUVVGWlF5eFJRVUZhTEVWQlFYTkNReXhKUVVGMFFpeEZRVUUwUWtNc1QwRkJOVUlzUlVGQmNVTTdRVUZCUVRzN1FVRkJRU3c0UjBGRE5VSkVMRWxCUkRSQ0xFVkJRM1JDUXl4UFFVUnpRanM3UVVGRmJFTXNXVUZCUzBNc1RVRkJUQ3hIUVVGalNDeFJRVUZrTzBGQlJtdERPMEZCUjNCRE96dEJRVVZFT3pzN096czdPenM3TzNGRFFVMWxTU3hSTEVWQlFWVTdRVUZEZEVJc1lVRkJTU3hMUVVGTFJDeE5RVUZVTEVWQlFXbENPMEZCUTJRc2JVSkJRVTlETEhWQ1FVTk5MRXRCUVV0RUxFMUJSRmdzVTBGRGNVSkRMRkZCUkhKQ0xHVkJSVTBzUzBGQlMwUXNUVUZHYkVJN1FVRkxSaXhWUVU1RUxFMUJUVTg3UVVGQlJUdEJRVU5PTEc5Q1FVRlJReXhSUVVGU08wRkJRMGNzYjBKQlFVc3NSVUZCVER0QlFVTkhMSGxDUVVGUExFOUJRVkE3TzBGQlJVZ3NiMEpCUVVzc1pVRkJURHRCUVVOQkxHOUNRVUZMTEU5QlFVdzdRVUZEUnl3clFrRkJWMEVzVVVGQldEczdRVUZGU0R0QlFVTkhMRzlEUVVGblFrRXNVVUZCYUVJN1FVRlVUanRCUVZkR08wRkJRMGc3TzBGQlJVUTdPenM3T3pzN096czdaME5CVDFWRExFOHNSVUZCVTBNc1JTeEZRVUZKTzBGQlEzQkNMR0ZCUVVrc1QwRkJUMFFzVDBGQlVDeExRVUZ0UWl4VlFVRjJRaXhGUVVGdFF6dEJRVU5vUTBNc2FVSkJRVXRFTEU5QlFVdzdRVUZEUVVFc2MwSkJRVlVzUlVGQlZqdEJRVU5HT3p0QlFVVkVRU3h0UWtGQlZTeExRVUZMUlN4MVFrRkJUQ3hEUVVFMlFrWXNUMEZCTjBJc1EwRkJWanM3UVVGRlFWQXNjMFJCUVRKRFZTeExRVUZMUXl4VFFVRk1MRU5CUVdWS0xFOUJRV1lzUTBGQk0wTTdRVUZEUVN4blFrRkJUeXhMUVVGTFN5eG5Ra0ZCVEN4RFFVRnpRaXhMUVVGTFF5eGpRVUZNTEVOQlFXOUNMRTlCUVhCQ0xFTkJRWFJDTEVWQlFXOUVUaXhQUVVGd1JDeEZRVUUyUkVNc1JVRkJOMFFzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdLMEpCVFZOQkxFVXNSVUZCU1R0QlFVTldMR2RDUVVGUExFdEJRVXROTEZGQlFVd3NRMEZCWXl4TFFVRmtMRVZCUVhGQ0xFdEJRVXRFTEdOQlFVd3NRMEZCYjBJc1RVRkJjRUlzUTBGQmNrSXNSVUZCYTBRc1NVRkJiRVFzUlVGQmQwUk1MRVZCUVhoRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3TzI5RFFVMWpRU3hGTEVWQlFVazdRVUZEWml4blFrRkJUeXhMUVVGTFRTeFJRVUZNTEVOQlFXTXNTMEZCWkN4RlFVRnhRaXhMUVVGTFJDeGpRVUZNTEVOQlFXOUNMRmRCUVhCQ0xFTkJRWEpDTEVWQlFYVkVMRWxCUVhaRUxFVkJRVFpFVEN4RlFVRTNSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dHZRMEZOWTBFc1JTeEZRVUZKTzBGQlEyWXNaMEpCUVU4c1MwRkJTMDBzVVVGQlRDeERRVUZqTEV0QlFXUXNSVUZCY1VJc1MwRkJTMFFzWTBGQlRDeERRVUZ2UWl4WFFVRndRaXhEUVVGeVFpeEZRVUYxUkN4SlFVRjJSQ3hGUVVFMlJFd3NSVUZCTjBRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3WjBOQlRWVkJMRVVzUlVGQlNUdEJRVU5ZTEdkQ1FVRlBMRXRCUVV0TkxGRkJRVXdzUTBGQll5eExRVUZrTEVWQlFYRkNMRXRCUVV0RUxHTkJRVXdzUTBGQmIwSXNUMEZCY0VJc1EwRkJja0lzUlVGQmJVUXNTVUZCYmtRc1JVRkJlVVJNTEVWQlFYcEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dDNRMEZQYTBKRUxFOHNSVUZCVTBNc1JTeEZRVUZKTzBGQlF6VkNSQ3h0UWtGQlZVRXNWMEZCVnl4RlFVRnlRanRCUVVOQkxHRkJRVWtzVDBGQlQwRXNUMEZCVUN4TFFVRnRRaXhWUVVGMlFpeEZRVUZ0UXp0QlFVTm9RME1zYVVKQlFVdEVMRTlCUVV3N1FVRkRRVUVzYzBKQlFWVXNSVUZCVmp0QlFVTkdPenRCUVVWRVFTeHBRa0ZCVVZFc1MwRkJVaXhIUVVGblFpeExRVUZMUXl4VlFVRk1MRU5CUVdkQ1ZDeFJRVUZSVVN4TFFVRjRRaXhEUVVGb1FqdEJRVU5CVWl4cFFrRkJVVlVzVFVGQlVpeEhRVUZwUWl4TFFVRkxSQ3hWUVVGTUxFTkJRV2RDVkN4UlFVRlJWU3hOUVVGNFFpeERRVUZxUWpzN1FVRkZRU3huUWtGQlR5eExRVUZMU0N4UlFVRk1MRU5CUVdNc1MwRkJaQ3hGUVVGeFFpeExRVUZMUkN4alFVRk1MRU5CUVc5Q0xHVkJRWEJDTEVOQlFYSkNMRVZCUVRKRVRpeFBRVUV6UkN4RlFVRnZSVU1zUlVGQmNFVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN2FVTkJUVmRCTEVVc1JVRkJTVHRCUVVOYUxHZENRVUZQTEV0QlFVdE5MRkZCUVV3c1EwRkJZeXhMUVVGa0xFVkJRWEZDTEV0QlFVdEVMR05CUVV3c1EwRkJiMElzUlVGQmNFSXNRMEZCY2tJc1JVRkJPRU1zU1VGQk9VTXNSVUZCYjBSTUxFVkJRWEJFTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPM1ZEUVUxcFFrRXNSU3hGUVVGSk8wRkJRMnhDTEdGQlFVbFZMR2xDUVVGcFFpeExRVUZMVkN4MVFrRkJUQ3hGUVVGeVFqdEJRVU5CTEdkQ1FVRlBMRXRCUVV0SExHZENRVUZNTEVOQlFYTkNMRXRCUVV0RExHTkJRVXdzUTBGQmIwSXNVMEZCY0VJc1EwRkJkRUlzUlVGQmMwUkxMR05CUVhSRUxFVkJRWE5GVml4RlFVRjBSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdkVU5CVDJsQ1JDeFBMRVZCUVZORExFVXNSVUZCU1R0QlFVTXpRa1FzYlVKQlFWVkJMRmRCUVZjc1JVRkJja0k3UVVGRFFTeGhRVUZKTEU5QlFVOUJMRTlCUVZBc1MwRkJiVUlzVlVGQmRrSXNSVUZCYlVNN1FVRkRhRU5ETEdsQ1FVRkxSQ3hQUVVGTU8wRkJRMEZCTEhOQ1FVRlZMRVZCUVZZN1FVRkRSanRCUVVORVFTeHBRa0ZCVVZFc1MwRkJVaXhIUVVGblFpeExRVUZMUXl4VlFVRk1MRU5CUVdkQ1ZDeFJRVUZSVVN4TFFVRjRRaXhEUVVGb1FqdEJRVU5CTEdkQ1FVRlBMRXRCUVV0RUxGRkJRVXdzUTBGQll5eExRVUZrTEVWQlFYRkNMR2RDUVVGeVFpeEZRVUYxUTFBc1QwRkJka01zUlVGQlowUkRMRVZCUVdoRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3TzJkRFFVMVZRU3hGTEVWQlFVazdRVUZEV0N4blFrRkJUeXhMUVVGTFRTeFJRVUZNTEVOQlFXTXNTMEZCWkN4RlFVRnhRaXhqUVVGeVFpeEZRVUZ4UXl4SlFVRnlReXhGUVVFeVEwNHNSVUZCTTBNc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3paQ1FVOVBUaXhSTEVWQlFWVk5MRVVzUlVGQlNUdEJRVU5zUWl4blFrRkJUeXhMUVVGTFRTeFJRVUZNTEVOQlFXTXNTMEZCWkN4MVFrRkJkME5hTEZGQlFYaERMRVZCUVc5RUxFbEJRWEJFTEVWQlFUQkVUU3hGUVVFeFJDeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN0swSkJUMU5PTEZFc1JVRkJWVTBzUlN4RlFVRkpPMEZCUTNCQ0xHZENRVUZQTEV0QlFVdE5MRkZCUVV3c1EwRkJZeXhSUVVGa0xIVkNRVUV5UTFvc1VVRkJNME1zUlVGQmRVUXNTVUZCZGtRc1JVRkJOa1JOTEVWQlFUZEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dHBRMEZQVjBRc1R5eEZRVUZUUXl4RkxFVkJRVWs3UVVGRGNrSXNaMEpCUVU4c1MwRkJTMDBzVVVGQlRDeERRVUZqTEUxQlFXUXNSVUZCYzBJc1lVRkJkRUlzUlVGQmNVTlFMRTlCUVhKRExFVkJRVGhEUXl4RlFVRTVReXhEUVVGUU8wRkJRMFk3T3pzN1JVRjBUV1ZYTEhGQ096dEJRWGxOYmtKRExFOUJRVTlETEU5QlFWQXNSMEZCYVVKd1FpeEpRVUZxUWlJc0ltWnBiR1VpT2lKVmMyVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCQVptbHNaVnh1SUNvZ1FHTnZjSGx5YVdkb2RDQWdNakF4TXlCTmFXTm9ZV1ZzSUVGMVpuSmxhWFJsY2lBb1JHVjJaV3h2Y0cxbGJuUWdVMlZsWkNrZ1lXNWtJREl3TVRZZ1dXRm9iMjhnU1c1akxseHVJQ29nUUd4cFkyVnVjMlVnSUNBZ1RHbGpaVzV6WldRZ2RXNWtaWElnZTBCc2FXNXJJR2gwZEhCek9pOHZjM0JrZUM1dmNtY3ZiR2xqWlc1elpYTXZRbE5FTFRNdFEyeGhkWE5sTFVOc1pXRnlMbWgwYld3Z1FsTkVMVE10UTJ4aGRYTmxMVU5zWldGeWZTNWNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lFZHBkR2gxWWk1cWN5QnBjeUJtY21WbGJIa2daR2x6ZEhKcFluVjBZV0pzWlM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnVW1WeGRXVnpkR0ZpYkdVZ1puSnZiU0FuTGk5U1pYRjFaWE4wWVdKc1pTYzdYRzVwYlhCdmNuUWdaR1ZpZFdjZ1puSnZiU0FuWkdWaWRXY25PMXh1WTI5dWMzUWdiRzluSUQwZ1pHVmlkV2NvSjJkcGRHaDFZanAxYzJWeUp5azdYRzVjYmk4cUtseHVJQ29nUVNCVmMyVnlJR0ZzYkc5M2N5QnpZMjl3YVc1bklHOW1JRUZRU1NCeVpYRjFaWE4wY3lCMGJ5QmhJSEJoY25ScFkzVnNZWElnUjJsMGFIVmlJSFZ6WlhJdVhHNGdLaTljYm1Oc1lYTnpJRlZ6WlhJZ1pYaDBaVzVrY3lCU1pYRjFaWE4wWVdKc1pTQjdYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElGVnpaWEl1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXM1Z6WlhKdVlXMWxYU0F0SUhSb1pTQjFjMlZ5SUhSdklIVnpaU0JtYjNJZ2RYTmxjaTF6WTI5d1pXUWdjWFZsY21sbGMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWhkWFJvZlNCYllYVjBhRjBnTFNCcGJtWnZjbTFoZEdsdmJpQnlaWEYxYVhKbFpDQjBieUJoZFhSb1pXNTBhV05oZEdVZ2RHOGdSMmwwYUhWaVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzJGd2FVSmhjMlU5YUhSMGNITTZMeTloY0drdVoybDBhSFZpTG1OdmJWMGdMU0IwYUdVZ1ltRnpaU0JIYVhSb2RXSWdRVkJKSUZWU1RGeHVJQ0FnSUNvdlhHNGdJQ0JqYjI1emRISjFZM1J2Y2loMWMyVnlibUZ0WlN3Z1lYVjBhQ3dnWVhCcFFtRnpaU2tnZTF4dUlDQWdJQ0FnYzNWd1pYSW9ZWFYwYUN3Z1lYQnBRbUZ6WlNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlmZFhObGNpQTlJSFZ6WlhKdVlXMWxPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0IwYUdVZ2RYSnNJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDNGdLR1JsY0dWdVpHVnVkQ0J2YmlCcFppQjNaU2R5WlNCeVpYRjFaWE4wYVc1bklHWnZjaUIwYUdVZ1lYVjBhR1Z1ZEdsallYUmxaQ0IxYzJWeUlHOXlJRzV2ZENsY2JpQWdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdaVzVrY0c5cGJuUWdMU0IwYUdVZ1pXNWtjRzlwYm5RZ1ltVnBibWNnY21WeGRXVnpkR1ZrWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJQzBnZEdobElISmxjMjlzZG1Wa0lHVnVaSEJ2YVc1MFhHNGdJQ0FnS2k5Y2JpQWdJRjlmWjJWMFUyTnZjR1ZrVlhKc0tHVnVaSEJ2YVc1MEtTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZYM1Z6WlhJcElIdGNiaUFnSUNBZ0lDQWdJSEpsZEhWeWJpQmxibVJ3YjJsdWRDQS9YRzRnSUNBZ0lDQWdJQ0FnSUNCZ0wzVnpaWEp6THlSN2RHaHBjeTVmWDNWelpYSjlMeVI3Wlc1a2NHOXBiblI5WUNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0JnTDNWelpYSnpMeVI3ZEdocGN5NWZYM1Z6WlhKOVlGeHVJQ0FnSUNBZ0lDQWdJQ0FnTzF4dVhHNGdJQ0FnSUNCOUlHVnNjMlVnZXlBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxYRzRnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR1Z1WkhCdmFXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNjbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjdmRYTmxjaWM3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyNXZkR2xtYVdOaGRHbHZibk1uT2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbloybHpkSE1uT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0F2Skh0bGJtUndiMmx1ZEgxZ08xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0F2ZFhObGNpOGtlMlZ1WkhCdmFXNTBmV0E3WEc0Z0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjBhR1VnZFhObGNpZHpJSEpsY0c5emFYUnZjbWxsYzF4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMeU5zYVhOMExYVnpaWEl0Y21Wd2IzTnBkRzl5YVdWelhHNGdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnVzI5d2RHbHZibk05ZTMxZElDMGdZVzU1SUc5d2RHbHZibk1nZEc4Z2NtVm1hVzVsSUhSb1pTQnpaV0Z5WTJoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUd4cGMzUWdiMllnY21Wd2IzTnBkRzl5YVdWelhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JTWlhCdmN5aHZjSFJwYjI1ekxDQmpZaWtnZTF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNCallpQTlJRzl3ZEdsdmJuTTdYRzRnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnZTMwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQjBhR2x6TGw5blpYUlBjSFJwYjI1elYybDBhRVJsWm1GMWJIUnpLRzl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdJQ0JzYjJjb1lFWmxkR05vYVc1bklISmxjRzl6YVhSdmNtbGxjeUIzYVhSb0lHOXdkR2x2Ym5NNklDUjdTbE5QVGk1emRISnBibWRwWm5rb2IzQjBhVzl1Y3lsOVlDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkRUZzYkZCaFoyVnpLSFJvYVhNdVgxOW5aWFJUWTI5d1pXUlZjbXdvSjNKbGNHOXpKeWtzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCTWFYTjBJSFJvWlNCdmNtZHpJSFJvWVhRZ2RHaGxJSFZ6WlhJZ1ltVnNiMjVuY3lCMGIxeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyOXlaM012STJ4cGMzUXRkWE5sY2kxdmNtZGhibWw2WVhScGIyNXpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlHOXlaMkZ1YVhwaGRHbHZibk5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRFOXlaM01vWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQjBhR2x6TGw5ZloyVjBVMk52Y0dWa1ZYSnNLQ2R2Y21kekp5a3NJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk1hWE4wSUdadmJHeHZkMlZ5Y3lCdlppQmhJSFZ6WlhKY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5MWMyVnljeTltYjJ4c2IzZGxjbk12STJ4cGMzUXRabTlzYkc5M1pYSnpMVzltTFdFdGRYTmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQm1iMnhzYjNkbGNuTmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiR2x6ZEVadmJHeHZkMlZ5Y3loallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJSFJvYVhNdVgxOW5aWFJUWTI5d1pXUlZjbXdvSjJadmJHeHZkMlZ5Y3ljcExDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RHbHpkQ0IxYzJWeWN5Qm1iMnhzYjNkbFpDQmllU0JoYm05MGFHVnlJSFZ6WlhKY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5MWMyVnljeTltYjJ4c2IzZGxjbk12STJ4cGMzUXRkWE5sY25NdFptOXNiRzkzWldRdFlua3RZVzV2ZEdobGNpMTFjMlZ5WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JSGRvYnlCaElIVnpaWElnYVhNZ1ptOXNiRzkzYVc1blhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JHYjJ4c2IzZHBibWNvWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQjBhR2x6TGw5ZloyVjBVMk52Y0dWa1ZYSnNLQ2RtYjJ4c2IzZHBibWNuS1N3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUhWelpYSW5jeUJuYVhOMGMxeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyZHBjM1J6THlOc2FYTjBMV0V0ZFhObGNuTXRaMmx6ZEhOY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUd4cGMzUWdiMllnWjJsemRITmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiR2x6ZEVkcGMzUnpLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z2RHaHBjeTVmWDJkbGRGTmpiM0JsWkZWeWJDZ25aMmx6ZEhNbktTd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFeHBjM1FnZEdobElIVnpaWEluY3lCdWIzUnBabWxqWVhScGIyNXpYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZZV04wYVhacGRIa3ZibTkwYVdacFkyRjBhVzl1Y3k4amJHbHpkQzE1YjNWeUxXNXZkR2xtYVdOaGRHbHZibk5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJiM0IwYVc5dWN6MTdmVjBnTFNCaGJua2diM0IwYVc5dWN5QjBieUJ5WldacGJtVWdkR2hsSUhObFlYSmphRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQnlaWEJ2YzJsMGIzSnBaWE5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRFNXZkR2xtYVdOaGRHbHZibk1vYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNCallpQTlJRzl3ZEdsdmJuTTdYRzRnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnZTMwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHOXdkR2x2Ym5NdWMybHVZMlVnUFNCMGFHbHpMbDlrWVhSbFZHOUpVMDhvYjNCMGFXOXVjeTV6YVc1alpTazdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxtSmxabTl5WlNBOUlIUm9hWE11WDJSaGRHVlViMGxUVHlodmNIUnBiMjV6TG1KbFptOXlaU2s3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCMGFHbHpMbDlmWjJWMFUyTnZjR1ZrVlhKc0tDZHViM1JwWm1sallYUnBiMjV6Snlrc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQlRhRzkzSUhSb1pTQjFjMlZ5SjNNZ2NISnZabWxzWlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNWelpYSnpMeU5uWlhRdFlTMXphVzVuYkdVdGRYTmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdkWE5sY2lkeklHbHVabTl5YldGMGFXOXVYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEZCeWIyWnBiR1VvWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQjBhR2x6TGw5ZloyVjBVMk52Y0dWa1ZYSnNLQ2NuS1N3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVkbGRITWdkR2hsSUd4cGMzUWdiMllnYzNSaGNuSmxaQ0J5WlhCdmMybDBiM0pwWlhNZ1ptOXlJSFJvWlNCMWMyVnlYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZZV04wYVhacGRIa3ZjM1JoY25KcGJtY3ZJMnhwYzNRdGNtVndiM05wZEc5eWFXVnpMV0psYVc1bkxYTjBZWEp5WldSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUd4cGMzUWdiMllnYzNSaGNuSmxaQ0J5WlhCdmMybDBiM0pwWlhOY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2JHbHpkRk4wWVhKeVpXUlNaWEJ2Y3loallpa2dlMXh1SUNBZ0lDQWdiR1YwSUhKbGNYVmxjM1JQY0hScGIyNXpJRDBnZEdocGN5NWZaMlYwVDNCMGFXOXVjMWRwZEdoRVpXWmhkV3gwY3lncE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUkJiR3hRWVdkbGN5aDBhR2x6TGw5ZloyVjBVMk52Y0dWa1ZYSnNLQ2R6ZEdGeWNtVmtKeWtzSUhKbGNYVmxjM1JQY0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMGN5QjBhR1VnYkdsemRDQnZaaUJ6ZEdGeWNtVmtJR2RwYzNSeklHWnZjaUIwYUdVZ2RYTmxjbHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmRwYzNSekx5TnNhWE4wTFhOMFlYSnlaV1F0WjJsemRITmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmIzQjBhVzl1Y3oxN2ZWMGdMU0JoYm5rZ2IzQjBhVzl1Y3lCMGJ5QnlaV1pwYm1VZ2RHaGxJSE5sWVhKamFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHbHpkQ0J2WmlCbmFYTjBjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JzYVhOMFUzUmhjbkpsWkVkcGMzUnpLRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnWTJJZ1BTQnZjSFJwYjI1ek8xeHVJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5QTlJSHQ5TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYjNCMGFXOXVjeTV6YVc1alpTQTlJSFJvYVhNdVgyUmhkR1ZVYjBsVFR5aHZjSFJwYjI1ekxuTnBibU5sS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENBbkwyZHBjM1J6TDNOMFlYSnlaV1FuTENCdmNIUnBiMjV6TENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RHbHpkQ0JsYldGcGJDQmhaR1J5WlhOelpYTWdabTl5SUdFZ2RYTmxjbHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM1Z6WlhKekwyVnRZV2xzY3k4amJHbHpkQzFsYldGcGJDMWhaR1J5WlhOelpYTXRabTl5TFdFdGRYTmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQmxiV0ZwYkhOY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBSVzFoYVd4ektHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnSnk5MWMyVnlMMlZ0WVdsc2N5Y3NJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQklZWFpsSUhSb1pTQmhkWFJvWlc1MGFXTmhkR1ZrSUhWelpYSWdabTlzYkc5M0lIUm9hWE1nZFhObGNseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzVnpaWEp6TDJadmJHeHZkMlZ5Y3k4alptOXNiRzkzTFdFdGRYTmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIVnpaWEp1WVcxbElDMGdkR2hsSUhWelpYSWdkRzhnWm05c2JHOTNYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSeWRXVWdhV1lnZEdobElISmxjWFZsYzNRZ2MzVmpZMlZsWkhOY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1ptOXNiRzkzS0hWelpYSnVZVzFsTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCVlZDY3NJR0F2ZFhObGNpOW1iMnhzYjNkcGJtY3ZKSHQxYzJWeWJtRnRaWDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nU0dGMlpTQjBhR1VnWTNWeWNtVnVkR3g1SUdGMWRHaGxiblJwWTJGMFpXUWdkWE5sY2lCMWJtWnZiR3h2ZHlCMGFHbHpJSFZ6WlhKY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5MWMyVnljeTltYjJ4c2IzZGxjbk12STJadmJHeHZkeTFoTFhWelpYSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMWMyVnlibUZ0WlNBdElIUm9aU0IxYzJWeUlIUnZJSFZ1Wm05c2JHOTNYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdjbVZqWldsMlpYTWdkSEoxWlNCcFppQjBhR1VnY21WeGRXVnpkQ0J6ZFdOalpXVmtjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0IxYm1admJHeHZkeWgxYzJWeWJtRnRaU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RFUlV4RlZFVW5MQ0JnTDNWelpYSXZabTlzYkc5M2FXNW5MeVI3ZFhObGNtNWhiV1Y5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QnlaWEJ2YzJsMGIzSjVJR1p2Y2lCMGFHVWdZM1Z5Y21WdWRHeDVJR0YxZEdobGJuUnBZMkYwWldRZ2RYTmxjbHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekx5TmpjbVZoZEdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnZEdobElISmxjRzl6YVhSdmNua2daR1ZtYVc1cGRHbHZibHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdRVkJKSUhKbGMzQnZibk5sWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaVkpsY0c4b2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnSnk5MWMyVnlMM0psY0c5ekp5d2diM0IwYVc5dWN5d2dZMklwTzF4dUlDQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGVnpaWEk3WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVzZXIuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxMyBNaWNoYWVsIEF1ZnJlaXRlciAoRGV2ZWxvcG1lbnQgU2VlZCkgYW5kIDIwMTYgWWFob28gSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4vKipcbiAqIElzc3VlIHdyYXBzIHRoZSBmdW5jdGlvbmFsaXR5IHRvIGdldCBpc3N1ZXMgZm9yIHJlcG9zaXRvcmllc1xuICovXG52YXIgSXNzdWUgPSBmdW5jdGlvbiAoX1JlcXVlc3RhYmxlKSB7XG4gIF9pbmhlcml0cyhJc3N1ZSwgX1JlcXVlc3RhYmxlKTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IElzc3VlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXBvc2l0b3J5IC0gdGhlIGZ1bGwgbmFtZSBvZiB0aGUgcmVwb3NpdG9yeSAoYDp1c2VyLzpyZXBvYCkgdG8gZ2V0IGlzc3VlcyBmb3JcbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAqL1xuICBmdW5jdGlvbiBJc3N1ZShyZXBvc2l0b3J5LCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElzc3VlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJc3N1ZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElzc3VlKSkuY2FsbCh0aGlzLCBhdXRoLCBhcGlCYXNlKSk7XG5cbiAgICBfdGhpcy5fX3JlcG9zaXRvcnkgPSByZXBvc2l0b3J5O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaXNzdWVcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy8jY3JlYXRlLWFuLWlzc3VlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpc3N1ZURhdGEgLSB0aGUgaXNzdWUgdG8gY3JlYXRlXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGNyZWF0ZWQgaXNzdWVcbiAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhJc3N1ZSwgW3tcbiAgICBrZXk6ICdjcmVhdGVJc3N1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUlzc3VlKGlzc3VlRGF0YSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2lzc3VlcycsIGlzc3VlRGF0YSwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIGlzc3VlcyBmb3IgdGhlIHJlcG9zaXRvcnlcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzLyNsaXN0LWlzc3Vlcy1mb3ItYS1yZXBvc2l0b3J5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBmaWx0ZXJpbmcgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGFycmF5IG9mIGlzc3Vlc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdElzc3VlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RJc3N1ZXMob3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXMoJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2lzc3VlcycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBldmVudHMgZm9yIGFuIGlzc3VlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy9ldmVudHMvI2xpc3QtZXZlbnRzLWZvci1hbi1pc3N1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpc3N1ZSAtIHRoZSBpc3N1ZSB0byBnZXQgZXZlbnRzIGZvclxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgZXZlbnRzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0SXNzdWVFdmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0SXNzdWVFdmVudHMoaXNzdWUsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2lzc3Vlcy8nICsgaXNzdWUgKyAnL2V2ZW50cycsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IGNvbW1lbnRzIG9uIGFuIGlzc3VlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy9jb21tZW50cy8jbGlzdC1jb21tZW50cy1vbi1hbi1pc3N1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpc3N1ZSAtIHRoZSBpZCBvZiB0aGUgaXNzdWUgdG8gZ2V0IGNvbW1lbnRzIGZyb21cbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBjb21tZW50c1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdElzc3VlQ29tbWVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0SXNzdWVDb21tZW50cyhpc3N1ZSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvaXNzdWVzLycgKyBpc3N1ZSArICcvY29tbWVudHMnLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc2luZ2xlIGNvbW1lbnQgb24gYW4gaXNzdWVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2NvbW1lbnRzLyNnZXQtYS1zaW5nbGUtY29tbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIHRoZSBjb21tZW50IGlkIHRvIGdldFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGNvbW1lbnRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldElzc3VlQ29tbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldElzc3VlQ29tbWVudChpZCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvaXNzdWVzL2NvbW1lbnRzLycgKyBpZCwgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbW1lbnQgb24gYW4gaXNzdWVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2NvbW1lbnRzLyNjcmVhdGUtYS1jb21tZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlzc3VlIC0gdGhlIGlkIG9mIHRoZSBpc3N1ZSB0byBjb21tZW50IG9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1lbnQgLSB0aGUgY29tbWVudCB0byBhZGRcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBjcmVhdGVkIGNvbW1lbnRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZUlzc3VlQ29tbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUlzc3VlQ29tbWVudChpc3N1ZSwgY29tbWVudCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2lzc3Vlcy8nICsgaXNzdWUgKyAnL2NvbW1lbnRzJywgeyBib2R5OiBjb21tZW50IH0sIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFZGl0IGEgY29tbWVudCBvbiBhbiBpc3N1ZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvY29tbWVudHMvI2VkaXQtYS1jb21tZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIC0gdGhlIGNvbW1lbnQgaWQgdG8gZWRpdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21tZW50IC0gdGhlIGNvbW1lbnQgdG8gZWRpdFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGVkaXRlZCBjb21tZW50XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlZGl0SXNzdWVDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWRpdElzc3VlQ29tbWVudChpZCwgY29tbWVudCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9pc3N1ZXMvY29tbWVudHMvJyArIGlkLCB7IGJvZHk6IGNvbW1lbnQgfSwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGNvbW1lbnQgb24gYW4gaXNzdWVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2NvbW1lbnRzLyNkZWxldGUtYS1jb21tZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIC0gdGhlIGNvbW1lbnQgaWQgdG8gZGVsZXRlXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZUlzc3VlQ29tbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUlzc3VlQ29tbWVudChpZCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvaXNzdWVzL2NvbW1lbnRzLycgKyBpZCwgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVkaXQgYW4gaXNzdWVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzLyNlZGl0LWFuLWlzc3VlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlzc3VlIC0gdGhlIGlzc3VlIG51bWJlciB0byBlZGl0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlzc3VlRGF0YSAtIHRoZSBuZXcgaXNzdWUgZGF0YVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG1vZGlmaWVkIGlzc3VlXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlZGl0SXNzdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0SXNzdWUoaXNzdWUsIGlzc3VlRGF0YSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9pc3N1ZXMvJyArIGlzc3VlLCBpc3N1ZURhdGEsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBwYXJ0aWN1bGFyIGlzc3VlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy8jZ2V0LWEtc2luZ2xlLWlzc3VlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlzc3VlIC0gdGhlIGlzc3VlIG51bWJlciB0byBmZXRjaFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGlzc3VlXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRJc3N1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldElzc3VlKGlzc3VlLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9pc3N1ZXMvJyArIGlzc3VlLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgbWlsZXN0b25lcyBmb3IgdGhlIHJlcG9zaXRvcnlcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL21pbGVzdG9uZXMvI2xpc3QtbWlsZXN0b25lcy1mb3ItYS1yZXBvc2l0b3J5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBmaWx0ZXJpbmcgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGFycmF5IG9mIG1pbGVzdG9uZXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpc3RNaWxlc3RvbmVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdE1pbGVzdG9uZXMob3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbWlsZXN0b25lcycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBtaWxlc3RvbmVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL21pbGVzdG9uZXMvI2dldC1hLXNpbmdsZS1taWxlc3RvbmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWlsZXN0b25lIC0gdGhlIGlkIG9mIHRoZSBtaWxlc3RvbmUgdG8gZmV0Y2hcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBtaWxlc3RvbmVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldE1pbGVzdG9uZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1pbGVzdG9uZShtaWxlc3RvbmUsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL21pbGVzdG9uZXMvJyArIG1pbGVzdG9uZSwgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBtaWxlc3RvbmVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL21pbGVzdG9uZXMvI2NyZWF0ZS1hLW1pbGVzdG9uZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtaWxlc3RvbmVEYXRhIC0gdGhlIG1pbGVzdG9uZSBkZWZpbml0aW9uXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbWlsZXN0b25lXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVNaWxlc3RvbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVNaWxlc3RvbmUobWlsZXN0b25lRGF0YSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL21pbGVzdG9uZXMnLCBtaWxlc3RvbmVEYXRhLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRWRpdCBhIG1pbGVzdG9uZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbWlsZXN0b25lcy8jdXBkYXRlLWEtbWlsZXN0b25lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1pbGVzdG9uZSAtIHRoZSBpZCBvZiB0aGUgbWlsZXN0b25lIHRvIGVkaXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWlsZXN0b25lRGF0YSAtIHRoZSB1cGRhdGVzIHRvIG1ha2UgdG8gdGhlIG1pbGVzdG9uZVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHVwZGF0ZWQgbWlsZXN0b25lXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlZGl0TWlsZXN0b25lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWRpdE1pbGVzdG9uZShtaWxlc3RvbmUsIG1pbGVzdG9uZURhdGEsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbWlsZXN0b25lcy8nICsgbWlsZXN0b25lLCBtaWxlc3RvbmVEYXRhLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgbWlsZXN0b25lICh0aGlzIGlzIGRpc3RpbmN0IGZyb20gY2xvc2luZyBhIG1pbGVzdG9uZSlcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL21pbGVzdG9uZXMvI2RlbGV0ZS1hLW1pbGVzdG9uZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtaWxlc3RvbmUgLSB0aGUgaWQgb2YgdGhlIG1pbGVzdG9uZSB0byBkZWxldGVcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBzdGF0dXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZU1pbGVzdG9uZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZU1pbGVzdG9uZShtaWxlc3RvbmUsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL21pbGVzdG9uZXMvJyArIG1pbGVzdG9uZSwgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBsYWJlbFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbGFiZWxzLyNjcmVhdGUtYS1sYWJlbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsYWJlbERhdGEgLSB0aGUgbGFiZWwgZGVmaW5pdGlvblxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGxhYmVsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVMYWJlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUxhYmVsKGxhYmVsRGF0YSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2xhYmVscycsIGxhYmVsRGF0YSwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIGxhYmVscyBmb3IgdGhlIHJlcG9zaXRvcnlcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2xhYmVscy8jbGlzdC1hbGwtbGFiZWxzLWZvci10aGlzLXJlcG9zaXRvcnlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGZpbHRlcmluZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgYXJyYXkgb2YgbGFiZWxzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0TGFiZWxzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdExhYmVscyhvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9sYWJlbHMnLCBvcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbGFiZWxcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2xhYmVscy8jZ2V0LWEtc2luZ2xlLWxhYmVsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsIC0gdGhlIG5hbWUgb2YgdGhlIGxhYmVsIHRvIGZldGNoXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGFiZWxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldExhYmVsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFiZWwobGFiZWwsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2xhYmVscy8nICsgbGFiZWwsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFZGl0IGEgbGFiZWxcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2xhYmVscy8jdXBkYXRlLWEtbGFiZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSB0aGUgbmFtZSBvZiB0aGUgbGFiZWwgdG8gZWRpdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsYWJlbERhdGEgLSB0aGUgdXBkYXRlcyB0byBtYWtlIHRvIHRoZSBsYWJlbFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHVwZGF0ZWQgbGFiZWxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VkaXRMYWJlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXRMYWJlbChsYWJlbCwgbGFiZWxEYXRhLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2xhYmVscy8nICsgbGFiZWwsIGxhYmVsRGF0YSwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGxhYmVsXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy9sYWJlbHMvI2RlbGV0ZS1hLWxhYmVsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsIC0gdGhlIG5hbWUgb2YgdGhlIGxhYmVsIHRvIGRlbGV0ZVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHN0YXR1c1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlTGFiZWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVMYWJlbChsYWJlbCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbGFiZWxzLycgKyBsYWJlbCwgbnVsbCwgY2IpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJc3N1ZTtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJc3N1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrbHpjM1ZsTG1weklsMHNJbTVoYldWeklqcGJJa2x6YzNWbElpd2ljbVZ3YjNOcGRHOXllU0lzSW1GMWRHZ2lMQ0poY0dsQ1lYTmxJaXdpWDE5eVpYQnZjMmwwYjNKNUlpd2lhWE56ZFdWRVlYUmhJaXdpWTJJaUxDSmZjbVZ4ZFdWemRDSXNJbTl3ZEdsdmJuTWlMQ0pmY21WeGRXVnpkRUZzYkZCaFoyVnpJaXdpYVhOemRXVWlMQ0pwWkNJc0ltTnZiVzFsYm5RaUxDSmliMlI1SWl3aWJXbHNaWE4wYjI1bElpd2liV2xzWlhOMGIyNWxSR0YwWVNJc0lteGhZbVZzUkdGMFlTSXNJbXhoWW1Wc0lpd2lVbVZ4ZFdWemRHRmliR1VpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenM3TzBGQlQwRTdPenM3T3pzN096czdLMlZCVUVFN096czdPenM3UVVGVFFUczdPMGxCUjAxQkxFczdPenRCUVVOSU96czdPenM3UVVGTlFTeHBRa0ZCV1VNc1ZVRkJXaXhGUVVGM1FrTXNTVUZCZUVJc1JVRkJPRUpETEU5QlFUbENMRVZCUVhWRE8wRkJRVUU3TzBGQlFVRXNPRWRCUXpsQ1JDeEpRVVE0UWl4RlFVTjRRa01zVDBGRWQwSTdPMEZCUlhCRExGVkJRVXRETEZsQlFVd3NSMEZCYjBKSUxGVkJRWEJDTzBGQlJtOURPMEZCUjNSRE96dEJRVVZFT3pzN096czdPenM3T3p0blEwRlBXVWtzVXl4RlFVRlhReXhGTEVWQlFVazdRVUZEZUVJc1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUVUZCWkN4alFVRm5ReXhMUVVGTFNDeFpRVUZ5UXl4alFVRTBSRU1zVTBGQk5VUXNSVUZCZFVWRExFVkJRWFpGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenNyUWtGUFYwVXNUeXhGUVVGVFJpeEZMRVZCUVVrN1FVRkRja0lzWVVGQlR5eExRVUZMUnl4blFrRkJUQ3hoUVVGblF5eExRVUZMVEN4WlFVRnlReXhqUVVFMFJFa3NUMEZCTlVRc1JVRkJjVVZHTEVWQlFYSkZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dHZRMEZQWjBKSkxFc3NSVUZCVDBvc1JTeEZRVUZKTzBGQlEzaENMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMGdzV1VGQmNFTXNaMEpCUVRKRVRTeExRVUV6UkN4alFVRXlSU3hKUVVFelJTeEZRVUZwUmtvc1JVRkJha1lzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPM05EUVU5clFra3NTeXhGUVVGUFNpeEZMRVZCUVVrN1FVRkRNVUlzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMU0N4WlFVRndReXhuUWtGQk1rUk5MRXRCUVRORUxHZENRVUUyUlN4SlFVRTNSU3hGUVVGdFJrb3NSVUZCYmtZc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzI5RFFVOW5Ra3NzUlN4RlFVRkpUQ3hGTEVWQlFVazdRVUZEY2tJc1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFNDeFpRVUZ3UXl4NVFrRkJiMFZQTEVWQlFYQkZMRVZCUVRCRkxFbEJRVEZGTEVWQlFXZEdUQ3hGUVVGb1JpeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN08zVkRRVkZ0UWtrc1N5eEZRVUZQUlN4UExFVkJRVk5PTEVVc1JVRkJTVHRCUVVOd1F5eGhRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhOUVVGa0xHTkJRV2RETEV0QlFVdElMRmxCUVhKRExHZENRVUUwUkUwc1MwRkJOVVFzWjBKQlFUaEZMRVZCUVVOSExFMUJRVTFFTEU5QlFWQXNSVUZCT1VVc1JVRkJLMFpPTEVWQlFTOUdMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdjVU5CVVdsQ1N5eEZMRVZCUVVsRExFOHNSVUZCVTA0c1JTeEZRVUZKTzBGQlF5OUNMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEU5QlFXUXNZMEZCYVVNc1MwRkJTMGdzV1VGQmRFTXNlVUpCUVhORlR5eEZRVUYwUlN4RlFVRTBSU3hGUVVGRFJTeE5RVUZOUkN4UFFVRlFMRVZCUVRWRkxFVkJRVFpHVGl4RlFVRTNSaXhEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdkVU5CVDIxQ1N5eEZMRVZCUVVsTUxFVXNSVUZCU1R0QlFVTjRRaXhoUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4UlFVRmtMR05CUVd0RExFdEJRVXRJTEZsQlFYWkRMSGxDUVVGMVJVOHNSVUZCZGtVc1JVRkJOa1VzU1VGQk4wVXNSVUZCYlVaTUxFVkJRVzVHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3T0VKQlVWVkpMRXNzUlVGQlQwd3NVeXhGUVVGWFF5eEZMRVZCUVVrN1FVRkROMElzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1QwRkJaQ3hqUVVGcFF5eExRVUZMU0N4WlFVRjBReXhuUWtGQk5rUk5MRXRCUVRkRUxFVkJRWE5GVEN4VFFVRjBSU3hGUVVGcFJrTXNSVUZCYWtZc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3paQ1FVOVRTU3hMTEVWQlFVOUtMRVVzUlVGQlNUdEJRVU5xUWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0SUxGbEJRWEJETEdkQ1FVRXlSRTBzUzBGQk0wUXNSVUZCYjBVc1NVRkJjRVVzUlVGQk1FVktMRVZCUVRGRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0dFEwRlBaVVVzVHl4RlFVRlRSaXhGTEVWQlFVazdRVUZEZWtJc1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFNDeFpRVUZ3UXl4clFrRkJLMFJKTEU5QlFTOUVMRVZCUVhkRlJpeEZRVUY0UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3YVVOQlQyRlJMRk1zUlVGQlYxSXNSU3hGUVVGSk8wRkJRM3BDTEdGQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFdEJRV1FzWTBGQkswSXNTMEZCUzBnc1dVRkJjRU1zYjBKQlFTdEVWU3hUUVVFdlJDeEZRVUUwUlN4SlFVRTFSU3hGUVVGclJsSXNSVUZCYkVZc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzI5RFFVOW5RbE1zWVN4RlFVRmxWQ3hGTEVWQlFVazdRVUZEYUVNc1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUVUZCWkN4alFVRm5ReXhMUVVGTFNDeFpRVUZ5UXl4clFrRkJaMFZYTEdGQlFXaEZMRVZCUVN0RlZDeEZRVUV2UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3TzJ0RFFWRmpVU3hUTEVWQlFWZERMR0VzUlVGQlpWUXNSU3hGUVVGSk8wRkJRM3BETEdGQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFOUJRV1FzWTBGQmFVTXNTMEZCUzBnc1dVRkJkRU1zYjBKQlFXbEZWU3hUUVVGcVJTeEZRVUU0UlVNc1lVRkJPVVVzUlVGQk5rWlVMRVZCUVRkR0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0dlEwRlBaMEpSTEZNc1JVRkJWMUlzUlN4RlFVRkpPMEZCUXpWQ0xHRkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRkZCUVdRc1kwRkJhME1zUzBGQlMwZ3NXVUZCZGtNc2IwSkJRV3RGVlN4VFFVRnNSU3hGUVVFclJTeEpRVUV2UlN4RlFVRnhSbElzUlVGQmNrWXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08yZERRVTlaVlN4VExFVkJRVmRXTEVVc1JVRkJTVHRCUVVONFFpeGhRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhOUVVGa0xHTkJRV2RETEV0QlFVdElMRmxCUVhKRExHTkJRVFJFV1N4VFFVRTFSQ3hGUVVGMVJWWXNSVUZCZGtVc1EwRkJVRHRCUVVOR096dEJRVVZHT3pzN096czdPenM3T3l0Q1FVOVpSU3hQTEVWQlFWTkdMRVVzUlVGQlNUdEJRVU55UWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0SUxGbEJRWEJETEdOQlFUSkVTU3hQUVVFelJDeEZRVUZ2UlVZc1JVRkJjRVVzUTBGQlVEdEJRVU5HT3p0QlFVVkdPenM3T3pzN096czdPelpDUVU5VlZ5eExMRVZCUVU5WUxFVXNSVUZCU1R0QlFVTnFRaXhoUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRJTEZsQlFYQkRMR2RDUVVFeVJHRXNTMEZCTTBRc1JVRkJiMFVzU1VGQmNFVXNSVUZCTUVWWUxFVkJRVEZGTEVOQlFWQTdRVUZEUmpzN1FVRkZSanM3T3pzN096czdPenM3T0VKQlVWZFhMRXNzUlVGQlQwUXNVeXhGUVVGWFZpeEZMRVZCUVVrN1FVRkROMElzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1QwRkJaQ3hqUVVGcFF5eExRVUZMU0N4WlFVRjBReXhuUWtGQk5rUmhMRXRCUVRkRUxFVkJRWE5GUkN4VFFVRjBSU3hGUVVGcFJsWXNSVUZCYWtZc1EwRkJVRHRCUVVOR096dEJRVVZHT3pzN096czdPenM3TzJkRFFVOWhWeXhMTEVWQlFVOVlMRVVzUlVGQlNUdEJRVU53UWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eFJRVUZrTEdOQlFXdERMRXRCUVV0SUxGbEJRWFpETEdkQ1FVRTRSR0VzUzBGQk9VUXNSVUZCZFVVc1NVRkJka1VzUlVGQk5rVllMRVZCUVRkRkxFTkJRVkE3UVVGRFJqczdPenRGUVROUFowSlpMSEZDT3p0QlFUaFBjRUpETEU5QlFVOURMRTlCUVZBc1IwRkJhVUp3UWl4TFFVRnFRaUlzSW1acGJHVWlPaUpKYzNOMVpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUUdacGJHVmNiaUFxSUVCamIzQjVjbWxuYUhRZ0lESXdNVE1nVFdsamFHRmxiQ0JCZFdaeVpXbDBaWElnS0VSbGRtVnNiM0J0Wlc1MElGTmxaV1FwSUdGdVpDQXlNREUySUZsaGFHOXZJRWx1WXk1Y2JpQXFJRUJzYVdObGJuTmxJQ0FnSUV4cFkyVnVjMlZrSUhWdVpHVnlJSHRBYkdsdWF5Qm9kSFJ3Y3pvdkwzTndaSGd1YjNKbkwyeHBZMlZ1YzJWekwwSlRSQzB6TFVOc1lYVnpaUzFEYkdWaGNpNW9kRzFzSUVKVFJDMHpMVU5zWVhWelpTMURiR1ZoY24wdVhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNCSGFYUm9kV0l1YW5NZ2FYTWdabkpsWld4NUlHUnBjM1J5YVdKMWRHRmliR1V1WEc0Z0tpOWNibHh1YVcxd2IzSjBJRkpsY1hWbGMzUmhZbXhsSUdaeWIyMGdKeTR2VW1WeGRXVnpkR0ZpYkdVbk8xeHVYRzR2S2lwY2JpQXFJRWx6YzNWbElIZHlZWEJ6SUhSb1pTQm1kVzVqZEdsdmJtRnNhWFI1SUhSdklHZGxkQ0JwYzNOMVpYTWdabTl5SUhKbGNHOXphWFJ2Y21sbGMxeHVJQ292WEc1amJHRnpjeUJKYzNOMVpTQmxlSFJsYm1SeklGSmxjWFZsYzNSaFlteGxJSHRjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dRM0psWVhSbElHRWdibVYzSUVsemMzVmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NtVndiM05wZEc5eWVTQXRJSFJvWlNCbWRXeHNJRzVoYldVZ2IyWWdkR2hsSUhKbGNHOXphWFJ2Y25rZ0tHQTZkWE5sY2k4NmNtVndiMkFwSUhSdklHZGxkQ0JwYzNOMVpYTWdabTl5WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1GMWRHaDlJRnRoZFhSb1hTQXRJR2x1Wm05eWJXRjBhVzl1SUhKbGNYVnBjbVZrSUhSdklHRjFkR2hsYm5ScFkyRjBaU0IwYnlCSGFYUm9kV0pjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZWEJwUW1GelpUMW9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0WFNBdElIUm9aU0JpWVhObElFZHBkR2gxWWlCQlVFa2dWVkpNWEc0Z0lDQWdLaTljYmlBZ0lHTnZibk4wY25WamRHOXlLSEpsY0c5emFYUnZjbmtzSUdGMWRHZ3NJR0Z3YVVKaGMyVXBJSHRjYmlBZ0lDQWdJSE4xY0dWeUtHRjFkR2dzSUdGd2FVSmhjMlVwTzF4dUlDQWdJQ0FnZEdocGN5NWZYM0psY0c5emFYUnZjbmtnUFNCeVpYQnZjMmwwYjNKNU8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QnBjM04xWlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJsemMzVmxjeThqWTNKbFlYUmxMV0Z1TFdsemMzVmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2FYTnpkV1ZFWVhSaElDMGdkR2hsSUdsemMzVmxJSFJ2SUdOeVpXRjBaVnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdZM0psWVhSbFpDQnBjM04xWlZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCamNtVmhkR1ZKYzNOMVpTaHBjM04xWlVSaGRHRXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRTlUVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZmNtVndiM05wZEc5eWVYMHZhWE56ZFdWellDd2dhWE56ZFdWRVlYUmhMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjBhR1VnYVhOemRXVnpJR1p2Y2lCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmx6YzNWbGN5OGpiR2x6ZEMxcGMzTjFaWE10Wm05eUxXRXRjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQm1hV3gwWlhKcGJtY2diM0IwYVc5dWMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ1lYSnlZWGtnYjJZZ2FYTnpkV1Z6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUkpjM04xWlhNb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wUVd4c1VHRm5aWE1vWUM5eVpYQnZjeThrZTNSb2FYTXVYMTl5WlhCdmMybDBiM0o1ZlM5cGMzTjFaWE5nTENCdmNIUnBiMjV6TENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RHbHpkQ0IwYUdVZ1pYWmxiblJ6SUdadmNpQmhiaUJwYzNOMVpWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwybHpjM1ZsY3k5bGRtVnVkSE12STJ4cGMzUXRaWFpsYm5SekxXWnZjaTFoYmkxcGMzTjFaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHbHpjM1ZsSUMwZ2RHaGxJR2x6YzNWbElIUnZJR2RsZENCbGRtVnVkSE1nWm05eVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUdWMlpXNTBjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JzYVhOMFNYTnpkV1ZGZG1WdWRITW9hWE56ZFdVc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTl5WlhCdmMybDBiM0o1ZlM5cGMzTjFaWE12Skh0cGMzTjFaWDB2WlhabGJuUnpZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRXhwYzNRZ1kyOXRiV1Z1ZEhNZ2IyNGdZVzRnYVhOemRXVmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXBjM04xWlhNdlkyOXRiV1Z1ZEhNdkkyeHBjM1F0WTI5dGJXVnVkSE10YjI0dFlXNHRhWE56ZFdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JwYzNOMVpTQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2FYTnpkV1VnZEc4Z1oyVjBJR052YlcxbGJuUnpJR1p5YjIxY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUdOdmJXMWxiblJ6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUkpjM04xWlVOdmJXMWxiblJ6S0dsemMzVmxMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZmNtVndiM05wZEc5eWVYMHZhWE56ZFdWekx5UjdhWE56ZFdWOUwyTnZiVzFsYm5SellDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0JoSUhOcGJtZHNaU0JqYjIxdFpXNTBJRzl1SUdGdUlHbHpjM1ZsWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YVhOemRXVnpMMk52YlcxbGJuUnpMeU5uWlhRdFlTMXphVzVuYkdVdFkyOXRiV1Z1ZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2xrSUMwZ2RHaGxJR052YlcxbGJuUWdhV1FnZEc4Z1oyVjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmpiMjF0Wlc1MFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRWx6YzNWbFEyOXRiV1Z1ZENocFpDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDNKbGNHOXphWFJ2Y25sOUwybHpjM1ZsY3k5amIyMXRaVzUwY3k4a2UybGtmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEYjIxdFpXNTBJRzl1SUdGdUlHbHpjM1ZsWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YVhOemRXVnpMMk52YlcxbGJuUnpMeU5qY21WaGRHVXRZUzFqYjIxdFpXNTBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2FYTnpkV1VnTFNCMGFHVWdhV1FnYjJZZ2RHaGxJR2x6YzNWbElIUnZJR052YlcxbGJuUWdiMjVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmpiMjF0Wlc1MElDMGdkR2hsSUdOdmJXMWxiblFnZEc4Z1lXUmtYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmpjbVZoZEdWa0lHTnZiVzFsYm5SY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1kzSmxZWFJsU1hOemRXVkRiMjF0Wlc1MEtHbHpjM1ZsTENCamIyMXRaVzUwTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCUFUxUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYM0psY0c5emFYUnZjbmw5TDJsemMzVmxjeThrZTJsemMzVmxmUzlqYjIxdFpXNTBjMkFzSUh0aWIyUjVPaUJqYjIxdFpXNTBmU3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVWa2FYUWdZU0JqYjIxdFpXNTBJRzl1SUdGdUlHbHpjM1ZsWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YVhOemRXVnpMMk52YlcxbGJuUnpMeU5sWkdsMExXRXRZMjl0YldWdWRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdsa0lDMGdkR2hsSUdOdmJXMWxiblFnYVdRZ2RHOGdaV1JwZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR052YlcxbGJuUWdMU0IwYUdVZ1kyOXRiV1Z1ZENCMGJ5QmxaR2wwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JsWkdsMFpXUWdZMjl0YldWdWRGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmxaR2wwU1hOemRXVkRiMjF0Wlc1MEtHbGtMQ0JqYjIxdFpXNTBMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJCVkVOSUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOXlaWEJ2YzJsMGIzSjVmUzlwYzNOMVpYTXZZMjl0YldWdWRITXZKSHRwWkgxZ0xDQjdZbTlrZVRvZ1kyOXRiV1Z1ZEgwc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkVaV3hsZEdVZ1lTQmpiMjF0Wlc1MElHOXVJR0Z1SUdsemMzVmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekwyTnZiVzFsYm5Sekx5TmtaV3hsZEdVdFlTMWpiMjF0Wlc1MFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYVdRZ0xTQjBhR1VnWTI5dGJXVnVkQ0JwWkNCMGJ5QmtaV3hsZEdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnY21WeGRXVnpkQ0JwY3lCemRXTmpaWE56Wm5Wc1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHUmxiR1YwWlVsemMzVmxRMjl0YldWdWRDaHBaQ3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RFUlV4RlZFVW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYM0psY0c5emFYUnZjbmw5TDJsemMzVmxjeTlqYjIxdFpXNTBjeThrZTJsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkZaR2wwSUdGdUlHbHpjM1ZsWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YVhOemRXVnpMeU5sWkdsMExXRnVMV2x6YzNWbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYVhOemRXVWdMU0IwYUdVZ2FYTnpkV1VnYm5WdFltVnlJSFJ2SUdWa2FYUmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCcGMzTjFaVVJoZEdFZ0xTQjBhR1VnYm1WM0lHbHpjM1ZsSUdSaGRHRmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHMXZaR2xtYVdWa0lHbHpjM1ZsWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdWa2FYUkpjM04xWlNocGMzTjFaU3dnYVhOemRXVkVZWFJoTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCQlZFTklKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTl5WlhCdmMybDBiM0o1ZlM5cGMzTjFaWE12Skh0cGMzTjFaWDFnTENCcGMzTjFaVVJoZEdFc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkhaWFFnWVNCd1lYSjBhV04xYkdGeUlHbHpjM1ZsWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YVhOemRXVnpMeU5uWlhRdFlTMXphVzVuYkdVdGFYTnpkV1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnBjM04xWlNBdElIUm9aU0JwYzNOMVpTQnVkVzFpWlhJZ2RHOGdabVYwWTJoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUdsemMzVmxYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEVsemMzVmxLR2x6YzNWbExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmY21Wd2IzTnBkRzl5ZVgwdmFYTnpkV1Z6THlSN2FYTnpkV1Y5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUcxcGJHVnpkRzl1WlhNZ1ptOXlJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmFYTnpkV1Z6TDIxcGJHVnpkRzl1WlhNdkkyeHBjM1F0Yldsc1pYTjBiMjVsY3kxbWIzSXRZUzF5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJR1pwYkhSbGNtbHVaeUJ2Y0hScGIyNXpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmhjbkpoZVNCdlppQnRhV3hsYzNSdmJtVnpYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR3hwYzNSTmFXeGxjM1J2Ym1WektHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTl5WlhCdmMybDBiM0o1ZlM5dGFXeGxjM1J2Ym1WellDd2diM0IwYVc5dWN5d2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZENCaElHMXBiR1Z6ZEc5dVpWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwybHpjM1ZsY3k5dGFXeGxjM1J2Ym1Wekx5Tm5aWFF0WVMxemFXNW5iR1V0Yldsc1pYTjBiMjVsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiV2xzWlhOMGIyNWxJQzBnZEdobElHbGtJRzltSUhSb1pTQnRhV3hsYzNSdmJtVWdkRzhnWm1WMFkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHMXBiR1Z6ZEc5dVpWeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJOYVd4bGMzUnZibVVvYldsc1pYTjBiMjVsTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZjbVZ3YjNOcGRHOXllWDB2Yldsc1pYTjBiMjVsY3k4a2UyMXBiR1Z6ZEc5dVpYMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dRM0psWVhSbElHRWdibVYzSUcxcGJHVnpkRzl1WlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJsemMzVmxjeTl0YVd4bGMzUnZibVZ6THlOamNtVmhkR1V0WVMxdGFXeGxjM1J2Ym1WY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J0YVd4bGMzUnZibVZFWVhSaElDMGdkR2hsSUcxcGJHVnpkRzl1WlNCa1pXWnBibWwwYVc5dVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCdGFXeGxjM1J2Ym1WY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1kzSmxZWFJsVFdsc1pYTjBiMjVsS0cxcGJHVnpkRzl1WlVSaGRHRXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRTlUVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZmNtVndiM05wZEc5eWVYMHZiV2xzWlhOMGIyNWxjMkFzSUcxcGJHVnpkRzl1WlVSaGRHRXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJGWkdsMElHRWdiV2xzWlhOMGIyNWxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekwyMXBiR1Z6ZEc5dVpYTXZJM1Z3WkdGMFpTMWhMVzFwYkdWemRHOXVaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMXBiR1Z6ZEc5dVpTQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2JXbHNaWE4wYjI1bElIUnZJR1ZrYVhSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J0YVd4bGMzUnZibVZFWVhSaElDMGdkR2hsSUhWd1pHRjBaWE1nZEc4Z2JXRnJaU0IwYnlCMGFHVWdiV2xzWlhOMGIyNWxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQjFjR1JoZEdWa0lHMXBiR1Z6ZEc5dVpWeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmxaR2wwVFdsc1pYTjBiMjVsS0cxcGJHVnpkRzl1WlN3Z2JXbHNaWE4wYjI1bFJHRjBZU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRUVZSRFNDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZjbVZ3YjNOcGRHOXllWDB2Yldsc1pYTjBiMjVsY3k4a2UyMXBiR1Z6ZEc5dVpYMWdMQ0J0YVd4bGMzUnZibVZFWVhSaExDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSR1ZzWlhSbElHRWdiV2xzWlhOMGIyNWxJQ2gwYUdseklHbHpJR1JwYzNScGJtTjBJR1p5YjIwZ1kyeHZjMmx1WnlCaElHMXBiR1Z6ZEc5dVpTbGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXBjM04xWlhNdmJXbHNaWE4wYjI1bGN5OGpaR1ZzWlhSbExXRXRiV2xzWlhOMGIyNWxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JXbHNaWE4wYjI1bElDMGdkR2hsSUdsa0lHOW1JSFJvWlNCdGFXeGxjM1J2Ym1VZ2RHOGdaR1ZzWlhSbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCemRHRjBkWE5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWkdWc1pYUmxUV2xzWlhOMGIyNWxLRzFwYkdWemRHOXVaU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RFUlV4RlZFVW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYM0psY0c5emFYUnZjbmw5TDIxcGJHVnpkRzl1WlhNdkpIdHRhV3hsYzNSdmJtVjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCc1lXSmxiRnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmx6YzNWbGN5OXNZV0psYkhNdkkyTnlaV0YwWlMxaExXeGhZbVZzWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiR0ZpWld4RVlYUmhJQzBnZEdobElHeGhZbVZzSUdSbFptbHVhWFJwYjI1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUc5aWFtVmpkQ0J5WlhCeVpYTmxiblJwYm1jZ2RHaGxJR3hoWW1Wc1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHTnlaV0YwWlV4aFltVnNLR3hoWW1Wc1JHRjBZU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRVDFOVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOXlaWEJ2YzJsMGIzSjVmUzlzWVdKbGJITmdMQ0JzWVdKbGJFUmhkR0VzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVEdsemRDQjBhR1VnYkdGaVpXeHpJR1p2Y2lCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekwyeGhZbVZzY3k4amJHbHpkQzFoYkd3dGJHRmlaV3h6TFdadmNpMTBhR2x6TFhKbGNHOXphWFJ2Y25sY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JtYVd4MFpYSnBibWNnYjNCMGFXOXVjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmhjbkpoZVNCdlppQnNZV0psYkhOY2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0tpOWNiaUFnSUd4cGMzUk1ZV0psYkhNb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYM0psY0c5emFYUnZjbmw5TDJ4aFltVnNjMkFzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElHRWdiR0ZpWld4Y2JpQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJsemMzVmxjeTlzWVdKbGJITXZJMmRsZEMxaExYTnBibWRzWlMxc1lXSmxiRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRmlaV3dnTFNCMGFHVWdibUZ0WlNCdlppQjBhR1VnYkdGaVpXd2dkRzhnWm1WMFkyaGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHRmlaV3hjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnS2k5Y2JpQWdJR2RsZEV4aFltVnNLR3hoWW1Wc0xDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmY21Wd2IzTnBkRzl5ZVgwdmJHRmlaV3h6THlSN2JHRmlaV3g5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJGWkdsMElHRWdiR0ZpWld4Y2JpQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJsemMzVmxjeTlzWVdKbGJITXZJM1Z3WkdGMFpTMWhMV3hoWW1Wc1hHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JzWVdKbGJDQXRJSFJvWlNCdVlXMWxJRzltSUhSb1pTQnNZV0psYkNCMGJ5QmxaR2wwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnNZV0psYkVSaGRHRWdMU0IwYUdVZ2RYQmtZWFJsY3lCMGJ5QnRZV3RsSUhSdklIUm9aU0JzWVdKbGJGeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCMWNHUmhkR1ZrSUd4aFltVnNYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ292WEc0Z0lDQmxaR2wwVEdGaVpXd29iR0ZpWld3c0lHeGhZbVZzUkdGMFlTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZmNtVndiM05wZEc5eWVYMHZiR0ZpWld4ekx5UjdiR0ZpWld4OVlDd2diR0ZpWld4RVlYUmhMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJsYkdWMFpTQmhJR3hoWW1Wc1hHNGdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5cGMzTjFaWE12YkdGaVpXeHpMeU5rWld4bGRHVXRZUzFzWVdKbGJGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYkdGaVpXd2dMU0IwYUdVZ2JtRnRaU0J2WmlCMGFHVWdiR0ZpWld3Z2RHOGdaR1ZzWlhSbFhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhOMFlYUjFjMXh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FxTDF4dUlDQWdaR1ZzWlhSbFRHRmlaV3dvYkdGaVpXd3NJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SRVZNUlZSRkp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOXlaWEJ2YzJsMGIzSjVmUzlzWVdKbGJITXZKSHRzWVdKbGJIMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1NYTnpkV1U3WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlzc3VlLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1JlcXVlc3RhYmxlMiA9IHJlcXVpcmUoJy4vUmVxdWVzdGFibGUnKTtcblxudmFyIF9SZXF1ZXN0YWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXF1ZXN0YWJsZTIpO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxMyBNaWNoYWVsIEF1ZnJlaXRlciAoRGV2ZWxvcG1lbnQgU2VlZCkgYW5kIDIwMTYgWWFob28gSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG52YXIgbG9nID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoJ2dpdGh1YjpzZWFyY2gnKTtcblxuLyoqXG4gKiBXcmFwIHRoZSBTZWFyY2ggQVBJXG4gKi9cblxudmFyIFNlYXJjaCA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgX2luaGVyaXRzKFNlYXJjaCwgX1JlcXVlc3RhYmxlKTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgU2VhcmNoXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0cyAtIGRlZmF1bHRzIGZvciB0aGUgc2VhcmNoXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gW2F1dGhdIC0gaW5mb3JtYXRpb24gcmVxdWlyZWQgdG8gYXV0aGVudGljYXRlIHRvIEdpdGh1YlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2FwaUJhc2U9aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbV0gLSB0aGUgYmFzZSBHaXRodWIgQVBJIFVSTFxuICAgKi9cbiAgZnVuY3Rpb24gU2VhcmNoKGRlZmF1bHRzLCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlYXJjaCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2VhcmNoLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2VhcmNoKSkuY2FsbCh0aGlzLCBhdXRoLCBhcGlCYXNlKSk7XG5cbiAgICBfdGhpcy5fX2RlZmF1bHRzID0gX3RoaXMuX2dldE9wdGlvbnNXaXRoRGVmYXVsdHMoZGVmYXVsdHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBdmFpbGFibGUgc2VhcmNoIG9wdGlvbnNcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3NlYXJjaC8jcGFyYW1ldGVyc1xuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBTZWFyY2guUGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxIC0gdGhlIHF1ZXJ5IHRvIG1ha2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNvcnQgLSB0aGUgc29ydCBmaWVsZCwgb25lIG9mIGBzdGFyc2AsIGBmb3Jrc2AsIG9yIGB1cGRhdGVkYC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBbYmVzdCBtYXRjaF0oaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9zZWFyY2gvI3Jhbmtpbmctc2VhcmNoLXJlc3VsdHMpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmRlciAtIHRoZSBvcmRlcmluZywgZWl0aGVyIGBhc2NgIG9yIGBkZXNjYFxuICAgKi9cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBzZWFyY2ggb24gdGhlIEdpdEh1YiBBUElcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSB0aGUgc2NvcGUgb2YgdGhlIHNlYXJjaFxuICAgKiBAcGFyYW0ge1NlYXJjaC5QYXJhbXN9IFt3aXRoT3B0aW9uc10gLSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHRoZSBzZWFyY2hcbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0cyBvZiB0aGUgc2VhcmNoXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU2VhcmNoLCBbe1xuICAgIGtleTogJ19zZWFyY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VhcmNoKHBhdGgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgd2l0aE9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHt9O1xuICAgICAgT2JqZWN0LmtleXModGhpcy5fX2RlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJlcXVlc3RPcHRpb25zW3Byb3BdID0gX3RoaXMyLl9fZGVmYXVsdHNbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5rZXlzKHdpdGhPcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJlcXVlc3RPcHRpb25zW3Byb3BdID0gd2l0aE9wdGlvbnNbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgbG9nKCdzZWFyY2hpbmcgJyArIHBhdGggKyAnIHdpdGggb3B0aW9uczonLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKCcvc2VhcmNoLycgKyBwYXRoLCByZXF1ZXN0T3B0aW9ucywgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBmb3IgcmVwb3NpdG9yaWVzXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3NlYXJjaC8jc2VhcmNoLXJlcG9zaXRvcmllc1xuICAgICAqIEBwYXJhbSB7U2VhcmNoLlBhcmFtc30gW29wdGlvbnNdIC0gYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZvciB0aGUgc2VhcmNoXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0cyBvZiB0aGUgc2VhcmNoXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmb3JSZXBvc2l0b3JpZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JSZXBvc2l0b3JpZXMob3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZWFyY2goJ3JlcG9zaXRvcmllcycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIGNvZGVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvc2VhcmNoLyNzZWFyY2gtY29kZVxuICAgICAqIEBwYXJhbSB7U2VhcmNoLlBhcmFtc30gW29wdGlvbnNdIC0gYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZvciB0aGUgc2VhcmNoXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0cyBvZiB0aGUgc2VhcmNoXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmb3JDb2RlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yQ29kZShvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3NlYXJjaCgnY29kZScsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIGlzc3Vlc1xuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9zZWFyY2gvI3NlYXJjaC1pc3N1ZXNcbiAgICAgKiBAcGFyYW0ge1NlYXJjaC5QYXJhbXN9IFtvcHRpb25zXSAtIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmb3IgdGhlIHNlYXJjaFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHJlc3VsdHMgb2YgdGhlIHNlYXJjaFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZm9ySXNzdWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ySXNzdWVzKG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VhcmNoKCdpc3N1ZXMnLCBvcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VhcmNoIGZvciB1c2Vyc1xuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9zZWFyY2gvI3NlYXJjaC11c2Vyc1xuICAgICAqIEBwYXJhbSB7U2VhcmNoLlBhcmFtc30gW29wdGlvbnNdIC0gYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZvciB0aGUgc2VhcmNoXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0cyBvZiB0aGUgc2VhcmNoXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmb3JVc2VycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvclVzZXJzKG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VhcmNoKCd1c2VycycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VhcmNoO1xufShfUmVxdWVzdGFibGUzLmRlZmF1bHQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlYXJjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTmxZWEpqYUM1cWN5SmRMQ0p1WVcxbGN5STZXeUpzYjJjaUxDSlRaV0Z5WTJnaUxDSmtaV1poZFd4MGN5SXNJbUYxZEdnaUxDSmhjR2xDWVhObElpd2lYMTlrWldaaGRXeDBjeUlzSWw5blpYUlBjSFJwYjI1elYybDBhRVJsWm1GMWJIUnpJaXdpY0dGMGFDSXNJbmRwZEdoUGNIUnBiMjV6SWl3aVkySWlMQ0oxYm1SbFptbHVaV1FpTENKeVpYRjFaWE4wVDNCMGFXOXVjeUlzSWs5aWFtVmpkQ0lzSW10bGVYTWlMQ0ptYjNKRllXTm9JaXdpY0hKdmNDSXNJbDl5WlhGMVpYTjBRV3hzVUdGblpYTWlMQ0p2Y0hScGIyNXpJaXdpWDNObFlYSmphQ0lzSWxKbGNYVmxjM1JoWW14bElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dEJRVTlCT3pzN08wRkJRMEU3T3pzN096czdPenM3SzJWQlVrRTdPenM3T3pzN1FVRlRRU3hKUVVGTlFTeE5RVUZOTEhGQ1FVRk5MR1ZCUVU0c1EwRkJXanM3UVVGRlFUczdPenRKUVVkTlF5eE5PenM3UVVGRFNEczdPenM3TzBGQlRVRXNhMEpCUVZsRExGRkJRVm9zUlVGQmMwSkRMRWxCUVhSQ0xFVkJRVFJDUXl4UFFVRTFRaXhGUVVGeFF6dEJRVUZCT3p0QlFVRkJMR2RJUVVNMVFrUXNTVUZFTkVJc1JVRkRkRUpETEU5QlJITkNPenRCUVVWc1F5eFZRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFMUJRVXRETEhWQ1FVRk1MRU5CUVRaQ1NpeFJRVUUzUWl4RFFVRnNRanRCUVVaclF6dEJRVWR3UXpzN1FVRkZSRHM3T3pzN096czdPMEZCVTBFN096czdPenM3T3pzN096czBRa0ZSVVVzc1NTeEZRVUYzUXp0QlFVRkJPenRCUVVGQkxGVkJRV3hEUXl4WFFVRnJReXgxUlVGQmNFSXNSVUZCYjBJN1FVRkJRU3hWUVVGb1FrTXNSVUZCWjBJc2RVVkJRVmhETEZOQlFWYzdPMEZCUXpkRExGVkJRVWxETEdsQ1FVRnBRaXhGUVVGeVFqdEJRVU5CUXl4aFFVRlBReXhKUVVGUUxFTkJRVmtzUzBGQlMxSXNWVUZCYWtJc1JVRkJOa0pUTEU5QlFUZENMRU5CUVhGRExGVkJRVU5ETEVsQlFVUXNSVUZCVlR0QlFVTTFRMG9zZFVKQlFXVkpMRWxCUVdZc1NVRkJkVUlzVDBGQlMxWXNWVUZCVEN4RFFVRm5RbFVzU1VGQmFFSXNRMEZCZGtJN1FVRkRSaXhQUVVaRU8wRkJSMEZJTEdGQlFVOURMRWxCUVZBc1EwRkJXVXdzVjBGQldpeEZRVUY1UWswc1QwRkJla0lzUTBGQmFVTXNWVUZCUTBNc1NVRkJSQ3hGUVVGVk8wRkJRM2hEU2l4MVFrRkJaVWtzU1VGQlppeEpRVUYxUWxBc1dVRkJXVThzU1VGQldpeERRVUYyUWp0QlFVTkdMRTlCUmtRN08wRkJTVUZtTEhsQ1FVRnBRazhzU1VGQmFrSXNjVUpCUVhWRFNTeGpRVUYyUXp0QlFVTkJMR0ZCUVU4c1MwRkJTMHNzWjBKQlFVd3NZMEZCYVVOVUxFbEJRV3BETEVWQlFYbERTU3hqUVVGNlF5eEZRVUY1UkVZc1JVRkJla1FzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPMjlEUVU5blFsRXNUeXhGUVVGVFVpeEZMRVZCUVVrN1FVRkRNVUlzWVVGQlR5eExRVUZMVXl4UFFVRk1MRU5CUVdFc1kwRkJZaXhGUVVFMlFrUXNUMEZCTjBJc1JVRkJjME5TTEVWQlFYUkRMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czBRa0ZQVVZFc1R5eEZRVUZUVWl4RkxFVkJRVWs3UVVGRGJFSXNZVUZCVHl4TFFVRkxVeXhQUVVGTUxFTkJRV0VzVFVGQllpeEZRVUZ4UWtRc1QwRkJja0lzUlVGQk9FSlNMRVZCUVRsQ0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzNFFrRlBWVkVzVHl4RlFVRlRVaXhGTEVWQlFVazdRVUZEY0VJc1lVRkJUeXhMUVVGTFV5eFBRVUZNTEVOQlFXRXNVVUZCWWl4RlFVRjFRa1FzVDBGQmRrSXNSVUZCWjBOU0xFVkJRV2hETEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenMyUWtGUFUxRXNUeXhGUVVGVFVpeEZMRVZCUVVrN1FVRkRia0lzWVVGQlR5eExRVUZMVXl4UFFVRk1MRU5CUVdFc1QwRkJZaXhGUVVGelFrUXNUMEZCZEVJc1JVRkJLMEpTTEVWQlFTOUNMRU5CUVZBN1FVRkRSanM3T3p0RlFYQkdhVUpWTEhGQ096dEJRWFZHY2tKRExFOUJRVTlETEU5QlFWQXNSMEZCYVVKd1FpeE5RVUZxUWlJc0ltWnBiR1VpT2lKVFpXRnlZMmd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFQm1hV3hsWEc0Z0tpQkFZMjl3ZVhKcFoyaDBJQ0F5TURFeklFMXBZMmhoWld3Z1FYVm1jbVZwZEdWeUlDaEVaWFpsYkc5d2JXVnVkQ0JUWldWa0tTQmhibVFnTWpBeE5pQlpZV2h2YnlCSmJtTXVYRzRnS2lCQWJHbGpaVzV6WlNBZ0lDQk1hV05sYm5ObFpDQjFibVJsY2lCN1FHeHBibXNnYUhSMGNITTZMeTl6Y0dSNExtOXlaeTlzYVdObGJuTmxjeTlDVTBRdE15MURiR0YxYzJVdFEyeGxZWEl1YUhSdGJDQkNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSjlMbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdSMmwwYUhWaUxtcHpJR2x6SUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJoWW14bExseHVJQ292WEc1Y2JtbHRjRzl5ZENCU1pYRjFaWE4wWVdKc1pTQm1jbTl0SUNjdUwxSmxjWFZsYzNSaFlteGxKenRjYm1sdGNHOXlkQ0JrWldKMVp5Qm1jbTl0SUNka1pXSjFaeWM3WEc1amIyNXpkQ0JzYjJjZ1BTQmtaV0oxWnlnbloybDBhSFZpT25ObFlYSmphQ2NwTzF4dVhHNHZLaXBjYmlBcUlGZHlZWEFnZEdobElGTmxZWEpqYUNCQlVFbGNiaUFxTDF4dVkyeGhjM01nVTJWaGNtTm9JR1Y0ZEdWdVpITWdVbVZ4ZFdWemRHRmliR1VnZTF4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0JUWldGeVkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCa1pXWmhkV3gwY3lBdElHUmxabUYxYkhSeklHWnZjaUIwYUdVZ2MyVmhjbU5vWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1GMWRHaDlJRnRoZFhSb1hTQXRJR2x1Wm05eWJXRjBhVzl1SUhKbGNYVnBjbVZrSUhSdklHRjFkR2hsYm5ScFkyRjBaU0IwYnlCSGFYUm9kV0pjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZWEJwUW1GelpUMW9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0WFNBdElIUm9aU0JpWVhObElFZHBkR2gxWWlCQlVFa2dWVkpNWEc0Z0lDQWdLaTljYmlBZ0lHTnZibk4wY25WamRHOXlLR1JsWm1GMWJIUnpMQ0JoZFhSb0xDQmhjR2xDWVhObEtTQjdYRzRnSUNBZ0lDQnpkWEJsY2loaGRYUm9MQ0JoY0dsQ1lYTmxLVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOWtaV1poZFd4MGN5QTlJSFJvYVhNdVgyZGxkRTl3ZEdsdmJuTlhhWFJvUkdWbVlYVnNkSE1vWkdWbVlYVnNkSE1wTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRUYyWVdsc1lXSnNaU0J6WldGeVkyZ2diM0IwYVc5dWMxeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzTmxZWEpqYUM4amNHRnlZVzFsZEdWeWMxeHVJQ0FnSUNvZ1FIUjVjR1ZrWldZZ2UwOWlhbVZqZEgwZ1UyVmhjbU5vTGxCaGNtRnRjMXh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIRWdMU0IwYUdVZ2NYVmxjbmtnZEc4Z2JXRnJaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlITnZjblFnTFNCMGFHVWdjMjl5ZENCbWFXVnNaQ3dnYjI1bElHOW1JR0J6ZEdGeWMyQXNJR0JtYjNKcmMyQXNJRzl5SUdCMWNHUmhkR1ZrWUM1Y2JpQWdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFUmxabUYxYkhRZ2FYTWdXMkpsYzNRZ2JXRjBZMmhkS0doMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjMlZoY21Ob0x5TnlZVzVyYVc1bkxYTmxZWEpqYUMxeVpYTjFiSFJ6S1Z4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzl5WkdWeUlDMGdkR2hsSUc5eVpHVnlhVzVuTENCbGFYUm9aWElnWUdGelkyQWdiM0lnWUdSbGMyTmdYRzRnSUNBZ0tpOWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1VHVnlabTl5YlNCaElITmxZWEpqYUNCdmJpQjBhR1VnUjJsMFNIVmlJRUZRU1Z4dUlDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQndZWFJvSUMwZ2RHaGxJSE5qYjNCbElHOW1JSFJvWlNCelpXRnlZMmhjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVMlZoY21Ob0xsQmhjbUZ0YzMwZ1czZHBkR2hQY0hScGIyNXpYU0F0SUdGa1pHbDBhVzl1WVd3Z2NHRnlZVzFsZEdWeWN5Qm1iM0lnZEdobElITmxZWEpqYUZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnY21WemRXeDBjeUJ2WmlCMGFHVWdjMlZoY21Ob1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lGOXpaV0Z5WTJnb2NHRjBhQ3dnZDJsMGFFOXdkR2x2Ym5NZ1BTQjdmU3dnWTJJZ1BTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJR3hsZENCeVpYRjFaWE4wVDNCMGFXOXVjeUE5SUh0OU8xeHVJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9kR2hwY3k1ZlgyUmxabUYxYkhSektTNW1iM0pGWVdOb0tDaHdjbTl3S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0J5WlhGMVpYTjBUM0IwYVc5dWMxdHdjbTl3WFNBOUlIUm9hWE11WDE5a1pXWmhkV3gwYzF0d2NtOXdYVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2QybDBhRTl3ZEdsdmJuTXBMbVp2Y2tWaFkyZ29LSEJ5YjNBcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUhKbGNYVmxjM1JQY0hScGIyNXpXM0J5YjNCZElEMGdkMmwwYUU5d2RHbHZibk5iY0hKdmNGMDdYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnYkc5bktHQnpaV0Z5WTJocGJtY2dKSHR3WVhSb2ZTQjNhWFJvSUc5d2RHbHZibk02WUN3Z2NtVnhkV1Z6ZEU5d2RHbHZibk1wTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNSQmJHeFFZV2RsY3loZ0wzTmxZWEpqYUM4a2UzQmhkR2g5WUN3Z2NtVnhkV1Z6ZEU5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCVFpXRnlZMmdnWm05eUlISmxjRzl6YVhSdmNtbGxjMXh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM05sWVhKamFDOGpjMlZoY21Ob0xYSmxjRzl6YVhSdmNtbGxjMXh1SUNBZ0lDb2dRSEJoY21GdElIdFRaV0Z5WTJndVVHRnlZVzF6ZlNCYmIzQjBhVzl1YzEwZ0xTQmhaR1JwZEdsdmJtRnNJSEJoY21GdFpYUmxjbk1nWm05eUlIUm9aU0J6WldGeVkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElISmxjM1ZzZEhNZ2IyWWdkR2hsSUhObFlYSmphRnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JtYjNKU1pYQnZjMmwwYjNKcFpYTW9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpaV0Z5WTJnb0ozSmxjRzl6YVhSdmNtbGxjeWNzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCVFpXRnlZMmdnWm05eUlHTnZaR1ZjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl6WldGeVkyZ3ZJM05sWVhKamFDMWpiMlJsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMU5sWVhKamFDNVFZWEpoYlhOOUlGdHZjSFJwYjI1elhTQXRJR0ZrWkdsMGFXOXVZV3dnY0dGeVlXMWxkR1Z5Y3lCbWIzSWdkR2hsSUhObFlYSmphRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdjbVZ6ZFd4MGN5QnZaaUIwYUdVZ2MyVmhjbU5vWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdadmNrTnZaR1VvYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6WldGeVkyZ29KMk52WkdVbkxDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dVMlZoY21Ob0lHWnZjaUJwYzNOMVpYTmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXpaV0Z5WTJndkkzTmxZWEpqYUMxcGMzTjFaWE5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVMlZoY21Ob0xsQmhjbUZ0YzMwZ1cyOXdkR2x2Ym5OZElDMGdZV1JrYVhScGIyNWhiQ0J3WVhKaGJXVjBaWEp6SUdadmNpQjBhR1VnYzJWaGNtTm9YRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnlaWE4xYkhSeklHOW1JSFJvWlNCelpXRnlZMmhjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWm05eVNYTnpkV1Z6S0c5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJWaGNtTm9LQ2RwYzNOMVpYTW5MQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVTJWaGNtTm9JR1p2Y2lCMWMyVnljMXh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM05sWVhKamFDOGpjMlZoY21Ob0xYVnpaWEp6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMU5sWVhKamFDNVFZWEpoYlhOOUlGdHZjSFJwYjI1elhTQXRJR0ZrWkdsMGFXOXVZV3dnY0dGeVlXMWxkR1Z5Y3lCbWIzSWdkR2hsSUhObFlYSmphRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdjbVZ6ZFd4MGN5QnZaaUIwYUdVZ2MyVmhjbU5vWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdadmNsVnpaWEp6S0c5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJWaGNtTm9LQ2QxYzJWeWN5Y3NJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRaV0Z5WTJnN1hHNGlYWDA9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZWFyY2guanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxMyBNaWNoYWVsIEF1ZnJlaXRlciAoRGV2ZWxvcG1lbnQgU2VlZCkgYW5kIDIwMTYgWWFob28gSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4vKipcbiAqIFJhdGVMaW1pdCBhbGxvd3MgdXNlcnMgdG8gcXVlcnkgdGhlaXIgcmF0ZS1saW1pdCBzdGF0dXNcbiAqL1xudmFyIFJhdGVMaW1pdCA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgX2luaGVyaXRzKFJhdGVMaW1pdCwgX1JlcXVlc3RhYmxlKTtcblxuICAvKipcbiAgICogY29uc3RydWN0IGEgUmF0ZUxpbWl0XG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gYXV0aCAtIHRoZSBjcmVkZW50aWFscyB0byBhdXRoZW50aWNhdGUgdG8gR2l0SHViXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZV0gLSB0aGUgYmFzZSBHaXRodWIgQVBJIFVSTFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAqL1xuICBmdW5jdGlvbiBSYXRlTGltaXQoYXV0aCwgYXBpQmFzZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYXRlTGltaXQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSYXRlTGltaXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSYXRlTGltaXQpKS5jYWxsKHRoaXMsIGF1dGgsIGFwaUJhc2UpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyeSB0aGUgY3VycmVudCByYXRlIGxpbWl0XG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yYXRlX2xpbWl0L1xuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSByYXRlLWxpbWl0IGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSYXRlTGltaXQsIFt7XG4gICAga2V5OiAnZ2V0UmF0ZUxpbWl0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmF0ZUxpbWl0KGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yYXRlX2xpbWl0JywgbnVsbCwgY2IpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSYXRlTGltaXQ7XG59KF9SZXF1ZXN0YWJsZTMuZGVmYXVsdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmF0ZUxpbWl0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKaGRHVk1hVzFwZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpTWVhSbFRHbHRhWFFpTENKaGRYUm9JaXdpWVhCcFFtRnpaU0lzSW1OaUlpd2lYM0psY1hWbGMzUWlMQ0pTWlhGMVpYTjBZV0pzWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN1FVRlBRVHM3T3pzN096czdPenNyWlVGUVFUczdPenM3T3p0QlFWTkJPenM3U1VGSFRVRXNVenM3TzBGQlEwZzdPenM3T3p0QlFVMUJMSEZDUVVGWlF5eEpRVUZhTEVWQlFXdENReXhQUVVGc1FpeEZRVUV5UWp0QlFVRkJPenRCUVVGQkxHbElRVU5zUWtRc1NVRkVhMElzUlVGRFdrTXNUMEZFV1R0QlFVVXhRanM3UVVGRlJEczdPenM3T3pzN096dHBRMEZOWVVNc1JTeEZRVUZKTzBGQlEyUXNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeEZRVUZ4UWl4aFFVRnlRaXhGUVVGdlF5eEpRVUZ3UXl4RlFVRXdRMFFzUlVGQk1VTXNRMEZCVUR0QlFVTkdPenM3TzBWQmJrSnZRa1VzY1VJN08wRkJjMEo0UWtNc1QwRkJUME1zVDBGQlVDeEhRVUZwUWxBc1UwRkJha0lpTENKbWFXeGxJam9pVW1GMFpVeHBiV2wwTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkFabWxzWlZ4dUlDb2dRR052Y0hseWFXZG9kQ0FnTWpBeE15Qk5hV05vWVdWc0lFRjFabkpsYVhSbGNpQW9SR1YyWld4dmNHMWxiblFnVTJWbFpDa2dZVzVrSURJd01UWWdXV0ZvYjI4Z1NXNWpMbHh1SUNvZ1FHeHBZMlZ1YzJVZ0lDQWdUR2xqWlc1elpXUWdkVzVrWlhJZ2UwQnNhVzVySUdoMGRIQnpPaTh2YzNCa2VDNXZjbWN2YkdsalpXNXpaWE12UWxORUxUTXRRMnhoZFhObExVTnNaV0Z5TG1oMGJXd2dRbE5FTFRNdFEyeGhkWE5sTFVOc1pXRnlmUzVjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJRWRwZEdoMVlpNXFjeUJwY3lCbWNtVmxiSGtnWkdsemRISnBZblYwWVdKc1pTNWNiaUFxTDF4dVhHNXBiWEJ2Y25RZ1VtVnhkV1Z6ZEdGaWJHVWdabkp2YlNBbkxpOVNaWEYxWlhOMFlXSnNaU2M3WEc1Y2JpOHFLbHh1SUNvZ1VtRjBaVXhwYldsMElHRnNiRzkzY3lCMWMyVnljeUIwYnlCeGRXVnllU0IwYUdWcGNpQnlZWFJsTFd4cGJXbDBJSE4wWVhSMWMxeHVJQ292WEc1amJHRnpjeUJTWVhSbFRHbHRhWFFnWlhoMFpXNWtjeUJTWlhGMVpYTjBZV0pzWlNCN1hHNGdJQ0F2S2lwY2JpQWdJQ0FxSUdOdmJuTjBjblZqZENCaElGSmhkR1ZNYVcxcGRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWhkWFJvZlNCaGRYUm9JQzBnZEdobElHTnlaV1JsYm5ScFlXeHpJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSSWRXSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYllYQnBRbUZ6WlYwZ0xTQjBhR1VnWW1GelpTQkhhWFJvZFdJZ1FWQkpJRlZTVEZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCamIyNXpkSEoxWTNSdmNpaGhkWFJvTENCaGNHbENZWE5sS1NCN1hHNGdJQ0FnSUNCemRYQmxjaWhoZFhSb0xDQmhjR2xDWVhObEtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCUmRXVnllU0IwYUdVZ1kzVnljbVZ1ZENCeVlYUmxJR3hwYldsMFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtRjBaVjlzYVcxcGRDOWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElISmhkR1V0YkdsdGFYUWdaR0YwWVZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUlNZWFJsVEdsdGFYUW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENBbkwzSmhkR1ZmYkdsdGFYUW5MQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1VtRjBaVXhwYldsME8xeHVJbDE5XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SYXRlTGltaXQuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxudmFyIF91dGYgPSByZXF1aXJlKCd1dGY4Jyk7XG5cbnZhciBfdXRmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0Zik7XG5cbnZhciBfanNCYXNlID0gcmVxdWlyZSgnanMtYmFzZTY0Jyk7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbnZhciBsb2cgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KSgnZ2l0aHViOnJlcG9zaXRvcnknKTtcblxuLyoqXG4gKiBSZXBvc2l0b3J5IGVuY2Fwc3VsYXRlcyB0aGUgZnVuY3Rpb25hbGl0eSB0byBjcmVhdGUsIHF1ZXJ5LCBhbmQgbW9kaWZ5IGZpbGVzLlxuICovXG5cbnZhciBSZXBvc2l0b3J5ID0gZnVuY3Rpb24gKF9SZXF1ZXN0YWJsZSkge1xuICAgX2luaGVyaXRzKFJlcG9zaXRvcnksIF9SZXF1ZXN0YWJsZSk7XG5cbiAgIC8qKlxuICAgICogQ3JlYXRlIGEgUmVwb3NpdG9yeS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdWxsbmFtZSAtIHRoZSBmdWxsIG5hbWUgb2YgdGhlIHJlcG9zaXRvcnlcbiAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gW2F1dGhdIC0gaW5mb3JtYXRpb24gcmVxdWlyZWQgdG8gYXV0aGVudGljYXRlIHRvIEdpdGh1YlxuICAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICAqL1xuICAgZnVuY3Rpb24gUmVwb3NpdG9yeShmdWxsbmFtZSwgYXV0aCwgYXBpQmFzZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcG9zaXRvcnkpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVwb3NpdG9yeS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlcG9zaXRvcnkpKS5jYWxsKHRoaXMsIGF1dGgsIGFwaUJhc2UpKTtcblxuICAgICAgX3RoaXMuX19mdWxsbmFtZSA9IGZ1bGxuYW1lO1xuICAgICAgX3RoaXMuX19jdXJyZW50VHJlZSA9IHtcbiAgICAgICAgIGJyYW5jaDogbnVsbCxcbiAgICAgICAgIHNoYTogbnVsbFxuICAgICAgfTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgIH1cblxuICAgLyoqXG4gICAgKiBHZXQgYSByZWZlcmVuY2VcbiAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXQvcmVmcy8jZ2V0LWEtcmVmZXJlbmNlXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIC0gdGhlIHJlZmVyZW5jZSB0byBnZXRcbiAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHJlZmVyZW5jZSdzIHJlZlNwZWMgb3IgYSBsaXN0IG9mIHJlZlNwZWNzIHRoYXQgbWF0Y2ggYHJlZmBcbiAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAqL1xuXG5cbiAgIF9jcmVhdGVDbGFzcyhSZXBvc2l0b3J5LCBbe1xuICAgICAga2V5OiAnZ2V0UmVmJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWYocmVmLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L3JlZnMvJyArIHJlZiwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIHJlZmVyZW5jZVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC9yZWZzLyNjcmVhdGUtYS1yZWZlcmVuY2VcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIG9iamVjdCBkZXNjcmliaW5nIHRoZSByZWZcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHJlZlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NyZWF0ZVJlZicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVmKG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L3JlZnMnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGVsZXRlIGEgcmVmZXJlbmNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2l0L3JlZnMvI2RlbGV0ZS1hLXJlZmVyZW5jZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiAtIHRoZSBuYW1lIG9mIHRoZSByZWYgdG8gZGVsdGVcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZGVsZXRlUmVmJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSZWYocmVmLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0RFTEVURScsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L3JlZnMvJyArIHJlZiwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlbGV0ZSBhIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jZGVsZXRlLWEtcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWxcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdkZWxldGVSZXBvJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSZXBvKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCB0aGUgdGFncyBvbiBhIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jbGlzdC10YWdzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSB0YWcgZGF0YVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RUYWdzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0VGFncyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvdGFncycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSBvcGVuIHB1bGwgcmVxdWVzdHMgb24gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wdWxscy8jbGlzdC1wdWxsLXJlcXVlc3RzXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdG8gZmlsdGVyIHRoZSBzZWFyY2hcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgUFJzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFB1bGxSZXF1ZXN0cycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdFB1bGxSZXF1ZXN0cyhvcHRpb25zLCBjYikge1xuICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9wdWxscycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyBwdWxsIHJlcXVlc3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wdWxscy8jZ2V0LWEtc2luZ2xlLXB1bGwtcmVxdWVzdFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciAtIHRoZSBQUiB5b3Ugd2lzaCB0byBmZXRjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgUFIgZnJvbSB0aGUgQVBJXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0UHVsbFJlcXVlc3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFB1bGxSZXF1ZXN0KG51bWJlciwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3B1bGxzLycgKyBudW1iZXIsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSBmaWxlcyBvZiBhIHNwZWNpZmljIHB1bGwgcmVxdWVzdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3B1bGxzLyNsaXN0LXB1bGwtcmVxdWVzdHMtZmlsZXNcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIC0gdGhlIFBSIHlvdSB3aXNoIHRvIGZldGNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGZpbGVzIGZyb20gdGhlIEFQSVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RQdWxsUmVxdWVzdEZpbGVzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0UHVsbFJlcXVlc3RGaWxlcyhudW1iZXIsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9wdWxscy8nICsgbnVtYmVyICsgJy9maWxlcycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDb21wYXJlIHR3byBicmFuY2hlcy9jb21taXRzL3JlcG9zaXRvcmllc1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2NvbW1pdHMvI2NvbXBhcmUtdHdvLWNvbW1pdHNcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIC0gdGhlIGJhc2UgY29tbWl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGVhZCAtIHRoZSBoZWFkIGNvbW1pdFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGNvbXBhcmlzb25cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjb21wYXJlQnJhbmNoZXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBhcmVCcmFuY2hlcyhiYXNlLCBoZWFkLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29tcGFyZS8nICsgYmFzZSArICcuLi4nICsgaGVhZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgYWxsIHRoZSBicmFuY2hlcyBmb3IgdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jbGlzdC1icmFuY2hlc1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgYnJhbmNoZXNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0QnJhbmNoZXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RCcmFuY2hlcyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvYnJhbmNoZXMnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGEgcmF3IGJsb2IgZnJvbSB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC9ibG9icy8jZ2V0LWEtYmxvYlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNoYSAtIHRoZSBzaGEgb2YgdGhlIGJsb2IgdG8gZmV0Y2hcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBibG9iIGZyb20gdGhlIEFQSVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldEJsb2InLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJsb2Ioc2hhLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L2Jsb2JzLycgKyBzaGEsIG51bGwsIGNiLCAncmF3Jyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGEgc2luZ2xlIGJyYW5jaFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2JyYW5jaGVzLyNnZXQtYnJhbmNoXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnJhbmNoIC0gdGhlIG5hbWUgb2YgdGhlIGJyYW5jaCB0byBmZXRjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGJyYW5jaCBmcm9tIHRoZSBBUElcbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0QnJhbmNoJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCcmFuY2goYnJhbmNoLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvYnJhbmNoZXMvJyArIGJyYW5jaCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBhIGNvbW1pdCBmcm9tIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29tbWl0cy8jZ2V0LWEtc2luZ2xlLWNvbW1pdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNoYSAtIHRoZSBzaGEgZm9yIHRoZSBjb21taXQgdG8gZmV0Y2hcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBjb21taXQgZGF0YVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldENvbW1pdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29tbWl0KHNoYSwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2dpdC9jb21taXRzLycgKyBzaGEsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSBjb21taXRzIG9uIGEgcmVwb3NpdG9yeSwgb3B0aW9uYWxseSBmaWx0ZXJpbmcgYnkgcGF0aCwgYXV0aG9yIG9yIHRpbWUgcmFuZ2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9jb21taXRzLyNsaXN0LWNvbW1pdHMtb24tYS1yZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gdGhlIGZpbHRlcmluZyBvcHRpb25zIGZvciBjb21taXRzXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc2hhXSAtIHRoZSBTSEEgb3IgYnJhbmNoIHRvIHN0YXJ0IGZyb21cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wYXRoXSAtIHRoZSBwYXRoIHRvIHNlYXJjaCBvblxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmF1dGhvcl0gLSB0aGUgY29tbWl0IGF1dGhvclxuICAgICAgICogQHBhcmFtIHsoRGF0ZXxzdHJpbmcpfSBbb3B0aW9ucy5zaW5jZV0gLSBvbmx5IGNvbW1pdHMgYWZ0ZXIgdGhpcyBkYXRlIHdpbGwgYmUgcmV0dXJuZWRcbiAgICAgICAqIEBwYXJhbSB7KERhdGV8c3RyaW5nKX0gW29wdGlvbnMudW50aWxdIC0gb25seSBjb21taXRzIGJlZm9yZSB0aGlzIGRhdGUgd2lsbCBiZSByZXR1cm5lZFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgY29tbWl0cyBmb3VuZCBtYXRjaGluZyB0aGUgY3JpdGVyaWFcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0Q29tbWl0cycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdENvbW1pdHMob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYiA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICB9XG4gICAgICAgICBvcHRpb25zLnNpbmNlID0gdGhpcy5fZGF0ZVRvSVNPKG9wdGlvbnMuc2luY2UpO1xuICAgICAgICAgb3B0aW9ucy51bnRpbCA9IHRoaXMuX2RhdGVUb0lTTyhvcHRpb25zLnVudGlsKTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29tbWl0cycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIGEgc2luZ2xlIGNvbW1pdCBpbmZvcm1hdGlvbiBmb3IgYSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29tbWl0cy8jZ2V0LWEtc2luZ2xlLWNvbW1pdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiAtIHRoZSByZWZlcmVuY2UgZm9yIHRoZSBjb21taXQtaXNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tbWl0IGluZm9ybWF0aW9uXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0U2luZ2xlQ29tbWl0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaW5nbGVDb21taXQocmVmLCBjYikge1xuICAgICAgICAgcmVmID0gcmVmIHx8ICcnO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29tbWl0cy8nICsgcmVmLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoYSBzaGEgZm9yIGEgcGFydGljdWxhciBvYmplY3QgaW4gdGhlIHJlcG9zaXRvcnkuIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBmdW5jdGlvblxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2NvbnRlbnRzLyNnZXQtY29udGVudHNcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYnJhbmNoXSAtIHRoZSBicmFuY2ggdG8gbG9vayBpbiwgb3IgdGhlIHJlcG9zaXRvcnkncyBkZWZhdWx0IGJyYW5jaCBpZiBvbWl0dGVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIG9mIHRoZSBmaWxlIG9yIGRpcmVjdG9yeVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgYSBkZXNjcmlwdGlvbiBvZiB0aGUgcmVxdWVzdGVkIG9iamVjdCwgaW5jbHVkaW5nIGEgYFNIQWAgcHJvcGVydHlcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRTaGEnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNoYShicmFuY2gsIHBhdGgsIGNiKSB7XG4gICAgICAgICBicmFuY2ggPSBicmFuY2ggPyAnP3JlZj0nICsgYnJhbmNoIDogJyc7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9jb250ZW50cy8nICsgcGF0aCArIGJyYW5jaCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIGNvbW1pdCBzdGF0dXNlcyBmb3IgYSBwYXJ0aWN1bGFyIHNoYSwgYnJhbmNoLCBvciB0YWdcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9zdGF0dXNlcy8jbGlzdC1zdGF0dXNlcy1mb3ItYS1zcGVjaWZpYy1yZWZcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaGEgLSB0aGUgc2hhLCBicmFuY2gsIG9yIHRhZyB0byBnZXQgc3RhdHVzZXMgZm9yXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBzdGF0dXNlc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RTdGF0dXNlcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdFN0YXR1c2VzKHNoYSwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2NvbW1pdHMvJyArIHNoYSArICcvc3RhdHVzZXMnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBjb21iaW5lZCB2aWV3IG9mIGNvbW1pdCBzdGF0dXNlcyBmb3IgYSBwYXJ0aWN1bGFyIHNoYSwgYnJhbmNoLCBvciB0YWdcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9zdGF0dXNlcy8jZ2V0LXRoZS1jb21iaW5lZC1zdGF0dXMtZm9yLWEtc3BlY2lmaWMtcmVmXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2hhIC0gdGhlIHNoYSwgYnJhbmNoLCBvciB0YWcgdG8gZ2V0IHRoZSBjb21iaW5lZCBzdGF0dXMgZm9yXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tYmluZWQgc3RhdHVzXG4gICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldENvbWJpbmVkU3RhdHVzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb21iaW5lZFN0YXR1cyhzaGEsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9jb21taXRzLycgKyBzaGEgKyAnL3N0YXR1cycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgYSBkZXNjcmlwdGlvbiBvZiBhIGdpdCB0cmVlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2l0L3RyZWVzLyNnZXQtYS10cmVlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJlZVNIQSAtIHRoZSBTSEEgb2YgdGhlIHRyZWUgdG8gZmV0Y2hcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBjYWxsYmFjayBkYXRhXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0VHJlZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJlZSh0cmVlU0hBLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L3RyZWVzLycgKyB0cmVlU0hBLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgYmxvYlxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC9ibG9icy8jY3JlYXRlLWEtYmxvYlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfEJ1ZmZlcnxCbG9iKX0gY29udGVudCAtIHRoZSBjb250ZW50IHRvIGFkZCB0byB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGRldGFpbHMgb2YgdGhlIGNyZWF0ZWQgYmxvYlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NyZWF0ZUJsb2InLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUJsb2IoY29udGVudCwgY2IpIHtcbiAgICAgICAgIHZhciBwb3N0Qm9keSA9IHRoaXMuX2dldENvbnRlbnRPYmplY3QoY29udGVudCk7XG5cbiAgICAgICAgIGxvZygnc2VuZGluZyBjb250ZW50JywgcG9zdEJvZHkpO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2dpdC9ibG9icycsIHBvc3RCb2R5LCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBwcm92aWRlZCBjb250ZW50XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ8QmxvYn0gY29udGVudCAtIHRoZSBjb250ZW50IHRvIHNlbmQgdG8gdGhlIHNlcnZlclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgcmVwcmVzZW50YXRpb24gb2YgYGNvbnRlbnRgIGZvciB0aGUgR2l0SHViIEFQSVxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ19nZXRDb250ZW50T2JqZWN0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q29udGVudE9iamVjdChjb250ZW50KSB7XG4gICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBsb2coJ2NvbnRldCBpcyBhIHN0cmluZycpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgIGNvbnRlbnQ6IF91dGYyLmRlZmF1bHQuZW5jb2RlKGNvbnRlbnQpLFxuICAgICAgICAgICAgICAgZW5jb2Rpbmc6ICd1dGYtOCdcbiAgICAgICAgICAgIH07XG4gICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGNvbnRlbnQgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgICAgIGxvZygnV2UgYXBwZWFyIHRvIGJlIGluIE5vZGUnKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LnRvU3RyaW5nKCdiYXNlNjQnKSxcbiAgICAgICAgICAgICAgIGVuY29kaW5nOiAnYmFzZTY0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIGNvbnRlbnQgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgICAgICBsb2coJ1dlIGFwcGVhciB0byBiZSBpbiB0aGUgYnJvd3NlcicpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgIGNvbnRlbnQ6IF9qc0Jhc2UuQmFzZTY0LmVuY29kZShjb250ZW50KSxcbiAgICAgICAgICAgICAgIGVuY29kaW5nOiAnYmFzZTY0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICBsb2coJ05vdCBzdXJlIHdoYXQgdGhpcyBjb250ZW50IGlzOiAnICsgKHR5cGVvZiBjb250ZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb250ZW50KSkgKyAnLCAnICsgSlNPTi5zdHJpbmdpZnkoY29udGVudCkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGNvbnRlbnQgcGFzc2VkIHRvIHBvc3RCbG9iLiBNdXN0IGJlIHN0cmluZyBvciBCdWZmZXIgKG5vZGUpIG9yIEJsb2IgKHdlYiknKTtcbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBVcGRhdGUgYSB0cmVlIGluIEdpdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC90cmVlcy8jY3JlYXRlLWEtdHJlZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VUcmVlU0hBIC0gdGhlIFNIQSBvZiB0aGUgdHJlZSB0byB1cGRhdGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggZm9yIHRoZSBuZXcgZmlsZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJsb2JTSEEgLSB0aGUgU0hBIGZvciB0aGUgYmxvYiB0byBwdXQgYXQgYHBhdGhgXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3IHRyZWUgdGhhdCBpcyBjcmVhdGVkXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIFJlcG9zaXRvcnkjY3JlYXRlVHJlZX0gaW5zdGVhZFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3VwZGF0ZVRyZWUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVRyZWUoYmFzZVRyZWVTSEEsIHBhdGgsIGJsb2JTSEEsIGNiKSB7XG4gICAgICAgICB2YXIgbmV3VHJlZSA9IHtcbiAgICAgICAgICAgIGJhc2VfdHJlZTogYmFzZVRyZWVTSEEsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIHRyZWU6IFt7XG4gICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAgICAgc2hhOiBibG9iU0hBLFxuICAgICAgICAgICAgICAgbW9kZTogJzEwMDY0NCcsXG4gICAgICAgICAgICAgICB0eXBlOiAnYmxvYidcbiAgICAgICAgICAgIH1dXG4gICAgICAgICB9O1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L3RyZWVzJywgbmV3VHJlZSwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyB0cmVlIGluIGdpdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC90cmVlcy8jY3JlYXRlLWEtdHJlZVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRyZWUgLSB0aGUgdHJlZSB0byBjcmVhdGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlU0hBIC0gdGhlIHJvb3Qgc2hhIG9mIHRoZSB0cmVlXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3IHRyZWUgdGhhdCBpcyBjcmVhdGVkXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlVHJlZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVHJlZSh0cmVlLCBiYXNlU0hBLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2dpdC90cmVlcycsIHtcbiAgICAgICAgICAgIHRyZWU6IHRyZWUsXG4gICAgICAgICAgICBiYXNlX3RyZWU6IGJhc2VTSEEgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgIH0sIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgYSBjb21taXQgdG8gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXQvY29tbWl0cy8jY3JlYXRlLWEtY29tbWl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50IC0gdGhlIFNIQSBvZiB0aGUgcGFyZW50IGNvbW1pdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRyZWUgLSB0aGUgU0hBIG9mIHRoZSB0cmVlIGZvciB0aGlzIGNvbW1pdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSB0aGUgY29tbWl0IG1lc3NhZ2VcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBjb21taXQgb3B0aW9uc1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmF1dGhvcl0gLSB0aGUgYXV0aG9yIG9mIHRoZSBjb21taXRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5jb21taXRlcl0gLSB0aGUgY29tbWl0dGVyXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tbWl0IHRoYXQgaXMgY3JlYXRlZFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NvbW1pdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tbWl0KHBhcmVudCwgdHJlZSwgbWVzc2FnZSwgb3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgIH1cblxuICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgdHJlZTogdHJlZSxcbiAgICAgICAgICAgIHBhcmVudHM6IFtwYXJlbnRdXG4gICAgICAgICB9O1xuXG4gICAgICAgICBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgZGF0YSk7XG5cbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvY29tbWl0cycsIGRhdGEsIGNiKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgX3RoaXMyLl9fY3VycmVudFRyZWUuc2hhID0gcmVzcG9uc2UuZGF0YS5zaGE7IC8vIFVwZGF0ZSBsYXRlc3QgY29tbWl0XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBVcGRhdGUgYSByZWZcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXQvcmVmcy8jdXBkYXRlLWEtcmVmZXJlbmNlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIC0gdGhlIHJlZiB0byB1cGRhdGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21taXRTSEEgLSB0aGUgU0hBIHRvIHBvaW50IHRoZSByZWZlcmVuY2UgdG9cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2UgLSBpbmRpY2F0ZXMgd2hldGhlciB0byBmb3JjZSBvciBlbnN1cmUgYSBmYXN0LWZvcndhcmQgdXBkYXRlXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgdXBkYXRlZCByZWYgYmFja1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3VwZGF0ZUhlYWQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUhlYWQocmVmLCBjb21taXRTSEEsIGZvcmNlLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvcmVmcy8nICsgcmVmLCB7XG4gICAgICAgICAgICBzaGE6IGNvbW1pdFNIQSxcbiAgICAgICAgICAgIGZvcmNlOiBmb3JjZVxuICAgICAgICAgfSwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFVwZGF0ZSBjb21taXQgc3RhdHVzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3Mvc3RhdHVzZXMvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29tbWl0U0hBIC0gdGhlIFNIQSBvZiB0aGUgY29tbWl0IHRoYXQgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQ29tbWl0IHN0YXR1cyBwYXJhbWV0ZXJzXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zdGF0ZSAtIFRoZSBzdGF0ZSBvZiB0aGUgc3RhdHVzLiBDYW4gYmUgb25lIG9mOiBwZW5kaW5nLCBzdWNjZXNzLCBlcnJvciwgb3IgZmFpbHVyZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50YXJnZXRfdXJsXSAtIFRoZSB0YXJnZXQgVVJMIHRvIGFzc29jaWF0ZSB3aXRoIHRoaXMgc3RhdHVzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRlc2NyaXB0aW9uXSAtIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIHN0YXR1cy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb250ZXh0XSAtIEEgc3RyaW5nIGxhYmVsIHRvIGRpZmZlcmVudGlhdGUgdGhpcyBzdGF0dXMgYW1vbmcgQ0kgc3lzdGVtcy5cbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSB1cGRhdGVkIGNvbW1pdCBiYWNrXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlU3RhdHVzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTdGF0dXMoY29tbWl0U0hBLCBvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3N0YXR1c2VzLycgKyBjb21taXRTSEEsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBVcGRhdGUgcmVwb3NpdG9yeSBpbmZvcm1hdGlvblxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNlZGl0XG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIE5ldyBwYXJhbWV0ZXJzIHRoYXQgd2lsbCBiZSBzZXQgdG8gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm5hbWUgLSBOYW1lIG9mIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZGVzY3JpcHRpb25dIC0gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmhvbWVwYWdlXSAtIEEgVVJMIHdpdGggbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcml2YXRlXSAtIEVpdGhlciB0cnVlIHRvIG1ha2UgdGhlIHJlcG9zaXRvcnkgcHJpdmF0ZSwgb3IgZmFsc2UgdG8gbWFrZSBpdCBwdWJsaWMuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmhhc19pc3N1ZXNdIC0gRWl0aGVyIHRydWUgdG8gZW5hYmxlIGlzc3VlcyBmb3IgdGhpcyByZXBvc2l0b3J5LCBmYWxzZSB0byBkaXNhYmxlIHRoZW0uXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmhhc193aWtpXSAtIEVpdGhlciB0cnVlIHRvIGVuYWJsZSB0aGUgd2lraSBmb3IgdGhpcyByZXBvc2l0b3J5LCBmYWxzZSB0byBkaXNhYmxlIGl0LlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5oYXNfZG93bmxvYWRzXSAtIEVpdGhlciB0cnVlIHRvIGVuYWJsZSBkb3dubG9hZHMsIGZhbHNlIHRvIGRpc2FibGUgdGhlbS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kZWZhdWx0X2JyYW5jaF0gLSBVcGRhdGVzIHRoZSBkZWZhdWx0IGJyYW5jaCBmb3IgdGhpcyByZXBvc2l0b3J5LlxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIHVwZGF0ZWQgcmVwb3NpdG9yeSBiYWNrXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlUmVwb3NpdG9yeScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUmVwb3NpdG9yeShvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVwb3NpdG9yeVxuICAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jZ2V0XG4gICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXBvc2l0b3J5XG4gICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXREZXRhaWxzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXRhaWxzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCB0aGUgY29udHJpYnV0b3JzIHRvIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvI2xpc3QtY29udHJpYnV0b3JzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBjb250cmlidXRvcnNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRDb250cmlidXRvcnMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRyaWJ1dG9ycyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29udHJpYnV0b3JzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIGNvbnRyaWJ1dG9yIHN0YXRzIHRvIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvI2xpc3QtY29udHJpYnV0b3JzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBjb250cmlidXRvcnNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRDb250cmlidXRvclN0YXRzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250cmlidXRvclN0YXRzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9zdGF0cy9jb250cmlidXRvcnMnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCB0aGUgdXNlcnMgd2hvIGFyZSBjb2xsYWJvcmF0b3JzIG9uIHRoZSByZXBvc2l0b3J5LiBUaGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBtdXN0IGhhdmVcbiAgICAgICAqIHB1c2ggYWNjZXNzIHRvIHVzZSB0aGlzIG1ldGhvZFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2NvbGxhYm9yYXRvcnMvI2xpc3QtY29sbGFib3JhdG9yc1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgY29sbGFib3JhdG9yc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldENvbGxhYm9yYXRvcnMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbGxhYm9yYXRvcnMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2NvbGxhYm9yYXRvcnMnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgaWYgYSB1c2VyIGlzIGEgY29sbGFib3JhdG9yIG9uIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29sbGFib3JhdG9ycy8jY2hlY2staWYtYS11c2VyLWlzLWEtY29sbGFib3JhdG9yXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgLSB0aGUgdXNlciB0byBjaGVja1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgdXNlciBpcyBhIGNvbGxhYm9yYXRvciBhbmQgZmFsc2UgaWYgdGhleSBhcmUgbm90XG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0IHtCb29sZWFufSBbZGVzY3JpcHRpb25dXG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnaXNDb2xsYWJvcmF0b3InLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ29sbGFib3JhdG9yKHVzZXJuYW1lLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29sbGFib3JhdG9ycy8nICsgdXNlcm5hbWUsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIGNvbnRlbnRzIG9mIGEgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2NvbnRlbnRzLyNnZXQtY29udGVudHNcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgLSB0aGUgcmVmIHRvIGNoZWNrXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIGNvbnRhaW5pbmcgdGhlIGNvbnRlbnQgdG8gZmV0Y2hcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmF3IC0gYHRydWVgIGlmIHRoZSByZXN1bHRzIHNob3VsZCBiZSByZXR1cm5lZCByYXcgaW5zdGVhZCBvZiBHaXRIdWIncyBub3JtYWxpemVkIGZvcm1hdFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGZldGNoZWQgZGF0YVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldENvbnRlbnRzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250ZW50cyhyZWYsIHBhdGgsIHJhdywgY2IpIHtcbiAgICAgICAgIHBhdGggPSBwYXRoID8gJycgKyBlbmNvZGVVUkkocGF0aCkgOiAnJztcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2NvbnRlbnRzLycgKyBwYXRoLCB7XG4gICAgICAgICAgICByZWY6IHJlZlxuICAgICAgICAgfSwgY2IsIHJhdyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBSRUFETUUgb2YgYSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29udGVudHMvI2dldC10aGUtcmVhZG1lXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIC0gdGhlIHJlZiB0byBjaGVja1xuICAgICAgICogQHBhcmFtIHtib29sZWFufSByYXcgLSBgdHJ1ZWAgaWYgdGhlIHJlc3VsdHMgc2hvdWxkIGJlIHJldHVybmVkIHJhdyBpbnN0ZWFkIG9mIEdpdEh1YidzIG5vcm1hbGl6ZWQgZm9ybWF0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgZmV0Y2hlZCBkYXRhXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0UmVhZG1lJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWFkbWUocmVmLCByYXcsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9yZWFkbWUnLCB7XG4gICAgICAgICAgICByZWY6IHJlZlxuICAgICAgICAgfSwgY2IsIHJhdyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRm9yayBhIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9mb3Jrcy8jY3JlYXRlLWEtZm9ya1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBuZXdseSBjcmVhdGVkIGZvcmtcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdmb3JrJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JrKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZm9ya3MnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRm9yayBhIHJlcG9zaXRvcnkgdG8gYW4gb3JnYW5pemF0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvZm9ya3MvI2NyZWF0ZS1hLWZvcmtcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmcgLSBvcmdhbml6YXRpb24gd2hlcmUgeW91J2QgbGlrZSB0byBjcmVhdGUgdGhlIGZvcmsuXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG5ld2x5IGNyZWF0ZWQgZm9ya1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICpcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdmb3JrVG9PcmcnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvcmtUb09yZyhvcmcsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZm9ya3M/b3JnYW5pemF0aW9uPScgKyBvcmcsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IGEgcmVwb3NpdG9yeSdzIGZvcmtzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvZm9ya3MvI2xpc3QtZm9ya3NcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHJlcG9zaXRvcmllcyBmb3JrZWQgZnJvbSB0aGlzIG9uZVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RGb3JrcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdEZvcmtzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9mb3JrcycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGUgYSBuZXcgYnJhbmNoIGZyb20gYW4gZXhpc3RpbmcgYnJhbmNoLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvbGRCcmFuY2g9bWFzdGVyXSAtIHRoZSBuYW1lIG9mIHRoZSBleGlzdGluZyBicmFuY2hcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdCcmFuY2ggLSB0aGUgbmFtZSBvZiB0aGUgbmV3IGJyYW5jaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGNvbW1pdCBkYXRhIGZvciB0aGUgaGVhZCBvZiB0aGUgbmV3IGJyYW5jaFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NyZWF0ZUJyYW5jaCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQnJhbmNoKG9sZEJyYW5jaCwgbmV3QnJhbmNoLCBjYikge1xuICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgIGlmICh0eXBlb2YgbmV3QnJhbmNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYiA9IG5ld0JyYW5jaDtcbiAgICAgICAgICAgIG5ld0JyYW5jaCA9IG9sZEJyYW5jaDtcbiAgICAgICAgICAgIG9sZEJyYW5jaCA9ICdtYXN0ZXInO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWYoJ2hlYWRzLycgKyBvbGRCcmFuY2gpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgc2hhID0gcmVzcG9uc2UuZGF0YS5vYmplY3Quc2hhO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5jcmVhdGVSZWYoe1xuICAgICAgICAgICAgICAgc2hhOiBzaGEsXG4gICAgICAgICAgICAgICByZWY6ICdyZWZzL2hlYWRzLycgKyBuZXdCcmFuY2hcbiAgICAgICAgICAgIH0sIGNiKTtcbiAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyBwdWxsIHJlcXVlc3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wdWxscy8jY3JlYXRlLWEtcHVsbC1yZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBwdWxsIHJlcXVlc3QgZGVzY3JpcHRpb25cbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBuZXcgcHVsbCByZXF1ZXN0XG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlUHVsbFJlcXVlc3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVB1bGxSZXF1ZXN0KG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcHVsbHMnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVXBkYXRlIGEgcHVsbCByZXF1ZXN0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHVsbHMvI3VwZGF0ZS1hLXB1bGwtcmVxdWVzdFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBudW1iZXIgLSB0aGUgbnVtYmVyIG9mIHRoZSBwdWxsIHJlcXVlc3QgdG8gdXBkYXRlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBwdWxsIHJlcXVlc3QgZGVzY3JpcHRpb25cbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHB1bGwgcmVxdWVzdCBpbmZvcm1hdGlvblxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3VwZGF0ZVB1bGxSZXF1ZXN0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQdWxsUmVxdWVzdChudW1iZXIsIG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3B1bGxzLycgKyBudW1iZXIsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSBob29rcyBmb3IgdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9ob29rcy8jbGlzdC1ob29rc1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgaG9va3NcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0SG9va3MnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RIb29rcyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvaG9va3MnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGEgaG9vayBmb3IgdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9ob29rcy8jZ2V0LXNpbmdsZS1ob29rXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSB0aGUgaWQgb2YgdGhlIHdlYm9va1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGRldGFpbHMgb2YgdGhlIHdlYm9va1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldEhvb2snLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEhvb2soaWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9ob29rcy8nICsgaWQsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgYSBuZXcgaG9vayB0byB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2hvb2tzLyNjcmVhdGUtYS1ob29rXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBjb25maWd1cmF0aW9uIGRlc2NyaWJpbmcgdGhlIG5ldyBob29rXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3IHdlYmhvb2tcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjcmVhdGVIb29rJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVIb29rKG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvaG9va3MnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRWRpdCBhbiBleGlzdGluZyB3ZWJob29rXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvaG9va3MvI2VkaXQtYS1ob29rXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSB0aGUgaWQgb2YgdGhlIHdlYmhvb2tcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIG5ldyBkZXNjcmlwdGlvbiBvZiB0aGUgd2ViaG9va1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIHVwZGF0ZWQgd2ViaG9va1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3VwZGF0ZUhvb2snLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUhvb2soaWQsIG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2hvb2tzLycgKyBpZCwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlbGV0ZSBhIHdlYmhvb2tcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9ob29rcy8jZGVsZXRlLWEtaG9va1xuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIC0gdGhlIGlkIG9mIHRoZSB3ZWJob29rIHRvIGJlIGRlbGV0ZWRcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIGNhbGwgaXMgc3VjY2Vzc2Z1bFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2RlbGV0ZUhvb2snLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUhvb2soaWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9ob29rcy8nICsgaWQsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSBkZXBsb3kga2V5cyBmb3IgdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9rZXlzLyNsaXN0LWRlcGxveS1rZXlzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBkZXBsb3kga2V5c1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RLZXlzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0S2V5cyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcva2V5cycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgYSBkZXBsb3kga2V5IGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2tleXMvI2dldC1hLWRlcGxveS1rZXlcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIHRoZSBpZCBvZiB0aGUgZGVwbG95IGtleVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGRldGFpbHMgb2YgdGhlIGRlcGxveSBrZXlcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRLZXknLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEtleShpZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2tleXMvJyArIGlkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkIGEgbmV3IGRlcGxveSBrZXkgdG8gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9rZXlzLyNhZGQtYS1uZXctZGVwbG95LWtleVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgY29uZmlndXJhdGlvbiBkZXNjcmliaW5nIHRoZSBuZXcgZGVwbG95IGtleVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ldyBkZXBsb3kga2V5XG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlS2V5JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVLZXkob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9rZXlzJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlbGV0ZSBhIGRlcGxveSBrZXlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9rZXlzLyNyZW1vdmUtYS1kZXBsb3kta2V5XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSB0aGUgaWQgb2YgdGhlIGRlcGxveSBrZXkgdG8gYmUgZGVsZXRlZFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgY2FsbCBpcyBzdWNjZXNzZnVsXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZGVsZXRlS2V5JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVLZXkoaWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9rZXlzLycgKyBpZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlbGV0ZSBhIGZpbGUgZnJvbSBhIGJyYW5jaFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2NvbnRlbnRzLyNkZWxldGUtYS1maWxlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnJhbmNoIC0gdGhlIGJyYW5jaCB0byBkZWxldGUgZnJvbSwgb3IgdGhlIGRlZmF1bHQgYnJhbmNoIGlmIG5vdCBzcGVjaWZpZWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggb2YgdGhlIGZpbGUgdG8gcmVtb3ZlXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tbWl0IGluIHdoaWNoIHRoZSBkZWxldGUgb2NjdXJyZWRcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdkZWxldGVGaWxlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVGaWxlKGJyYW5jaCwgcGF0aCwgY2IpIHtcbiAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5nZXRTaGEoYnJhbmNoLCBwYXRoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGRlbGV0ZUNvbW1pdCA9IHtcbiAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdEZWxldGUgdGhlIGZpbGUgYXQgXFwnJyArIHBhdGggKyAnXFwnJyxcbiAgICAgICAgICAgICAgIHNoYTogcmVzcG9uc2UuZGF0YS5zaGEsXG4gICAgICAgICAgICAgICBicmFuY2g6IGJyYW5jaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuX3JlcXVlc3QoJ0RFTEVURScsICcvcmVwb3MvJyArIF90aGlzNC5fX2Z1bGxuYW1lICsgJy9jb250ZW50cy8nICsgcGF0aCwgZGVsZXRlQ29tbWl0LCBjYik7XG4gICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDaGFuZ2UgYWxsIHJlZmVyZW5jZXMgaW4gYSByZXBvIGZyb20gb2xkUGF0aCB0byBuZXdfcGF0aFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJyYW5jaCAtIHRoZSBicmFuY2ggdG8gY2Fycnkgb3V0IHRoZSByZWZlcmVuY2UgY2hhbmdlLCBvciB0aGUgZGVmYXVsdCBicmFuY2ggaWYgbm90IHNwZWNpZmllZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9sZFBhdGggLSBvcmlnaW5hbCBwYXRoXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3UGF0aCAtIG5ldyByZWZlcmVuY2UgcGF0aFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGNvbW1pdCBpbiB3aGljaCB0aGUgbW92ZSBvY2N1cnJlZFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ21vdmUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmUoYnJhbmNoLCBvbGRQYXRoLCBuZXdQYXRoLCBjYikge1xuICAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgIHZhciBvbGRTaGEgPSB2b2lkIDA7XG4gICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWYoJ2hlYWRzLycgKyBicmFuY2gpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBfcmVmLmRhdGEub2JqZWN0O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5nZXRUcmVlKG9iamVjdC5zaGEgKyAnP3JlY3Vyc2l2ZT10cnVlJyk7XG4gICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIF9yZWYyJGRhdGEgPSBfcmVmMi5kYXRhLFxuICAgICAgICAgICAgICAgIHRyZWUgPSBfcmVmMiRkYXRhLnRyZWUsXG4gICAgICAgICAgICAgICAgc2hhID0gX3JlZjIkZGF0YS5zaGE7XG5cbiAgICAgICAgICAgIG9sZFNoYSA9IHNoYTtcbiAgICAgICAgICAgIHZhciBuZXdUcmVlID0gdHJlZS5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgaWYgKHJlZi5wYXRoID09PSBvbGRQYXRoKSB7XG4gICAgICAgICAgICAgICAgICByZWYucGF0aCA9IG5ld1BhdGg7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBpZiAocmVmLnR5cGUgPT09ICd0cmVlJykge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlZi5zaGE7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM1LmNyZWF0ZVRyZWUobmV3VHJlZSk7XG4gICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgICAgdmFyIHRyZWUgPSBfcmVmMy5kYXRhO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5jb21taXQob2xkU2hhLCB0cmVlLnNoYSwgJ1JlbmFtZWQgXFwnJyArIG9sZFBhdGggKyAnXFwnIHRvIFxcJycgKyBuZXdQYXRoICsgJ1xcJycpO1xuICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgICAgICAgIHZhciBjb21taXQgPSBfcmVmNC5kYXRhO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNS51cGRhdGVIZWFkKCdoZWFkcy8nICsgYnJhbmNoLCBjb21taXQuc2hhLCB0cnVlLCBjYik7XG4gICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBXcml0ZSBhIGZpbGUgdG8gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9jb250ZW50cy8jdXBkYXRlLWEtZmlsZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJyYW5jaCAtIHRoZSBuYW1lIG9mIHRoZSBicmFuY2hcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggZm9yIHRoZSBmaWxlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCAtIHRoZSBjb250ZW50cyBvZiB0aGUgZmlsZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSB0aGUgY29tbWl0IG1lc3NhZ2VcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBjb21taXQgb3B0aW9uc1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmF1dGhvcl0gLSB0aGUgYXV0aG9yIG9mIHRoZSBjb21taXRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5jb21taXRlcl0gLSB0aGUgY29tbWl0dGVyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmVuY29kZV0gLSB0cnVlIGlmIHRoZSBjb250ZW50IHNob3VsZCBiZSBiYXNlNjQgZW5jb2RlZFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ldyBjb21taXRcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd3cml0ZUZpbGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlRmlsZShicmFuY2gsIHBhdGgsIGNvbnRlbnQsIG1lc3NhZ2UsIG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYiA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICB9XG4gICAgICAgICB2YXIgZmlsZVBhdGggPSBwYXRoID8gZW5jb2RlVVJJKHBhdGgpIDogJyc7XG4gICAgICAgICB2YXIgc2hvdWxkRW5jb2RlID0gb3B0aW9ucy5lbmNvZGUgIT09IGZhbHNlO1xuICAgICAgICAgdmFyIGNvbW1pdCA9IHtcbiAgICAgICAgICAgIGJyYW5jaDogYnJhbmNoLFxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgIGF1dGhvcjogb3B0aW9ucy5hdXRob3IsXG4gICAgICAgICAgICBjb21taXR0ZXI6IG9wdGlvbnMuY29tbWl0dGVyLFxuICAgICAgICAgICAgY29udGVudDogc2hvdWxkRW5jb2RlID8gX2pzQmFzZS5CYXNlNjQuZW5jb2RlKGNvbnRlbnQpIDogY29udGVudFxuICAgICAgICAgfTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2hhKGJyYW5jaCwgZmlsZVBhdGgpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb21taXQuc2hhID0gcmVzcG9uc2UuZGF0YS5zaGE7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM2Ll9yZXF1ZXN0KCdQVVQnLCAnL3JlcG9zLycgKyBfdGhpczYuX19mdWxsbmFtZSArICcvY29udGVudHMvJyArIGZpbGVQYXRoLCBjb21taXQsIGNiKTtcbiAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuX3JlcXVlc3QoJ1BVVCcsICcvcmVwb3MvJyArIF90aGlzNi5fX2Z1bGxuYW1lICsgJy9jb250ZW50cy8nICsgZmlsZVBhdGgsIGNvbW1pdCwgY2IpO1xuICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgaWYgYSByZXBvc2l0b3J5IGlzIHN0YXJyZWQgYnkgeW91XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvYWN0aXZpdHkvc3RhcnJpbmcvI2NoZWNrLWlmLXlvdS1hcmUtc3RhcnJpbmctYS1yZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSByZXBvc2l0b3J5IGlzIHN0YXJyZWQgYW5kIGZhbHNlIGlmIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBub3Qgc3RhcnJlZFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdCB7Qm9vbGVhbn0gW2Rlc2NyaXB0aW9uXVxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2lzU3RhcnJlZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNTdGFycmVkKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdDIwNG9yNDA0KCcvdXNlci9zdGFycmVkLycgKyB0aGlzLl9fZnVsbG5hbWUsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTdGFyIGEgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2FjdGl2aXR5L3N0YXJyaW5nLyNzdGFyLWEtcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgcmVwb3NpdG9yeSBpcyBzdGFycmVkXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnc3RhcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcihjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BVVCcsICcvdXNlci9zdGFycmVkLycgKyB0aGlzLl9fZnVsbG5hbWUsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBVbnN0YXIgYSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvYWN0aXZpdHkvc3RhcnJpbmcvI3Vuc3Rhci1hLXJlcG9zaXRvcnlcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcG9zaXRvcnkgaXMgdW5zdGFycmVkXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndW5zdGFyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bnN0YXIoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3VzZXIvc3RhcnJlZC8nICsgdGhpcy5fX2Z1bGxuYW1lLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgbmV3IHJlbGVhc2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9yZWxlYXNlcy8jY3JlYXRlLWEtcmVsZWFzZVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHJlbGVhc2VcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBuZXdseSBjcmVhdGVkIHJlbGVhc2VcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjcmVhdGVSZWxlYXNlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSZWxlYXNlKG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcmVsZWFzZXMnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRWRpdCBhIHJlbGVhc2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9yZWxlYXNlcy8jZWRpdC1hLXJlbGVhc2VcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoZSBpZCBvZiB0aGUgcmVsZWFzZVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHJlbGVhc2VcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBtb2RpZmllZCByZWxlYXNlXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlUmVsZWFzZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUmVsZWFzZShpZCwgb3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcmVsZWFzZXMvJyArIGlkLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCByZWxlYXNlc1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3JlbGVhc2VzLyNsaXN0LXJlbGVhc2VzLWZvci1hLXJlcG9zaXRvcnlcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSByZWxlYXNlIGluZm9ybWF0aW9uXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFJlbGVhc2VzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0UmVsZWFzZXMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3JlbGVhc2VzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhIHJlbGVhc2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9yZWxlYXNlcy8jZ2V0LWEtc2luZ2xlLXJlbGVhc2VcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoZSBpZCBvZiB0aGUgcmVsZWFzZVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIHJlbGVhc2UgaW5mb3JtYXRpb25cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRSZWxlYXNlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWxlYXNlKGlkLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcmVsZWFzZXMvJyArIGlkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGVsZXRlIGEgcmVsZWFzZVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3JlbGVhc2VzLyNkZWxldGUtYS1yZWxlYXNlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSB0aGUgcmVsZWFzZSB0byBiZSBkZWxldGVkXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSBvcGVyYXRpb24gaXMgc3VjY2Vzc2Z1bFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2RlbGV0ZVJlbGVhc2UnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJlbGVhc2UoaWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9yZWxlYXNlcy8nICsgaWQsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBNZXJnZSBhIHB1bGwgcmVxdWVzdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3B1bGxzLyNtZXJnZS1hLXB1bGwtcmVxdWVzdC1tZXJnZS1idXR0b25cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIC0gdGhlIG51bWJlciBvZiB0aGUgcHVsbCByZXF1ZXN0IHRvIG1lcmdlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBtZXJnZSBvcHRpb25zIGZvciB0aGUgcHVsbCByZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBtZXJnZSBpbmZvcm1hdGlvbiBpZiB0aGUgb3BlcmF0aW9uIGlzIHN1Y2Nlc3NmdWxcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdtZXJnZVB1bGxSZXF1ZXN0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtZXJnZVB1bGxSZXF1ZXN0KG51bWJlciwgb3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQVVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3B1bGxzLycgKyBudW1iZXIgKyAnL21lcmdlJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgcHJvamVjdHNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy8jbGlzdC1yZXBvc2l0b3J5LXByb2plY3RzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHByb2plY3RzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFByb2plY3RzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0UHJvamVjdHMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXMoJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9wcm9qZWN0cycsIHsgQWNjZXB0SGVhZGVyOiAnaW5lcnRpYS1wcmV2aWV3JyB9LCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgbmV3IHByb2plY3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy8jY3JlYXRlLWEtcmVwb3NpdG9yeS1wcm9qZWN0XG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcHJvamVjdFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ld2x5IGNyZWF0ZWQgcHJvamVjdFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NyZWF0ZVByb2plY3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3Qob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgb3B0aW9ucy5BY2NlcHRIZWFkZXIgPSAnaW5lcnRpYS1wcmV2aWV3JztcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9wcm9qZWN0cycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cbiAgIH1dKTtcblxuICAgcmV0dXJuIFJlcG9zaXRvcnk7XG59KF9SZXF1ZXN0YWJsZTMuZGVmYXVsdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVwb3NpdG9yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxjRzl6YVhSdmNua3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWJHOW5JaXdpVW1Wd2IzTnBkRzl5ZVNJc0ltWjFiR3h1WVcxbElpd2lZWFYwYUNJc0ltRndhVUpoYzJVaUxDSmZYMloxYkd4dVlXMWxJaXdpWDE5amRYSnlaVzUwVkhKbFpTSXNJbUp5WVc1amFDSXNJbk5vWVNJc0luSmxaaUlzSW1OaUlpd2lYM0psY1hWbGMzUWlMQ0p2Y0hScGIyNXpJaXdpYm5WdFltVnlJaXdpWW1GelpTSXNJbWhsWVdRaUxDSnphVzVqWlNJc0lsOWtZWFJsVkc5SlUwOGlMQ0oxYm5ScGJDSXNJbkJoZEdnaUxDSjBjbVZsVTBoQklpd2lZMjl1ZEdWdWRDSXNJbkJ2YzNSQ2IyUjVJaXdpWDJkbGRFTnZiblJsYm5SUFltcGxZM1FpTENKVmRHWTRJaXdpWlc1amIyUmxJaXdpWlc1amIyUnBibWNpTENKQ2RXWm1aWElpTENKMGIxTjBjbWx1WnlJc0lrSnNiMklpTENKQ1lYTmxOalFpTENKS1UwOU9JaXdpYzNSeWFXNW5hV1o1SWl3aVJYSnliM0lpTENKaVlYTmxWSEpsWlZOSVFTSXNJbUpzYjJKVFNFRWlMQ0p1WlhkVWNtVmxJaXdpWW1GelpWOTBjbVZsSWl3aWRISmxaU0lzSW0xdlpHVWlMQ0owZVhCbElpd2lZbUZ6WlZOSVFTSXNJbkJoY21WdWRDSXNJbTFsYzNOaFoyVWlMQ0prWVhSaElpd2ljR0Z5Wlc1MGN5SXNJazlpYW1WamRDSXNJbUZ6YzJsbmJpSXNJblJvWlc0aUxDSnlaWE53YjI1elpTSXNJbU52YlcxcGRGTklRU0lzSW1admNtTmxJaXdpZFhObGNtNWhiV1VpTENKeVlYY2lMQ0psYm1OdlpHVlZVa2tpTENKdmNtY2lMQ0p2YkdSQ2NtRnVZMmdpTENKdVpYZENjbUZ1WTJnaUxDSm5aWFJTWldZaUxDSnZZbXBsWTNRaUxDSmpjbVZoZEdWU1pXWWlMQ0pwWkNJc0ltZGxkRk5vWVNJc0ltUmxiR1YwWlVOdmJXMXBkQ0lzSW05c1pGQmhkR2dpTENKdVpYZFFZWFJvSWl3aWIyeGtVMmhoSWl3aVoyVjBWSEpsWlNJc0ltMWhjQ0lzSW1OeVpXRjBaVlJ5WldVaUxDSmpiMjF0YVhRaUxDSjFjR1JoZEdWSVpXRmtJaXdpWm1sc1pWQmhkR2dpTENKemFHOTFiR1JGYm1OdlpHVWlMQ0poZFhSb2IzSWlMQ0pqYjIxdGFYUjBaWElpTENKZmNtVnhkV1Z6ZERJd05HOXlOREEwSWl3aVgzSmxjWFZsYzNSQmJHeFFZV2RsY3lJc0lrRmpZMlZ3ZEVobFlXUmxjaUlzSWxKbGNYVmxjM1JoWW14bElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPMEZCVDBFN096czdRVUZEUVRzN096dEJRVU5CT3p0QlFVZEJPenM3T3pzN096czdPeXRsUVZwQk96czdPenM3TzBGQllVRXNTVUZCVFVFc1RVRkJUU3h4UWtGQlRTeHRRa0ZCVGl4RFFVRmFPenRCUVVWQk96czdPMGxCUjAxRExGVTdPenRCUVVOSU96czdPenM3UVVGTlFTeDFRa0ZCV1VNc1VVRkJXaXhGUVVGelFrTXNTVUZCZEVJc1JVRkJORUpETEU5QlFUVkNMRVZCUVhGRE8wRkJRVUU3TzBGQlFVRXNNRWhCUXpWQ1JDeEpRVVEwUWl4RlFVTjBRa01zVDBGRWMwSTdPMEZCUld4RExGbEJRVXRETEZWQlFVd3NSMEZCYTBKSUxGRkJRV3hDTzBGQlEwRXNXVUZCUzBrc1lVRkJUQ3hIUVVGeFFqdEJRVU5zUWtNc2FVSkJRVkVzU1VGRVZUdEJRVVZzUWtNc1kwRkJTenRCUVVaaExFOUJRWEpDTzBGQlNHdERPMEZCVDNCRE96dEJRVVZFT3pzN096czdPenM3T3pzMlFrRlBUME1zUnl4RlFVRkxReXhGTEVWQlFVazdRVUZEWWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl4clFrRkJNa1JKTEVkQlFUTkVMRVZCUVd0RkxFbEJRV3hGTEVWQlFYZEZReXhGUVVGNFJTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN1owTkJUMVZGTEU4c1JVRkJVMFlzUlN4RlFVRkpPMEZCUTNCQ0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhOUVVGa0xHTkJRV2RETEV0QlFVdE9MRlZCUVhKRExHZENRVUUwUkU4c1QwRkJOVVFzUlVGQmNVVkdMRVZCUVhKRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0blEwRlBWVVFzUnl4RlFVRkxReXhGTEVWQlFVazdRVUZEYUVJc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRkZCUVdRc1kwRkJhME1zUzBGQlMwNHNWVUZCZGtNc2EwSkJRVGhFU1N4SFFVRTVSQ3hGUVVGeFJTeEpRVUZ5UlN4RlFVRXlSVU1zUlVGQk0wVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN2FVTkJUVmRCTEVVc1JVRkJTVHRCUVVOYUxHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhSUVVGa0xHTkJRV3RETEV0QlFVdE9MRlZCUVhaRExFVkJRWEZFTEVsQlFYSkVMRVZCUVRKRVN5eEZRVUV6UkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenNyUWtGTlUwRXNSU3hGUVVGSk8wRkJRMVlzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFdEJRV1FzWTBGQkswSXNTMEZCUzA0c1ZVRkJjRU1zV1VGQmRVUXNTVUZCZGtRc1JVRkJOa1JMTEVWQlFUZEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dDFRMEZQYVVKRkxFOHNSVUZCVTBZc1JTeEZRVUZKTzBGQlF6TkNSU3h0UWtGQlZVRXNWMEZCVnl4RlFVRnlRanRCUVVOQkxHZENRVUZQTEV0QlFVdEVMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdE9MRlZCUVhCRExHRkJRWGRFVHl4UFFVRjRSQ3hGUVVGcFJVWXNSVUZCYWtVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzNGRFFVOWxSeXhOTEVWQlFWRklMRVVzUlVGQlNUdEJRVU40UWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl4bFFVRjNSRkVzVFVGQmVFUXNSVUZCYTBVc1NVRkJiRVVzUlVGQmQwVklMRVZCUVhoRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzeVEwRlBjVUpITEUwc1JVRkJVVWdzUlN4RlFVRkpPMEZCUXpsQ0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdE9MRlZCUVhCRExHVkJRWGRFVVN4TlFVRjRSQ3hoUVVGM1JTeEpRVUY0UlN4RlFVRTRSVWdzUlVGQk9VVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096dHpRMEZSWjBKSkxFa3NSVUZCVFVNc1NTeEZRVUZOVEN4RkxFVkJRVWs3UVVGRE4wSXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNhVUpCUVRCRVV5eEpRVUV4UkN4WFFVRnZSVU1zU1VGQmNFVXNSVUZCTkVVc1NVRkJOVVVzUlVGQmEwWk1MRVZCUVd4R0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3TzIxRFFVMWhRU3hGTEVWQlFVazdRVUZEWkN4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl4blFrRkJNa1FzU1VGQk0wUXNSVUZCYVVWTExFVkJRV3BGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM0UWtGUFVVWXNSeXhGUVVGTFJTeEZMRVZCUVVrN1FVRkRaQ3huUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXh0UWtGQk5FUkhMRWRCUVRWRUxFVkJRVzFGTEVsQlFXNUZMRVZCUVhsRlJTeEZRVUY2UlN4RlFVRTJSU3hMUVVFM1JTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN1owTkJUMVZJTEUwc1JVRkJVVWNzUlN4RlFVRkpPMEZCUTI1Q0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdE9MRlZCUVhCRExHdENRVUV5UkVVc1RVRkJNMFFzUlVGQmNVVXNTVUZCY2tVc1JVRkJNa1ZITEVWQlFUTkZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dG5RMEZQVlVZc1J5eEZRVUZMUlN4RkxFVkJRVWs3UVVGRGFFSXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNjVUpCUVRoRVJ5eEhRVUU1UkN4RlFVRnhSU3hKUVVGeVJTeEZRVUV5UlVVc1JVRkJNMFVzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN2EwTkJXVmxGTEU4c1JVRkJVMFlzUlN4RlFVRkpPMEZCUTNSQ1JTeHRRa0ZCVlVFc1YwRkJWeXhGUVVGeVFqdEJRVU5CTEdGQlFVa3NUMEZCVDBFc1QwRkJVQ3hMUVVGdFFpeFZRVUYyUWl4RlFVRnRRenRCUVVOb1EwWXNhVUpCUVV0RkxFOUJRVXc3UVVGRFFVRXNjMEpCUVZVc1JVRkJWanRCUVVOR08wRkJRMFJCTEdsQ1FVRlJTU3hMUVVGU0xFZEJRV2RDTEV0QlFVdERMRlZCUVV3c1EwRkJaMEpNTEZGQlFWRkpMRXRCUVhoQ0xFTkJRV2hDTzBGQlEwRktMR2xDUVVGUlRTeExRVUZTTEVkQlFXZENMRXRCUVV0RUxGVkJRVXdzUTBGQlowSk1MRkZCUVZGTkxFdEJRWGhDTEVOQlFXaENPenRCUVVWQkxHZENRVUZQTEV0QlFVdFFMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdE9MRlZCUVhCRExHVkJRVEJFVHl4UFFVRXhSQ3hGUVVGdFJVWXNSVUZCYmtVc1EwRkJVRHRCUVVOR096dEJRVVZCT3pzN096czdPenM3TzNORFFVOWxSQ3hITEVWQlFVdERMRVVzUlVGQlNUdEJRVU4wUWtRc1pVRkJUVUVzVDBGQlR5eEZRVUZpTzBGQlEwRXNaMEpCUVU4c1MwRkJTMFVzVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNhVUpCUVRCRVNTeEhRVUV4UkN4RlFVRnBSU3hKUVVGcVJTeEZRVUYxUlVNc1JVRkJka1VzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenMyUWtGUlQwZ3NUU3hGUVVGUldTeEpMRVZCUVUxVUxFVXNSVUZCU1R0QlFVTjBRa2dzYTBKQlFWTkJMRzFDUVVGcFFrRXNUVUZCYWtJc1IwRkJORUlzUlVGQmNrTTdRVUZEUVN4blFrRkJUeXhMUVVGTFNTeFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl4clFrRkJNa1JqTEVsQlFUTkVMRWRCUVd0RldpeE5RVUZzUlN4RlFVRTBSU3hKUVVFMVJTeEZRVUZyUmtjc1JVRkJiRVlzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPMjFEUVU5aFJpeEhMRVZCUVV0RkxFVXNSVUZCU1R0QlFVTnVRaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhwUWtGQk1FUkhMRWRCUVRGRUxHZENRVUV3UlN4SlFVRXhSU3hGUVVGblJrVXNSVUZCYUVZc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzNkRFFVOXJRa1lzUnl4RlFVRkxSU3hGTEVWQlFVazdRVUZEZUVJc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwNHNWVUZCY0VNc2FVSkJRVEJFUnl4SFFVRXhSQ3hqUVVGM1JTeEpRVUY0UlN4RlFVRTRSVVVzUlVGQk9VVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096aENRVTlSVlN4UExFVkJRVk5XTEVVc1JVRkJTVHRCUVVOc1FpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eHRRa0ZCTkVSbExFOUJRVFZFTEVWQlFYVkZMRWxCUVhaRkxFVkJRVFpGVml4RlFVRTNSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdhVU5CVDFkWExFOHNSVUZCVTFnc1JTeEZRVUZKTzBGQlEzSkNMR0ZCUVVsWkxGZEJRVmNzUzBGQlMwTXNhVUpCUVV3c1EwRkJkVUpHTEU5QlFYWkNMRU5CUVdZN08wRkJSVUZ5UWl4aFFVRkpMR2xDUVVGS0xFVkJRWFZDYzBJc1VVRkJka0k3UVVGRFFTeG5Ra0ZCVHl4TFFVRkxXQ3hSUVVGTUxFTkJRV01zVFVGQlpDeGpRVUZuUXl4TFFVRkxUaXhWUVVGeVF5eHBRa0ZCTmtScFFpeFJRVUUzUkN4RlFVRjFSVm9zUlVGQmRrVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3p0M1EwRkxhMEpYTEU4c1JVRkJVenRCUVVONFFpeGhRVUZKTEU5QlFVOUJMRTlCUVZBc1MwRkJiVUlzVVVGQmRrSXNSVUZCYVVNN1FVRkRPVUp5UWl4blFrRkJTU3h2UWtGQlNqdEJRVU5CTEcxQ1FVRlBPMEZCUTBweFFpeDNRa0ZCVTBjc1kwRkJTME1zVFVGQlRDeERRVUZaU2l4UFFVRmFMRU5CUkV3N1FVRkZTa3NzZVVKQlFWVTdRVUZHVGl4aFFVRlFPMEZCUzBZc1ZVRlFSQ3hOUVU5UExFbEJRVWtzVDBGQlQwTXNUVUZCVUN4TFFVRnJRaXhYUVVGc1FpeEpRVUZwUTA0c2JVSkJRVzFDVFN4TlFVRjRSQ3hGUVVGblJUdEJRVU53UlROQ0xHZENRVUZKTEhsQ1FVRktPMEZCUTBFc2JVSkJRVTg3UVVGRFNuRkNMSGRDUVVGVFFTeFJRVUZSVHl4UlFVRlNMRU5CUVdsQ0xGRkJRV3BDTEVOQlJFdzdRVUZGU2tZc2VVSkJRVlU3UVVGR1RpeGhRVUZRTzBGQlMwWXNWVUZRVFN4TlFVOUJMRWxCUVVrc1QwRkJUMGNzU1VGQlVDeExRVUZuUWl4WFFVRm9RaXhKUVVFclFsSXNiVUpCUVcxQ1VTeEpRVUYwUkN4RlFVRTBSRHRCUVVOb1JUZENMR2RDUVVGSkxHZERRVUZLTzBGQlEwRXNiVUpCUVU4N1FVRkRTbkZDTEhkQ1FVRlRVeXhsUVVGUFRDeE5RVUZRTEVOQlFXTktMRTlCUVdRc1EwRkVURHRCUVVWS1N5eDVRa0ZCVlR0QlFVWk9MR0ZCUVZBN1FVRkxSaXhWUVZCTkxFMUJUMEU3UVVGQlJUdEJRVU5PTVVJc05FUkJRVFpEY1VJc1QwRkJOME1zZVVOQlFUWkRRU3hQUVVFM1F5eFpRVUY1UkZVc1MwRkJTME1zVTBGQlRDeERRVUZsV0N4UFFVRm1MRU5CUVhwRU8wRkJRMEVzYTBKQlFVMHNTVUZCU1Zrc1MwRkJTaXhEUVVGVkxHMUdRVUZXTEVOQlFVNDdRVUZEUmp0QlFVTklPenRCUVVWRU96czdPenM3T3pzN096czdPMmxEUVZWWFF5eFhMRVZCUVdGbUxFa3NSVUZCVFdkQ0xFOHNSVUZCVTNwQ0xFVXNSVUZCU1R0QlFVTjRReXhoUVVGSk1FSXNWVUZCVlR0QlFVTllReXgxUWtGQlYwZ3NWMEZFUVN4RlFVTmhPMEZCUTNoQ1NTeHJRa0ZCVFN4RFFVRkRPMEZCUTBwdVFpeHhRa0ZCVFVFc1NVRkVSanRCUVVWS1dDeHZRa0ZCU3pKQ0xFOUJSa1E3UVVGSFNra3NjVUpCUVUwc1VVRklSanRCUVVsS1F5eHhRa0ZCVFR0QlFVcEdMR0ZCUVVRN1FVRkdTeXhWUVVGa096dEJRVlZCTEdkQ1FVRlBMRXRCUVVzM1FpeFJRVUZNTEVOQlFXTXNUVUZCWkN4alFVRm5ReXhMUVVGTFRpeFZRVUZ5UXl4cFFrRkJOa1FyUWl4UFFVRTNSQ3hGUVVGelJURkNMRVZCUVhSRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzN2FVTkJVVmMwUWl4SkxFVkJRVTFITEU4c1JVRkJVeTlDTEVVc1JVRkJTVHRCUVVNelFpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVFVGQlpDeGpRVUZuUXl4TFFVRkxUaXhWUVVGeVF5eHBRa0ZCTmtRN1FVRkRha1ZwUXl4elFrRkVhVVU3UVVGRmFrVkVMSFZDUVVGWFNTeFBRVVp6UkN4RFFVVTNRenRCUVVZMlF5eFZRVUUzUkN4RlFVZEtMMElzUlVGSVNTeERRVUZRTzBGQlNVWTdPMEZCUlVRN096czdPenM3T3pzN096czdPenMyUWtGWlQyZERMRTBzUlVGQlVVb3NTU3hGUVVGTlN5eFBMRVZCUVZNdlFpeFBMRVZCUVZOR0xFVXNSVUZCU1R0QlFVRkJPenRCUVVONFF5eGhRVUZKTEU5QlFVOUZMRTlCUVZBc1MwRkJiVUlzVlVGQmRrSXNSVUZCYlVNN1FVRkRhRU5HTEdsQ1FVRkxSU3hQUVVGTU8wRkJRMEZCTEhOQ1FVRlZMRVZCUVZZN1FVRkRSanM3UVVGRlJDeGhRVUZKWjBNc1QwRkJUenRCUVVOU1JDdzBRa0ZFVVR0QlFVVlNUQ3h6UWtGR1VUdEJRVWRTVHl4eFFrRkJVeXhEUVVGRFNDeE5RVUZFTzBGQlNFUXNWVUZCV0RzN1FVRk5RVVVzWjBKQlFVOUZMRTlCUVU5RExFMUJRVkFzUTBGQll5eEZRVUZrTEVWQlFXdENia01zVDBGQmJFSXNSVUZCTWtKblF5eEpRVUV6UWl4RFFVRlFPenRCUVVWQkxHZENRVUZQTEV0QlFVdHFReXhSUVVGTUxFTkJRV01zVFVGQlpDeGpRVUZuUXl4TFFVRkxUaXhWUVVGeVF5eHRRa0ZCSzBSMVF5eEpRVUV2UkN4RlFVRnhSV3hETEVWQlFYSkZMRVZCUTBoelF5eEpRVVJITEVOQlEwVXNWVUZCUTBNc1VVRkJSQ3hGUVVGak8wRkJRMnBDTEcxQ1FVRkxNME1zWVVGQlRDeERRVUZ0UWtVc1IwRkJia0lzUjBGQmVVSjVReXhUUVVGVFRDeEpRVUZVTEVOQlFXTndReXhIUVVGMlF5eERRVVJwUWl4RFFVTXlRanRCUVVNMVF5eHRRa0ZCVDNsRExGRkJRVkE3UVVGRFJpeFZRVXBITEVOQlFWQTdRVUZMUmpzN1FVRkZSRHM3T3pzN096czdPenM3TzJsRFFWTlhlRU1zUnl4RlFVRkxlVU1zVXl4RlFVRlhReXhMTEVWQlFVOTZReXhGTEVWQlFVazdRVUZEYmtNc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRTlCUVdRc1kwRkJhVU1zUzBGQlMwNHNWVUZCZEVNc2EwSkJRVFpFU1N4SFFVRTNSQ3hGUVVGdlJUdEJRVU40UlVRc2FVSkJRVXN3UXl4VFFVUnRSVHRCUVVWNFJVTXNiVUpCUVU5Qk8wRkJSbWxGTEZWQlFYQkZMRVZCUjBwNlF5eEZRVWhKTEVOQlFWQTdRVUZKUmpzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN08yMURRVmxoZDBNc1V5eEZRVUZYZEVNc1R5eEZRVUZUUml4RkxFVkJRVWs3UVVGRGJFTXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEUxQlFXUXNZMEZCWjBNc1MwRkJTMDRzVlVGQmNrTXNhMEpCUVRSRU5rTXNVMEZCTlVRc1JVRkJlVVYwUXl4UFFVRjZSU3hGUVVGclJrWXNSVUZCYkVZc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3ZFVOQlpXbENSU3hQTEVWQlFWTkdMRVVzUlVGQlNUdEJRVU16UWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUMEZCWkN4alFVRnBReXhMUVVGTFRpeFZRVUYwUXl4RlFVRnZSRThzVDBGQmNFUXNSVUZCTmtSR0xFVkJRVGRFTEVOQlFWQTdRVUZEUmpzN1FVRkZSanM3T3pzN096czdPMmxEUVUxWlFTeEZMRVZCUVVrN1FVRkRXaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhGUVVGclJDeEpRVUZzUkN4RlFVRjNSRXNzUlVGQmVFUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN2MwTkJUV2RDUVN4RkxFVkJRVWs3UVVGRGFrSXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNiMEpCUVN0RUxFbEJRUzlFTEVWQlFYRkZTeXhGUVVGeVJTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzd1EwRk5iMEpCTEVVc1JVRkJTVHRCUVVOeVFpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5d3dRa0ZCY1VVc1NVRkJja1VzUlVGQk1rVkxMRVZCUVRORkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0MVEwRlBhVUpCTEVVc1JVRkJTVHRCUVVOc1FpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eHhRa0ZCWjBVc1NVRkJhRVVzUlVGQmMwVkxMRVZCUVhSRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0eFEwRlBaVEJETEZFc1JVRkJWVEZETEVVc1JVRkJTVHRCUVVNeFFpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eDFRa0ZCWjBVclF5eFJRVUZvUlN4RlFVRTBSU3hKUVVFMVJTeEZRVUZyUmpGRExFVkJRV3hHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3TzJ0RFFWTlpSQ3hITEVWQlFVdFZMRWtzUlVGQlRXdERMRWNzUlVGQlN6TkRMRVVzUlVGQlNUdEJRVU0zUWxNc1owSkJRVTlCTEZsQlFWVnRReXhWUVVGVmJrTXNTVUZCVml4RFFVRldMRWRCUVRoQ0xFVkJRWEpETzBGQlEwRXNaMEpCUVU4c1MwRkJTMUlzVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNhMEpCUVRKRVl5eEpRVUV6UkN4RlFVRnRSVHRCUVVOMlJWWTdRVUZFZFVVc1ZVRkJia1VzUlVGRlNrTXNSVUZHU1N4RlFVVkJNa01zUjBGR1FTeERRVUZRTzBGQlIwWTdPMEZCUlVRN096czdPenM3T3pzN08yZERRVkZWTlVNc1J5eEZRVUZMTkVNc1J5eEZRVUZMTTBNc1JTeEZRVUZKTzBGQlEzSkNMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRPTEZWQlFYQkRMR05CUVhsRU8wRkJRemRFU1R0QlFVUTJSQ3hWUVVGNlJDeEZRVVZLUXl4RlFVWkpMRVZCUlVFeVF5eEhRVVpCTEVOQlFWQTdRVUZIUmpzN1FVRkZSRHM3T3pzN096czdPekpDUVUxTE0wTXNSU3hGUVVGSk8wRkJRMDRzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFMUJRV1FzWTBGQlowTXNTMEZCUzA0c1ZVRkJja01zWVVGQmVVUXNTVUZCZWtRc1JVRkJLMFJMTEVWQlFTOUVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdaME5CVVZVMlF5eEhMRVZCUVVzM1F5eEZMRVZCUVVrN1FVRkRhRUlzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFMUJRV1FzWTBGQlowTXNTMEZCUzA0c1ZVRkJja01zTkVKQlFYTkZhMFFzUjBGQmRFVXNSVUZCTmtVc1NVRkJOMFVzUlVGQmJVWTNReXhGUVVGdVJpeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3p0blEwRk5WVUVzUlN4RlFVRkpPMEZCUTFnc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwNHNWVUZCY0VNc1lVRkJkMFFzU1VGQmVFUXNSVUZCT0VSTExFVkJRVGxFTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR0UTBGUFlUaERMRk1zUlVGQlYwTXNVeXhGUVVGWEwwTXNSU3hGUVVGSk8wRkJRVUU3TzBGQlEzQkRMR0ZCUVVrc1QwRkJUeXRETEZOQlFWQXNTMEZCY1VJc1ZVRkJla0lzUlVGQmNVTTdRVUZEYkVNdlF5eHBRa0ZCU3l0RExGTkJRVXc3UVVGRFFVRXNkMEpCUVZsRUxGTkJRVm83UVVGRFFVRXNkMEpCUVZrc1VVRkJXanRCUVVOR096dEJRVVZFTEdkQ1FVRlBMRXRCUVV0RkxFMUJRVXdzV1VGQmNVSkdMRk5CUVhKQ0xFVkJRMGhTTEVsQlJFY3NRMEZEUlN4VlFVRkRReXhSUVVGRUxFVkJRV003UVVGRGFrSXNaMEpCUVVsNlF5eE5RVUZOZVVNc1UwRkJVMHdzU1VGQlZDeERRVUZqWlN4TlFVRmtMRU5CUVhGQ2JrUXNSMEZCTDBJN1FVRkRRU3h0UWtGQlR5eFBRVUZMYjBRc1UwRkJUQ3hEUVVGbE8wRkJRMjVDY0VRc2RVSkJSRzFDTzBGQlJXNUNReXh2UTBGQmJVSm5SRHRCUVVaQkxHRkJRV1lzUlVGSFNpOURMRVZCU0Vrc1EwRkJVRHRCUVVsR0xGVkJVRWNzUTBGQlVEdEJRVkZHT3p0QlFVVkVPenM3T3pzN096czdPM2REUVU5clFrVXNUeXhGUVVGVFJpeEZMRVZCUVVrN1FVRkROVUlzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFMUJRV1FzWTBGQlowTXNTMEZCUzA0c1ZVRkJja01zWVVGQmVVUlBMRTlCUVhwRUxFVkJRV3RGUml4RlFVRnNSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPM2REUVZGclFrY3NUU3hGUVVGUlJDeFBMRVZCUVZOR0xFVXNSVUZCU1R0QlFVTndReXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1QwRkJaQ3hqUVVGcFF5eExRVUZMVGl4VlFVRjBReXhsUVVFd1JGRXNUVUZCTVVRc1JVRkJiMFZFTEU5QlFYQkZMRVZCUVRaRlJpeEZRVUUzUlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenRuUTBGTlZVRXNSU3hGUVVGSk8wRkJRMWdzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFdEJRV1FzWTBGQkswSXNTMEZCUzA0c1ZVRkJjRU1zWVVGQmQwUXNTVUZCZUVRc1JVRkJPRVJMTEVWQlFUbEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czRRa0ZQVVcxRUxFVXNSVUZCU1c1RUxFVXNSVUZCU1R0QlFVTmlMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRPTEZWQlFYQkRMR1ZCUVhkRWQwUXNSVUZCZUVRc1JVRkJPRVFzU1VGQk9VUXNSVUZCYjBWdVJDeEZRVUZ3UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3YVVOQlQxZEZMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRM0pDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eE5RVUZrTEdOQlFXZERMRXRCUVV0T0xGVkJRWEpETEdGQlFYbEVUeXhQUVVGNlJDeEZRVUZyUlVZc1JVRkJiRVVzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenRwUTBGUlYyMUVMRVVzUlVGQlNXcEVMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRM3BDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eFBRVUZrTEdOQlFXbERMRXRCUVV0T0xGVkJRWFJETEdWQlFUQkVkMFFzUlVGQk1VUXNSVUZCWjBWcVJDeFBRVUZvUlN4RlFVRjVSVVlzUlVGQmVrVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08ybERRVTlYYlVRc1JTeEZRVUZKYmtRc1JTeEZRVUZKTzBGQlEyaENMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4UlFVRmtMR05CUVd0RExFdEJRVXRPTEZWQlFYWkRMR1ZCUVRKRWQwUXNSVUZCTTBRc1JVRkJhVVVzU1VGQmFrVXNSVUZCZFVWdVJDeEZRVUYyUlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenNyUWtGTlUwRXNSU3hGUVVGSk8wRkJRMVlzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFdEJRV1FzWTBGQkswSXNTMEZCUzA0c1ZVRkJjRU1zV1VGQmRVUXNTVUZCZGtRc1JVRkJOa1JMTEVWQlFUZEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czJRa0ZQVDIxRUxFVXNSVUZCU1c1RUxFVXNSVUZCU1R0QlFVTmFMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRPTEZWQlFYQkRMR05CUVhWRWQwUXNSVUZCZGtRc1JVRkJOa1FzU1VGQk4wUXNSVUZCYlVWdVJDeEZRVUZ1UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3WjBOQlQxVkZMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRM0JDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eE5RVUZrTEdOQlFXZERMRXRCUVV0T0xGVkJRWEpETEZsQlFYZEVUeXhQUVVGNFJDeEZRVUZwUlVZc1JVRkJha1VzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPMmREUVU5VmJVUXNSU3hGUVVGSmJrUXNSU3hGUVVGSk8wRkJRMllzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxGRkJRV1FzWTBGQmEwTXNTMEZCUzA0c1ZVRkJka01zWTBGQk1FUjNSQ3hGUVVFeFJDeEZRVUZuUlN4SlFVRm9SU3hGUVVGelJXNUVMRVZCUVhSRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzN2FVTkJVVmRJTEUwc1JVRkJVVmtzU1N4RlFVRk5WQ3hGTEVWQlFVazdRVUZCUVRzN1FVRkRNVUlzWjBKQlFVOHNTMEZCUzI5RUxFMUJRVXdzUTBGQldYWkVMRTFCUVZvc1JVRkJiMEpaTEVsQlFYQkNMRVZCUTBnMlFpeEpRVVJITEVOQlEwVXNWVUZCUTBNc1VVRkJSQ3hGUVVGak8wRkJRMnBDTEdkQ1FVRk5ZeXhsUVVGbE8wRkJRMnhDY0VJc2EwUkJRV2REZUVJc1NVRkJhRU1zVDBGRWEwSTdRVUZGYkVKWUxHOUNRVUZMZVVNc1UwRkJVMHdzU1VGQlZDeERRVUZqY0VNc1IwRkdSRHRCUVVkc1FrUTdRVUZJYTBJc1lVRkJja0k3UVVGTFFTeHRRa0ZCVHl4UFFVRkxTU3hSUVVGTUxFTkJRV01zVVVGQlpDeGpRVUZyUXl4UFFVRkxUaXhWUVVGMlF5eHJRa0ZCT0VSakxFbEJRVGxFTEVWQlFYTkZORU1zV1VGQmRFVXNSVUZCYjBaeVJDeEZRVUZ3Uml4RFFVRlFPMEZCUTBZc1ZVRlNSeXhEUVVGUU8wRkJVMFk3TzBGQlJVUTdPenM3T3pzN096czdPekpDUVZGTFNDeE5MRVZCUVZGNVJDeFBMRVZCUVZORExFOHNSVUZCVTNaRUxFVXNSVUZCU1R0QlFVRkJPenRCUVVOb1F5eGhRVUZKZDBRc1pVRkJTanRCUVVOQkxHZENRVUZQTEV0QlFVdFNMRTFCUVV3c1dVRkJjVUp1UkN4TlFVRnlRaXhGUVVOSWVVTXNTVUZFUnl4RFFVTkZPMEZCUVVFc1owSkJRVk5YTEUxQlFWUXNVVUZCUldZc1NVRkJSaXhEUVVGVFpTeE5RVUZVTzBGQlFVRXNiVUpCUVhOQ0xFOUJRVXRSTEU5QlFVd3NRMEZCWjBKU0xFOUJRVTl1UkN4SFFVRjJRaXh4UWtGQmRFSTdRVUZCUVN4VlFVUkdMRVZCUlVoM1F5eEpRVVpITEVOQlJVVXNhVUpCUVhsQ08wRkJRVUVzYlVOQlFYWkNTaXhKUVVGMVFqdEJRVUZCTEdkQ1FVRm9RazRzU1VGQlowSXNZMEZCYUVKQkxFbEJRV2RDTzBGQlFVRXNaMEpCUVZZNVFpeEhRVUZWTEdOQlFWWkJMRWRCUVZVN08wRkJRelZDTUVRc2NVSkJRVk14UkN4SFFVRlVPMEZCUTBFc1owSkJRVWswUWl4VlFVRlZSU3hMUVVGTE9FSXNSMEZCVEN4RFFVRlRMRlZCUVVNelJDeEhRVUZFTEVWQlFWTTdRVUZETjBJc2JVSkJRVWxCTEVsQlFVbFZMRWxCUVVvc1MwRkJZVFpETEU5QlFXcENMRVZCUVRCQ08wRkJRM1pDZGtRc2MwSkJRVWxWTEVsQlFVb3NSMEZCVnpoRExFOUJRVmc3UVVGRFJqdEJRVU5FTEcxQ1FVRkplRVFzU1VGQlNTdENMRWxCUVVvc1MwRkJZU3hOUVVGcVFpeEZRVUY1UWp0QlFVTjBRaXg1UWtGQlR5OUNMRWxCUVVsRUxFZEJRVmc3UVVGRFJqdEJRVU5FTEhOQ1FVRlBReXhIUVVGUU8wRkJRMFlzWVVGU1lTeERRVUZrTzBGQlUwRXNiVUpCUVU4c1QwRkJTelJFTEZWQlFVd3NRMEZCWjBKcVF5eFBRVUZvUWl4RFFVRlFPMEZCUTBZc1ZVRmtSeXhGUVdWSVdTeEpRV1pITEVOQlpVVTdRVUZCUVN4blFrRkJVVllzU1VGQlVpeFRRVUZGVFN4SlFVRkdPMEZCUVVFc2JVSkJRV3RDTEU5QlFVc3dRaXhOUVVGTUxFTkJRVmxLTEUxQlFWb3NSVUZCYjBJMVFpeExRVUZMT1VJc1IwRkJla0lzYVVKQlFUQkRkMFFzVDBGQk1VTXNaMEpCUVRCRVF5eFBRVUV4UkN4UlFVRnNRanRCUVVGQkxGVkJaa1lzUlVGblFraHFRaXhKUVdoQ1J5eERRV2RDUlR0QlFVRkJMR2RDUVVGUmMwSXNUVUZCVWl4VFFVRkZNVUlzU1VGQlJqdEJRVUZCTEcxQ1FVRnZRaXhQUVVGTE1rSXNWVUZCVEN4WlFVRjVRbWhGTEUxQlFYcENMRVZCUVcxREswUXNUMEZCVHpsRUxFZEJRVEZETEVWQlFTdERMRWxCUVM5RExFVkJRWEZFUlN4RlFVRnlSQ3hEUVVGd1FqdEJRVUZCTEZWQmFFSkdMRU5CUVZBN1FVRnBRa1k3TzBGQlJVUTdPenM3T3pzN096czdPenM3T3pzN08yZERRV05WU0N4TkxFVkJRVkZaTEVrc1JVRkJUVVVzVHl4RlFVRlRjMElzVHl4RlFVRlRMMElzVHl4RlFVRlRSaXhGTEVWQlFVazdRVUZCUVRzN1FVRkRjRVFzWVVGQlNTeFBRVUZQUlN4UFFVRlFMRXRCUVcxQ0xGVkJRWFpDTEVWQlFXMURPMEZCUTJoRFJpeHBRa0ZCUzBVc1QwRkJURHRCUVVOQlFTeHpRa0ZCVlN4RlFVRldPMEZCUTBZN1FVRkRSQ3hoUVVGSk5FUXNWMEZCVjNKRUxFOUJRVTl0UXl4VlFVRlZia01zU1VGQlZpeERRVUZRTEVkQlFYbENMRVZCUVhoRE8wRkJRMEVzWVVGQlNYTkVMR1ZCUVdVM1JDeFJRVUZSWVN4TlFVRlNMRXRCUVcxQ0xFdEJRWFJETzBGQlEwRXNZVUZCU1RaRExGTkJRVk03UVVGRFZpOUVMREJDUVVSVk8wRkJSVlp2UXl3MFFrRkdWVHRCUVVkV0swSXNiMEpCUVZFNVJDeFJRVUZST0VRc1RVRklUanRCUVVsV1F5eDFRa0ZCVnk5RUxGRkJRVkVyUkN4VFFVcFVPMEZCUzFaMFJDeHhRa0ZCVTI5RUxHVkJRV1V6UXl4bFFVRlBUQ3hOUVVGUUxFTkJRV05LTEU5QlFXUXNRMEZCWml4SFFVRjNRMEU3UVVGTWRrTXNWVUZCWWpzN1FVRlJRU3huUWtGQlR5eExRVUZMZVVNc1RVRkJUQ3hEUVVGWmRrUXNUVUZCV2l4RlFVRnZRbWxGTEZGQlFYQkNMRVZCUTBoNFFpeEpRVVJITEVOQlEwVXNWVUZCUTBNc1VVRkJSQ3hGUVVGak8wRkJRMnBDY1VJc2JVSkJRVTg1UkN4SFFVRlFMRWRCUVdGNVF5eFRRVUZUVEN4SlFVRlVMRU5CUVdOd1F5eEhRVUV6UWp0QlFVTkJMRzFDUVVGUExFOUJRVXRITEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFOUJRVXRPTEZWQlFYQkRMR3RDUVVFeVJHMUZMRkZCUVRORUxFVkJRWFZGUml4TlFVRjJSU3hGUVVFclJUVkVMRVZCUVM5RkxFTkJRVkE3UVVGRFJpeFZRVXBITEVWQlNVUXNXVUZCVFR0QlFVTk9MRzFDUVVGUExFOUJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFOUJRVXRPTEZWQlFYQkRMR3RDUVVFeVJHMUZMRkZCUVRORUxFVkJRWFZGUml4TlFVRjJSU3hGUVVFclJUVkVMRVZCUVM5RkxFTkJRVkE3UVVGRFJpeFZRVTVITEVOQlFWQTdRVUZQUmpzN1FVRkZSRHM3T3pzN096czdPenRuUTBGUFZVRXNSU3hGUVVGSk8wRkJRMWdzWjBKQlFVOHNTMEZCUzJ0RkxHZENRVUZNTEc5Q1FVRjFReXhMUVVGTGRrVXNWVUZCTlVNc1JVRkJNRVFzU1VGQk1VUXNSVUZCWjBWTExFVkJRV2hGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPekpDUVUxTFFTeEZMRVZCUVVrN1FVRkRUaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3h4UWtGQmMwTXNTMEZCUzA0c1ZVRkJNME1zUlVGQmVVUXNTVUZCZWtRc1JVRkJLMFJMTEVWQlFTOUVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096WkNRVTFQUVN4RkxFVkJRVWs3UVVGRFVpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVVVGQlpDeHhRa0ZCZVVNc1MwRkJTMDRzVlVGQk9VTXNSVUZCTkVRc1NVRkJOVVFzUlVGQmEwVkxMRVZCUVd4RkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0dlEwRlBZMFVzVHl4RlFVRlRSaXhGTEVWQlFVazdRVUZEZUVJc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRTFCUVdRc1kwRkJaME1zUzBGQlMwNHNWVUZCY2tNc1owSkJRVFJFVHl4UFFVRTFSQ3hGUVVGeFJVWXNSVUZCY2tVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3p0dlEwRlJZMjFFTEVVc1JVRkJTV3BFTEU4c1JVRkJVMFlzUlN4RlFVRkpPMEZCUXpWQ0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhQUVVGa0xHTkJRV2xETEV0QlFVdE9MRlZCUVhSRExHdENRVUUyUkhkRUxFVkJRVGRFTEVWQlFXMUZha1FzVDBGQmJrVXNSVUZCTkVWR0xFVkJRVFZGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPMjFEUVUxaFFTeEZMRVZCUVVrN1FVRkRaQ3huUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhuUWtGQk1rUXNTVUZCTTBRc1JVRkJhVVZMTEVWQlFXcEZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dHBRMEZQVjIxRUxFVXNSVUZCU1c1RUxFVXNSVUZCU1R0QlFVTm9RaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhyUWtGQk1rUjNSQ3hGUVVFelJDeEZRVUZwUlN4SlFVRnFSU3hGUVVGMVJXNUVMRVZCUVhaRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0dlEwRlBZMjFFTEVVc1JVRkJTVzVFTEVVc1JVRkJTVHRCUVVOdVFpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVVVGQlpDeGpRVUZyUXl4TFFVRkxUaXhWUVVGMlF5eHJRa0ZCT0VSM1JDeEZRVUU1UkN4RlFVRnZSU3hKUVVGd1JTeEZRVUV3Ulc1RUxFVkJRVEZGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3ZFVOQlVXbENSeXhOTEVWQlFWRkVMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRMjVETEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0T0xGVkJRWEJETEdWQlFYZEVVU3hOUVVGNFJDeGhRVUYzUlVRc1QwRkJlRVVzUlVGQmFVWkdMRVZCUVdwR0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3TzIxRFFVMWhRU3hGTEVWQlFVazdRVUZEWkN4blFrRkJUeXhMUVVGTGJVVXNaMEpCUVV3c1lVRkJaME1zUzBGQlMzaEZMRlZCUVhKRExHZENRVUUwUkN4RlFVRkRlVVVzWTBGQll5eHBRa0ZCWml4RlFVRTFSQ3hGUVVFclJuQkZMRVZCUVM5R0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0dlEwRlBZMFVzVHl4RlFVRlRSaXhGTEVWQlFVazdRVUZEZUVKRkxHMUNRVUZWUVN4WFFVRlhMRVZCUVhKQ08wRkJRMEZCTEdsQ1FVRlJhMFVzV1VGQlVpeEhRVUYxUWl4cFFrRkJka0k3UVVGRFFTeG5Ra0ZCVHl4TFFVRkxia1VzVVVGQlRDeERRVUZqTEUxQlFXUXNZMEZCWjBNc1MwRkJTMDRzVlVGQmNrTXNaMEpCUVRSRVR5eFBRVUUxUkN4RlFVRnhSVVlzUlVGQmNrVXNRMEZCVUR0QlFVTkdPenM3TzBWQk16SkNjVUp4UlN4eFFqczdRVUVyTWtKNlFrTXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFtaEdMRlZCUVdwQ0lpd2labWxzWlNJNklsSmxjRzl6YVhSdmNua3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVCbWFXeGxYRzRnS2lCQVkyOXdlWEpwWjJoMElDQXlNREV6SUUxcFkyaGhaV3dnUVhWbWNtVnBkR1Z5SUNoRVpYWmxiRzl3YldWdWRDQlRaV1ZrS1NCaGJtUWdNakF4TmlCWllXaHZieUJKYm1NdVhHNGdLaUJBYkdsalpXNXpaU0FnSUNCTWFXTmxibk5sWkNCMWJtUmxjaUI3UUd4cGJtc2dhSFIwY0hNNkx5OXpjR1I0TG05eVp5OXNhV05sYm5ObGN5OUNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSXVhSFJ0YkNCQ1UwUXRNeTFEYkdGMWMyVXRRMnhsWVhKOUxseHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ1IybDBhSFZpTG1weklHbHpJR1p5WldWc2VTQmthWE4wY21saWRYUmhZbXhsTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0JTWlhGMVpYTjBZV0pzWlNCbWNtOXRJQ2N1TDFKbGNYVmxjM1JoWW14bEp6dGNibWx0Y0c5eWRDQlZkR1k0SUdaeWIyMGdKM1YwWmpnbk8xeHVhVzF3YjNKMElIdGNiaUFnSUVKaGMyVTJOQ3hjYm4wZ1puSnZiU0FuYW5NdFltRnpaVFkwSnp0Y2JtbHRjRzl5ZENCa1pXSjFaeUJtY205dElDZGtaV0oxWnljN1hHNWpiMjV6ZENCc2IyY2dQU0JrWldKMVp5Z25aMmwwYUhWaU9uSmxjRzl6YVhSdmNua25LVHRjYmx4dUx5b3FYRzRnS2lCU1pYQnZjMmwwYjNKNUlHVnVZMkZ3YzNWc1lYUmxjeUIwYUdVZ1puVnVZM1JwYjI1aGJHbDBlU0IwYnlCamNtVmhkR1VzSUhGMVpYSjVMQ0JoYm1RZ2JXOWthV1o1SUdacGJHVnpMbHh1SUNvdlhHNWpiR0Z6Y3lCU1pYQnZjMmwwYjNKNUlHVjRkR1Z1WkhNZ1VtVnhkV1Z6ZEdGaWJHVWdlMXh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQlNaWEJ2YzJsMGIzSjVMbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHWjFiR3h1WVcxbElDMGdkR2hsSUdaMWJHd2dibUZ0WlNCdlppQjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1aGRYUm9mU0JiWVhWMGFGMGdMU0JwYm1admNtMWhkR2x2YmlCeVpYRjFhWEpsWkNCMGJ5QmhkWFJvWlc1MGFXTmhkR1VnZEc4Z1IybDBhSFZpWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMkZ3YVVKaGMyVTlhSFIwY0hNNkx5OWhjR2t1WjJsMGFIVmlMbU52YlYwZ0xTQjBhR1VnWW1GelpTQkhhWFJvZFdJZ1FWQkpJRlZTVEZ4dUlDQWdJQ292WEc0Z0lDQmpiMjV6ZEhKMVkzUnZjaWhtZFd4c2JtRnRaU3dnWVhWMGFDd2dZWEJwUW1GelpTa2dlMXh1SUNBZ0lDQWdjM1Z3WlhJb1lYVjBhQ3dnWVhCcFFtRnpaU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZablZzYkc1aGJXVWdQU0JtZFd4c2JtRnRaVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOWpkWEp5Wlc1MFZISmxaU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lHSnlZVzVqYURvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUhOb1lUb2diblZzYkN4Y2JpQWdJQ0FnSUgwN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElHRWdjbVZtWlhKbGJtTmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmwwTDNKbFpuTXZJMmRsZEMxaExYSmxabVZ5Wlc1alpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhKbFppQXRJSFJvWlNCeVpXWmxjbVZ1WTJVZ2RHOGdaMlYwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J5WldabGNtVnVZMlVuY3lCeVpXWlRjR1ZqSUc5eUlHRWdiR2x6ZENCdlppQnlaV1pUY0dWamN5QjBhR0YwSUcxaGRHTm9JR0J5WldaZ1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRkpsWmloeVpXWXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdloybDBMM0psWm5NdkpIdHlaV1o5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUhKbFptVnlaVzVqWlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJkcGRDOXlaV1p6THlOamNtVmhkR1V0WVMxeVpXWmxjbVZ1WTJWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnZEdobElHOWlhbVZqZENCa1pYTmpjbWxpYVc1bklIUm9aU0J5WldaY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhKbFpseHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmpjbVZoZEdWU1pXWW9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFUMU5VSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdloybDBMM0psWm5OZ0xDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSR1ZzWlhSbElHRWdjbVZtWlhKbGJtTmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmwwTDNKbFpuTXZJMlJsYkdWMFpTMWhMWEpsWm1WeVpXNWpaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxaaUF0SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0J5WldZZ2RHOGdaR1ZzZEdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnY21WeGRXVnpkQ0JwY3lCemRXTmpaWE56Wm5Wc1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHUmxiR1YwWlZKbFppaHlaV1lzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUkVWTVJWUkZKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2WjJsMEwzSmxabk12Skh0eVpXWjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRVJsYkdWMFpTQmhJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OGpaR1ZzWlhSbExXRXRjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGNuVmxJR2xtSUhSb1pTQnlaWEYxWlhOMElHbHpJSE4xWTJObGMzTm1kV3hjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWkdWc1pYUmxVbVZ3Ynloallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBSRlRFVlVSU2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUhSaFozTWdiMjRnWVNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012STJ4cGMzUXRkR0ZuYzF4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnZEdGbklHUmhkR0ZjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRGUmhaM01vWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOTBZV2R6WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUc5d1pXNGdjSFZzYkNCeVpYRjFaWE4wY3lCdmJpQjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNCMWJHeHpMeU5zYVhOMExYQjFiR3d0Y21WeGRXVnpkSE5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdiM0IwYVc5dWN5QjBieUJtYVd4MFpYSWdkR2hsSUhObFlYSmphRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQlFVbk5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRGQjFiR3hTWlhGMVpYTjBjeWh2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2Y0hWc2JITmdMQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElHRWdjM0JsWTJsbWFXTWdjSFZzYkNCeVpYRjFaWE4wWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y0hWc2JITXZJMmRsZEMxaExYTnBibWRzWlMxd2RXeHNMWEpsY1hWbGMzUmNiaUFnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCdWRXMWlaWElnTFNCMGFHVWdVRklnZVc5MUlIZHBjMmdnZEc4Z1ptVjBZMmhjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJRkJTSUdaeWIyMGdkR2hsSUVGUVNWeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJRZFd4c1VtVnhkV1Z6ZENodWRXMWlaWElzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZjSFZzYkhNdkpIdHVkVzFpWlhKOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFeHBjM1FnZEdobElHWnBiR1Z6SUc5bUlHRWdjM0JsWTJsbWFXTWdjSFZzYkNCeVpYRjFaWE4wWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y0hWc2JITXZJMnhwYzNRdGNIVnNiQzF5WlhGMVpYTjBjeTFtYVd4bGMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo4YzNSeWFXNW5mU0J1ZFcxaVpYSWdMU0IwYUdVZ1VGSWdlVzkxSUhkcGMyZ2dkRzhnWm1WMFkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHeHBjM1FnYjJZZ1ptbHNaWE1nWm5KdmJTQjBhR1VnUVZCSlhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JRZFd4c1VtVnhkV1Z6ZEVacGJHVnpLRzUxYldKbGNpd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5d2RXeHNjeThrZTI1MWJXSmxjbjB2Wm1sc1pYTmdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dRMjl0Y0dGeVpTQjBkMjhnWW5KaGJtTm9aWE12WTI5dGJXbDBjeTl5WlhCdmMybDBiM0pwWlhOY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTlqYjIxdGFYUnpMeU5qYjIxd1lYSmxMWFIzYnkxamIyMXRhWFJ6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZbUZ6WlNBdElIUm9aU0JpWVhObElHTnZiVzFwZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2hsWVdRZ0xTQjBhR1VnYUdWaFpDQmpiMjF0YVhSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JqYjIxd1lYSnBjMjl1WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOdmJYQmhjbVZDY21GdVkyaGxjeWhpWVhObExDQm9aV0ZrTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMMk52YlhCaGNtVXZKSHRpWVhObGZTNHVMaVI3YUdWaFpIMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dUR2x6ZENCaGJHd2dkR2hsSUdKeVlXNWphR1Z6SUdadmNpQjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMeU5zYVhOMExXSnlZVzVqYUdWelhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYkdsemRDQnZaaUJpY21GdVkyaGxjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JzYVhOMFFuSmhibU5vWlhNb1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzlpY21GdVkyaGxjMkFzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJIWlhRZ1lTQnlZWGNnWW14dllpQm1jbTl0SUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmwwTDJKc2IySnpMeU5uWlhRdFlTMWliRzlpWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjMmhoSUMwZ2RHaGxJSE5vWVNCdlppQjBhR1VnWW14dllpQjBieUJtWlhSamFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUdKc2IySWdabkp2YlNCMGFHVWdRVkJKWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRFSnNiMklvYzJoaExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJkcGRDOWliRzlpY3k4a2UzTm9ZWDFnTENCdWRXeHNMQ0JqWWl3Z0ozSmhkeWNwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZENCaElITnBibWRzWlNCaWNtRnVZMmhjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OWljbUZ1WTJobGN5OGpaMlYwTFdKeVlXNWphRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHSnlZVzVqYUNBdElIUm9aU0J1WVcxbElHOW1JSFJvWlNCaWNtRnVZMmdnZEc4Z1ptVjBZMmhjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmljbUZ1WTJnZ1puSnZiU0IwYUdVZ1FWQkpYRzRnSUNBZ0tpQkFjbVYwZFhKdWN5QjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSQ2NtRnVZMmdvWW5KaGJtTm9MQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwySnlZVzVqYUdWekx5UjdZbkpoYm1Ob2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkhaWFFnWVNCamIyMXRhWFFnWm5KdmJTQjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMMk52YlcxcGRITXZJMmRsZEMxaExYTnBibWRzWlMxamIyMXRhWFJjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnphR0VnTFNCMGFHVWdjMmhoSUdadmNpQjBhR1VnWTI5dGJXbDBJSFJ2SUdabGRHTm9YRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ1kyOXRiV2wwSUdSaGRHRmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwUTI5dGJXbDBLSE5vWVN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzluYVhRdlkyOXRiV2wwY3k4a2UzTm9ZWDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjBhR1VnWTI5dGJXbDBjeUJ2YmlCaElISmxjRzl6YVhSdmNua3NJRzl3ZEdsdmJtRnNiSGtnWm1sc2RHVnlhVzVuSUdKNUlIQmhkR2dzSUdGMWRHaHZjaUJ2Y2lCMGFXMWxJSEpoYm1kbFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012WTI5dGJXbDBjeThqYkdsemRDMWpiMjF0YVhSekxXOXVMV0V0Y21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2Y0hScGIyNXpYU0F0SUhSb1pTQm1hV3gwWlhKcGJtY2diM0IwYVc5dWN5Qm1iM0lnWTI5dGJXbDBjMXh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdHZjSFJwYjI1ekxuTm9ZVjBnTFNCMGFHVWdVMGhCSUc5eUlHSnlZVzVqYUNCMGJ5QnpkR0Z5ZENCbWNtOXRYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyOXdkR2x2Ym5NdWNHRjBhRjBnTFNCMGFHVWdjR0YwYUNCMGJ5QnpaV0Z5WTJnZ2IyNWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1aGRYUm9iM0pkSUMwZ2RHaGxJR052YlcxcGRDQmhkWFJvYjNKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3S0VSaGRHVjhjM1J5YVc1bktYMGdXMjl3ZEdsdmJuTXVjMmx1WTJWZElDMGdiMjVzZVNCamIyMXRhWFJ6SUdGbWRHVnlJSFJvYVhNZ1pHRjBaU0IzYVd4c0lHSmxJSEpsZEhWeWJtVmtYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2V5aEVZWFJsZkhOMGNtbHVaeWw5SUZ0dmNIUnBiMjV6TG5WdWRHbHNYU0F0SUc5dWJIa2dZMjl0YldsMGN5QmlaV1p2Y21VZ2RHaHBjeUJrWVhSbElIZHBiR3dnWW1VZ2NtVjBkWEp1WldSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JR052YlcxcGRITWdabTkxYm1RZ2JXRjBZMmhwYm1jZ2RHaGxJR055YVhSbGNtbGhYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR3hwYzNSRGIyMXRhWFJ6S0c5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ1kySWdQU0J2Y0hScGIyNXpPMXh1SUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUh0OU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1emFXNWpaU0E5SUhSb2FYTXVYMlJoZEdWVWIwbFRUeWh2Y0hScGIyNXpMbk5wYm1ObEtUdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdWRXNTBhV3dnUFNCMGFHbHpMbDlrWVhSbFZHOUpVMDhvYjNCMGFXOXVjeTUxYm5ScGJDazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzlqYjIxdGFYUnpZQ3dnYjNCMGFXOXVjeXdnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUJoSUhOcGJtZHNaU0JqYjIxdGFYUWdhVzVtYjNKdFlYUnBiMjRnWm05eUlHRWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OWpiMjF0YVhSekx5Tm5aWFF0WVMxemFXNW5iR1V0WTI5dGJXbDBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxaaUF0SUhSb1pTQnlaV1psY21WdVkyVWdabTl5SUhSb1pTQmpiMjF0YVhRdGFYTm9YRzRnSUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHTnZiVzFwZENCcGJtWnZjbTFoZEdsdmJseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FnS2k5Y2JpQWdJR2RsZEZOcGJtZHNaVU52YlcxcGRDaHlaV1lzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaV1lnUFNCeVpXWWdmSHdnSnljN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdlkyOXRiV2wwY3k4a2UzSmxabjFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElIUm9ZU0J6YUdFZ1ptOXlJR0VnY0dGeWRHbGpkV3hoY2lCdlltcGxZM1FnYVc0Z2RHaGxJSEpsY0c5emFYUnZjbmt1SUZSb2FYTWdhWE1nWVNCamIyNTJaVzVwWlc1alpTQm1kVzVqZEdsdmJseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzSmxjRzl6TDJOdmJuUmxiblJ6THlOblpYUXRZMjl1ZEdWdWRITmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYlluSmhibU5vWFNBdElIUm9aU0JpY21GdVkyZ2dkRzhnYkc5dmF5QnBiaXdnYjNJZ2RHaGxJSEpsY0c5emFYUnZjbmtuY3lCa1pXWmhkV3gwSUdKeVlXNWphQ0JwWmlCdmJXbDBkR1ZrWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjR0YwYUNBdElIUm9aU0J3WVhSb0lHOW1JSFJvWlNCbWFXeGxJRzl5SUdScGNtVmpkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ1lTQmtaWE5qY21sd2RHbHZiaUJ2WmlCMGFHVWdjbVZ4ZFdWemRHVmtJRzlpYW1WamRDd2dhVzVqYkhWa2FXNW5JR0VnWUZOSVFXQWdjSEp2Y0dWeWRIbGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwVTJoaEtHSnlZVzVqYUN3Z2NHRjBhQ3dnWTJJcElIdGNiaUFnSUNBZ0lHSnlZVzVqYUNBOUlHSnlZVzVqYUNBL0lHQS9jbVZtUFNSN1luSmhibU5vZldBZ09pQW5KenRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzlqYjI1MFpXNTBjeThrZTNCaGRHaDlKSHRpY21GdVkyaDlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRXhwYzNRZ2RHaGxJR052YlcxcGRDQnpkR0YwZFhObGN5Qm1iM0lnWVNCd1lYSjBhV04xYkdGeUlITm9ZU3dnWW5KaGJtTm9MQ0J2Y2lCMFlXZGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5emRHRjBkWE5sY3k4amJHbHpkQzF6ZEdGMGRYTmxjeTFtYjNJdFlTMXpjR1ZqYVdacFl5MXlaV1pjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnphR0VnTFNCMGFHVWdjMmhoTENCaWNtRnVZMmdzSUc5eUlIUmhaeUIwYnlCblpYUWdjM1JoZEhWelpYTWdabTl5WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQnpkR0YwZFhObGMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnNhWE4wVTNSaGRIVnpaWE1vYzJoaExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJOdmJXMXBkSE12Skh0emFHRjlMM04wWVhSMWMyVnpZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZENCMGFHVWdZMjl0WW1sdVpXUWdkbWxsZHlCdlppQmpiMjF0YVhRZ2MzUmhkSFZ6WlhNZ1ptOXlJR0VnY0dGeWRHbGpkV3hoY2lCemFHRXNJR0p5WVc1amFDd2diM0lnZEdGblhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012YzNSaGRIVnpaWE12STJkbGRDMTBhR1V0WTI5dFltbHVaV1F0YzNSaGRIVnpMV1p2Y2kxaExYTndaV05wWm1sakxYSmxabHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlITm9ZU0F0SUhSb1pTQnphR0VzSUdKeVlXNWphQ3dnYjNJZ2RHRm5JSFJ2SUdkbGRDQjBhR1VnWTI5dFltbHVaV1FnYzNSaGRIVnpJR1p2Y2x4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR052YldKcGJtVmtJSE4wWVhSMWMxeHVJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwUTI5dFltbHVaV1JUZEdGMGRYTW9jMmhoTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMMk52YlcxcGRITXZKSHR6YUdGOUwzTjBZWFIxYzJBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCSFpYUWdZU0JrWlhOamNtbHdkR2x2YmlCdlppQmhJR2RwZENCMGNtVmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmwwTDNSeVpXVnpMeU5uWlhRdFlTMTBjbVZsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkSEpsWlZOSVFTQXRJSFJvWlNCVFNFRWdiMllnZEdobElIUnlaV1VnZEc4Z1ptVjBZMmhjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmpZV3hzWW1GamF5QmtZWFJoWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRGUnlaV1VvZEhKbFpWTklRU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW5hWFF2ZEhKbFpYTXZKSHQwY21WbFUwaEJmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0JpYkc5aVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybDBMMkpzYjJKekx5TmpjbVZoZEdVdFlTMWliRzlpWEc0Z0lDQWdLaUJBY0dGeVlXMGdleWh6ZEhKcGJtZDhRblZtWm1WeWZFSnNiMklwZlNCamIyNTBaVzUwSUMwZ2RHaGxJR052Ym5SbGJuUWdkRzhnWVdSa0lIUnZJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnWkdWMFlXbHNjeUJ2WmlCMGFHVWdZM0psWVhSbFpDQmliRzlpWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaVUpzYjJJb1kyOXVkR1Z1ZEN3Z1kySXBJSHRjYmlBZ0lDQWdJR3hsZENCd2IzTjBRbTlrZVNBOUlIUm9hWE11WDJkbGRFTnZiblJsYm5SUFltcGxZM1FvWTI5dWRHVnVkQ2s3WEc1Y2JpQWdJQ0FnSUd4dlp5Z25jMlZ1WkdsdVp5QmpiMjUwWlc1MEp5d2djRzl6ZEVKdlpIa3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCUFUxUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzluYVhRdllteHZZbk5nTENCd2IzTjBRbTlrZVN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0IwYUdVZ2IySnFaV04wSUhSb1lYUWdjbVZ3Y21WelpXNTBjeUIwYUdVZ2NISnZkbWxrWldRZ1kyOXVkR1Z1ZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDhRblZtWm1WeWZFSnNiMko5SUdOdmJuUmxiblFnTFNCMGFHVWdZMjl1ZEdWdWRDQjBieUJ6Wlc1a0lIUnZJSFJvWlNCelpYSjJaWEpjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMDlpYW1WamRIMGdkR2hsSUhKbGNISmxjMlZ1ZEdGMGFXOXVJRzltSUdCamIyNTBaVzUwWUNCbWIzSWdkR2hsSUVkcGRFaDFZaUJCVUVsY2JpQWdJQ0FxTDF4dUlDQWdYMmRsZEVOdmJuUmxiblJQWW1wbFkzUW9ZMjl1ZEdWdWRDa2dlMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYjI1MFpXNTBJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdiRzluS0NkamIyNTBaWFFnYVhNZ1lTQnpkSEpwYm1jbktUdGNiaUFnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBaVzUwT2lCVmRHWTRMbVZ1WTI5a1pTaGpiMjUwWlc1MEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVkyOWthVzVuT2lBbmRYUm1MVGduTEZ4dUlDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdRblZtWm1WeUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQmpiMjUwWlc1MElHbHVjM1JoYm1ObGIyWWdRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0JzYjJjb0oxZGxJR0Z3Y0dWaGNpQjBieUJpWlNCcGJpQk9iMlJsSnlrN1hHNGdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHVnVkRG9nWTI5dWRHVnVkQzUwYjFOMGNtbHVaeWduWW1GelpUWTBKeWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxibU52WkdsdVp6b2dKMkpoYzJVMk5DY3NYRzRnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCQ2JHOWlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJqYjI1MFpXNTBJR2x1YzNSaGJtTmxiMllnUW14dllpa2dlMXh1SUNBZ0lDQWdJQ0FnYkc5bktDZFhaU0JoY0hCbFlYSWdkRzhnWW1VZ2FXNGdkR2hsSUdKeWIzZHpaWEluS1R0Y2JpQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpXNTBPaUJDWVhObE5qUXVaVzVqYjJSbEtHTnZiblJsYm5RcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1amIyUnBibWM2SUNkaVlYTmxOalFuTEZ4dUlDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdmU0JsYkhObElIc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlZ4dUlDQWdJQ0FnSUNBZ2JHOW5LR0JPYjNRZ2MzVnlaU0IzYUdGMElIUm9hWE1nWTI5dWRHVnVkQ0JwY3pvZ0pIdDBlWEJsYjJZZ1kyOXVkR1Z1ZEgwc0lDUjdTbE5QVGk1emRISnBibWRwWm5rb1kyOXVkR1Z1ZENsOVlDazdYRzRnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVZ1YTI1dmQyNGdZMjl1ZEdWdWRDQndZWE56WldRZ2RHOGdjRzl6ZEVKc2IySXVJRTExYzNRZ1ltVWdjM1J5YVc1bklHOXlJRUoxWm1abGNpQW9ibTlrWlNrZ2IzSWdRbXh2WWlBb2QyVmlLU2NwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRlZ3WkdGMFpTQmhJSFJ5WldVZ2FXNGdSMmwwWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsMEwzUnlaV1Z6THlOamNtVmhkR1V0WVMxMGNtVmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1ltRnpaVlJ5WldWVFNFRWdMU0IwYUdVZ1UwaEJJRzltSUhSb1pTQjBjbVZsSUhSdklIVndaR0YwWlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEJoZEdnZ0xTQjBhR1VnY0dGMGFDQm1iM0lnZEdobElHNWxkeUJtYVd4bFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWW14dllsTklRU0F0SUhSb1pTQlRTRUVnWm05eUlIUm9aU0JpYkc5aUlIUnZJSEIxZENCaGRDQmdjR0YwYUdCY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J1WlhjZ2RISmxaU0IwYUdGMElHbHpJR055WldGMFpXUmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxSUVCa1pYQnlaV05oZEdWa0lIVnpaU0I3UUd4cGJtc2dVbVZ3YjNOcGRHOXllU05qY21WaGRHVlVjbVZsZlNCcGJuTjBaV0ZrWEc0Z0lDQWdLaTljYmlBZ0lIVndaR0YwWlZSeVpXVW9ZbUZ6WlZSeVpXVlRTRUVzSUhCaGRHZ3NJR0pzYjJKVFNFRXNJR05pS1NCN1hHNGdJQ0FnSUNCc1pYUWdibVYzVkhKbFpTQTlJSHRjYmlBZ0lDQWdJQ0FnSUdKaGMyVmZkSEpsWlRvZ1ltRnpaVlJ5WldWVFNFRXNJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1WY2JpQWdJQ0FnSUNBZ0lIUnlaV1U2SUZ0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb09pQndZWFJvTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMmhoT2lCaWJHOWlVMGhCTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiVzlrWlRvZ0p6RXdNRFkwTkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5ZbXh2WWljc1hHNGdJQ0FnSUNBZ0lDQjlYU3hjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFUMU5VSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdloybDBMM1J5WldWellDd2dibVYzVkhKbFpTd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCMGNtVmxJR2x1SUdkcGRGeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyZHBkQzkwY21WbGN5OGpZM0psWVhSbExXRXRkSEpsWlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSFJ5WldVZ0xTQjBhR1VnZEhKbFpTQjBieUJqY21WaGRHVmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCaVlYTmxVMGhCSUMwZ2RHaGxJSEp2YjNRZ2MyaGhJRzltSUhSb1pTQjBjbVZsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdibVYzSUhSeVpXVWdkR2hoZENCcGN5QmpjbVZoZEdWa1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHTnlaV0YwWlZSeVpXVW9kSEpsWlN3Z1ltRnpaVk5JUVN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2WjJsMEwzUnlaV1Z6WUN3Z2UxeHVJQ0FnSUNBZ0lDQWdkSEpsWlN4Y2JpQWdJQ0FnSUNBZ0lHSmhjMlZmZEhKbFpUb2dZbUZ6WlZOSVFTd2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCallXMWxiR05oYzJWY2JpQWdJQ0FnSUgwc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkJaR1FnWVNCamIyMXRhWFFnZEc4Z2RHaGxJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTluYVhRdlkyOXRiV2wwY3k4alkzSmxZWFJsTFdFdFkyOXRiV2wwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjR0Z5Wlc1MElDMGdkR2hsSUZOSVFTQnZaaUIwYUdVZ2NHRnlaVzUwSUdOdmJXMXBkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUnlaV1VnTFNCMGFHVWdVMGhCSUc5bUlIUm9aU0IwY21WbElHWnZjaUIwYUdseklHTnZiVzFwZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzFsYzNOaFoyVWdMU0IwYUdVZ1kyOXRiV2wwSUcxbGMzTmhaMlZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJiM0IwYVc5dWMxMGdMU0JqYjIxdGFYUWdiM0IwYVc5dWMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0dmNIUnBiMjV6TG1GMWRHaHZjbDBnTFNCMGFHVWdZWFYwYUc5eUlHOW1JSFJvWlNCamIyMXRhWFJjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJiM0IwYVc5dWN5NWpiMjF0YVhSbGNsMGdMU0IwYUdVZ1kyOXRiV2wwZEdWeVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnWTI5dGJXbDBJSFJvWVhRZ2FYTWdZM0psWVhSbFpGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmpiMjF0YVhRb2NHRnlaVzUwTENCMGNtVmxMQ0J0WlhOellXZGxMQ0J2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQmpZaUE5SUc5d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2UzMDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR3hsZENCa1lYUmhJRDBnZTF4dUlDQWdJQ0FnSUNBZ2JXVnpjMkZuWlN4Y2JpQWdJQ0FnSUNBZ0lIUnlaV1VzWEc0Z0lDQWdJQ0FnSUNCd1lYSmxiblJ6T2lCYmNHRnlaVzUwWFN4Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lHUmhkR0VnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCdmNIUnBiMjV6TENCa1lYUmhLVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlBVMVFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5bmFYUXZZMjl0YldsMGMyQXNJR1JoZEdFc0lHTmlLVnh1SUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LSEpsYzNCdmJuTmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWZZM1Z5Y21WdWRGUnlaV1V1YzJoaElEMGdjbVZ6Y0c5dWMyVXVaR0YwWVM1emFHRTdJQzh2SUZWd1pHRjBaU0JzWVhSbGMzUWdZMjl0YldsMFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6Y0c5dWMyVTdYRzRnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJWY0dSaGRHVWdZU0J5WldaY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5bmFYUXZjbVZtY3k4amRYQmtZWFJsTFdFdGNtVm1aWEpsYm1ObFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY21WbUlDMGdkR2hsSUhKbFppQjBieUIxY0dSaGRHVmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCamIyMXRhWFJUU0VFZ0xTQjBhR1VnVTBoQklIUnZJSEJ2YVc1MElIUm9aU0J5WldabGNtVnVZMlVnZEc5Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnWm05eVkyVWdMU0JwYm1ScFkyRjBaWE1nZDJobGRHaGxjaUIwYnlCbWIzSmpaU0J2Y2lCbGJuTjFjbVVnWVNCbVlYTjBMV1p2Y25kaGNtUWdkWEJrWVhSbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnZFhCa1lYUmxaQ0J5WldZZ1ltRmphMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0IxY0dSaGRHVklaV0ZrS0hKbFppd2dZMjl0YldsMFUwaEJMQ0JtYjNKalpTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwyZHBkQzl5Wldaekx5UjdjbVZtZldBc0lIdGNiaUFnSUNBZ0lDQWdJSE5vWVRvZ1kyOXRiV2wwVTBoQkxGeHVJQ0FnSUNBZ0lDQWdabTl5WTJVNklHWnZjbU5sTEZ4dUlDQWdJQ0FnZlN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlGVndaR0YwWlNCamIyMXRhWFFnYzNSaGRIVnpYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjbVZ3YjNNdmMzUmhkSFZ6WlhNdlhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWTI5dGJXbDBVMGhCSUMwZ2RHaGxJRk5JUVNCdlppQjBhR1VnWTI5dGJXbDBJSFJvWVhRZ2MyaHZkV3hrSUdKbElIVndaR0YwWldSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnUTI5dGJXbDBJSE4wWVhSMWN5QndZWEpoYldWMFpYSnpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzQjBhVzl1Y3k1emRHRjBaU0F0SUZSb1pTQnpkR0YwWlNCdlppQjBhR1VnYzNSaGRIVnpMaUJEWVc0Z1ltVWdiMjVsSUc5bU9pQndaVzVrYVc1bkxDQnpkV05qWlhOekxDQmxjbkp2Y2l3Z2IzSWdabUZwYkhWeVpTNWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1MFlYSm5aWFJmZFhKc1hTQXRJRlJvWlNCMFlYSm5aWFFnVlZKTUlIUnZJR0Z6YzI5amFXRjBaU0IzYVhSb0lIUm9hWE1nYzNSaGRIVnpMbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdHZjSFJwYjI1ekxtUmxjMk55YVhCMGFXOXVYU0F0SUVFZ2MyaHZjblFnWkdWelkzSnBjSFJwYjI0Z2IyWWdkR2hsSUhOMFlYUjFjeTVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NWpiMjUwWlhoMFhTQXRJRUVnYzNSeWFXNW5JR3hoWW1Wc0lIUnZJR1JwWm1abGNtVnVkR2xoZEdVZ2RHaHBjeUJ6ZEdGMGRYTWdZVzF2Ym1jZ1Ewa2djM2x6ZEdWdGN5NWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCMWNHUmhkR1ZrSUdOdmJXMXBkQ0JpWVdOclhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lIVndaR0YwWlZOMFlYUjFjeWhqYjIxdGFYUlRTRUVzSUc5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duVUU5VFZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMM04wWVhSMWMyVnpMeVI3WTI5dGJXbDBVMGhCZldBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQlZjR1JoZEdVZ2NtVndiM05wZEc5eWVTQnBibVp2Y20xaGRHbHZibHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekx5TmxaR2wwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdiM0IwYVc5dWN5QXRJRTVsZHlCd1lYSmhiV1YwWlhKeklIUm9ZWFFnZDJsc2JDQmlaU0J6WlhRZ2RHOGdkR2hsSUhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J2Y0hScGIyNXpMbTVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMjl3ZEdsdmJuTXVaR1Z6WTNKcGNIUnBiMjVkSUMwZ1FTQnphRzl5ZENCa1pYTmpjbWx3ZEdsdmJpQnZaaUIwYUdVZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0dmNIUnBiMjV6TG1odmJXVndZV2RsWFNBdElFRWdWVkpNSUhkcGRHZ2diVzl5WlNCcGJtWnZjbTFoZEdsdmJpQmhZbTkxZENCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmJiM0IwYVc5dWN5NXdjbWwyWVhSbFhTQXRJRVZwZEdobGNpQjBjblZsSUhSdklHMWhhMlVnZEdobElISmxjRzl6YVhSdmNua2djSEpwZG1GMFpTd2diM0lnWm1Gc2MyVWdkRzhnYldGclpTQnBkQ0J3ZFdKc2FXTXVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHZjSFJwYjI1ekxtaGhjMTlwYzNOMVpYTmRJQzBnUldsMGFHVnlJSFJ5ZFdVZ2RHOGdaVzVoWW14bElHbHpjM1ZsY3lCbWIzSWdkR2hwY3lCeVpYQnZjMmwwYjNKNUxDQm1ZV3h6WlNCMGJ5QmthWE5oWW14bElIUm9aVzB1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRnR2Y0hScGIyNXpMbWhoYzE5M2FXdHBYU0F0SUVWcGRHaGxjaUIwY25WbElIUnZJR1Z1WVdKc1pTQjBhR1VnZDJscmFTQm1iM0lnZEdocGN5QnlaWEJ2YzJsMGIzSjVMQ0JtWVd4elpTQjBieUJrYVhOaFlteGxJR2wwTGx4dUlDQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiYjNCMGFXOXVjeTVvWVhOZlpHOTNibXh2WVdSelhTQXRJRVZwZEdobGNpQjBjblZsSUhSdklHVnVZV0pzWlNCa2IzZHViRzloWkhNc0lHWmhiSE5sSUhSdklHUnBjMkZpYkdVZ2RHaGxiUzVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NWtaV1poZFd4MFgySnlZVzVqYUYwZ0xTQlZjR1JoZEdWeklIUm9aU0JrWldaaGRXeDBJR0p5WVc1amFDQm1iM0lnZEdocGN5QnlaWEJ2YzJsMGIzSjVMbHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElIVndaR0YwWldRZ2NtVndiM05wZEc5eWVTQmlZV05yWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUhWd1pHRjBaVkpsY0c5emFYUnZjbmtvYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRUVZSRFNDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlZQ3dnYjNCMGFXOXVjeXdnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQzhxS2x4dUlDQWdJQ29nUjJWMElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIUm9aU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZJMmRsZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRVJsZEdGcGJITW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZldBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCTWFYTjBJSFJvWlNCamIyNTBjbWxpZFhSdmNuTWdkRzhnZEdobElISmxjRzl6YVhSdmNubGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k4amJHbHpkQzFqYjI1MGNtbGlkWFJ2Y25OY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JR052Ym5SeWFXSjFkRzl5YzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUkRiMjUwY21saWRYUnZjbk1vWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOWpiMjUwY21saWRYUnZjbk5nTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjBhR1VnWTI5dWRISnBZblYwYjNJZ2MzUmhkSE1nZEc4Z2RHaGxJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OGpiR2x6ZEMxamIyNTBjbWxpZFhSdmNuTmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUdOdmJuUnlhV0oxZEc5eWMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJEYjI1MGNtbGlkWFJ2Y2xOMFlYUnpLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmMzUmhkSE12WTI5dWRISnBZblYwYjNKellDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFeHBjM1FnZEdobElIVnpaWEp6SUhkb2J5QmhjbVVnWTI5c2JHRmliM0poZEc5eWN5QnZiaUIwYUdVZ2NtVndiM05wZEc5eWVTNGdWR2hsSUdOMWNuSmxiblJzZVNCaGRYUm9aVzUwYVdOaGRHVmtJSFZ6WlhJZ2JYVnpkQ0JvWVhabFhHNGdJQ0FnS2lCd2RYTm9JR0ZqWTJWemN5QjBieUIxYzJVZ2RHaHBjeUJ0WlhSb2IyUmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5amIyeHNZV0p2Y21GMGIzSnpMeU5zYVhOMExXTnZiR3hoWW05eVlYUnZjbk5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlHTnZiR3hoWW05eVlYUnZjbk5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWjJWMFEyOXNiR0ZpYjNKaGRHOXljeWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwyTnZiR3hoWW05eVlYUnZjbk5nTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTJobFkyc2dhV1lnWVNCMWMyVnlJR2x6SUdFZ1kyOXNiR0ZpYjNKaGRHOXlJRzl1SUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjbVZ3YjNNdlkyOXNiR0ZpYjNKaGRHOXljeThqWTJobFkyc3RhV1l0WVMxMWMyVnlMV2x6TFdFdFkyOXNiR0ZpYjNKaGRHOXlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RYTmxjbTVoYldVZ0xTQjBhR1VnZFhObGNpQjBieUJqYUdWamExeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnZFhObGNpQnBjeUJoSUdOdmJHeGhZbTl5WVhSdmNpQmhibVFnWm1Gc2MyVWdhV1lnZEdobGVTQmhjbVVnYm05MFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wSUh0Q2IyOXNaV0Z1ZlNCYlpHVnpZM0pwY0hScGIyNWRYRzRnSUNBZ0tpOWNiaUFnSUdselEyOXNiR0ZpYjNKaGRHOXlLSFZ6WlhKdVlXMWxMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwyTnZiR3hoWW05eVlYUnZjbk12Skh0MWMyVnlibUZ0WlgxZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1IyVjBJSFJvWlNCamIyNTBaVzUwY3lCdlppQmhJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OWpiMjUwWlc1MGN5OGpaMlYwTFdOdmJuUmxiblJ6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZtSUMwZ2RHaGxJSEpsWmlCMGJ5QmphR1ZqYTF4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEJoZEdnZ0xTQjBhR1VnY0dGMGFDQmpiMjUwWVdsdWFXNW5JSFJvWlNCamIyNTBaVzUwSUhSdklHWmxkR05vWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJSEpoZHlBdElHQjBjblZsWUNCcFppQjBhR1VnY21WemRXeDBjeUJ6YUc5MWJHUWdZbVVnY21WMGRYSnVaV1FnY21GM0lHbHVjM1JsWVdRZ2IyWWdSMmwwU0hWaUozTWdibTl5YldGc2FYcGxaQ0JtYjNKdFlYUmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCbVpYUmphR1ZrSUdSaGRHRmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwUTI5dWRHVnVkSE1vY21WbUxDQndZWFJvTENCeVlYY3NJR05pS1NCN1hHNGdJQ0FnSUNCd1lYUm9JRDBnY0dGMGFDQS9JR0FrZTJWdVkyOWtaVlZTU1Nod1lYUm9LWDFnSURvZ0p5YzdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZZMjl1ZEdWdWRITXZKSHR3WVhSb2ZXQXNJSHRjYmlBZ0lDQWdJQ0FnSUhKbFppeGNiaUFnSUNBZ0lIMHNJR05pTENCeVlYY3BPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0IwYUdVZ1VrVkJSRTFGSUc5bUlHRWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekwyTnZiblJsYm5Sekx5Tm5aWFF0ZEdobExYSmxZV1J0WlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsWmlBdElIUm9aU0J5WldZZ2RHOGdZMmhsWTJ0Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnY21GM0lDMGdZSFJ5ZFdWZ0lHbG1JSFJvWlNCeVpYTjFiSFJ6SUhOb2IzVnNaQ0JpWlNCeVpYUjFjbTVsWkNCeVlYY2dhVzV6ZEdWaFpDQnZaaUJIYVhSSWRXSW5jeUJ1YjNKdFlXeHBlbVZrSUdadmNtMWhkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHWmxkR05vWldRZ1pHRjBZVnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSU1pXRmtiV1VvY21WbUxDQnlZWGNzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZjbVZoWkcxbFlDd2dlMXh1SUNBZ0lDQWdJQ0FnY21WbUxGeHVJQ0FnSUNBZ2ZTd2dZMklzSUhKaGR5azdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1JtOXlheUJoSUhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTltYjNKcmN5OGpZM0psWVhSbExXRXRabTl5YTF4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJSFJvWlNCdVpYZHNlU0JqY21WaGRHVmtJR1p2Y210Y2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1ptOXlheWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW1iM0pyYzJBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCR2IzSnJJR0VnY21Wd2IzTnBkRzl5ZVNCMGJ5QmhiaUJ2Y21kaGJtbDZZWFJwYjI1Y2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTltYjNKcmN5OGpZM0psWVhSbExXRXRabTl5YTF4dUlDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJRzl5WnlBdElHOXlaMkZ1YVhwaGRHbHZiaUIzYUdWeVpTQjViM1VuWkNCc2FXdGxJSFJ2SUdOeVpXRjBaU0IwYUdVZ1ptOXlheTVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnBibVp2Y20xaGRHbHZiaUJoWW05MWRDQjBhR1VnYm1WM2JIa2dZM0psWVhSbFpDQm1iM0pyWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tseHVJQ0FnSUNvdlhHNGdJQ0JtYjNKclZHOVBjbWNvYjNKbkxDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlBVMVFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5bWIzSnJjejl2Y21kaGJtbDZZWFJwYjI0OUpIdHZjbWQ5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdZU0J5WlhCdmMybDBiM0o1SjNNZ1ptOXlhM05jYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OW1iM0pyY3k4amJHbHpkQzFtYjNKcmMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUd4cGMzUWdiMllnY21Wd2IzTnBkRzl5YVdWeklHWnZjbXRsWkNCbWNtOXRJSFJvYVhNZ2IyNWxYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR3hwYzNSR2IzSnJjeWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwyWnZjbXR6WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QmljbUZ1WTJnZ1puSnZiU0JoYmlCbGVHbHpkR2x1WnlCaWNtRnVZMmd1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMjlzWkVKeVlXNWphRDF0WVhOMFpYSmRJQzBnZEdobElHNWhiV1VnYjJZZ2RHaGxJR1Y0YVhOMGFXNW5JR0p5WVc1amFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1bGQwSnlZVzVqYUNBdElIUm9aU0J1WVcxbElHOW1JSFJvWlNCdVpYY2dZbkpoYm1Ob1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnWTI5dGJXbDBJR1JoZEdFZ1ptOXlJSFJvWlNCb1pXRmtJRzltSUhSb1pTQnVaWGNnWW5KaGJtTm9YRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR055WldGMFpVSnlZVzVqYUNodmJHUkNjbUZ1WTJnc0lHNWxkMEp5WVc1amFDd2dZMklwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JtVjNRbkpoYm1Ob0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQmpZaUE5SUc1bGQwSnlZVzVqYUR0Y2JpQWdJQ0FnSUNBZ0lHNWxkMEp5WVc1amFDQTlJRzlzWkVKeVlXNWphRHRjYmlBZ0lDQWdJQ0FnSUc5c1pFSnlZVzVqYUNBOUlDZHRZWE4wWlhJbk8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSU1pXWW9ZR2hsWVdSekx5UjdiMnhrUW5KaGJtTm9mV0FwWEc0Z0lDQWdJQ0FnSUNBdWRHaGxiaWdvY21WemNHOXVjMlVwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnphR0VnUFNCeVpYTndiMjV6WlM1a1lYUmhMbTlpYW1WamRDNXphR0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVlNaV1lvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1PaUJnY21WbWN5OW9aV0ZrY3k4a2UyNWxkMEp5WVc1amFIMWdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dZMklwTzF4dUlDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJSEIxYkd3Z2NtVnhkV1Z6ZEZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNCMWJHeHpMeU5qY21WaGRHVXRZUzF3ZFd4c0xYSmxjWFZsYzNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnZEdobElIQjFiR3dnY21WeGRXVnpkQ0JrWlhOamNtbHdkR2x2Ymx4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJRzVsZHlCd2RXeHNJSEpsY1hWbGMzUmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdZM0psWVhSbFVIVnNiRkpsY1hWbGMzUW9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFUMU5VSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmNIVnNiSE5nTENCdmNIUnBiMjV6TENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1ZYQmtZWFJsSUdFZ2NIVnNiQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSFZzYkhNdkkzVndaR0YwWlMxaExYQjFiR3d0Y21WeGRXVnpkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOGMzUnlhVzVuZlNCdWRXMWlaWElnTFNCMGFHVWdiblZ0WW1WeUlHOW1JSFJvWlNCd2RXeHNJSEpsY1hWbGMzUWdkRzhnZFhCa1lYUmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElIUm9aU0J3ZFd4c0lISmxjWFZsYzNRZ1pHVnpZM0pwY0hScGIyNWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElIQjFiR3dnY21WeGRXVnpkQ0JwYm1admNtMWhkR2x2Ymx4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCMWNHUmhkR1ZRZFd4c1VtVnhkV1Z6ZENodWRXMWlaWElzSUc5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duVUVGVVEwZ25MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzl3ZFd4c2N5OGtlMjUxYldKbGNuMWdMQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjBhR1VnYUc5dmEzTWdabTl5SUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjbVZ3YjNNdmFHOXZhM012STJ4cGMzUXRhRzl2YTNOY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JR2h2YjJ0elhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JJYjI5cmN5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJodmIydHpZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZENCaElHaHZiMnNnWm05eUlIUm9aU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZhRzl2YTNNdkkyZGxkQzF6YVc1bmJHVXRhRzl2YTF4dUlDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2xrSUMwZ2RHaGxJR2xrSUc5bUlIUm9aU0IzWldKdmIydGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCa1pYUmhhV3h6SUc5bUlIUm9aU0IzWldKdmIydGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwU0c5dmF5aHBaQ3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW9iMjlyY3k4a2UybGtmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJCWkdRZ1lTQnVaWGNnYUc5dmF5QjBieUIwYUdVZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzSmxjRzl6TDJodmIydHpMeU5qY21WaGRHVXRZUzFvYjI5clhHNGdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUhSb1pTQmpiMjVtYVdkMWNtRjBhVzl1SUdSbGMyTnlhV0pwYm1jZ2RHaGxJRzVsZHlCb2IyOXJYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JtVjNJSGRsWW1odmIydGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdZM0psWVhSbFNHOXZheWh2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW9iMjlyYzJBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkZaR2wwSUdGdUlHVjRhWE4wYVc1bklIZGxZbWh2YjJ0Y2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTlvYjI5cmN5OGpaV1JwZEMxaExXaHZiMnRjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnBaQ0F0SUhSb1pTQnBaQ0J2WmlCMGFHVWdkMlZpYUc5dmExeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nTFNCMGFHVWdibVYzSUdSbGMyTnlhWEIwYVc5dUlHOW1JSFJvWlNCM1pXSm9iMjlyWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdkWEJrWVhSbFpDQjNaV0pvYjI5clhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lIVndaR0YwWlVodmIyc29hV1FzSUc5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duVUVGVVEwZ25MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzlvYjI5cmN5OGtlMmxrZldBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkVaV3hsZEdVZ1lTQjNaV0pvYjI5clhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012YUc5dmEzTXZJMlJsYkdWMFpTMWhMV2h2YjJ0Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JwWkNBdElIUm9aU0JwWkNCdlppQjBhR1VnZDJWaWFHOXZheUIwYnlCaVpTQmtaV3hsZEdWa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBjblZsSUdsbUlIUm9aU0JqWVd4c0lHbHpJSE4xWTJObGMzTm1kV3hjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWkdWc1pYUmxTRzl2YXlocFpDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEVSVXhGVkVVbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW9iMjlyY3k4a2UybGtmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJNYVhOMElIUm9aU0JrWlhCc2Iza2dhMlY1Y3lCbWIzSWdkR2hsSUhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTlyWlhsekx5TnNhWE4wTFdSbGNHeHZlUzFyWlhselhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYkdsemRDQnZaaUJrWlhCc2Iza2dhMlY1YzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCc2FYTjBTMlY1Y3loallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMMnRsZVhOZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1IyVjBJR0VnWkdWd2JHOTVJR3RsZVNCbWIzSWdkR2hsSUhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTlyWlhsekx5Tm5aWFF0WVMxa1pYQnNiM2t0YTJWNVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYVdRZ0xTQjBhR1VnYVdRZ2IyWWdkR2hsSUdSbGNHeHZlU0JyWlhsY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JrWlhSaGFXeHpJRzltSUhSb1pTQmtaWEJzYjNrZ2EyVjVYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEV0bGVTaHBaQ3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOXJaWGx6THlSN2FXUjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRUZrWkNCaElHNWxkeUJrWlhCc2Iza2dhMlY1SUhSdklIUm9aU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZhMlY1Y3k4allXUmtMV0V0Ym1WM0xXUmxjR3h2ZVMxclpYbGNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ2RHaGxJR052Ym1acFozVnlZWFJwYjI0Z1pHVnpZM0pwWW1sdVp5QjBhR1VnYm1WM0lHUmxjR3h2ZVNCclpYbGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCdVpYY2daR1Z3Ykc5NUlHdGxlVnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JqY21WaGRHVkxaWGtvYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRVDFOVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZhMlY1YzJBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkVaV3hsZEdVZ1lTQmtaWEJzYjNrZ2EyVjVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjbVZ3YjNNdmEyVjVjeThqY21WdGIzWmxMV0V0WkdWd2JHOTVMV3RsZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2xrSUMwZ2RHaGxJR2xrSUc5bUlIUm9aU0JrWlhCc2Iza2dhMlY1SUhSdklHSmxJR1JsYkdWMFpXUmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJ5ZFdVZ2FXWWdkR2hsSUdOaGJHd2dhWE1nYzNWalkyVnpjMloxYkZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCa1pXeGxkR1ZMWlhrb2FXUXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SRVZNUlZSRkp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZhMlY1Y3k4a2UybGtmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJFWld4bGRHVWdZU0JtYVd4bElHWnliMjBnWVNCaWNtRnVZMmhjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OWpiMjUwWlc1MGN5OGpaR1ZzWlhSbExXRXRabWxzWlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR0p5WVc1amFDQXRJSFJvWlNCaWNtRnVZMmdnZEc4Z1pHVnNaWFJsSUdaeWIyMHNJRzl5SUhSb1pTQmtaV1poZFd4MElHSnlZVzVqYUNCcFppQnViM1FnYzNCbFkybG1hV1ZrWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjR0YwYUNBdElIUm9aU0J3WVhSb0lHOW1JSFJvWlNCbWFXeGxJSFJ2SUhKbGJXOTJaVnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHTnZiVzFwZENCcGJpQjNhR2xqYUNCMGFHVWdaR1ZzWlhSbElHOWpZM1Z5Y21Wa1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHUmxiR1YwWlVacGJHVW9ZbkpoYm1Ob0xDQndZWFJvTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFUyaGhLR0p5WVc1amFDd2djR0YwYUNsY2JpQWdJQ0FnSUNBZ0lDNTBhR1Z1S0NoeVpYTndiMjV6WlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdWc1pYUmxRMjl0YldsMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUb2dZRVJsYkdWMFpTQjBhR1VnWm1sc1pTQmhkQ0FuSkh0d1lYUm9mU2RnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaE9pQnlaWE53YjI1elpTNWtZWFJoTG5Ob1lTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlZVzVqYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUkVWTVJWUkZKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2WTI5dWRHVnVkSE12Skh0d1lYUm9mV0FzSUdSbGJHVjBaVU52YlcxcGRDd2dZMklwTzF4dUlDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EyaGhibWRsSUdGc2JDQnlaV1psY21WdVkyVnpJR2x1SUdFZ2NtVndieUJtY205dElHOXNaRkJoZEdnZ2RHOGdibVYzWDNCaGRHaGNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCaWNtRnVZMmdnTFNCMGFHVWdZbkpoYm1Ob0lIUnZJR05oY25KNUlHOTFkQ0IwYUdVZ2NtVm1aWEpsYm1ObElHTm9ZVzVuWlN3Z2IzSWdkR2hsSUdSbFptRjFiSFFnWW5KaGJtTm9JR2xtSUc1dmRDQnpjR1ZqYVdacFpXUmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdmJHUlFZWFJvSUMwZ2IzSnBaMmx1WVd3Z2NHRjBhRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHNWxkMUJoZEdnZ0xTQnVaWGNnY21WbVpYSmxibU5sSUhCaGRHaGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCamIyMXRhWFFnYVc0Z2QyaHBZMmdnZEdobElHMXZkbVVnYjJOamRYSnlaV1JjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYlc5MlpTaGljbUZ1WTJnc0lHOXNaRkJoZEdnc0lHNWxkMUJoZEdnc0lHTmlLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2IyeGtVMmhoTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBVbVZtS0dCb1pXRmtjeThrZTJKeVlXNWphSDFnS1Z4dUlDQWdJQ0FnSUNBZ0xuUm9aVzRvS0h0a1lYUmhPaUI3YjJKcVpXTjBmWDBwSUQwK0lIUm9hWE11WjJWMFZISmxaU2hnSkh0dlltcGxZM1F1YzJoaGZUOXlaV04xY25OcGRtVTlkSEoxWldBcEtWeHVJQ0FnSUNBZ0lDQWdMblJvWlc0b0tIdGtZWFJoT2lCN2RISmxaU3dnYzJoaGZYMHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlzWkZOb1lTQTlJSE5vWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdVpYZFVjbVZsSUQwZ2RISmxaUzV0WVhBb0tISmxaaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWmk1d1lYUm9JRDA5UFNCdmJHUlFZWFJvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV1l1Y0dGMGFDQTlJRzVsZDFCaGRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WbUxuUjVjR1VnUFQwOUlDZDBjbVZsSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElISmxaaTV6YUdFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WbU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZVY21WbEtHNWxkMVJ5WldVcE8xeHVJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUM1MGFHVnVLQ2g3WkdGMFlUb2dkSEpsWlgwcElEMCtJSFJvYVhNdVkyOXRiV2wwS0c5c1pGTm9ZU3dnZEhKbFpTNXphR0VzSUdCU1pXNWhiV1ZrSUNja2UyOXNaRkJoZEdoOUp5QjBieUFuSkh0dVpYZFFZWFJvZlNkZ0tTbGNiaUFnSUNBZ0lDQWdJQzUwYUdWdUtDaDdaR0YwWVRvZ1kyOXRiV2wwZlNrZ1BUNGdkR2hwY3k1MWNHUmhkR1ZJWldGa0tHQm9aV0ZrY3k4a2UySnlZVzVqYUgxZ0xDQmpiMjF0YVhRdWMyaGhMQ0IwY25WbExDQmpZaWtwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRmR5YVhSbElHRWdabWxzWlNCMGJ5QjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMMk52Ym5SbGJuUnpMeU4xY0dSaGRHVXRZUzFtYVd4bFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWW5KaGJtTm9JQzBnZEdobElHNWhiV1VnYjJZZ2RHaGxJR0p5WVc1amFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCaGRHZ2dMU0IwYUdVZ2NHRjBhQ0JtYjNJZ2RHaGxJR1pwYkdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JqYjI1MFpXNTBJQzBnZEdobElHTnZiblJsYm5SeklHOW1JSFJvWlNCbWFXeGxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JXVnpjMkZuWlNBdElIUm9aU0JqYjIxdGFYUWdiV1Z6YzJGblpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0dmNIUnBiMjV6WFNBdElHTnZiVzFwZENCdmNIUnBiMjV6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXMjl3ZEdsdmJuTXVZWFYwYUc5eVhTQXRJSFJvWlNCaGRYUm9iM0lnYjJZZ2RHaGxJR052YlcxcGRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0dmNIUnBiMjV6TG1OdmJXMXBkR1Z5WFNBdElIUm9aU0JqYjIxdGFYUjBaWEpjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdXMjl3ZEdsdmJuTXVaVzVqYjJSbFhTQXRJSFJ5ZFdVZ2FXWWdkR2hsSUdOdmJuUmxiblFnYzJodmRXeGtJR0psSUdKaGMyVTJOQ0JsYm1OdlpHVmtYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JtVjNJR052YlcxcGRGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQjNjbWwwWlVacGJHVW9ZbkpoYm1Ob0xDQndZWFJvTENCamIyNTBaVzUwTENCdFpYTnpZV2RsTENCdmNIUnBiMjV6TENCallpa2dlMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0JqWWlBOUlHOXdkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JzWlhRZ1ptbHNaVkJoZEdnZ1BTQndZWFJvSUQ4Z1pXNWpiMlJsVlZKSktIQmhkR2dwSURvZ0p5YzdYRzRnSUNBZ0lDQnNaWFFnYzJodmRXeGtSVzVqYjJSbElEMGdiM0IwYVc5dWN5NWxibU52WkdVZ0lUMDlJR1poYkhObE8xeHVJQ0FnSUNBZ2JHVjBJR052YlcxcGRDQTlJSHRjYmlBZ0lDQWdJQ0FnSUdKeVlXNWphQ3hjYmlBZ0lDQWdJQ0FnSUcxbGMzTmhaMlVzWEc0Z0lDQWdJQ0FnSUNCaGRYUm9iM0k2SUc5d2RHbHZibk11WVhWMGFHOXlMRnh1SUNBZ0lDQWdJQ0FnWTI5dGJXbDBkR1Z5T2lCdmNIUnBiMjV6TG1OdmJXMXBkSFJsY2l4Y2JpQWdJQ0FnSUNBZ0lHTnZiblJsYm5RNklITm9iM1ZzWkVWdVkyOWtaU0EvSUVKaGMyVTJOQzVsYm1OdlpHVW9ZMjl1ZEdWdWRDa2dPaUJqYjI1MFpXNTBMRnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBVMmhoS0dKeVlXNWphQ3dnWm1sc1pWQmhkR2dwWEc0Z0lDQWdJQ0FnSUNBdWRHaGxiaWdvY21WemNHOXVjMlVwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJXMXBkQzV6YUdFZ1BTQnlaWE53YjI1elpTNWtZWFJoTG5Ob1lUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFWVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5amIyNTBaVzUwY3k4a2UyWnBiR1ZRWVhSb2ZXQXNJR052YlcxcGRDd2dZMklwTzF4dUlDQWdJQ0FnSUNBZ2ZTd2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJOdmJuUmxiblJ6THlSN1ptbHNaVkJoZEdoOVlDd2dZMjl0YldsMExDQmpZaWs3WEc0Z0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGFHVmpheUJwWmlCaElISmxjRzl6YVhSdmNua2dhWE1nYzNSaGNuSmxaQ0JpZVNCNWIzVmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OWhZM1JwZG1sMGVTOXpkR0Z5Y21sdVp5OGpZMmhsWTJzdGFXWXRlVzkxTFdGeVpTMXpkR0Z5Y21sdVp5MWhMWEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSeWRXVWdhV1lnZEdobElISmxjRzl6YVhSdmNua2dhWE1nYzNSaGNuSmxaQ0JoYm1RZ1ptRnNjMlVnYVdZZ2RHaGxJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpJRzV2ZENCemRHRnljbVZrWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBJSHRDYjI5c1pXRnVmU0JiWkdWelkzSnBjSFJwYjI1ZFhHNGdJQ0FnS2k5Y2JpQWdJR2x6VTNSaGNuSmxaQ2hqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUXlNRFJ2Y2pRd05DaGdMM1Z6WlhJdmMzUmhjbkpsWkM4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgxZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1UzUmhjaUJoSUhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5aFkzUnBkbWwwZVM5emRHRnljbWx1Wnk4amMzUmhjaTFoTFhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUnlkV1VnYVdZZ2RHaGxJSEpsY0c5emFYUnZjbmtnYVhNZ2MzUmhjbkpsWkZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCemRHRnlLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRlZVSnl3Z1lDOTFjMlZ5TDNOMFlYSnlaV1F2Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUZWdWMzUmhjaUJoSUhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5aFkzUnBkbWwwZVM5emRHRnljbWx1Wnk4amRXNXpkR0Z5TFdFdGNtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnY21Wd2IzTnBkRzl5ZVNCcGN5QjFibk4wWVhKeVpXUmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdkVzV6ZEdGeUtHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblJFVk1SVlJGSnl3Z1lDOTFjMlZ5TDNOMFlYSnlaV1F2Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QnlaV3hsWVhObFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012Y21Wc1pXRnpaWE12STJOeVpXRjBaUzFoTFhKbGJHVmhjMlZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdkR2hsSUdSbGMyTnlhWEIwYVc5dUlHOW1JSFJvWlNCeVpXeGxZWE5sWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdibVYzYkhrZ1kzSmxZWFJsWkNCeVpXeGxZWE5sWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaVkpsYkdWaGMyVW9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFUMU5VSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmNtVnNaV0Z6WlhOZ0xDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSV1JwZENCaElISmxiR1ZoYzJWY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTl5Wld4bFlYTmxjeThqWldScGRDMWhMWEpsYkdWaGMyVmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2NtVnNaV0Z6WlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0IwYUdVZ1pHVnpZM0pwY0hScGIyNGdiMllnZEdobElISmxiR1ZoYzJWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J0YjJScFptbGxaQ0J5Wld4bFlYTmxYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJSFZ3WkdGMFpWSmxiR1ZoYzJVb2FXUXNJRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRUZVUTBnbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOXlaV3hsWVhObGN5OGtlMmxrZldBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkhaWFFnYVc1bWIzSnRZWFJwYjI0Z1lXSnZkWFFnWVd4c0lISmxiR1ZoYzJWelhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012Y21Wc1pXRnpaWE12STJ4cGMzUXRjbVZzWldGelpYTXRabTl5TFdFdGNtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhKbGJHVmhjMlVnYVc1bWIzSnRZWFJwYjI1Y2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2JHbHpkRkpsYkdWaGMyVnpLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmNtVnNaV0Z6WlhOZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1IyVjBJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJR0VnY21Wc1pXRnpaVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekwzSmxiR1ZoYzJWekx5Tm5aWFF0WVMxemFXNW5iR1V0Y21Wc1pXRnpaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHbGtJQzBnZEdobElHbGtJRzltSUhSb1pTQnlaV3hsWVhObFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnY21Wc1pXRnpaU0JwYm1admNtMWhkR2x2Ymx4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUlNaV3hsWVhObEtHbGtMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwzSmxiR1ZoYzJWekx5UjdhV1I5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVSbGJHVjBaU0JoSUhKbGJHVmhjMlZjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OXlaV3hsWVhObGN5OGpaR1ZzWlhSbExXRXRjbVZzWldGelpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdsa0lDMGdkR2hsSUhKbGJHVmhjMlVnZEc4Z1ltVWdaR1ZzWlhSbFpGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnYjNCbGNtRjBhVzl1SUdseklITjFZMk5sYzNObWRXeGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaR1ZzWlhSbFVtVnNaV0Z6WlNocFpDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEVSVXhGVkVVbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOXlaV3hsWVhObGN5OGtlMmxrZldBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCTlpYSm5aU0JoSUhCMWJHd2djbVZ4ZFdWemRGeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzQjFiR3h6THlOdFpYSm5aUzFoTFhCMWJHd3RjbVZ4ZFdWemRDMXRaWEpuWlMxaWRYUjBiMjVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZITjBjbWx1WjMwZ2JuVnRZbVZ5SUMwZ2RHaGxJRzUxYldKbGNpQnZaaUIwYUdVZ2NIVnNiQ0J5WlhGMVpYTjBJSFJ2SUcxbGNtZGxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElIUm9aU0J0WlhKblpTQnZjSFJwYjI1eklHWnZjaUIwYUdVZ2NIVnNiQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnRaWEpuWlNCcGJtWnZjbTFoZEdsdmJpQnBaaUIwYUdVZ2IzQmxjbUYwYVc5dUlHbHpJSE4xWTJObGMzTm1kV3hjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYldWeVoyVlFkV3hzVW1WeGRXVnpkQ2h1ZFcxaVpYSXNJRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRlZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmNIVnNiSE12Skh0dWRXMWlaWEo5TDIxbGNtZGxZQ3dnYjNCMGFXOXVjeXdnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVkbGRDQnBibVp2Y20xaGRHbHZiaUJoWW05MWRDQmhiR3dnY0hKdmFtVmpkSE5jYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl3Y205cVpXTjBjeThqYkdsemRDMXlaWEJ2YzJsMGIzSjVMWEJ5YjJwbFkzUnpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlIQnliMnBsWTNSelhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JRY205cVpXTjBjeWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUkJiR3hRWVdkbGN5aGdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOXdjbTlxWldOMGMyQXNJSHRCWTJObGNIUklaV0ZrWlhJNklDZHBibVZ5ZEdsaExYQnlaWFpwWlhjbmZTd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCd2NtOXFaV04wWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y0hKdmFtVmpkSE12STJOeVpXRjBaUzFoTFhKbGNHOXphWFJ2Y25rdGNISnZhbVZqZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0IwYUdVZ1pHVnpZM0pwY0hScGIyNGdiMllnZEdobElIQnliMnBsWTNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J1Wlhkc2VTQmpjbVZoZEdWa0lIQnliMnBsWTNSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1kzSmxZWFJsVUhKdmFtVmpkQ2h2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMa0ZqWTJWd2RFaGxZV1JsY2lBOUlDZHBibVZ5ZEdsaExYQnlaWFpwWlhjbk8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOXdjbTlxWldOMGMyQXNJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkpsY0c5emFYUnZjbms3WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcG9zaXRvcnkuanMubWFwXG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWBcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLFxuXHQvLyBhbmQgdXNlIGl0IGFzIGByb290YFxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdHZhciBjb3VudGVyID0gMDtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ5dGUoY29kZVBvaW50LCBzaGlmdCkge1xuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gc2hpZnQpICYgMHgzRikgfCAweDgwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHZhciBzeW1ib2wgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50KTtcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxMikgJiAweDBGKSB8IDB4RTApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZFMDAwMDApID09IDApIHsgLy8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgMTIpO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0c3ltYm9sICs9IHN0cmluZ0Zyb21DaGFyQ29kZSgoY29kZVBvaW50ICYgMHgzRikgfCAweDgwKTtcblx0XHRyZXR1cm4gc3ltYm9sO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXRmOGVuY29kZShzdHJpbmcpIHtcblx0XHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0XHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVQb2ludDtcblx0XHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHJldHVybiBieXRlU3RyaW5nO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKSB7XG5cdFx0aWYgKGJ5dGVJbmRleCA+PSBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHR2YXIgY29udGludWF0aW9uQnl0ZSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0XHRieXRlSW5kZXgrKztcblxuXHRcdGlmICgoY29udGludWF0aW9uQnl0ZSAmIDB4QzApID09IDB4ODApIHtcblx0XHRcdHJldHVybiBjb250aW51YXRpb25CeXRlICYgMHgzRjtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXTigJlzIG5vdCBhIGNvbnRpbnVhdGlvbiBieXRlXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRlY29kZVN5bWJvbCgpIHtcblx0XHR2YXIgYnl0ZTE7XG5cdFx0dmFyIGJ5dGUyO1xuXHRcdHZhciBieXRlMztcblx0XHR2YXIgYnl0ZTQ7XG5cdFx0dmFyIGNvZGVQb2ludDtcblxuXHRcdGlmIChieXRlSW5kZXggPiBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHRpZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFJlYWQgZmlyc3QgYnl0ZVxuXHRcdGJ5dGUxID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0Ly8gMS1ieXRlIHNlcXVlbmNlIChubyBjb250aW51YXRpb24gYnl0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4ODApID09IDApIHtcblx0XHRcdHJldHVybiBieXRlMTtcblx0XHR9XG5cblx0XHQvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MUYpIDw8IDYpIHwgYnl0ZTI7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRcdGlmICgoYnl0ZTEgJiAweEYwKSA9PSAweEUwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMTIpIHwgKGJ5dGUyIDw8IDYpIHwgYnl0ZTM7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4MDgwMCkge1xuXHRcdFx0XHRjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCk7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfFxuXHRcdFx0XHQoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgVVRGLTggZGV0ZWN0ZWQnKTtcblx0fVxuXG5cdHZhciBieXRlQXJyYXk7XG5cdHZhciBieXRlQ291bnQ7XG5cdHZhciBieXRlSW5kZXg7XG5cdGZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZykge1xuXHRcdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdFx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0XHRieXRlSW5kZXggPSAwO1xuXHRcdHZhciBjb2RlUG9pbnRzID0gW107XG5cdFx0dmFyIHRtcDtcblx0XHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbCgpKSAhPT0gZmFsc2UpIHtcblx0XHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHRcdH1cblx0XHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciB1dGY4ID0ge1xuXHRcdCd2ZXJzaW9uJzogJzIuMS4yJyxcblx0XHQnZW5jb2RlJzogdXRmOGVuY29kZSxcblx0XHQnZGVjb2RlJzogdXRmOGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHV0Zjg7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSB1dGY4O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdXRmOCkge1xuXHRcdFx0XHRoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QudXRmOCA9IHV0Zjg7XG5cdH1cblxufSh0aGlzKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxMyBNaWNoYWVsIEF1ZnJlaXRlciAoRGV2ZWxvcG1lbnQgU2VlZCkgYW5kIDIwMTYgWWFob28gSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4vKipcbiAqIE9yZ2FuaXphdGlvbiBlbmNhcHN1bGF0ZXMgdGhlIGZ1bmN0aW9uYWxpdHkgdG8gY3JlYXRlIHJlcG9zaXRvcmllcyBpbiBvcmdhbml6YXRpb25zXG4gKi9cbnZhciBPcmdhbml6YXRpb24gPSBmdW5jdGlvbiAoX1JlcXVlc3RhYmxlKSB7XG4gIF9pbmhlcml0cyhPcmdhbml6YXRpb24sIF9SZXF1ZXN0YWJsZSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBPcmdhbml6YXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9yZ2FuaXphdGlvbiAtIHRoZSBuYW1lIG9mIHRoZSBvcmdhbml6YXRpb25cbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAqL1xuICBmdW5jdGlvbiBPcmdhbml6YXRpb24ob3JnYW5pemF0aW9uLCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9yZ2FuaXphdGlvbik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoT3JnYW5pemF0aW9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT3JnYW5pemF0aW9uKSkuY2FsbCh0aGlzLCBhdXRoLCBhcGlCYXNlKSk7XG5cbiAgICBfdGhpcy5fX25hbWUgPSBvcmdhbml6YXRpb247XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJlcG9zaXRvcnkgaW4gYW4gb3JnYW5pemF0aW9uXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jY3JlYXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIHJlcG9zaXRvcnkgZGVmaW5pdGlvblxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBjcmVhdGVkIHJlcG9zaXRvcnlcbiAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhPcmdhbml6YXRpb24sIFt7XG4gICAga2V5OiAnY3JlYXRlUmVwbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJlcG8ob3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9vcmdzLycgKyB0aGlzLl9fbmFtZSArICcvcmVwb3MnLCBvcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgcmVwb3NpdG9yaWVzIGluIGFuIG9yZ2FuaXphdGlvblxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jbGlzdC1vcmdhbml6YXRpb24tcmVwb3NpdG9yaWVzXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiByZXBvc2l0b3JpZXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFJlcG9zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVwb3MoY2IpIHtcbiAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldE9wdGlvbnNXaXRoRGVmYXVsdHMoeyBkaXJlY3Rpb246ICdkZXNjJyB9KTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL29yZ3MvJyArIHRoaXMuX19uYW1lICsgJy9yZXBvcycsIHJlcXVlc3RPcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcnkgaWYgdGhlIHVzZXIgaXMgYSBtZW1iZXIgb3Igbm90XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJuYW1lIC0gdGhlIHVzZXIgaW4gcXVlc3Rpb25cbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHVzZXIgaXMgYSBtZW1iZXJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzTWVtYmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNNZW1iZXIodXNlcm5hbWUsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdDIwNG9yNDA0KCcvb3Jncy8nICsgdGhpcy5fX25hbWUgKyAnL21lbWJlcnMvJyArIHVzZXJuYW1lLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgdXNlcnMgd2hvIGFyZSBtZW1iZXJzIG9mIHRoZSBjb21wYW55XG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvbWVtYmVycy8jbWVtYmVycy1saXN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBmaWx0ZXJpbmcgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5maWx0ZXI9YWxsXSAtIGNhbiBiZSBlaXRoZXIgYDJmYV9kaXNhYmxlZGAgb3IgYGFsbGBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucm9sZT1hbGxdIC0gY2FuIGJlIG9uZSBvZjogYGFsbGAsIGBhZG1pbmAsIG9yIGBtZW1iZXJgXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiB1c2Vyc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdE1lbWJlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0TWVtYmVycyhvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvb3Jncy8nICsgdGhpcy5fX25hbWUgKyAnL21lbWJlcnMnLCBvcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgVGVhbXMgaW4gdGhlIE9yZ2FuaXphdGlvblxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNsaXN0LXRlYW1zXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiB0ZWFtc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGVhbXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZWFtcyhjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL29yZ3MvJyArIHRoaXMuX19uYW1lICsgJy90ZWFtcycsIHVuZGVmaW5lZCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHRlYW1cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jY3JlYXRlLXRlYW1cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFRlYW0gY3JlYXRpb24gcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdGVhbVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kZXNjcmlwdGlvbl0gLSBUZWFtIGRlc2NyaXB0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnJlcG9fbmFtZXNdIC0gUmVwb3MgdG8gYWRkIHRoZSB0ZWFtIHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnByaXZhY3k9c2VjcmV0XSAtIFRoZSBsZXZlbCBvZiBwcml2YWN5IHRoZSB0ZWFtIHNob3VsZCBoYXZlLiBDYW4gYmUgZWl0aGVyIG9uZVxuICAgICAqIG9mOiBgc2VjcmV0YCwgb3IgYGNsb3NlZGBcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBjcmVhdGVkIHRlYW1cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZVRlYW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUZWFtKG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvb3Jncy8nICsgdGhpcy5fX25hbWUgKyAnL3RlYW1zJywgb3B0aW9ucywgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgcHJvamVjdHNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvI2xpc3Qtb3JnYW5pemF0aW9uLXByb2plY3RzXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBwcm9qZWN0c1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdFByb2plY3RzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdFByb2plY3RzKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKCcvb3Jncy8nICsgdGhpcy5fX25hbWUgKyAnL3Byb2plY3RzJywgeyBBY2NlcHRIZWFkZXI6ICdpbmVydGlhLXByZXZpZXcnIH0sIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgcHJvamVjdFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9wcm9qZWN0cy8jY3JlYXRlLWEtcHJvamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBwcm9qZWN0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ld2x5IGNyZWF0ZWQgcHJvamVjdFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlUHJvamVjdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3Qob3B0aW9ucywgY2IpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgb3B0aW9ucy5BY2NlcHRIZWFkZXIgPSAnaW5lcnRpYS1wcmV2aWV3JztcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9vcmdzLycgKyB0aGlzLl9fbmFtZSArICcvcHJvamVjdHMnLCBvcHRpb25zLCBjYik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9yZ2FuaXphdGlvbjtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcmdhbml6YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazl5WjJGdWFYcGhkR2x2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUpQY21kaGJtbDZZWFJwYjI0aUxDSnZjbWRoYm1sNllYUnBiMjRpTENKaGRYUm9JaXdpWVhCcFFtRnpaU0lzSWw5ZmJtRnRaU0lzSW05d2RHbHZibk1pTENKallpSXNJbDl5WlhGMVpYTjBJaXdpY21WeGRXVnpkRTl3ZEdsdmJuTWlMQ0pmWjJWMFQzQjBhVzl1YzFkcGRHaEVaV1poZFd4MGN5SXNJbVJwY21WamRHbHZiaUlzSWw5eVpYRjFaWE4wUVd4c1VHRm5aWE1pTENKMWMyVnlibUZ0WlNJc0lsOXlaWEYxWlhOME1qQTBiM0kwTURRaUxDSjFibVJsWm1sdVpXUWlMQ0pCWTJObGNIUklaV0ZrWlhJaUxDSlNaWEYxWlhOMFlXSnNaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGUFFUczdPenM3T3pzN096c3JaVUZRUVRzN096czdPenRCUVZOQk96czdTVUZIVFVFc1dUczdPMEZCUTBnN096czdPenRCUVUxQkxIZENRVUZaUXl4WlFVRmFMRVZCUVRCQ1F5eEpRVUV4UWl4RlFVRm5RME1zVDBGQmFFTXNSVUZCZVVNN1FVRkJRVHM3UVVGQlFTdzBTRUZEYUVORUxFbEJSR2RETEVWQlF6RkNReXhQUVVRd1FqczdRVUZGZEVNc1ZVRkJTME1zVFVGQlRDeEhRVUZqU0N4WlFVRmtPMEZCUm5ORE8wRkJSM2hET3p0QlFVVkVPenM3T3pzN096czdPenNyUWtGUFYwa3NUeXhGUVVGVFF5eEZMRVZCUVVrN1FVRkRja0lzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1RVRkJaQ3hoUVVFclFpeExRVUZMU0N4TlFVRndReXhoUVVGdlJFTXNUMEZCY0VRc1JVRkJOa1JETEVWQlFUZEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096WkNRVTFUUVN4RkxFVkJRVWs3UVVGRFZpeFZRVUZKUlN4cFFrRkJhVUlzUzBGQlMwTXNkVUpCUVV3c1EwRkJOa0lzUlVGQlEwTXNWMEZCVnl4TlFVRmFMRVZCUVRkQ0xFTkJRWEpDT3p0QlFVVkJMR0ZCUVU4c1MwRkJTME1zWjBKQlFVd3NXVUZCSzBJc1MwRkJTMUFzVFVGQmNFTXNZVUZCYjBSSkxHTkJRWEJFTEVWQlFXOUZSaXhGUVVGd1JTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzMlFrRk5VMDBzVVN4RlFVRlZUaXhGTEVWQlFVazdRVUZEY0VJc1lVRkJUeXhMUVVGTFR5eG5Ra0ZCVEN4WlFVRXJRaXhMUVVGTFZDeE5RVUZ3UXl4cFFrRkJjMFJSTEZGQlFYUkVMRVZCUVd0RkxFbEJRV3hGTEVWQlFYZEZUaXhGUVVGNFJTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN096dG5RMEZUV1VRc1R5eEZRVUZUUXl4RkxFVkJRVWs3UVVGRGRFSXNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGhRVUU0UWl4TFFVRkxTQ3hOUVVGdVF5eGxRVUZ4UkVNc1QwRkJja1FzUlVGQk9FUkRMRVZCUVRsRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3paQ1FVMVRRU3hGTEVWQlFVazdRVUZEVml4aFFVRlBMRXRCUVV0TExHZENRVUZNTEZsQlFTdENMRXRCUVV0UUxFMUJRWEJETEdGQlFXOUVWU3hUUVVGd1JDeEZRVUVyUkZJc1JVRkJMMFFzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN0swSkJXVmRFTEU4c1JVRkJVME1zUlN4RlFVRkpPMEZCUTNKQ0xHRkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRTFCUVdRc1lVRkJLMElzUzBGQlMwZ3NUVUZCY0VNc1lVRkJiMFJETEU5QlFYQkVMRVZCUVRaRVF5eEZRVUUzUkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenRwUTBGTllVRXNSU3hGUVVGSk8wRkJRMlFzWVVGQlR5eExRVUZMU3l4blFrRkJUQ3haUVVFclFpeExRVUZMVUN4TlFVRndReXhuUWtGQmRVUXNSVUZCUTFjc1kwRkJZeXhwUWtGQlppeEZRVUYyUkN4RlFVRXdSbFFzUlVGQk1VWXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08ydERRVTlqUkN4UExFVkJRVk5ETEVVc1JVRkJTVHRCUVVONFFrUXNaMEpCUVZWQkxGZEJRVmNzUlVGQmNrSTdRVUZEUVVFc1kwRkJVVlVzV1VGQlVpeEhRVUYxUWl4cFFrRkJka0k3UVVGRFFTeGhRVUZQTEV0QlFVdFNMRkZCUVV3c1EwRkJZeXhOUVVGa0xHRkJRU3RDTEV0QlFVdElMRTFCUVhCRExHZENRVUYxUkVNc1QwRkJka1FzUlVGQlowVkRMRVZCUVdoRkxFTkJRVkE3UVVGRFJqczdPenRGUVhwSGRVSlZMSEZDT3p0QlFUUkhNMEpETEU5QlFVOURMRTlCUVZBc1IwRkJhVUpzUWl4WlFVRnFRaUlzSW1acGJHVWlPaUpQY21kaGJtbDZZWFJwYjI0dWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRUJtYVd4bFhHNGdLaUJBWTI5d2VYSnBaMmgwSUNBeU1ERXpJRTFwWTJoaFpXd2dRWFZtY21WcGRHVnlJQ2hFWlhabGJHOXdiV1Z1ZENCVFpXVmtLU0JoYm1RZ01qQXhOaUJaWVdodmJ5QkpibU11WEc0Z0tpQkFiR2xqWlc1elpTQWdJQ0JNYVdObGJuTmxaQ0IxYm1SbGNpQjdRR3hwYm1zZ2FIUjBjSE02THk5emNHUjRMbTl5Wnk5c2FXTmxibk5sY3k5Q1UwUXRNeTFEYkdGMWMyVXRRMnhsWVhJdWFIUnRiQ0JDVTBRdE15MURiR0YxYzJVdFEyeGxZWEo5TGx4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnUjJsMGFIVmlMbXB6SUdseklHWnlaV1ZzZVNCa2FYTjBjbWxpZFhSaFlteGxMbHh1SUNvdlhHNWNibWx0Y0c5eWRDQlNaWEYxWlhOMFlXSnNaU0JtY205dElDY3VMMUpsY1hWbGMzUmhZbXhsSnp0Y2JseHVMeW9xWEc0Z0tpQlBjbWRoYm1sNllYUnBiMjRnWlc1allYQnpkV3hoZEdWeklIUm9aU0JtZFc1amRHbHZibUZzYVhSNUlIUnZJR055WldGMFpTQnlaWEJ2YzJsMGIzSnBaWE1nYVc0Z2IzSm5ZVzVwZW1GMGFXOXVjMXh1SUNvdlhHNWpiR0Z6Y3lCUGNtZGhibWw2WVhScGIyNGdaWGgwWlc1a2N5QlNaWEYxWlhOMFlXSnNaU0I3WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCUGNtZGhibWw2WVhScGIyNWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdmNtZGhibWw2WVhScGIyNGdMU0IwYUdVZ2JtRnRaU0J2WmlCMGFHVWdiM0puWVc1cGVtRjBhVzl1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1GMWRHaDlJRnRoZFhSb1hTQXRJR2x1Wm05eWJXRjBhVzl1SUhKbGNYVnBjbVZrSUhSdklHRjFkR2hsYm5ScFkyRjBaU0IwYnlCSGFYUm9kV0pjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZWEJwUW1GelpUMW9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0WFNBdElIUm9aU0JpWVhObElFZHBkR2gxWWlCQlVFa2dWVkpNWEc0Z0lDQWdLaTljYmlBZ0lHTnZibk4wY25WamRHOXlLRzl5WjJGdWFYcGhkR2x2Yml3Z1lYVjBhQ3dnWVhCcFFtRnpaU2tnZTF4dUlDQWdJQ0FnYzNWd1pYSW9ZWFYwYUN3Z1lYQnBRbUZ6WlNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlmYm1GdFpTQTlJRzl5WjJGdWFYcGhkR2x2Ymp0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0J5WlhCdmMybDBiM0o1SUdsdUlHRnVJRzl5WjJGdWFYcGhkR2x2Ymx4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMeU5qY21WaGRHVmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ2RHaGxJSEpsY0c5emFYUnZjbmtnWkdWbWFXNXBkR2x2Ymx4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnWTNKbFlYUmxaQ0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaVkpsY0c4b2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5dmNtZHpMeVI3ZEdocGN5NWZYMjVoYldWOUwzSmxjRzl6WUN3Z2IzQjBhVzl1Y3l3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFeHBjM1FnZEdobElISmxjRzl6YVhSdmNtbGxjeUJwYmlCaGJpQnZjbWRoYm1sNllYUnBiMjVjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OGpiR2x6ZEMxdmNtZGhibWw2WVhScGIyNHRjbVZ3YjNOcGRHOXlhV1Z6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JSEpsY0c5emFYUnZjbWxsYzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUlNaWEJ2Y3loallpa2dlMXh1SUNBZ0lDQWdiR1YwSUhKbGNYVmxjM1JQY0hScGIyNXpJRDBnZEdocGN5NWZaMlYwVDNCMGFXOXVjMWRwZEdoRVpXWmhkV3gwY3loN1pHbHlaV04wYVc5dU9pQW5aR1Z6WXlkOUtUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1JCYkd4UVlXZGxjeWhnTDI5eVozTXZKSHQwYUdsekxsOWZibUZ0WlgwdmNtVndiM05nTENCeVpYRjFaWE4wVDNCMGFXOXVjeXdnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUZGMVpYSjVJR2xtSUhSb1pTQjFjMlZ5SUdseklHRWdiV1Z0WW1WeUlHOXlJRzV2ZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFZ6WlhKdVlXMWxJQzBnZEdobElIVnpaWElnYVc0Z2NYVmxjM1JwYjI1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnZFhObGNpQnBjeUJoSUcxbGJXSmxjbHh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JwYzAxbGJXSmxjaWgxYzJWeWJtRnRaU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBNakEwYjNJME1EUW9ZQzl2Y21kekx5UjdkR2hwY3k1ZlgyNWhiV1Y5TDIxbGJXSmxjbk12Skh0MWMyVnlibUZ0WlgxZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RHbHpkQ0IwYUdVZ2RYTmxjbk1nZDJodklHRnlaU0J0WlcxaVpYSnpJRzltSUhSb1pTQmpiMjF3WVc1NVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmIzSm5jeTl0WlcxaVpYSnpMeU50WlcxaVpYSnpMV3hwYzNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnWm1sc2RHVnlhVzVuSUc5d2RHbHZibk5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NW1hV3gwWlhJOVlXeHNYU0F0SUdOaGJpQmlaU0JsYVhSb1pYSWdZREptWVY5a2FYTmhZbXhsWkdBZ2IzSWdZR0ZzYkdCY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiYjNCMGFXOXVjeTV5YjJ4bFBXRnNiRjBnTFNCallXNGdZbVVnYjI1bElHOW1PaUJnWVd4c1lDd2dZR0ZrYldsdVlDd2diM0lnWUcxbGJXSmxjbUJjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR3hwYzNRZ2IyWWdkWE5sY25OY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2JHbHpkRTFsYldKbGNuTW9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wyOXlaM012Skh0MGFHbHpMbDlmYm1GdFpYMHZiV1Z0WW1WeWMyQXNJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJNYVhOMElIUm9aU0JVWldGdGN5QnBiaUIwYUdVZ1QzSm5ZVzVwZW1GMGFXOXVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZiM0puY3k5MFpXRnRjeThqYkdsemRDMTBaV0Z0YzF4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYkdsemRDQnZaaUIwWldGdGMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJVWldGdGN5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNSQmJHeFFZV2RsY3loZ0wyOXlaM012Skh0MGFHbHpMbDlmYm1GdFpYMHZkR1ZoYlhOZ0xDQjFibVJsWm1sdVpXUXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0IwWldGdFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmIzSm5jeTkwWldGdGN5OGpZM0psWVhSbExYUmxZVzFjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZjSFJwYjI1eklDMGdWR1ZoYlNCamNtVmhkR2x2YmlCd1lYSmhiV1YwWlhKelhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYjNCMGFXOXVjeTV1WVcxbElDMGdWR2hsSUc1aGJXVWdiMllnZEdobElIUmxZVzFjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NWtaWE5qY21sd2RHbHZibDBnTFNCVVpXRnRJR1JsYzJOeWFYQjBhVzl1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMjl3ZEdsdmJuTXVjbVZ3YjE5dVlXMWxjMTBnTFNCU1pYQnZjeUIwYnlCaFpHUWdkR2hsSUhSbFlXMGdkRzljYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NXdjbWwyWVdONVBYTmxZM0psZEYwZ0xTQlVhR1VnYkdWMlpXd2diMllnY0hKcGRtRmplU0IwYUdVZ2RHVmhiU0J6YUc5MWJHUWdhR0YyWlM0Z1EyRnVJR0psSUdWcGRHaGxjaUJ2Ym1WY2JpQWdJQ0FxSUc5bU9pQmdjMlZqY21WMFlDd2diM0lnWUdOc2IzTmxaR0JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR055WldGMFpXUWdkR1ZoYlZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCamNtVmhkR1ZVWldGdEtHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblVFOVRWQ2NzSUdBdmIzSm5jeThrZTNSb2FYTXVYMTl1WVcxbGZTOTBaV0Z0YzJBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkhaWFFnYVc1bWIzSnRZWFJwYjI0Z1lXSnZkWFFnWVd4c0lIQnliMnBsWTNSelhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNISnZhbVZqZEhNdkkyeHBjM1F0YjNKbllXNXBlbUYwYVc5dUxYQnliMnBsWTNSelhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUhCeWIycGxZM1J6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUlFjbTlxWldOMGN5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNSQmJHeFFZV2RsY3loZ0wyOXlaM012Skh0MGFHbHpMbDlmYm1GdFpYMHZjSEp2YW1WamRITmdMQ0I3UVdOalpYQjBTR1ZoWkdWeU9pQW5hVzVsY25ScFlTMXdjbVYyYVdWM0ozMHNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ2NISnZhbVZqZEZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMM0J5YjJwbFkzUnpMeU5qY21WaGRHVXRZUzF3Y205cVpXTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElIUm9aU0JrWlhOamNtbHdkR2x2YmlCdlppQjBhR1VnY0hKdmFtVmpkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHNWxkMng1SUdOeVpXRjBaV1FnY0hKdmFtVmpkRnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JqY21WaGRHVlFjbTlxWldOMEtHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdVFXTmpaWEIwU0dWaFpHVnlJRDBnSjJsdVpYSjBhV0V0Y0hKbGRtbGxkeWM3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblVFOVRWQ2NzSUdBdmIzSm5jeThrZTNSb2FYTXVYMTl1WVcxbGZTOXdjbTlxWldOMGMyQXNJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlBjbWRoYm1sNllYUnBiMjQ3WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9yZ2FuaXphdGlvbi5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBjb3B5cmlnaHQgIDIwMTYgTWF0dCBTbWl0aCAoRGV2ZWxvcG1lbnQgU2VlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBsaWNlbnNlICAgIExpY2Vuc2VkIHVuZGVyIHtAbGluayBodHRwczovL3NwZHgub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZS1DbGVhci5odG1sIEJTRC0zLUNsYXVzZS1DbGVhcn0uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICBHaXRodWIuanMgaXMgZnJlZWx5IGRpc3RyaWJ1dGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxudmFyIGxvZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKCdnaXRodWI6dGVhbScpO1xuXG4vKipcbiAqIEEgVGVhbSBhbGxvd3Mgc2NvcGluZyBvZiBBUEkgcmVxdWVzdHMgdG8gYSBwYXJ0aWN1bGFyIEdpdGh1YiBPcmdhbml6YXRpb24gVGVhbS5cbiAqL1xuXG52YXIgVGVhbSA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgX2luaGVyaXRzKFRlYW0sIF9SZXF1ZXN0YWJsZSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIFRlYW0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGVhbUlkXSAtIHRoZSBpZCBmb3IgdGhlIHRlYW1cbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAqL1xuICBmdW5jdGlvbiBUZWFtKHRlYW1JZCwgYXV0aCwgYXBpQmFzZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZWFtKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUZWFtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGVhbSkpLmNhbGwodGhpcywgYXV0aCwgYXBpQmFzZSkpO1xuXG4gICAgX3RoaXMuX190ZWFtSWQgPSB0ZWFtSWQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBUZWFtIGluZm9ybWF0aW9uXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNnZXQtdGVhbVxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSB0ZWFtXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoVGVhbSwgW3tcbiAgICBrZXk6ICdnZXRUZWFtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGVhbShjYikge1xuICAgICAgbG9nKCdGZXRjaGluZyBUZWFtICcgKyB0aGlzLl9fdGVhbUlkKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHZXQnLCAnL3RlYW1zLycgKyB0aGlzLl9fdGVhbUlkLCB1bmRlZmluZWQsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBUZWFtJ3MgcmVwb3NpdG9yaWVzXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvdGVhbXMvI2xpc3QtdGVhbS1yZXBvc1xuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgcmVwb3NpdG9yaWVzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0UmVwb3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0UmVwb3MoY2IpIHtcbiAgICAgIGxvZygnRmV0Y2hpbmcgcmVwb3NpdG9yaWVzIGZvciBUZWFtICcgKyB0aGlzLl9fdGVhbUlkKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXMoJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCArICcvcmVwb3MnLCB1bmRlZmluZWQsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFZGl0IFRlYW0gaW5mb3JtYXRpb25cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jZWRpdC10ZWFtXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBQYXJhbWV0ZXJzIGZvciB0ZWFtIGVkaXRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHRlYW1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZGVzY3JpcHRpb25dIC0gVGVhbSBkZXNjcmlwdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yZXBvX25hbWVzXSAtIFJlcG9zIHRvIGFkZCB0aGUgdGVhbSB0b1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wcml2YWN5PXNlY3JldF0gLSBUaGUgbGV2ZWwgb2YgcHJpdmFjeSB0aGUgdGVhbSBzaG91bGQgaGF2ZS4gQ2FuIGJlIGVpdGhlciBvbmVcbiAgICAgKiBvZjogYHNlY3JldGAsIG9yIGBjbG9zZWRgXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgdXBkYXRlZCB0ZWFtXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlZGl0VGVhbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXRUZWFtKG9wdGlvbnMsIGNiKSB7XG4gICAgICBsb2coJ0VkaXRpbmcgVGVhbSAnICsgdGhpcy5fX3RlYW1JZCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3RlYW1zLycgKyB0aGlzLl9fdGVhbUlkLCBvcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgdXNlcnMgd2hvIGFyZSBtZW1iZXJzIG9mIHRoZSBUZWFtXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvdGVhbXMvI2xpc3QtdGVhbS1tZW1iZXJzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBQYXJhbWV0ZXJzIGZvciBsaXN0aW5nIHRlYW0gdXNlcnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucm9sZT1hbGxdIC0gY2FuIGJlIG9uZSBvZjogYGFsbGAsIGBtYWludGFpbmVyYCwgb3IgYG1lbWJlcmBcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHVzZXJzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0TWVtYmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RNZW1iZXJzKG9wdGlvbnMsIGNiKSB7XG4gICAgICBsb2coJ0dldHRpbmcgbWVtYmVycyBvZiBUZWFtICcgKyB0aGlzLl9fdGVhbUlkKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXMoJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCArICcvbWVtYmVycycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgVGVhbSBtZW1iZXJzaGlwIHN0YXR1cyBmb3IgYSB1c2VyXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvdGVhbXMvI2dldC10ZWFtLW1lbWJlcnNoaXBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgLSBjYW4gYmUgb25lIG9mOiBgYWxsYCwgYG1haW50YWluZXJgLCBvciBgbWVtYmVyYFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG1lbWJlcnNoaXAgc3RhdHVzIG9mIGEgdXNlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0TWVtYmVyc2hpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1lbWJlcnNoaXAodXNlcm5hbWUsIGNiKSB7XG4gICAgICBsb2coJ0dldHRpbmcgbWVtYmVyc2hpcCBvZiB1c2VyICcgKyB1c2VybmFtZSArICcgaW4gVGVhbSAnICsgdGhpcy5fX3RlYW1JZCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCArICcvbWVtYmVyc2hpcHMvJyArIHVzZXJuYW1lLCB1bmRlZmluZWQsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBtZW1iZXIgdG8gdGhlIFRlYW1cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jYWRkLXRlYW0tbWVtYmVyc2hpcFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSAtIGNhbiBiZSBvbmUgb2Y6IGBhbGxgLCBgbWFpbnRhaW5lcmAsIG9yIGBtZW1iZXJgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBQYXJhbWV0ZXJzIGZvciBhZGRpbmcgYSB0ZWFtIG1lbWJlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yb2xlPW1lbWJlcl0gLSBUaGUgcm9sZSB0aGF0IHRoaXMgdXNlciBzaG91bGQgaGF2ZSBpbiB0aGUgdGVhbS4gQ2FuIGJlIG9uZVxuICAgICAqIG9mOiBgbWVtYmVyYCwgb3IgYG1haW50YWluZXJgXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbWVtYmVyc2hpcCBzdGF0dXMgb2YgYWRkZWQgdXNlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkTWVtYmVyc2hpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE1lbWJlcnNoaXAodXNlcm5hbWUsIG9wdGlvbnMsIGNiKSB7XG4gICAgICBsb2coJ0FkZGluZyB1c2VyICcgKyB1c2VybmFtZSArICcgdG8gVGVhbSAnICsgdGhpcy5fX3RlYW1JZCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUFVUJywgJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCArICcvbWVtYmVyc2hpcHMvJyArIHVzZXJuYW1lLCBvcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHJlcG8gbWFuYWdlbWVudCBzdGF0dXMgZm9yIHRlYW1cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jcmVtb3ZlLXRlYW0tbWVtYmVyc2hpcFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvd25lciAtIE9yZ2FuaXphdGlvbiBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcG8gLSBSZXBvIG5hbWVcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBtZW1iZXJzaGlwIHN0YXR1cyBvZiBhZGRlZCB1c2VyXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpc01hbmFnZWRSZXBvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNNYW5hZ2VkUmVwbyhvd25lciwgcmVwbywgY2IpIHtcbiAgICAgIGxvZygnR2V0dGluZyByZXBvIG1hbmFnZW1lbnQgYnkgVGVhbSAnICsgdGhpcy5fX3RlYW1JZCArICcgZm9yIHJlcG8gJyArIG93bmVyICsgJy8nICsgcmVwbyk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdDIwNG9yNDA0KCcvdGVhbXMvJyArIHRoaXMuX190ZWFtSWQgKyAnL3JlcG9zLycgKyBvd25lciArICcvJyArIHJlcG8sIHVuZGVmaW5lZCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBvciBVcGRhdGUgcmVwbyBtYW5hZ2VtZW50IHN0YXR1cyBmb3IgdGVhbVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNhZGQtb3ItdXBkYXRlLXRlYW0tcmVwb3NpdG9yeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvd25lciAtIE9yZ2FuaXphdGlvbiBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcG8gLSBSZXBvIG5hbWVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFBhcmFtZXRlcnMgZm9yIGFkZGluZyBvciB1cGRhdGluZyByZXBvIG1hbmFnZW1lbnQgZm9yIHRoZSB0ZWFtXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBlcm1pc3Npb25dIC0gVGhlIHBlcm1pc3Npb24gdG8gZ3JhbnQgdGhlIHRlYW0gb24gdGhpcyByZXBvc2l0b3J5LiBDYW4gYmUgb25lXG4gICAgICogb2Y6IGBwdWxsYCwgYHB1c2hgLCBvciBgYWRtaW5gXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbWVtYmVyc2hpcCBzdGF0dXMgb2YgYWRkZWQgdXNlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWFuYWdlUmVwbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hbmFnZVJlcG8ob3duZXIsIHJlcG8sIG9wdGlvbnMsIGNiKSB7XG4gICAgICBsb2coJ0FkZGluZyBvciBVcGRhdGluZyByZXBvIG1hbmFnZW1lbnQgYnkgVGVhbSAnICsgdGhpcy5fX3RlYW1JZCArICcgZm9yIHJlcG8gJyArIG93bmVyICsgJy8nICsgcmVwbyk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdDIwNG9yNDA0KCcvdGVhbXMvJyArIHRoaXMuX190ZWFtSWQgKyAnL3JlcG9zLycgKyBvd25lciArICcvJyArIHJlcG8sIG9wdGlvbnMsIGNiLCAnUFVUJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHJlcG8gbWFuYWdlbWVudCBzdGF0dXMgZm9yIHRlYW1cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jcmVtb3ZlLXRlYW0tcmVwb3NpdG9yeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvd25lciAtIE9yZ2FuaXphdGlvbiBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcG8gLSBSZXBvIG5hbWVcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBtZW1iZXJzaGlwIHN0YXR1cyBvZiBhZGRlZCB1c2VyXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bm1hbmFnZVJlcG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bm1hbmFnZVJlcG8ob3duZXIsIHJlcG8sIGNiKSB7XG4gICAgICBsb2coJ1JlbW92ZSByZXBvIG1hbmFnZW1lbnQgYnkgVGVhbSAnICsgdGhpcy5fX3RlYW1JZCArICcgZm9yIHJlcG8gJyArIG93bmVyICsgJy8nICsgcmVwbyk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdDIwNG9yNDA0KCcvdGVhbXMvJyArIHRoaXMuX190ZWFtSWQgKyAnL3JlcG9zLycgKyBvd25lciArICcvJyArIHJlcG8sIHVuZGVmaW5lZCwgY2IsICdERUxFVEUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgVGVhbVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNkZWxldGUtdGVhbVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgcmVwb3NpdG9yaWVzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVUZWFtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlVGVhbShjYikge1xuICAgICAgbG9nKCdEZWxldGluZyBUZWFtICcgKyB0aGlzLl9fdGVhbUlkKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0MjA0b3I0MDQoJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCwgdW5kZWZpbmVkLCBjYiwgJ0RFTEVURScpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUZWFtO1xufShfUmVxdWVzdGFibGUzLmRlZmF1bHQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJsWVcwdWFuTWlYU3dpYm1GdFpYTWlPbHNpYkc5bklpd2lWR1ZoYlNJc0luUmxZVzFKWkNJc0ltRjFkR2dpTENKaGNHbENZWE5sSWl3aVgxOTBaV0Z0U1dRaUxDSmpZaUlzSWw5eVpYRjFaWE4wSWl3aWRXNWtaV1pwYm1Wa0lpd2lYM0psY1hWbGMzUkJiR3hRWVdkbGN5SXNJbTl3ZEdsdmJuTWlMQ0oxYzJWeWJtRnRaU0lzSW05M2JtVnlJaXdpY21Wd2J5SXNJbDl5WlhGMVpYTjBNakEwYjNJME1EUWlMQ0pTWlhGMVpYTjBZV0pzWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN1FVRlBRVHM3T3p0QlFVTkJPenM3T3pzN096czdPeXRsUVZKQk96czdPenM3TzBGQlUwRXNTVUZCVFVFc1RVRkJUU3h4UWtGQlRTeGhRVUZPTEVOQlFWbzdPMEZCUlVFN096czdTVUZIVFVNc1NUczdPMEZCUTBnN096czdPenRCUVUxQkxHZENRVUZaUXl4TlFVRmFMRVZCUVc5Q1F5eEpRVUZ3UWl4RlFVRXdRa01zVDBGQk1VSXNSVUZCYlVNN1FVRkJRVHM3UVVGQlFTdzBSMEZETVVKRUxFbEJSREJDTEVWQlEzQkNReXhQUVVSdlFqczdRVUZGYUVNc1ZVRkJTME1zVVVGQlRDeEhRVUZuUWtnc1RVRkJhRUk3UVVGR1owTTdRVUZIYkVNN08wRkJSVVE3T3pzN096czdPenM3TkVKQlRWRkpMRVVzUlVGQlNUdEJRVU5VVGl3MlFrRkJjVUlzUzBGQlMwc3NVVUZCTVVJN1FVRkRRU3hoUVVGUExFdEJRVXRGTEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRHTEZGQlFYQkRMRVZCUVdkRVJ5eFRRVUZvUkN4RlFVRXlSRVlzUlVGQk0wUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN09FSkJUVlZCTEVVc1JVRkJTVHRCUVVOWVRpdzRRMEZCYzBNc1MwRkJTMHNzVVVGQk0wTTdRVUZEUVN4aFFVRlBMRXRCUVV0SkxHZENRVUZNTEdGQlFXZERMRXRCUVV0S0xGRkJRWEpETEdGQlFYVkVSeXhUUVVGMlJDeEZRVUZyUlVZc1JVRkJiRVVzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN05rSkJXVk5KTEU4c1JVRkJVMG9zUlN4RlFVRkpPMEZCUTI1Q1RpdzBRa0ZCYjBJc1MwRkJTMHNzVVVGQmVrSTdRVUZEUVN4aFFVRlBMRXRCUVV0RkxGRkJRVXdzUTBGQll5eFBRVUZrTEdOQlFXbERMRXRCUVV0R0xGRkJRWFJETEVWQlFXdEVTeXhQUVVGc1JDeEZRVUV5UkVvc1JVRkJNMFFzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenRuUTBGUldVa3NUeXhGUVVGVFNpeEZMRVZCUVVrN1FVRkRkRUpPTEhWRFFVRXJRaXhMUVVGTFN5eFJRVUZ3UXp0QlFVTkJMR0ZCUVU4c1MwRkJTMGtzWjBKQlFVd3NZVUZCWjBNc1MwRkJTMG9zVVVGQmNrTXNaVUZCZVVSTExFOUJRWHBFTEVWQlFXdEZTaXhGUVVGc1JTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN2EwTkJUMk5MTEZFc1JVRkJWVXdzUlN4RlFVRkpPMEZCUTNwQ1Rpd3dRMEZCYTBOWExGRkJRV3hETEdsQ1FVRnpSQ3hMUVVGTFRpeFJRVUV6UkR0QlFVTkJMR0ZCUVU4c1MwRkJTMFVzVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMFlzVVVGQmNFTXNjVUpCUVRSRVRTeFJRVUUxUkN4RlFVRjNSVWdzVTBGQmVFVXNSVUZCYlVaR0xFVkJRVzVHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3T3p0clEwRlZZMHNzVVN4RlFVRlZSQ3hQTEVWQlFWTktMRVVzUlVGQlNUdEJRVU5zUTA0c01rSkJRVzFDVnl4UlFVRnVRaXhwUWtGQmRVTXNTMEZCUzA0c1VVRkJOVU03UVVGRFFTeGhRVUZQTEV0QlFVdEZMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdEdMRkZCUVhCRExIRkNRVUUwUkUwc1VVRkJOVVFzUlVGQmQwVkVMRTlCUVhoRkxFVkJRV2xHU2l4RlFVRnFSaXhEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPMnREUVZGalRTeExMRVZCUVU5RExFa3NSVUZCVFZBc1JTeEZRVUZKTzBGQlF6VkNUaXdyUTBGQmRVTXNTMEZCUzBzc1VVRkJOVU1zYTBKQlFXbEZUeXhMUVVGcVJTeFRRVUV3UlVNc1NVRkJNVVU3UVVGRFFTeGhRVUZQTEV0QlFVdERMR2RDUVVGTUxHRkJRV2RETEV0QlFVdFVMRkZCUVhKRExHVkJRWFZFVHl4TFFVRjJSQ3hUUVVGblJVTXNTVUZCYUVVc1JVRkJkMFZNTEZOQlFYaEZMRVZCUVcxR1JpeEZRVUZ1Uml4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3T3pzN095dENRVmRYVFN4TExFVkJRVTlETEVrc1JVRkJUVWdzVHl4RlFVRlRTaXhGTEVWQlFVazdRVUZEYkVOT0xEQkVRVUZyUkN4TFFVRkxTeXhSUVVGMlJDeHJRa0ZCTkVWUExFdEJRVFZGTEZOQlFYRkdReXhKUVVGeVJqdEJRVU5CTEdGQlFVOHNTMEZCUzBNc1owSkJRVXdzWVVGQlowTXNTMEZCUzFRc1VVRkJja01zWlVGQmRVUlBMRXRCUVhaRUxGTkJRV2RGUXl4SlFVRm9SU3hGUVVGM1JVZ3NUMEZCZUVVc1JVRkJhVVpLTEVWQlFXcEdMRVZCUVhGR0xFdEJRWEpHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3YVVOQlVXRk5MRXNzUlVGQlQwTXNTU3hGUVVGTlVDeEZMRVZCUVVrN1FVRkRNMEpPTERoRFFVRnpReXhMUVVGTFN5eFJRVUV6UXl4clFrRkJaMFZQTEV0QlFXaEZMRk5CUVhsRlF5eEpRVUY2UlR0QlFVTkJMR0ZCUVU4c1MwRkJTME1zWjBKQlFVd3NZVUZCWjBNc1MwRkJTMVFzVVVGQmNrTXNaVUZCZFVSUExFdEJRWFpFTEZOQlFXZEZReXhKUVVGb1JTeEZRVUYzUlV3c1UwRkJlRVVzUlVGQmJVWkdMRVZCUVc1R0xFVkJRWFZHTEZGQlFYWkdMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN095dENRVTFYUVN4RkxFVkJRVWs3UVVGRFdrNHNOa0pCUVhGQ0xFdEJRVXRMTEZGQlFURkNPMEZCUTBFc1lVRkJUeXhMUVVGTFV5eG5Ra0ZCVEN4aFFVRm5ReXhMUVVGTFZDeFJRVUZ5UXl4RlFVRnBSRWNzVTBGQmFrUXNSVUZCTkVSR0xFVkJRVFZFTEVWQlFXZEZMRkZCUVdoRkxFTkJRVkE3UVVGRFJqczdPenRGUVRsSlpWTXNjVUk3TzBGQmFVcHVRa01zVDBGQlQwTXNUMEZCVUN4SFFVRnBRbWhDTEVsQlFXcENJaXdpWm1sc1pTSTZJbFJsWVcwdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRUJtYVd4bFhHNGdLaUJBWTI5d2VYSnBaMmgwSUNBeU1ERTJJRTFoZEhRZ1UyMXBkR2dnS0VSbGRtVnNiM0J0Wlc1MElGTmxaV1FwWEc0Z0tpQkFiR2xqWlc1elpTQWdJQ0JNYVdObGJuTmxaQ0IxYm1SbGNpQjdRR3hwYm1zZ2FIUjBjSE02THk5emNHUjRMbTl5Wnk5c2FXTmxibk5sY3k5Q1UwUXRNeTFEYkdGMWMyVXRRMnhsWVhJdWFIUnRiQ0JDVTBRdE15MURiR0YxYzJVdFEyeGxZWEo5TGx4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnUjJsMGFIVmlMbXB6SUdseklHWnlaV1ZzZVNCa2FYTjBjbWxpZFhSaFlteGxMbHh1SUNvdlhHNWNibWx0Y0c5eWRDQlNaWEYxWlhOMFlXSnNaU0JtY205dElDY3VMMUpsY1hWbGMzUmhZbXhsSnp0Y2JtbHRjRzl5ZENCa1pXSjFaeUJtY205dElDZGtaV0oxWnljN1hHNWpiMjV6ZENCc2IyY2dQU0JrWldKMVp5Z25aMmwwYUhWaU9uUmxZVzBuS1R0Y2JseHVMeW9xWEc0Z0tpQkJJRlJsWVcwZ1lXeHNiM2R6SUhOamIzQnBibWNnYjJZZ1FWQkpJSEpsY1hWbGMzUnpJSFJ2SUdFZ2NHRnlkR2xqZFd4aGNpQkhhWFJvZFdJZ1QzSm5ZVzVwZW1GMGFXOXVJRlJsWVcwdVhHNGdLaTljYm1Oc1lYTnpJRlJsWVcwZ1pYaDBaVzVrY3lCU1pYRjFaWE4wWVdKc1pTQjdYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElGUmxZVzB1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXM1JsWVcxSlpGMGdMU0IwYUdVZ2FXUWdabTl5SUhSb1pTQjBaV0Z0WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1GMWRHaDlJRnRoZFhSb1hTQXRJR2x1Wm05eWJXRjBhVzl1SUhKbGNYVnBjbVZrSUhSdklHRjFkR2hsYm5ScFkyRjBaU0IwYnlCSGFYUm9kV0pjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZWEJwUW1GelpUMW9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0WFNBdElIUm9aU0JpWVhObElFZHBkR2gxWWlCQlVFa2dWVkpNWEc0Z0lDQWdLaTljYmlBZ0lHTnZibk4wY25WamRHOXlLSFJsWVcxSlpDd2dZWFYwYUN3Z1lYQnBRbUZ6WlNrZ2UxeHVJQ0FnSUNBZ2MzVndaWElvWVhWMGFDd2dZWEJwUW1GelpTazdYRzRnSUNBZ0lDQjBhR2x6TGw5ZmRHVmhiVWxrSUQwZ2RHVmhiVWxrTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZENCVVpXRnRJR2x1Wm05eWJXRjBhVzl1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YjNKbmN5OTBaV0Z0Y3k4aloyVjBMWFJsWVcxY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhSbFlXMWNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwVkdWaGJTaGpZaWtnZTF4dUlDQWdJQ0FnYkc5bktHQkdaWFJqYUdsdVp5QlVaV0Z0SUNSN2RHaHBjeTVmWDNSbFlXMUpaSDFnS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhaWFFuTENCZ0wzUmxZVzF6THlSN2RHaHBjeTVmWDNSbFlXMUpaSDFnTENCMWJtUmxabWx1WldRc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk1hWE4wSUhSb1pTQlVaV0Z0SjNNZ2NtVndiM05wZEc5eWFXVnpYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZiM0puY3k5MFpXRnRjeThqYkdsemRDMTBaV0Z0TFhKbGNHOXpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlISmxjRzl6YVhSdmNtbGxjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JzYVhOMFVtVndiM01vWTJJcElIdGNiaUFnSUNBZ0lHeHZaeWhnUm1WMFkyaHBibWNnY21Wd2IzTnBkRzl5YVdWeklHWnZjaUJVWldGdElDUjdkR2hwY3k1ZlgzUmxZVzFKWkgxZ0tUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBRV3hzVUdGblpYTW9ZQzkwWldGdGN5OGtlM1JvYVhNdVgxOTBaV0Z0U1dSOUwzSmxjRzl6WUN3Z2RXNWtaV1pwYm1Wa0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSV1JwZENCVVpXRnRJR2x1Wm05eWJXRjBhVzl1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YjNKbmN5OTBaV0Z0Y3k4alpXUnBkQzEwWldGdFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUZCaGNtRnRaWFJsY25NZ1ptOXlJSFJsWVcwZ1pXUnBkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHOXdkR2x2Ym5NdWJtRnRaU0F0SUZSb1pTQnVZVzFsSUc5bUlIUm9aU0IwWldGdFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzI5d2RHbHZibk11WkdWelkzSnBjSFJwYjI1ZElDMGdWR1ZoYlNCa1pYTmpjbWx3ZEdsdmJseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0dmNIUnBiMjV6TG5KbGNHOWZibUZ0WlhOZElDMGdVbVZ3YjNNZ2RHOGdZV1JrSUhSb1pTQjBaV0Z0SUhSdlhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzI5d2RHbHZibk11Y0hKcGRtRmplVDF6WldOeVpYUmRJQzBnVkdobElHeGxkbVZzSUc5bUlIQnlhWFpoWTNrZ2RHaGxJSFJsWVcwZ2MyaHZkV3hrSUdoaGRtVXVJRU5oYmlCaVpTQmxhWFJvWlhJZ2IyNWxYRzRnSUNBZ0tpQnZaam9nWUhObFkzSmxkR0FzSUc5eUlHQmpiRzl6WldSZ1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCMWNHUmhkR1ZrSUhSbFlXMWNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaV1JwZEZSbFlXMG9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUd4dlp5aGdSV1JwZEdsdVp5QlVaV0Z0SUNSN2RHaHBjeTVmWDNSbFlXMUpaSDFnS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZkR1ZoYlhNdkpIdDBhR2x6TGw5ZmRHVmhiVWxrZldBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk1hWE4wSUhSb1pTQjFjMlZ5Y3lCM2FHOGdZWEpsSUcxbGJXSmxjbk1nYjJZZ2RHaGxJRlJsWVcxY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5dmNtZHpMM1JsWVcxekx5TnNhWE4wTFhSbFlXMHRiV1Z0WW1WeWMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc5d2RHbHZibk1nTFNCUVlYSmhiV1YwWlhKeklHWnZjaUJzYVhOMGFXNW5JSFJsWVcwZ2RYTmxjbk5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NXliMnhsUFdGc2JGMGdMU0JqWVc0Z1ltVWdiMjVsSUc5bU9pQmdZV3hzWUN3Z1lHMWhhVzUwWVdsdVpYSmdMQ0J2Y2lCZ2JXVnRZbVZ5WUZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYkdsemRDQnZaaUIxYzJWeWMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnNhWE4wVFdWdFltVnljeWh2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2JHOW5LR0JIWlhSMGFXNW5JRzFsYldKbGNuTWdiMllnVkdWaGJTQWtlM1JvYVhNdVgxOTBaV0Z0U1dSOVlDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkRUZzYkZCaFoyVnpLR0F2ZEdWaGJYTXZKSHQwYUdsekxsOWZkR1ZoYlVsa2ZTOXRaVzFpWlhKellDd2diM0IwYVc5dWN5d2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZENCVVpXRnRJRzFsYldKbGNuTm9hWEFnYzNSaGRIVnpJR1p2Y2lCaElIVnpaWEpjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl2Y21kekwzUmxZVzF6THlOblpYUXRkR1ZoYlMxdFpXMWlaWEp6YUdsd1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZFhObGNtNWhiV1VnTFNCallXNGdZbVVnYjI1bElHOW1PaUJnWVd4c1lDd2dZRzFoYVc1MFlXbHVaWEpnTENCdmNpQmdiV1Z0WW1WeVlGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JXVnRZbVZ5YzJocGNDQnpkR0YwZFhNZ2IyWWdZU0IxYzJWeVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRTFsYldKbGNuTm9hWEFvZFhObGNtNWhiV1VzSUdOaUtTQjdYRzRnSUNBZ0lDQnNiMmNvWUVkbGRIUnBibWNnYldWdFltVnljMmhwY0NCdlppQjFjMlZ5SUNSN2RYTmxjbTVoYldWOUlHbHVJRlJsWVcwZ0pIdDBhR2x6TGw5ZmRHVmhiVWxrZldBcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZkR1ZoYlhNdkpIdDBhR2x6TGw5ZmRHVmhiVWxrZlM5dFpXMWlaWEp6YUdsd2N5OGtlM1Z6WlhKdVlXMWxmV0FzSUhWdVpHVm1hVzVsWkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFRmtaQ0JoSUcxbGJXSmxjaUIwYnlCMGFHVWdWR1ZoYlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDI5eVozTXZkR1ZoYlhNdkkyRmtaQzEwWldGdExXMWxiV0psY25Ob2FYQmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMWMyVnlibUZ0WlNBdElHTmhiaUJpWlNCdmJtVWdiMlk2SUdCaGJHeGdMQ0JnYldGcGJuUmhhVzVsY21Bc0lHOXlJR0J0WlcxaVpYSmdYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElGQmhjbUZ0WlhSbGNuTWdabTl5SUdGa1pHbHVaeUJoSUhSbFlXMGdiV1Z0WW1WeVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzI5d2RHbHZibk11Y205c1pUMXRaVzFpWlhKZElDMGdWR2hsSUhKdmJHVWdkR2hoZENCMGFHbHpJSFZ6WlhJZ2MyaHZkV3hrSUdoaGRtVWdhVzRnZEdobElIUmxZVzB1SUVOaGJpQmlaU0J2Ym1WY2JpQWdJQ0FxSUc5bU9pQmdiV1Z0WW1WeVlDd2diM0lnWUcxaGFXNTBZV2x1WlhKZ1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCdFpXMWlaWEp6YUdsd0lITjBZWFIxY3lCdlppQmhaR1JsWkNCMWMyVnlYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR0ZrWkUxbGJXSmxjbk5vYVhBb2RYTmxjbTVoYldVc0lHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lDQWdJQ0JzYjJjb1lFRmtaR2x1WnlCMWMyVnlJQ1I3ZFhObGNtNWhiV1Y5SUhSdklGUmxZVzBnSkh0MGFHbHpMbDlmZEdWaGJVbGtmV0FwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlZWQ2NzSUdBdmRHVmhiWE12Skh0MGFHbHpMbDlmZEdWaGJVbGtmUzl0WlcxaVpYSnphR2x3Y3k4a2UzVnpaWEp1WVcxbGZXQXNJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJIWlhRZ2NtVndieUJ0WVc1aFoyVnRaVzUwSUhOMFlYUjFjeUJtYjNJZ2RHVmhiVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMjl5WjNNdmRHVmhiWE12STNKbGJXOTJaUzEwWldGdExXMWxiV0psY25Ob2FYQmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdmQyNWxjaUF0SUU5eVoyRnVhWHBoZEdsdmJpQnVZVzFsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZ3YnlBdElGSmxjRzhnYm1GdFpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JXVnRZbVZ5YzJocGNDQnpkR0YwZFhNZ2IyWWdZV1JrWldRZ2RYTmxjbHh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JwYzAxaGJtRm5aV1JTWlhCdktHOTNibVZ5TENCeVpYQnZMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2JHOW5LR0JIWlhSMGFXNW5JSEpsY0c4Z2JXRnVZV2RsYldWdWRDQmllU0JVWldGdElDUjdkR2hwY3k1ZlgzUmxZVzFKWkgwZ1ptOXlJSEpsY0c4Z0pIdHZkMjVsY24wdkpIdHlaWEJ2ZldBcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUXlNRFJ2Y2pRd05DaGdMM1JsWVcxekx5UjdkR2hwY3k1ZlgzUmxZVzFKWkgwdmNtVndiM012Skh0dmQyNWxjbjB2Skh0eVpYQnZmV0FzSUhWdVpHVm1hVzVsWkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFRmtaQ0J2Y2lCVmNHUmhkR1VnY21Wd2J5QnRZVzVoWjJWdFpXNTBJSE4wWVhSMWN5Qm1iM0lnZEdWaGJWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyOXlaM012ZEdWaGJYTXZJMkZrWkMxdmNpMTFjR1JoZEdVdGRHVmhiUzF5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiM2R1WlhJZ0xTQlBjbWRoYm1sNllYUnBiMjRnYm1GdFpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhKbGNHOGdMU0JTWlhCdklHNWhiV1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZjSFJwYjI1eklDMGdVR0Z5WVcxbGRHVnljeUJtYjNJZ1lXUmthVzVuSUc5eUlIVndaR0YwYVc1bklISmxjRzhnYldGdVlXZGxiV1Z1ZENCbWIzSWdkR2hsSUhSbFlXMWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1d1pYSnRhWE56YVc5dVhTQXRJRlJvWlNCd1pYSnRhWE56YVc5dUlIUnZJR2R5WVc1MElIUm9aU0IwWldGdElHOXVJSFJvYVhNZ2NtVndiM05wZEc5eWVTNGdRMkZ1SUdKbElHOXVaVnh1SUNBZ0lDb2diMlk2SUdCd2RXeHNZQ3dnWUhCMWMyaGdMQ0J2Y2lCZ1lXUnRhVzVnWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J0WlcxaVpYSnphR2x3SUhOMFlYUjFjeUJ2WmlCaFpHUmxaQ0IxYzJWeVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHMWhibUZuWlZKbGNHOG9iM2R1WlhJc0lISmxjRzhzSUc5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnNiMmNvWUVGa1pHbHVaeUJ2Y2lCVmNHUmhkR2x1WnlCeVpYQnZJRzFoYm1GblpXMWxiblFnWW5rZ1ZHVmhiU0FrZTNSb2FYTXVYMTkwWldGdFNXUjlJR1p2Y2lCeVpYQnZJQ1I3YjNkdVpYSjlMeVI3Y21Wd2IzMWdLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wTWpBMGIzSTBNRFFvWUM5MFpXRnRjeThrZTNSb2FYTXVYMTkwWldGdFNXUjlMM0psY0c5ekx5UjdiM2R1WlhKOUx5UjdjbVZ3YjMxZ0xDQnZjSFJwYjI1ekxDQmpZaXdnSjFCVlZDY3BPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlGSmxiVzkyWlNCeVpYQnZJRzFoYm1GblpXMWxiblFnYzNSaGRIVnpJR1p2Y2lCMFpXRnRYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZiM0puY3k5MFpXRnRjeThqY21WdGIzWmxMWFJsWVcwdGNtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc5M2JtVnlJQzBnVDNKbllXNXBlbUYwYVc5dUlHNWhiV1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnlaWEJ2SUMwZ1VtVndieUJ1WVcxbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCdFpXMWlaWEp6YUdsd0lITjBZWFIxY3lCdlppQmhaR1JsWkNCMWMyVnlYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJSFZ1YldGdVlXZGxVbVZ3YnlodmQyNWxjaXdnY21Wd2J5d2dZMklwSUh0Y2JpQWdJQ0FnSUd4dlp5aGdVbVZ0YjNabElISmxjRzhnYldGdVlXZGxiV1Z1ZENCaWVTQlVaV0Z0SUNSN2RHaHBjeTVmWDNSbFlXMUpaSDBnWm05eUlISmxjRzhnSkh0dmQyNWxjbjB2Skh0eVpYQnZmV0FwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNReU1EUnZjalF3TkNoZ0wzUmxZVzF6THlSN2RHaHBjeTVmWDNSbFlXMUpaSDB2Y21Wd2IzTXZKSHR2ZDI1bGNuMHZKSHR5WlhCdmZXQXNJSFZ1WkdWbWFXNWxaQ3dnWTJJc0lDZEVSVXhGVkVVbktUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRVpXeGxkR1VnVkdWaGJWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyOXlaM012ZEdWaGJYTXZJMlJsYkdWMFpTMTBaV0Z0WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JSEpsY0c5emFYUnZjbWxsYzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCa1pXeGxkR1ZVWldGdEtHTmlLU0I3WEc0Z0lDQWdJQ0JzYjJjb1lFUmxiR1YwYVc1bklGUmxZVzBnSkh0MGFHbHpMbDlmZEdWaGJVbGtmV0FwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNReU1EUnZjalF3TkNoZ0wzUmxZVzF6THlSN2RHaHBjeTVmWDNSbFlXMUpaSDFnTENCMWJtUmxabWx1WldRc0lHTmlMQ0FuUkVWTVJWUkZKeWs3WEc0Z0lDQjlYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ZHVmhiVHRjYmlKZGZRPT1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRlYW0uanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxMyBNaWNoYWVsIEF1ZnJlaXRlciAoRGV2ZWxvcG1lbnQgU2VlZCkgYW5kIDIwMTYgWWFob28gSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4vKipcbiAqIFJlbmRlcnMgaHRtbCBmcm9tIE1hcmtkb3duIHRleHRcbiAqL1xudmFyIE1hcmtkb3duID0gZnVuY3Rpb24gKF9SZXF1ZXN0YWJsZSkge1xuICBfaW5oZXJpdHMoTWFya2Rvd24sIF9SZXF1ZXN0YWJsZSk7XG5cbiAgLyoqXG4gICAqIGNvbnN0cnVjdCBhIE1hcmtkb3duXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gYXV0aCAtIHRoZSBjcmVkZW50aWFscyB0byBhdXRoZW50aWNhdGUgdG8gR2l0SHViXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZV0gLSB0aGUgYmFzZSBHaXRodWIgQVBJIFVSTFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAqL1xuICBmdW5jdGlvbiBNYXJrZG93bihhdXRoLCBhcGlCYXNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hcmtkb3duKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTWFya2Rvd24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNYXJrZG93bikpLmNhbGwodGhpcywgYXV0aCwgYXBpQmFzZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBodG1sIGZyb20gTWFya2Rvd24gdGV4dC5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL21hcmtkb3duLyNyZW5kZXItYW4tYXJiaXRyYXJ5LW1hcmtkb3duLWRvY3VtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29udmVyc2lvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50ZXh0XSAtIHRoZSBtYXJrZG93biB0ZXh0IHRvIGNvbnZlcnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1vZGU9bWFya2Rvd25dIC0gY2FuIGJlIGVpdGhlciBgbWFya2Rvd25gIG9yIGBnZm1gXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb250ZXh0XSAtIHJlcG9zaXRvcnkgbmFtZSBpZiBtb2RlIGlzIGdmbVxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBjb252ZXJ0ZWQgaHRtbFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE1hcmtkb3duLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL21hcmtkb3duJywgb3B0aW9ucywgY2IsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNYXJrZG93bjtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXJrZG93bjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMWhjbXRrYjNkdUxtcHpJbDBzSW01aGJXVnpJanBiSWsxaGNtdGtiM2R1SWl3aVlYVjBhQ0lzSW1Gd2FVSmhjMlVpTENKdmNIUnBiMjV6SWl3aVkySWlMQ0pmY21WeGRXVnpkQ0lzSWxKbGNYVmxjM1JoWW14bElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dEJRVTlCT3pzN096czdPenM3T3l0bFFWQkJPenM3T3pzN08wRkJVMEU3T3p0SlFVZE5RU3hST3pzN1FVRkRTRHM3T3pzN08wRkJUVUVzYjBKQlFWbERMRWxCUVZvc1JVRkJhMEpETEU5QlFXeENMRVZCUVRKQ08wRkJRVUU3TzBGQlFVRXNLMGRCUTJ4Q1JDeEpRVVJyUWl4RlFVTmFReXhQUVVSWk8wRkJSVEZDT3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzeVFrRlZUME1zVHl4RlFVRlRReXhGTEVWQlFVazdRVUZEYWtJc1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUVUZCWkN4RlFVRnpRaXhYUVVGMFFpeEZRVUZ0UTBZc1QwRkJia01zUlVGQk5FTkRMRVZCUVRWRExFVkJRV2RFTEVsQlFXaEVMRU5CUVZBN1FVRkRSanM3T3p0RlFYWkNiVUpGTEhGQ096dEJRVEJDZGtKRExFOUJRVTlETEU5QlFWQXNSMEZCYVVKU0xGRkJRV3BDSWl3aVptbHNaU0k2SWsxaGNtdGtiM2R1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkFabWxzWlZ4dUlDb2dRR052Y0hseWFXZG9kQ0FnTWpBeE15Qk5hV05vWVdWc0lFRjFabkpsYVhSbGNpQW9SR1YyWld4dmNHMWxiblFnVTJWbFpDa2dZVzVrSURJd01UWWdXV0ZvYjI4Z1NXNWpMbHh1SUNvZ1FHeHBZMlZ1YzJVZ0lDQWdUR2xqWlc1elpXUWdkVzVrWlhJZ2UwQnNhVzVySUdoMGRIQnpPaTh2YzNCa2VDNXZjbWN2YkdsalpXNXpaWE12UWxORUxUTXRRMnhoZFhObExVTnNaV0Z5TG1oMGJXd2dRbE5FTFRNdFEyeGhkWE5sTFVOc1pXRnlmUzVjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJRWRwZEdoMVlpNXFjeUJwY3lCbWNtVmxiSGtnWkdsemRISnBZblYwWVdKc1pTNWNiaUFxTDF4dVhHNXBiWEJ2Y25RZ1VtVnhkV1Z6ZEdGaWJHVWdabkp2YlNBbkxpOVNaWEYxWlhOMFlXSnNaU2M3WEc1Y2JpOHFLbHh1SUNvZ1VtVnVaR1Z5Y3lCb2RHMXNJR1p5YjIwZ1RXRnlhMlJ2ZDI0Z2RHVjRkRnh1SUNvdlhHNWpiR0Z6Y3lCTllYSnJaRzkzYmlCbGVIUmxibVJ6SUZKbGNYVmxjM1JoWW14bElIdGNiaUFnSUM4cUtseHVJQ0FnSUNvZ1kyOXVjM1J5ZFdOMElHRWdUV0Z5YTJSdmQyNWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZWFYwYUgwZ1lYVjBhQ0F0SUhSb1pTQmpjbVZrWlc1MGFXRnNjeUIwYnlCaGRYUm9aVzUwYVdOaGRHVWdkRzhnUjJsMFNIVmlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyRndhVUpoYzJWZElDMGdkR2hsSUdKaGMyVWdSMmwwYUhWaUlFRlFTU0JWVWt4Y2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZWFYwYUN3Z1lYQnBRbUZ6WlNrZ2UxeHVJQ0FnSUNBZ2MzVndaWElvWVhWMGFDd2dZWEJwUW1GelpTazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1VtVnVaR1Z5SUdoMGJXd2dabkp2YlNCTllYSnJaRzkzYmlCMFpYaDBMbHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMjFoY210a2IzZHVMeU55Wlc1a1pYSXRZVzR0WVhKaWFYUnlZWEo1TFcxaGNtdGtiM2R1TFdSdlkzVnRaVzUwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJR052Ym5abGNuTnBiMjRnYjNCMGFXOXVjMXh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdHZjSFJwYjI1ekxuUmxlSFJkSUMwZ2RHaGxJRzFoY210a2IzZHVJSFJsZUhRZ2RHOGdZMjl1ZG1WeWRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0dmNIUnBiMjV6TG0xdlpHVTliV0Z5YTJSdmQyNWRJQzBnWTJGdUlHSmxJR1ZwZEdobGNpQmdiV0Z5YTJSdmQyNWdJRzl5SUdCblptMWdYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyOXdkR2x2Ym5NdVkyOXVkR1Y0ZEYwZ0xTQnlaWEJ2YzJsMGIzSjVJRzVoYldVZ2FXWWdiVzlrWlNCcGN5Qm5abTFjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR052Ym5abGNuUmxaQ0JvZEcxc1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lISmxibVJsY2lodmNIUnBiMjV6TENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCUFUxUW5MQ0FuTDIxaGNtdGtiM2R1Snl3Z2IzQjBhVzl1Y3l3Z1kySXNJSFJ5ZFdVcE8xeHVJQ0FnZlZ4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRTFoY210a2IzZHVPMXh1SWwxOVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFya2Rvd24uanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBjb3B5cmlnaHQgIDIwMTMgTWljaGFlbCBBdWZyZWl0ZXIgKERldmVsb3BtZW50IFNlZWQpIGFuZCAyMDE2IFlhaG9vIEluYy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBsaWNlbnNlICAgIExpY2Vuc2VkIHVuZGVyIHtAbGluayBodHRwczovL3NwZHgub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZS1DbGVhci5odG1sIEJTRC0zLUNsYXVzZS1DbGVhcn0uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICBHaXRodWIuanMgaXMgZnJlZWx5IGRpc3RyaWJ1dGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuLyoqXG4gKiBQcm9qZWN0IGVuY2Fwc3VsYXRlcyB0aGUgZnVuY3Rpb25hbGl0eSB0byBjcmVhdGUsIHF1ZXJ5LCBhbmQgbW9kaWZ5IGNhcmRzIGFuZCBjb2x1bW5zLlxuICovXG52YXIgUHJvamVjdCA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgIF9pbmhlcml0cyhQcm9qZWN0LCBfUmVxdWVzdGFibGUpO1xuXG4gICAvKipcbiAgICAqIENyZWF0ZSBhIFByb2plY3QuXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSB0aGUgaWQgb2YgdGhlIHByb2plY3RcbiAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gW2F1dGhdIC0gaW5mb3JtYXRpb24gcmVxdWlyZWQgdG8gYXV0aGVudGljYXRlIHRvIEdpdGh1YlxuICAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICAqL1xuICAgZnVuY3Rpb24gUHJvamVjdChpZCwgYXV0aCwgYXBpQmFzZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb2plY3QpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUHJvamVjdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFByb2plY3QpKS5jYWxsKHRoaXMsIGF1dGgsIGFwaUJhc2UsICdpbmVydGlhLXByZXZpZXcnKSk7XG5cbiAgICAgIF90aGlzLl9faWQgPSBpZDtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgIH1cblxuICAgLyoqXG4gICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYSBwcm9qZWN0XG4gICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvI2dldC1hLXByb2plY3RcbiAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBwcm9qZWN0IGluZm9ybWF0aW9uXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgKi9cblxuXG4gICBfY3JlYXRlQ2xhc3MoUHJvamVjdCwgW3tcbiAgICAgIGtleTogJ2dldFByb2plY3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb2plY3QoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3Byb2plY3RzLycgKyB0aGlzLl9faWQsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFZGl0IGEgcHJvamVjdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzLyN1cGRhdGUtYS1wcm9qZWN0XG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcHJvamVjdFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG1vZGlmaWVkIHByb2plY3RcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGVQcm9qZWN0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQcm9qZWN0KG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3Byb2plY3RzLycgKyB0aGlzLl9faWQsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZWxldGUgYSBwcm9qZWN0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvI2RlbGV0ZS1hLXByb2plY3RcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZGVsZXRlUHJvamVjdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUHJvamVjdChjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0RFTEVURScsICcvcHJvamVjdHMvJyArIHRoaXMuX19pZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgY29sdW1ucyBvZiBhIHByb2plY3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jb2x1bW5zLyNsaXN0LXByb2plY3QtY29sdW1uc1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBjb2x1bW5zXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFByb2plY3RDb2x1bW5zJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0UHJvamVjdENvbHVtbnMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXMoJy9wcm9qZWN0cy8nICsgdGhpcy5fX2lkICsgJy9jb2x1bW5zJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhIGNvbHVtblxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NvbHVtbnMvI2dldC1hLXByb2plY3QtY29sdW1uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sSWQgLSB0aGUgaWQgb2YgdGhlIGNvbHVtblxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGNvbHVtbiBpbmZvcm1hdGlvblxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldFByb2plY3RDb2x1bW4nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb2plY3RDb2x1bW4oY29sSWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9wcm9qZWN0cy9jb2x1bW5zLycgKyBjb2xJZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyBjb2x1bW5cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jb2x1bW5zLyNjcmVhdGUtYS1wcm9qZWN0LWNvbHVtblxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGNvbHVtblxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ld2x5IGNyZWF0ZWQgY29sdW1uXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlUHJvamVjdENvbHVtbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJvamVjdENvbHVtbihvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3Byb2plY3RzLycgKyB0aGlzLl9faWQgKyAnL2NvbHVtbnMnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRWRpdCBhIGNvbHVtblxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NvbHVtbnMvI3VwZGF0ZS1hLXByb2plY3QtY29sdW1uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sSWQgLSB0aGUgY29sdW1uIGlkXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY29sdW1uXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbW9kaWZpZWQgY29sdW1uXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlUHJvamVjdENvbHVtbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUHJvamVjdENvbHVtbihjb2xJZCwgb3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcHJvamVjdHMvY29sdW1ucy8nICsgY29sSWQsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZWxldGUgYSBjb2x1bW5cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jb2x1bW5zLyNkZWxldGUtYS1wcm9qZWN0LWNvbHVtblxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbElkIC0gdGhlIGNvbHVtbiB0byBiZSBkZWxldGVkXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSBvcGVyYXRpb24gaXMgc3VjY2Vzc2Z1bFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2RlbGV0ZVByb2plY3RDb2x1bW4nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVByb2plY3RDb2x1bW4oY29sSWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9wcm9qZWN0cy9jb2x1bW5zLycgKyBjb2xJZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE1vdmUgYSBjb2x1bW5cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jb2x1bW5zLyNtb3ZlLWEtcHJvamVjdC1jb2x1bW5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xJZCAtIHRoZSBjb2x1bW4gdG8gYmUgbW92ZWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvbiAtIGNhbiBiZSBvbmUgb2YgZmlyc3QsIGxhc3QsIG9yIGFmdGVyOjxjb2x1bW4taWQ+LFxuICAgICAgICogd2hlcmUgPGNvbHVtbi1pZD4gaXMgdGhlIGlkIHZhbHVlIG9mIGEgY29sdW1uIGluIHRoZSBzYW1lIHByb2plY3QuXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSBvcGVyYXRpb24gaXMgc3VjY2Vzc2Z1bFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ21vdmVQcm9qZWN0Q29sdW1uJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlUHJvamVjdENvbHVtbihjb2xJZCwgcG9zaXRpb24sIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcHJvamVjdHMvY29sdW1ucy8nICsgY29sSWQgKyAnL21vdmVzJywgeyBwb3NpdGlvbjogcG9zaXRpb24gfSwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgY2FyZHMgb2YgYSBwcm9qZWN0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY2FyZHMvI2xpc3QtcHJvamVjdC1jYXJkc1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBjYXJkc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RQcm9qZWN0Q2FyZHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RQcm9qZWN0Q2FyZHMoY2IpIHtcbiAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5saXN0UHJvamVjdENvbHVtbnMoKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTtcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGRhdGEubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuX3JlcXVlc3RBbGxQYWdlcygnL3Byb2plY3RzL2NvbHVtbnMvJyArIGNvbHVtbi5pZCArICcvY2FyZHMnLCBudWxsKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNhcmRzSW5Db2x1bW5zKSB7XG4gICAgICAgICAgICB2YXIgY2FyZHMgPSBjYXJkc0luQ29sdW1ucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIF9yZWYyKSB7XG4gICAgICAgICAgICAgICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG5cbiAgICAgICAgICAgICAgIHByZXYucHVzaC5hcHBseShwcmV2LCBfdG9Db25zdW1hYmxlQXJyYXkoZGF0YSkpO1xuICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9LCBbXSk7XG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgIGNiKG51bGwsIGNhcmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYXJkcztcbiAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCBjYXJkcyBvZiBhIGNvbHVtblxuICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY2FyZHMvI2xpc3QtcHJvamVjdC1jYXJkc1xuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sSWQgLSB0aGUgaWQgb2YgdGhlIGNvbHVtblxuICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGNhcmRzXG4gICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RDb2x1bW5DYXJkcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdENvbHVtbkNhcmRzKGNvbElkLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL3Byb2plY3RzL2NvbHVtbnMvJyArIGNvbElkICsgJy9jYXJkcycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhIGNhcmRcbiAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NhcmRzLyNnZXQtYS1wcm9qZWN0LWNhcmRcbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIHRoZSBpZCBvZiB0aGUgY2FyZFxuICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY2FyZCBpbmZvcm1hdGlvblxuICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRQcm9qZWN0Q2FyZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvamVjdENhcmQoY2FyZElkLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcHJvamVjdHMvY29sdW1ucy9jYXJkcy8nICsgY2FyZElkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBDcmVhdGUgYSBuZXcgY2FyZFxuICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY2FyZHMvI2NyZWF0ZS1hLXByb2plY3QtY2FyZFxuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sSWQgLSB0aGUgY29sdW1uIGlkXG4gICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBjYXJkXG4gICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBuZXdseSBjcmVhdGVkIGNhcmRcbiAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlUHJvamVjdENhcmQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3RDYXJkKGNvbElkLCBvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3Byb2plY3RzL2NvbHVtbnMvJyArIGNvbElkICsgJy9jYXJkcycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIEVkaXQgYSBjYXJkXG4gICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jYXJkcy8jdXBkYXRlLWEtcHJvamVjdC1jYXJkXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYXJkSWQgLSB0aGUgY2FyZCBpZFxuICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY2FyZFxuICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbW9kaWZpZWQgY2FyZFxuICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGVQcm9qZWN0Q2FyZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUHJvamVjdENhcmQoY2FyZElkLCBvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9wcm9qZWN0cy9jb2x1bW5zL2NhcmRzLycgKyBjYXJkSWQsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIERlbGV0ZSBhIGNhcmRcbiAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NhcmRzLyNkZWxldGUtYS1wcm9qZWN0LWNhcmRcbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIHRoZSBjYXJkIHRvIGJlIGRlbGV0ZWRcbiAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIGlzIHN1Y2Nlc3NmdWxcbiAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZGVsZXRlUHJvamVjdENhcmQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVByb2plY3RDYXJkKGNhcmRJZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3Byb2plY3RzL2NvbHVtbnMvY2FyZHMvJyArIGNhcmRJZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogTW92ZSBhIGNhcmRcbiAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NhcmRzLyNtb3ZlLWEtcHJvamVjdC1jYXJkXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYXJkSWQgLSB0aGUgY2FyZCB0byBiZSBtb3ZlZFxuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcG9zaXRpb24gLSBjYW4gYmUgb25lIG9mIHRvcCwgYm90dG9tLCBvciBhZnRlcjo8Y2FyZC1pZD4sXG4gICAgICAqIHdoZXJlIDxjYXJkLWlkPiBpcyB0aGUgaWQgdmFsdWUgb2YgYSBjYXJkIGluIHRoZSBzYW1lIHByb2plY3QuXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xJZCAtIHRoZSBpZCB2YWx1ZSBvZiBhIGNvbHVtbiBpbiB0aGUgc2FtZSBwcm9qZWN0LlxuICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSBvcGVyYXRpb24gaXMgc3VjY2Vzc2Z1bFxuICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdtb3ZlUHJvamVjdENhcmQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVQcm9qZWN0Q2FyZChjYXJkSWQsIHBvc2l0aW9uLCBjb2xJZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9wcm9qZWN0cy9jb2x1bW5zL2NhcmRzLycgKyBjYXJkSWQgKyAnL21vdmVzJywgeyBwb3NpdGlvbjogcG9zaXRpb24sIGNvbHVtbl9pZDogY29sSWQgfSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgIGNiKTtcbiAgICAgIH1cbiAgIH1dKTtcblxuICAgcmV0dXJuIFByb2plY3Q7XG59KF9SZXF1ZXN0YWJsZTMuZGVmYXVsdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsQnliMnBsWTNRdWFuTWlYU3dpYm1GdFpYTWlPbHNpVUhKdmFtVmpkQ0lzSW1sa0lpd2lZWFYwYUNJc0ltRndhVUpoYzJVaUxDSmZYMmxrSWl3aVkySWlMQ0pmY21WeGRXVnpkQ0lzSW05d2RHbHZibk1pTENKZmNtVnhkV1Z6ZEVGc2JGQmhaMlZ6SWl3aVkyOXNTV1FpTENKd2IzTnBkR2x2YmlJc0lteHBjM1JRY205cVpXTjBRMjlzZFcxdWN5SXNJblJvWlc0aUxDSmtZWFJoSWl3aVVISnZiV2x6WlNJc0ltRnNiQ0lzSW0xaGNDSXNJbU52YkhWdGJpSXNJbU5oY21SelNXNURiMngxYlc1eklpd2lZMkZ5WkhNaUxDSnlaV1IxWTJVaUxDSndjbVYySWl3aWNIVnphQ0lzSW1OaGRHTm9JaXdpWlhKeUlpd2lZMkZ5WkVsa0lpd2lZMjlzZFcxdVgybGtJaXdpVW1WeGRXVnpkR0ZpYkdVaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN08wRkJUMEU3T3pzN096czdPenM3T3pzclpVRlFRVHM3T3pzN096dEJRVk5CT3pzN1NVRkhUVUVzVHpzN08wRkJRMGc3T3pzN096dEJRVTFCTEc5Q1FVRlpReXhGUVVGYUxFVkJRV2RDUXl4SlFVRm9RaXhGUVVGelFrTXNUMEZCZEVJc1JVRkJLMEk3UVVGQlFUczdRVUZCUVN4dlNFRkRkRUpFTEVsQlJITkNMRVZCUTJoQ1F5eFBRVVJuUWl4RlFVTlFMR2xDUVVSUE96dEJRVVUxUWl4WlFVRkxReXhKUVVGTUxFZEJRVmxJTEVWQlFWbzdRVUZHTkVJN1FVRkhPVUk3TzBGQlJVUTdPenM3T3pzN096czdhVU5CVFZkSkxFVXNSVUZCU1R0QlFVTmFMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR2xDUVVGclF5eExRVUZMUml4SlFVRjJReXhGUVVFclF5eEpRVUV2UXl4RlFVRnhSRU1zUlVGQmNrUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08yOURRVTlqUlN4UExFVkJRVk5HTEVVc1JVRkJTVHRCUVVONFFpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVDBGQlpDeHBRa0ZCYjBNc1MwRkJTMFlzU1VGQmVrTXNSVUZCYVVSSExFOUJRV3BFTEVWQlFUQkVSaXhGUVVFeFJDeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3p0dlEwRk5ZMEVzUlN4RlFVRkpPMEZCUTJZc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRkZCUVdRc2FVSkJRWEZETEV0QlFVdEdMRWxCUVRGRExFVkJRV3RFTEVsQlFXeEVMRVZCUVhkRVF5eEZRVUY0UkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenQ1UTBGTmJVSkJMRVVzUlVGQlNUdEJRVU53UWl4blFrRkJUeXhMUVVGTFJ5eG5Ra0ZCVEN4blFrRkJiVU1zUzBGQlMwb3NTVUZCZUVNc1pVRkJkMFFzU1VGQmVFUXNSVUZCT0VSRExFVkJRVGxFTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenQxUTBGUGFVSkpMRXNzUlVGQlQwb3NSU3hGUVVGSk8wRkJRM3BDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZrTEhsQ1FVRXdRMGNzUzBGQk1VTXNSVUZCYlVRc1NVRkJia1FzUlVGQmVVUktMRVZCUVhwRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzd1EwRlBiMEpGTEU4c1JVRkJVMFlzUlN4RlFVRkpPMEZCUXpsQ0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhOUVVGa0xHbENRVUZ0UXl4TFFVRkxSaXhKUVVGNFF5eGxRVUYzUkVjc1QwRkJlRVFzUlVGQmFVVkdMRVZCUVdwRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzN01FTkJVVzlDU1N4TExFVkJRVTlHTEU4c1JVRkJVMFlzUlN4RlFVRkpPMEZCUTNKRExHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhQUVVGa0xIbENRVUUwUTBjc1MwRkJOVU1zUlVGQmNVUkdMRTlCUVhKRUxFVkJRVGhFUml4RlFVRTVSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdNRU5CVDI5Q1NTeExMRVZCUVU5S0xFVXNSVUZCU1R0QlFVTTFRaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1VVRkJaQ3g1UWtGQk5rTkhMRXRCUVRkRExFVkJRWE5FTEVsQlFYUkVMRVZCUVRSRVNpeEZRVUUxUkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3T3p0M1EwRlRhMEpKTEVzc1JVRkJUME1zVVN4RlFVRlZUQ3hGTEVWQlFVazdRVUZEY0VNc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVTktMRTFCUkVrc2VVSkJSV2xDUnl4TFFVWnFRaXhoUVVkS0xFVkJRVU5ETEZWQlFWVkJMRkZCUVZnc1JVRklTU3hGUVVsS1RDeEZRVXBKTEVOQlFWQTdRVUZOUmpzN1FVRkZSanM3T3pzN096czdPM1ZEUVUxclFrRXNSU3hGUVVGSk8wRkJRVUU3TzBGQlEyeENMR2RDUVVGUExFdEJRVXROTEd0Q1FVRk1MRWRCUTBwRExFbEJSRWtzUTBGRFF5eG5Ra0ZCV1R0QlFVRkJMR2RDUVVGV1F5eEpRVUZWTEZGQlFWWkJMRWxCUVZVN08wRkJRMllzYlVKQlFVOURMRkZCUVZGRExFZEJRVklzUTBGQldVWXNTMEZCUzBjc1IwRkJUQ3hEUVVGVExGVkJRVU5ETEUxQlFVUXNSVUZCV1R0QlFVTnlReXh6UWtGQlR5eFBRVUZMVkN4blFrRkJUQ3gzUWtGQk1rTlRMRTlCUVU5b1FpeEZRVUZzUkN4aFFVRTRSQ3hKUVVFNVJDeERRVUZRTzBGQlEwWXNZVUZHYTBJc1EwRkJXaXhEUVVGUU8wRkJSMFlzVlVGTVNTeEZRVXRHVnl4SlFVeEZMRU5CUzBjc1ZVRkJRMDBzWTBGQlJDeEZRVUZ2UWp0QlFVTjZRaXhuUWtGQlRVTXNVVUZCVVVRc1pVRkJaVVVzVFVGQlppeERRVUZ6UWl4VlFVRkRReXhKUVVGRUxGTkJRV3RDTzBGQlFVRXNiVUpCUVZaU0xFbEJRVlVzVTBGQlZrRXNTVUZCVlRzN1FVRkRia1JSTEc5Q1FVRkxReXhKUVVGTUxHZERRVUZoVkN4SlFVRmlPMEZCUTBFc2MwSkJRVTlSTEVsQlFWQTdRVUZEUml4aFFVaGhMRVZCUjFnc1JVRklWeXhEUVVGa08wRkJTVUVzWjBKQlFVbG9RaXhGUVVGS0xFVkJRVkU3UVVGRFRFRXNhMEpCUVVjc1NVRkJTQ3hGUVVGVFl5eExRVUZVTzBGQlEwWTdRVUZEUkN4dFFrRkJUMEVzUzBGQlVEdEJRVU5HTEZWQlpFa3NSVUZqUmtrc1MwRmtSU3hEUVdOSkxGVkJRVU5ETEVkQlFVUXNSVUZCVXp0QlFVTm1MR2RDUVVGSmJrSXNSVUZCU2l4RlFVRlJPMEZCUTB4QkxHdENRVUZIYlVJc1IwRkJTRHRCUVVOQk8wRkJRMFk3UVVGRFJDeHJRa0ZCVFVFc1IwRkJUanRCUVVOR0xGVkJjRUpKTEVOQlFWQTdRVUZ4UWtZN08wRkJSVVE3T3pzN096czdPenM3YzBOQlQyZENaaXhMTEVWQlFVOUtMRVVzUlVGQlNUdEJRVU40UWl4blFrRkJUeXhMUVVGTFJ5eG5Ra0ZCVEN4M1FrRkJNa05ETEV0QlFUTkRMR0ZCUVRCRUxFbEJRVEZFTEVWQlFXZEZTaXhGUVVGb1JTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN2NVTkJUMlZ2UWl4TkxFVkJRVkZ3UWl4RkxFVkJRVWs3UVVGRGVFSXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNLMEpCUVdkRWJVSXNUVUZCYUVRc1JVRkJNRVFzU1VGQk1VUXNSVUZCWjBWd1FpeEZRVUZvUlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3TzNkRFFWRnJRa2tzU3l4RlFVRlBSaXhQTEVWQlFWTkdMRVVzUlVGQlNUdEJRVU51UXl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUVUZCWkN4NVFrRkJNa05ITEV0QlFUTkRMR0ZCUVRCRVJpeFBRVUV4UkN4RlFVRnRSVVlzUlVGQmJrVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096dDNRMEZSYTBKdlFpeE5MRVZCUVZGc1FpeFBMRVZCUVZOR0xFVXNSVUZCU1R0QlFVTndReXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1QwRkJaQ3dyUWtGQmEwUnRRaXhOUVVGc1JDeEZRVUUwUkd4Q0xFOUJRVFZFTEVWQlFYRkZSaXhGUVVGeVJTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN2QwTkJUMnRDYjBJc1RTeEZRVUZSY0VJc1JTeEZRVUZKTzBGQlF6TkNMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4UlFVRmtMQ3RDUVVGdFJHMUNMRTFCUVc1RUxFVkJRVFpFTEVsQlFUZEVMRVZCUVcxRmNFSXNSVUZCYmtVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3pzN08zTkRRVlZuUW05Q0xFMHNSVUZCVVdZc1VTeEZRVUZWUkN4TExFVkJRVTlLTEVVc1JVRkJTVHRCUVVNeFF5eG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRMG9zVFVGRVNTd3JRa0ZGZFVKdFFpeE5RVVoyUWl4aFFVZEtMRVZCUVVObUxGVkJRVlZCTEZGQlFWZ3NSVUZCY1VKblFpeFhRVUZYYWtJc1MwRkJhRU1zUlVGSVNTeEZRVWR2UXp0QlFVTjRRMG9zVjBGS1NTeERRVUZRTzBGQlRVWTdPenM3UlVFMVRtdENjMElzY1VJN08wRkJLMDUwUWtNc1QwRkJUME1zVDBGQlVDeEhRVUZwUWpkQ0xFOUJRV3BDSWl3aVptbHNaU0k2SWxCeWIycGxZM1F1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFQm1hV3hsWEc0Z0tpQkFZMjl3ZVhKcFoyaDBJQ0F5TURFeklFMXBZMmhoWld3Z1FYVm1jbVZwZEdWeUlDaEVaWFpsYkc5d2JXVnVkQ0JUWldWa0tTQmhibVFnTWpBeE5pQlpZV2h2YnlCSmJtTXVYRzRnS2lCQWJHbGpaVzV6WlNBZ0lDQk1hV05sYm5ObFpDQjFibVJsY2lCN1FHeHBibXNnYUhSMGNITTZMeTl6Y0dSNExtOXlaeTlzYVdObGJuTmxjeTlDVTBRdE15MURiR0YxYzJVdFEyeGxZWEl1YUhSdGJDQkNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSjlMbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdSMmwwYUhWaUxtcHpJR2x6SUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJoWW14bExseHVJQ292WEc1Y2JtbHRjRzl5ZENCU1pYRjFaWE4wWVdKc1pTQm1jbTl0SUNjdUwxSmxjWFZsYzNSaFlteGxKenRjYmx4dUx5b3FYRzRnS2lCUWNtOXFaV04wSUdWdVkyRndjM1ZzWVhSbGN5QjBhR1VnWm5WdVkzUnBiMjVoYkdsMGVTQjBieUJqY21WaGRHVXNJSEYxWlhKNUxDQmhibVFnYlc5a2FXWjVJR05oY21SeklHRnVaQ0JqYjJ4MWJXNXpMbHh1SUNvdlhHNWpiR0Z6Y3lCUWNtOXFaV04wSUdWNGRHVnVaSE1nVW1WeGRXVnpkR0ZpYkdVZ2UxeHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGNtVmhkR1VnWVNCUWNtOXFaV04wTGx4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUMwZ2RHaGxJR2xrSUc5bUlIUm9aU0J3Y205cVpXTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbUYxZEdoOUlGdGhkWFJvWFNBdElHbHVabTl5YldGMGFXOXVJSEpsY1hWcGNtVmtJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSb2RXSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYllYQnBRbUZ6WlQxb2RIUndjem92TDJGd2FTNW5hWFJvZFdJdVkyOXRYU0F0SUhSb1pTQmlZWE5sSUVkcGRHaDFZaUJCVUVrZ1ZWSk1YRzRnSUNBZ0tpOWNiaUFnSUdOdmJuTjBjblZqZEc5eUtHbGtMQ0JoZFhSb0xDQmhjR2xDWVhObEtTQjdYRzRnSUNBZ0lDQnpkWEJsY2loaGRYUm9MQ0JoY0dsQ1lYTmxMQ0FuYVc1bGNuUnBZUzF3Y21WMmFXVjNKeWs3WEc0Z0lDQWdJQ0IwYUdsekxsOWZhV1FnUFNCcFpEdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCSFpYUWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdZU0J3Y205cVpXTjBYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSEp2YW1WamRITXZJMmRsZEMxaExYQnliMnBsWTNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J3Y205cVpXTjBJR2x1Wm05eWJXRjBhVzl1WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRGQnliMnBsWTNRb1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNCeWIycGxZM1J6THlSN2RHaHBjeTVmWDJsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkZaR2wwSUdFZ2NISnZhbVZqZEZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNCeWIycGxZM1J6THlOMWNHUmhkR1V0WVMxd2NtOXFaV04wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJSFJvWlNCa1pYTmpjbWx3ZEdsdmJpQnZaaUIwYUdVZ2NISnZhbVZqZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJRzF2WkdsbWFXVmtJSEJ5YjJwbFkzUmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdkWEJrWVhSbFVISnZhbVZqZENodmNIUnBiMjV6TENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCQlZFTklKeXdnWUM5d2NtOXFaV04wY3k4a2UzUm9hWE11WDE5cFpIMWdMQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUkdWc1pYUmxJR0VnY0hKdmFtVmpkRnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0J5YjJwbFkzUnpMeU5rWld4bGRHVXRZUzF3Y205cVpXTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwY25WbElHbG1JSFJvWlNCdmNHVnlZWFJwYjI0Z2FYTWdjM1ZqWTJWemMyWjFiRnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JrWld4bGRHVlFjbTlxWldOMEtHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblJFVk1SVlJGSnl3Z1lDOXdjbTlxWldOMGN5OGtlM1JvYVhNdVgxOXBaSDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElHRnNiQ0JqYjJ4MWJXNXpJRzltSUdFZ2NISnZhbVZqZEZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNCeWIycGxZM1J6TDJOdmJIVnRibk12STJ4cGMzUXRjSEp2YW1WamRDMWpiMngxYlc1elhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUdOdmJIVnRibk5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRGQnliMnBsWTNSRGIyeDFiVzV6S0dOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkRUZzYkZCaFoyVnpLR0F2Y0hKdmFtVmpkSE12Skh0MGFHbHpMbDlmYVdSOUwyTnZiSFZ0Ym5OZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1IyVjBJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJR0VnWTI5c2RXMXVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSEp2YW1WamRITXZZMjlzZFcxdWN5OGpaMlYwTFdFdGNISnZhbVZqZEMxamIyeDFiVzVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmpiMnhKWkNBdElIUm9aU0JwWkNCdlppQjBhR1VnWTI5c2RXMXVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ1kyOXNkVzF1SUdsdVptOXliV0YwYVc5dVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRkJ5YjJwbFkzUkRiMngxYlc0b1kyOXNTV1FzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzl3Y205cVpXTjBjeTlqYjJ4MWJXNXpMeVI3WTI5c1NXUjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCamIyeDFiVzVjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl3Y205cVpXTjBjeTlqYjJ4MWJXNXpMeU5qY21WaGRHVXRZUzF3Y205cVpXTjBMV052YkhWdGJseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nTFNCMGFHVWdaR1Z6WTNKcGNIUnBiMjRnYjJZZ2RHaGxJR052YkhWdGJseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUc1bGQyeDVJR055WldGMFpXUWdZMjlzZFcxdVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHTnlaV0YwWlZCeWIycGxZM1JEYjJ4MWJXNG9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFUMU5VSnl3Z1lDOXdjbTlxWldOMGN5OGtlM1JvYVhNdVgxOXBaSDB2WTI5c2RXMXVjMkFzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRlpHbDBJR0VnWTI5c2RXMXVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSEp2YW1WamRITXZZMjlzZFcxdWN5OGpkWEJrWVhSbExXRXRjSEp2YW1WamRDMWpiMngxYlc1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JqYjJ4SlpDQXRJSFJvWlNCamIyeDFiVzRnYVdSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnZEdobElHUmxjMk55YVhCMGFXOXVJRzltSUhSb1pTQmpiMngxYlc1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J0YjJScFptbGxaQ0JqYjJ4MWJXNWNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdkWEJrWVhSbFVISnZhbVZqZEVOdmJIVnRiaWhqYjJ4SlpDd2diM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZjSEp2YW1WamRITXZZMjlzZFcxdWN5OGtlMk52YkVsa2ZXQXNJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJFWld4bGRHVWdZU0JqYjJ4MWJXNWNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXdjbTlxWldOMGN5OWpiMngxYlc1ekx5TmtaV3hsZEdVdFlTMXdjbTlxWldOMExXTnZiSFZ0Ymx4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR052YkVsa0lDMGdkR2hsSUdOdmJIVnRiaUIwYnlCaVpTQmtaV3hsZEdWa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBjblZsSUdsbUlIUm9aU0J2Y0dWeVlYUnBiMjRnYVhNZ2MzVmpZMlZ6YzJaMWJGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmtaV3hsZEdWUWNtOXFaV04wUTI5c2RXMXVLR052YkVsa0xDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owUkZURVZVUlNjc0lHQXZjSEp2YW1WamRITXZZMjlzZFcxdWN5OGtlMk52YkVsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk5iM1psSUdFZ1kyOXNkVzF1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y0hKdmFtVmpkSE12WTI5c2RXMXVjeThqYlc5MlpTMWhMWEJ5YjJwbFkzUXRZMjlzZFcxdVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWTI5c1NXUWdMU0IwYUdVZ1kyOXNkVzF1SUhSdklHSmxJRzF2ZG1Wa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0c5emFYUnBiMjRnTFNCallXNGdZbVVnYjI1bElHOW1JR1pwY25OMExDQnNZWE4wTENCdmNpQmhablJsY2pvOFkyOXNkVzF1TFdsa1BpeGNiaUFnSUNBcUlIZG9aWEpsSUR4amIyeDFiVzR0YVdRK0lHbHpJSFJvWlNCcFpDQjJZV3gxWlNCdlppQmhJR052YkhWdGJpQnBiaUIwYUdVZ2MyRnRaU0J3Y205cVpXTjBMbHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEhKMVpTQnBaaUIwYUdVZ2IzQmxjbUYwYVc5dUlHbHpJSE4xWTJObGMzTm1kV3hjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYlc5MlpWQnliMnBsWTNSRGIyeDFiVzRvWTI5c1NXUXNJSEJ2YzJsMGFXOXVMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9YRzRnSUNBZ0lDQWdJQ0FuVUU5VFZDY3NYRzRnSUNBZ0lDQWdJQ0JnTDNCeWIycGxZM1J6TDJOdmJIVnRibk12Skh0amIyeEpaSDB2Ylc5MlpYTmdMRnh1SUNBZ0lDQWdJQ0FnZTNCdmMybDBhVzl1T2lCd2IzTnBkR2x2Ym4wc1hHNGdJQ0FnSUNBZ0lDQmpZbHh1SUNBZ0lDQWdLVHRjYmlBZ0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJR0ZzYkNCallYSmtjeUJ2WmlCaElIQnliMnBsWTNSY2JpQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNCeWIycGxZM1J6TDJOaGNtUnpMeU5zYVhOMExYQnliMnBsWTNRdFkyRnlaSE5jYmlBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQmpZWEprYzF4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBcUwxeHVJQ0FnYkdsemRGQnliMnBsWTNSRFlYSmtjeWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViR2x6ZEZCeWIycGxZM1JEYjJ4MWJXNXpLQ2xjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9LSHRrWVhSaGZTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1aGJHd29aR0YwWVM1dFlYQW9LR052YkhWdGJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZEVGc2JGQmhaMlZ6S0dBdmNISnZhbVZqZEhNdlkyOXNkVzF1Y3k4a2UyTnZiSFZ0Ymk1cFpIMHZZMkZ5WkhOZ0xDQnVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNCOUtTNTBhR1Z1S0NoallYSmtjMGx1UTI5c2RXMXVjeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmpZWEprY3lBOUlHTmhjbVJ6U1c1RGIyeDFiVzV6TG5KbFpIVmpaU2dvY0hKbGRpd2dlMlJoZEdGOUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhZdWNIVnphQ2d1TGk1a1lYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaWFk3WEc0Z0lDQWdJQ0FnSUNBZ0lIMHNJRnRkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmlLRzUxYkd3c0lHTmhjbVJ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGeVpITTdYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LQ2hsY25JcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05pS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaUtHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCbGNuSTdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDb2dSMlYwSUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUdGc2JDQmpZWEprY3lCdlppQmhJR052YkhWdGJseHVJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNISnZhbVZqZEhNdlkyRnlaSE12STJ4cGMzUXRjSEp2YW1WamRDMWpZWEprYzF4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjlzU1dRZ0xTQjBhR1VnYVdRZ2IyWWdkR2hsSUdOdmJIVnRibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlHTmhjbVJ6WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNvdlhHNGdJQ0JzYVhOMFEyOXNkVzF1UTJGeVpITW9ZMjlzU1dRc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZEVGc2JGQmhaMlZ6S0dBdmNISnZhbVZqZEhNdlkyOXNkVzF1Y3k4a2UyTnZiRWxrZlM5allYSmtjMkFzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQXFJRWRsZENCcGJtWnZjbTFoZEdsdmJpQmhZbTkxZENCaElHTmhjbVJjYmlBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0J5YjJwbFkzUnpMMk5oY21Sekx5Tm5aWFF0WVMxd2NtOXFaV04wTFdOaGNtUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdOaGNtUkpaQ0F0SUhSb1pTQnBaQ0J2WmlCMGFHVWdZMkZ5WkZ4dUlDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdZMkZ5WkNCcGJtWnZjbTFoZEdsdmJseHVJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQXFMMXh1SUNBZ1oyVjBVSEp2YW1WamRFTmhjbVFvWTJGeVpFbGtMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjSEp2YW1WamRITXZZMjlzZFcxdWN5OWpZWEprY3k4a2UyTmhjbVJKWkgxZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1VnWVNCdVpYY2dZMkZ5WkZ4dUlDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y0hKdmFtVmpkSE12WTJGeVpITXZJMk55WldGMFpTMWhMWEJ5YjJwbFkzUXRZMkZ5WkZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjlzU1dRZ0xTQjBhR1VnWTI5c2RXMXVJR2xrWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdkR2hsSUdSbGMyTnlhWEIwYVc5dUlHOW1JSFJvWlNCallYSmtYRzRnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCdVpYZHNlU0JqY21WaGRHVmtJR05oY21SY2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0tpOWNiaUFnSUdOeVpXRjBaVkJ5YjJwbFkzUkRZWEprS0dOdmJFbGtMQ0J2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQmdMM0J5YjJwbFkzUnpMMk52YkhWdGJuTXZKSHRqYjJ4SlpIMHZZMkZ5WkhOZ0xDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0tpQkZaR2wwSUdFZ1kyRnlaRnh1SUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSEp2YW1WamRITXZZMkZ5WkhNdkkzVndaR0YwWlMxaExYQnliMnBsWTNRdFkyRnlaRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1kyRnlaRWxrSUMwZ2RHaGxJR05oY21RZ2FXUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nTFNCMGFHVWdaR1Z6WTNKcGNIUnBiMjRnYjJZZ2RHaGxJR05oY21SY2JpQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJRzF2WkdsbWFXVmtJR05oY21SY2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0tpOWNiaUFnSUhWd1pHRjBaVkJ5YjJwbFkzUkRZWEprS0dOaGNtUkpaQ3dnYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRUVZSRFNDY3NJR0F2Y0hKdmFtVmpkSE12WTI5c2RXMXVjeTlqWVhKa2N5OGtlMk5oY21SSlpIMWdMQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdLaUJFWld4bGRHVWdZU0JqWVhKa1hHNGdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5d2NtOXFaV04wY3k5allYSmtjeThqWkdWc1pYUmxMV0V0Y0hKdmFtVmpkQzFqWVhKa1hHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JqWVhKa1NXUWdMU0IwYUdVZ1kyRnlaQ0IwYnlCaVpTQmtaV3hsZEdWa1hHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUnlkV1VnYVdZZ2RHaGxJRzl3WlhKaGRHbHZiaUJwY3lCemRXTmpaWE56Wm5Wc1hHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDb3ZYRzRnSUNCa1pXeGxkR1ZRY205cVpXTjBRMkZ5WkNoallYSmtTV1FzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUkVWTVJWUkZKeXdnWUM5d2NtOXFaV04wY3k5amIyeDFiVzV6TDJOaGNtUnpMeVI3WTJGeVpFbGtmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQXFJRTF2ZG1VZ1lTQmpZWEprWEc0Z0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl3Y205cVpXTjBjeTlqWVhKa2N5OGpiVzkyWlMxaExYQnliMnBsWTNRdFkyRnlaRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1kyRnlaRWxrSUMwZ2RHaGxJR05oY21RZ2RHOGdZbVVnYlc5MlpXUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCdmMybDBhVzl1SUMwZ1kyRnVJR0psSUc5dVpTQnZaaUIwYjNBc0lHSnZkSFJ2YlN3Z2IzSWdZV1owWlhJNlBHTmhjbVF0YVdRK0xGeHVJQ0FnS2lCM2FHVnlaU0E4WTJGeVpDMXBaRDRnYVhNZ2RHaGxJR2xrSUhaaGJIVmxJRzltSUdFZ1kyRnlaQ0JwYmlCMGFHVWdjMkZ0WlNCd2NtOXFaV04wTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjlzU1dRZ0xTQjBhR1VnYVdRZ2RtRnNkV1VnYjJZZ1lTQmpiMngxYlc0Z2FXNGdkR2hsSUhOaGJXVWdjSEp2YW1WamRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnYjNCbGNtRjBhVzl1SUdseklITjFZMk5sYzNObWRXeGNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdLaTljYmlBZ0lHMXZkbVZRY205cVpXTjBRMkZ5WkNoallYSmtTV1FzSUhCdmMybDBhVzl1TENCamIyeEpaQ3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLRnh1SUNBZ0lDQWdJQ0FnSjFCUFUxUW5MRnh1SUNBZ0lDQWdJQ0FnWUM5d2NtOXFaV04wY3k5amIyeDFiVzV6TDJOaGNtUnpMeVI3WTJGeVpFbGtmUzl0YjNabGMyQXNYRzRnSUNBZ0lDQWdJQ0I3Y0c5emFYUnBiMjQ2SUhCdmMybDBhVzl1TENCamIyeDFiVzVmYVdRNklHTnZiRWxrZlN3Z0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0JqWVcxbGJHTmhjMlZjYmlBZ0lDQWdJQ0FnSUdOaVhHNGdJQ0FnSUNBcE8xeHVJQ0FnZlZ4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkJ5YjJwbFkzUTdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJvamVjdC5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFsbDtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFsbCgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbGlkYXRvcnMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICB2YWxpZGF0b3JzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgZnVuY3Rpb24gYWxsUHJvcFR5cGVzKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIHZhbGlkYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdG9yKSB7XG4gICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB2YWxpZGF0b3IuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICBlcnJvciA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMi5kZWZhdWx0KShhbGxQcm9wVHlwZXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXNcIik7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnZhbHVlcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5lbnRyaWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSk7XG5cbnZhciBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBocmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgb25LZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICByb2xlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICB0YWJJbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiB0aGlzIGlzIHNvcnQgb2Ygc2lsbHkgYnV0IG5lZWRlZCBmb3IgQnV0dG9uXG4gICAqL1xuICBjb21wb25lbnRDbGFzczogX2VsZW1lbnRUeXBlLmRlZmF1bHRcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2EnXG59O1xuXG5mdW5jdGlvbiBpc1RyaXZpYWxIcmVmKGhyZWYpIHtcbiAgcmV0dXJuICFocmVmIHx8IGhyZWYudHJpbSgpID09PSAnIyc7XG59XG4vKipcbiAqIFRoZXJlIGFyZSBzaXR1YXRpb25zIGR1ZSB0byBicm93c2VyIHF1aXJrcyBvciBCb290c3RyYXAgQ1NTIHdoZXJlXG4gKiBhbiBhbmNob3IgdGFnIGlzIG5lZWRlZCwgd2hlbiBzZW1hbnRpY2FsbHkgYSBidXR0b24gdGFnIGlzIHRoZVxuICogYmV0dGVyIGNob2ljZS4gU2FmZUFuY2hvciBlbnN1cmVzIHRoYXQgd2hlbiBhbiBhbmNob3IgaXMgdXNlZCBsaWtlIGFcbiAqIGJ1dHRvbiBpdHMgYWNjZXNzaWJsZS4gSXQgYWxzbyBlbXVsYXRlcyBpbnB1dCBgZGlzYWJsZWRgIGJlaGF2aW9yIGZvclxuICogbGlua3MsIHdoaWNoIGlzIHVzdWFsbHkgZGVzaXJhYmxlIGZvciBCdXR0b25zLCBOYXZJdGVtcywgTWVudUl0ZW1zLCBldGMuXG4gKi9cblxuXG52YXIgU2FmZUFuY2hvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFNhZmVBbmNob3IsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNhZmVBbmNob3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gX3RoaXMuaGFuZGxlS2V5RG93bi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNhZmVBbmNob3IucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgaHJlZiA9IF90aGlzJHByb3BzLmhyZWYsXG4gICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrO1xuXG4gICAgaWYgKGRpc2FibGVkIHx8IGlzVHJpdmlhbEhyZWYoaHJlZikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuaGFuZGxlQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wczIuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wczIub25LZXlEb3duLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMyLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcImRpc2FibGVkXCIsIFwib25LZXlEb3duXCJdKTtcblxuICAgIGlmIChpc1RyaXZpYWxIcmVmKHByb3BzLmhyZWYpKSB7XG4gICAgICBwcm9wcy5yb2xlID0gcHJvcHMucm9sZSB8fCAnYnV0dG9uJzsgLy8gd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgYSBocmVmIGF0dHJpYnV0ZSBvbiB0aGUgbm9kZVxuICAgICAgLy8gb3RoZXJ3aXNlLCB0aGUgY3Vyc29yIGluY29ycmVjdGx5IHN0eWxlZCAoZXhjZXB0IHdpdGggcm9sZT0nYnV0dG9uJylcblxuICAgICAgcHJvcHMuaHJlZiA9IHByb3BzLmhyZWYgfHwgJyMnO1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgcHJvcHMudGFiSW5kZXggPSAtMTtcbiAgICAgIHByb3BzLnN0eWxlID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgICAgfSwgcHJvcHMuc3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICBvbktleURvd246ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKHRoaXMuaGFuZGxlS2V5RG93biwgb25LZXlEb3duKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU2FmZUFuY2hvcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuU2FmZUFuY2hvci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5TYWZlQW5jaG9yLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBfZGVmYXVsdCA9IFNhZmVBbmNob3I7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIik7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICByZXR1cm4gJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG59O1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKSB7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgX1N5bWJvbCRpdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9TeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIF9TeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX1N5bWJvbCRpdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBfU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfU3ltYm9sICYmIG9iaiAhPT0gX1N5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIik7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3dlYWstbWFwXCIpOyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5XZWFrTWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgaWYgKCFERVNDUklQVE9SUyB8fCB0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FLCAnX2MnKTtcbiAgICAgIHRhcmdldC5fYyA9IG5ldyBCYXNlKCk7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0YXJnZXRbQURERVJdLCB0YXJnZXQpO1xuICAgIH0pO1xuICAgIGVhY2goJ2FkZCxjbGVhcixkZWxldGUsZm9yRWFjaCxnZXQsaGFzLHNldCxrZXlzLHZhbHVlcyxlbnRyaWVzLHRvSlNPTicuc3BsaXQoJywnKSwgZnVuY3Rpb24gKEtFWSkge1xuICAgICAgdmFyIElTX0FEREVSID0gS0VZID09ICdhZGQnIHx8IEtFWSA9PSAnc2V0JztcbiAgICAgIGlmIChLRVkgaW4gcHJvdG8gJiYgIShJU19XRUFLICYmIEtFWSA9PSAnY2xlYXInKSkgaGlkZShDLnByb3RvdHlwZSwgS0VZLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsIEtFWSk7XG4gICAgICAgIGlmICghSVNfQURERVIgJiYgSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkpIHJldHVybiBLRVkgPT0gJ2dldCcgPyB1bmRlZmluZWQgOiBmYWxzZTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NbS0VZXShhID09PSAwID8gMCA6IGEsIGIpO1xuICAgICAgICByZXR1cm4gSVNfQURERVIgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgSVNfV0VBSyB8fCBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Muc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha01hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvaXMtYXJyYXlcIik7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmlzQXJyYXk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9PdmVybGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtb3ZlcmxheXMvbGliL092ZXJsYXlcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX0ZhZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ZhZGVcIikpO1xuXG52YXIgcHJvcFR5cGVzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX092ZXJsYXkuZGVmYXVsdC5wcm9wVHlwZXMsIHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgT3ZlcmxheVxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgb3ZlcmxheSBzaG91bGQgdHJpZ2dlciBvbkhpZGUgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBpbnZva2VkIGJ5IHRoZSBvdmVybGF5IHdoZW4gaXQgd2lzaGVzIHRvIGJlIGhpZGRlbi4gUmVxdWlyZWQgaWZcbiAgICogYHJvb3RDbG9zZWAgaXMgc3BlY2lmaWVkLlxuICAgKi9cbiAgb25IaWRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVXNlIGFuaW1hdGlvblxuICAgKi9cbiAgYW5pbWF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX2VsZW1lbnRUeXBlLmRlZmF1bHRdKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBPdmVybGF5IHRyYW5zaXRpb25zIGluXG4gICAqL1xuICBvbkVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE92ZXJsYXkgYmVnaW5zIHRvIHRyYW5zaXRpb24gaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgT3ZlcmxheSBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIGluXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCByaWdodCBiZWZvcmUgdGhlIE92ZXJsYXkgdHJhbnNpdGlvbnMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBPdmVybGF5IGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgb3V0XG4gICAqL1xuICBvbkV4aXRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgT3ZlcmxheS5cbiAgICovXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10pXG59KTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFuaW1hdGlvbjogX0ZhZGUuZGVmYXVsdCxcbiAgcm9vdENsb3NlOiBmYWxzZSxcbiAgc2hvdzogZmFsc2UsXG4gIHBsYWNlbWVudDogJ3JpZ2h0J1xufTtcblxudmFyIE92ZXJsYXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShPdmVybGF5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBPdmVybGF5KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBPdmVybGF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFuaW1hdGlvbiA9IF90aGlzJHByb3BzLmFuaW1hdGlvbixcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJhbmltYXRpb25cIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgdmFyIHRyYW5zaXRpb24gPSBhbmltYXRpb24gPT09IHRydWUgPyBfRmFkZS5kZWZhdWx0IDogYW5pbWF0aW9uIHx8IG51bGw7XG4gICAgdmFyIGNoaWxkO1xuXG4gICAgaWYgKCF0cmFuc2l0aW9uKSB7XG4gICAgICBjaGlsZCA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZHJlbiwge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsICdpbicpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfT3ZlcmxheS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvblxuICAgIH0pLCBjaGlsZCk7XG4gIH07XG5cbiAgcmV0dXJuIE92ZXJsYXk7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk92ZXJsYXkucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuT3ZlcmxheS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgX2RlZmF1bHQgPSBPdmVybGF5O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZScpO1xuXG52YXIgX2VsZW1lbnRUeXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VsZW1lbnRUeXBlKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX1BvcnRhbCA9IHJlcXVpcmUoJy4vUG9ydGFsJyk7XG5cbnZhciBfUG9ydGFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvcnRhbCk7XG5cbnZhciBfUG9zaXRpb24gPSByZXF1aXJlKCcuL1Bvc2l0aW9uJyk7XG5cbnZhciBfUG9zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9zaXRpb24pO1xuXG52YXIgX1Jvb3RDbG9zZVdyYXBwZXIgPSByZXF1aXJlKCcuL1Jvb3RDbG9zZVdyYXBwZXInKTtcblxudmFyIF9Sb290Q2xvc2VXcmFwcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Jvb3RDbG9zZVdyYXBwZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBCdWlsdCBvbiB0b3Agb2YgYDxQb3NpdGlvbi8+YCBhbmQgYDxQb3J0YWwvPmAsIHRoZSBvdmVybGF5IGNvbXBvbmVudCBpcyBncmVhdCBmb3IgY3VzdG9tIHRvb2x0aXAgb3ZlcmxheXMuXG4gKi9cbnZhciBPdmVybGF5ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE92ZXJsYXksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE92ZXJsYXkocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3ZlcmxheSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmhhbmRsZUhpZGRlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgZXhpdGVkOiB0cnVlIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICAgIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vbkV4aXRlZC5hcHBseShfdGhpcyRwcm9wcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7IGV4aXRlZDogIXByb3BzLnNob3cgfTtcbiAgICBfdGhpcy5vbkhpZGRlbkxpc3RlbmVyID0gX3RoaXMuaGFuZGxlSGlkZGVuLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIE92ZXJsYXkucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXhpdGVkOiBmYWxzZSB9KTtcbiAgICB9IGVsc2UgaWYgKCFuZXh0UHJvcHMudHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGxldCBoYW5kbGVIaWRkZW4gdGFrZSBjYXJlIG9mIG1hcmtpbmcgZXhpdGVkLlxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4aXRlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgT3ZlcmxheS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjb250YWluZXIgPSBfcHJvcHMuY29udGFpbmVyLFxuICAgICAgICBjb250YWluZXJQYWRkaW5nID0gX3Byb3BzLmNvbnRhaW5lclBhZGRpbmcsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcy50YXJnZXQsXG4gICAgICAgIHBsYWNlbWVudCA9IF9wcm9wcy5wbGFjZW1lbnQsXG4gICAgICAgIHNob3VsZFVwZGF0ZVBvc2l0aW9uID0gX3Byb3BzLnNob3VsZFVwZGF0ZVBvc2l0aW9uLFxuICAgICAgICByb290Q2xvc2UgPSBfcHJvcHMucm9vdENsb3NlLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgVHJhbnNpdGlvbiA9IF9wcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29udGFpbmVyJywgJ2NvbnRhaW5lclBhZGRpbmcnLCAndGFyZ2V0JywgJ3BsYWNlbWVudCcsICdzaG91bGRVcGRhdGVQb3NpdGlvbicsICdyb290Q2xvc2UnLCAnY2hpbGRyZW4nLCAndHJhbnNpdGlvbiddKTtcblxuICAgIC8vIERvbid0IHVuLXJlbmRlciB0aGUgb3ZlcmxheSB3aGlsZSBpdCdzIHRyYW5zaXRpb25pbmcgb3V0LlxuXG5cbiAgICB2YXIgbW91bnRPdmVybGF5ID0gcHJvcHMuc2hvdyB8fCBUcmFuc2l0aW9uICYmICF0aGlzLnN0YXRlLmV4aXRlZDtcbiAgICBpZiAoIW1vdW50T3ZlcmxheSkge1xuICAgICAgLy8gRG9uJ3QgYm90aGVyIHNob3dpbmcgYW55dGhpbmcgaWYgd2UgZG9uJ3QgaGF2ZSB0by5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuO1xuXG4gICAgLy8gUG9zaXRpb24gaXMgYmUgaW5uZXItbW9zdCBiZWNhdXNlIGl0IGFkZHMgaW5saW5lIHN0eWxlcyBpbnRvIHRoZSBjaGlsZCxcbiAgICAvLyB3aGljaCB0aGUgb3RoZXIgd3JhcHBlcnMgZG9uJ3QgZm9yd2FyZCBjb3JyZWN0bHkuXG4gICAgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIF9Qb3NpdGlvbjIuZGVmYXVsdCxcbiAgICAgIHsgY29udGFpbmVyOiBjb250YWluZXIsIGNvbnRhaW5lclBhZGRpbmc6IGNvbnRhaW5lclBhZGRpbmcsIHRhcmdldDogdGFyZ2V0LCBwbGFjZW1lbnQ6IHBsYWNlbWVudCwgc2hvdWxkVXBkYXRlUG9zaXRpb246IHNob3VsZFVwZGF0ZVBvc2l0aW9uIH0sXG4gICAgICBjaGlsZFxuICAgICk7XG5cbiAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgdmFyIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkO1xuXG4gICAgICAvLyBUaGlzIGFuaW1hdGVzIHRoZSBjaGlsZCBub2RlIGJ5IGluamVjdGluZyBwcm9wcywgc28gaXQgbXVzdCBwcmVjZWRlXG4gICAgICAvLyBhbnl0aGluZyB0aGF0IGFkZHMgYSB3cmFwcGluZyBkaXYuXG5cbiAgICAgIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRyYW5zaXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICAnaW4nOiBwcm9wcy5zaG93LFxuICAgICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgICBvbkV4aXRlZDogdGhpcy5vbkhpZGRlbkxpc3RlbmVyLFxuICAgICAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgICAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZFxuICAgICAgICB9LFxuICAgICAgICBjaGlsZFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGdvZXMgYWZ0ZXIgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgYWRkcyBhIHdyYXBwaW5nIGRpdi5cbiAgICBpZiAocm9vdENsb3NlKSB7XG4gICAgICBjaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfUm9vdENsb3NlV3JhcHBlcjIuZGVmYXVsdCxcbiAgICAgICAge1xuICAgICAgICAgIG9uUm9vdENsb3NlOiBwcm9wcy5vbkhpZGUsXG4gICAgICAgICAgZXZlbnQ6IHByb3BzLnJvb3RDbG9zZUV2ZW50XG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIF9Qb3J0YWwyLmRlZmF1bHQsXG4gICAgICB7IGNvbnRhaW5lcjogY29udGFpbmVyIH0sXG4gICAgICBjaGlsZFxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE92ZXJsYXk7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5PdmVybGF5LnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBfUG9ydGFsMi5kZWZhdWx0LnByb3BUeXBlcywgX1Bvc2l0aW9uMi5kZWZhdWx0LnByb3BUeXBlcywge1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIE92ZXJsYXlcbiAgICovXG4gIHNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIHRoZSBvdmVybGF5IHNob3VsZCB0cmlnZ2VyIGBvbkhpZGVgIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG91dHNpZGUgdGhlIG92ZXJsYXlcbiAgICovXG4gIHJvb3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IGV2ZW50IGZvciB0b2dnbGluZyBvdmVybGF5XG4gICAqL1xuICByb290Q2xvc2VFdmVudDogX1Jvb3RDbG9zZVdyYXBwZXIyLmRlZmF1bHQucHJvcFR5cGVzLmV2ZW50LFxuXG4gIC8qKlxuICAgKiBBIENhbGxiYWNrIGZpcmVkIGJ5IHRoZSBPdmVybGF5IHdoZW4gaXQgd2lzaGVzIHRvIGJlIGhpZGRlbi5cbiAgICpcbiAgICogX19yZXF1aXJlZF9fIHdoZW4gYHJvb3RDbG9zZWAgaXMgYHRydWVgLlxuICAgKlxuICAgKiBAdHlwZSBmdW5jXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZShwcm9wcykge1xuICAgIHZhciBwcm9wVHlwZSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYztcbiAgICBpZiAocHJvcHMucm9vdENsb3NlKSB7XG4gICAgICBwcm9wVHlwZSA9IHByb3BUeXBlLmlzUmVxdWlyZWQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcFR5cGUuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudFxuICAgKiB1c2VkIHRvIGFuaW1hdGUgdGhlIG92ZXJsYXkgYXMgaXQgY2hhbmdlcyB2aXNpYmlsaXR5LlxuICAgKi9cbiAgdHJhbnNpdGlvbjogX2VsZW1lbnRUeXBlMi5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE92ZXJsYXkgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE92ZXJsYXkgYmVnaW5zIHRvIHRyYW5zaXRpb24gaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgT3ZlcmxheSBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIG91dFxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE92ZXJsYXk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudCcpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfZ2V0Q29udGFpbmVyID0gcmVxdWlyZSgnLi91dGlscy9nZXRDb250YWluZXInKTtcblxudmFyIF9nZXRDb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBgPFBvcnRhbC8+YCBjb21wb25lbnQgcmVuZGVycyBpdHMgY2hpbGRyZW4gaW50byBhIG5ldyBcInN1YnRyZWVcIiBvdXRzaWRlIG9mIGN1cnJlbnQgY29tcG9uZW50IGhpZXJhcmNoeS5cbiAqIFlvdSBjYW4gdGhpbmsgb2YgaXQgYXMgYSBkZWNsYXJhdGl2ZSBgYXBwZW5kQ2hpbGQoKWAsIG9yIGpRdWVyeSdzIGAkLmZuLmFwcGVuZFRvKClgLlxuICogVGhlIGNoaWxkcmVuIG9mIGA8UG9ydGFsLz5gIGNvbXBvbmVudCB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSBgY29udGFpbmVyYCBzcGVjaWZpZWQuXG4gKi9cbnZhciBQb3J0YWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWwoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3J0YWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLl9tb3VudE92ZXJsYXlUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLl9vdmVybGF5VGFyZ2V0KSB7XG4gICAgICAgIF90aGlzLl9vdmVybGF5VGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIF90aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID0gKDAsIF9nZXRDb250YWluZXIyLmRlZmF1bHQpKF90aGlzLnByb3BzLmNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpcykuYm9keSk7XG4gICAgICAgIF90aGlzLl9wb3J0YWxDb250YWluZXJOb2RlLmFwcGVuZENoaWxkKF90aGlzLl9vdmVybGF5VGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5fdW5tb3VudE92ZXJsYXlUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuX292ZXJsYXlUYXJnZXQpIHtcbiAgICAgICAgX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUucmVtb3ZlQ2hpbGQoX3RoaXMuX292ZXJsYXlUYXJnZXQpO1xuICAgICAgICBfdGhpcy5fb3ZlcmxheVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgICBfdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSA9IG51bGw7XG4gICAgfSwgX3RoaXMuX3JlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3ZlcmxheSA9ICFfdGhpcy5wcm9wcy5jaGlsZHJlbiA/IG51bGwgOiBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlIGZvciBmdXR1cmUgYWNjZXNzLlxuICAgICAgaWYgKG92ZXJsYXkgIT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMuX21vdW50T3ZlcmxheVRhcmdldCgpO1xuXG4gICAgICAgIHZhciBpbml0aWFsUmVuZGVyID0gIV90aGlzLl9vdmVybGF5SW5zdGFuY2U7XG5cbiAgICAgICAgX3RoaXMuX292ZXJsYXlJbnN0YW5jZSA9IF9yZWFjdERvbTIuZGVmYXVsdC51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihfdGhpcywgb3ZlcmxheSwgX3RoaXMuX292ZXJsYXlUYXJnZXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaW5pdGlhbFJlbmRlciAmJiBfdGhpcy5wcm9wcy5vblJlbmRlcmVkKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vblJlbmRlcmVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVucmVuZGVyIGlmIHRoZSBjb21wb25lbnQgaXMgbnVsbCBmb3IgdHJhbnNpdGlvbnMgdG8gbnVsbFxuICAgICAgICBfdGhpcy5fdW5yZW5kZXJPdmVybGF5KCk7XG4gICAgICAgIF90aGlzLl91bm1vdW50T3ZlcmxheVRhcmdldCgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLl91bnJlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuX292ZXJsYXlUYXJnZXQpIHtcbiAgICAgICAgX3JlYWN0RG9tMi5kZWZhdWx0LnVubW91bnRDb21wb25lbnRBdE5vZGUoX3RoaXMuX292ZXJsYXlUYXJnZXQpO1xuICAgICAgICBfdGhpcy5fb3ZlcmxheUluc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5nZXRNb3VudE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuX292ZXJsYXlUYXJnZXQ7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9yZW5kZXJPdmVybGF5KCk7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fcmVuZGVyT3ZlcmxheSgpO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5fb3ZlcmxheVRhcmdldCAmJiBuZXh0UHJvcHMuY29udGFpbmVyICE9PSB0aGlzLnByb3BzLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9vdmVybGF5VGFyZ2V0KTtcbiAgICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkobmV4dFByb3BzLmNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KSh0aGlzKS5ib2R5KTtcbiAgICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQodGhpcy5fb3ZlcmxheVRhcmdldCk7XG4gICAgfVxuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl91bnJlbmRlck92ZXJsYXkoKTtcbiAgICB0aGlzLl91bm1vdW50T3ZlcmxheVRhcmdldCgpO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQb3J0YWw7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwuZGlzcGxheU5hbWUgPSAnUG9ydGFsJztcblBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIE5vZGUsIENvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgUG9ydGFsIGNoaWxkcmVuXG4gICAqIGFwcGVuZGVkIHRvIGl0LlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG5cbiAgb25SZW5kZXJlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gUG9ydGFsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NsYXNzbmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50ID0gcmVxdWlyZSgncHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50Jyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudE9yRWxlbWVudCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9jYWxjdWxhdGVQb3NpdGlvbiA9IHJlcXVpcmUoJy4vdXRpbHMvY2FsY3VsYXRlUG9zaXRpb24nKTtcblxudmFyIF9jYWxjdWxhdGVQb3NpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYWxjdWxhdGVQb3NpdGlvbik7XG5cbnZhciBfZ2V0Q29udGFpbmVyID0gcmVxdWlyZSgnLi91dGlscy9nZXRDb250YWluZXInKTtcblxudmFyIF9nZXRDb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIFBvc2l0aW9uIGNvbXBvbmVudCBjYWxjdWxhdGVzIHRoZSBjb29yZGluYXRlcyBmb3IgaXRzIGNoaWxkLCB0byBwb3NpdGlvblxuICogaXQgcmVsYXRpdmUgdG8gYSBgdGFyZ2V0YCBjb21wb25lbnQgb3Igbm9kZS4gVXNlZnVsIGZvciBjcmVhdGluZyBjYWxsb3V0c1xuICogYW5kIHRvb2x0aXBzLCB0aGUgUG9zaXRpb24gY29tcG9uZW50IGluamVjdHMgYSBgc3R5bGVgIHByb3BzIHdpdGggYGxlZnRgIGFuZFxuICogYHRvcGAgdmFsdWVzIGZvciBwb3NpdGlvbmluZyB5b3VyIGNvbXBvbmVudC5cbiAqXG4gKiBJdCBhbHNvIGluamVjdHMgXCJhcnJvd1wiIGBsZWZ0YCwgYW5kIGB0b3BgIHZhbHVlcyBmb3Igc3R5bGluZyBjYWxsb3V0IGFycm93c1xuICogZm9yIGdpdmluZyB5b3VyIGNvbXBvbmVudHMgYSBzZW5zZSBvZiBkaXJlY3Rpb25hbGl0eS5cbiAqL1xudmFyIFBvc2l0aW9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3NpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3NpdGlvbik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmdldFRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfdGhpcy5wcm9wcy50YXJnZXQ7XG5cbiAgICAgIHZhciB0YXJnZXRFbGVtZW50ID0gdHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IHRhcmdldCgpIDogdGFyZ2V0O1xuICAgICAgcmV0dXJuIHRhcmdldEVsZW1lbnQgJiYgX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRhcmdldEVsZW1lbnQpIHx8IG51bGw7XG4gICAgfTtcblxuICAgIF90aGlzLm1heWJlVXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbiAocGxhY2VtZW50Q2hhbmdlZCkge1xuICAgICAgdmFyIHRhcmdldCA9IF90aGlzLmdldFRhcmdldCgpO1xuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLnNob3VsZFVwZGF0ZVBvc2l0aW9uICYmIHRhcmdldCA9PT0gX3RoaXMuX2xhc3RUYXJnZXQgJiYgIXBsYWNlbWVudENoYW5nZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy51cGRhdGVQb3NpdGlvbih0YXJnZXQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHBvc2l0aW9uTGVmdDogMCxcbiAgICAgIHBvc2l0aW9uVG9wOiAwLFxuICAgICAgYXJyb3dPZmZzZXRMZWZ0OiBudWxsLFxuICAgICAgYXJyb3dPZmZzZXRUb3A6IG51bGxcbiAgICB9O1xuXG4gICAgX3RoaXMuX25lZWRzRmx1c2ggPSBmYWxzZTtcbiAgICBfdGhpcy5fbGFzdFRhcmdldCA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgUG9zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVQb3NpdGlvbih0aGlzLmdldFRhcmdldCgpKTtcbiAgfTtcblxuICBQb3NpdGlvbi5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpIHtcbiAgICB0aGlzLl9uZWVkc0ZsdXNoID0gdHJ1ZTtcbiAgfTtcblxuICBQb3NpdGlvbi5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLl9uZWVkc0ZsdXNoKSB7XG4gICAgICB0aGlzLl9uZWVkc0ZsdXNoID0gZmFsc2U7XG4gICAgICB0aGlzLm1heWJlVXBkYXRlUG9zaXRpb24odGhpcy5wcm9wcy5wbGFjZW1lbnQgIT09IHByZXZQcm9wcy5wbGFjZW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICBQb3NpdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBwb3NpdGlvbkxlZnQgPSBfc3RhdGUucG9zaXRpb25MZWZ0LFxuICAgICAgICBwb3NpdGlvblRvcCA9IF9zdGF0ZS5wb3NpdGlvblRvcCxcbiAgICAgICAgYXJyb3dQb3NpdGlvbiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfc3RhdGUsIFsncG9zaXRpb25MZWZ0JywgJ3Bvc2l0aW9uVG9wJ10pO1xuXG4gICAgLy8gVGhlc2Ugc2hvdWxkIG5vdCBiZSBmb3J3YXJkZWQgdG8gdGhlIGNoaWxkLlxuXG5cbiAgICBkZWxldGUgcHJvcHMudGFyZ2V0O1xuICAgIGRlbGV0ZSBwcm9wcy5jb250YWluZXI7XG4gICAgZGVsZXRlIHByb3BzLmNvbnRhaW5lclBhZGRpbmc7XG4gICAgZGVsZXRlIHByb3BzLnNob3VsZFVwZGF0ZVBvc2l0aW9uO1xuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHJldHVybiAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIF9leHRlbmRzKHt9LCBwcm9wcywgYXJyb3dQb3NpdGlvbiwge1xuICAgICAgLy8gRklYTUU6IERvbid0IGZvcndhcmQgYHBvc2l0aW9uTGVmdGAgYW5kIGBwb3NpdGlvblRvcGAgdmlhIGJvdGggcHJvcHNcbiAgICAgIC8vIGFuZCBgcHJvcHMuc3R5bGVgLlxuICAgICAgcG9zaXRpb25MZWZ0OiBwb3NpdGlvbkxlZnQsXG4gICAgICBwb3NpdGlvblRvcDogcG9zaXRpb25Ub3AsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoY2xhc3NOYW1lLCBjaGlsZC5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcy5zdHlsZSwge1xuICAgICAgICBsZWZ0OiBwb3NpdGlvbkxlZnQsXG4gICAgICAgIHRvcDogcG9zaXRpb25Ub3BcbiAgICAgIH0pXG4gICAgfSkpO1xuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS51cGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKHRhcmdldCkge1xuICAgIHRoaXMuX2xhc3RUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBvc2l0aW9uTGVmdDogMCxcbiAgICAgICAgcG9zaXRpb25Ub3A6IDAsXG4gICAgICAgIGFycm93T2Zmc2V0TGVmdDogbnVsbCxcbiAgICAgICAgYXJyb3dPZmZzZXRUb3A6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG92ZXJsYXkgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGNvbnRhaW5lciA9ICgwLCBfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KSh0aGlzLnByb3BzLmNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KSh0aGlzKS5ib2R5KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoKDAsIF9jYWxjdWxhdGVQb3NpdGlvbjIuZGVmYXVsdCkodGhpcy5wcm9wcy5wbGFjZW1lbnQsIG92ZXJsYXksIHRhcmdldCwgY29udGFpbmVyLCB0aGlzLnByb3BzLmNvbnRhaW5lclBhZGRpbmcpKTtcbiAgfTtcblxuICByZXR1cm4gUG9zaXRpb247XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3NpdGlvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIG5vZGUsIGVsZW1lbnQsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuIFRoZSBjaGlsZCB3aWxsIGJlXG4gICAqIGJlIHBvc2l0aW9uZWQgbmV4dCB0byB0aGUgYHRhcmdldGAgc3BlY2lmaWVkLlxuICAgKi9cbiAgdGFyZ2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFwib2Zmc2V0UGFyZW50XCIgb2YgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIHNwYWNpbmcgaW4gcGl4ZWxzIGJldHdlZW4gY29udGFpbmVyIGJvcmRlciBhbmQgY29tcG9uZW50IGJvcmRlclxuICAgKi9cbiAgY29udGFpbmVyUGFkZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBIb3cgdG8gcG9zaXRpb24gdGhlIGNvbXBvbmVudCByZWxhdGl2ZSB0byB0aGUgdGFyZ2V0XG4gICAqL1xuICBwbGFjZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSksXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwb3NpdGlvbiBzaG91bGQgYmUgY2hhbmdlZCBvbiBlYWNoIHVwZGF0ZVxuICAgKi9cbiAgc2hvdWxkVXBkYXRlUG9zaXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufTtcblxuUG9zaXRpb24uZGlzcGxheU5hbWUgPSAnUG9zaXRpb24nO1xuXG5Qb3NpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbnRhaW5lclBhZGRpbmc6IDAsXG4gIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgc2hvdWxkVXBkYXRlUG9zaXRpb246IGZhbHNlXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQb3NpdGlvbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbGN1bGF0ZVBvc2l0aW9uO1xuXG52YXIgX29mZnNldCA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3F1ZXJ5L29mZnNldCcpO1xuXG52YXIgX29mZnNldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vZmZzZXQpO1xuXG52YXIgX3Bvc2l0aW9uID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvcXVlcnkvcG9zaXRpb24nKTtcblxudmFyIF9wb3NpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NpdGlvbik7XG5cbnZhciBfc2Nyb2xsVG9wID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvcXVlcnkvc2Nyb2xsVG9wJyk7XG5cbnZhciBfc2Nyb2xsVG9wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbFRvcCk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJy4vb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lckRpbWVuc2lvbnMoY29udGFpbmVyTm9kZSkge1xuICB2YXIgd2lkdGggPSB2b2lkIDAsXG4gICAgICBoZWlnaHQgPSB2b2lkIDAsXG4gICAgICBzY3JvbGwgPSB2b2lkIDA7XG5cbiAgaWYgKGNvbnRhaW5lck5vZGUudGFnTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBzY3JvbGwgPSAoMCwgX3Njcm9sbFRvcDIuZGVmYXVsdCkoKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShjb250YWluZXJOb2RlKS5kb2N1bWVudEVsZW1lbnQpIHx8ICgwLCBfc2Nyb2xsVG9wMi5kZWZhdWx0KShjb250YWluZXJOb2RlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2dldE9mZnNldCA9ICgwLCBfb2Zmc2V0Mi5kZWZhdWx0KShjb250YWluZXJOb2RlKTtcblxuICAgIHdpZHRoID0gX2dldE9mZnNldC53aWR0aDtcbiAgICBoZWlnaHQgPSBfZ2V0T2Zmc2V0LmhlaWdodDtcblxuICAgIHNjcm9sbCA9ICgwLCBfc2Nyb2xsVG9wMi5kZWZhdWx0KShjb250YWluZXJOb2RlKTtcbiAgfVxuXG4gIHJldHVybiB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHNjcm9sbDogc2Nyb2xsIH07XG59XG5cbmZ1bmN0aW9uIGdldFRvcERlbHRhKHRvcCwgb3ZlcmxheUhlaWdodCwgY29udGFpbmVyLCBwYWRkaW5nKSB7XG4gIHZhciBjb250YWluZXJEaW1lbnNpb25zID0gZ2V0Q29udGFpbmVyRGltZW5zaW9ucyhjb250YWluZXIpO1xuICB2YXIgY29udGFpbmVyU2Nyb2xsID0gY29udGFpbmVyRGltZW5zaW9ucy5zY3JvbGw7XG4gIHZhciBjb250YWluZXJIZWlnaHQgPSBjb250YWluZXJEaW1lbnNpb25zLmhlaWdodDtcblxuICB2YXIgdG9wRWRnZU9mZnNldCA9IHRvcCAtIHBhZGRpbmcgLSBjb250YWluZXJTY3JvbGw7XG4gIHZhciBib3R0b21FZGdlT2Zmc2V0ID0gdG9wICsgcGFkZGluZyAtIGNvbnRhaW5lclNjcm9sbCArIG92ZXJsYXlIZWlnaHQ7XG5cbiAgaWYgKHRvcEVkZ2VPZmZzZXQgPCAwKSB7XG4gICAgcmV0dXJuIC10b3BFZGdlT2Zmc2V0O1xuICB9IGVsc2UgaWYgKGJvdHRvbUVkZ2VPZmZzZXQgPiBjb250YWluZXJIZWlnaHQpIHtcbiAgICByZXR1cm4gY29udGFpbmVySGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRMZWZ0RGVsdGEobGVmdCwgb3ZlcmxheVdpZHRoLCBjb250YWluZXIsIHBhZGRpbmcpIHtcbiAgdmFyIGNvbnRhaW5lckRpbWVuc2lvbnMgPSBnZXRDb250YWluZXJEaW1lbnNpb25zKGNvbnRhaW5lcik7XG4gIHZhciBjb250YWluZXJXaWR0aCA9IGNvbnRhaW5lckRpbWVuc2lvbnMud2lkdGg7XG5cbiAgdmFyIGxlZnRFZGdlT2Zmc2V0ID0gbGVmdCAtIHBhZGRpbmc7XG4gIHZhciByaWdodEVkZ2VPZmZzZXQgPSBsZWZ0ICsgcGFkZGluZyArIG92ZXJsYXlXaWR0aDtcblxuICBpZiAobGVmdEVkZ2VPZmZzZXQgPCAwKSB7XG4gICAgcmV0dXJuIC1sZWZ0RWRnZU9mZnNldDtcbiAgfSBlbHNlIGlmIChyaWdodEVkZ2VPZmZzZXQgPiBjb250YWluZXJXaWR0aCkge1xuICAgIHJldHVybiBjb250YWluZXJXaWR0aCAtIHJpZ2h0RWRnZU9mZnNldDtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbihwbGFjZW1lbnQsIG92ZXJsYXlOb2RlLCB0YXJnZXQsIGNvbnRhaW5lciwgcGFkZGluZykge1xuICB2YXIgY2hpbGRPZmZzZXQgPSBjb250YWluZXIudGFnTmFtZSA9PT0gJ0JPRFknID8gKDAsIF9vZmZzZXQyLmRlZmF1bHQpKHRhcmdldCkgOiAoMCwgX3Bvc2l0aW9uMi5kZWZhdWx0KSh0YXJnZXQsIGNvbnRhaW5lcik7XG5cbiAgdmFyIF9nZXRPZmZzZXQyID0gKDAsIF9vZmZzZXQyLmRlZmF1bHQpKG92ZXJsYXlOb2RlKSxcbiAgICAgIG92ZXJsYXlIZWlnaHQgPSBfZ2V0T2Zmc2V0Mi5oZWlnaHQsXG4gICAgICBvdmVybGF5V2lkdGggPSBfZ2V0T2Zmc2V0Mi53aWR0aDtcblxuICB2YXIgcG9zaXRpb25MZWZ0ID0gdm9pZCAwLFxuICAgICAgcG9zaXRpb25Ub3AgPSB2b2lkIDAsXG4gICAgICBhcnJvd09mZnNldExlZnQgPSB2b2lkIDAsXG4gICAgICBhcnJvd09mZnNldFRvcCA9IHZvaWQgMDtcblxuICBpZiAocGxhY2VtZW50ID09PSAnbGVmdCcgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9zaXRpb25Ub3AgPSBjaGlsZE9mZnNldC50b3AgKyAoY2hpbGRPZmZzZXQuaGVpZ2h0IC0gb3ZlcmxheUhlaWdodCkgLyAyO1xuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgICBwb3NpdGlvbkxlZnQgPSBjaGlsZE9mZnNldC5sZWZ0IC0gb3ZlcmxheVdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3NpdGlvbkxlZnQgPSBjaGlsZE9mZnNldC5sZWZ0ICsgY2hpbGRPZmZzZXQud2lkdGg7XG4gICAgfVxuXG4gICAgdmFyIHRvcERlbHRhID0gZ2V0VG9wRGVsdGEocG9zaXRpb25Ub3AsIG92ZXJsYXlIZWlnaHQsIGNvbnRhaW5lciwgcGFkZGluZyk7XG5cbiAgICBwb3NpdGlvblRvcCArPSB0b3BEZWx0YTtcbiAgICBhcnJvd09mZnNldFRvcCA9IDUwICogKDEgLSAyICogdG9wRGVsdGEgLyBvdmVybGF5SGVpZ2h0KSArICclJztcbiAgICBhcnJvd09mZnNldExlZnQgPSB2b2lkIDA7XG4gIH0gZWxzZSBpZiAocGxhY2VtZW50ID09PSAndG9wJyB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9zaXRpb25MZWZ0ID0gY2hpbGRPZmZzZXQubGVmdCArIChjaGlsZE9mZnNldC53aWR0aCAtIG92ZXJsYXlXaWR0aCkgLyAyO1xuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICAgIHBvc2l0aW9uVG9wID0gY2hpbGRPZmZzZXQudG9wIC0gb3ZlcmxheUhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zaXRpb25Ub3AgPSBjaGlsZE9mZnNldC50b3AgKyBjaGlsZE9mZnNldC5oZWlnaHQ7XG4gICAgfVxuXG4gICAgdmFyIGxlZnREZWx0YSA9IGdldExlZnREZWx0YShwb3NpdGlvbkxlZnQsIG92ZXJsYXlXaWR0aCwgY29udGFpbmVyLCBwYWRkaW5nKTtcblxuICAgIHBvc2l0aW9uTGVmdCArPSBsZWZ0RGVsdGE7XG4gICAgYXJyb3dPZmZzZXRMZWZ0ID0gNTAgKiAoMSAtIDIgKiBsZWZ0RGVsdGEgLyBvdmVybGF5V2lkdGgpICsgJyUnO1xuICAgIGFycm93T2Zmc2V0VG9wID0gdm9pZCAwO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsY092ZXJsYXlQb3NpdGlvbigpOiBObyBzdWNoIHBsYWNlbWVudCBvZiBcIicgKyBwbGFjZW1lbnQgKyAnXCIgZm91bmQuJyk7XG4gIH1cblxuICByZXR1cm4geyBwb3NpdGlvbkxlZnQ6IHBvc2l0aW9uTGVmdCwgcG9zaXRpb25Ub3A6IHBvc2l0aW9uVG9wLCBhcnJvd09mZnNldExlZnQ6IGFycm93T2Zmc2V0TGVmdCwgYXJyb3dPZmZzZXRUb3A6IGFycm93T2Zmc2V0VG9wIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBwb3NpdGlvbjtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2Zmc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vZmZzZXRcIikpO1xuXG52YXIgX29mZnNldFBhcmVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2Zmc2V0UGFyZW50XCIpKTtcblxudmFyIF9zY3JvbGxUb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Njcm9sbFRvcFwiKSk7XG5cbnZhciBfc2Nyb2xsTGVmdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsTGVmdFwiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZVwiKSk7XG5cbmZ1bmN0aW9uIG5vZGVOYW1lKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZU5hbWUgJiYgbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvbihub2RlLCBvZmZzZXRQYXJlbnQpIHtcbiAgdmFyIHBhcmVudE9mZnNldCA9IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMFxuICB9LFxuICAgICAgb2Zmc2V0OyAvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuICAvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblxuICBpZiAoKDAsIF9zdHlsZS5kZWZhdWx0KShub2RlLCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIG9mZnNldCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50IHx8ICgwLCBfb2Zmc2V0UGFyZW50LmRlZmF1bHQpKG5vZGUpO1xuICAgIG9mZnNldCA9ICgwLCBfb2Zmc2V0LmRlZmF1bHQpKG5vZGUpO1xuICAgIGlmIChub2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnaHRtbCcpIHBhcmVudE9mZnNldCA9ICgwLCBfb2Zmc2V0LmRlZmF1bHQpKG9mZnNldFBhcmVudCk7XG4gICAgcGFyZW50T2Zmc2V0LnRvcCArPSBwYXJzZUludCgoMCwgX3N0eWxlLmRlZmF1bHQpKG9mZnNldFBhcmVudCwgJ2JvcmRlclRvcFdpZHRoJyksIDEwKSAtICgwLCBfc2Nyb2xsVG9wLmRlZmF1bHQpKG9mZnNldFBhcmVudCkgfHwgMDtcbiAgICBwYXJlbnRPZmZzZXQubGVmdCArPSBwYXJzZUludCgoMCwgX3N0eWxlLmRlZmF1bHQpKG9mZnNldFBhcmVudCwgJ2JvcmRlckxlZnRXaWR0aCcpLCAxMCkgLSAoMCwgX3Njcm9sbExlZnQuZGVmYXVsdCkob2Zmc2V0UGFyZW50KSB8fCAwO1xuICB9IC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBub2RlIG1hcmdpbnNcblxuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBvZmZzZXQsIHtcbiAgICB0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0gKHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgJ21hcmdpblRvcCcpLCAxMCkgfHwgMCksXG4gICAgbGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIChwYXJzZUludCgoMCwgX3N0eWxlLmRlZmF1bHQpKG5vZGUsICdtYXJnaW5MZWZ0JyksIDEwKSB8fCAwKVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gb2Zmc2V0UGFyZW50O1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9vd25lckRvY3VtZW50XCIpKTtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlXCIpKTtcblxuZnVuY3Rpb24gbm9kZU5hbWUobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlTmFtZSAmJiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG9mZnNldFBhcmVudChub2RlKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobm9kZSksXG4gICAgICBvZmZzZXRQYXJlbnQgPSBub2RlICYmIG5vZGUub2Zmc2V0UGFyZW50O1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgbm9kZU5hbWUobm9kZSkgIT09ICdodG1sJyAmJiAoMCwgX3N0eWxlLmRlZmF1bHQpKG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplO1xudmFyIHJIeXBoZW4gPSAvLSguKS9nO1xuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJIeXBoZW4sIGZ1bmN0aW9uIChfLCBjaHIpIHtcbiAgICByZXR1cm4gY2hyLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxudmFyIF9oeXBoZW5hdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGUuZGVmYXVsdCkoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZTtcbnZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShyVXBwZXIsICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9nZXRDb21wdXRlZFN0eWxlO1xuXG52YXIgX2NhbWVsaXplU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2NhbWVsaXplU3R5bGVcIikpO1xuXG52YXIgcnBvc2l0aW9uID0gL14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvO1xudmFyIHJudW1ub25weCA9IC9eKFsrLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KSkoPyFweClbYS16JV0rJC9pO1xuXG5mdW5jdGlvbiBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSB7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gRWxlbWVudCBwYXNzZWQgdG8gYGdldENvbXB1dGVkU3R5bGUoKWAnKTtcbiAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuICdkZWZhdWx0VmlldycgaW4gZG9jID8gZG9jLmRlZmF1bHRWaWV3Lm9wZW5lciA/IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpIDogd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB7XG4gICAgLy9pZSA4IFwibWFnaWNcIiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzEuMTEtc3RhYmxlL3NyYy9jc3MvY3VyQ1NTLmpzI0w3MlxuICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUocHJvcCkge1xuICAgICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcbiAgICAgIHByb3AgPSAoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcCk7XG4gICAgICBpZiAocHJvcCA9PSAnZmxvYXQnKSBwcm9wID0gJ3N0eWxlRmxvYXQnO1xuICAgICAgdmFyIGN1cnJlbnQgPSBub2RlLmN1cnJlbnRTdHlsZVtwcm9wXSB8fCBudWxsO1xuICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCAmJiBzdHlsZSAmJiBzdHlsZVtwcm9wXSkgY3VycmVudCA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocm51bW5vbnB4LnRlc3QoY3VycmVudCkgJiYgIXJwb3NpdGlvbi50ZXN0KHByb3ApKSB7XG4gICAgICAgIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcbiAgICAgICAgdmFyIGxlZnQgPSBzdHlsZS5sZWZ0O1xuICAgICAgICB2YXIgcnVuU3R5bGUgPSBub2RlLnJ1bnRpbWVTdHlsZTtcbiAgICAgICAgdmFyIHJzTGVmdCA9IHJ1blN0eWxlICYmIHJ1blN0eWxlLmxlZnQ7IC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblxuICAgICAgICBpZiAocnNMZWZ0KSBydW5TdHlsZS5sZWZ0ID0gbm9kZS5jdXJyZW50U3R5bGUubGVmdDtcbiAgICAgICAgc3R5bGUubGVmdCA9IHByb3AgPT09ICdmb250U2l6ZScgPyAnMWVtJyA6IGN1cnJlbnQ7XG4gICAgICAgIGN1cnJlbnQgPSBzdHlsZS5waXhlbExlZnQgKyAncHgnOyAvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cbiAgICAgICAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgICAgIGlmIChyc0xlZnQpIHJ1blN0eWxlLmxlZnQgPSByc0xlZnQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZVN0eWxlO1xuXG5mdW5jdGlvbiByZW1vdmVTdHlsZShub2RlLCBrZXkpIHtcbiAgcmV0dXJuICdyZW1vdmVQcm9wZXJ0eScgaW4gbm9kZS5zdHlsZSA/IG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KSA6IG5vZGUuc3R5bGUucmVtb3ZlQXR0cmlidXRlKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5hbmltYXRpb25FbmQgPSBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gZXhwb3J0cy5hbmltYXRpb25OYW1lID0gZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gZXhwb3J0cy50cmFuc2Zvcm0gPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIHRyYW5zZm9ybSA9ICd0cmFuc2Zvcm0nO1xuZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG52YXIgcHJlZml4LCB0cmFuc2l0aW9uRW5kLCBhbmltYXRpb25FbmQ7XG5leHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmQ7XG52YXIgdHJhbnNpdGlvblByb3BlcnR5LCB0cmFuc2l0aW9uRHVyYXRpb24sIHRyYW5zaXRpb25UaW1pbmcsIHRyYW5zaXRpb25EZWxheTtcbmV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZztcbmV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHk7XG52YXIgYW5pbWF0aW9uTmFtZSwgYW5pbWF0aW9uRHVyYXRpb24sIGFuaW1hdGlvblRpbWluZywgYW5pbWF0aW9uRGVsYXk7XG5leHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXk7XG5leHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGFuaW1hdGlvblRpbWluZztcbmV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbjtcbmV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbk5hbWU7XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wZXJ0ID0gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKTtcblxuICBwcmVmaXggPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQucHJlZml4O1xuICBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnRyYW5zaXRpb25FbmQ7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LmFuaW1hdGlvbkVuZDtcbiAgZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0gPSBwcmVmaXggKyBcIi1cIiArIHRyYW5zZm9ybTtcbiAgZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHkgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLXByb3BlcnR5XCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1kdXJhdGlvblwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheSA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tZGVsYXlcIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZyA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbk5hbWUgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tbmFtZVwiO1xuICBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb24gPSBwcmVmaXggKyBcIi1hbmltYXRpb24tZHVyYXRpb25cIjtcbiAgZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmcgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tZGVsYXlcIjtcbiAgZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5ID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvblwiO1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICBlbmQ6IHRyYW5zaXRpb25FbmQsXG4gIHByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcGVydHksXG4gIHRpbWluZzogdHJhbnNpdGlvblRpbWluZyxcbiAgZGVsYXk6IHRyYW5zaXRpb25EZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHZhciB2ZW5kb3JNYXAgPSB7XG4gICAgTzogZnVuY3Rpb24gTyhlKSB7XG4gICAgICByZXR1cm4gXCJvXCIgKyBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBNb3o6IGZ1bmN0aW9uIE1veihlKSB7XG4gICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgV2Via2l0OiBmdW5jdGlvbiBXZWJraXQoZSkge1xuICAgICAgcmV0dXJuIFwid2Via2l0XCIgKyBlO1xuICAgIH0sXG4gICAgbXM6IGZ1bmN0aW9uIG1zKGUpIHtcbiAgICAgIHJldHVybiBcIk1TXCIgKyBlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHZlbmRvcnMgPSBPYmplY3Qua2V5cyh2ZW5kb3JNYXApO1xuICB2YXIgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kO1xuICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZlbmRvciA9IHZlbmRvcnNbaV07XG5cbiAgICBpZiAodmVuZG9yICsgXCJUcmFuc2l0aW9uUHJvcGVydHlcIiBpbiBzdHlsZSkge1xuICAgICAgcHJlZml4ID0gXCItXCIgKyB2ZW5kb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRyYW5zaXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgYW5pbWF0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ0FuaW1hdGlvbkVuZCcpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0cmFuc2l0aW9uRW5kICYmICd0cmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB0cmFuc2l0aW9uRW5kID0gJ3RyYW5zaXRpb25lbmQnO1xuICBpZiAoIWFuaW1hdGlvbkVuZCAmJiAnYW5pbWF0aW9uTmFtZScgaW4gc3R5bGUpIGFuaW1hdGlvbkVuZCA9ICdhbmltYXRpb25lbmQnO1xuICBzdHlsZSA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgYW5pbWF0aW9uRW5kOiBhbmltYXRpb25FbmQsXG4gICAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCxcbiAgICBwcmVmaXg6IHByZWZpeFxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNUcmFuc2Zvcm07XG52YXIgc3VwcG9ydGVkVHJhbnNmb3JtcyA9IC9eKCh0cmFuc2xhdGV8cm90YXRlfHNjYWxlKShYfFl8WnwzZCk/fG1hdHJpeCgzZCk/fHBlcnNwZWN0aXZlfHNrZXcoWHxZKT8pJC9pO1xuXG5mdW5jdGlvbiBpc1RyYW5zZm9ybShwcm9wZXJ0eSkge1xuICByZXR1cm4gISEocHJvcGVydHkgJiYgc3VwcG9ydGVkVHJhbnNmb3Jtcy50ZXN0KHByb3BlcnR5KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsVG9wO1xuXG52YXIgX2lzV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSk7XG5cbmZ1bmN0aW9uIHNjcm9sbFRvcChub2RlLCB2YWwpIHtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cuZGVmYXVsdCkobm9kZSk7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHdpbiA/ICdwYWdlWE9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VYT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IDogbm9kZS5zY3JvbGxMZWZ0O1xuICBpZiAod2luKSB3aW4uc2Nyb2xsVG8odmFsLCAncGFnZVlPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWU9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKTtlbHNlIG5vZGUuc2Nyb2xsTGVmdCA9IHZhbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfY29udGFpbnMgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9jb250YWlucycpO1xuXG52YXIgX2NvbnRhaW5zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5zKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9hZGRFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnLi91dGlscy9hZGRFdmVudExpc3RlbmVyJyk7XG5cbnZhciBfYWRkRXZlbnRMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRFdmVudExpc3RlbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZXNjYXBlS2V5Q29kZSA9IDI3O1xuXG5mdW5jdGlvbiBpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbi8qKlxuICogVGhlIGA8Um9vdENsb3NlV3JhcHBlci8+YCBjb21wb25lbnQgcmVnaXN0ZXJzIHlvdXIgY2FsbGJhY2sgb24gdGhlIGRvY3VtZW50XG4gKiB3aGVuIHJlbmRlcmVkLiBQb3dlcnMgdGhlIGA8T3ZlcmxheS8+YCBjb21wb25lbnQuIFRoaXMgaXMgdXNlZCBhY2hpZXZlIG1vZGFsXG4gKiBzdHlsZSBiZWhhdmlvciB3aGVyZSB5b3VyIGNhbGxiYWNrIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIHRyaWVzIHRvXG4gKiBpbnRlcmFjdCB3aXRoIHRoZSByZXN0IG9mIHRoZSBkb2N1bWVudCBvciBoaXRzIHRoZSBgZXNjYCBrZXkuXG4gKi9cblxudmFyIFJvb3RDbG9zZVdyYXBwZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm9vdENsb3NlV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm9vdENsb3NlV3JhcHBlcihwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb290Q2xvc2VXcmFwcGVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfdGhpcy5wcm9wcy5ldmVudDtcblxuICAgICAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoX3RoaXMpO1xuXG4gICAgICAvLyBVc2UgY2FwdHVyZSBmb3IgdGhpcyBsaXN0ZW5lciBzbyBpdCBmaXJlcyBiZWZvcmUgUmVhY3QncyBsaXN0ZW5lciwgdG9cbiAgICAgIC8vIGF2b2lkIGZhbHNlIHBvc2l0aXZlcyBpbiB0aGUgY29udGFpbnMoKSBjaGVjayBiZWxvdyBpZiB0aGUgdGFyZ2V0IERPTVxuICAgICAgLy8gZWxlbWVudCBpcyByZW1vdmVkIGluIHRoZSBSZWFjdCBtb3VzZSBjYWxsYmFjay5cbiAgICAgIF90aGlzLmRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIgPSAoMCwgX2FkZEV2ZW50TGlzdGVuZXIyLmRlZmF1bHQpKGRvYywgZXZlbnQsIF90aGlzLmhhbmRsZU1vdXNlQ2FwdHVyZSwgdHJ1ZSk7XG5cbiAgICAgIF90aGlzLmRvY3VtZW50TW91c2VMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCBldmVudCwgX3RoaXMuaGFuZGxlTW91c2UpO1xuXG4gICAgICBfdGhpcy5kb2N1bWVudEtleXVwTGlzdGVuZXIgPSAoMCwgX2FkZEV2ZW50TGlzdGVuZXIyLmRlZmF1bHQpKGRvYywgJ2tleXVwJywgX3RoaXMuaGFuZGxlS2V5VXApO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5kb2N1bWVudE1vdXNlQ2FwdHVyZUxpc3RlbmVyKSB7XG4gICAgICAgIF90aGlzLmRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5kb2N1bWVudE1vdXNlTGlzdGVuZXIpIHtcbiAgICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUxpc3RlbmVyLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuZG9jdW1lbnRLZXl1cExpc3RlbmVyKSB7XG4gICAgICAgIF90aGlzLmRvY3VtZW50S2V5dXBMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VDYXB0dXJlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSA9IGlzTW9kaWZpZWRFdmVudChlKSB8fCAhaXNMZWZ0Q2xpY2tFdmVudChlKSB8fCAoMCwgX2NvbnRhaW5zMi5kZWZhdWx0KShfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMpLCBlLnRhcmdldCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghX3RoaXMucHJldmVudE1vdXNlUm9vdENsb3NlICYmIF90aGlzLnByb3BzLm9uUm9vdENsb3NlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uUm9vdENsb3NlKGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSBlc2NhcGVLZXlDb2RlICYmIF90aGlzLnByb3BzLm9uUm9vdENsb3NlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uUm9vdENsb3NlKGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5wcmV2ZW50TW91c2VSb290Q2xvc2UgPSBmYWxzZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBSb290Q2xvc2VXcmFwcGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfTtcblxuICBSb290Q2xvc2VXcmFwcGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHByZXZQcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhcHJldlByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9O1xuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9O1xuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gUm9vdENsb3NlV3JhcHBlcjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblJvb3RDbG9zZVdyYXBwZXIuZGlzcGxheU5hbWUgPSAnUm9vdENsb3NlV3JhcHBlcic7XG5cblJvb3RDbG9zZVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgY2xpY2sgb3IgbW91c2Vkb3duLiBBbHNvIHRyaWdnZXJzIHdoZW4gdXNlciBoaXRzIGBlc2NgLlxuICAgKi9cbiAgb25Sb290Q2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENoaWxkcmVuIHRvIHJlbmRlci5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSB0aGUgUm9vdENsb3NlV3JhcHBlciwgcHJldmVudGluZyBpdCBmcm9tIHRyaWdnZXJpbmcgYG9uUm9vdENsb3NlYC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBDaG9vc2Ugd2hpY2ggZG9jdW1lbnQgbW91c2UgZXZlbnQgdG8gYmluZCB0by5cbiAgICovXG4gIGV2ZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnY2xpY2snLCAnbW91c2Vkb3duJ10pXG59O1xuXG5Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZXZlbnQ6ICdjbGljaydcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJvb3RDbG9zZVdyYXBwZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuRVhJVElORyA9IGV4cG9ydHMuRU5URVJFRCA9IGV4cG9ydHMuRU5URVJJTkcgPSBleHBvcnRzLkVYSVRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gdm9pZCAwO1xuXG52YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZShcIi4vdXRpbHMvUHJvcFR5cGVzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydHMuVU5NT1VOVEVEID0gVU5NT1VOVEVEO1xudmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0cy5FWElURUQgPSBFWElURUQ7XG52YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0cy5FTlRFUklORyA9IEVOVEVSSU5HO1xudmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnRzLkVOVEVSRUQgPSBFTlRFUkVEO1xudmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMCB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG5leHBvcnRzLkVYSVRJTkcgPSBFWElUSU5HO1xuXG52YXIgVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dC50cmFuc2l0aW9uR3JvdXA7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkdyb3VwOiBudWxsIC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG5cbiAgICB9O1xuICB9O1xuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9OyAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cblxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogVU5NT1VOVEVEXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIHBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudGVyID0gdGhpcy5wcm9wcy5lbnRlcjtcbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cCA/IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgZW50ZXJUaW1lb3V0ID0gYXBwZWFyaW5nID8gdGltZW91dHMuYXBwZWFyIDogdGltZW91dHMuZW50ZXI7IC8vIG5vIGVudGVyIGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVOVEVSRURcbiAgICAvLyBpZiB3ZSBhcmUgbW91bnRpbmcgYW5kIHJ1bm5pbmcgdGhpcyBpdCBtZWFucyBhcHBlYXIgX211c3RfIGJlIHNldFxuXG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChub2RlLCBlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpOyAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuXG4gICAgaWYgKCFleGl0KSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LCBidXQgdGhlcmUgYXJlIHdlaXJkIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgLy8gc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCB1bm1vdW50aW5nIGluIHRlc3RpbmcsIHNvIGFsd2F5cyBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuXG4gICAgY2FsbGJhY2sgPSB0aGlzLnNldE5leHRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczQubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dCwgaGFuZGxlcikge1xuICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG5vZGUsIHRoaXMubmV4dENhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCB0aW1lb3V0KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pOyAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uXG5cblxuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm1vdW50T25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy51bm1vdW50T25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5leGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYWRkRW5kTGlzdGVuZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGVkO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogUHJvcFR5cGVzLm9iamVjdFxufTtcblRyYW5zaXRpb24uY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogZnVuY3Rpb24gdHJhbnNpdGlvbkdyb3VwKCkge31cbn07XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiBpc1xuICAgKiBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1cyAoYCdlbnRlcmluZydgLCBgJ2VudGVyZWQnYCxcbiAgICogYCdleGl0aW5nJ2AsIGAnZXhpdGVkJ2AsIGAndW5tb3VudGVkJ2ApLCB3aGljaCBjYW4gYmUgdXNlZCB0byBhcHBseSBjb250ZXh0XG4gICAqIHNwZWNpZmljIHByb3BzIHRvIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezE1MH0+XG4gICAqICAge3N0YXRlID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0ZX1gfSAvPlxuICAgKiAgICl9XG4gICAqIDwvVHJhbnNpdGlvbj5cbiAgICogYGBgXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZF0pLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGVudGVyIG9yIGV4aXQgc3RhdGVzXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBtb3VudGVkIGltbWVkaWF0ZWx5IGFsb25nIHdpdGhcbiAgICogdGhlIHBhcmVudCBgVHJhbnNpdGlvbmAgY29tcG9uZW50LiBJZiB5b3Ugd2FudCB0byBcImxhenkgbW91bnRcIiB0aGUgY29tcG9uZW50IG9uIHRoZVxuICAgKiBmaXJzdCBgaW49e3RydWV9YCB5b3UgY2FuIHNldCBgbW91bnRPbkVudGVyYC4gQWZ0ZXIgdGhlIGZpcnN0IGVudGVyIHRyYW5zaXRpb24gdGhlIGNvbXBvbmVudCB3aWxsIHN0YXlcbiAgICogbW91bnRlZCwgZXZlbiBvbiBcImV4aXRlZFwiLCB1bmxlc3MgeW91IGFsc28gc3BlY2lmeSBgdW5tb3VudE9uRXhpdGAuXG4gICAqL1xuICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgc3RheXMgbW91bnRlZCBhZnRlciBpdCByZWFjaGVzIHRoZSBgJ2V4aXRlZCdgIHN0YXRlLlxuICAgKiBTZXQgYHVubW91bnRPbkV4aXRgIGlmIHlvdSdkIHByZWZlciB0byB1bm1vdW50IHRoZSBjb21wb25lbnQgYWZ0ZXIgaXQgZmluaXNoZXMgZXhpdGluZy5cbiAgICovXG4gIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOb3JtYWxseSBhIGNvbXBvbmVudCBpcyBub3QgdHJhbnNpdGlvbmVkIGlmIGl0IGlzIHNob3duIHdoZW4gdGhlIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudCBtb3VudHMuXG4gICAqIElmIHlvdSB3YW50IHRvIHRyYW5zaXRpb24gb24gdGhlIGZpcnN0IG1vdW50IHNldCBgYXBwZWFyYCB0byBgdHJ1ZWAsIGFuZCB0aGVcbiAgICogY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbiBhcyBzb29uIGFzIHRoZSBgPFRyYW5zaXRpb24+YCBtb3VudHMuXG4gICAqXG4gICAqID4gTm90ZTogdGhlcmUgYXJlIG5vIHNwZWNpZmljIFwiYXBwZWFyXCIgc3RhdGVzLiBgYXBwZWFyYCBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBgZW50ZXJgIHRyYW5zaXRpb24uXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSBfUHJvcFR5cGVzLnRpbWVvdXRzU2hhcGU7XG4gICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0LmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbn0gOiB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IDA7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IDE7XG5UcmFuc2l0aW9uLkVOVEVSSU5HID0gMjtcblRyYW5zaXRpb24uRU5URVJFRCA9IDM7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSA0O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIGlmIChzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIC8vIFVzZSB0aGUgc2V0U3RhdGUoKSB1cGRhdGVyIHRvIGVuc3VyZSBzdGF0ZSBpc24ndCBzdGFsZSBpbiBjZXJ0YWluIGVkZ2UgY2FzZXMuXG4gIGZ1bmN0aW9uIHVwZGF0ZXIocHJldlN0YXRlKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkID8gc3RhdGUgOiBudWxsO1xuICB9XG4gIC8vIEJpbmRpbmcgXCJ0aGlzXCIgaXMgaW1wb3J0YW50IGZvciBzaGFsbG93IHJlbmRlcmVyIHN1cHBvcnQuXG4gIHRoaXMuc2V0U3RhdGUodXBkYXRlci5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICB0cnkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyA9IHRydWU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCA9IHRoaXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGVcbiAgICApO1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMucHJvcHMgPSBwcmV2UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IHByZXZTdGF0ZTtcbiAgfVxufVxuXG4vLyBSZWFjdCBtYXkgd2FybiBhYm91dCBjV00vY1dSUC9jV1UgbWV0aG9kcyBiZWluZyBkZXByZWNhdGVkLlxuLy8gQWRkIGEgZmxhZyB0byBzdXBwcmVzcyB0aGVzZSB3YXJuaW5ncyBmb3IgdGhpcyBzcGVjaWFsIGNhc2UuXG5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcblxuZnVuY3Rpb24gcG9seWZpbGwoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4gIGlmICghcHJvdG90eXBlIHx8ICFwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG9ubHkgcG9seWZpbGwgY2xhc3MgY29tcG9uZW50cycpO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgLy8gSWYgbmV3IGNvbXBvbmVudCBBUElzIGFyZSBkZWZpbmVkLCBcInVuc2FmZVwiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLlxuICAvLyBFcnJvciBpZiBhbnkgb2YgdGhlc2UgbGlmZWN5Y2xlcyBhcmUgcHJlc2VudCxcbiAgLy8gQmVjYXVzZSB0aGV5IHdvdWxkIHdvcmsgZGlmZmVyZW50bHkgYmV0d2VlbiBvbGRlciBhbmQgbmV3ZXIgKDE2LjMrKSB2ZXJzaW9ucyBvZiBSZWFjdC5cbiAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSBudWxsO1xuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnY29tcG9uZW50V2lsbE1vdW50JztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfVxuICBpZiAoXG4gICAgZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGxcbiAgKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWU7XG4gICAgdmFyIG5ld0FwaU5hbWUgPVxuICAgICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCknXG4gICAgICAgIDogJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlKCknO1xuXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICAnVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXFxuXFxuJyArXG4gICAgICAgIGNvbXBvbmVudE5hbWUgK1xuICAgICAgICAnIHVzZXMgJyArXG4gICAgICAgIG5ld0FwaU5hbWUgK1xuICAgICAgICAnIGJ1dCBhbHNvIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbGVnYWN5IGxpZmVjeWNsZXM6JyArXG4gICAgICAgIChmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsTW91bnROYW1lIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGxcbiAgICAgICAgICA/ICdcXG4gICcgKyBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lXG4gICAgICAgICAgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxVcGRhdGVOYW1lIDogJycpICtcbiAgICAgICAgJ1xcblxcblRoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJ1xuICAgICk7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dNIGFuZCBjV1JQIHRvIGludm9rZSB0aGUgbmV3IHN0YXRpYyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoZXNlIGxpZmVjeWNsZXMgaWYgZ0RTRlAgZXhpc3RzLlxuICBpZiAodHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gY29tcG9uZW50V2lsbE1vdW50O1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZS5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dVIHRvIGludm9rZSB0aGUgbmV3IGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhhdCBsaWZlY3ljbGUgaWYgZ1NCVSBleGlzdHMuXG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgcG9seWZpbGwgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSBmb3IgY29tcG9uZW50cyB0aGF0IGRvIG5vdCBkZWZpbmUgY29tcG9uZW50RGlkVXBkYXRlKCkgb24gdGhlIHByb3RvdHlwZSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBjb21wb25lbnRXaWxsVXBkYXRlO1xuXG4gICAgdmFyIGNvbXBvbmVudERpZFVwZGF0ZSA9IHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU7XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGUsXG4gICAgICBtYXliZVNuYXBzaG90XG4gICAgKSB7XG4gICAgICAvLyAxNi4zKyB3aWxsIG5vdCBleGVjdXRlIG91ciB3aWxsLXVwZGF0ZSBtZXRob2Q7XG4gICAgICAvLyBJdCB3aWxsIHBhc3MgYSBzbmFwc2hvdCB2YWx1ZSB0byBkaWQtdXBkYXRlIHRob3VnaC5cbiAgICAgIC8vIE9sZGVyIHZlcnNpb25zIHdpbGwgcmVxdWlyZSBvdXIgcG9seWZpbGxlZCB3aWxsLXVwZGF0ZSB2YWx1ZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIGJ1dCBjYW4ndCBqdXN0IGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgXCJtYXliZVNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGZvciA8PSAxNS54IHZlcnNpb25zIHRoaXMgbWlnaHQgYmUgYSBcInByZXZDb250ZXh0XCIgb2JqZWN0LlxuICAgICAgLy8gV2UgYWxzbyBjYW4ndCBqdXN0IGNoZWNrIFwiX19yZWFjdEludGVybmFsU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZ2V0LXNuYXBzaG90IG1pZ2h0IHJldHVybiBhIGZhbHN5IHZhbHVlLlxuICAgICAgLy8gU28gY2hlY2sgZm9yIHRoZSBleHBsaWNpdCBfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgZmxhZyB0byBkZXRlcm1pbmUgYmVoYXZpb3IuXG4gICAgICB2YXIgc25hcHNob3QgPSB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZ1xuICAgICAgICA/IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RcbiAgICAgICAgOiBtYXliZVNuYXBzaG90O1xuXG4gICAgICBjb21wb25lbnREaWRVcGRhdGUuY2FsbCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgc25hcHNob3QpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufVxuXG5leHBvcnQgeyBwb2x5ZmlsbCB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNsYXNzTmFtZXNTaGFwZSA9IGV4cG9ydHMudGltZW91dHNTaGFwZSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHRpbWVvdXRzU2hhcGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIGFwcGVhcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSkuaXNSZXF1aXJlZF0pIDogbnVsbDtcbmV4cG9ydHMudGltZW91dHNTaGFwZSA9IHRpbWVvdXRzU2hhcGU7XG52YXIgY2xhc3NOYW1lc1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pXSkgOiBudWxsO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBjbGFzc05hbWVzU2hhcGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNSZXF1aXJlZEZvckExMXk7XG5mdW5jdGlvbiBpc1JlcXVpcmVkRm9yQTExeSh2YWxpZGF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZVNhZmUgKyAnYCBpcyByZXF1aXJlZCB0byBtYWtlICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZVNhZmUgKyAnYCBhY2Nlc3NpYmxlIGZvciB1c2VycyBvZiBhc3Npc3RpdmUgJykgKyAndGVjaG5vbG9naWVzIHN1Y2ggYXMgc2NyZWVuIHJlYWRlcnMuJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gNSA/IF9sZW4gLSA1IDogMCksIF9rZXkgPSA1OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSA1XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yLmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG4vLyBUT0RPOiBUaGlzIG1vZHVsZSBzaG91bGQgYmUgRWxlbWVudENoaWxkcmVuLCBhbmQgc2hvdWxkIHVzZSBuYW1lZCBleHBvcnRzLlxuXG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLFxuICogYnV0IG9ubHkgbWFwcyBvdmVyIGNoaWxkcmVuIHRoYXQgYXJlIFwidmFsaWQgY29tcG9uZW50c1wiLlxuICpcbiAqIFRoZSBtYXBGdW5jdGlvbiBwcm92aWRlZCBpbmRleCB3aWxsIGJlIG5vcm1hbGlzZWQgdG8gdGhlIGNvbXBvbmVudHMgbWFwcGVkLFxuICogc28gYW4gaW52YWxpZCBjb21wb25lbnQgd291bGQgbm90IGluY3JlYXNlIHRoZSBpbmRleC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZnVuYy5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBmdW5jLlxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gbWFwKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgaW5kZXgrKyk7XG4gIH0pO1xufVxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIFwidmFsaWQgY29tcG9uZW50c1wiLlxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkIHdpdGggdGhlIGluZGV4IHJlZmxlY3RpbmcgdGhlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIFwidmFsaWQgY29tcG9uZW50c1wiLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmdW5jLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IENvbnRleHQgZm9yIGNvbnRleHQuXG4gKi9cblxuXG5mdW5jdGlvbiBmb3JFYWNoKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspO1xuICB9KTtcbn1cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBcInZhbGlkIGNvbXBvbmVudHNcIiBpbiB0aGUgQ2hpbGRyZW4gY29udGFpbmVyLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvdW50KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSAwO1xuXG4gIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgKytyZXN1bHQ7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEZpbmRzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCxcbiAqIGJ1dCBvbmx5IGl0ZXJhdGVzIG92ZXIgY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQgd2l0aCB0aGUgaW5kZXggcmVmbGVjdGluZyB0aGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMuXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgZnVuYy5cbiAqIEByZXR1cm5zIHthcnJheX0gb2YgY2hpbGRyZW4gdGhhdCBtZWV0IHRoZSBmdW5jIHJldHVybiBzdGF0ZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbHRlcihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKSkge1xuICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZmluZChjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0O1xuXG4gIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspKSB7XG4gICAgICByZXN1bHQgPSBjaGlsZDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuXG4gIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgaW5kZXgrKykpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc29tZShjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG5cbiAgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgaW5kZXgrKykpIHtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlc3VsdC5wdXNoKGNoaWxkKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBtYXA6IG1hcCxcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgY291bnQ6IGNvdW50LFxuICBmaW5kOiBmaW5kLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgZXZlcnk6IGV2ZXJ5LFxuICBzb21lOiBzb21lLFxuICB0b0FycmF5OiB0b0FycmF5XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9HbHlwaGljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dseXBoaWNvblwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYnNSb2xlOiAnZmVlZGJhY2snXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIEZvcm1Db250cm9sRmVlZGJhY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShGb3JtQ29udHJvbEZlZWRiYWNrLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ29udHJvbEZlZWRiYWNrKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGb3JtQ29udHJvbEZlZWRiYWNrLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0R2x5cGggPSBmdW5jdGlvbiBnZXRHbHlwaCh2YWxpZGF0aW9uU3RhdGUpIHtcbiAgICBzd2l0Y2ggKHZhbGlkYXRpb25TdGF0ZSkge1xuICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgIHJldHVybiAnb2snO1xuXG4gICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgcmV0dXJuICd3YXJuaW5nLXNpZ24nO1xuXG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIHJldHVybiAncmVtb3ZlJztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXJEZWZhdWx0RmVlZGJhY2sgPSBmdW5jdGlvbiByZW5kZXJEZWZhdWx0RmVlZGJhY2soZm9ybUdyb3VwLCBjbGFzc05hbWUsIGNsYXNzZXMsIGVsZW1lbnRQcm9wcykge1xuICAgIHZhciBnbHlwaCA9IHRoaXMuZ2V0R2x5cGgoZm9ybUdyb3VwICYmIGZvcm1Hcm91cC52YWxpZGF0aW9uU3RhdGUpO1xuXG4gICAgaWYgKCFnbHlwaCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0dseXBoaWNvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGdseXBoOiBnbHlwaCxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG5cbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZWZhdWx0RmVlZGJhY2sodGhpcy5jb250ZXh0LiRic19mb3JtR3JvdXAsIGNsYXNzTmFtZSwgY2xhc3NlcywgZWxlbWVudFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGb3JtQ29udHJvbEZlZWRiYWNrO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbEZlZWRiYWNrLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkZvcm1Db250cm9sRmVlZGJhY2suY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdmb3JtLWNvbnRyb2wtZmVlZGJhY2snLCBGb3JtQ29udHJvbEZlZWRiYWNrKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQW4gaWNvbiBuYW1lIHdpdGhvdXQgXCJnbHlwaGljb24tXCIgcHJlZml4LiBTZWUgZS5nLiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9jb21wb25lbnRzLyNnbHlwaGljb25zXG4gICAqL1xuICBnbHlwaDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG52YXIgR2x5cGhpY29uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoR2x5cGhpY29uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBHbHlwaGljb24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEdseXBoaWNvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZ2x5cGggPSBfdGhpcyRwcm9wcy5nbHlwaCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImdseXBoXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgZ2x5cGgpXSA9IHRydWUsIF9leHRlbmRzMikpO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEdseXBoaWNvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuR2x5cGhpY29uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnZ2x5cGhpY29uJywgR2x5cGhpY29uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogX2VsZW1lbnRUeXBlLmRlZmF1bHRcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ3AnXG59O1xuXG52YXIgRm9ybUNvbnRyb2xTdGF0aWMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShGb3JtQ29udHJvbFN0YXRpYywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUNvbnRyb2xTdGF0aWMoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm1Db250cm9sU3RhdGljLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sU3RhdGljO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbFN0YXRpYy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Gb3JtQ29udHJvbFN0YXRpYy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2Zvcm0tY29udHJvbC1zdGF0aWMnLCBGb3JtQ29udHJvbFN0YXRpYyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29uXCIpKTtcblxuZXhwb3J0cy5vbiA9IF9vbi5kZWZhdWx0O1xuXG52YXIgX29mZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2ZmXCIpKTtcblxuZXhwb3J0cy5vZmYgPSBfb2ZmLmRlZmF1bHQ7XG5cbnZhciBfZmlsdGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9maWx0ZXJcIikpO1xuXG5leHBvcnRzLmZpbHRlciA9IF9maWx0ZXIuZGVmYXVsdDtcblxudmFyIF9saXN0ZW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpc3RlblwiKSk7XG5cbmV4cG9ydHMubGlzdGVuID0gX2xpc3Rlbi5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0ge1xuICBvbjogX29uLmRlZmF1bHQsXG4gIG9mZjogX29mZi5kZWZhdWx0LFxuICBmaWx0ZXI6IF9maWx0ZXIuZGVmYXVsdCxcbiAgbGlzdGVuOiBfbGlzdGVuLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBmaWx0ZXJFdmVudHM7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfcXVlcnlTZWxlY3RvckFsbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3F1ZXJ5L3F1ZXJ5U2VsZWN0b3JBbGxcIikpO1xuXG5mdW5jdGlvbiBmaWx0ZXJFdmVudHMoc2VsZWN0b3IsIGhhbmRsZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpbHRlckhhbmRsZXIoZSkge1xuICAgIHZhciB0b3AgPSBlLmN1cnJlbnRUYXJnZXQsXG4gICAgICAgIHRhcmdldCA9IGUudGFyZ2V0LFxuICAgICAgICBtYXRjaGVzID0gKDAsIF9xdWVyeVNlbGVjdG9yQWxsLmRlZmF1bHQpKHRvcCwgc2VsZWN0b3IpO1xuICAgIGlmIChtYXRjaGVzLnNvbWUoZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gKDAsIF9jb250YWlucy5kZWZhdWx0KShtYXRjaCwgdGFyZ2V0KTtcbiAgICB9KSkgaGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcXNhO1xuLy8gWmVwdG8uanNcbi8vIChjKSAyMDEwLTIwMTUgVGhvbWFzIEZ1Y2hzXG4vLyBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBzaW1wbGVTZWxlY3RvclJFID0gL15bXFx3LV0qJC87XG52YXIgdG9BcnJheSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsIFtdLnNsaWNlKTtcblxuZnVuY3Rpb24gcXNhKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIHZhciBtYXliZUlEID0gc2VsZWN0b3JbMF0gPT09ICcjJyxcbiAgICAgIG1heWJlQ2xhc3MgPSBzZWxlY3RvclswXSA9PT0gJy4nLFxuICAgICAgbmFtZU9ubHkgPSBtYXliZUlEIHx8IG1heWJlQ2xhc3MgPyBzZWxlY3Rvci5zbGljZSgxKSA6IHNlbGVjdG9yLFxuICAgICAgaXNTaW1wbGUgPSBzaW1wbGVTZWxlY3RvclJFLnRlc3QobmFtZU9ubHkpLFxuICAgICAgZm91bmQ7XG5cbiAgaWYgKGlzU2ltcGxlKSB7XG4gICAgaWYgKG1heWJlSUQpIHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LmdldEVsZW1lbnRCeUlkID8gZWxlbWVudCA6IGRvY3VtZW50O1xuICAgICAgcmV0dXJuIChmb3VuZCA9IGVsZW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZU9ubHkpKSA/IFtmb3VuZF0gOiBbXTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIG1heWJlQ2xhc3MpIHJldHVybiB0b0FycmF5KGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShuYW1lT25seSkpO1xuICAgIHJldHVybiB0b0FycmF5KGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpKTtcbiAgfVxuXG4gIHJldHVybiB0b0FycmF5KGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgX29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vblwiKSk7XG5cbnZhciBfb2ZmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vZmZcIikpO1xuXG52YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKCkge307XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgKDAsIF9vbi5kZWZhdWx0KShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAoMCwgX29mZi5kZWZhdWx0KShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpO1xuICAgIH07XG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IGxpc3RlbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfYWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL2FjdGl2ZUVsZW1lbnQnKTtcblxudmFyIF9hY3RpdmVFbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FjdGl2ZUVsZW1lbnQpO1xuXG52YXIgX2NvbnRhaW5zID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnMnKTtcblxudmFyIF9jb250YWluczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWlucyk7XG5cbnZhciBfaW5ET00gPSByZXF1aXJlKCdkb20taGVscGVycy91dGlsL2luRE9NJyk7XG5cbnZhciBfaW5ET00yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5ET00pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnQnKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9uZW50T3JFbGVtZW50KTtcblxudmFyIF9kZXByZWNhdGVkID0gcmVxdWlyZSgncHJvcC10eXBlcy1leHRyYS9saWIvZGVwcmVjYXRlZCcpO1xuXG52YXIgX2RlcHJlY2F0ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlZCk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZScpO1xuXG52YXIgX2VsZW1lbnRUeXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VsZW1lbnRUeXBlKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9Nb2RhbE1hbmFnZXIgPSByZXF1aXJlKCcuL01vZGFsTWFuYWdlcicpO1xuXG52YXIgX01vZGFsTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Nb2RhbE1hbmFnZXIpO1xuXG52YXIgX1BvcnRhbCA9IHJlcXVpcmUoJy4vUG9ydGFsJyk7XG5cbnZhciBfUG9ydGFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvcnRhbCk7XG5cbnZhciBfUmVmSG9sZGVyID0gcmVxdWlyZSgnLi9SZWZIb2xkZXInKTtcblxudmFyIF9SZWZIb2xkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVmSG9sZGVyKTtcblxudmFyIF9hZGRFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnLi91dGlscy9hZGRFdmVudExpc3RlbmVyJyk7XG5cbnZhciBfYWRkRXZlbnRMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRFdmVudExpc3RlbmVyKTtcblxudmFyIF9hZGRGb2N1c0xpc3RlbmVyID0gcmVxdWlyZSgnLi91dGlscy9hZGRGb2N1c0xpc3RlbmVyJyk7XG5cbnZhciBfYWRkRm9jdXNMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRGb2N1c0xpc3RlbmVyKTtcblxudmFyIF9nZXRDb250YWluZXIgPSByZXF1aXJlKCcuL3V0aWxzL2dldENvbnRhaW5lcicpO1xuXG52YXIgX2dldENvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb250YWluZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cblxudmFyIG1vZGFsTWFuYWdlciA9IG5ldyBfTW9kYWxNYW5hZ2VyMi5kZWZhdWx0KCk7XG5cbi8qKlxuICogTG92ZSB0aGVtIG9yIGhhdGUgdGhlbSwgYDxNb2RhbC8+YCBwcm92aWRlcyBhIHNvbGlkIGZvdW5kYXRpb24gZm9yIGNyZWF0aW5nIGRpYWxvZ3MsIGxpZ2h0Ym94ZXMsIG9yIHdoYXRldmVyIGVsc2UuXG4gKiBUaGUgTW9kYWwgY29tcG9uZW50IHJlbmRlcnMgaXRzIGBjaGlsZHJlbmAgbm9kZSBpbiBmcm9udCBvZiBhIGJhY2tkcm9wIGNvbXBvbmVudC5cbiAqXG4gKiBUaGUgTW9kYWwgb2ZmZXJzIGEgZmV3IGhlbHBmdWwgZmVhdHVyZXMgb3ZlciB1c2luZyBqdXN0IGEgYDxQb3J0YWwvPmAgY29tcG9uZW50IGFuZCBzb21lIHN0eWxlczpcbiAqXG4gKiAtIE1hbmFnZXMgZGlhbG9nIHN0YWNraW5nIHdoZW4gb25lLWF0LWEtdGltZSBqdXN0IGlzbid0IGVub3VnaC5cbiAqIC0gQ3JlYXRlcyBhIGJhY2tkcm9wLCBmb3IgZGlzYWJsaW5nIGludGVyYWN0aW9uIGJlbG93IHRoZSBtb2RhbC5cbiAqIC0gSXQgcHJvcGVybHkgbWFuYWdlcyBmb2N1czsgbW92aW5nIHRvIHRoZSBtb2RhbCBjb250ZW50LCBhbmQga2VlcGluZyBpdCB0aGVyZSB1bnRpbCB0aGUgbW9kYWwgaXMgY2xvc2VkLlxuICogLSBJdCBkaXNhYmxlcyBzY3JvbGxpbmcgb2YgdGhlIHBhZ2UgY29udGVudCB3aGlsZSBvcGVuLlxuICogLSBBZGRzIHRoZSBhcHByb3ByaWF0ZSBBUklBIHJvbGVzIGFyZSBhdXRvbWF0aWNhbGx5LlxuICogLSBFYXNpbHkgcGx1Z2dhYmxlIGFuaW1hdGlvbnMgdmlhIGEgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudC5cbiAqXG4gKiBOb3RlIHRoYXQsIGluIHRoZSBzYW1lIHdheSB0aGUgYmFja2Ryb3AgZWxlbWVudCBwcmV2ZW50cyB1c2VycyBmcm9tIGNsaWNraW5nIG9yIGludGVyYWN0aW5nXG4gKiB3aXRoIHRoZSBwYWdlIGNvbnRlbnQgdW5kZXJuZWF0aCB0aGUgTW9kYWwsIFNjcmVlbiByZWFkZXJzIGFsc28gbmVlZCB0byBiZSBzaWduYWxlZCB0byBub3QgdG9cbiAqIGludGVyYWN0IHdpdGggcGFnZSBjb250ZW50IHdoaWxlIHRoZSBNb2RhbCBpcyBvcGVuLiBUbyBkbyB0aGlzLCB3ZSB1c2UgYSBjb21tb24gdGVjaG5pcXVlIG9mIGFwcGx5aW5nXG4gKiB0aGUgYGFyaWEtaGlkZGVuPSd0cnVlJ2AgYXR0cmlidXRlIHRvIHRoZSBub24tTW9kYWwgZWxlbWVudHMgaW4gdGhlIE1vZGFsIGBjb250YWluZXJgLiBUaGlzIG1lYW5zIHRoYXQgZm9yXG4gKiBhIE1vZGFsIHRvIGJlIHRydWx5IG1vZGFsLCBpdCBzaG91bGQgaGF2ZSBhIGBjb250YWluZXJgIHRoYXQgaXMgX291dHNpZGVfIHlvdXIgYXBwJ3NcbiAqIFJlYWN0IGhpZXJhcmNoeSAoc3VjaCBhcyB0aGUgZGVmYXVsdDogZG9jdW1lbnQuYm9keSkuXG4gKi9cblxudmFyIE1vZGFsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vbWl0UHJvcHMgPSBmdW5jdGlvbiBvbWl0UHJvcHMocHJvcHMsIHByb3BUeXBlcykge1xuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XG4gICAgdmFyIG5ld1Byb3BzID0ge307XG4gICAga2V5cy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BUeXBlcywgcHJvcCkpIHtcbiAgICAgICAgbmV3UHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBuZXdQcm9wcztcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzaG93ID0gX3Byb3BzLnNob3csXG4gICAgICAgIGNvbnRhaW5lciA9IF9wcm9wcy5jb250YWluZXIsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBUcmFuc2l0aW9uID0gX3Byb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIGJhY2tkcm9wID0gX3Byb3BzLmJhY2tkcm9wLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgb25FeGl0ID0gX3Byb3BzLm9uRXhpdCxcbiAgICAgICAgb25FeGl0aW5nID0gX3Byb3BzLm9uRXhpdGluZyxcbiAgICAgICAgb25FbnRlciA9IF9wcm9wcy5vbkVudGVyLFxuICAgICAgICBvbkVudGVyaW5nID0gX3Byb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIG9uRW50ZXJlZCA9IF9wcm9wcy5vbkVudGVyZWQ7XG5cblxuICAgIHZhciBkaWFsb2cgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgdmFyIGZpbHRlcmVkUHJvcHMgPSB0aGlzLm9taXRQcm9wcyh0aGlzLnByb3BzLCBNb2RhbC5wcm9wVHlwZXMpO1xuXG4gICAgdmFyIG1vdW50TW9kYWwgPSBzaG93IHx8IFRyYW5zaXRpb24gJiYgIXRoaXMuc3RhdGUuZXhpdGVkO1xuICAgIGlmICghbW91bnRNb2RhbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF9kaWFsb2ckcHJvcHMgPSBkaWFsb2cucHJvcHMsXG4gICAgICAgIHJvbGUgPSBfZGlhbG9nJHByb3BzLnJvbGUsXG4gICAgICAgIHRhYkluZGV4ID0gX2RpYWxvZyRwcm9wcy50YWJJbmRleDtcblxuXG4gICAgaWYgKHJvbGUgPT09IHVuZGVmaW5lZCB8fCB0YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkaWFsb2cgPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoZGlhbG9nLCB7XG4gICAgICAgIHJvbGU6IHJvbGUgPT09IHVuZGVmaW5lZCA/ICdkb2N1bWVudCcgOiByb2xlLFxuICAgICAgICB0YWJJbmRleDogdGFiSW5kZXggPT0gbnVsbCA/ICctMScgOiB0YWJJbmRleFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICAgIGRpYWxvZyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBUcmFuc2l0aW9uLFxuICAgICAgICB7XG4gICAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICAgIHVubW91bnRPbkV4aXQ6IHRydWUsXG4gICAgICAgICAgJ2luJzogc2hvdyxcbiAgICAgICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgICBvbkV4aXRlZDogdGhpcy5oYW5kbGVIaWRkZW4sXG4gICAgICAgICAgb25FbnRlcjogb25FbnRlcixcbiAgICAgICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkXG4gICAgICAgIH0sXG4gICAgICAgIGRpYWxvZ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBfUG9ydGFsMi5kZWZhdWx0LFxuICAgICAge1xuICAgICAgICByZWY6IHRoaXMuc2V0TW91bnROb2RlLFxuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgb25SZW5kZXJlZDogdGhpcy5vblBvcnRhbFJlbmRlcmVkXG4gICAgICB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgcmVmOiB0aGlzLnNldE1vZGFsTm9kZVJlZixcbiAgICAgICAgICByb2xlOiByb2xlIHx8ICdkaWFsb2cnXG4gICAgICAgIH0sIGZpbHRlcmVkUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSksXG4gICAgICAgIGJhY2tkcm9wICYmIHRoaXMucmVuZGVyQmFja2Ryb3AoKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX1JlZkhvbGRlcjIuZGVmYXVsdCxcbiAgICAgICAgICB7IHJlZjogdGhpcy5zZXREaWFsb2dSZWYgfSxcbiAgICAgICAgICBkaWFsb2dcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXhpdGVkOiBmYWxzZSB9KTtcbiAgICB9IGVsc2UgaWYgKCFuZXh0UHJvcHMudHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGxldCBoYW5kbGVIaWRkZW4gdGFrZSBjYXJlIG9mIG1hcmtpbmcgZXhpdGVkLlxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4aXRlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnNob3cgJiYgbmV4dFByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMuY2hlY2tGb3JGb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMub25TaG93KCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB0aGlzLnByb3BzLnRyYW5zaXRpb247XG5cblxuICAgIGlmIChwcmV2UHJvcHMuc2hvdyAmJiAhdGhpcy5wcm9wcy5zaG93ICYmICF0cmFuc2l0aW9uKSB7XG4gICAgICAvLyBPdGhlcndpc2UgaGFuZGxlSGlkZGVuIHdpbGwgY2FsbCB0aGlzLlxuICAgICAgdGhpcy5vbkhpZGUoKTtcbiAgICB9IGVsc2UgaWYgKCFwcmV2UHJvcHMuc2hvdyAmJiB0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMub25TaG93KCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvdyA9IF9wcm9wczIuc2hvdyxcbiAgICAgICAgdHJhbnNpdGlvbiA9IF9wcm9wczIudHJhbnNpdGlvbjtcblxuXG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG5cbiAgICBpZiAoc2hvdyB8fCB0cmFuc2l0aW9uICYmICF0aGlzLnN0YXRlLmV4aXRlZCkge1xuICAgICAgdGhpcy5vbkhpZGUoKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmF1dG9Gb2N1cyA9IGZ1bmN0aW9uIGF1dG9Gb2N1cygpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpYWxvZ0VsZW1lbnQgPSB0aGlzLmdldERpYWxvZ0VsZW1lbnQoKTtcbiAgICB2YXIgY3VycmVudEFjdGl2ZUVsZW1lbnQgPSAoMCwgX2FjdGl2ZUVsZW1lbnQyLmRlZmF1bHQpKCgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkodGhpcykpO1xuXG4gICAgaWYgKGRpYWxvZ0VsZW1lbnQgJiYgISgwLCBfY29udGFpbnMyLmRlZmF1bHQpKGRpYWxvZ0VsZW1lbnQsIGN1cnJlbnRBY3RpdmVFbGVtZW50KSkge1xuICAgICAgdGhpcy5sYXN0Rm9jdXMgPSBjdXJyZW50QWN0aXZlRWxlbWVudDtcblxuICAgICAgaWYgKCFkaWFsb2dFbGVtZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnVGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuIEZvciB0aGUgYmVuZWZpdCBvZiAnICsgJ2Fzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIHRoZSB0YWJJbmRleCBvZiB0aGUgbm9kZSBpcyBiZWluZyBzZXQgJyArICd0byBcIi0xXCIuJyk7XG5cbiAgICAgICAgZGlhbG9nRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgLTEpO1xuICAgICAgfVxuXG4gICAgICBkaWFsb2dFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXN0b3JlTGFzdEZvY3VzID0gZnVuY3Rpb24gcmVzdG9yZUxhc3RGb2N1cygpIHtcbiAgICAvLyBTdXBwb3J0OiA8PUlFMTEgZG9lc24ndCBzdXBwb3J0IGBmb2N1cygpYCBvbiBzdmcgZWxlbWVudHMgKFJCOiAjOTE3KVxuICAgIGlmICh0aGlzLmxhc3RGb2N1cyAmJiB0aGlzLmxhc3RGb2N1cy5mb2N1cykge1xuICAgICAgdGhpcy5sYXN0Rm9jdXMuZm9jdXMoKTtcbiAgICAgIHRoaXMubGFzdEZvY3VzID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmdldERpYWxvZ0VsZW1lbnQgPSBmdW5jdGlvbiBnZXREaWFsb2dFbGVtZW50KCkge1xuICAgIHJldHVybiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5kaWFsb2cpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5pc1RvcE1vZGFsID0gZnVuY3Rpb24gaXNUb3BNb2RhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5tYW5hZ2VyLmlzVG9wTW9kYWwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTW9kYWwucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIF9Qb3J0YWwyLmRlZmF1bHQucHJvcFR5cGVzLCB7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgTW9kYWxcbiAgICovXG4gIHNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBOb2RlLCBDb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuIFRoZSBNb2RhbCBpcyBhcHBlbmRlZCB0byBpdCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICAgKlxuICAgKiBGb3IgdGhlIHNha2Ugb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgdGhlIGNvbnRhaW5lciBzaG91bGQgdXN1YWxseSBiZSB0aGUgZG9jdW1lbnQgYm9keSwgc28gdGhhdCB0aGUgcmVzdCBvZiB0aGVcbiAgICogcGFnZSBjb250ZW50IGNhbiBiZSBwbGFjZWQgYmVoaW5kIGEgdmlydHVhbCBiYWNrZHJvcCBhcyB3ZWxsIGFzIGEgdmlzdWFsIG9uZS5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19jb21wb25lbnRPckVsZW1lbnQyLmRlZmF1bHQsIF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1vZGFsIGlzIG9wZW5pbmcuXG4gICAqL1xuICBvblNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIGVpdGhlciB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZCwgb3IgdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZC5cbiAgICpcbiAgICogVGhlIGBvbkhpZGVgIGNhbGxiYWNrIG9ubHkgc2lnbmFscyBpbnRlbnQgZnJvbSB0aGUgTW9kYWwsXG4gICAqIHlvdSBtdXN0IGFjdHVhbGx5IHNldCB0aGUgYHNob3dgIHByb3AgdG8gYGZhbHNlYCBmb3IgdGhlIE1vZGFsIHRvIGNsb3NlLlxuICAgKi9cbiAgb25IaWRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEluY2x1ZGUgYSBiYWNrZHJvcCBjb21wb25lbnQuXG4gICAqL1xuICBiYWNrZHJvcDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3N0YXRpYyddKV0pLFxuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGJhY2tkcm9wIGNvbXBvbmVudC4gVXNlZnVsIGZvciBjdXN0b21cbiAgICogYmFja2Ryb3AgcmVuZGVyaW5nLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgcmVuZGVyQmFja2Ryb3A9e3Byb3BzID0+IDxNeUJhY2tkcm9wIHsuLi5wcm9wc30gLz59XG4gICAqIGBgYFxuICAgKi9cbiAgcmVuZGVyQmFja2Ryb3A6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBlc2NhcGUga2V5LCBpZiBzcGVjaWZpZWQgaW4gYGtleWJvYXJkYCwgaXMgcHJlc3NlZC5cbiAgICovXG4gIG9uRXNjYXBlS2V5RG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBTdXBwb3J0IGZvciB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBgb25Fc2NhcGVLZXlEb3duYCBpbnN0ZWFkXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSwgaWYgc3BlY2lmaWVkIGluIGBrZXlib2FyZGAsIGlzIHByZXNzZWQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBvbkVzY2FwZUtleVVwOiAoMCwgX2RlcHJlY2F0ZWQyLmRlZmF1bHQpKF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYywgJ1BsZWFzZSB1c2Ugb25Fc2NhcGVLZXlEb3duIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5JyksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AsIGlmIHNwZWNpZmllZCwgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIHN0eWxlIG9iamVjdCBmb3IgdGhlIGJhY2tkcm9wIGNvbXBvbmVudC5cbiAgICovXG4gIGJhY2tkcm9wU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBIGNzcyBjbGFzcyBvciBjbGFzc2VzIGZvciB0aGUgYmFja2Ryb3AgY29tcG9uZW50LlxuICAgKi9cbiAgYmFja2Ryb3BDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIGNzcyBjbGFzcyBvciBzZXQgb2YgY2xhc3NlcyBhcHBsaWVkIHRvIHRoZSBtb2RhbCBjb250YWluZXIgd2hlbiB0aGUgbW9kYWwgaXMgb3BlbixcbiAgICogYW5kIHJlbW92ZWQgd2hlbiBpdCBpcyBjbG9zZWQuXG4gICAqL1xuICBjb250YWluZXJDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDbG9zZSB0aGUgbW9kYWwgd2hlbiBlc2NhcGUga2V5IGlzIHByZXNzZWRcbiAgICovXG4gIGtleWJvYXJkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBAMi4wLjBgIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQgdXNlZFxuICAgKiB0byBjb250cm9sIGFuaW1hdGlvbnMgZm9yIHRoZSBkaWFsb2cgY29tcG9uZW50LlxuICAgKi9cbiAgdHJhbnNpdGlvbjogX2VsZW1lbnRUeXBlMi5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50IHVzZWRcbiAgICogdG8gY29udHJvbCBhbmltYXRpb25zIGZvciB0aGUgYmFja2Ryb3AgY29tcG9uZW50cy5cbiAgICovXG4gIGJhY2tkcm9wVHJhbnNpdGlvbjogX2VsZW1lbnRUeXBlMi5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuIFRoaXMgYWxzb1xuICAgKiB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgTW9kYWwgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgYXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGBmYWxzZWAgYXMgaXQgbWFrZXMgdGhlIE1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBNb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGBmYWxzZWAgYXMgaXQgbWFrZXMgdGhlIE1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZW5mb3JjZUZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW5cbiAgICovXG4gIHJlc3RvcmVGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIGluXG4gICAqL1xuICBvbkVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBNb2RhbCBiZWdpbnMgdG8gdHJhbnNpdGlvbiBpblxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE1vZGFsIGJlZ2lucyB0byB0cmFuc2l0aW9uIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBNb2RhbCBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIG91dFxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBNb2RhbE1hbmFnZXIgaW5zdGFuY2UgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuXG4gICAqIE1vZGFscy4gVXNlZnVsIHdoZW4gY3VzdG9taXppbmcgaG93IG1vZGFscyBpbnRlcmFjdCB3aXRoaW4gYSBjb250YWluZXJcbiAgICovXG4gIG1hbmFnZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn0pO1xuTW9kYWwuZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiBmYWxzZSxcbiAgYmFja2Ryb3A6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBhdXRvRm9jdXM6IHRydWUsXG4gIGVuZm9yY2VGb2N1czogdHJ1ZSxcbiAgcmVzdG9yZUZvY3VzOiB0cnVlLFxuICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZSgpIHt9LFxuICBtYW5hZ2VyOiBtb2RhbE1hbmFnZXIsXG4gIHJlbmRlckJhY2tkcm9wOiBmdW5jdGlvbiByZW5kZXJCYWNrZHJvcChwcm9wcykge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgcHJvcHMpO1xuICB9XG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIHRoaXMuc3RhdGUgPSB7IGV4aXRlZDogIXRoaXMucHJvcHMuc2hvdyB9O1xuXG4gIHRoaXMucmVuZGVyQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9wcm9wczMgPSBfdGhpczIucHJvcHMsXG4gICAgICAgIGJhY2tkcm9wU3R5bGUgPSBfcHJvcHMzLmJhY2tkcm9wU3R5bGUsXG4gICAgICAgIGJhY2tkcm9wQ2xhc3NOYW1lID0gX3Byb3BzMy5iYWNrZHJvcENsYXNzTmFtZSxcbiAgICAgICAgcmVuZGVyQmFja2Ryb3AgPSBfcHJvcHMzLnJlbmRlckJhY2tkcm9wLFxuICAgICAgICBUcmFuc2l0aW9uID0gX3Byb3BzMy5iYWNrZHJvcFRyYW5zaXRpb247XG5cblxuICAgIHZhciBiYWNrZHJvcFJlZiA9IGZ1bmN0aW9uIGJhY2tkcm9wUmVmKHJlZikge1xuICAgICAgcmV0dXJuIF90aGlzMi5iYWNrZHJvcCA9IHJlZjtcbiAgICB9O1xuXG4gICAgdmFyIGJhY2tkcm9wID0gcmVuZGVyQmFja2Ryb3Aoe1xuICAgICAgcmVmOiBiYWNrZHJvcFJlZixcbiAgICAgIHN0eWxlOiBiYWNrZHJvcFN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBiYWNrZHJvcENsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2s6IF90aGlzMi5oYW5kbGVCYWNrZHJvcENsaWNrXG4gICAgfSk7XG5cbiAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgYmFja2Ryb3AgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgVHJhbnNpdGlvbixcbiAgICAgICAge1xuICAgICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICAnaW4nOiBfdGhpczIucHJvcHMuc2hvd1xuICAgICAgICB9LFxuICAgICAgICBiYWNrZHJvcFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFja2Ryb3A7XG4gIH07XG5cbiAgdGhpcy5vblBvcnRhbFJlbmRlcmVkID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzMi5hdXRvRm9jdXMoKTtcblxuICAgIGlmIChfdGhpczIucHJvcHMub25TaG93KSB7XG4gICAgICBfdGhpczIucHJvcHMub25TaG93KCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25TaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKF90aGlzMik7XG4gICAgdmFyIGNvbnRhaW5lciA9ICgwLCBfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KShfdGhpczIucHJvcHMuY29udGFpbmVyLCBkb2MuYm9keSk7XG5cbiAgICBfdGhpczIucHJvcHMubWFuYWdlci5hZGQoX3RoaXMyLCBjb250YWluZXIsIF90aGlzMi5wcm9wcy5jb250YWluZXJDbGFzc05hbWUpO1xuXG4gICAgX3RoaXMyLl9vbkRvY3VtZW50S2V5ZG93bkxpc3RlbmVyID0gKDAsIF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KShkb2MsICdrZXlkb3duJywgX3RoaXMyLmhhbmRsZURvY3VtZW50S2V5RG93bik7XG5cbiAgICBfdGhpczIuX29uRG9jdW1lbnRLZXl1cExpc3RlbmVyID0gKDAsIF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KShkb2MsICdrZXl1cCcsIF90aGlzMi5oYW5kbGVEb2N1bWVudEtleVVwKTtcblxuICAgIF90aGlzMi5fb25Gb2N1c2luTGlzdGVuZXIgPSAoMCwgX2FkZEZvY3VzTGlzdGVuZXIyLmRlZmF1bHQpKF90aGlzMi5lbmZvcmNlRm9jdXMpO1xuICB9O1xuXG4gIHRoaXMub25IaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzMi5wcm9wcy5tYW5hZ2VyLnJlbW92ZShfdGhpczIpO1xuXG4gICAgX3RoaXMyLl9vbkRvY3VtZW50S2V5ZG93bkxpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgX3RoaXMyLl9vbkRvY3VtZW50S2V5dXBMaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIF90aGlzMi5fb25Gb2N1c2luTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLnJlc3RvcmVGb2N1cykge1xuICAgICAgX3RoaXMyLnJlc3RvcmVMYXN0Rm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5zZXRNb3VudE5vZGUgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgX3RoaXMyLm1vdW50Tm9kZSA9IHJlZiA/IHJlZi5nZXRNb3VudE5vZGUoKSA6IHJlZjtcbiAgfTtcblxuICB0aGlzLnNldE1vZGFsTm9kZVJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICBfdGhpczIubW9kYWxOb2RlID0gcmVmO1xuICB9O1xuXG4gIHRoaXMuc2V0RGlhbG9nUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgIF90aGlzMi5kaWFsb2cgPSByZWY7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVIaWRkZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMyLnNldFN0YXRlKHsgZXhpdGVkOiB0cnVlIH0pO1xuICAgIF90aGlzMi5vbkhpZGUoKTtcblxuICAgIGlmIChfdGhpczIucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIHZhciBfcHJvcHM0O1xuXG4gICAgICAoX3Byb3BzNCA9IF90aGlzMi5wcm9wcykub25FeGl0ZWQuYXBwbHkoX3Byb3BzNCwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfdGhpczIucHJvcHMub25CYWNrZHJvcENsaWNrKSB7XG4gICAgICBfdGhpczIucHJvcHMub25CYWNrZHJvcENsaWNrKGUpO1xuICAgIH1cblxuICAgIGlmIChfdGhpczIucHJvcHMuYmFja2Ryb3AgPT09IHRydWUpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkhpZGUoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVEb2N1bWVudEtleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChfdGhpczIucHJvcHMua2V5Ym9hcmQgJiYgZS5rZXlDb2RlID09PSAyNyAmJiBfdGhpczIuaXNUb3BNb2RhbCgpKSB7XG4gICAgICBpZiAoX3RoaXMyLnByb3BzLm9uRXNjYXBlS2V5RG93bikge1xuICAgICAgICBfdGhpczIucHJvcHMub25Fc2NhcGVLZXlEb3duKGUpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIucHJvcHMub25IaWRlKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaGFuZGxlRG9jdW1lbnRLZXlVcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKF90aGlzMi5wcm9wcy5rZXlib2FyZCAmJiBlLmtleUNvZGUgPT09IDI3ICYmIF90aGlzMi5pc1RvcE1vZGFsKCkpIHtcbiAgICAgIGlmIChfdGhpczIucHJvcHMub25Fc2NhcGVLZXlVcCkge1xuICAgICAgICBfdGhpczIucHJvcHMub25Fc2NhcGVLZXlVcChlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jaGVja0ZvckZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChfaW5ET00yLmRlZmF1bHQpIHtcbiAgICAgIF90aGlzMi5sYXN0Rm9jdXMgPSAoMCwgX2FjdGl2ZUVsZW1lbnQyLmRlZmF1bHQpKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3RoaXMyLnByb3BzLmVuZm9yY2VGb2N1cyB8fCAhX3RoaXMyLl9pc01vdW50ZWQgfHwgIV90aGlzMi5pc1RvcE1vZGFsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGlhbG9nRWxlbWVudCA9IF90aGlzMi5nZXREaWFsb2dFbGVtZW50KCk7XG4gICAgdmFyIGN1cnJlbnRBY3RpdmVFbGVtZW50ID0gKDAsIF9hY3RpdmVFbGVtZW50Mi5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKF90aGlzMikpO1xuXG4gICAgaWYgKGRpYWxvZ0VsZW1lbnQgJiYgISgwLCBfY29udGFpbnMyLmRlZmF1bHQpKGRpYWxvZ0VsZW1lbnQsIGN1cnJlbnRBY3RpdmVFbGVtZW50KSkge1xuICAgICAgZGlhbG9nRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfTtcbn07XG5cbk1vZGFsLk1hbmFnZXIgPSBfTW9kYWxNYW5hZ2VyMi5kZWZhdWx0O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNb2RhbDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIGFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIGlmIChkb2MgPT09IHZvaWQgMCkge1xuICAgIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KSgpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKiBpZSB0aHJvd3MgaWYgbm8gYWN0aXZlIGVsZW1lbnQgKi9cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlcHJlY2F0ZWQ7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgd2FybmVkID0ge307XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWQodmFsaWRhdG9yLCByZWFzb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPSBudWxsKSB7XG4gICAgICB2YXIgbWVzc2FnZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnLicgKyBwcm9wTmFtZTtcblxuICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSh3YXJuZWRbbWVzc2FnZUtleV0sICdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZVNhZmUgKyAnYCBvZiAnICsgKCdgJyArIGNvbXBvbmVudE5hbWVTYWZlICsgJ2AgaXMgZGVwcmVjYXRlZC4gJyArIHJlYXNvbiArICcuJykpO1xuXG4gICAgICB3YXJuZWRbbWVzc2FnZUtleV0gPSB0cnVlO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDUgPyBfbGVuIC0gNSA6IDApLCBfa2V5ID0gNTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gNV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvci5hcHBseSh1bmRlZmluZWQsIFtwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWVdLmNvbmNhdChhcmdzKSk7XG4gIH07XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5mdW5jdGlvbiBfcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxuXG5kZXByZWNhdGVkLl9yZXNldFdhcm5lZCA9IF9yZXNldFdhcm5lZDtcbi8qIGVzbGludC1lbmFibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jbGFzcyA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL2NsYXNzJyk7XG5cbnZhciBfY2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3MpO1xuXG52YXIgX3N0eWxlID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvc3R5bGUnKTtcblxudmFyIF9zdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHlsZSk7XG5cbnZhciBfc2Nyb2xsYmFyU2l6ZSA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZScpO1xuXG52YXIgX3Njcm9sbGJhclNpemUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2Nyb2xsYmFyU2l6ZSk7XG5cbnZhciBfaXNPdmVyZmxvd2luZyA9IHJlcXVpcmUoJy4vdXRpbHMvaXNPdmVyZmxvd2luZycpO1xuXG52YXIgX2lzT3ZlcmZsb3dpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNPdmVyZmxvd2luZyk7XG5cbnZhciBfbWFuYWdlQXJpYUhpZGRlbiA9IHJlcXVpcmUoJy4vdXRpbHMvbWFuYWdlQXJpYUhpZGRlbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihhcnIsIGNiKSB7XG4gIHZhciBpZHggPSAtMTtcbiAgYXJyLnNvbWUoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICBpZiAoY2IoZCwgaSkpIHtcbiAgICAgIGlkeCA9IGk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuXG5mdW5jdGlvbiBmaW5kQ29udGFpbmVyKGRhdGEsIG1vZGFsKSB7XG4gIHJldHVybiBmaW5kSW5kZXhPZihkYXRhLCBmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBkLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTE7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRDb250YWluZXJTdHlsZShzdGF0ZSwgY29udGFpbmVyKSB7XG4gIHZhciBzdHlsZSA9IHsgb3ZlcmZsb3c6ICdoaWRkZW4nIH07XG5cbiAgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGUgYWN0dWFsIGBzdHlsZWAgaGVyZVxuICAvLyBiZWNhc3VlIHdlIHdpbGwgb3ZlcnJpZGUgaXRcbiAgc3RhdGUuc3R5bGUgPSB7XG4gICAgb3ZlcmZsb3c6IGNvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICBwYWRkaW5nUmlnaHQ6IGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nUmlnaHRcbiAgfTtcblxuICBpZiAoc3RhdGUub3ZlcmZsb3dpbmcpIHtcbiAgICAvLyB1c2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmdcbiAgICAvLyB0byBhZGQgb3VyIHNjcm9sbGJhciB3aWR0aFxuICAgIHN0eWxlLnBhZGRpbmdSaWdodCA9IHBhcnNlSW50KCgwLCBfc3R5bGUyLmRlZmF1bHQpKGNvbnRhaW5lciwgJ3BhZGRpbmdSaWdodCcpIHx8IDAsIDEwKSArICgwLCBfc2Nyb2xsYmFyU2l6ZTIuZGVmYXVsdCkoKSArICdweCc7XG4gIH1cblxuICAoMCwgX3N0eWxlMi5kZWZhdWx0KShjb250YWluZXIsIHN0eWxlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29udGFpbmVyU3R5bGUoX3JlZiwgY29udGFpbmVyKSB7XG4gIHZhciBzdHlsZSA9IF9yZWYuc3R5bGU7XG5cblxuICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcbiAgfSk7XG59XG4vKipcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ21lbnQgZm9yIGNvbnRhaW5lcnMgYW5kIHRoZSBtb2RhbHMgaW4gdGhvc2UgY29udGFpbmVycy5cbiAqXG4gKiBAaW50ZXJuYWwgVXNlZCBieSB0aGUgTW9kYWwgdG8gZW5zdXJlIHByb3BlciBzdHlsaW5nIG9mIGNvbnRhaW5lcnMuXG4gKi9cblxudmFyIE1vZGFsTWFuYWdlciA9IGZ1bmN0aW9uIE1vZGFsTWFuYWdlcigpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZjIkaGlkZVNpYmxpbmdOb2RlID0gX3JlZjIuaGlkZVNpYmxpbmdOb2RlcyxcbiAgICAgIGhpZGVTaWJsaW5nTm9kZXMgPSBfcmVmMiRoaWRlU2libGluZ05vZGUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRoaWRlU2libGluZ05vZGUsXG4gICAgICBfcmVmMiRoYW5kbGVDb250YWluZXIgPSBfcmVmMi5oYW5kbGVDb250YWluZXJPdmVyZmxvdyxcbiAgICAgIGhhbmRsZUNvbnRhaW5lck92ZXJmbG93ID0gX3JlZjIkaGFuZGxlQ29udGFpbmVyID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkaGFuZGxlQ29udGFpbmVyO1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbE1hbmFnZXIpO1xuXG4gIHRoaXMuYWRkID0gZnVuY3Rpb24gKG1vZGFsLCBjb250YWluZXIsIGNsYXNzTmFtZSkge1xuICAgIHZhciBtb2RhbElkeCA9IF90aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcbiAgICB2YXIgY29udGFpbmVySWR4ID0gX3RoaXMuY29udGFpbmVycy5pbmRleE9mKGNvbnRhaW5lcik7XG5cbiAgICBpZiAobW9kYWxJZHggIT09IC0xKSB7XG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuXG4gICAgbW9kYWxJZHggPSBfdGhpcy5tb2RhbHMubGVuZ3RoO1xuICAgIF90aGlzLm1vZGFscy5wdXNoKG1vZGFsKTtcblxuICAgIGlmIChfdGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAoMCwgX21hbmFnZUFyaWFIaWRkZW4uaGlkZVNpYmxpbmdzKShjb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5lcklkeCAhPT0gLTEpIHtcbiAgICAgIF90aGlzLmRhdGFbY29udGFpbmVySWR4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB7XG4gICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICAvL3JpZ2h0IG5vdyBvbmx5IHRoZSBmaXJzdCBtb2RhbCBvZiBhIGNvbnRhaW5lciB3aWxsIGhhdmUgaXRzIGNsYXNzZXMgYXBwbGllZFxuICAgICAgY2xhc3NlczogY2xhc3NOYW1lID8gY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykgOiBbXSxcblxuICAgICAgb3ZlcmZsb3dpbmc6ICgwLCBfaXNPdmVyZmxvd2luZzIuZGVmYXVsdCkoY29udGFpbmVyKVxuICAgIH07XG5cbiAgICBpZiAoX3RoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgIHNldENvbnRhaW5lclN0eWxlKGRhdGEsIGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgZGF0YS5jbGFzc2VzLmZvckVhY2goX2NsYXNzMi5kZWZhdWx0LmFkZENsYXNzLmJpbmQobnVsbCwgY29udGFpbmVyKSk7XG5cbiAgICBfdGhpcy5jb250YWluZXJzLnB1c2goY29udGFpbmVyKTtcbiAgICBfdGhpcy5kYXRhLnB1c2goZGF0YSk7XG5cbiAgICByZXR1cm4gbW9kYWxJZHg7XG4gIH07XG5cbiAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAobW9kYWwpIHtcbiAgICB2YXIgbW9kYWxJZHggPSBfdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICBpZiAobW9kYWxJZHggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW5lcklkeCA9IGZpbmRDb250YWluZXIoX3RoaXMuZGF0YSwgbW9kYWwpO1xuICAgIHZhciBkYXRhID0gX3RoaXMuZGF0YVtjb250YWluZXJJZHhdO1xuICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5jb250YWluZXJzW2NvbnRhaW5lcklkeF07XG5cbiAgICBkYXRhLm1vZGFscy5zcGxpY2UoZGF0YS5tb2RhbHMuaW5kZXhPZihtb2RhbCksIDEpO1xuXG4gICAgX3RoaXMubW9kYWxzLnNwbGljZShtb2RhbElkeCwgMSk7XG5cbiAgICAvLyBpZiB0aGF0IHdhcyB0aGUgbGFzdCBtb2RhbCBpbiBhIGNvbnRhaW5lcixcbiAgICAvLyBjbGVhbiB1cCB0aGUgY29udGFpbmVyXG4gICAgaWYgKGRhdGEubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGF0YS5jbGFzc2VzLmZvckVhY2goX2NsYXNzMi5kZWZhdWx0LnJlbW92ZUNsYXNzLmJpbmQobnVsbCwgY29udGFpbmVyKSk7XG5cbiAgICAgIGlmIChfdGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdykge1xuICAgICAgICByZW1vdmVDb250YWluZXJTdHlsZShkYXRhLCBjb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICAoMCwgX21hbmFnZUFyaWFIaWRkZW4uc2hvd1NpYmxpbmdzKShjb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5jb250YWluZXJzLnNwbGljZShjb250YWluZXJJZHgsIDEpO1xuICAgICAgX3RoaXMuZGF0YS5zcGxpY2UoY29udGFpbmVySWR4LCAxKTtcbiAgICB9IGVsc2UgaWYgKF90aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgIC8vb3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIFNSXG4gICAgICAoMCwgX21hbmFnZUFyaWFIaWRkZW4uYXJpYUhpZGRlbikoZmFsc2UsIGRhdGEubW9kYWxzW2RhdGEubW9kYWxzLmxlbmd0aCAtIDFdLm1vdW50Tm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaXNUb3BNb2RhbCA9IGZ1bmN0aW9uIChtb2RhbCkge1xuICAgIHJldHVybiAhIV90aGlzLm1vZGFscy5sZW5ndGggJiYgX3RoaXMubW9kYWxzW190aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gIH07XG5cbiAgdGhpcy5oaWRlU2libGluZ05vZGVzID0gaGlkZVNpYmxpbmdOb2RlcztcbiAgdGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IGhhbmRsZUNvbnRhaW5lck92ZXJmbG93O1xuICB0aGlzLm1vZGFscyA9IFtdO1xuICB0aGlzLmNvbnRhaW5lcnMgPSBbXTtcbiAgdGhpcy5kYXRhID0gW107XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNb2RhbE1hbmFnZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfYWRkQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FkZENsYXNzXCIpKTtcblxuZXhwb3J0cy5hZGRDbGFzcyA9IF9hZGRDbGFzcy5kZWZhdWx0O1xuXG52YXIgX3JlbW92ZUNsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZW1vdmVDbGFzc1wiKSk7XG5cbmV4cG9ydHMucmVtb3ZlQ2xhc3MgPSBfcmVtb3ZlQ2xhc3MuZGVmYXVsdDtcblxudmFyIF9oYXNDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGFzQ2xhc3NcIikpO1xuXG5leHBvcnRzLmhhc0NsYXNzID0gX2hhc0NsYXNzLmRlZmF1bHQ7XG52YXIgX2RlZmF1bHQgPSB7XG4gIGFkZENsYXNzOiBfYWRkQ2xhc3MuZGVmYXVsdCxcbiAgcmVtb3ZlQ2xhc3M6IF9yZW1vdmVDbGFzcy5kZWZhdWx0LFxuICBoYXNDbGFzczogX2hhc0NsYXNzLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcblxudmFyIF9oYXNDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGFzQ2xhc3NcIikpO1xuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghKDAsIF9oYXNDbGFzcy5kZWZhdWx0KShlbGVtZW50LCBjbGFzc05hbWUpKSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArICcgJyArIGNsYXNzTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzVG9SZW1vdmUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO2Vsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuYXJpYUhpZGRlbiA9IGFyaWFIaWRkZW47XG5leHBvcnRzLmhpZGVTaWJsaW5ncyA9IGhpZGVTaWJsaW5ncztcbmV4cG9ydHMuc2hvd1NpYmxpbmdzID0gc2hvd1NpYmxpbmdzO1xuXG52YXIgQkxBQ0tMSVNUID0gWyd0ZW1wbGF0ZScsICdzY3JpcHQnLCAnc3R5bGUnXTtcblxudmFyIGlzSGlkYWJsZSA9IGZ1bmN0aW9uIGlzSGlkYWJsZShfcmVmKSB7XG4gIHZhciBub2RlVHlwZSA9IF9yZWYubm9kZVR5cGUsXG4gICAgICB0YWdOYW1lID0gX3JlZi50YWdOYW1lO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgJiYgQkxBQ0tMSVNULmluZGV4T2YodGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XG59O1xuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiBzaWJsaW5ncyhjb250YWluZXIsIG1vdW50LCBjYikge1xuICBtb3VudCA9IFtdLmNvbmNhdChtb3VudCk7XG5cbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobW91bnQuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgaXNIaWRhYmxlKG5vZGUpKSB7XG4gICAgICBjYihub2RlKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gYXJpYUhpZGRlbihzaG93LCBub2RlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc2hvdykge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGlkZVNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlKSB7XG4gIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKHRydWUsIG5vZGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd1NpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlKSB7XG4gIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKGZhbHNlLCBub2RlKTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIGNvbXBvbmVudCB0byBhbGxvdyBhdHRhY2hpbmcgYSBub24tY29uZmxpY3RpbmcgcmVmIHRvIGFcbiAqIGNoaWxkIGVsZW1lbnQgdGhhdCBtYXkgbm90IGFjY2VwdCByZWZzLlxuICovXG5cbnZhciBSZWZIb2xkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVmSG9sZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWZIb2xkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZkhvbGRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZkhvbGRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIHJldHVybiBSZWZIb2xkZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SZWZIb2xkZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWZIb2xkZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRGb2N1c0xpc3RlbmVyO1xuLyoqXG4gKiBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBhIGZvY3VzaW4gZXZlbnQgc28gdXNpbmcgY2FwdHVyZSBpcyBlYXNpZXN0IHdheSB0byBnZXQgYnViYmxpbmdcbiAqIElFOCBjYW4ndCBkbyBhZGRFdmVudExpc3RlbmVyLCBidXQgZG9lcyBoYXZlIG9uZm9jdXNpbiwgc28gd2UgdXNlIHRoYXQgaW4gaWU4XG4gKlxuICogV2Ugb25seSBhbGxvdyBvbmUgTGlzdGVuZXIgYXQgYSB0aW1lIHRvIGF2b2lkIHN0YWNrIG92ZXJmbG93c1xuICovXG5mdW5jdGlvbiBhZGRGb2N1c0xpc3RlbmVyKGhhbmRsZXIpIHtcbiAgdmFyIHVzZUZvY3VzaW4gPSAhZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcjtcbiAgdmFyIHJlbW92ZSA9IHZvaWQgMDtcblxuICBpZiAodXNlRm9jdXNpbikge1xuICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbmZvY3VzaW4nLCBoYW5kbGVyKTtcbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuZGV0YWNoRXZlbnQoJ29uZm9jdXNpbicsIGhhbmRsZXIpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVyLCB0cnVlKTtcbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVyLCB0cnVlKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHsgcmVtb3ZlOiByZW1vdmUgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogX2VsZW1lbnRUeXBlLmRlZmF1bHRcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBNb2RhbEJvZHkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNb2RhbEJvZHksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsQm9keSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxCb2R5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsQm9keTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTW9kYWxCb2R5LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1vZGFsQm9keS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ21vZGFsLWJvZHknLCBNb2RhbEJvZHkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBfU3R5bGVDb25maWcgPSByZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgY3NzIGNsYXNzIHRvIGFwcGx5IHRvIHRoZSBNb2RhbCBkaWFsb2cgRE9NIG5vZGUuXG4gICAqL1xuICBkaWFsb2dDbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn07XG5cbnZhciBNb2RhbERpYWxvZyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1vZGFsRGlhbG9nLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbERpYWxvZygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxEaWFsb2cucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpYWxvZ0NsYXNzTmFtZSA9IF90aGlzJHByb3BzLmRpYWxvZ0NsYXNzTmFtZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBvbk1vdXNlRG93bkRpYWxvZyA9IF90aGlzJHByb3BzLm9uTW91c2VEb3duRGlhbG9nLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImRpYWxvZ0NsYXNzTmFtZVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJvbk1vdXNlRG93bkRpYWxvZ1wiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGJzQ2xhc3NOYW1lID0gKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGJzUHJvcHMpO1xuICAgIHZhciBtb2RhbFN0eWxlID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSwgc3R5bGUpO1xuICAgIHZhciBkaWFsb2dDbGFzc2VzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2JzQ2xhc3NOYW1lXSA9IGZhbHNlLCBfZXh0ZW5kczJbKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGJzUHJvcHMsICdkaWFsb2cnKV0gPSB0cnVlLCBfZXh0ZW5kczIpKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICByb2xlOiBcImRpYWxvZ1wiLFxuICAgICAgc3R5bGU6IG1vZGFsU3R5bGUsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGJzQ2xhc3NOYW1lKVxuICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGRpYWxvZ0NsYXNzTmFtZSwgZGlhbG9nQ2xhc3NlcyksXG4gICAgICBvbk1vdXNlRG93bjogb25Nb3VzZURvd25EaWFsb2dcbiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGJzUHJvcHMsICdjb250ZW50JyksXG4gICAgICByb2xlOiBcImRvY3VtZW50XCJcbiAgICB9LCBjaGlsZHJlbikpKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxEaWFsb2c7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsRGlhbG9nLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnbW9kYWwnLCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSwgX1N0eWxlQ29uZmlnLlNpemUuU01BTExdLCBNb2RhbERpYWxvZykpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBfZWxlbWVudFR5cGUuZGVmYXVsdFxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIE1vZGFsRm9vdGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTW9kYWxGb290ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsRm9vdGVyKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbEZvb3Rlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbEZvb3Rlcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTW9kYWxGb290ZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTW9kYWxGb290ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdtb2RhbC1mb290ZXInLCBNb2RhbEZvb3Rlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSk7XG5cbnZhciBfQ2xvc2VCdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Nsb3NlQnV0dG9uXCIpKTtcblxuLy8gVE9ETzogYGFyaWEtbGFiZWxgIHNob3VsZCBiZSBgY2xvc2VMYWJlbGAuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogUHJvdmlkZXMgYW4gYWNjZXNzaWJsZSBsYWJlbCBmb3IgdGhlIGNsb3NlXG4gICAqIGJ1dHRvbi4gSXQgaXMgdXNlZCBmb3IgQXNzaXN0aXZlIFRlY2hub2xvZ3kgd2hlbiB0aGUgbGFiZWwgdGV4dCBpcyBub3RcbiAgICogcmVhZGFibGUuXG4gICAqL1xuICBjbG9zZUxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIENvbXBvbmVudCBzaG91bGQgY29udGFpbiBhIGNsb3NlIGJ1dHRvblxuICAgKi9cbiAgY2xvc2VCdXR0b246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNsb3NlIGJ1dHRvbiBpcyBjbGlja2VkLiBJZiB1c2VkIGRpcmVjdGx5IGluc2lkZVxuICAgKiBhIE1vZGFsIGNvbXBvbmVudCwgdGhlIG9uSGlkZSB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgcHJvcGFnYXRlZCB1cCB0byB0aGVcbiAgICogcGFyZW50IE1vZGFsIGBvbkhpZGVgLlxuICAgKi9cbiAgb25IaWRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNsb3NlTGFiZWw6ICdDbG9zZScsXG4gIGNsb3NlQnV0dG9uOiBmYWxzZVxufTtcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19tb2RhbDogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBvbkhpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG4gIH0pXG59O1xuXG52YXIgTW9kYWxIZWFkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNb2RhbEhlYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxIZWFkZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsSGVhZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsb3NlTGFiZWwgPSBfdGhpcyRwcm9wcy5jbG9zZUxhYmVsLFxuICAgICAgICBjbG9zZUJ1dHRvbiA9IF90aGlzJHByb3BzLmNsb3NlQnV0dG9uLFxuICAgICAgICBvbkhpZGUgPSBfdGhpcyRwcm9wcy5vbkhpZGUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbG9zZUxhYmVsXCIsIFwiY2xvc2VCdXR0b25cIiwgXCJvbkhpZGVcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgdmFyIG1vZGFsID0gdGhpcy5jb250ZXh0LiRic19tb2RhbDtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pLCBjbG9zZUJ1dHRvbiAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DbG9zZUJ1dHRvbi5kZWZhdWx0LCB7XG4gICAgICBsYWJlbDogY2xvc2VMYWJlbCxcbiAgICAgIG9uQ2xpY2s6ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKG1vZGFsICYmIG1vZGFsLm9uSGlkZSwgb25IaWRlKVxuICAgIH0pLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsSGVhZGVyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Nb2RhbEhlYWRlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Nb2RhbEhlYWRlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5Nb2RhbEhlYWRlci5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ21vZGFsLWhlYWRlcicsIE1vZGFsSGVhZGVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBsYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGxhYmVsOiAnQ2xvc2UnXG59O1xuXG52YXIgQ2xvc2VCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShDbG9zZUJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2xvc2VCdXR0b24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENsb3NlQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGxhYmVsID0gX3RoaXMkcHJvcHMubGFiZWwsXG4gICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBjbGFzc05hbWU6IFwiY2xvc2VcIixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gICAgfSwgXCJcXHhEN1wiKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICAgIH0sIGxhYmVsKSk7XG4gIH07XG5cbiAgcmV0dXJuIENsb3NlQnV0dG9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DbG9zZUJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5DbG9zZUJ1dHRvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgX2RlZmF1bHQgPSBDbG9zZUJ1dHRvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IF9lbGVtZW50VHlwZS5kZWZhdWx0XG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdoNCdcbn07XG5cbnZhciBNb2RhbFRpdGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTW9kYWxUaXRsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxUaXRsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxUaXRsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbFRpdGxlO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Nb2RhbFRpdGxlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1vZGFsVGl0bGUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdtb2RhbC10aXRsZScsIE1vZGFsVGl0bGUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzcGxpdENvbXBvbmVudFByb3BzO1xuXG52YXIgX2VudHJpZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIikpO1xuXG5mdW5jdGlvbiBzcGxpdENvbXBvbmVudFByb3BzKHByb3BzLCBDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudFByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXM7XG4gIHZhciBwYXJlbnRQcm9wcyA9IHt9O1xuICB2YXIgY2hpbGRQcm9wcyA9IHt9O1xuICAoMCwgX2VudHJpZXMuZGVmYXVsdCkocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBfcmVmWzBdLFxuICAgICAgICBwcm9wVmFsdWUgPSBfcmVmWzFdO1xuXG4gICAgaWYgKGNvbXBvbmVudFByb3BUeXBlc1twcm9wTmFtZV0pIHtcbiAgICAgIHBhcmVudFByb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRQcm9wc1twcm9wTmFtZV0gPSBwcm9wVmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtwYXJlbnRQcm9wcywgY2hpbGRQcm9wc107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBJbnB1dEdyb3VwQWRkb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShJbnB1dEdyb3VwQWRkb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElucHV0R3JvdXBBZGRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW5wdXRHcm91cEFkZG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW5wdXRHcm91cEFkZG9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdpbnB1dC1ncm91cC1hZGRvbicsIElucHV0R3JvdXBBZGRvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIElucHV0R3JvdXBCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShJbnB1dEdyb3VwQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbnB1dEdyb3VwQnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbnB1dEdyb3VwQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW5wdXRHcm91cEJ1dHRvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnaW5wdXQtZ3JvdXAtYnRuJywgSW5wdXRHcm91cEJ1dHRvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImRlZmF1bHRcImluIGU/ZS5kZWZhdWx0OmV9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFJlYWN0PV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO2Z1bmN0aW9uIEFwcENvbnRhaW5lcihlKXtyZXR1cm4gQXBwQ29udGFpbmVyLndhcm5BYm91dEhNUkRpc2FibGVkJiYoQXBwQ29udGFpbmVyLndhcm5BYm91dEhNUkRpc2FibGVkPSEwLGNvbnNvbGUuZXJyb3IoXCJSZWFjdC1Ib3QtTG9hZGVyOiBtaXNjb25maWd1cmF0aW9uIGRldGVjdGVkLCB1c2luZyBwcm9kdWN0aW9uIHZlcnNpb24gaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnQuXCIpLGNvbnNvbGUuZXJyb3IoXCJSZWFjdC1Ib3QtTG9hZGVyOiBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIG5vdCBlbmFibGVkLlwiKSksUmVhY3QuQ2hpbGRyZW4ub25seShlLmNoaWxkcmVuKX1BcHBDb250YWluZXIud2FybkFib3V0SE1SRGlzYWJsZWQ9ITE7dmFyIGhvdD1mdW5jdGlvbiBlKCl7cmV0dXJuIGUuc2hvdWxkV3JhcFdpdGhBcHBDb250YWluZXI/ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEFwcENvbnRhaW5lcixudWxsLFJlYWN0LmNyZWF0ZUVsZW1lbnQoZSxuKSl9fTpmdW5jdGlvbihlKXtyZXR1cm4gZX19O2hvdC5zaG91bGRXcmFwV2l0aEFwcENvbnRhaW5lcj0hMTt2YXIgYXJlQ29tcG9uZW50c0VxdWFsPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGU9PT1ufSxzZXRDb25maWc9ZnVuY3Rpb24oKXt9LGNvbGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGNvbmZpZ3VyZUNvbXBvbmVudD1mdW5jdGlvbigpe307ZXhwb3J0cy5BcHBDb250YWluZXI9QXBwQ29udGFpbmVyLGV4cG9ydHMuaG90PWhvdCxleHBvcnRzLmFyZUNvbXBvbmVudHNFcXVhbD1hcmVDb21wb25lbnRzRXF1YWwsZXhwb3J0cy5zZXRDb25maWc9c2V0Q29uZmlnLGV4cG9ydHMuY29sZD1jb2xkLGV4cG9ydHMuY29uZmlndXJlQ29tcG9uZW50PWNvbmZpZ3VyZUNvbXBvbmVudDtcbiJdLCJzb3VyY2VSb290IjoiIn0=