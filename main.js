!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=143)}([function(e,t,r){"use strict";e.exports=r(145)},function(e,t,r){"use strict";r.r(t),function(e,n){r.d(t,"$mobx",(function(){return C})),r.d(t,"FlowCancellationError",(function(){return Mt})),r.d(t,"IDerivationState",(function(){return J})),r.d(t,"ObservableMap",(function(){return yr})),r.d(t,"ObservableSet",(function(){return Pr})),r.d(t,"Reaction",(function(){return He})),r.d(t,"_allowStateChanges",(function(){return ge})),r.d(t,"_allowStateChangesInsideComputed",(function(){return Ce})),r.d(t,"_allowStateReadsEnd",(function(){return de})),r.d(t,"_allowStateReadsStart",(function(){return pe})),r.d(t,"_endAction",(function(){return Pe})),r.d(t,"_getAdministration",(function(){return Ir})),r.d(t,"_getGlobalState",(function(){return We})),r.d(t,"_interceptReads",(function(){return Rt})),r.d(t,"_isComputingDerivation",(function(){return ie})),r.d(t,"_resetGlobalState",(function(){return Ke})),r.d(t,"_startAction",(function(){return Oe})),r.d(t,"action",(function(){return ot})),r.d(t,"autorun",(function(){return ut})),r.d(t,"comparer",(function(){return A})),r.d(t,"computed",(function(){return re})),r.d(t,"configure",(function(){return Et})),r.d(t,"createAtom",(function(){return R})),r.d(t,"decorate",(function(){return ht})),r.d(t,"entries",(function(){return Kt})),r.d(t,"extendObservable",(function(){return bt})),r.d(t,"flow",(function(){return Tt})),r.d(t,"get",(function(){return qt})),r.d(t,"getAtom",(function(){return Lr})),r.d(t,"getDebugName",(function(){return kr})),r.d(t,"getDependencyTree",(function(){return vt})),r.d(t,"getObserverTree",(function(){return Pt})),r.d(t,"has",(function(){return jt})),r.d(t,"intercept",(function(){return At})),r.d(t,"isAction",(function(){return it})),r.d(t,"isArrayLike",(function(){return v})),r.d(t,"isBoxedObservable",(function(){return we})),r.d(t,"isComputed",(function(){return It})),r.d(t,"isComputedProp",(function(){return kt})),r.d(t,"isFlowCancellationError",(function(){return Ct})),r.d(t,"isObservable",(function(){return Ut})),r.d(t,"isObservableArray",(function(){return hr})),r.d(t,"isObservableMap",(function(){return vr})),r.d(t,"isObservableObject",(function(){return Ar})),r.d(t,"isObservableProp",(function(){return xt})),r.d(t,"isObservableSet",(function(){return gr})),r.d(t,"keys",(function(){return St})),r.d(t,"observable",(function(){return Q})),r.d(t,"observe",(function(){return Ft})),r.d(t,"onBecomeObserved",(function(){return ft})),r.d(t,"onBecomeUnobserved",(function(){return pt})),r.d(t,"onReactionError",(function(){return $e})),r.d(t,"reaction",(function(){return ct})),r.d(t,"remove",(function(){return zt})),r.d(t,"runInAction",(function(){return at})),r.d(t,"set",(function(){return Nt})),r.d(t,"spy",(function(){return et})),r.d(t,"toJS",(function(){return Ht})),r.d(t,"trace",(function(){return $t})),r.d(t,"transaction",(function(){return Qt})),r.d(t,"untracked",(function(){return se})),r.d(t,"values",(function(){return Wt})),r.d(t,"when",(function(){return Xt}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};var a=function(){return(a=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function i(e){var t="function"==typeof Symbol&&e[Symbol.iterator],r=0;return t?t.call(e):{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}function l(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i}function u(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(l(arguments[t]));return e}var _=[];Object.freeze(_);var s={};function c(){return++Se.mobxGuid}function f(e){throw p(!1,e),"X"}function p(e,t){if(!e)throw new Error("[mobx] "+(t||"An invariant failed, however the error is obfuscated because this is a production build."))}Object.freeze(s);function d(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var E=function(){};function h(e){return null!==e&&"object"==typeof e}function b(e){if(null===e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return t===Object.prototype||null===t}function m(e,t,r){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0,value:r})}function y(e,t){var r="isMobX"+e;return t.prototype[r]=!0,function(e){return h(e)&&!0===e[r]}}function v(e){return Array.isArray(e)||hr(e)}function O(e){return e instanceof Map}function P(e){return e instanceof Set}function g(e){var t=new Set;for(var r in e)t.add(r);return Object.getOwnPropertySymbols(e).forEach((function(r){Object.getOwnPropertyDescriptor(e,r).enumerable&&t.add(r)})),Array.from(t)}function D(e){return e&&e.toString?e.toString():new String(e).toString()}function M(e){return null===e?null:"object"==typeof e?""+e:e}var C=Symbol("mobx administration"),T=function(){function e(e){void 0===e&&(e="Atom@"+c()),this.name=e,this.isPendingUnobservation=!1,this.isBeingObserved=!1,this.observers=new Set,this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=J.NOT_TRACKING}return e.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(e){return e()}))},e.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(e){return e()}))},e.prototype.reportObserved=function(){return Ve(this)},e.prototype.reportChanged=function(){qe(),function(e){if(e.lowestObserverState===J.STALE)return;e.lowestObserverState=J.STALE,e.observers.forEach((function(t){t.dependenciesState===J.UP_TO_DATE&&(t.isTracing!==Z.NONE&&Ge(t,e),t.onBecomeStale()),t.dependenciesState=J.STALE}))}(this),Fe()},e.prototype.toString=function(){return this.name},e}(),w=y("Atom",T);function R(e,t,r){void 0===t&&(t=E),void 0===r&&(r=E);var n=new T(e);return t!==E&&ft(n,t),r!==E&&pt(n,r),n}var A={identity:function(e,t){return e===t},structural:function(e,t){return Ur(e,t)},default:function(e,t){return Object.is(e,t)},shallow:function(e,t){return Ur(e,t,1)}},L=Symbol("mobx did run lazy initializers"),I=Symbol("mobx pending decorators"),k={},B={};function U(e,t){var r=t?k:B;return r[e]||(r[e]={configurable:!0,enumerable:t,get:function(){return x(this),this[e]},set:function(t){x(this),this[e]=t}})}function x(e){var t,r;if(!0!==e[L]){var n=e[I];if(n){m(e,L,!0);var o=u(Object.getOwnPropertySymbols(n),Object.keys(n));try{for(var a=i(o),l=a.next();!l.done;l=a.next()){var _=n[l.value];_.propertyCreator(e,_.prop,_.descriptor,_.decoratorTarget,_.decoratorArguments)}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}}}}function S(e,t){return function(){var r,n=function(n,o,i,l){if(!0===l)return t(n,o,i,n,r),null;if(!Object.prototype.hasOwnProperty.call(n,I)){var u=n[I];m(n,I,a({},u))}return n[I][o]={prop:o,propertyCreator:t,descriptor:i,decoratorTarget:n,decoratorArguments:r},U(o,e)};return W(arguments)?(r=_,n.apply(null,arguments)):(r=Array.prototype.slice.call(arguments),n)}}function W(e){return(2===e.length||3===e.length)&&("string"==typeof e[1]||"symbol"==typeof e[1])||4===e.length&&!0===e[3]}function K(e,t,r){return Ut(e)?e:Array.isArray(e)?Q.array(e,{name:r}):b(e)?Q.object(e,void 0,{name:r}):O(e)?Q.map(e,{name:r}):P(e)?Q.set(e,{name:r}):e}function N(e){return e}function z(t){p(t);var r=S(!0,(function(e,r,n,o,a){var i=n?n.initializer?n.initializer.call(e):n.value:void 0;Mr(e).addObservableProp(r,i,t)})),n=(void 0!==e&&e.env,r);return n.enhancer=t,n}var j={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function q(e){return null==e?j:"string"==typeof e?{name:e,deep:!0,proxy:!0}:e}Object.freeze(j);var F=z(K),V=z((function(e,t,r){return null==e||Ar(e)||hr(e)||vr(e)||gr(e)?e:Array.isArray(e)?Q.array(e,{name:r,deep:!1}):b(e)?Q.object(e,void 0,{name:r,deep:!1}):O(e)?Q.map(e,{name:r,deep:!1}):P(e)?Q.set(e,{name:r,deep:!1}):f(!1)})),G=z(N),H=z((function(e,t,r){return Ur(e,t)?t:e}));function $(e){return e.defaultDecorator?e.defaultDecorator.enhancer:!1===e.deep?N:K}var Y={box:function(e,t){arguments.length>2&&X("box");var r=q(t);return new Te(e,$(r),r.name,!0,r.equals)},array:function(e,t){arguments.length>2&&X("array");var r=q(t);return cr(e,$(r),r.name)},map:function(e,t){arguments.length>2&&X("map");var r=q(t);return new yr(e,$(r),r.name)},set:function(e,t){arguments.length>2&&X("set");var r=q(t);return new Pr(e,$(r),r.name)},object:function(e,t,r){"string"==typeof arguments[1]&&X("object");var n=q(r);if(!1===n.proxy)return bt({},e,t,n);var o=mt(n),a=bt({},void 0,void 0,n),i=nr(a);return yt(i,e,t,o),i},ref:G,shallow:V,deep:F,struct:H},Q=function(e,t,r){if("string"==typeof arguments[1]||"symbol"==typeof arguments[1])return F.apply(null,arguments);if(Ut(e))return e;var n=b(e)?Q.object(e,t,r):Array.isArray(e)?Q.array(e,t):O(e)?Q.map(e,t):P(e)?Q.set(e,t):e;if(n!==e)return n;f(!1)};function X(e){f("Expected one or two arguments to observable."+e+". Did you accidentally try to use observable."+e+" as decorator?")}Object.keys(Y).forEach((function(e){return Q[e]=Y[e]}));var J,Z,ee=S(!1,(function(e,t,r,n,o){var i=r.get,l=r.set,u=o[0]||{};Mr(e).addComputedProp(e,t,a({get:i,set:l,context:e},u))})),te=ee({equals:A.structural}),re=function(e,t,r){if("string"==typeof t)return ee.apply(null,arguments);if(null!==e&&"object"==typeof e&&1===arguments.length)return ee.apply(null,arguments);var n="object"==typeof t?t:{};return n.get=e,n.set="function"==typeof t?t:n.set,n.name=n.name||e.name||"",new Re(n)};re.struct=te,function(e){e[e.NOT_TRACKING=-1]="NOT_TRACKING",e[e.UP_TO_DATE=0]="UP_TO_DATE",e[e.POSSIBLY_STALE=1]="POSSIBLY_STALE",e[e.STALE=2]="STALE"}(J||(J={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Z||(Z={}));var ne=function(e){this.cause=e};function oe(e){return e instanceof ne}function ae(e){switch(e.dependenciesState){case J.UP_TO_DATE:return!1;case J.NOT_TRACKING:case J.STALE:return!0;case J.POSSIBLY_STALE:for(var t=pe(!0),r=ce(),n=e.observing,o=n.length,a=0;a<o;a++){var i=n[a];if(Ae(i)){if(Se.disableErrorBoundaries)i.get();else try{i.get()}catch(e){return fe(r),de(t),!0}if(e.dependenciesState===J.STALE)return fe(r),de(t),!0}}return Ee(e),fe(r),de(t),!1}}function ie(){return null!==Se.trackingDerivation}function le(e){var t=e.observers.size>0;Se.computationDepth>0&&t&&f(!1),Se.allowStateChanges||!t&&"strict"!==Se.enforceActions||f(!1)}function ue(e,t,r){var n=pe(!0);Ee(e),e.newObserving=new Array(e.observing.length+100),e.unboundDepsCount=0,e.runId=++Se.runId;var o,a=Se.trackingDerivation;if(Se.trackingDerivation=e,!0===Se.disableErrorBoundaries)o=t.call(r);else try{o=t.call(r)}catch(e){o=new ne(e)}return Se.trackingDerivation=a,function(e){for(var t=e.observing,r=e.observing=e.newObserving,n=J.UP_TO_DATE,o=0,a=e.unboundDepsCount,i=0;i<a;i++){0===(l=r[i]).diffValue&&(l.diffValue=1,o!==i&&(r[o]=l),o++),l.dependenciesState>n&&(n=l.dependenciesState)}r.length=o,e.newObserving=null,a=t.length;for(;a--;){0===(l=t[a]).diffValue&&ze(l,e),l.diffValue=0}for(;o--;){var l;1===(l=r[o]).diffValue&&(l.diffValue=0,Ne(l,e))}n!==J.UP_TO_DATE&&(e.dependenciesState=n,e.onBecomeStale())}(e),de(n),o}function _e(e){var t=e.observing;e.observing=[];for(var r=t.length;r--;)ze(t[r],e);e.dependenciesState=J.NOT_TRACKING}function se(e){var t=ce();try{return e()}finally{fe(t)}}function ce(){var e=Se.trackingDerivation;return Se.trackingDerivation=null,e}function fe(e){Se.trackingDerivation=e}function pe(e){var t=Se.allowStateReads;return Se.allowStateReads=e,t}function de(e){Se.allowStateReads=e}function Ee(e){if(e.dependenciesState!==J.UP_TO_DATE){e.dependenciesState=J.UP_TO_DATE;for(var t=e.observing,r=t.length;r--;)t[r].lowestObserverState=J.UP_TO_DATE}}var he=0,be=1,me=Object.getOwnPropertyDescriptor((function(){}),"name");me&&me.configurable;function ye(e,t,r){var n=function(){return ve(e,t,r||this,arguments)};return n.isMobxAction=!0,n}function ve(e,t,r,n){var o=Oe(e,r,n);try{return t.apply(r,n)}catch(e){throw o.error=e,e}finally{Pe(o)}}function Oe(e,t,r){var n=0,o=ce();qe();var a={prevDerivation:o,prevAllowStateChanges:De(!0),prevAllowStateReads:pe(!0),notifySpy:!1,startTime:n,actionId:be++,parentActionId:he};return he=a.actionId,a}function Pe(e){he!==e.actionId&&f("invalid action stack. did you forget to finish an action?"),he=e.parentActionId,void 0!==e.error&&(Se.suppressReactionErrors=!0),Me(e.prevAllowStateChanges),de(e.prevAllowStateReads),Fe(),fe(e.prevDerivation),e.notifySpy,Se.suppressReactionErrors=!1}function ge(e,t){var r,n=De(e);try{r=t()}finally{Me(n)}return r}function De(e){var t=Se.allowStateChanges;return Se.allowStateChanges=e,t}function Me(e){Se.allowStateChanges=e}function Ce(e){var t,r=Se.computationDepth;Se.computationDepth=0;try{t=e()}finally{Se.computationDepth=r}return t}var Te=function(e){function t(t,r,n,o,a){void 0===n&&(n="ObservableValue@"+c()),void 0===o&&(o=!0),void 0===a&&(a=A.default);var i=e.call(this,n)||this;return i.enhancer=r,i.name=n,i.equals=a,i.hasUnreportedChange=!1,i.value=r(t,void 0,n),i}return function(e,t){function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.prototype.set=function(e){this.value;if((e=this.prepareNewValue(e))!==Se.UNCHANGED){0,this.setNewValue(e)}},t.prototype.prepareNewValue=function(e){if(le(this),or(this)){var t=ir(this,{object:this,type:"update",newValue:e});if(!t)return Se.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value,this.name),this.equals(this.value,e)?Se.UNCHANGED:e},t.prototype.setNewValue=function(e){var t=this.value;this.value=e,this.reportChanged(),lr(this)&&_r(this,{type:"update",object:this,newValue:e,oldValue:t})},t.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},t.prototype.intercept=function(e){return ar(this,e)},t.prototype.observe=function(e,t){return t&&e({object:this,type:"update",newValue:this.value,oldValue:void 0}),ur(this,e)},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.value+"]"},t.prototype.valueOf=function(){return M(this.get())},t.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},t}(T),we=y("ObservableValue",Te),Re=function(){function e(e){this.dependenciesState=J.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isBeingObserved=!1,this.isPendingUnobservation=!1,this.observers=new Set,this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=J.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+c(),this.value=new ne(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=Z.NONE,p(e.get,"missing option for computed: get"),this.derivation=e.get,this.name=e.name||"ComputedValue@"+c(),e.set&&(this.setter=ye(this.name+"-setter",e.set)),this.equals=e.equals||(e.compareStructural||e.struct?A.structural:A.default),this.scope=e.context,this.requiresReaction=!!e.requiresReaction,this.keepAlive=!!e.keepAlive}return e.prototype.onBecomeStale=function(){!function(e){if(e.lowestObserverState!==J.UP_TO_DATE)return;e.lowestObserverState=J.POSSIBLY_STALE,e.observers.forEach((function(t){t.dependenciesState===J.UP_TO_DATE&&(t.dependenciesState=J.POSSIBLY_STALE,t.isTracing!==Z.NONE&&Ge(t,e),t.onBecomeStale())}))}(this)},e.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(e){return e()}))},e.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(e){return e()}))},e.prototype.get=function(){this.isComputing&&f("Cycle detected in computation "+this.name+": "+this.derivation),0!==Se.inBatch||0!==this.observers.size||this.keepAlive?(Ve(this),ae(this)&&this.trackAndCompute()&&function(e){if(e.lowestObserverState===J.STALE)return;e.lowestObserverState=J.STALE,e.observers.forEach((function(t){t.dependenciesState===J.POSSIBLY_STALE?t.dependenciesState=J.STALE:t.dependenciesState===J.UP_TO_DATE&&(e.lowestObserverState=J.UP_TO_DATE)}))}(this)):ae(this)&&(this.warnAboutUntrackedRead(),qe(),this.value=this.computeValue(!1),Fe());var e=this.value;if(oe(e))throw e.cause;return e},e.prototype.peek=function(){var e=this.computeValue(!1);if(oe(e))throw e.cause;return e},e.prototype.set=function(e){if(this.setter){p(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,e)}finally{this.isRunningSetter=!1}}else p(!1,!1)},e.prototype.trackAndCompute=function(){var e=this.value,t=this.dependenciesState===J.NOT_TRACKING,r=this.computeValue(!0),n=t||oe(e)||oe(r)||!this.equals(e,r);return n&&(this.value=r),n},e.prototype.computeValue=function(e){var t;if(this.isComputing=!0,Se.computationDepth++,e)t=ue(this,this.derivation,this.scope);else if(!0===Se.disableErrorBoundaries)t=this.derivation.call(this.scope);else try{t=this.derivation.call(this.scope)}catch(e){t=new ne(e)}return Se.computationDepth--,this.isComputing=!1,t},e.prototype.suspend=function(){this.keepAlive||(_e(this),this.value=void 0)},e.prototype.observe=function(e,t){var r=this,n=!0,o=void 0;return ut((function(){var a=r.get();if(!n||t){var i=ce();e({type:"update",object:r,newValue:a,oldValue:o}),fe(i)}n=!1,o=a}))},e.prototype.warnAboutUntrackedRead=function(){},e.prototype.toJSON=function(){return this.get()},e.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},e.prototype.valueOf=function(){return M(this.get())},e.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},e}(),Ae=y("ComputedValue",Re),Le=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","allowStateReads","disableErrorBoundaries","runId","UNCHANGED"],Ie=function(){this.version=5,this.UNCHANGED={},this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.allowStateReads=!0,this.enforceActions=!1,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.computedConfigurable=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1},ke={};function Be(){return"undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:ke}var Ue=!0,xe=!1,Se=function(){var e=Be();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(Ue=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new Ie).version&&(Ue=!1),Ue?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new Ie):(setTimeout((function(){xe||f("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`")}),1),new Ie)}();function We(){return Se}function Ke(){var e=new Ie;for(var t in e)-1===Le.indexOf(t)&&(Se[t]=e[t]);Se.allowStateChanges=!Se.enforceActions}function Ne(e,t){e.observers.add(t),e.lowestObserverState>t.dependenciesState&&(e.lowestObserverState=t.dependenciesState)}function ze(e,t){e.observers.delete(t),0===e.observers.size&&je(e)}function je(e){!1===e.isPendingUnobservation&&(e.isPendingUnobservation=!0,Se.pendingUnobservations.push(e))}function qe(){Se.inBatch++}function Fe(){if(0==--Se.inBatch){Qe();for(var e=Se.pendingUnobservations,t=0;t<e.length;t++){var r=e[t];r.isPendingUnobservation=!1,0===r.observers.size&&(r.isBeingObserved&&(r.isBeingObserved=!1,r.onBecomeUnobserved()),r instanceof Re&&r.suspend())}Se.pendingUnobservations=[]}}function Ve(e){var t=Se.trackingDerivation;return null!==t?(t.runId!==e.lastAccessedBy&&(e.lastAccessedBy=t.runId,t.newObserving[t.unboundDepsCount++]=e,e.isBeingObserved||(e.isBeingObserved=!0,e.onBecomeObserved())),!0):(0===e.observers.size&&Se.inBatch>0&&je(e),!1)}function Ge(e,t){if(console.log("[mobx.trace] '"+e.name+"' is invalidated due to a change in: '"+t.name+"'"),e.isTracing===Z.BREAK){var r=[];!function e(t,r,n){if(r.length>=1e3)return void r.push("(and many more)");r.push(""+new Array(n).join("\t")+t.name),t.dependencies&&t.dependencies.forEach((function(t){return e(t,r,n+1)}))}(vt(e),r,1),new Function("debugger;\n/*\nTracing '"+e.name+"'\n\nYou are entering this break point because derivation '"+e.name+"' is being traced and '"+t.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(e instanceof Re?e.derivation.toString().replace(/[*]\//g,"/"):"")+"\n\nThe dependencies for this derivation are:\n\n"+r.join("\n")+"\n*/\n    ")()}}var He=function(){function e(e,t,r,n){void 0===e&&(e="Reaction@"+c()),void 0===n&&(n=!1),this.name=e,this.onInvalidate=t,this.errorHandler=r,this.requiresObservable=n,this.observing=[],this.newObserving=[],this.dependenciesState=J.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+c(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=Z.NONE}return e.prototype.onBecomeStale=function(){this.schedule()},e.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,Se.pendingReactions.push(this),Qe())},e.prototype.isScheduled=function(){return this._isScheduled},e.prototype.runReaction=function(){if(!this.isDisposed){if(qe(),this._isScheduled=!1,ae(this)){this._isTrackPending=!0;try{this.onInvalidate(),this._isTrackPending}catch(e){this.reportExceptionInDerivation(e)}}Fe()}},e.prototype.track=function(e){if(!this.isDisposed){qe();0,this._isRunning=!0;var t=ue(this,e,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&_e(this),oe(t)&&this.reportExceptionInDerivation(t.cause),Fe()}},e.prototype.reportExceptionInDerivation=function(e){var t=this;if(this.errorHandler)this.errorHandler(e,this);else{if(Se.disableErrorBoundaries)throw e;var r="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this+"'";Se.suppressReactionErrors?console.warn("[mobx] (error in reaction '"+this.name+"' suppressed, fix error of causing action below)"):console.error(r,e),Se.globalReactionErrorHandlers.forEach((function(r){return r(e,t)}))}},e.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(qe(),_e(this),Fe()))},e.prototype.getDisposer=function(){var e=this.dispose.bind(this);return e[C]=this,e},e.prototype.toString=function(){return"Reaction["+this.name+"]"},e.prototype.trace=function(e){void 0===e&&(e=!1),$t(this,e)},e}();function $e(e){return Se.globalReactionErrorHandlers.push(e),function(){var t=Se.globalReactionErrorHandlers.indexOf(e);t>=0&&Se.globalReactionErrorHandlers.splice(t,1)}}var Ye=function(e){return e()};function Qe(){Se.inBatch>0||Se.isRunningReactions||Ye(Xe)}function Xe(){Se.isRunningReactions=!0;for(var e=Se.pendingReactions,t=0;e.length>0;){100==++t&&(console.error("Reaction doesn't converge to a stable state after 100 iterations. Probably there is a cycle in the reactive function: "+e[0]),e.splice(0));for(var r=e.splice(0),n=0,o=r.length;n<o;n++)r[n].runReaction()}Se.isRunningReactions=!1}var Je=y("Reaction",He);function Ze(e){var t=Ye;Ye=function(r){return e((function(){return t(r)}))}}function et(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}}function tt(){f(!1)}function rt(e){return function(t,r,n){if(n){if(n.value)return{value:ye(e,n.value),enumerable:!1,configurable:!0,writable:!0};var o=n.initializer;return{enumerable:!1,configurable:!0,writable:!0,initializer:function(){return ye(e,o.call(this))}}}return nt(e).apply(this,arguments)}}function nt(e){return function(t,r,n){Object.defineProperty(t,r,{configurable:!0,enumerable:!1,get:function(){},set:function(t){m(this,r,ot(e,t))}})}}var ot=function(e,t,r,n){return 1===arguments.length&&"function"==typeof e?ye(e.name||"<unnamed action>",e):2===arguments.length&&"function"==typeof t?ye(e,t):1===arguments.length&&"string"==typeof e?rt(e):!0!==n?rt(t).apply(null,arguments):void m(e,t,ye(e.name||t,r.value,this))};function at(e,t){return ve("string"==typeof e?e:e.name||"<unnamed action>","function"==typeof e?e:t,this,void 0)}function it(e){return"function"==typeof e&&!0===e.isMobxAction}function lt(e,t,r){m(e,t,ye(t,r.bind(e)))}function ut(e,t){void 0===t&&(t=s);var r,n=t&&t.name||e.name||"Autorun@"+c();if(!t.scheduler&&!t.delay)r=new He(n,(function(){this.track(i)}),t.onError,t.requiresObservable);else{var o=st(t),a=!1;r=new He(n,(function(){a||(a=!0,o((function(){a=!1,r.isDisposed||r.track(i)})))}),t.onError,t.requiresObservable)}function i(){e(r)}return r.schedule(),r.getDisposer()}ot.bound=function(e,t,r,n){return!0===n?(lt(e,t,r.value),null):r?{configurable:!0,enumerable:!1,get:function(){return lt(this,t,r.value||r.initializer.call(this)),this[t]},set:tt}:{enumerable:!1,configurable:!0,set:function(e){lt(this,t,e)},get:function(){}}};var _t=function(e){return e()};function st(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:_t}function ct(e,t,r){void 0===r&&(r=s);var n,o,a,i=r.name||"Reaction@"+c(),l=ot(i,r.onError?(n=r.onError,o=t,function(){try{return o.apply(this,arguments)}catch(e){n.call(this,e)}}):t),u=!r.scheduler&&!r.delay,_=st(r),f=!0,p=!1,d=r.compareStructural?A.structural:r.equals||A.default,E=new He(i,(function(){f||u?h():p||(p=!0,_(h))}),r.onError,r.requiresObservable);function h(){if(p=!1,!E.isDisposed){var t=!1;E.track((function(){var r=e(E);t=f||!d(a,r),a=r})),f&&r.fireImmediately&&l(a,E),f||!0!==t||l(a,E),f&&(f=!1)}}return E.schedule(),E.getDisposer()}function ft(e,t,r){return dt("onBecomeObserved",e,t,r)}function pt(e,t,r){return dt("onBecomeUnobserved",e,t,r)}function dt(e,t,r,n){var o="function"==typeof n?Lr(t,r):Lr(t),a="function"==typeof n?n:r,i=e+"Listeners";return o[i]?o[i].add(a):o[i]=new Set([a]),"function"!=typeof o[e]?f(!1):function(){var e=o[i];e&&(e.delete(a),0===e.size&&delete o[i])}}function Et(e){var t=e.enforceActions,r=e.computedRequiresReaction,n=e.computedConfigurable,o=e.disableErrorBoundaries,a=e.reactionScheduler,i=e.reactionRequiresObservable,l=e.observableRequiresReaction;if(!0===e.isolateGlobalState&&((Se.pendingReactions.length||Se.inBatch||Se.isRunningReactions)&&f("isolateGlobalState should be called before MobX is running any reactions"),xe=!0,Ue&&(0==--Be().__mobxInstanceCount&&(Be().__mobxGlobals=void 0),Se=new Ie)),void 0!==t){var u=void 0;switch(t){case!0:case"observed":u=!0;break;case!1:case"never":u=!1;break;case"strict":case"always":u="strict";break;default:f("Invalid value for 'enforceActions': '"+t+"', expected 'never', 'always' or 'observed'")}Se.enforceActions=u,Se.allowStateChanges=!0!==u&&"strict"!==u}void 0!==r&&(Se.computedRequiresReaction=!!r),void 0!==i&&(Se.reactionRequiresObservable=!!i),void 0!==l&&(Se.observableRequiresReaction=!!l,Se.allowStateReads=!Se.observableRequiresReaction),void 0!==n&&(Se.computedConfigurable=!!n),void 0!==o&&(!0===o&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled."),Se.disableErrorBoundaries=!!o),a&&Ze(a)}function ht(e,t){var r="function"==typeof e?e.prototype:e,n=function(e){var n=t[e];Array.isArray(n)||(n=[n]);var o=Object.getOwnPropertyDescriptor(r,e),a=n.reduce((function(t,n){return n(r,e,t)}),o);a&&Object.defineProperty(r,e,a)};for(var o in t)n(o);return e}function bt(e,t,r,n){var o=mt(n=q(n));return x(e),Mr(e,n.name,o.enhancer),t&&yt(e,t,r,o),e}function mt(e){return e.defaultDecorator||(!1===e.deep?G:F)}function yt(e,t,r,n){var o,a;qe();try{var l=g(t);try{for(var u=i(l),_=u.next();!_.done;_=u.next()){var s=_.value,c=Object.getOwnPropertyDescriptor(t,s);0;var f=(r&&s in r?r[s]:c.get?ee:n)(e,s,c,!0);f&&Object.defineProperty(e,s,f)}}catch(e){o={error:e}}finally{try{_&&!_.done&&(a=u.return)&&a.call(u)}finally{if(o)throw o.error}}}finally{Fe()}}function vt(e,t){return Ot(Lr(e,t))}function Ot(e){var t,r,n={name:e.name};return e.observing&&e.observing.length>0&&(n.dependencies=(t=e.observing,r=[],t.forEach((function(e){-1===r.indexOf(e)&&r.push(e)})),r).map(Ot)),n}function Pt(e,t){return gt(Lr(e,t))}function gt(e){var t={name:e.name};return function(e){return e.observers&&e.observers.size>0}(e)&&(t.observers=Array.from(function(e){return e.observers}(e)).map(gt)),t}var Dt=0;function Mt(){this.message="FLOW_CANCELLED"}function Ct(e){return e instanceof Mt}function Tt(e){1!==arguments.length&&f("Flow expects 1 argument and cannot be used as decorator");var t=e.name||"<unnamed flow>";return function(){var r,n=this,o=arguments,a=++Dt,i=ot(t+" - runid: "+a+" - init",e).apply(n,o),l=void 0,u=new Promise((function(e,n){var o=0;function u(e){var r;l=void 0;try{r=ot(t+" - runid: "+a+" - yield "+o++,i.next).call(i,e)}catch(e){return n(e)}s(r)}function _(e){var r;l=void 0;try{r=ot(t+" - runid: "+a+" - yield "+o++,i.throw).call(i,e)}catch(e){return n(e)}s(r)}function s(t){if(!t||"function"!=typeof t.then)return t.done?e(t.value):(l=Promise.resolve(t.value)).then(u,_);t.then(s,n)}r=n,u(void 0)}));return u.cancel=ot(t+" - runid: "+a+" - cancel",(function(){try{l&&wt(l);var e=i.return(void 0),t=Promise.resolve(e.value);t.then(E,E),wt(t),r(new Mt)}catch(e){r(e)}})),u}}function wt(e){"function"==typeof e.cancel&&e.cancel()}function Rt(e,t,r){var n;if(vr(e)||hr(e)||we(e))n=Ir(e);else{if(!Ar(e))return f(!1);if("string"!=typeof t)return f(!1);n=Ir(e,t)}return void 0!==n.dehancer?f(!1):(n.dehancer="function"==typeof t?t:r,function(){n.dehancer=void 0})}function At(e,t,r){return"function"==typeof r?function(e,t,r){return Ir(e,t).intercept(r)}(e,t,r):function(e,t){return Ir(e).intercept(t)}(e,t)}function Lt(e,t){if(null==e)return!1;if(void 0!==t){if(!1===Ar(e))return!1;if(!e[C].values.has(t))return!1;var r=Lr(e,t);return Ae(r)}return Ae(e)}function It(e){return arguments.length>1?f(!1):Lt(e)}function kt(e,t){return"string"!=typeof t?f(!1):Lt(e,t)}function Bt(e,t){return null!=e&&(void 0!==t?!!Ar(e)&&e[C].values.has(t):Ar(e)||!!e[C]||w(e)||Je(e)||Ae(e))}function Ut(e){return 1!==arguments.length&&f(!1),Bt(e)}function xt(e,t){return"string"!=typeof t?f(!1):Bt(e,t)}function St(e){return Ar(e)?e[C].getKeys():vr(e)||gr(e)?Array.from(e.keys()):hr(e)?e.map((function(e,t){return t})):f(!1)}function Wt(e){return Ar(e)?St(e).map((function(t){return e[t]})):vr(e)?St(e).map((function(t){return e.get(t)})):gr(e)?Array.from(e.values()):hr(e)?e.slice():f(!1)}function Kt(e){return Ar(e)?St(e).map((function(t){return[t,e[t]]})):vr(e)?St(e).map((function(t){return[t,e.get(t)]})):gr(e)?Array.from(e.entries()):hr(e)?e.map((function(e,t){return[t,e]})):f(!1)}function Nt(e,t,r){if(2!==arguments.length||gr(e))if(Ar(e)){var n=e[C],o=n.values.get(t);o?n.write(t,r):n.addObservableProp(t,r,n.defaultEnhancer)}else if(vr(e))e.set(t,r);else if(gr(e))e.add(t);else{if(!hr(e))return f(!1);"number"!=typeof t&&(t=parseInt(t,10)),p(t>=0,"Not a valid index: '"+t+"'"),qe(),t>=e.length&&(e.length=t+1),e[t]=r,Fe()}else{qe();var a=t;try{for(var i in a)Nt(e,i,a[i])}finally{Fe()}}}function zt(e,t){if(Ar(e))e[C].remove(t);else if(vr(e))e.delete(t);else if(gr(e))e.delete(t);else{if(!hr(e))return f(!1);"number"!=typeof t&&(t=parseInt(t,10)),p(t>=0,"Not a valid index: '"+t+"'"),e.splice(t,1)}}function jt(e,t){return Ar(e)?Ir(e).has(t):vr(e)||gr(e)?e.has(t):hr(e)?t>=0&&t<e.length:f(!1)}function qt(e,t){if(jt(e,t))return Ar(e)?e[t]:vr(e)?e.get(t):hr(e)?e[t]:f(!1)}function Ft(e,t,r,n){return"function"==typeof r?function(e,t,r,n){return Ir(e,t).observe(r,n)}(e,t,r,n):function(e,t,r){return Ir(e).observe(t,r)}(e,t,r)}Mt.prototype=Object.create(Error.prototype);var Vt={detectCycles:!0,exportMapsAsObjects:!0,recurseEverything:!1};function Gt(e,t,r,n){return n.detectCycles&&e.set(t,r),r}function Ht(e,t){var r;return"boolean"==typeof t&&(t={detectCycles:t}),t||(t=Vt),t.detectCycles=void 0===t.detectCycles?!0===t.recurseEverything:!0===t.detectCycles,t.detectCycles&&(r=new Map),function e(t,r,n){if(!r.recurseEverything&&!Ut(t))return t;if("object"!=typeof t)return t;if(null===t)return null;if(t instanceof Date)return t;if(we(t))return e(t.get(),r,n);if(Ut(t)&&St(t),!0===r.detectCycles&&null!==t&&n.has(t))return n.get(t);if(hr(t)||Array.isArray(t)){var o=Gt(n,t,[],r),a=t.map((function(t){return e(t,r,n)}));o.length=a.length;for(var i=0,l=a.length;i<l;i++)o[i]=a[i];return o}if(gr(t)||Object.getPrototypeOf(t)===Set.prototype){if(!1===r.exportMapsAsObjects){var u=Gt(n,t,new Set,r);return t.forEach((function(t){u.add(e(t,r,n))})),u}var _=Gt(n,t,[],r);return t.forEach((function(t){_.push(e(t,r,n))})),_}if(vr(t)||Object.getPrototypeOf(t)===Map.prototype){if(!1===r.exportMapsAsObjects){var s=Gt(n,t,new Map,r);return t.forEach((function(t,o){s.set(o,e(t,r,n))})),s}var c=Gt(n,t,{},r);return t.forEach((function(t,o){c[o]=e(t,r,n)})),c}var f=Gt(n,t,{},r);return g(t).forEach((function(o){f[o]=e(t[o],r,n)})),f}(e,t,r)}function $t(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=!1;"boolean"==typeof e[e.length-1]&&(r=e.pop());var n=Yt(e);if(!n)return f(!1);n.isTracing===Z.NONE&&console.log("[mobx.trace] '"+n.name+"' tracing enabled"),n.isTracing=r?Z.BREAK:Z.LOG}function Yt(e){switch(e.length){case 0:return Se.trackingDerivation;case 1:return Lr(e[0]);case 2:return Lr(e[0],e[1])}}function Qt(e,t){void 0===t&&(t=void 0),qe();try{return e.apply(t)}finally{Fe()}}function Xt(e,t,r){return 1===arguments.length||t&&"object"==typeof t?Zt(e,t):Jt(e,t,r||{})}function Jt(e,t,r){var n;"number"==typeof r.timeout&&(n=setTimeout((function(){if(!a[C].isDisposed){a();var e=new Error("WHEN_TIMEOUT");if(!r.onError)throw e;r.onError(e)}}),r.timeout)),r.name=r.name||"When@"+c();var o=ye(r.name+"-effect",t),a=ut((function(t){e()&&(t.dispose(),n&&clearTimeout(n),o())}),r);return a}function Zt(e,t){var r;var n=new Promise((function(n,o){var i=Jt(e,n,a(a({},t),{onError:o}));r=function(){i(),o("WHEN_CANCELLED")}}));return n.cancel=r,n}function er(e){return e[C]}function tr(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e}var rr={has:function(e,t){if(t===C||"constructor"===t||t===L)return!0;var r=er(e);return tr(t)?r.has(t):t in e},get:function(e,t){if(t===C||"constructor"===t||t===L)return e[t];var r=er(e),n=r.values.get(t);if(n instanceof T){var o=n.get();return void 0===o&&r.has(t),o}return tr(t)&&r.has(t),e[t]},set:function(e,t,r){return!!tr(t)&&(Nt(e,t,r),!0)},deleteProperty:function(e,t){return!!tr(t)&&(er(e).remove(t),!0)},ownKeys:function(e){return er(e).keysAtom.reportObserved(),Reflect.ownKeys(e)},preventExtensions:function(e){return f("Dynamic observable objects cannot be frozen"),!1}};function nr(e){var t=new Proxy(e,rr);return e[C].proxy=t,t}function or(e){return void 0!==e.interceptors&&e.interceptors.length>0}function ar(e,t){var r=e.interceptors||(e.interceptors=[]);return r.push(t),d((function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}))}function ir(e,t){var r=ce();try{for(var n=u(e.interceptors||[]),o=0,a=n.length;o<a&&(p(!(t=n[o](t))||t.type,"Intercept handlers should return nothing or a change object"),t);o++);return t}finally{fe(r)}}function lr(e){return void 0!==e.changeListeners&&e.changeListeners.length>0}function ur(e,t){var r=e.changeListeners||(e.changeListeners=[]);return r.push(t),d((function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}))}function _r(e,t){var r=ce(),n=e.changeListeners;if(n){for(var o=0,a=(n=n.slice()).length;o<a;o++)n[o](t);fe(r)}}var sr={get:function(e,t){return t===C?e[C]:"length"===t?e[C].getArrayLength():"number"==typeof t?pr.get.call(e,t):"string"!=typeof t||isNaN(t)?pr.hasOwnProperty(t)?pr[t]:e[t]:pr.get.call(e,parseInt(t))},set:function(e,t,r){return"length"===t&&e[C].setArrayLength(r),"number"==typeof t&&pr.set.call(e,t,r),"symbol"==typeof t||isNaN(t)?e[t]=r:pr.set.call(e,parseInt(t),r),!0},preventExtensions:function(e){return f("Observable arrays cannot be frozen"),!1}};function cr(e,t,r,n){void 0===r&&(r="ObservableArray@"+c()),void 0===n&&(n=!1);var o,a,i,l=new fr(r,t,n);o=l.values,a=C,i=l,Object.defineProperty(o,a,{enumerable:!1,writable:!1,configurable:!0,value:i});var u=new Proxy(l.values,sr);if(l.proxy=u,e&&e.length){var _=De(!0);l.spliceWithArray(0,0,e),Me(_)}return u}var fr=function(){function e(e,t,r){this.owned=r,this.values=[],this.proxy=void 0,this.lastKnownLength=0,this.atom=new T(e||"ObservableArray@"+c()),this.enhancer=function(r,n){return t(r,n,e+"[..]")}}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.dehanceValues=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},e.prototype.intercept=function(e){return ar(this,e)},e.prototype.observe=function(e,t){return void 0===t&&(t=!1),t&&e({object:this.proxy,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),ur(this,e)},e.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},e.prototype.setArrayLength=function(e){if("number"!=typeof e||e<0)throw new Error("[mobx.array] Out of range: "+e);var t=this.values.length;if(e!==t)if(e>t){for(var r=new Array(e-t),n=0;n<e-t;n++)r[n]=void 0;this.spliceWithArray(t,0,r)}else this.spliceWithArray(e,t-e)},e.prototype.updateArrayLength=function(e,t){if(e!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");this.lastKnownLength+=t},e.prototype.spliceWithArray=function(e,t,r){var n=this;le(this.atom);var o=this.values.length;if(void 0===e?e=0:e>o?e=o:e<0&&(e=Math.max(0,o+e)),t=1===arguments.length?o-e:null==t?0:Math.max(0,Math.min(t,o-e)),void 0===r&&(r=_),or(this)){var a=ir(this,{object:this.proxy,type:"splice",index:e,removedCount:t,added:r});if(!a)return _;t=a.removedCount,r=a.added}r=0===r.length?r:r.map((function(e){return n.enhancer(e,void 0)}));var i=this.spliceItemsIntoValues(e,t,r);return 0===t&&0===r.length||this.notifyArraySplice(e,r,i),this.dehanceValues(i)},e.prototype.spliceItemsIntoValues=function(e,t,r){var n;if(r.length<1e4)return(n=this.values).splice.apply(n,u([e,t],r));var o=this.values.slice(e,e+t);return this.values=this.values.slice(0,e).concat(r,this.values.slice(e+t)),o},e.prototype.notifyArrayChildUpdate=function(e,t,r){var n=!this.owned&&!1,o=lr(this),a=o||n?{object:this.proxy,type:"update",index:e,newValue:t,oldValue:r}:null;this.atom.reportChanged(),o&&_r(this,a)},e.prototype.notifyArraySplice=function(e,t,r){var n=!this.owned&&!1,o=lr(this),a=o||n?{object:this.proxy,type:"splice",index:e,removed:r,added:t,removedCount:r.length,addedCount:t.length}:null;this.atom.reportChanged(),o&&_r(this,a)},e}(),pr={intercept:function(e){return this[C].intercept(e)},observe:function(e,t){return void 0===t&&(t=!1),this[C].observe(e,t)},clear:function(){return this.splice(0)},replace:function(e){var t=this[C];return t.spliceWithArray(0,t.values.length,e)},toJS:function(){return this.slice()},toJSON:function(){return this.toJS()},splice:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var o=this[C];switch(arguments.length){case 0:return[];case 1:return o.spliceWithArray(e);case 2:return o.spliceWithArray(e,t)}return o.spliceWithArray(e,t,r)},spliceWithArray:function(e,t,r){return this[C].spliceWithArray(e,t,r)},push:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=this[C];return r.spliceWithArray(r.values.length,0,e),r.values.length},pop:function(){return this.splice(Math.max(this[C].values.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=this[C];return r.spliceWithArray(0,0,e),r.values.length},reverse:function(){var e=this.slice();return e.reverse.apply(e,arguments)},sort:function(e){var t=this.slice();return t.sort.apply(t,arguments)},remove:function(e){var t=this[C],r=t.dehanceValues(t.values).indexOf(e);return r>-1&&(this.splice(r,1),!0)},get:function(e){var t=this[C];if(t){if(e<t.values.length)return t.atom.reportObserved(),t.dehanceValue(t.values[e]);console.warn("[mobx.array] Attempt to read an array index ("+e+") that is out of bounds ("+t.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},set:function(e,t){var r=this[C],n=r.values;if(e<n.length){le(r.atom);var o=n[e];if(or(r)){var a=ir(r,{type:"update",object:r.proxy,index:e,newValue:t});if(!a)return;t=a.newValue}(t=r.enhancer(t,o))!==o&&(n[e]=t,r.notifyArrayChildUpdate(e,t,o))}else{if(e!==n.length)throw new Error("[mobx.array] Index out of bounds, "+e+" is larger than "+n.length);r.spliceWithArray(e,0,[t])}}};["concat","every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach((function(e){pr[e]=function(){var t=this[C];t.atom.reportObserved();var r=t.dehanceValues(t.values);return r[e].apply(r,arguments)}}));var dr,Er=y("ObservableArrayAdministration",fr);function hr(e){return h(e)&&Er(e[C])}var br,mr={},yr=function(){function e(e,t,r){if(void 0===t&&(t=K),void 0===r&&(r="ObservableMap@"+c()),this.enhancer=t,this.name=r,this[dr]=mr,this._keysAtom=R(this.name+".keys()"),this[Symbol.toStringTag]="Map","function"!=typeof Map)throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");this._data=new Map,this._hasMap=new Map,this.merge(e)}return e.prototype._has=function(e){return this._data.has(e)},e.prototype.has=function(e){var t=this;if(!Se.trackingDerivation)return this._has(e);var r=this._hasMap.get(e);if(!r){var n=r=new Te(this._has(e),N,this.name+"."+D(e)+"?",!1);this._hasMap.set(e,n),pt(n,(function(){return t._hasMap.delete(e)}))}return r.get()},e.prototype.set=function(e,t){var r=this._has(e);if(or(this)){var n=ir(this,{type:r?"update":"add",object:this,newValue:t,name:e});if(!n)return this;t=n.newValue}return r?this._updateValue(e,t):this._addValue(e,t),this},e.prototype.delete=function(e){var t=this;if(or(this)&&!(n=ir(this,{type:"delete",object:this,name:e})))return!1;if(this._has(e)){var r=lr(this),n=r?{type:"delete",object:this,oldValue:this._data.get(e).value,name:e}:null;return Qt((function(){t._keysAtom.reportChanged(),t._updateHasMapEntry(e,!1),t._data.get(e).setNewValue(void 0),t._data.delete(e)})),r&&_r(this,n),!0}return!1},e.prototype._updateHasMapEntry=function(e,t){var r=this._hasMap.get(e);r&&r.setNewValue(t)},e.prototype._updateValue=function(e,t){var r=this._data.get(e);if((t=r.prepareNewValue(t))!==Se.UNCHANGED){var n=lr(this),o=n?{type:"update",object:this,oldValue:r.value,name:e,newValue:t}:null;0,r.setNewValue(t),n&&_r(this,o)}},e.prototype._addValue=function(e,t){var r=this;le(this._keysAtom),Qt((function(){var n=new Te(t,r.enhancer,r.name+"."+D(e),!1);r._data.set(e,n),t=n.value,r._updateHasMapEntry(e,!0),r._keysAtom.reportChanged()}));var n=lr(this),o=n?{type:"add",object:this,name:e,newValue:t}:null;n&&_r(this,o)},e.prototype.get=function(e){return this.has(e)?this.dehanceValue(this._data.get(e).get()):this.dehanceValue(void 0)},e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.keys=function(){return this._keysAtom.reportObserved(),this._data.keys()},e.prototype.values=function(){var e=this,t=0,r=Array.from(this.keys());return Wr({next:function(){return t<r.length?{value:e.get(r[t++]),done:!1}:{done:!0}}})},e.prototype.entries=function(){var e=this,t=0,r=Array.from(this.keys());return Wr({next:function(){if(t<r.length){var n=r[t++];return{value:[n,e.get(n)],done:!1}}return{done:!0}}})},e.prototype[(dr=C,Symbol.iterator)]=function(){return this.entries()},e.prototype.forEach=function(e,t){var r,n;try{for(var o=i(this),a=o.next();!a.done;a=o.next()){var u=l(a.value,2),_=u[0],s=u[1];e.call(t,s,_,this)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}},e.prototype.merge=function(e){var t=this;return vr(e)&&(e=e.toJS()),Qt((function(){b(e)?g(e).forEach((function(r){return t.set(r,e[r])})):Array.isArray(e)?e.forEach((function(e){var r=l(e,2),n=r[0],o=r[1];return t.set(n,o)})):O(e)?(e.constructor!==Map&&f("Cannot initialize from classes that inherit from Map: "+e.constructor.name),e.forEach((function(e,r){return t.set(r,e)}))):null!=e&&f("Cannot initialize map from "+e)})),this},e.prototype.clear=function(){var e=this;Qt((function(){se((function(){var t,r;try{for(var n=i(e.keys()),o=n.next();!o.done;o=n.next()){var a=o.value;e.delete(a)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}}))}))},e.prototype.replace=function(e){var t=this;return Qt((function(){var r,n=b(r=e)?Object.keys(r):Array.isArray(r)?r.map((function(e){return l(e,1)[0]})):O(r)||vr(r)?Array.from(r.keys()):f("Cannot get keys from '"+r+"'");Array.from(t.keys()).filter((function(e){return-1===n.indexOf(e)})).forEach((function(e){return t.delete(e)})),t.merge(e)})),this},Object.defineProperty(e.prototype,"size",{get:function(){return this._keysAtom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),e.prototype.toPOJO=function(){var e,t,r={};try{for(var n=i(this),o=n.next();!o.done;o=n.next()){var a=l(o.value,2),u=a[0],_=a[1];r["symbol"==typeof u?u:D(u)]=_}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return r},e.prototype.toJS=function(){return new Map(this)},e.prototype.toJSON=function(){return this.toPOJO()},e.prototype.toString=function(){var e=this;return this.name+"[{ "+Array.from(this.keys()).map((function(t){return D(t)+": "+e.get(t)})).join(", ")+" }]"},e.prototype.observe=function(e,t){return ur(this,e)},e.prototype.intercept=function(e){return ar(this,e)},e}(),vr=y("ObservableMap",yr),Or={},Pr=function(){function e(e,t,r){if(void 0===t&&(t=K),void 0===r&&(r="ObservableSet@"+c()),this.name=r,this[br]=Or,this._data=new Set,this._atom=R(this.name),this[Symbol.toStringTag]="Set","function"!=typeof Set)throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");this.enhancer=function(e,n){return t(e,n,r)},e&&this.replace(e)}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.clear=function(){var e=this;Qt((function(){se((function(){var t,r;try{for(var n=i(e._data.values()),o=n.next();!o.done;o=n.next()){var a=o.value;e.delete(a)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}}))}))},e.prototype.forEach=function(e,t){var r,n;try{for(var o=i(this),a=o.next();!a.done;a=o.next()){var l=a.value;e.call(t,l,l,this)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}},Object.defineProperty(e.prototype,"size",{get:function(){return this._atom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),e.prototype.add=function(e){var t=this;if((le(this._atom),or(this))&&!(n=ir(this,{type:"add",object:this,newValue:e})))return this;if(!this.has(e)){Qt((function(){t._data.add(t.enhancer(e,void 0)),t._atom.reportChanged()}));var r=lr(this),n=r?{type:"add",object:this,newValue:e}:null;0,r&&_r(this,n)}return this},e.prototype.delete=function(e){var t=this;if(or(this)&&!(n=ir(this,{type:"delete",object:this,oldValue:e})))return!1;if(this.has(e)){var r=lr(this),n=r?{type:"delete",object:this,oldValue:e}:null;return Qt((function(){t._atom.reportChanged(),t._data.delete(e)})),r&&_r(this,n),!0}return!1},e.prototype.has=function(e){return this._atom.reportObserved(),this._data.has(this.dehanceValue(e))},e.prototype.entries=function(){var e=0,t=Array.from(this.keys()),r=Array.from(this.values());return Wr({next:function(){var n=e;return e+=1,n<r.length?{value:[t[n],r[n]],done:!1}:{done:!0}}})},e.prototype.keys=function(){return this.values()},e.prototype.values=function(){this._atom.reportObserved();var e=this,t=0,r=Array.from(this._data.values());return Wr({next:function(){return t<r.length?{value:e.dehanceValue(r[t++]),done:!1}:{done:!0}}})},e.prototype.replace=function(e){var t=this;return gr(e)&&(e=e.toJS()),Qt((function(){Array.isArray(e)||P(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&f("Cannot initialize set from "+e)})),this},e.prototype.observe=function(e,t){return ur(this,e)},e.prototype.intercept=function(e){return ar(this,e)},e.prototype.toJS=function(){return new Set(this)},e.prototype.toString=function(){return this.name+"[ "+Array.from(this).join(", ")+" ]"},e.prototype[(br=C,Symbol.iterator)]=function(){return this.values()},e}(),gr=y("ObservableSet",Pr),Dr=function(){function e(e,t,r,n){void 0===t&&(t=new Map),this.target=e,this.values=t,this.name=r,this.defaultEnhancer=n,this.keysAtom=new T(r+".keys")}return e.prototype.read=function(e){return this.values.get(e).get()},e.prototype.write=function(e,t){var r=this.target,n=this.values.get(e);if(n instanceof Re)n.set(t);else{if(or(this)){if(!(a=ir(this,{type:"update",object:this.proxy||r,name:e,newValue:t})))return;t=a.newValue}if((t=n.prepareNewValue(t))!==Se.UNCHANGED){var o=lr(this),a=o?{type:"update",object:this.proxy||r,oldValue:n.value,name:e,newValue:t}:null;0,n.setNewValue(t),o&&_r(this,a)}}},e.prototype.has=function(e){var t=this.pendingKeys||(this.pendingKeys=new Map),r=t.get(e);if(r)return r.get();var n=!!this.values.get(e);return r=new Te(n,N,this.name+"."+D(e)+"?",!1),t.set(e,r),r.get()},e.prototype.addObservableProp=function(e,t,r){void 0===r&&(r=this.defaultEnhancer);var n=this.target;if(or(this)){var o=ir(this,{object:this.proxy||n,name:e,type:"add",newValue:t});if(!o)return;t=o.newValue}var a=new Te(t,r,this.name+"."+D(e),!1);this.values.set(e,a),t=a.value,Object.defineProperty(n,e,function(e){return Cr[e]||(Cr[e]={configurable:!0,enumerable:!0,get:function(){return this[C].read(e)},set:function(t){this[C].write(e,t)}})}(e)),this.notifyPropertyAddition(e,t)},e.prototype.addComputedProp=function(e,t,r){var n,o,a,i=this.target;r.name=r.name||this.name+"."+D(t),this.values.set(t,new Re(r)),(e===i||(n=e,o=t,!(a=Object.getOwnPropertyDescriptor(n,o))||!1!==a.configurable&&!1!==a.writable))&&Object.defineProperty(e,t,function(e){return Tr[e]||(Tr[e]={configurable:Se.computedConfigurable,enumerable:!1,get:function(){return wr(this).read(e)},set:function(t){wr(this).write(e,t)}})}(t))},e.prototype.remove=function(e){if(this.values.has(e)){var t=this.target;if(or(this))if(!(i=ir(this,{object:this.proxy||t,name:e,type:"remove"})))return;try{qe();var r=lr(this),n=this.values.get(e),o=n&&n.get();if(n&&n.set(void 0),this.keysAtom.reportChanged(),this.values.delete(e),this.pendingKeys){var a=this.pendingKeys.get(e);a&&a.set(!1)}delete this.target[e];var i=r?{type:"remove",object:this.proxy||t,oldValue:o,name:e}:null;0,r&&_r(this,i)}finally{Fe()}}},e.prototype.illegalAccess=function(e,t){console.warn("Property '"+t+"' of '"+e+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")},e.prototype.observe=function(e,t){return ur(this,e)},e.prototype.intercept=function(e){return ar(this,e)},e.prototype.notifyPropertyAddition=function(e,t){var r=lr(this),n=r?{type:"add",object:this.proxy||this.target,name:e,newValue:t}:null;if(r&&_r(this,n),this.pendingKeys){var o=this.pendingKeys.get(e);o&&o.set(!0)}this.keysAtom.reportChanged()},e.prototype.getKeys=function(){var e,t;this.keysAtom.reportObserved();var r=[];try{for(var n=i(this.values),o=n.next();!o.done;o=n.next()){var a=l(o.value,2),u=a[0];a[1]instanceof Te&&r.push(u)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return r},e}();function Mr(e,t,r){if(void 0===t&&(t=""),void 0===r&&(r=K),Object.prototype.hasOwnProperty.call(e,C))return e[C];b(e)||(t=(e.constructor.name||"ObservableObject")+"@"+c()),t||(t="ObservableObject@"+c());var n=new Dr(e,new Map,D(t),r);return m(e,C,n),n}var Cr=Object.create(null),Tr=Object.create(null);function wr(e){var t=e[C];return t||(x(e),e[C])}var Rr=y("ObservableObjectAdministration",Dr);function Ar(e){return!!h(e)&&(x(e),Rr(e[C]))}function Lr(e,t){if("object"==typeof e&&null!==e){if(hr(e))return void 0!==t&&f(!1),e[C].atom;if(gr(e))return e[C];if(vr(e)){var r=e;return void 0===t?r._keysAtom:((n=r._data.get(t)||r._hasMap.get(t))||f(!1),n)}var n;if(x(e),t&&!e[C]&&e[t],Ar(e))return t?((n=e[C].values.get(t))||f(!1),n):f(!1);if(w(e)||Ae(e)||Je(e))return e}else if("function"==typeof e&&Je(e[C]))return e[C];return f(!1)}function Ir(e,t){return e||f("Expecting some object"),void 0!==t?Ir(Lr(e,t)):w(e)||Ae(e)||Je(e)||vr(e)||gr(e)?e:(x(e),e[C]?e[C]:void f(!1))}function kr(e,t){return(void 0!==t?Lr(e,t):Ar(e)||vr(e)||gr(e)?Ir(e):Lr(e)).name}var Br=Object.prototype.toString;function Ur(e,t,r){return void 0===r&&(r=-1),function e(t,r,n,o,a){if(t===r)return 0!==t||1/t==1/r;if(null==t||null==r)return!1;if(t!=t)return r!=r;var i=typeof t;if("function"!==i&&"object"!==i&&"object"!=typeof r)return!1;var l=Br.call(t);if(l!==Br.call(r))return!1;switch(l){case"[object RegExp]":case"[object String]":return""+t==""+r;case"[object Number]":return+t!=+t?+r!=+r:0==+t?1/+t==1/r:+t==+r;case"[object Date]":case"[object Boolean]":return+t==+r;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(t)===Symbol.valueOf.call(r);case"[object Map]":case"[object Set]":n>=0&&n++}t=xr(t),r=xr(r);var u="[object Array]"===l;if(!u){if("object"!=typeof t||"object"!=typeof r)return!1;var _=t.constructor,s=r.constructor;if(_!==s&&!("function"==typeof _&&_ instanceof _&&"function"==typeof s&&s instanceof s)&&"constructor"in t&&"constructor"in r)return!1}if(0===n)return!1;n<0&&(n=-1);a=a||[];var c=(o=o||[]).length;for(;c--;)if(o[c]===t)return a[c]===r;if(o.push(t),a.push(r),u){if((c=t.length)!==r.length)return!1;for(;c--;)if(!e(t[c],r[c],n-1,o,a))return!1}else{var f=Object.keys(t),p=void 0;if(c=f.length,Object.keys(r).length!==c)return!1;for(;c--;)if(p=f[c],!Sr(r,p)||!e(t[p],r[p],n-1,o,a))return!1}return o.pop(),a.pop(),!0}(e,t,r)}function xr(e){return hr(e)?e.slice():O(e)||vr(e)||P(e)||gr(e)?Array.from(e.entries()):e}function Sr(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Wr(e){return e[Symbol.iterator]=Kr,e}function Kr(){return this}if("undefined"==typeof Proxy||"undefined"==typeof Symbol)throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:et,extras:{getDebugName:kr},$mobx:C})}.call(this,r(62),r(45))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"h",(function(){return MVariable})),__webpack_require__.d(__webpack_exports__,"d",(function(){return MProperty})),__webpack_require__.d(__webpack_exports__,"e",(function(){return MRequirement})),__webpack_require__.d(__webpack_exports__,"g",(function(){return MTaskProperty})),__webpack_require__.d(__webpack_exports__,"f",(function(){return MTask})),__webpack_require__.d(__webpack_exports__,"a",(function(){return MCollection})),__webpack_require__.d(__webpack_exports__,"b",(function(){return MGroup})),__webpack_require__.d(__webpack_exports__,"c",(function(){return MMain}));var mobx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),mobx_persist__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),mobx_persist__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(mobx_persist__WEBPACK_IMPORTED_MODULE_1__),_class,_descriptor,_descriptor2,_temp,_class3,_descriptor3,_temp2,_class5,_descriptor4,_descriptor5,_descriptor6,_temp3,_class7,_descriptor7,_descriptor8,_temp4,_dec,_dec2,_class9,_descriptor9,_descriptor10,_descriptor11,_descriptor12,_descriptor13,_descriptor14,_descriptor15,_temp5,_dec3,_dec4,_class11,_descriptor16,_descriptor17,_descriptor18,_temp6,_dec5,_dec6,_class13,_descriptor19,_descriptor20,_descriptor21,_descriptor22,_temp7,_dec7,_dec8,_dec9,_class15,_descriptor23,_descriptor24,_descriptor25,_descriptor26,_temp8,_dec10,_dec11,_dec12,_dec13,_dec14,_dec15,_class17,_descriptor27,_descriptor28,_descriptor29,_descriptor30,_descriptor31,_descriptor32,_descriptor33,_descriptor34,_descriptor35,_descriptor36,_descriptor37,_descriptor38,_descriptor39,_descriptor40,_descriptor41,_descriptor42,_descriptor43,_descriptor44,_descriptor45,_descriptor46,_descriptor47,_descriptor48,_descriptor49,_descriptor50,_descriptor51,_descriptor52,_descriptor53,_descriptor54,_descriptor55,_descriptor56,_descriptor57,_descriptor58,_temp9,enterModule;function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e};mobx__WEBPACK_IMPORTED_MODULE_0__.configure({enforceActions:"observed"});var MVariable=(_temp=function(){function MVariable(){_classCallCheck(this,MVariable),_initializerDefineProperty(this,"id",_descriptor,this),_initializerDefineProperty(this,"value",_descriptor2,this)}return _createClass(MVariable,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MVariable}(),_class=_temp,_descriptor=_applyDecoratedDescriptor(_class.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor2=_applyDecoratedDescriptor(_class.prototype,"value",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class),MProperty=(_temp2=function(){function MProperty(){_classCallCheck(this,MProperty),_initializerDefineProperty(this,"id",_descriptor3,this)}return _createClass(MProperty,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MProperty}(),_class3=_temp2,_descriptor3=_applyDecoratedDescriptor(_class3.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class3),MRequirement=(_temp3=function(){function MRequirement(){_classCallCheck(this,MRequirement),_initializerDefineProperty(this,"id",_descriptor4,this),_initializerDefineProperty(this,"type",_descriptor5,this),_initializerDefineProperty(this,"value",_descriptor6,this)}return _createClass(MRequirement,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MRequirement}(),_class5=_temp3,_descriptor4=_applyDecoratedDescriptor(_class5.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor5=_applyDecoratedDescriptor(_class5.prototype,"type",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor6=_applyDecoratedDescriptor(_class5.prototype,"value",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class5),MTaskProperty=(_temp4=function(){function MTaskProperty(){_classCallCheck(this,MTaskProperty),_initializerDefineProperty(this,"id",_descriptor7,this),_initializerDefineProperty(this,"access",_descriptor8,this)}return _createClass(MTaskProperty,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MTaskProperty}(),_class7=_temp4,_descriptor7=_applyDecoratedDescriptor(_class7.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor8=_applyDecoratedDescriptor(_class7.prototype,"access",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_class7),MTask=(_dec=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MTaskProperty),_dec2=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_temp5=function(){function MTask(){_classCallCheck(this,MTask),_initializerDefineProperty(this,"id",_descriptor9,this),_initializerDefineProperty(this,"exeValue",_descriptor10,this),_initializerDefineProperty(this,"exeReachable",_descriptor11,this),_initializerDefineProperty(this,"envValue",_descriptor12,this),_initializerDefineProperty(this,"envReachable",_descriptor13,this),_initializerDefineProperty(this,"properties",_descriptor14,this),_initializerDefineProperty(this,"requirements",_descriptor15,this)}return _createClass(MTask,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MTask}(),_class9=_temp5,_descriptor9=_applyDecoratedDescriptor(_class9.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor10=_applyDecoratedDescriptor(_class9.prototype,"exeValue",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor11=_applyDecoratedDescriptor(_class9.prototype,"exeReachable",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor12=_applyDecoratedDescriptor(_class9.prototype,"envValue",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor13=_applyDecoratedDescriptor(_class9.prototype,"envReachable",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor14=_applyDecoratedDescriptor(_class9.prototype,"properties",[_dec,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor15=_applyDecoratedDescriptor(_class9.prototype,"requirements",[_dec2,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class9),MCollection=(_dec3=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec4=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_temp6=function(){function MCollection(){_classCallCheck(this,MCollection),_initializerDefineProperty(this,"id",_descriptor16,this),_initializerDefineProperty(this,"tasks",_descriptor17,this),_initializerDefineProperty(this,"requirements",_descriptor18,this)}return _createClass(MCollection,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MCollection}(),_class11=_temp6,_descriptor16=_applyDecoratedDescriptor(_class11.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor17=_applyDecoratedDescriptor(_class11.prototype,"tasks",[_dec3,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor18=_applyDecoratedDescriptor(_class11.prototype,"requirements",[_dec4,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class11),MGroup=(_dec5=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec6=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_temp7=function(){function MGroup(){_classCallCheck(this,MGroup),_initializerDefineProperty(this,"id",_descriptor19,this),_initializerDefineProperty(this,"n",_descriptor20,this),_initializerDefineProperty(this,"tasks",_descriptor21,this),_initializerDefineProperty(this,"collections",_descriptor22,this)}return _createClass(MGroup,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MGroup}(),_class13=_temp7,_descriptor19=_applyDecoratedDescriptor(_class13.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor20=_applyDecoratedDescriptor(_class13.prototype,"n",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor21=_applyDecoratedDescriptor(_class13.prototype,"tasks",[_dec5,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor22=_applyDecoratedDescriptor(_class13.prototype,"collections",[_dec6,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class13),MMain=(_dec7=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec8=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list"),_dec9=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MGroup),_temp8=function(){function MMain(){_classCallCheck(this,MMain),_initializerDefineProperty(this,"id",_descriptor23,this),_initializerDefineProperty(this,"tasks",_descriptor24,this),_initializerDefineProperty(this,"collections",_descriptor25,this),_initializerDefineProperty(this,"groups",_descriptor26,this)}return _createClass(MMain,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MMain}(),_class15=_temp8,_descriptor23=_applyDecoratedDescriptor(_class15.prototype,"id",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"main"}}),_descriptor24=_applyDecoratedDescriptor(_class15.prototype,"tasks",[_dec7,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor25=_applyDecoratedDescriptor(_class15.prototype,"collections",[_dec8,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor26=_applyDecoratedDescriptor(_class15.prototype,"groups",[_dec9,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_class15),Store=(_dec10=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MVariable),_dec11=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MProperty),_dec12=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MRequirement),_dec13=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MTask),_dec14=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("list",MCollection),_dec15=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist)("object",MMain),_temp9=function(){function Store(){var e=this;_classCallCheck(this,Store),_initializerDefineProperty(this,"topologyId",_descriptor27,this),_initializerDefineProperty(this,"variables",_descriptor28,this),_initializerDefineProperty(this,"properties",_descriptor29,this),_initializerDefineProperty(this,"requirements",_descriptor30,this),_initializerDefineProperty(this,"tasks",_descriptor31,this),_initializerDefineProperty(this,"collections",_descriptor32,this),_initializerDefineProperty(this,"main",_descriptor33,this),_initializerDefineProperty(this,"reset",_descriptor34,this),_initializerDefineProperty(this,"setTopologyId",_descriptor35,this),_initializerDefineProperty(this,"setVariables",_descriptor36,this),_initializerDefineProperty(this,"setProperties",_descriptor37,this),_initializerDefineProperty(this,"setRequirements",_descriptor38,this),_initializerDefineProperty(this,"setTasks",_descriptor39,this),_initializerDefineProperty(this,"setCollections",_descriptor40,this),_initializerDefineProperty(this,"setMain",_descriptor41,this),_initializerDefineProperty(this,"addVariable",_descriptor42,this),_initializerDefineProperty(this,"addProperty",_descriptor43,this),_initializerDefineProperty(this,"addRequirement",_descriptor44,this),_initializerDefineProperty(this,"addTask",_descriptor45,this),_initializerDefineProperty(this,"addCollection",_descriptor46,this),_initializerDefineProperty(this,"addMainGroup",_descriptor47,this),_initializerDefineProperty(this,"removeVariable",_descriptor48,this),_initializerDefineProperty(this,"removeProperty",_descriptor49,this),_initializerDefineProperty(this,"removeRequirement",_descriptor50,this),_initializerDefineProperty(this,"removeTask",_descriptor51,this),_initializerDefineProperty(this,"removeCollection",_descriptor52,this),_initializerDefineProperty(this,"removeMainGroup",_descriptor53,this),_initializerDefineProperty(this,"editProperty",_descriptor54,this),_initializerDefineProperty(this,"editRequirement",_descriptor55,this),_initializerDefineProperty(this,"editTask",_descriptor56,this),_initializerDefineProperty(this,"editCollection",_descriptor57,this),_initializerDefineProperty(this,"editMainGroup",_descriptor58,this),this.hasVariable=function(t){return e.variables.some((function(e){return e.id===t}))},this.hasProperty=function(t){return e.properties.some((function(e){return e.id===t}))},this.hasRequirement=function(t){return e.requirements.some((function(e){return e.id===t}))},this.hasTask=function(t){return e.tasks.some((function(e){return e.id===t}))},this.hasCollection=function(t){return e.collections.some((function(e){return e.id===t}))},this.hasMainGroup=function(t){return e.main.groups.some((function(e){return e.id===t}))}}return _createClass(Store,[{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Store}(),_class17=_temp9,_descriptor27=_applyDecoratedDescriptor(_class17.prototype,"topologyId",[mobx_persist__WEBPACK_IMPORTED_MODULE_1__.persist,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"new"}}),_descriptor28=_applyDecoratedDescriptor(_class17.prototype,"variables",[_dec10,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor29=_applyDecoratedDescriptor(_class17.prototype,"properties",[_dec11,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor30=_applyDecoratedDescriptor(_class17.prototype,"requirements",[_dec12,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor31=_applyDecoratedDescriptor(_class17.prototype,"tasks",[_dec13,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor32=_applyDecoratedDescriptor(_class17.prototype,"collections",[_dec14,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor33=_applyDecoratedDescriptor(_class17.prototype,"main",[_dec15,mobx__WEBPACK_IMPORTED_MODULE_0__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new MMain}}),_descriptor34=_applyDecoratedDescriptor(_class17.prototype,"reset",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.topologyId="new",e.variables=[],e.properties=[],e.requirements=[],e.tasks=[],e.collections=[],e.main=new MMain}}}),_descriptor35=_applyDecoratedDescriptor(_class17.prototype,"setTopologyId",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.topologyId=t}}}),_descriptor36=_applyDecoratedDescriptor(_class17.prototype,"setVariables",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.variables=t}}}),_descriptor37=_applyDecoratedDescriptor(_class17.prototype,"setProperties",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.properties=t}}}),_descriptor38=_applyDecoratedDescriptor(_class17.prototype,"setRequirements",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.requirements=t}}}),_descriptor39=_applyDecoratedDescriptor(_class17.prototype,"setTasks",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.tasks=t}}}),_descriptor40=_applyDecoratedDescriptor(_class17.prototype,"setCollections",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.collections=t}}}),_descriptor41=_applyDecoratedDescriptor(_class17.prototype,"setMain",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.main=t}}}),_descriptor42=_applyDecoratedDescriptor(_class17.prototype,"addVariable",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.variables.push(t)}}}),_descriptor43=_applyDecoratedDescriptor(_class17.prototype,"addProperty",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.properties.push(t)}}}),_descriptor44=_applyDecoratedDescriptor(_class17.prototype,"addRequirement",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.requirements.push(t)}}}),_descriptor45=_applyDecoratedDescriptor(_class17.prototype,"addTask",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.tasks.push(t)}}}),_descriptor46=_applyDecoratedDescriptor(_class17.prototype,"addCollection",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.collections.push(t)}}}),_descriptor47=_applyDecoratedDescriptor(_class17.prototype,"addMainGroup",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.main.groups.push(t)}}}),_descriptor48=_applyDecoratedDescriptor(_class17.prototype,"removeVariable",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.variables.splice(t,1)}}}),_descriptor49=_applyDecoratedDescriptor(_class17.prototype,"removeProperty",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.properties.splice(t,1)[0].id;e.tasks.forEach((function(e){e.properties=e.properties.filter((function(e){return e.id!==r}))}))}}}),_descriptor50=_applyDecoratedDescriptor(_class17.prototype,"removeRequirement",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.requirements.splice(t,1)[0].id;e.tasks.forEach((function(e){e.requirements=e.requirements.filter((function(e){return e!==r}))})),e.collections.forEach((function(e){e.requirements=e.requirements.filter((function(e){return e!==r}))}))}}}),_descriptor51=_applyDecoratedDescriptor(_class17.prototype,"removeTask",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.tasks.splice(t,1)[0].id;e.main.tasks=e.main.tasks.filter((function(e){return e!==r})),e.collections.forEach((function(e){e.tasks=e.tasks.filter((function(e){return e!==r}))})),e.main.groups.forEach((function(e){e.tasks=e.tasks.filter((function(e){return e!==r}))}))}}}),_descriptor52=_applyDecoratedDescriptor(_class17.prototype,"removeCollection",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){var r=e.collections.splice(t,1)[0].id;e.main.collections=e.main.collections.filter((function(e){return e!==r})),e.main.groups.forEach((function(e){e.collections=e.collections.filter((function(e){return e!==r}))}))}}}),_descriptor53=_applyDecoratedDescriptor(_class17.prototype,"removeMainGroup",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.main.groups.splice(t,1)}}}),_descriptor54=_applyDecoratedDescriptor(_class17.prototype,"editProperty",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.properties[t].id;e.properties[t]=r,e.tasks.forEach((function(e){e.properties.forEach((function(e){e.id===n&&(e.id=r.id)}))}))}}}),_descriptor55=_applyDecoratedDescriptor(_class17.prototype,"editRequirement",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.requirements[t].id;e.requirements[t]=r,e.tasks.forEach((function(e){var t=e.requirements.indexOf(n);t>-1&&(e.requirements[t]=r.id)})),e.collections.forEach((function(e){var t=e.requirements.indexOf(n);t>-1&&(e.requirements[t]=r.id)}))}}}),_descriptor56=_applyDecoratedDescriptor(_class17.prototype,"editTask",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.tasks[t].id;e.tasks[t]=r,e.collections.forEach((function(e){e.tasks.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))})),e.main.groups.forEach((function(e){e.tasks.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))})),e.main.tasks.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))}}}),_descriptor57=_applyDecoratedDescriptor(_class17.prototype,"editCollection",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){var n=e.collections[t].id;e.collections[t]=r,e.main.groups.forEach((function(e){e.collections.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))})),e.main.collections.forEach((function(e,t,o){e===n&&(o[t]=r.id)}))}}}),_descriptor58=_applyDecoratedDescriptor(_class17.prototype,"editMainGroup",[mobx__WEBPACK_IMPORTED_MODULE_0__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t,r){e.main.groups[t]=r}}}),_class17),hydrate=Object(mobx_persist__WEBPACK_IMPORTED_MODULE_1__.create)({storage:localStorage,jsonify:!0}),store=new Store,_default=store,reactHotLoader,leaveModule;__webpack_exports__.i=_default,hydrate("topologyEditor",store),Object(mobx__WEBPACK_IMPORTED_MODULE_0__.autorun)((function(){})),reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&(reactHotLoader.register(MVariable,"MVariable","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MProperty,"MProperty","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MRequirement,"MRequirement","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MTaskProperty,"MTaskProperty","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MTask,"MTask","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MCollection,"MCollection","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MGroup,"MGroup","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(MMain,"MMain","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(Store,"Store","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(hydrate,"hydrate","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(store,"store","/Users/orybalch/dev/DDS-topology-editor/src/Store.js"),reactHotLoader.register(_default,"default","/Users/orybalch/dev/DDS-topology-editor/src/Store.js")),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(e,t,r){e.exports=r(200)()},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(203)),a=n(r(13)),i=n(r(11)),l=n(r(12)),u=n(r(15)),_=n(r(0)),s=n(r(3)),c=n(r(25)),f=r(18),p=r(39),d=n(r(211)),E={active:s.default.bool,disabled:s.default.bool,block:s.default.bool,onClick:s.default.func,componentClass:c.default,href:s.default.string,type:s.default.oneOf(["button","reset","submit"])},h=function(e){function t(){return e.apply(this,arguments)||this}(0,l.default)(t,e);var r=t.prototype;return r.renderAnchor=function(e,t){return _.default.createElement(d.default,(0,i.default)({},e,{className:(0,u.default)(t,e.disabled&&"disabled")}))},r.renderButton=function(e,t){var r=e.componentClass,n=(0,a.default)(e,["componentClass"]),o=r||"button";return _.default.createElement(o,(0,i.default)({},n,{type:n.type||"button",className:t}))},r.render=function(){var e,t=this.props,r=t.active,n=t.block,o=t.className,l=(0,a.default)(t,["active","block","className"]),_=(0,f.splitBsProps)(l),s=_[0],c=_[1],p=(0,i.default)({},(0,f.getClassSet)(s),((e={active:r})[(0,f.prefix)(s,"block")]=n,e)),d=(0,u.default)(o,p);return c.href?this.renderAnchor(c,d):this.renderButton(c,d)},t}(_.default.Component);h.propTypes=E,h.defaultProps={active:!1,block:!1,disabled:!1};var b=(0,f.bsClass)("btn",(0,f.bsSizes)([p.Size.LARGE,p.Size.SMALL,p.Size.XSMALL],(0,f.bsStyles)((0,o.default)(p.State).concat([p.Style.DEFAULT,p.Style.PRIMARY,p.Style.LINK]),p.Style.DEFAULT,h)));t.default=b,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(25)),c=(n(r(41)),n(r(275))),f=n(r(277)),p=r(18),d=r(39),E={componentClass:s.default,type:_.default.string,id:_.default.string,inputRef:_.default.func},h={$bs_formGroup:_.default.object},b=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.context.$bs_formGroup,r=t&&t.controlId,n=this.props,i=n.componentClass,_=n.type,s=n.id,c=void 0===s?r:s,f=n.inputRef,E=n.className,h=n.bsSize,b=(0,a.default)(n,["componentClass","type","id","inputRef","className","bsSize"]),m=(0,p.splitBsProps)(b),y=m[0],v=m[1];if("file"!==_&&(e=(0,p.getClassSet)(y)),h){var O=d.SIZE_MAP[h]||h;e[(0,p.prefix)({bsClass:"input"},O)]=!0}return u.default.createElement(i,(0,o.default)({},v,{type:_,id:c,ref:f,className:(0,l.default)(E,e)}))},t}(u.default.Component);b.propTypes=E,b.defaultProps={componentClass:"input"},b.contextTypes=h,b.Feedback=c.default,b.Static=f.default;var m=(0,p.bsClass)("form-control",(0,p.bsSizes)([d.Size.SMALL,d.Size.LARGE],b));t.default=m,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(300)),s=n(r(301)),c=r(18),f=r(39),p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=(0,a.default)(e,["className"]),n=(0,c.splitBsProps)(r),i=n[0],_=n[1],s=(0,c.getClassSet)(i);return u.default.createElement("span",(0,o.default)({},_,{className:(0,l.default)(t,s)}))},t}(u.default.Component);p.Addon=_.default,p.Button=s.default;var d=(0,c.bsClass)("input-group",(0,c.bsSizes)([f.Size.LARGE,f.Size.SMALL],p));t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(13)),a=n(r(12)),i=n(r(76)),l=n(r(11)),u=n(r(15)),_=n(r(278)),s=n(r(43)),c=n(r(31)),f=n(r(121)),p=n(r(0)),d=n(r(3)),E=n(r(22)),h=n(r(282)),b=n(r(123)),m=n(r(25)),y=n(r(120)),v=n(r(293)),O=n(r(294)),P=n(r(295)),g=n(r(296)),D=n(r(298)),M=r(18),C=n(r(55)),T=n(r(299)),w=r(39),R=(0,l.default)({},h.default.propTypes,O.default.propTypes,{backdrop:d.default.oneOf(["static",!0,!1]),backdropClassName:d.default.string,keyboard:d.default.bool,animation:d.default.bool,dialogComponentClass:m.default,autoFocus:d.default.bool,enforceFocus:d.default.bool,restoreFocus:d.default.bool,show:d.default.bool,onHide:d.default.func,onEnter:d.default.func,onEntering:d.default.func,onEntered:d.default.func,onExit:d.default.func,onExiting:d.default.func,onExited:d.default.func,container:h.default.propTypes.container}),A=(0,l.default)({},h.default.defaultProps,{animation:!0,dialogComponentClass:O.default}),L={$bs_modal:d.default.shape({onHide:d.default.func})};function I(e){return p.default.createElement(y.default,(0,l.default)({},e,{timeout:B.TRANSITION_DURATION}))}function k(e){return p.default.createElement(y.default,(0,l.default)({},e,{timeout:B.BACKDROP_TRANSITION_DURATION}))}var B=function(e){function t(t,r){var n;return(n=e.call(this,t,r)||this).handleDialogBackdropMouseDown=function(){n._waitingForMouseUp=!0},n.handleMouseUp=function(e){var t=n._modal.getDialogElement();n._waitingForMouseUp&&e.target===t&&(n._ignoreBackdropClick=!0),n._waitingForMouseUp=!1},n.handleEntering=n.handleEntering.bind((0,i.default)((0,i.default)(n))),n.handleExited=n.handleExited.bind((0,i.default)((0,i.default)(n))),n.handleWindowResize=n.handleWindowResize.bind((0,i.default)((0,i.default)(n))),n.handleDialogClick=n.handleDialogClick.bind((0,i.default)((0,i.default)(n))),n.setModalRef=n.setModalRef.bind((0,i.default)((0,i.default)(n))),n.state={style:{}},n}(0,a.default)(t,e);var r=t.prototype;return r.getChildContext=function(){return{$bs_modal:{onHide:this.props.onHide}}},r.componentWillUnmount=function(){this.handleExited()},r.setModalRef=function(e){this._modal=e},r.handleDialogClick=function(e){this._ignoreBackdropClick||e.target!==e.currentTarget?this._ignoreBackdropClick=!1:this.props.onHide()},r.handleEntering=function(){_.default.on(window,"resize",this.handleWindowResize),this.updateStyle()},r.handleExited=function(){_.default.off(window,"resize",this.handleWindowResize)},r.handleWindowResize=function(){this.updateStyle()},r.updateStyle=function(){if(c.default){var e=this._modal.getDialogElement(),t=e.scrollHeight,r=(0,s.default)(e),n=(0,b.default)(E.default.findDOMNode(this.props.container||r.body)),o=t>r.documentElement.clientHeight;this.setState({style:{paddingRight:n&&!o?(0,f.default)():void 0,paddingLeft:!n&&o?(0,f.default)():void 0}})}},r.render=function(){var e=this.props,t=e.backdrop,r=e.backdropClassName,n=e.animation,a=e.show,i=e.dialogComponentClass,_=e.className,s=e.style,c=e.children,f=e.onEntering,d=e.onExited,E=(0,o.default)(e,["backdrop","backdropClassName","animation","show","dialogComponentClass","className","style","children","onEntering","onExited"]),b=(0,T.default)(E,h.default),m=b[0],y=b[1],v=a&&!n&&"in";return p.default.createElement(h.default,(0,l.default)({},m,{ref:this.setModalRef,show:a,containerClassName:(0,M.prefix)(E,"open"),transition:n?I:void 0,backdrop:t,backdropTransition:n?k:void 0,backdropClassName:(0,u.default)((0,M.prefix)(E,"backdrop"),r,v),onEntering:(0,C.default)(f,this.handleEntering),onExited:(0,C.default)(d,this.handleExited),onMouseUp:this.handleMouseUp}),p.default.createElement(i,(0,l.default)({},y,{style:(0,l.default)({},this.state.style,s),className:(0,u.default)(_,v),onClick:!0===t?this.handleDialogClick:null,onMouseDownDialog:this.handleDialogBackdropMouseDown}),c))},t}(p.default.Component);B.propTypes=R,B.defaultProps=A,B.childContextTypes=L,B.Body=v.default,B.Header=g.default,B.Title=D.default,B.Footer=P.default,B.Dialog=O.default,B.TRANSITION_DURATION=300,B.BACKDROP_TRANSITION_DURATION=150;var U=(0,M.bsClass)("modal",(0,M.bsSizes)([w.Size.LARGE,w.Size.SMALL],B));t.default=U,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=r(63),a=r(149),i=r(150),l=r(90),u=r(151);t.persist=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1];return e[2],r in l.types?o.serializable(l.types[r](n)):1===e.length?function(e){return u.persistObject(e,r)}:o.serializable.apply(null,e)},t.create=function(e){var t=void 0===e?{}:e,r=t.storage,l=void 0===r?a:r,u=t.jsonify,_=void 0===u||u,s=t.debounce,c=void 0===s?0:s;return"undefined"!=typeof localStorage&&localStorage===l&&(l=a),function(e,t,r){void 0===r&&(r={});var a=o.getDefaultModelSchema(t);var u=function u(){var s=l.getItem(e).then((function(e){return _?JSON.parse(e):e})).then(n.action("[mobx-persist "+e+"] LOAD_DATA",(function(e){return e&&"object"==typeof e&&o.update(a,t,e),i.mergeObservables(t,r),t})));return s.rehydrate=u,s}();return n.reaction((function(){return o.serialize(a,t)}),(function(t){return l.setItem(e,_?JSON.stringify(t):t)}),{delay:c}),u}}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return z}));var n=r(1),o=r(0),a=r(22);if(!o.useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!n.spy)throw new Error("mobx-react-lite requires mobx at least version 4 to be available");var i=!1;function l(){return i}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var u=function(){return(u=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function _(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i}function s(e){return e.current?Object(n.getDependencyTree)(e.current):"<unknown>"}var c=[];function f(){var e=_(Object(o.useState)(0),2)[1];return Object(o.useCallback)((function(){e((function(e){return e+1}))}),[])}var p={};function d(e,t,r){if(void 0===t&&(t="observed"),void 0===r&&(r=p),l())return e();var a=(r.useForceUpdate||f)(),i=Object(o.useRef)(null);i.current||(i.current=new n.Reaction("observer("+t+")",(function(){a()})));var u,_,d=function(){i.current&&!i.current.isDisposed&&(i.current.dispose(),i.current=null)};if(Object(o.useDebugValue)(i,s),function(e){Object(o.useEffect)((function(){return e}),c)}((function(){d()})),i.current.track((function(){try{u=e()}catch(e){_=e}})),_)throw d(),_;return u}function E(e,t){if(l())return e;var r,n,a,i=u({forwardRef:!1},t),_=e.displayName||e.name,s=function(t,r){return d((function(){return e(t,r)}),_)};return s.displayName=_,r=i.forwardRef?Object(o.memo)(Object(o.forwardRef)(s)):Object(o.memo)(s),n=e,a=r,Object.keys(n).forEach((function(e){n.hasOwnProperty(e)&&!h[e]&&Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(n,e))})),r.displayName=_,r}var h={$$typeof:!0,render:!0,compare:!0,type:!0};function b(e){var t=e.children,r=e.render,n=t||r;return"function"!=typeof n?null:d(n)}function m(e,t,r,n,o){var a="children"===t?"render":"children",i="function"==typeof e[t],l="function"==typeof e[a];return i&&l?new Error("MobX Observer: Do not use children and render in the same time in`"+r):i||l?null:new Error("Invalid prop `"+o+"` of type `"+typeof e[t]+"` supplied to `"+r+"`, expected `function`.")}b.propTypes={children:m,render:m},b.displayName="Observer";var y=0;var v={};function O(e){return v[e]||(v[e]=function(e){if("function"==typeof Symbol)return Symbol(e);var t="__$mobx-react "+e+" ("+y+")";return y++,t}(e)),v[e]}function P(e,t){if(g(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var o=0;o<r.length;o++)if(!Object.hasOwnProperty.call(t,r[o])||!g(e[r[o]],t[r[o]]))return!1;return!0}function g(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function D(e,t,r){Object.hasOwnProperty.call(e,t)?e[t]=r:Object.defineProperty(e,t,{enumerable:!1,configurable:!0,writable:!0,value:r})}var M=O("patchMixins"),C=O("patchedDefinition");function T(e,t){for(var r=this,n=arguments.length,o=new Array(n>2?n-2:0),a=2;a<n;a++)o[a-2]=arguments[a];t.locks++;try{var i;return null!=e&&(i=e.apply(this,o)),i}finally{t.locks--,0===t.locks&&t.methods.forEach((function(e){e.apply(r,o)}))}}function w(e,t){return function(){for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];T.call.apply(T,[this,e,t].concat(n))}}function R(e,t,r){var n=function(e,t){var r=e[M]=e[M]||{},n=r[t]=r[t]||{};return n.locks=n.locks||0,n.methods=n.methods||[],n}(e,t);n.methods.indexOf(r)<0&&n.methods.push(r);var o=Object.getOwnPropertyDescriptor(e,t);if(!o||!o[C]){var a=e[t],i=function e(t,r,n,o,a){var i,l=w(a,o);return(i={})[C]=!0,i.get=function(){return l},i.set=function(a){if(this===t)l=w(a,o);else{var i=e(this,r,n,o,a);Object.defineProperty(this,r,i)}},i.configurable=!0,i.enumerable=n,i}(e,t,o?o.enumerable:void 0,n,a);Object.defineProperty(e,t,i)}}var A=n.$mobx||"$mobx",L=O("isUnmounted"),I=O("skipRender"),k=O("isForcingUpdate");function B(e){var t=e.prototype;if(t.componentWillReact)throw new Error("The componentWillReact life-cycle event is no longer supported");if(e.__proto__!==o.PureComponent)if(t.shouldComponentUpdate){if(t.shouldComponentUpdate!==x)throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.")}else t.shouldComponentUpdate=x;S(t,"props"),S(t,"state");var r=t.render;return t.render=function(){return U.call(this,r)},R(t,"componentWillUnmount",(function(){if(!0!==l()){if(this.render[A])this.render[A].dispose();else;this[L]=!0}})),e}function U(e){var t=this;if(!0===l())return e.call(this);D(this,I,!1),D(this,k,!1);var r,a=(r=this).displayName||r.name||r.constructor&&(r.constructor.displayName||r.constructor.name)||"<component>",i=e.bind(this),u=!1,_=new n.Reaction(a+".render()",(function(){if(!u&&(u=!0,!0!==t[L])){var e=!0;try{D(t,k,!0),t[I]||o.Component.prototype.forceUpdate.call(t),e=!1}finally{D(t,k,!1),e&&_.dispose()}}}));function s(){u=!1;var e=void 0,t=void 0;if(_.track((function(){try{t=Object(n._allowStateChanges)(!1,i)}catch(t){e=t}})),e)throw e;return t}return _.reactComponent=this,s[A]=_,this.render=s,s.call(this)}function x(e,t){return l()&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!P(this.props,e)}function S(e,t){var r=O("reactProp_"+t+"_valueHolder"),o=O("reactProp_"+t+"_atomHolder");function a(){return this[o]||D(this,o,Object(n.createAtom)("reactive "+t)),this[o]}Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){var e=!1;return n._allowStateReadsStart&&n._allowStateReadsEnd&&(e=Object(n._allowStateReadsStart)(!0)),a.call(this).reportObserved(),n._allowStateReadsStart&&n._allowStateReadsEnd&&Object(n._allowStateReadsEnd)(e),this[r]},set:function(e){this[k]||P(this[r],e)?D(this,r,e):(D(this,r,e),D(this,I,!0),a.call(this).reportChanged(),D(this,I,!1))}})}var W="function"==typeof Symbol&&Symbol.for,K=W?Symbol.for("react.forward_ref"):"function"==typeof o.forwardRef&&Object(o.forwardRef)((function(e){return null})).$$typeof,N=W?Symbol.for("react.memo"):"function"==typeof o.memo&&Object(o.memo)((function(e){return null})).$$typeof;function z(e){if(!0===e.isMobxInjector&&console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),N&&e.$$typeof===N)throw new Error("Mobx observer: You are trying to use 'observer' on function component wrapped to either another observer or 'React.memo'. The observer already applies 'React.memo' for you.");if(K&&e.$$typeof===K){var t=e.render;if("function"!=typeof t)throw new Error("render property of ForwardRef was not a function");return Object(o.forwardRef)((function(){var e=arguments;return Object(o.createElement)(b,null,(function(){return t.apply(void 0,e)}))}))}return"function"!=typeof e||e.prototype&&e.prototype.render||e.isReactClass||Object.prototype.isPrototypeOf.call(o.Component,e)?B(e):E(e)}if(!o.Component)throw new Error("mobx-react requires React to be available");if(!n.observable)throw new Error("mobx-react requires mobx to be available");"function"==typeof a.unstable_batchedUpdates&&Object(n.configure)({reactionScheduler:a.unstable_batchedUpdates})},function(e,t,r){var n=r(187);function o(){return e.exports=o=n||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}e.exports=o},function(e,t,r){var n=r(195);e.exports=function(e,t){e.prototype=n(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,r){var n=r(192);e.exports=function(e,t){if(null==e)return{};var r,o,a={},i=n(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c=r(39),f=n(r(274)),p={controlId:_.default.string,validationState:_.default.oneOf(["success","warning","error",null])},d={$bs_formGroup:_.default.object.isRequired},E=function(e){function t(){return e.apply(this,arguments)||this}(0,i.default)(t,e);var r=t.prototype;return r.getChildContext=function(){var e=this.props;return{$bs_formGroup:{controlId:e.controlId,validationState:e.validationState}}},r.hasFeedback=function(e){var t=this;return f.default.some(e,(function(e){return"feedback"===e.props.bsRole||e.props.children&&t.hasFeedback(e.props.children)}))},r.render=function(){var e=this.props,t=e.validationState,r=e.className,n=e.children,i=(0,a.default)(e,["validationState","className","children"]),_=(0,s.splitBsPropsAndOmit)(i,["controlId"]),c=_[0],f=_[1],p=(0,o.default)({},(0,s.getClassSet)(c),{"has-feedback":this.hasFeedback(n)});return t&&(p["has-"+t]=!0),u.default.createElement("div",(0,o.default)({},f,{className:(0,l.default)(r,p)}),n)},t}(u.default.Component);E.propTypes=p,E.childContextTypes=d;var h=(0,s.bsClass)("form-group",(0,s.bsSizes)([c.Size.LARGE,c.Size.SMALL],E));t.default=h,e.exports=t.default},function(e,t,r){var n;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)&&n.length){var i=o.apply(null,n);i&&e.push(i)}else if("object"===a)for(var l in n)r.call(n,l)&&n[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},function(e,t,r){"use strict";var n=r(77),o=r(9);t.__esModule=!0,t.default=void 0;var a=o(r(13)),i=o(r(12)),l=o(r(76)),u=o(r(11)),_=o(r(250)),s=o(r(50)),c=n(r(0)),f=o(r(3)),p=o(r(22)),d=(o(r(41)),o(r(253))),E=o(r(55));function h(e,t){return(0,_.default)(t)?t.indexOf(e)>=0:e===t}var b=f.default.oneOf(["click","hover","focus"]),m=(0,u.default)({},d.default.propTypes,{trigger:f.default.oneOfType([b,f.default.arrayOf(b)]),delay:f.default.number,delayShow:f.default.number,delayHide:f.default.number,defaultOverlayShown:f.default.bool,overlay:f.default.node.isRequired,onBlur:f.default.func,onClick:f.default.func,onFocus:f.default.func,onMouseOut:f.default.func,onMouseOver:f.default.func,target:f.default.oneOf([null]),onHide:f.default.oneOf([null]),show:f.default.oneOf([null])}),y=function(e){function t(t,r){var n;return(n=e.call(this,t,r)||this).handleToggle=n.handleToggle.bind((0,l.default)((0,l.default)(n))),n.handleDelayedShow=n.handleDelayedShow.bind((0,l.default)((0,l.default)(n))),n.handleDelayedHide=n.handleDelayedHide.bind((0,l.default)((0,l.default)(n))),n.handleHide=n.handleHide.bind((0,l.default)((0,l.default)(n))),n.handleMouseOver=function(e){return n.handleMouseOverOut(n.handleDelayedShow,e,"fromElement")},n.handleMouseOut=function(e){return n.handleMouseOverOut(n.handleDelayedHide,e,"toElement")},n._mountNode=null,n.state={show:t.defaultOverlayShown},n}(0,i.default)(t,e);var r=t.prototype;return r.componentDidMount=function(){this._mountNode=document.createElement("div"),this.renderOverlay()},r.componentDidUpdate=function(){this.renderOverlay()},r.componentWillUnmount=function(){p.default.unmountComponentAtNode(this._mountNode),this._mountNode=null,clearTimeout(this._hoverShowDelay),clearTimeout(this._hoverHideDelay)},r.handleDelayedHide=function(){var e=this;if(null!=this._hoverShowDelay)return clearTimeout(this._hoverShowDelay),void(this._hoverShowDelay=null);if(this.state.show&&null==this._hoverHideDelay){var t=null!=this.props.delayHide?this.props.delayHide:this.props.delay;t?this._hoverHideDelay=setTimeout((function(){e._hoverHideDelay=null,e.hide()}),t):this.hide()}},r.handleDelayedShow=function(){var e=this;if(null!=this._hoverHideDelay)return clearTimeout(this._hoverHideDelay),void(this._hoverHideDelay=null);if(!this.state.show&&null==this._hoverShowDelay){var t=null!=this.props.delayShow?this.props.delayShow:this.props.delay;t?this._hoverShowDelay=setTimeout((function(){e._hoverShowDelay=null,e.show()}),t):this.show()}},r.handleHide=function(){this.hide()},r.handleMouseOverOut=function(e,t,r){var n=t.currentTarget,o=t.relatedTarget||t.nativeEvent[r];o&&o===n||(0,s.default)(n,o)||e(t)},r.handleToggle=function(){this.state.show?this.hide():this.show()},r.hide=function(){this.setState({show:!1})},r.makeOverlay=function(e,t){return c.default.createElement(d.default,(0,u.default)({},t,{show:this.state.show,onHide:this.handleHide,target:this}),e)},r.show=function(){this.setState({show:!0})},r.renderOverlay=function(){p.default.unstable_renderSubtreeIntoContainer(this,this._overlay,this._mountNode)},r.render=function(){var e=this.props,t=e.trigger,r=e.overlay,n=e.children,o=e.onBlur,i=e.onClick,l=e.onFocus,u=e.onMouseOut,_=e.onMouseOver,s=(0,a.default)(e,["trigger","overlay","children","onBlur","onClick","onFocus","onMouseOut","onMouseOver"]);delete s.delay,delete s.delayShow,delete s.delayHide,delete s.defaultOverlayShown;var f=c.default.Children.only(n),p=f.props,d={};return this.state.show&&(d["aria-describedby"]=r.props.id),d.onClick=(0,E.default)(p.onClick,i),h("click",t)&&(d.onClick=(0,E.default)(d.onClick,this.handleToggle)),h("hover",t)&&(d.onMouseOver=(0,E.default)(p.onMouseOver,_,this.handleMouseOver),d.onMouseOut=(0,E.default)(p.onMouseOut,u,this.handleMouseOut)),h("focus",t)&&(d.onFocus=(0,E.default)(p.onFocus,l,this.handleDelayedShow),d.onBlur=(0,E.default)(p.onBlur,o,this.handleDelayedHide)),this._overlay=this.makeOverlay(r,s),(0,c.cloneElement)(f,d)},t}(c.default.Component);y.propTypes=m,y.defaultProps={defaultOverlayShown:!1,trigger:["hover","focus"]};var v=y;t.default=v,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(273)),c=r(18),f={id:(0,s.default)(_.default.oneOfType([_.default.string,_.default.number])),placement:_.default.oneOf(["top","right","bottom","left"]),positionTop:_.default.oneOfType([_.default.number,_.default.string]),positionLeft:_.default.oneOfType([_.default.number,_.default.string]),arrowOffsetTop:_.default.oneOfType([_.default.number,_.default.string]),arrowOffsetLeft:_.default.oneOfType([_.default.number,_.default.string]),title:_.default.node},p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.placement,n=t.positionTop,i=t.positionLeft,_=t.arrowOffsetTop,s=t.arrowOffsetLeft,f=t.title,p=t.className,d=t.style,E=t.children,h=(0,a.default)(t,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","title","className","style","children"]),b=(0,c.splitBsProps)(h),m=b[0],y=b[1],v=(0,o.default)({},(0,c.getClassSet)(m),((e={})[r]=!0,e)),O=(0,o.default)({display:"block",top:n,left:i},d),P={top:_,left:s};return u.default.createElement("div",(0,o.default)({},y,{role:"tooltip",className:(0,l.default)(p,v),style:O}),u.default.createElement("div",{className:"arrow",style:P}),f&&u.default.createElement("h3",{className:(0,c.prefix)(m,"title")},f),u.default.createElement("div",{className:(0,c.prefix)(m,"content")},E))},t}(u.default.Component);p.propTypes=f,p.defaultProps={placement:"right"};var d=(0,c.bsClass)("popover",p);t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.prefix=_,t.getClassSet=function(e){var t,r=((t={})[_(e)]=!0,t);if(e.bsSize){var n=l.SIZE_MAP[e.bsSize]||e.bsSize;r[_(e,n)]=!0}e.bsStyle&&(r[_(e,e.bsStyle)]=!0);return r},t.splitBsProps=function(e){var t={};return(0,o.default)(e).forEach((function(e){var r=e[0],n=e[1];d(r)||(t[r]=n)})),[p(e),t]},t.splitBsPropsAndOmit=function(e,t){var r={};t.forEach((function(e){r[e]=!0}));var n={};return(0,o.default)(e).forEach((function(e){var t=e[0],o=e[1];d(t)||r[t]||(n[t]=o)})),[p(e),n]},t.addStyle=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];c(r)(e)},t._curry=t.bsSizes=t.bsStyles=t.bsClass=void 0;var o=n(r(107)),a=n(r(11)),i=(n(r(210)),n(r(3))),l=r(39);function u(e){return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var o=r[r.length-1];return"function"==typeof o?e.apply(void 0,r):function(t){return e.apply(void 0,r.concat([t]))}}}function _(e,t){var r=(e.bsClass||"").trim();return null==r&&invariant(!1),r+(t?"-"+t:"")}var s=u((function(e,t){var r=t.propTypes||(t.propTypes={}),n=t.defaultProps||(t.defaultProps={});return r.bsClass=i.default.string,n.bsClass=e,t}));t.bsClass=s;var c=u((function(e,t,r){"string"!=typeof t&&(r=t,t=void 0);var n=r.STYLES||[],o=r.propTypes||{};e.forEach((function(e){-1===n.indexOf(e)&&n.push(e)}));var l=i.default.oneOf(n);(r.STYLES=n,l._values=n,r.propTypes=(0,a.default)({},o,{bsStyle:l}),void 0!==t)&&((r.defaultProps||(r.defaultProps={})).bsStyle=t);return r}));t.bsStyles=c;var f=u((function(e,t,r){"string"!=typeof t&&(r=t,t=void 0);var n=r.SIZES||[],o=r.propTypes||{};e.forEach((function(e){-1===n.indexOf(e)&&n.push(e)}));var u=[];n.forEach((function(e){var t=l.SIZE_MAP[e];t&&t!==e&&u.push(t),u.push(e)}));var _=i.default.oneOf(u);return _._values=u,r.SIZES=n,r.propTypes=(0,a.default)({},o,{bsSize:_}),void 0!==t&&(r.defaultProps||(r.defaultProps={}),r.defaultProps.bsSize=t),r}));function p(e){return{bsClass:e.bsClass,bsSize:e.bsSize,bsStyle:e.bsStyle,bsRole:e.bsRole}}function d(e){return"bsClass"===e||"bsSize"===e||"bsStyle"===e||"bsRole"===e}t.bsSizes=f;var E=u;t._curry=E},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var r=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=r)},function(e,t,r){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=r(146)},function(e,t,r){"use strict";var n=r(91),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function _(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:_,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)_(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,o=arguments.length;n<o;n++)_(arguments[n],r);return t},extend:function(e,t,r){return _(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){var n=r(27),o=r(21),a=r(51),i=r(32),l=r(34),u=function(e,t,r){var _,s,c,f=e&u.F,p=e&u.G,d=e&u.S,E=e&u.P,h=e&u.B,b=e&u.W,m=p?o:o[t]||(o[t]={}),y=m.prototype,v=p?n:d?n[t]:(n[t]||{}).prototype;for(_ in p&&(r=t),r)(s=!f&&v&&void 0!==v[_])&&l(m,_)||(c=s?v[_]:r[_],m[_]=p&&"function"!=typeof v[_]?r[_]:h&&s?a(c,n):b&&v[_]==c?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(c):E&&"function"==typeof c?a(Function.call,c):c,E&&((m.virtual||(m.virtual={}))[_]=c,e&u.R&&y&&!y[_]&&i(y,_,c)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(r(0)),o=r(206),a=i(r(75));function i(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)((function(e,t,r,a,i){var l=e[t];return n.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+r+"`,expected an element type (a string , component class, or function component)."):(0,o.isValidElementType)(l)?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+r+"`, expected an element type (a string , component class, or function component).")})),e.exports=t.default},function(e,t,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=u(r(153)),i=u(r(46)),l=r(99);function u(e){return e&&e.__esModule?e:{default:e}}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var s=(0,i.default)("github:request"),c=function(e){function t(e,r,n){_(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return o.path=r,o.request=n.config,o.response=(n||{}).response||n,o.status=n.status,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Error),t}(),f=function(){function e(t,r,n){_(this,e),this.__apiBase=r||"https://api.github.com",this.__auth={token:t.token,username:t.username,password:t.password},this.__AcceptHeader=n||"v3",t.token?this.__authorizationHeader="token "+t.token:t.username&&t.password&&(this.__authorizationHeader="Basic "+l.Base64.encode(t.username+":"+t.password))}return o(e,[{key:"__getURL",value:function(e){var t=e;-1===e.indexOf("//")&&(t=this.__apiBase+e);var r="timestamp="+(new Date).getTime();return t.replace(/(timestamp=\d+)/,r)}},{key:"__getRequestHeaders",value:function(e,t){var r={"Content-Type":"application/json;charset=UTF-8",Accept:"application/vnd.github."+(t||this.__AcceptHeader)};return e&&(r.Accept+=".raw"),r.Accept+="+json",this.__authorizationHeader&&(r.Authorization=this.__authorizationHeader),r}},{key:"_getOptionsWithDefaults",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.visibility||e.affiliation||(e.type=e.type||"all"),e.sort=e.sort||"updated",e.per_page=e.per_page||"100",e}},{key:"_dateToISO",value:function(e){return e&&e instanceof Date&&(e=e.toISOString()),e}},{key:"_request",value:function(e,t,r,o,i){var l=this.__getURL(t),u=(r||{}).AcceptHeader;u&&delete r.AcceptHeader;var _=this.__getRequestHeaders(i,u),c={};r&&"object"===(void 0===r?"undefined":n(r))&&function(e){return-1!==p.indexOf(e)}(e)&&(c=r,r=void 0);var f={url:l,method:e,headers:_,params:c,data:r,responseType:i?"text":"json"};s(f.method+" to "+f.url);var E=(0,a.default)(f).catch(d(o,t));return o&&E.then((function(e){e.data&&Object.keys(e.data).length>0?o(null,e.data,e):"GET"!==f.method&&Object.keys(e.data).length<1?o(null,e.status<300,e):o(null,e.data,e)})),E}},{key:"_request204or404",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"GET";return this._request(n,e,t).then((function(e){return r&&r(null,!0,e),!0}),(function(e){if(404===e.response.status)return r&&r(null,!1,e),!1;throw r&&r(e),e}))}},{key:"_requestAllPages",value:function(e,t,r,n){var o=this;return n=n||[],this._request("GET",e,t).then((function(a){var i,l=void 0;if(a.data instanceof Array)l=a.data;else{if(!(a.data.items instanceof Array)){var u="cannot figure out how to append "+a.data+" to the result set";throw new c(u,e,a)}l=a.data.items}(i=n).push.apply(i,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(l));var _=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=e.split(/\s*,\s*/);return t.reduce((function(e,t){return-1!==t.search(/rel="next"/)?(t.match(/<(.*)>/)||[])[1]:e}),void 0)}(a.headers.link);return _&&(t||(t={}),t.page=parseInt(_.match(/(page=[0-9]*)/g).shift().split("=").pop()),!t||"number"==typeof t.page)?(s("getting next page: "+_),o._requestAllPages(_,t,r,n)):(r&&r(null,n,a),a.data=n,a)})).catch(d(r,e))}}]),e}();e.exports=f;var p=["GET","HEAD","DELETE"];function d(e,t){return function(r){var n=void 0;if(r.hasOwnProperty("config")){var o=r.response,a=o.status,i=o.statusText,l=r.config,u=a+" error making request "+l.method+" "+l.url+': "'+i+'"';n=new c(u,t,r),s(u+" "+JSON.stringify(r.data))}else n=r;if(!e)throw s("throwing error"),n;s("going to error callback"),e(n)}}},function(e,t){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,r){e.exports=!r(38)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(71)("wks"),o=r(54),a=r(27).Symbol,i="function"==typeof a;(e.exports=function(e){return n[e]||(n[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=n},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=n,e.exports=t.default},function(e,t,r){var n=r(33),o=r(52);e.exports=r(29)?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(37),o=r(101),a=r(64),i=Object.defineProperty;t.f=r(29)?Object.defineProperty:function(e,t,r){if(n(e),t=a(t,!0),n(r),o)try{return i(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t,r){var n=r(65),o=r(67);e.exports=function(e){return n(o(e))}},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=(n(r(41)),r(18)),c={inline:_.default.bool,disabled:_.default.bool,title:_.default.string,validationState:_.default.oneOf(["success","warning","error",null]),inputRef:_.default.func},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.inline,r=e.disabled,n=e.validationState,i=e.inputRef,_=e.className,c=e.style,f=e.title,p=e.children,d=(0,a.default)(e,["inline","disabled","validationState","inputRef","className","style","title","children"]),E=(0,s.splitBsProps)(d),h=E[0],b=E[1],m=u.default.createElement("input",(0,o.default)({},b,{ref:i,type:"radio",disabled:r}));if(t){var y,v=((y={})[(0,s.prefix)(h,"inline")]=!0,y.disabled=r,y);return u.default.createElement("label",{className:(0,l.default)(_,v),style:c,title:f},m,p)}var O=(0,o.default)({},(0,s.getClassSet)(h),{disabled:r});return n&&(O["has-"+n]=!0),u.default.createElement("div",{className:(0,l.default)(_,O),style:c},u.default.createElement("label",{title:f},m,p))},t}(u.default.Component);f.propTypes=c,f.defaultProps={inline:!1,disabled:!1,title:""};var p=(0,s.bsClass)("radio",f);t.default=p,e.exports=t.default},function(e,t,r){var n=r(28);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,r){"use strict";t.__esModule=!0,t.Style=t.State=t.DEVICE_SIZES=t.SIZE_MAP=t.Size=void 0;t.Size={LARGE:"large",SMALL:"small",XSMALL:"xsmall"};t.SIZE_MAP={large:"lg",medium:"md",small:"sm",xsmall:"xs",lg:"lg",md:"md",sm:"sm",xs:"xs"};t.DEVICE_SIZES=["lg","md","sm","xs"];t.State={SUCCESS:"success",WARNING:"warning",DANGER:"danger",INFO:"info"};t.Style={DEFAULT:"default",PRIMARY:"primary",LINK:"link",INVERSE:"inverse"}},function(e,t,r){var n=r(104),o=r(72);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";e.exports=function(){}},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return(0,o.default)(n.default.findDOMNode(e))};var n=a(r(22)),o=a(r(43));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e&&e.ownerDocument||document},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=(n(r(41)),r(18)),c={inline:_.default.bool,disabled:_.default.bool,title:_.default.string,validationState:_.default.oneOf(["success","warning","error",null]),inputRef:_.default.func},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.inline,r=e.disabled,n=e.validationState,i=e.inputRef,_=e.className,c=e.style,f=e.title,p=e.children,d=(0,a.default)(e,["inline","disabled","validationState","inputRef","className","style","title","children"]),E=(0,s.splitBsProps)(d),h=E[0],b=E[1],m=u.default.createElement("input",(0,o.default)({},b,{ref:i,type:"checkbox",disabled:r}));if(t){var y,v=((y={})[(0,s.prefix)(h,"inline")]=!0,y.disabled=r,y);return u.default.createElement("label",{className:(0,l.default)(_,v),style:c,title:f},m,p)}var O=(0,o.default)({},(0,s.getClassSet)(h),{disabled:r});return n&&(O["has-"+n]=!0),u.default.createElement("div",{className:(0,l.default)(_,O),style:c},u.default.createElement("label",{title:f},m,p))},t}(u.default.Component);f.propTypes=c,f.defaultProps={inline:!1,disabled:!1,title:""};var p=(0,s.bsClass)("checkbox",f);t.default=p,e.exports=t.default},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){(function(n){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}(t=e.exports=r(170)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var o=0,a=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(o++,"%c"===e&&(a=o))})),e.splice(a,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,r(62))},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,r){var n=r(67);e.exports=function(e){return Object(n(e))}},function(e,t){e.exports={}},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(31)).default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):a(e,t)}:a;function a(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}t.default=o,e.exports=t.default},function(e,t,r){var n=r(100);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports=!0},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+n).toString(36))}},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];e.apply(this,n),t.apply(this,n)}}),null)};t.default=n,e.exports=t.default},function(e,t,r){var n=r(33).f,o=r(34),a=r(30)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,a)&&n(e,a,{configurable:!0,value:t})}},function(e,t,r){var n=r(54)("meta"),o=r(28),a=r(34),i=r(33).f,l=0,u=Object.isExtensible||function(){return!0},_=!r(38)((function(){return u(Object.preventExtensions({}))})),s=function(e){i(e,n,{value:{i:"O"+ ++l,w:{}}})},c=e.exports={KEY:n,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,n)){if(!u(e))return"F";if(!t)return"E";s(e)}return e[n].i},getWeak:function(e,t){if(!a(e,n)){if(!u(e))return!0;if(!t)return!1;s(e)}return e[n].w},onFreeze:function(e){return _&&c.NEED&&u(e)&&!a(e,n)&&s(e),e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=i(r(0)),a=i(r(75));function i(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)((function(e,t,r,a,i){var l=e[t],u=void 0===l?"undefined":n(l);return o.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+r+"`, expected a ReactComponent or a DOMElement. You can usually obtain a ReactComponent or DOMElement from a ReactElement by attaching a ref to it."):"object"===u&&"function"==typeof l.render||1===l.nodeType?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+r+"`, expected a ReactComponent or a DOMElement.")})),e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){return e="function"==typeof e?e():e,a.default.findDOMNode(e)||t};var n,o=r(22),a=(n=o)&&n.__esModule?n:{default:n};e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=(n(r(41)),r(18)),c={htmlFor:_.default.string,srOnly:_.default.bool},f={$bs_formGroup:_.default.object},p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.context.$bs_formGroup,t=e&&e.controlId,r=this.props,n=r.htmlFor,i=void 0===n?t:n,_=r.srOnly,c=r.className,f=(0,a.default)(r,["htmlFor","srOnly","className"]),p=(0,s.splitBsProps)(f),d=p[0],E=p[1],h=(0,o.default)({},(0,s.getClassSet)(d),{"sr-only":_});return u.default.createElement("label",(0,o.default)({},E,{htmlFor:i,className:(0,l.default)(c,h)}))},t}(u.default.Component);p.propTypes=c,p.defaultProps={srOnly:!1},p.contextTypes=f;var d=(0,s.bsClass)("control-label",p);t.default=d,e.exports=t.default},function(e,t){var r,n,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,_=[],s=!1,c=-1;function f(){s&&u&&(s=!1,u.length?_=u.concat(_):c=-1,_.length&&p())}function p(){if(!s){var e=l(f);s=!0;for(var t=_.length;t;){for(u=_,_=[];++c<t;)u&&u[c].run();c=-1,t=_.length}u=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function E(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];_.push(new d(e,t)),1!==_.length||s||l(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=E,o.addListener=E,o.once=E,o.off=E,o.removeListener=E,o.removeAllListeners=E,o.emit=E,o.prependListener=E,o.prependOnceListener=E,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";function n(e){return{factory:function(){return{}},props:e}}r.r(t),r.d(t,"createSimpleSchema",(function(){return n})),r.d(t,"createModelSchema",(function(){return m})),r.d(t,"getDefaultModelSchema",(function(){return h})),r.d(t,"setDefaultModelSchema",(function(){return b})),r.d(t,"serializable",(function(){return C})),r.d(t,"serialize",(function(){return T})),r.d(t,"serializeAll",(function(){return K})),r.d(t,"cancelDeserialize",(function(){return N})),r.d(t,"deserialize",(function(){return k})),r.d(t,"update",(function(){return z})),r.d(t,"primitive",(function(){return y})),r.d(t,"identifier",(function(){return j})),r.d(t,"date",(function(){return q})),r.d(t,"alias",(function(){return F})),r.d(t,"custom",(function(){return V})),r.d(t,"object",(function(){return W})),r.d(t,"child",(function(){return W})),r.d(t,"optional",(function(){return G})),r.d(t,"reference",(function(){return H})),r.d(t,"ref",(function(){return H})),r.d(t,"list",(function(){return $})),r.d(t,"map",(function(){return Y})),r.d(t,"mapAsArray",(function(){return Q})),r.d(t,"raw",(function(){return X})),r.d(t,"SKIP",(function(){return v}));var o={j:function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}};function a(e,t){if(!e){var r=Array.prototype.slice.call(arguments,2),n=[],a=0,i=t.replace(/%([a-zA-Z%])/g,(function(e,t){if("%%"===e)return e;var i=o[t];if("function"==typeof i){var l=r[a++];return n.push(l),i(l)}return e}));throw console&&n.length>0&&console.log.apply(console,n),new Error("[serializr] "+(i||"Illegal State"))}}function i(e){if(e)throw new Error(e)}function l(e,t,r){if(0!==e.length){var n=e.filter((function(){return!0})).length,o=[],a=!1,i=function(e,t,i){t?a||(a=!0,r(t)):(o[e]=i,0==--n&&r(null,o))};e.forEach((function(e,r){t(e,i.bind(null,r),r)}))}else r(null,[])}function u(e){return null===e||"object"!=typeof e&&"function"!=typeof e}function _(e){return e&&e.factory&&e.props}function s(e){return e&&e.serializer&&e.deserializer}function c(e){return"object"==typeof e&&!!e.jsonname}function f(e){return"object"==typeof e&&!0===e.identifier}function p(e,t){for(;e;){if(e===t)return!0;e=e.extends}return!1}function d(e){return e&&"function"==typeof e.keys&&"function"==typeof e.clear}function E(e,t){if(t){a(s(e),"expected a propSchema");["beforeDeserialize","afterDeserialize"].forEach((function(r){"function"==typeof t[r]&&(e[r]=t[r])}))}return e}function h(e){return e?_(e)?e:_(e.serializeInfo)?e.serializeInfo:e.constructor&&e.constructor.serializeInfo?e.constructor.serializeInfo:void 0:null}function b(e,t){return a(_(t)),e.serializeInfo=t}function m(e,t,r){a(e!==Object,"one cannot simply put define a model schema for Object"),a("function"==typeof e,"expected constructor function");var n={targetClass:e,factory:r||function(){return new e},props:t};if(e.prototype.constructor!==Object){var o=h(e.prototype.constructor);o&&o.targetClass!==e&&(n.extends=o)}return b(e,n),n}function y(e){var t={serializer:function(e){return a(u(e),"this value is not primitive: "+e),e},deserializer:function(e,t){u(e)?t(null,e):t("[serializr] this value is not primitive: "+e)}};return t=E(t,e)}var v="undefined"!=typeof Symbol?Symbol("SKIP"):{SKIP:!0},O=y(),P=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,g=/([^\s,]+)/g;function D(e){var t=e.toString().replace(P,""),r=t.slice(t.indexOf("(")+1,t.indexOf(")")).match(g);return null===r&&(r=[]),r}function M(e,t,r,n){var o;if(a(arguments.length>=2,"too few arguments. Please use @serializable as property decorator"),void 0===r&&"function"==typeof t&&t.prototype&&void 0!==n&&"number"==typeof n){a(s(e),"Constructor params must use alias(name)"),a(e.jsonname,"Constructor params must use alias(name)");var i=D(t);i.length>=n&&(r=i[n],e.paramNumber=n,n=void 0,t=t.prototype,o=function(e){for(var r=[],n=0;n<t.constructor.length;n++)Object.keys(e.modelSchema.props).forEach((function(t){var o=e.modelSchema.props[t];o.paramNumber===n&&(r[n]=e.json[o.jsonname])}));return new(Function.prototype.bind.apply(t.constructor,[null].concat(r)))})}a("string"==typeof r,"incorrect usage of @serializable decorator");var l=h(t);return l&&t.constructor.hasOwnProperty("serializeInfo")||(l=m(t.constructor,{},o)),l&&l.targetClass!==t.constructor&&(l=m(t.constructor,{},o)),l.props[r]=e,!n||n.get||n.set||(n.writable=!0),n}function C(e,t,r){if(1===arguments.length){var n=!0===e?O:e;return a(s(n),"@serializable expects prop schema"),M.bind(null,n)}return M(y(),e,t,r)}function T(e,t){a(1===arguments.length||2===arguments.length,"serialize expects one or 2 arguments");var r=1===arguments.length?e:t,n=1===arguments.length?null:e;if(Array.isArray(r)){if(0===r.length)return[];n?"object"!=typeof n&&(n=h(n)):n=h(r[0])}else n?"object"!=typeof n&&(n=h(n)):n=h(r);return a(!!n,"Failed to find default schema for "+e),Array.isArray(r)?r.map((function(e){return R(n,e)})):R(n,r)}function w(e){a(!0===e||e.pattern,"prop schema '*' can only be used with 'true' or a prop def with a 'pattern': "+JSON.stringify(e))}function R(e,t){var r;return a(e&&"object"==typeof e&&e.props,"Expected schema"),a(t&&"object"==typeof t,"Expected object"),r=e.extends?R(e.extends,t):{},Object.keys(e.props).forEach((function(n){var o=e.props[n];if("*"!==n){if(!0===o&&(o=O),!1!==o){var a=o.serializer(t[n],n,t);a!==v&&(r[o.jsonname||n]=a)}}else!function(e,t,r,n){for(var o in w(t),r)if(r.hasOwnProperty(o)&&!(o in e.props)&&(!0===t||t.pattern&&t.pattern.test(o))){var a=r[o];if(!0===t)u(a)&&(n[o]=a);else if(t.props){if((i=T(t,a))===v)return;n[o]=i}else{var i;if((i=t.serializer(a,o,r))===v)return;n[o]=i}}}(e,o,t,r)})),r}var A=new WeakMap;function L(e,t,r,n,o){this.parentContext=e,this.isRoot=!e,this.pendingCallbacks=0,this.pendingRefsCount=0,this.onReadyCb=n||i,this.json=r,this.target=null,this.hasError=!1,this.modelSchema=t,this.isRoot?(this.rootContext=this,this.args=o,this.pendingRefs={},this.resolvedRefs={}):(this.rootContext=e.rootContext,this.args=e.args)}function I(e,t){for(var r in e.props)if("object"==typeof e.props[r]&&e.props[r].jsonname===t)return!0;return!1}function k(e,t,r,n){if(a(arguments.length>=2,"deserialize expects at least 2 arguments"),a(_(e=h(e)),"first argument should be model schema"),Array.isArray(t)){var o=[];return l(t,(function(t,r){var a=B(null,e,t,r,n);o.push(a)}),r||i),o}return B(null,e,t,r,n)}function B(e,t,r,n,o){if(null!=r&&"object"==typeof r){var l=new L(e,t,r,n,o),u=t.factory(l);a(!!u,"No object returned from factory"),l.setTarget(u);var _=l.createCallback(i);return U(l,t,r,u),_(),u}n(null,null)}function U(e,t,r,n){t.extends&&U(e,t.extends,r,n),Object.keys(t.props).forEach((function(o){var l=t.props[o];if("*"!==o){if(!0===l&&(l=O),!1!==l){var _=l.jsonname||o;x((function(t,a){t||void 0===a||function(t,o,a){t.deserializer(o,function i(l){return function(u,_){S((function(r,o){r&&void 0!==o&&"function"==typeof t.afterDeserialize?t.deserializer(o,i(l),e,n[a]):l(r,o)}),u,_,o,r,a,e,t)}}(e.rootContext.createCallback((function(e){e!==v&&(n[a]=e)}))),e,n[a])}(l,a,o)}),r[_],r,_,e,l)}}else!function(e,t,r,n,o){for(var l in w(r),o)if(!(l in t.props)&&!I(t,l)){var _=o[l];if(!0===r)a(u(_),"encountered non primitive value while deserializing '*' properties in property '"+l+"': "+_),n[l]=_;else if(r.pattern.test(l))if(r.factory){var s=B(e,r,_,e.callback||i,{});void 0!==s&&(n[l]=s)}else{function c(e){e!==v&&(n[l]=e)}r.deserializer(_,e.rootContext.createCallback(c),e)}}}(e,t,l,n,r)}))}function x(e,t,r,n,o,a){a&&"function"==typeof a.beforeDeserialize?a.beforeDeserialize(e,t,r,n,o,a):e(null,t)}function S(e,t,r,n,o,a,i,l){l&&"function"==typeof l.afterDeserialize?l.afterDeserialize(e,t,r,n,o,a,i,l):e(t,r)}function W(e,t){a("object"==typeof e||"function"==typeof e,"No modelschema provided. If you are importing it from another file be aware of circular dependencies.");var r={serializer:function(t){return a(_(e=h(e)),"expected modelSchema, got "+e),null==t?t:T(e,t)},deserializer:function(r,n,o){a(_(e=h(e)),"expected modelSchema, got "+e),null!=r?B(o,e,r,n,t):n(null,r)}};return r=E(r,t)}function K(e,t){let r,n=!1;function o(e){var t=h(e);return t&&e.hasOwnProperty("serializeInfo")||b(e,t=m(e,{})),h(e).props["*"]=r,e}return 1===arguments.length?(a("function"==typeof e,"@serializeAll can only be used as class decorator"),r=!0,n=!0):(a("object"==typeof e&&e.test,"@serializeAll pattern doesn't have test"),"function"==typeof t&&(t=W(t)),a("object"==typeof t&&t.serializer,"couldn't resolve schema"),r=Object.assign({},t,{pattern:e})),n?o(e):o}function N(e){a("object"==typeof e&&e&&!Array.isArray(e),"cancelDeserialize needs an object");var t,r=(t=e,A.get(t));r&&r.cancelAwaits()}function z(e,t,r,n,o){var l=2===arguments.length||"function"==typeof arguments[2];l?(e=h(t=arguments[0]),r=arguments[1],n=arguments[2],o=arguments[3]):e=h(e),a(_(e),"update failed to determine schema"),a("object"==typeof t&&t&&!Array.isArray(t),"update needs an object");var u=new L(null,e,r,n,o);u.setTarget(t);var s=u.createCallback(i),c=U(u,e,r,t);return s(),c}function j(e,t){var r,n;"function"==typeof e?(r=e,n=t):n=e,a(!n||"object"==typeof n,"Additional property arguments should be an object, register function should be omitted or a funtion");var o={identifier:!0,serializer:O.serializer,deserializer:function(e,t,n){O.deserializer(e,(function(e,o){!function(e,t,r){r.rootContext.resolve(r.modelSchema,e,r.target)}(o,n.target,n),r&&r(o,n.target,n),t(e,o)}))}};return o=E(o,n)}function q(e){var t={serializer:function(e){return null==e?e:(a(e instanceof Date,"Expected Date object"),e.getTime())},deserializer:function(e,t){t(null,null!=e?new Date(e):e)}};return t=E(t,e)}function F(e,t){return a(e&&"string"==typeof e,"expected prop name as first argument"),a(s(t=t&&!0!==t?t:O),"expected prop schema as second argument"),a(!c(t),"provided prop is already aliased"),{jsonname:e,serializer:t.serializer,deserializer:t.deserializer,identifier:f(t),beforeDeserialize:t.beforeDeserialize,afterDeserialize:t.afterDeserialize}}function V(e,t,r){a("function"==typeof e,"first argument should be function"),a("function"==typeof t,"second argument should be a function or promise");var n={serializer:e,deserializer:function(e,n,o,a){4===t.length?t(e,o,a,n,r):n(null,t(e,o,a,null,r))}};return n=E(n,r)}function G(e,t){a(s(t=t&&!0!==t?t:O),"expected prop schema as second argument");const r=t.serializer;return a("function"==typeof r,"expected prop schema to have a callable serializer"),Object.assign({},t,{serializer:function(...e){const t=r(...e);return void 0===t?v:t}})}function H(e,t,r){a(!!e,"No modelschema provided. If you are importing it from another file be aware of circular dependencies.");var n,o=!1;function i(){if(o=!0,a("string"!=typeof e||t&&"function"==typeof t,"if the reference target is specified by attribute name, a lookup function is required"),a(!t||"function"==typeof t,"second argument should be a lookup function or additional arguments object"),"string"==typeof e)n=e;else{var r=h(e);a(_(r),"expected model schema or string as first argument for 'ref', got "+r),t=t||function(e){return function(t,r,n){n.rootContext.await(e,t,r)}}(r),n=function(e){for(a(_(e));e;){for(var t in e.props)if("object"==typeof e.props[t]&&!0===e.props[t].identifier)return t;e=e.extends}return null}(r),a(!!n,"provided model schema doesn't define an identifier() property and cannot be used by 'ref'.")}}"object"==typeof t&&void 0===r&&(r=t,t=void 0);var l={serializer:function(e){return o||i(),e?e[n]:null},deserializer:function(e,r,n){o||i(),null==e?r(null,e):t(e,r,n)}};return l=E(l,r)}function $(e,t){a(s(e=e||O),"expected prop schema as first argument"),a(!c(e),"provided prop is aliased, please put aliases first");var r={serializer:function(t){return void 0===t?v:(a(t&&"length"in t&&"map"in t,"expected array (like) object"),t.map(e.serializer))},deserializer:function(t,r,n){Array.isArray(t)?l(t,(function(r,o,a){function i(t,i){"function"==typeof e.afterDeserialize?S(l,t,i,r,a,n,e):o(t,i)}function l(t,r){t&&void 0!==r&&"function"==typeof e.afterDeserialize?e.deserializer(r,i,n):o(t,r)}x((function(t,r){t?o(t):e.deserializer(r,i,n)}),r,t,a,n,e)}),r):r("[serializr] expected JSON array")}};return r=E(r,t)}function Y(e,t){a(s(e=e||O),"expected prop schema as first argument"),a(!c(e),"provided prop is aliased, please put aliases first");var r={serializer:function(t){a(t&&"object"==typeof t,"expected object or Map");var r=d(t),n={};if(r)t.forEach((function(t,r){n[r]=e.serializer(t)}));else for(var o in t)n[o]=e.serializer(t[o]);return n},deserializer:function(r,n,o,a){if(r&&"object"==typeof r){var i=Object.keys(r);$(e,t).deserializer(i.map((function(e){return r[e]})),(function(e,t){if(e)n(e);else{var r,o=d(a);o?(a.clear(),r=a):r={};for(var l=0,u=i.length;l<u;l++)o?r.set(i[l],t[l]):r[i[l]]=t[l];n(null,r)}}),o)}else n("[serializr] expected JSON object")}};return r=E(r,t)}function Q(e,t,r){a(s(e=e||O),"expected prop schema as first argument"),a(!!t,"expected key property name as second argument");var n={serializer:function(t){a(t&&"object"==typeof t,"expected object or Map");var r=d(t),n=[];if(r)t.forEach((function(t){n.push(e.serializer(t))}));else for(var o in t)n.push(e.serializer(t[o]));return n},deserializer:function(n,o,a,i){$(e,r).deserializer(n,(function(e,r){if(e)o(e);else{var a,l=d(i);l?(i.clear(),a=i):a={};for(var u=0,_=n.length;u<_;u++)l?a.set(r[u][t],r[u]):a[r[u][t].toString()]=r[u];o(null,a)}}),a)}};return n=E(n,r)}function X(e){var t={serializer:function(e){return e},deserializer:function(e,t){t(null,e)}};return t=E(t,e)}L.prototype.createCallback=function(e){return this.pendingCallbacks++,function(e){var t=!1;return function(){if(!t)return t=!0,e.apply(null,arguments);a(!1,"callback was invoked twice")}}(function(t,r){t?this.hasError||(this.hasError=!0,this.onReadyCb(t),A.delete(this)):this.hasError||(e(r),--this.pendingCallbacks===this.pendingRefsCount&&(this.pendingRefsCount>0?(this.onReadyCb(new Error('Unresolvable references in json: "'+Object.keys(this.pendingRefs).filter((function(e){return this.pendingRefs[e].length>0}),this).join('", "')+'"')),A.delete(this)):(this.onReadyCb(null,this.target),A.delete(this))))}.bind(this))},L.prototype.await=function(e,t,r){if(a(this.isRoot),t in this.resolvedRefs){var n=this.resolvedRefs[t].filter((function(t){return p(t.modelSchema,e)}))[0];if(n)return void r(null,n.value)}this.pendingRefsCount++,this.pendingRefs[t]||(this.pendingRefs[t]=[]),this.pendingRefs[t].push({modelSchema:e,uuid:t,callback:r})},L.prototype.resolve=function(e,t,r){if(a(this.isRoot),this.resolvedRefs[t]||(this.resolvedRefs[t]=[]),this.resolvedRefs[t].push({modelSchema:e,value:r}),t in this.pendingRefs)for(var n=this.pendingRefs[t].length-1;n>=0;n--){var o=this.pendingRefs[t][n];p(e,o.modelSchema)&&(this.pendingRefs[t].splice(n,1),this.pendingRefsCount--,o.callback(null,r))}},L.prototype.setTarget=function(e){this.isRoot&&this.target&&A.delete(this.target),this.target=e,A.set(this.target,this)},L.prototype.cancelAwaits=function(){a(this.isRoot);var e=this;Object.keys(this.pendingRefs).forEach((function(t){e.pendingRefs[t].forEach((function(r){e.pendingRefsCount--,r.callback(new Error("Reference resolution canceled for "+t))}))})),this.pendingRefs={},this.pendingRefsCount=0}},function(e,t,r){var n=r(28);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,r){var n=r(66);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,r){var n=r(69),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t,r){var n=r(71)("keys"),o=r(54);e.exports=function(e){return n[e]||(n[e]=o(e))}},function(e,t,r){var n=r(21),o=r(27),a=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:r(53)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(37),o=r(198),a=r(72),i=r(70)("IE_PROTO"),l=function(){},u=function(){var e,t=r(102)("iframe"),n=a.length;for(t.style.display="none",r(199).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;n--;)delete u.prototype[a[n]];return u()};e.exports=Object.create||function(e,t){var r;return null!==e?(l.prototype=n(e),r=new l,l.prototype=null,r[i]=e):r=u(),void 0===t?r:o(r,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,r,n,o,a,i){var l=o||"<<anonymous>>",u=i||n;if(null==r[n])return t?new Error("Required "+a+" `"+u+"` was not specified in `"+l+"`."):null;for(var _=arguments.length,s=Array(_>6?_-6:0),c=6;c<_;c++)s[c-6]=arguments[c];return e.apply(void 0,[r,n,l,a,u].concat(s))}var r=t.bind(null,!1);return r.isRequired=t.bind(null,!0),r},e.exports=t.default},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,r){var n=r(212),o=r(215),a=r(218),i=r(235);function l(){if("function"!=typeof i)return null;var e=new i;return l=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},i=o&&n;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var _=i?n(e,u):null;_&&(_.get||_.set)?o(r,u,_):r[u]=e[u]}return r.default=e,t&&t.set(e,r),r}},function(e,t,r){e.exports=r(32)},function(e,t,r){t.f=r(30)},function(e,t,r){var n=r(27),o=r(21),a=r(53),i=r(79),l=r(33).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=a?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:i.f(e)})}},function(e,t,r){var n=r(66);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){var n=r(51),o=r(65),a=r(48),i=r(68),l=r(238);e.exports=function(e,t){var r=1==e,u=2==e,_=3==e,s=4==e,c=6==e,f=5==e||c,p=t||l;return function(t,l,d){for(var E,h,b=a(t),m=o(b),y=n(l,d,3),v=i(m.length),O=0,P=r?p(t,v):u?p(t,0):void 0;v>O;O++)if((f||O in m)&&(h=y(E=m[O],O,b),e))if(r)P[O]=h;else if(h)switch(e){case 3:return!0;case 5:return E;case 6:return O;case 2:P.push(E)}else if(s)return!1;return c?-1:_||s?s:P}}},function(e,t,r){var n=r(51),o=r(241),a=r(242),i=r(37),l=r(68),u=r(243),_={},s={};(t=e.exports=function(e,t,r,c,f){var p,d,E,h,b=f?function(){return e}:u(e),m=n(r,c,t?2:1),y=0;if("function"!=typeof b)throw TypeError(e+" is not iterable!");if(a(b)){for(p=l(e.length);p>y;y++)if((h=t?m(i(d=e[y])[0],d[1]):m(e[y]))===_||h===s)return h}else for(E=b.call(e);!(d=E.next()).done;)if((h=o(E,m,d.value,t))===_||h===s)return h}).BREAK=_,t.RETURN=s},function(e,t,r){var n=r(28);e.exports=function(e,t){if(!n(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t,r){var n="",s="",c=t;if("string"==typeof t){if(void 0===r)return e.style[(0,o.default)(t)]||(0,i.default)(e).getPropertyValue((0,a.default)(t));(c={})[t]=r}Object.keys(c).forEach((function(t){var r=c[t];r||0===r?(0,_.default)(t)?s+=t+"("+r+") ":n+=(0,a.default)(t)+": "+r+";":(0,l.default)(e,(0,a.default)(t))})),s&&(n+=u.transform+": "+s+";");e.style.cssText+=";"+n};var o=n(r(117)),a=n(r(262)),i=n(r(264)),l=n(r(265)),u=r(266),_=n(r(267));e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=function(){};n(r(31)).default&&(o=document.addEventListener?function(e,t,r,n){return e.addEventListener(t,r,n||!1)}:document.attachEvent?function(e,t,r){return e.attachEvent("on"+t,(function(t){(t=t||window.event).target=t.target||t.srcElement,t.currentTarget=e,r.call(e,t)}))}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=function(){};n(r(31)).default&&(o=document.addEventListener?function(e,t,r,n){return e.removeEventListener(t,r,n||!1)}:document.attachEvent?function(e,t,r){return e.detachEvent("on"+t,r)}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=d(r(152)),a=d(r(172)),i=d(r(173)),l=d(r(174)),u=d(r(175)),_=d(r(176)),s=d(r(183)),c=d(r(184)),f=d(r(185)),p=d(r(186));
/**
file
copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
function d(e){return e&&e.__esModule?e:{default:e}}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var h=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://api.github.com";E(this,e),this.__apiBase=r,this.__auth=t||{}}return n(e,[{key:"getGist",value:function(e){return new o.default(e,this.__auth,this.__apiBase)}},{key:"getUser",value:function(e){return new a.default(e,this.__auth,this.__apiBase)}},{key:"getOrganization",value:function(e){return new s.default(e,this.__auth,this.__apiBase)}},{key:"getTeam",value:function(e){return new c.default(e,this.__auth,this.__apiBase)}},{key:"getRepo",value:function(e,t){return new _.default(this._getFullName(e,t),this.__auth,this.__apiBase)}},{key:"getIssues",value:function(e,t){return new i.default(this._getFullName(e,t),this.__auth,this.__apiBase)}},{key:"search",value:function(e){return new l.default(e,this.__auth,this.__apiBase)}},{key:"getRateLimit",value:function(){return new u.default(this.__auth,this.__apiBase)}},{key:"getMarkdown",value:function(){return new f.default(this.__auth,this.__apiBase)}},{key:"getProject",value:function(e){return new p.default(e,this.__auth,this.__apiBase)}},{key:"_getFullName",value:function(e,t){var r=e;return t&&(r=e+"/"+t),r}}]),e}();e.exports=h},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,u=i(e),_=1;_<arguments.length;_++){for(var s in r=Object(arguments[_]))o.call(r,s)&&(u[s]=r[s]);if(n){l=n(r);for(var c=0;c<l.length;c++)a.call(r,l[c])&&(u[l[c]]=r[l[c]])}}return u}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(63);function o(e){return"object"==typeof e&&e&&Object.keys(e).map((function(t){return o(e[t])})),e}function a(e){return e?n.object(e):n.custom(o,(function(e){return e}))}t.types={object:a,list:function(e){return n.list(a(e))},map:function(e){return n.map(a(e))}}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(23);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var a;if(r)a=r(t);else if(n.isURLSearchParams(t))a=t.toString();else{var i=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(23),o=r(159),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(l=r(95)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){u.headers[e]=n.merge(a)})),e.exports=u}).call(this,r(62))},function(e,t,r){"use strict";var n=r(23),o=r(160),a=r(92),i=r(162),l=r(165),u=r(166),_=r(96);e.exports=function(e){return new Promise((function(t,s){var c=e.data,f=e.headers;n.isFormData(c)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",E=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+E)}var h=i(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(h,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,s,n),p=null}},p.onabort=function(){p&&(s(_("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){s(_("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),s(_(t,e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var b=r(167),m=(e.withCredentials||u(h))&&e.xsrfCookieName?b.read(e.xsrfCookieName):void 0;m&&(f[e.xsrfHeaderName]=m)}if("setRequestHeader"in p&&n.forEach(f,(function(e,t){void 0===c&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),s(e),p=null)})),void 0===c&&(c=null),p.send(c)}))}},function(e,t,r){"use strict";var n=r(161);e.exports=function(e,t,r,o,a){var i=new Error(e);return n(i,t,r,o,a)}},function(e,t,r){"use strict";var n=r(23);e.exports=function(e,t){t=t||{};var r={},o=["url","method","params","data"],a=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];n.forEach(o,(function(e){void 0!==t[e]&&(r[e]=t[e])})),n.forEach(a,(function(o){n.isObject(t[o])?r[o]=n.deepMerge(e[o],t[o]):void 0!==t[o]?r[o]=t[o]:n.isObject(e[o])?r[o]=n.deepMerge(e[o]):void 0!==e[o]&&(r[o]=e[o])})),n.forEach(i,(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])}));var l=o.concat(a).concat(i),u=Object.keys(t).filter((function(e){return-1===l.indexOf(e)}));return n.forEach(u,(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])})),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(module,exports,__webpack_require__){(function(global){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;!function(e,t){module.exports=t(e)}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==global?global:this,(function(global){"use strict";global=global||{};var _Base64=global.Base64,version="2.5.2",buffer;if(module.exports)try{buffer=eval("require('buffer').Buffer")}catch(e){buffer=void 0}var b64chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",b64tab=function(e){for(var t={},r=0,n=e.length;r<n;r++)t[e.charAt(r)]=r;return t}(b64chars),fromCharCode=String.fromCharCode,cb_utob=function(e){if(e.length<2)return(t=e.charCodeAt(0))<128?e:t<2048?fromCharCode(192|t>>>6)+fromCharCode(128|63&t):fromCharCode(224|t>>>12&15)+fromCharCode(128|t>>>6&63)+fromCharCode(128|63&t);var t=65536+1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320);return fromCharCode(240|t>>>18&7)+fromCharCode(128|t>>>12&63)+fromCharCode(128|t>>>6&63)+fromCharCode(128|63&t)},re_utob=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,utob=function(e){return e.replace(re_utob,cb_utob)},cb_encode=function(e){var t=[0,2,1][e.length%3],r=e.charCodeAt(0)<<16|(e.length>1?e.charCodeAt(1):0)<<8|(e.length>2?e.charCodeAt(2):0);return[b64chars.charAt(r>>>18),b64chars.charAt(r>>>12&63),t>=2?"=":b64chars.charAt(r>>>6&63),t>=1?"=":b64chars.charAt(63&r)].join("")},btoa=global.btoa?function(e){return global.btoa(e)}:function(e){return e.replace(/[\s\S]{1,3}/g,cb_encode)},_encode=function(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)?e.toString("base64"):btoa(utob(String(e)))},encode=function(e,t){return t?_encode(String(e)).replace(/[+\/]/g,(function(e){return"+"==e?"-":"_"})).replace(/=/g,""):_encode(e)},encodeURI=function(e){return encode(e,!0)},re_btou=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,cb_btou=function(e){switch(e.length){case 4:var t=((7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3))-65536;return fromCharCode(55296+(t>>>10))+fromCharCode(56320+(1023&t));case 3:return fromCharCode((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return fromCharCode((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},btou=function(e){return e.replace(re_btou,cb_btou)},cb_decode=function(e){var t=e.length,r=t%4,n=(t>0?b64tab[e.charAt(0)]<<18:0)|(t>1?b64tab[e.charAt(1)]<<12:0)|(t>2?b64tab[e.charAt(2)]<<6:0)|(t>3?b64tab[e.charAt(3)]:0),o=[fromCharCode(n>>>16),fromCharCode(n>>>8&255),fromCharCode(255&n)];return o.length-=[0,0,2,1][r],o.join("")},_atob=global.atob?function(e){return global.atob(e)}:function(e){return e.replace(/\S{1,4}/g,cb_decode)},atob=function(e){return _atob(String(e).replace(/[^A-Za-z0-9\+\/]/g,""))},_decode=buffer?buffer.from&&Uint8Array&&buffer.from!==Uint8Array.from?function(e){return(e.constructor===buffer.constructor?e:buffer.from(e,"base64")).toString()}:function(e){return(e.constructor===buffer.constructor?e:new buffer(e,"base64")).toString()}:function(e){return btou(_atob(e))},decode=function(e){return _decode(String(e).replace(/[-_]/g,(function(e){return"-"==e?"+":"/"})).replace(/[^A-Za-z0-9\+\/]/g,""))},noConflict=function(){var e=global.Base64;return global.Base64=_Base64,e};if(global.Base64={VERSION:version,atob:atob,btoa:btoa,fromBase64:decode,toBase64:encode,utob:utob,encode:encode,encodeURI:encodeURI,btou:btou,decode:decode,noConflict:noConflict,__buffer__:buffer},"function"==typeof Object.defineProperty){var noEnum=function(e){return{value:e,enumerable:!1,writable:!0,configurable:!0}};global.Base64.extendString=function(){Object.defineProperty(String.prototype,"fromBase64",noEnum((function(){return decode(this)}))),Object.defineProperty(String.prototype,"toBase64",noEnum((function(e){return encode(this,e)}))),Object.defineProperty(String.prototype,"toBase64URI",noEnum((function(){return encode(this,!0)})))}}return global.Meteor&&(Base64=global.Base64),module.exports?module.exports.Base64=global.Base64:(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_RESULT__=function(){return global.Base64}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)),{Base64:global.Base64}}))}).call(this,__webpack_require__(45))},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,r){e.exports=!r(29)&&!r(38)((function(){return 7!=Object.defineProperty(r(102)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(28),o=r(27).document,a=n(o)&&n(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,r){"use strict";var n=r(29),o=r(40),a=r(73),i=r(47),l=r(48),u=r(65),_=Object.assign;e.exports=!_||r(38)((function(){var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach((function(e){t[e]=e})),7!=_({},e)[r]||Object.keys(_({},t)).join("")!=n}))?function(e,t){for(var r=l(e),_=arguments.length,s=1,c=a.f,f=i.f;_>s;)for(var p,d=u(arguments[s++]),E=c?o(d).concat(c(d)):o(d),h=E.length,b=0;h>b;)p=E[b++],n&&!f.call(d,p)||(r[p]=d[p]);return r}:_},function(e,t,r){var n=r(34),o=r(35),a=r(190)(!1),i=r(70)("IE_PROTO");e.exports=function(e,t){var r,l=o(e),u=0,_=[];for(r in l)r!=i&&n(l,r)&&_.push(r);for(;t.length>u;)n(l,r=t[u++])&&(~a(_,r)||_.push(r));return _}},function(e,t,r){var n=r(24),o=r(21),a=r(38);e.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],i={};i[e]=t(r),n(n.S+n.F*a((function(){r(1)})),"Object",i)}},function(e,t,r){var n=r(29),o=r(40),a=r(35),i=r(47).f;e.exports=function(e){return function(t){for(var r,l=a(t),u=o(l),_=u.length,s=0,c=[];_>s;)r=u[s++],n&&!i.call(l,r)||c.push(e?[r,l[r]]:l[r]);return c}}},function(e,t,r){e.exports=r(208)},function(e,t,r){var n=r(47),o=r(52),a=r(35),i=r(64),l=r(34),u=r(101),_=Object.getOwnPropertyDescriptor;t.f=r(29)?_:function(e,t){if(e=a(e),t=i(t,!0),u)try{return _(e,t)}catch(e){}if(l(e,t))return o(!n.f.call(e,t),e[t])}},function(e,t,r){"use strict";var n=r(53),o=r(24),a=r(78),i=r(32),l=r(49),u=r(223),_=r(56),s=r(224),c=r(30)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,r,d,E,h,b){u(r,t,d);var m,y,v,O=function(e){if(!f&&e in M)return M[e];switch(e){case"keys":case"values":return function(){return new r(this,e)}}return function(){return new r(this,e)}},P=t+" Iterator",g="values"==E,D=!1,M=e.prototype,C=M[c]||M["@@iterator"]||E&&M[E],T=C||O(E),w=E?g?O("entries"):T:void 0,R="Array"==t&&M.entries||C;if(R&&(v=s(R.call(new e)))!==Object.prototype&&v.next&&(_(v,P,!0),n||"function"==typeof v[c]||i(v,c,p)),g&&C&&"values"!==C.name&&(D=!0,T=function(){return C.call(this)}),n&&!b||!f&&!D&&M[c]||i(M,c,T),l[t]=T,l[P]=p,E)if(m={values:g?T:O("values"),keys:h?T:O("keys"),entries:w},b)for(y in m)y in M||a(M,y,m[y]);else o(o.P+o.F*(f||D),t,m);return m}},function(e,t,r){r(225);for(var n=r(27),o=r(32),a=r(49),i=r(30)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<l.length;u++){var _=l[u],s=n[_],c=s&&s.prototype;c&&!c[i]&&o(c,i,_),a[_]=a.Array}},function(e,t,r){var n=r(104),o=r(72).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){},function(e,t,r){var n=r(32);e.exports=function(e,t,r){for(var o in t)r&&e[o]?e[o]=t[o]:n(e,o,t[o]);return e}},function(e,t){e.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},function(e,t,r){"use strict";t.__esModule=!0;var n=c(r(31)),o=c(r(3)),a=c(r(58)),i=c(r(0)),l=c(r(22)),u=c(r(59)),_=c(r(42)),s=c(r(255));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var r,n;f(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=p(this,e.call.apply(e,[this].concat(a))),n.getMountNode=function(){return n._portalContainerNode},p(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.UNSAFE_componentWillMount=function(){if(n.default){var e=this.props.container;"function"==typeof e&&(e=e()),e&&!l.default.findDOMNode(e)||this.setContainer(e)}},t.prototype.componentDidMount=function(){this._portalContainerNode?this.props.onRendered&&this.props.onRendered():(this.setContainer(this.props.container),this.forceUpdate(this.props.onRendered))},t.prototype.UNSAFE_componentWillReceiveProps=function(e){e.container!==this.props.container&&this.setContainer(e.container)},t.prototype.componentWillUnmount=function(){this._portalContainerNode=null},t.prototype.setContainer=function(e){this._portalContainerNode=(0,u.default)(e,(0,_.default)(this).body)},t.prototype.render=function(){return this.props.children&&this._portalContainerNode?l.default.createPortal(this.props.children,this._portalContainerNode):null},t}(i.default.Component);d.displayName="Portal",d.propTypes={container:o.default.oneOfType([a.default,o.default.func]),onRendered:o.default.func},t.default=l.default.createPortal?d:s.default,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){var t=(0,i.default)(e),r=(0,a.default)(t),n=t&&t.documentElement,l={top:0,left:0,height:0,width:0};if(!t)return;if(!(0,o.default)(n,e))return l;void 0!==e.getBoundingClientRect&&(l=e.getBoundingClientRect());return l={top:l.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:l.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0),width:(null==l.width?e.offsetWidth:l.width)||0,height:(null==l.height?e.offsetHeight:l.height)||0}};var o=n(r(50)),a=n(r(60)),i=n(r(43));e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){return(0,o.default)(e.replace(a,"ms-"))};var o=n(r(261)),a=/^-ms-/;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){var r=(0,o.default)(e);if(void 0===t)return r?"pageYOffset"in r?r.pageYOffset:r.document.documentElement.scrollTop:e.scrollTop;r?r.scrollTo("pageXOffset"in r?r.pageXOffset:r.document.documentElement.scrollLeft,t):e.scrollTop=t};var o=n(r(60));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t,r,a){return(0,n.default)(e,t,r,a),{remove:function(){(0,o.default)(e,t,r,a)}}};var n=a(r(86)),o=a(r(87));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,r){"use strict";var n=r(9),o=r(77);t.__esModule=!0,t.default=void 0;var a,i=n(r(11)),l=n(r(13)),u=n(r(12)),_=n(r(15)),s=n(r(0)),c=n(r(3)),f=o(r(270)),p={in:c.default.bool,mountOnEnter:c.default.bool,unmountOnExit:c.default.bool,appear:c.default.bool,timeout:c.default.number,onEnter:c.default.func,onEntering:c.default.func,onEntered:c.default.func,onExit:c.default.func,onExiting:c.default.func,onExited:c.default.func},d=((a={})[f.ENTERING]="in",a[f.ENTERED]="in",a),E=function(e){function t(){return e.apply(this,arguments)||this}return(0,u.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=e.children,n=(0,l.default)(e,["className","children"]);return s.default.createElement(f.default,n,(function(e,n){return s.default.cloneElement(r,(0,i.default)({},n,{className:(0,_.default)("fade",t,r.props.className,d[e])}))}))},t}(s.default.Component);E.propTypes=p,E.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1};var h=E;t.default=h,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){if((!o&&0!==o||e)&&a.default){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),o=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return o};var o,a=n(r(31));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return(0,n.default)(e)||(t=e,t&&"body"===t.tagName.toLowerCase())?function(e){var t=(0,o.default)(e),r=(0,n.default)(t).innerWidth;if(!r){var a=t.documentElement.getBoundingClientRect();r=a.right-Math.abs(a.left)}return t.body.clientWidth<r}(e):e.scrollHeight>e.clientHeight;var t};var n=a(r(60)),o=a(r(43));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6__),react_hot_loader__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(142),react_hot_loader__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_hot_loader__WEBPACK_IMPORTED_MODULE_7__),_TopBar__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(125),_FileActions__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(126),_CollectionList__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(130),_GroupList__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(132),_PropertyList__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(134),_RequirementList__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(136),_TaskList__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(138),_MainEditor__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(140),_Store__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},TopologyEditor=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(TopologyEditor,_Component);var _super=_createSuper(TopologyEditor);function TopologyEditor(){var e;_classCallCheck(this,TopologyEditor);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"showResetModal",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"openResetModal",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeResetModal",_descriptor3,_assertThisInitialized(e)),e}return _createClass(TopologyEditor,[{key:"render",value:function(){var e=this,t=[],r=[],n=[],o=[];return _Store__WEBPACK_IMPORTED_MODULE_16__.i.properties.forEach((function(e,r){t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-property",key:"t-box"+r},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{componentClass:"select",placeholder:"",defaultValue:"",className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"read"},"read"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"write"},"write"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"readwrite"},"readwrite")))))})),_Store__WEBPACK_IMPORTED_MODULE_16__.i.tasks.forEach((function(e,t){r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:"0"}))))})),_Store__WEBPACK_IMPORTED_MODULE_16__.i.collections.forEach((function(e,t){n.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-collection",key:"c-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:"0"}))))})),_Store__WEBPACK_IMPORTED_MODULE_16__.i.requirements.forEach((function(e,t){o.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:e.id,key:"option"+t},e.id))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"main-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_TopBar__WEBPACK_IMPORTED_MODULE_8__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:"list-group left-pane"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_FileActions__WEBPACK_IMPORTED_MODULE_9__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_PropertyList__WEBPACK_IMPORTED_MODULE_12__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_TaskList__WEBPACK_IMPORTED_MODULE_14__.a,{propertyCheckboxes:t,requirementOptions:o}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_CollectionList__WEBPACK_IMPORTED_MODULE_10__.a,{taskCheckboxes:r,requirementOptions:o}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GroupList__WEBPACK_IMPORTED_MODULE_11__.a,{taskCheckboxes:r,collectionCheckboxes:n}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_RequirementList__WEBPACK_IMPORTED_MODULE_13__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{type:"button",className:"btn btn-sm btn-default",onClick:this.openResetModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-remove",title:"reset the topology"})," reset"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a,{show:this.showResetModal,onHide:this.closeResetModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Title,null,"Reset topology?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"This will clear all the contents of the topology."),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Unsaved changes will be lost.")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_6___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{bsStyle:"danger",onClick:function(){_Store__WEBPACK_IMPORTED_MODULE_16__.i.reset(),e.closeResetModal()}},"Reset"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{onClick:this.closeResetModal},"Cancel"))))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_MainEditor__WEBPACK_IMPORTED_MODULE_15__.a,null)))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),TopologyEditor}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"showResetModal",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"openResetModal",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.showResetModal=!0}}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"closeResetModal",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.showResetModal=!1}}}),_class=_class2))||_class,_default=Object(react_hot_loader__WEBPACK_IMPORTED_MODULE_7__.hot)(module)(TopologyEditor),reactHotLoader,leaveModule;__webpack_exports__.a=_default,reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&(reactHotLoader.register(TopologyEditor,"TopologyEditor","/Users/orybalch/dev/DDS-topology-editor/src/components/TopologyEditor.jsx"),reactHotLoader.register(_default,"default","/Users/orybalch/dev/DDS-topology-editor/src/components/TopologyEditor.jsx")),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return TopBar}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),_Store__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},TopBar=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(TopBar,_Component);var _super=_createSuper(TopBar);function TopBar(){var e;_classCallCheck(this,TopBar);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"editing",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleEditing",_descriptor2,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.handleTopologyIdChange=function(t){t.preventDefault(),_Store__WEBPACK_IMPORTED_MODULE_3__.i.setTopologyId(t.target[0].form[0].value),e.toggleEditing()},e}return _createClass(TopBar,[{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("nav",{className:"header-pane navbar navbar-inverse",role:"navigation"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"navbar-header"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{type:"button",className:"navbar-toggle","data-toggle":"collapse","data-target":"#bs-example-navbar-collapse-1"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"sr-only"},"Toggle navigation"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"icon-bar"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"icon-bar"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"icon-bar"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a",{className:"navbar-brand",href:"#"},"DDS Topology Editor")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"collapse navbar-collapse",id:"bs-example-navbar-collapse-1"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:"nav navbar-nav"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"active"},this.editing?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{className:"name-change",onSubmit:this.handleTopologyIdChange},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{type:"text",autoFocus:!0,defaultValue:_Store__WEBPACK_IMPORTED_MODULE_3__.i.topologyId}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{type:"submit",value:"ok"})):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a",{href:"#",onClick:this.toggleEditing},_Store__WEBPACK_IMPORTED_MODULE_3__.i.topologyId))))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),TopBar}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"editing",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"toggleEditing",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.editing=!e.editing}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(TopBar,"TopBar","/Users/orybalch/dev/DDS-topology-editor/src/components/TopBar.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return FileActions}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),vkbeautify__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(127),vkbeautify__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(vkbeautify__WEBPACK_IMPORTED_MODULE_1__),file_saver__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(128),file_saver__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_2__),mobx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(129),react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(36),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__),github_api__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(88),github_api__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(github_api__WEBPACK_IMPORTED_MODULE_11__),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},FileActions=Object(mobx_react__WEBPACK_IMPORTED_MODULE_4__.a)((_temp=function(_Component){_inherits(FileActions,_Component);var _super=_createSuper(FileActions);function FileActions(){var e;_classCallCheck(this,FileActions);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"remoteFiles",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"error",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"updateRemoteFiles",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"addRemoteFile",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setError",_descriptor5,_assertThisInitialized(e)),e.remoteUser="AliceO2Group",e.remoteRepo="AliceO2",e.remotePath="Common/Topologies",e.fetchBtn=void 0,e.cancelFetch=function(){e.updateRemoteFiles([]),e.setError("")},e.handleFetch=function(t){t.preventDefault();for(var r=t.target[0].form.files,n=0;n<r.length;n++){if(r.item(n).checked)(new github_api__WEBPACK_IMPORTED_MODULE_11___default.a).getRepo(e.remoteUser,e.remoteRepo).getContents("dev","Common/Topologies/"+e.remoteFiles[n].name,!0,(function(t,r){t&&console.log(t),e.processXML(r)}))}e.fetchBtn.hide()},e.fetchTopologies=function(){var t=new github_api__WEBPACK_IMPORTED_MODULE_11___default.a;e.setError(""),t.getRepo(e.remoteUser,e.remoteRepo).getContents("dev",e.remotePath,!0,(function(t,r){if(t)return console.log(t),void("response"in t?e.setError(t.response.data.message+". Rate limit: "+t.response.headers["x-ratelimit-limit"]+", remaining: "+t.response.headers["x-ratelimit-remaining"]+", reset in: "+new Date(1e3*t.response.headers["x-ratelimit-reset"])+"."):e.setError(JSON.stringify(t)));r.forEach((function(t){if(".xml"===t.name.substr(t.name.length-4)){var r={};r.name=t.name,r.url=t.download_url,e.addRemoteFile(r)}else console.log("ignoring file with non-XML extension: "+t.name)}))}))},e.processXML=function(e){var t=new DOMParser,r=[],n=[],o=[],a=[],i=[],l=new _Store__WEBPACK_IMPORTED_MODULE_12__.c,u=t.parseFromString(e,"application/xml");_Store__WEBPACK_IMPORTED_MODULE_12__.i.setTopologyId(u.querySelector("topology").getAttribute("id")),u.querySelectorAll("topology>var").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.h;t.id=e.getAttribute("id"),t.value=e.getAttribute("value"),r.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setVariables(r),u.querySelectorAll("topology>property").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.d;t.id=e.getAttribute("id"),n.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setProperties(n),u.querySelectorAll("topology>declrequirement").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.e;t.id=e.getAttribute("id"),e.querySelectorAll("hostPattern").forEach((function(e){t.type=e.getAttribute("type"),t.value=e.getAttribute("value")})),o.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setRequirements(o),u.querySelectorAll("topology>decltask").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.f;t.id=e.getAttribute("id"),e.querySelectorAll("requirements").forEach((function(e){e.querySelectorAll("id").forEach((function(e){return t.requirements.push(e.textContent)}))})),e.querySelectorAll("exe").forEach((function(e){e.hasAttribute("reachable")&&(t.exeReachable=e.getAttribute("reachable")),t.exeValue=e.textContent})),e.querySelectorAll("env").forEach((function(e){e.hasAttribute("reachable")&&(t.envReachable=e.getAttribute("reachable")),t.envValue=e.textContent})),e.querySelectorAll("properties>id").forEach((function(e){var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.g;r.id=e.textContent,e.hasAttribute("access")?r.access=e.getAttribute("access"):r.access="readwrite",t.properties.push(r)})),a.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setTasks(a),u.querySelectorAll("topology>declcollection").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.a;t.id=e.getAttribute("id"),e.querySelectorAll("requirements").forEach((function(e){e.querySelectorAll("id").forEach((function(e){return t.requirements.push(e.textContent)}))})),e.querySelectorAll("tasks>id").forEach((function(e){return t.tasks.push(e.textContent)})),i.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setCollections(i),l.id=u.querySelector("topology>main").getAttribute("id"),u.querySelectorAll("topology>main>task").forEach((function(e){return l.tasks.push(e.textContent)})),u.querySelectorAll("topology>main>collection").forEach((function(e){return l.collections.push(e.textContent)})),u.querySelectorAll("topology>main>group").forEach((function(e){var t=new _Store__WEBPACK_IMPORTED_MODULE_12__.b;t.id=e.getAttribute("id"),t.n=e.getAttribute("n"),e.querySelectorAll("task").forEach((function(e){return t.tasks.push(e.textContent)})),e.querySelectorAll("collection").forEach((function(e){return t.collections.push(e.textContent)})),l.groups.push(t)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.setMain(l)},e.handleFileLoad=function(t){var r=new FileReader,n=t.target;r.onload=function(){e.processXML(r.result),n.value=""},r.readAsText(t.target.files[0])},e.handleFileSave=function(){var e=document.implementation.createDocument("","",null),t=e.createElement("topology");t.setAttribute("id",_Store__WEBPACK_IMPORTED_MODULE_12__.i.topologyId),_Store__WEBPACK_IMPORTED_MODULE_12__.i.variables.forEach((function(r){var n=e.createElement("var");n.setAttribute("id",r.id),n.setAttribute("value",r.value),t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(r){var n=e.createElement("property");n.setAttribute("id",r.id),t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.forEach((function(r){var n=e.createElement("declrequirement");n.setAttribute("id",r.id),n.setAttribute("type",r.type),n.setAttribute("value",r.value),t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.tasks.forEach((function(r){var n=e.createElement("decltask");n.setAttribute("id",r.id);var o=e.createElement("exe");if(o.textContent=r.exeValue,""!==r.exeReachable&&o.setAttribute("reachable",r.exeReachable),n.appendChild(o),r.requirements.length>0){var a=e.createElement("requirements");r.requirements.forEach((function(t){var r=e.createElement("id");r.textContent=t,a.appendChild(r)})),n.appendChild(a)}if(""!==r.envValue){var i=e.createElement("env");i.textContent=r.envValue,""!==r.envReachable&&i.setAttribute("reachable",r.envReachable),n.appendChild(i)}if(r.properties.length>0){var l=e.createElement("properties");r.properties.forEach((function(t){var r=e.createElement("id");r.textContent=t.id,r.setAttribute("access",t.access),l.appendChild(r)})),n.appendChild(l)}t.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.collections.forEach((function(r){var n=e.createElement("declcollection");if(n.setAttribute("id",r.id),r.requirements.length>0){var o=e.createElement("requirements");r.requirements.forEach((function(t){var r=e.createElement("id");r.textContent=t,o.appendChild(r)})),n.appendChild(o)}var a=e.createElement("tasks");r.tasks.forEach((function(t){var r=e.createElement("id");r.textContent=t,a.appendChild(r)})),n.appendChild(a),t.appendChild(n)}));var r=e.createElement("main");r.setAttribute("id",_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.id),_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.tasks.forEach((function(t){var n=e.createElement("task");n.textContent=t,r.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.collections.forEach((function(t){var n=e.createElement("collection");n.textContent=t,r.appendChild(n)})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.main.groups.forEach((function(t){var n=e.createElement("group");n.setAttribute("id",t.id),n.setAttribute("n",t.n),t.tasks.forEach((function(t){var r=e.createElement("task");r.textContent=t,n.appendChild(r)})),t.collections.forEach((function(t){var r=e.createElement("collection");r.textContent=t,n.appendChild(r)})),r.appendChild(n)})),t.appendChild(r),e.appendChild(t);var n=(new XMLSerializer).serializeToString(e);n=vkbeautify__WEBPACK_IMPORTED_MODULE_1___default.a.xml(n);var o=new Blob([n],{type:"text/plain;charset=utf-8"});Object(file_saver__WEBPACK_IMPORTED_MODULE_2__.saveAs)(o,_Store__WEBPACK_IMPORTED_MODULE_12__.i.topologyId+".xml")},e}return _createClass(FileActions,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item file-actions"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row centered"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_ButtonGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"btn-file",componentClass:"span",bsSize:"small",title:"load topology file from disk"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-floppy-open"})," load",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{type:"file",onChange:this.handleFileLoad,value:""})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default.a,{trigger:"click",placement:"bottom",ref:function(t){return e.fetchBtn=t},onEnter:this.fetchTopologies,onExit:this.cancelFetch,overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default.a,{className:"fetch-popover",title:"fetch remote topologies",id:"fetchremotetopologies"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Fetching topologies from",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"mono monobg"},this.remoteUser,"/",this.remoteRepo,"/",this.remotePath)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleFetch},""!==this.error?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",{className:"error"},this.error):"",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,this.remoteFiles.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default.a,{title:e.url,key:e.name+t,name:"files",className:"mono"},e.name)}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"load"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){return e.fetchBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{bsSize:"small",title:"fetch topology file from a remote repository"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-cloud-download"})," fetch")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_5___default.a,{bsSize:"small",onClick:this.handleFileSave,title:"save the topology to disk"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-floppy-save"})," save"))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),FileActions}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"remoteFiles",[mobx__WEBPACK_IMPORTED_MODULE_3__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"error",[mobx__WEBPACK_IMPORTED_MODULE_3__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"updateRemoteFiles",[mobx__WEBPACK_IMPORTED_MODULE_3__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.remoteFiles=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"addRemoteFile",[mobx__WEBPACK_IMPORTED_MODULE_3__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.remoteFiles.push(t)}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setError",[mobx__WEBPACK_IMPORTED_MODULE_3__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.error=t}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(FileActions,"FileActions","/Users/orybalch/dev/DDS-topology-editor/src/components/FileActions.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(e,t){
/**
* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
*
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/vkbeautify/
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*   Pretty print
*
*        vkbeautify.xml(text [,indent_pattern]);
*        vkbeautify.json(text [,indent_pattern]);
*        vkbeautify.css(text [,indent_pattern]);
*        vkbeautify.sql(text [,indent_pattern]);
*
*        @text - String; text to beatufy;
*        @indent_pattern - Integer | String;
*                Integer:  number of white spaces;
*                String:   character string to visualize indentation ( can also be a set of white spaces )
*   Minify
*
*        vkbeautify.xmlmin(text [,preserve_comments]);
*        vkbeautify.jsonmin(text);
*        vkbeautify.cssmin(text [,preserve_comments]);
*        vkbeautify.sqlmin(text);
*
*        @text - String; text to minify;
*        @preserve_comments - Bool; [optional];
*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
*
*   Examples:
*        vkbeautify.xml(text); // pretty print XML
*        vkbeautify.json(text, 4 ); // pretty print JSON
*        vkbeautify.css(text, '. . . .'); // pretty print CSS
*        vkbeautify.sql(text, '----'); // pretty print SQL
*
*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
*        vkbeautify.jsonmin(text);// minify JSON
*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
*        vkbeautify.sqlmin(text);// minify SQL
*
*/
function r(e){var t="    ";if(isNaN(parseInt(e)))t=e;else switch(e){case 1:t=" ";break;case 2:t="  ";break;case 3:t="   ";break;case 4:t="    ";break;case 5:t="     ";break;case 6:t="      ";break;case 7:t="       ";break;case 8:t="        ";break;case 9:t="         ";break;case 10:t="          ";break;case 11:t="           ";break;case 12:t="            "}for(var r=["\n"],n=0;n<100;n++)r.push(r[n]+t);return r}function n(){this.step="    ",this.shift=r(this.step)}function o(e,t){return t-(e.replace(/\(/g,"").length-e.replace(/\)/g,"").length)}function a(e,t){return e.replace(/\s{1,}/g," ").replace(/ AND /gi,"~::~"+t+t+"AND ").replace(/ BETWEEN /gi,"~::~"+t+"BETWEEN ").replace(/ CASE /gi,"~::~"+t+"CASE ").replace(/ ELSE /gi,"~::~"+t+"ELSE ").replace(/ END /gi,"~::~"+t+"END ").replace(/ FROM /gi,"~::~FROM ").replace(/ GROUP\s{1,}BY/gi,"~::~GROUP BY ").replace(/ HAVING /gi,"~::~HAVING ").replace(/ IN /gi," IN ").replace(/ JOIN /gi,"~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi,"~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi,"~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi,"~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi,"~::~RIGHT JOIN ").replace(/ ON /gi,"~::~"+t+"ON ").replace(/ OR /gi,"~::~"+t+t+"OR ").replace(/ ORDER\s{1,}BY/gi,"~::~ORDER BY ").replace(/ OVER /gi,"~::~"+t+"OVER ").replace(/\(\s{0,}SELECT /gi,"~::~(SELECT ").replace(/\)\s{0,}SELECT /gi,")~::~SELECT ").replace(/ THEN /gi," THEN~::~"+t).replace(/ UNION /gi,"~::~UNION~::~").replace(/ USING /gi,"~::~USING ").replace(/ WHEN /gi,"~::~"+t+"WHEN ").replace(/ WHERE /gi,"~::~WHERE ").replace(/ WITH /gi,"~::~WITH ").replace(/ ALL /gi," ALL ").replace(/ AS /gi," AS ").replace(/ ASC /gi," ASC ").replace(/ DESC /gi," DESC ").replace(/ DISTINCT /gi," DISTINCT ").replace(/ EXISTS /gi," EXISTS ").replace(/ NOT /gi," NOT ").replace(/ NULL /gi," NULL ").replace(/ LIKE /gi," LIKE ").replace(/\s{0,}SELECT /gi,"SELECT ").replace(/\s{0,}UPDATE /gi,"UPDATE ").replace(/ SET /gi," SET ").replace(/~::~{1,}/g,"~::~").split("~::~")}n.prototype.xml=function(e,t){var n=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").replace(/\s*xmlns\=/g,"~::~xmlns=").split("~::~"),o=n.length,a=!1,i=0,l="",u=0,_=t?r(t):this.shift;for(u=0;u<o;u++)n[u].search(/<!/)>-1?(l+=_[i]+n[u],a=!0,(n[u].search(/-->/)>-1||n[u].search(/\]>/)>-1||n[u].search(/!DOCTYPE/)>-1)&&(a=!1)):n[u].search(/-->/)>-1||n[u].search(/\]>/)>-1?(l+=n[u],a=!1):/^<\w/.exec(n[u-1])&&/^<\/\w/.exec(n[u])&&/^<[\w:\-\.\,]+/.exec(n[u-1])==/^<\/[\w:\-\.\,]+/.exec(n[u])[0].replace("/","")?(l+=n[u],a||i--):n[u].search(/<\w/)>-1&&-1==n[u].search(/<\//)&&-1==n[u].search(/\/>/)?l=l+=a?n[u]:_[i++]+n[u]:n[u].search(/<\w/)>-1&&n[u].search(/<\//)>-1?l=l+=a?n[u]:_[i]+n[u]:n[u].search(/<\//)>-1?l=l+=a?n[u]:_[--i]+n[u]:n[u].search(/\/>/)>-1?l=l+=a?n[u]:_[i]+n[u]:n[u].search(/<\?/)>-1||n[u].search(/xmlns\:/)>-1||n[u].search(/xmlns\=/)>-1?l+=_[i]+n[u]:l+=n[u];return"\n"==l[0]?l.slice(1):l},n.prototype.json=function(e,t){t=t||this.step;return"undefined"==typeof JSON?e:"string"==typeof e?JSON.stringify(JSON.parse(e),null,t):"object"==typeof e?JSON.stringify(e,null,t):e},n.prototype.css=function(e,t){var n=e.replace(/\s{1,}/g," ").replace(/\{/g,"{~::~").replace(/\}/g,"~::~}~::~").replace(/\;/g,";~::~").replace(/\/\*/g,"~::~/*").replace(/\*\//g,"*/~::~").replace(/~::~\s{0,}~::~/g,"~::~").split("~::~"),o=n.length,a=0,i="",l=0,u=t?r(t):this.shift;for(l=0;l<o;l++)/\{/.exec(n[l])?i+=u[a++]+n[l]:/\}/.exec(n[l])?i+=u[--a]+n[l]:(/\*\\/.exec(n[l]),i+=u[a]+n[l]);return i.replace(/^\n{1,}/,"")},n.prototype.sql=function(e,t){var n=e.replace(/\s{1,}/g," ").replace(/\'/gi,"~::~'").split("~::~"),i=n.length,l=[],u=0,_=this.step,s=0,c="",f=0,p=t?r(t):this.shift;for(f=0;f<i;f++)l=f%2?l.concat(n[f]):l.concat(a(n[f],_));for(i=l.length,f=0;f<i;f++){s=o(l[f],s),/\s{0,}\s{0,}SELECT\s{0,}/.exec(l[f])&&(l[f]=l[f].replace(/\,/g,",\n"+_+_)),/\s{0,}\s{0,}SET\s{0,}/.exec(l[f])&&(l[f]=l[f].replace(/\,/g,",\n"+_+_)),/\s{0,}\(\s{0,}SELECT\s{0,}/.exec(l[f])?c+=p[++u]+l[f]:/\'/.exec(l[f])?(s<1&&u&&u--,c+=l[f]):(c+=p[u]+l[f],s<1&&u&&u--)}return c=c.replace(/^\n{1,}/,"").replace(/\n{1,}/g,"\n")},n.prototype.xmlmin=function(e,t){return(t?e:e.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"").replace(/[ \r\n\t]{1,}xmlns/g," xmlns")).replace(/>\s{0,}</g,"><")},n.prototype.jsonmin=function(e){return"undefined"==typeof JSON?e:JSON.stringify(JSON.parse(e),null,0)},n.prototype.cssmin=function(e,t){return(t?e:e.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"")).replace(/\s{1,}/g," ").replace(/\{\s{1,}/g,"{").replace(/\}\s{1,}/g,"}").replace(/\;\s{1,}/g,";").replace(/\/\*\s{1,}/g,"/*").replace(/\*\/\s{1,}/g,"*/")},n.prototype.sqlmin=function(e){return e.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")")},e.exports=new n},function(e,t,r){(function(r){var n,o,a;o=[],void 0===(a="function"==typeof(n=function(){"use strict";function t(e,t,r){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){i(n.response,t,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function o(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(r){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var a="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r&&r.global===r?r:void 0,i=a.saveAs||("object"!=typeof window||window!==a?function(){}:"download"in HTMLAnchorElement.prototype?function(e,r,i){var l=a.URL||a.webkitURL,u=document.createElement("a");r=r||e.name||"download",u.download=r,u.rel="noopener","string"==typeof e?(u.href=e,u.origin===location.origin?o(u):n(u.href)?t(e,r,i):o(u,u.target="_blank")):(u.href=l.createObjectURL(e),setTimeout((function(){l.revokeObjectURL(u.href)}),4e4),setTimeout((function(){o(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,r,a){if(r=r||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,a),r);else if(n(e))t(e,r,a);else{var i=document.createElement("a");i.href=e,i.target="_blank",setTimeout((function(){o(i)}))}}:function(e,r,n,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof e)return t(e,r,n);var i="application/octet-stream"===e.type,l=/constructor/i.test(a.HTMLElement)||a.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||i&&l)&&"object"==typeof FileReader){var _=new FileReader;_.onloadend=function(){var e=_.result;e=u?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=e:location=e,o=null},_.readAsDataURL(e)}else{var s=a.URL||a.webkitURL,c=s.createObjectURL(e);o?o.location=c:location.href=c,o=null,setTimeout((function(){s.revokeObjectURL(c)}),4e4)}});a.saveAs=i.saveAs=i,e.exports=i})?n.apply(t,o):n)||(e.exports=a)}).call(this,r(45))},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(202)),c=n(r(4)),f=r(18),p={vertical:_.default.bool,justified:_.default.bool,block:(0,s.default)(_.default.bool,(function(e){var t=e.block,r=e.vertical;return t&&!r?new Error("`block` requires `vertical` to be set to have any effect"):null}))},d=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.block,n=t.justified,i=t.vertical,_=t.className,s=(0,a.default)(t,["block","justified","vertical","className"]),p=(0,f.splitBsProps)(s),d=p[0],E=p[1],h=(0,o.default)({},(0,f.getClassSet)(d),((e={})[(0,f.prefix)(d)]=!i,e[(0,f.prefix)(d,"vertical")]=i,e[(0,f.prefix)(d,"justified")]=n,e[(0,f.prefix)(c.default.defaultProps,"block")]=r,e));return u.default.createElement("div",(0,o.default)({},E,{className:(0,l.default)(_,h)}))},t}(u.default.Component);d.propTypes=p,d.defaultProps={block:!1,justified:!1,vertical:!1};var E=(0,f.bsClass)("btn-group",d);t.default=E,e.exports=t.default},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return CollectionList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__),_Collection__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(131),_Store__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},CollectionList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(CollectionList,_Component);var _super=_createSuper(CollectionList);function CollectionList(){var e;_classCallCheck(this,CollectionList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"collectionsVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleCollectionsVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addCollectionBtn=void 0,e.handleAddCollection=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_11__.i.hasCollection(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_11__.a;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(e,n){for(var o=0;o<t.target[0].form[n+1].value;o++)r.tasks.push(e.id)})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_11__.i.addCollection(r),e.addCollectionBtn.hide()}},e}return _createClass(CollectionList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item collections-header"},"collections",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addCollectionBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default.a,{className:"add-cg-popover collection-popover",title:"add new collection",id:"addnewcollection"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddCollection},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this collection:"),this.props.taskCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this collection (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:"",className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),this.props.requirementOptions))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addCollectionBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-collection-btn",title:"add new collection"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.collectionsVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.collectionsVisible?"hide":"show",onClick:this.toggleCollectionsVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.collectionsVisible?"visible-container list-group-item collections":"invisible-container list-group-item collections"},_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Collection__WEBPACK_IMPORTED_MODULE_10__.a,{collection:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),CollectionList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={taskCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,requirementOptions:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"collectionsVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleCollectionsVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.collectionsVisible=!e.collectionsVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(CollectionList,"CollectionList","/Users/orybalch/dev/DDS-topology-editor/src/components/CollectionList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Collection}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__),_Store__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Collection=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Collection,_Component);var _super=_createSuper(Collection);function Collection(){var e;_classCallCheck(this,Collection);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editCollectionBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditCollectionButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editCollectionBtn.hide()},e.handleEditCollection=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value)if(_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.filter((function(t){return t.id!==e.props.collection.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_11__.a;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(e,n){for(var o=0;o<t.target[0].form[n+1].value;o++)r.tasks.push(e.id)})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_11__.i.editCollection(e.props.index,r),e.editCollectionBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveCollection=function(){_Store__WEBPACK_IMPORTED_MODULE_11__.i.removeCollection(e.props.index),e.closeDeleteModal()},e}return _createClass(Collection,[{key:"render",value:function(){var e=this,t=[],r=[],n="",o=[];return _Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(r,n){var o=0;e.props.collection.tasks.forEach((function(e){r.id===e&&o++})),t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+n},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:r.id},r.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:o}))))})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.requirements.forEach((function(e,t){r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:e.id,key:"option"+t},e.id))})),this.props.collection.requirements.forEach((function(e,t){var r=_Store__WEBPACK_IMPORTED_MODULE_11__.i.requirements.find((function(t){return t.id===e}));void 0!==r&&(n=e,o.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{key:"requirement"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"requirement-child"}," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"hostname"===r.type?"host name":""},"hostname"===r.type?"HN ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"wnname"===r.type?"SSH worker node name":""},"wnname"===r.type?"WN ":""),e))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"collection"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),this.props.collection.id,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"remove",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.collection.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the collection ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.collection.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveCollection},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default.a,{trigger:"click",placement:"right",ref:function(t){return e.editCollectionBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default.a,{className:"add-cg-popover collection-popover",title:"edit collection",id:this.props.collection.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditCollection},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input",defaultValue:this.props.collection.id})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this collection:"),t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this collection (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:n,className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),r))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditCollectionButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:this.bodyVisible?"visible-container":"invisible-container"},this.props.collection.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})),o))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Collection}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={collection:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Collection,"Collection","/Users/orybalch/dev/DDS-topology-editor/src/components/Collection.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return GroupList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8__),_Group__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(133),_Store__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},GroupList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(GroupList,_Component);var _super=_createSuper(GroupList);function GroupList(){var e;_classCallCheck(this,GroupList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"groupsVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleGroupsVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addGroupBtn=void 0,e.handleAddGroup=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_10__.i.hasMainGroup(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_10__.b;r.id=t.target[0].form[0].value,r.n=t.target[0].form[1].value;var n=0;_Store__WEBPACK_IMPORTED_MODULE_10__.i.tasks.forEach((function(e,o){n++;for(var a=0;a<t.target[0].form[o+2].value;a++)r.tasks.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_10__.i.collections.forEach((function(e,o){for(var a=0;a<t.target[0].form[n+o+2].value;a++)r.collections.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_10__.i.addMainGroup(r),e.addGroupBtn.hide()}},e}return _createClass(GroupList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item groups-header"},"groups",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_7___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addGroupBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_8___default.a,{className:"add-cg-popover group-popover",title:"add new group",id:"addnewgroup"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddGroup},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_6___default.a.Addon,null,"n"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"text",defaultValue:"1"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this group:"),this.props.taskCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Collections in this group:"),this.props.collectionCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addGroupBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-group-btn",title:"add new group"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.groupsVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.groupsVisible?"hide":"show",onClick:this.toggleGroupsVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.groupsVisible?"visible-container list-group-item groups":"invisible-container list-group-item groups"},_Store__WEBPACK_IMPORTED_MODULE_10__.i.main.groups.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Group__WEBPACK_IMPORTED_MODULE_9__.a,{group:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),GroupList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={taskCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,collectionCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"groupsVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleGroupsVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.groupsVisible=!e.groupsVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(GroupList,"GroupList","/Users/orybalch/dev/DDS-topology-editor/src/components/GroupList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Group}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__),_Store__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Group=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Group,_Component);var _super=_createSuper(Group);function Group(){var e;_classCallCheck(this,Group);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editGroupBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditGroupButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editGroupBtn.hide()},e.handleEditGroup=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value)if(_Store__WEBPACK_IMPORTED_MODULE_11__.i.main.groups.filter((function(t){return t.id!==e.props.group.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_11__.b;r.id=t.target[0].form[0].value,r.n=t.target[0].form[1].value;var n=0;_Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(e,o){n++;for(var a=0;a<t.target[0].form[o+2].value;a++)r.tasks.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.forEach((function(e,o){for(var a=0;a<t.target[0].form[n+o+2].value;a++)r.collections.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.editMainGroup(e.props.index,r),e.editGroupBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveGroup=function(){_Store__WEBPACK_IMPORTED_MODULE_11__.i.removeMainGroup(e.props.index),e.closeDeleteModal()},e}return _createClass(Group,[{key:"render",value:function(){var e=this,t=[],r=[];return _Store__WEBPACK_IMPORTED_MODULE_11__.i.tasks.forEach((function(r,n){var o=0;e.props.group.tasks.forEach((function(e){r.id===e&&o++})),t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+n},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:r.id},r.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:o}))))})),_Store__WEBPACK_IMPORTED_MODULE_11__.i.collections.forEach((function(t,n){var o=0;e.props.group.collections.forEach((function(e){t.id===e&&o++})),r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-collection",key:"c-box"+n},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:t.id},t.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:o}))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),this.props.group.id,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"remove",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.group.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the group ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.group.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_8___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveGroup},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default.a,{trigger:"click",placement:"right",ref:function(t){return e.editGroupBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default.a,{className:"add-cg-popover group-popover",title:"edit group",id:this.props.group.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditGroup},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input",defaultValue:this.props.group.id}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"n"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-tc-counter",type:"text",defaultValue:this.props.group.n})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Tasks in this group:"),t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Collections in this group:"),r,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditGroupButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null," n: "),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"plain"},this.props.group.n)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("hr",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-tasks"},this.props.group.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-collections"},this.props.group.collections.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Group}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={group:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Group,"Group","/Users/orybalch/dev/DDS-topology-editor/src/components/Group.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return PropertyList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7__),_Property__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(135),_Store__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},PropertyList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(PropertyList,_Component);var _super=_createSuper(PropertyList);function PropertyList(){var e;_classCallCheck(this,PropertyList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"propertiesVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"togglePropertiesVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addPropertyBtn=void 0,e.handleAddProperty=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_9__.i.hasProperty(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_9__.d;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_9__.i.addProperty(r),e.addPropertyBtn.hide()}},e}return _createClass(PropertyList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item properties-header"},"properties",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addPropertyBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_7___default.a,{className:"add-cg-popover property-popover",title:"add new property",id:"addnewproperty"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddProperty},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_5___default.a.Addon,null,"id "),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{type:"text",autoFocus:!0,onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addPropertyBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-property-btn",title:"add new property"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.propertiesVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.propertiesVisible?"hide":"show",onClick:this.togglePropertiesVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.propertiesVisible?"visible-container list-group-item properties":"invisible-container list-group-item properties"},_Store__WEBPACK_IMPORTED_MODULE_9__.i.properties.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Property__WEBPACK_IMPORTED_MODULE_8__.a,{property:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),PropertyList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"propertiesVisible",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"togglePropertiesVisibility",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.propertiesVisible=!e.propertiesVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(PropertyList,"PropertyList","/Users/orybalch/dev/DDS-topology-editor/src/components/PropertyList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Property}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5__),_Store__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Property=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Property,_Component);var _super=_createSuper(Property);function Property(){var e;_classCallCheck(this,Property);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"editing",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleEditing",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.handleEditProperty=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||_Store__WEBPACK_IMPORTED_MODULE_6__.i.hasProperty(t.target[0].form[0].value))e.toggleEditing();else{var r=new _Store__WEBPACK_IMPORTED_MODULE_6__.d;r.id=t.target[0].form[0].value,_Store__WEBPACK_IMPORTED_MODULE_6__.i.editProperty(e.props.index,r),e.toggleEditing()}},e.handleRemoveProperty=function(){_Store__WEBPACK_IMPORTED_MODULE_6__.i.removeProperty(e.props.index),e.closeDeleteModal()},e}return _createClass(Property,[{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"property"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"element-title",title:this.props.property.id},this.props.property.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"delete",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.property.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the property ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.property.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_5___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveProperty},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit",onClick:this.toggleEditing})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,this.editing?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditProperty},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"id: "),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"form-control",type:"text",autoFocus:!0,defaultValue:this.props.property.id}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"btn btn-xs btn-primary",type:"submit"},"ok")):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{title:this.props.property.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"id:")," ",this.props.property.id))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Property}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={property:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"editing",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"toggleEditing",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.editing?e.editing=!1:(e.editing=!0,e.bodyVisible=!0)}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Property,"Property","/Users/orybalch/dev/DDS-topology-editor/src/components/Property.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return RequirementList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(61),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(36),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10__),_Requirement__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(137),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},RequirementList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_2__.a)((_temp=function(_Component){_inherits(RequirementList,_Component);var _super=_createSuper(RequirementList);function RequirementList(){var e;_classCallCheck(this,RequirementList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"requirementsVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleRequirementsVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addRequirementBtn=void 0,e.handleAddRequirement=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||""===t.target[0].form[3].value||_Store__WEBPACK_IMPORTED_MODULE_12__.i.hasRequirement(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.e;r.id=t.target[0].form[0].value,r.value=t.target[0].form[3].value,console.log(t.target[0].form[3].value),t.target[0].form[1].checked?r.type="hostname":r.type="wnname",_Store__WEBPACK_IMPORTED_MODULE_12__.i.addRequirement(r),e.addRequirementBtn.hide()}},e}return _createClass(RequirementList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item requirements-header"},"requirements",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_8___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addRequirementBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_9___default.a,{className:"add-cg-popover requirement-popover",title:"add new requirement",id:"addnewrequirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddRequirement},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_6___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"pattern-label"},"Pattern Type"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default.a,{name:"patternType",inline:!0,defaultChecked:!0,title:"host name"},"hostname"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_10___default.a,{name:"patternType",inline:!0,title:"SSH worker node name"},"wnname")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_7___default.a.Addon,null,"pattern"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_5___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"mono invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addRequirementBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-requirement-btn",title:"add new requirement"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.requirementsVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.requirementsVisible?"hide":"show",onClick:this.toggleRequirementsVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.requirementsVisible?"visible-container list-group-item requirements":"invisible-container list-group-item requirements"},_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Requirement__WEBPACK_IMPORTED_MODULE_11__.a,{requirement:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),RequirementList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"requirementsVisible",[mobx__WEBPACK_IMPORTED_MODULE_1__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleRequirementsVisibility",[mobx__WEBPACK_IMPORTED_MODULE_1__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.requirementsVisible=!e.requirementsVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(RequirementList,"RequirementList","/Users/orybalch/dev/DDS-topology-editor/src/components/RequirementList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Requirement}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(61),react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(36),react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12___default=__webpack_require__.n(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12__),_Store__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Requirement=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Requirement,_Component);var _super=_createSuper(Requirement);function Requirement(){var e;_classCallCheck(this,Requirement);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editRequirementBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditRequirementButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editRequirementBtn.hide()},e.handleEditRequirement=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value&&""!==t.target[0].form[3].value)if(_Store__WEBPACK_IMPORTED_MODULE_13__.i.requirements.filter((function(t){return t.id!==e.props.requirement.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_13__.e;r.id=t.target[0].form[0].value,r.value=t.target[0].form[3].value,t.target[0].form[1].checked?r.type="hostname":r.type="wnname",_Store__WEBPACK_IMPORTED_MODULE_13__.i.editRequirement(e.props.index,r),e.editRequirementBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveRequirement=function(){_Store__WEBPACK_IMPORTED_MODULE_13__.i.removeRequirement(e.props.index),e.closeDeleteModal()},e}return _createClass(Requirement,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"element-title",title:this.props.requirement.id},this.props.requirement.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"delete",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.requirement.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the requirement ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.requirement.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveRequirement},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default.a,{trigger:"click",placement:"right",ref:function(t){return e.editRequirementBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default.a,{className:"add-cg-popover requirement-popover",title:"edit requirement",id:this.props.requirement.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditRequirement},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,null,"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},defaultValue:this.props.requirement.id,className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_ControlLabel__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"pattern-label"},"Pattern Type"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12___default.a,{name:"patternType",inline:!0,defaultChecked:"hostname"===this.props.requirement.type,title:"host name"},"hostname"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Radio__WEBPACK_IMPORTED_MODULE_12___default.a,{name:"patternType",inline:!0,defaultChecked:"wnname"===this.props.requirement.type,title:"SSH worker node name"},"wnname")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,null,"pattern"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{type:"text",onFocus:function(){return e.setInputValidity(!0)},defaultValue:this.props.requirement.value,className:this.inputValid?"mono":"mono invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"save"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditRequirementButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit task"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"pattern:")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.requirement.value,title:this.props.requirement.value}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"pattern-type",title:"pattern type"},this.props.requirement.type))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Requirement}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={requirement:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Requirement,"Requirement","/Users/orybalch/dev/DDS-topology-editor/src/components/Requirement.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return TaskList}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(44),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10__),_Task__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(139),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},TaskList=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(TaskList,_Component);var _super=_createSuper(TaskList);function TaskList(){var e;_classCallCheck(this,TaskList);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"inputValid",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"tasksVisible",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleTasksVisibility",_descriptor4,_assertThisInitialized(e)),e.shouldComponentUpdate=function(){return!0},e.addTaskBtn=void 0,e.handleAddTask=function(t){if(t.preventDefault(),""===t.target[0].form[0].value||""===t.target[0].form[1].value||_Store__WEBPACK_IMPORTED_MODULE_12__.i.hasTask(t.target[0].form[0].value))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.f;r.id=t.target[0].form[0].value,r.exeValue=t.target[0].form[1].value,t.target[0].form[2].checked&&(r.exeReachable="true"),""!==t.target[0].form[3].value&&(r.envValue=t.target[0].form[3].value,t.target[0].form[4].checked&&(r.envReachable="true")),_Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(e,n){"read"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"read"}):"write"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"write"}):"readwrite"===t.target[0].form[n+5].value&&r.properties.push({id:e.id,access:"readwrite"})})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_12__.i.addTask(r),e.addTaskBtn.hide()}},e}return _createClass(TaskList,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:"list-group-item tasks-header"},"tasks",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_9___default.a,{trigger:"click",placement:"right",ref:function(t){return e.addTaskBtn=t},onClick:function(){return e.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_10___default.a,{className:"add-cg-popover task-popover",title:"add new task",id:"addnewtask"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleAddTask},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"":"invalid-input"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"exe"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",onFocus:function(){return e.setInputValidity(!0)},className:this.inputValid?"mono":"mono invalid-input"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,null,"reachable (optional)")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"env"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",className:"mono"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,null,"reachable (optional)"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Properties in this task:"),this.props.propertyCheckboxes,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this task (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:"",className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),this.props.requirementOptions))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"add"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){e.setInputValidity(!0),e.addTaskBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-plus add-task-btn",title:"add new task"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.tasksVisible?"glyphicon glyphicon-chevron-up toggle-property-btn":"glyphicon glyphicon-chevron-down toggle-property-btn",title:this.tasksVisible?"hide":"show",onClick:this.toggleTasksVisibility})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{className:this.tasksVisible?"visible-container list-group-item tasks":"invisible-container list-group-item tasks"},_Store__WEBPACK_IMPORTED_MODULE_12__.i.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Task__WEBPACK_IMPORTED_MODULE_11__.a,{task:e,key:t,index:t})}))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),TaskList}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={propertyCheckboxes:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,requirementOptions:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"tasksVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleTasksVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.tasksVisible=!e.tasksVisible}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(TaskList,"TaskList","/Users/orybalch/dev/DDS-topology-editor/src/components/TaskList.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Task}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),mobx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),mobx_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(44),react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6__),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(14),react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7__),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(6),react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8__),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(7),react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11__),_Store__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_class,_class2,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_class3,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _initializerDefineProperty(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var a={};return Object.keys(n).forEach((function(e){a[e]=n[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(e,t,r)||r}),a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},Task=Object(mobx_react__WEBPACK_IMPORTED_MODULE_3__.a)((_temp=_class3=function(_Component){_inherits(Task,_Component);var _super=_createSuper(Task);function Task(){var e;_classCallCheck(this,Task);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return _initializerDefineProperty(e=_super.call.apply(_super,[this].concat(r)),"bodyVisible",_descriptor,_assertThisInitialized(e)),_initializerDefineProperty(e,"inputValid",_descriptor2,_assertThisInitialized(e)),_initializerDefineProperty(e,"deleteModalVisible",_descriptor3,_assertThisInitialized(e)),_initializerDefineProperty(e,"toggleBodyVisibility",_descriptor4,_assertThisInitialized(e)),_initializerDefineProperty(e,"setInputValidity",_descriptor5,_assertThisInitialized(e)),_initializerDefineProperty(e,"openDeleteModal",_descriptor6,_assertThisInitialized(e)),_initializerDefineProperty(e,"closeDeleteModal",_descriptor7,_assertThisInitialized(e)),e.editTaskBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.hideEditTaskButton=function(t){t.preventDefault(),e.setInputValidity(!0),e.editTaskBtn.hide()},e.handleEditTask=function(t){if(t.preventDefault(),""!==t.target[0].form[0].value&&""!==t.target[0].form[1].value)if(_Store__WEBPACK_IMPORTED_MODULE_12__.i.tasks.filter((function(t){return t.id!==e.props.task.id})).some((function(e){return e.id===t.target[0].form[0].value})))e.setInputValidity(!1);else{var r=new _Store__WEBPACK_IMPORTED_MODULE_12__.f;r.id=t.target[0].form[0].value,r.exeValue=t.target[0].form[1].value,!0===t.target[0].form[2].checked&&(r.exeReachable="true"),""!==t.target[0].form[3].value&&(r.envValue=t.target[0].form[3].value,1==t.target[0].form[4].checked&&(r.envReachable="true")),_Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(e,n){"read"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"read"}):"write"===t.target[0].form[n+5].value?r.properties.push({id:e.id,access:"write"}):"readwrite"===t.target[0].form[n+5].value&&r.properties.push({id:e.id,access:"readwrite"})})),""!==t.target[0].form.requirements.value&&r.requirements.push(t.target[0].form.requirements.value),_Store__WEBPACK_IMPORTED_MODULE_12__.i.editTask(e.props.index,r),e.editTaskBtn.hide()}else e.setInputValidity(!1)},e.handleRemoveTask=function(){_Store__WEBPACK_IMPORTED_MODULE_12__.i.removeTask(e.props.index),e.closeDeleteModal()},e}return _createClass(Task,[{key:"render",value:function(){var e,t,r=this,n=[],o=[],a="",i=[],l=!1,u=!1,_=!1;return _Store__WEBPACK_IMPORTED_MODULE_12__.i.properties.forEach((function(e,t){var o="";r.props.task.properties.forEach((function(t){e.id===t.id&&(o=t.access)})),n.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-property",key:"t-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{componentClass:"select",placeholder:"",defaultValue:o,className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"read"},"read"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"write"},"write"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:"readwrite"},"readwrite")))))})),_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.forEach((function(e,t){o.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:e.id,key:"option"+t},e.id))})),""!==this.props.task.exeReachable&&("true"===this.props.task.exeReachable?(e=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is available on worker nodes"},"(reachable)"),l=!0):"false"===this.props.task.exeReachable&&(e=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is not available on worker nodes"},"(unreachable)"))),""!==this.props.task.envValue&&(_=!0,""!==this.props.task.envReachable?"true"===this.props.task.envReachable?(t=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"env:"))," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.envValue}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is available on worker nodes"},"(reachable)")),u=!0):"false"===this.props.task.envReachable&&(t=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"env:"))," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.envValue}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"reachable",title:"executable is not available on worker nodes"},"(unreachable)"))):t=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"env:"))," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.envValue}))),this.props.task.requirements.forEach((function(e,t){var r=_Store__WEBPACK_IMPORTED_MODULE_12__.i.requirements.find((function(t){return t.id===e}));void 0!==r&&(a=e,i.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{key:"requirement"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"requirement-child"}," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"hostname"===r.type?"host name":""},"hostname"===r.type?"HN ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"wnname"===r.type?"SSH worker node name":""},"wnname"===r.type?"WN ":""),e))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"task"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-tasks"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"element-title",title:this.props.task.id},this.props.task.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:this.bodyVisible?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down",title:this.bodyVisible?"hide":"show",onClick:this.toggleBodyVisibility}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-trash",title:"delete",onClick:this.openDeleteModal}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a,{show:this.deleteModalVisible,onHide:this.closeDeleteModal},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Header,{closeButton:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Title,null,"Delete ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.task.id),"?")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Body,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Are you sure you want to delete the task ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,this.props.task.id,"?"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Modal__WEBPACK_IMPORTED_MODULE_9___default.a.Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{bsStyle:"danger",onClick:this.handleRemoveTask},"Delete"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{onClick:this.closeDeleteModal},"Cancel"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_10___default.a,{trigger:"click",placement:"right",ref:function(e){return r.editTaskBtn=e},onClick:function(){return r.setInputValidity(!0)},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_11___default.a,{className:"add-cg-popover task-popover",title:"edit task",id:this.props.task.id},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditTask},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"id"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",name:"id",onFocus:function(){return r.setInputValidity(!0)},className:this.inputValid?"":"invalid-input",defaultValue:this.props.task.id})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"exe"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",name:"exe",onFocus:function(){return r.setInputValidity(!0)},className:this.inputValid?"mono":"mono invalid-input",defaultValue:this.props.task.exeValue||""}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,{name:"exeReachable",defaultChecked:l},"exe reachable (optional)")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a,{style:{marginTop:"5px",marginBottom:"5px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_InputGroup__WEBPACK_IMPORTED_MODULE_8___default.a.Addon,{style:{width:"32px",textAlign:"right",padding:"0 10px 0 0"}},"env"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{style:{width:"235px"},type:"text",name:"env",onFocus:function(){return r.setInputValidity(!0)},className:"mono",defaultValue:_&&this.props.task.envValue||""}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Checkbox__WEBPACK_IMPORTED_MODULE_5___default.a,{name:"envReachable",defaultChecked:u},"env reachable (optional)"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Properties in this task:"),n,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Requirement for this task (optional):"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-requirement"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name"},"Requirement"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormGroup__WEBPACK_IMPORTED_MODULE_7___default.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a,{componentClass:"select",name:"requirements",placeholder:"",defaultValue:a,className:"accessSelect"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option",{value:""},"-"),o))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"save"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:this.hideEditTaskButton},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit",title:"edit task"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:this.bodyVisible?"visible-container":"invisible-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"exe:")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",readOnly:!0,value:this.props.task.exeValue,title:this.props.task.exeValue}),e),t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,this.props.task.properties.map((function(e){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{title:e.id,key:e.id}," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"write"===e.access?"write":""},"write"===e.access?"W ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"read"===e.access?"read":""},"read"===e.access?"R ":""),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"prop-access",title:"readwrite"===e.access?"read & write":""},"readwrite"===e.access?"RW ":""),e.id)}))),i))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Task}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class3.propTypes={task:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,index:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired},_class2=_temp,_descriptor=_applyDecoratedDescriptor(_class2.prototype,"bodyVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor2=_applyDecoratedDescriptor(_class2.prototype,"inputValid",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor3=_applyDecoratedDescriptor(_class2.prototype,"deleteModalVisible",[mobx__WEBPACK_IMPORTED_MODULE_2__.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor4=_applyDecoratedDescriptor(_class2.prototype,"toggleBodyVisibility",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.bodyVisible=!e.bodyVisible}}}),_descriptor5=_applyDecoratedDescriptor(_class2.prototype,"setInputValidity",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(t){e.inputValid=t}}}),_descriptor6=_applyDecoratedDescriptor(_class2.prototype,"openDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!0}}}),_descriptor7=_applyDecoratedDescriptor(_class2.prototype,"closeDeleteModal",[mobx__WEBPACK_IMPORTED_MODULE_2__.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){var e=this;return function(){e.deleteModalVisible=!1}}}),_class=_class2))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(Task,"Task","/Users/orybalch/dev/DDS-topology-editor/src/components/Task.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return MainEditor}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),mobx_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(141),react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2__),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4),react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3__),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(5),react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4__),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(17),react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5__),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(16),react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6__),_Store__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(2),_class,_temp,enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _createSuper(e){return function(){var t,r=_getPrototypeOf(e);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return _possibleConstructorReturn(this,t)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},MainEditor=Object(mobx_react__WEBPACK_IMPORTED_MODULE_1__.a)((_temp=function(_Component){_inherits(MainEditor,_Component);var _super=_createSuper(MainEditor);function MainEditor(){var e;_classCallCheck(this,MainEditor);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return(e=_super.call.apply(_super,[this].concat(r))).editTasksInMainBtn=void 0,e.editCollectionsInMainBtn=void 0,e.shouldComponentUpdate=function(){return!0},e.handleEditTasksInMain=function(t){t.preventDefault();var r=new _Store__WEBPACK_IMPORTED_MODULE_7__.c;r.id=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.id,r.collections=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.collections,r.groups=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.groups,_Store__WEBPACK_IMPORTED_MODULE_7__.i.tasks.forEach((function(e,n){for(var o=0;o<t.target[0].form[n].value;o++)r.tasks.push(e.id)})),e.editTasksInMainBtn.hide(),_Store__WEBPACK_IMPORTED_MODULE_7__.i.setMain(r)},e.handleEditCollectionsInMain=function(t){t.preventDefault();var r=new _Store__WEBPACK_IMPORTED_MODULE_7__.c;r.id=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.id,r.tasks=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.tasks,r.groups=_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.groups,_Store__WEBPACK_IMPORTED_MODULE_7__.i.collections.forEach((function(e,n){for(var o=0;o<t.target[0].form[n].value;o++)r.collections.push(e.id)})),_Store__WEBPACK_IMPORTED_MODULE_7__.i.setMain(r),e.editCollectionsInMainBtn.hide()},e}return _createClass(MainEditor,[{key:"render",value:function(){var e=this,t=[],r=[];return _Store__WEBPACK_IMPORTED_MODULE_7__.i.tasks.forEach((function(e,r){var n=0;_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.tasks.forEach((function(t){e.id===t&&n++})),t.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-task",key:"t-box"+r},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"form-group"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:n}))))})),_Store__WEBPACK_IMPORTED_MODULE_7__.i.collections.forEach((function(e,t){var n=0;_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.collections.forEach((function(t){e.id===t&&n++})),r.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"ct-box ct-box-collection",key:"c-box"+t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"element-name",title:e.id},e.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"form-group"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_FormControl__WEBPACK_IMPORTED_MODULE_4___default.a,{className:"add-cg-tc-counter",type:"number",min:"0",defaultValue:n}))))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"panel panel-default main-pane"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"panel-heading"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",{className:"panel-title"},_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.id)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"main-editor-body",className:"panel-body"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-4 centered main-element main-element-tasks"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",{className:"main-header"},"tasks in main",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default.a,{trigger:"click",placement:"bottom",ref:function(t){return e.editTasksInMainBtn=t},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover task-popover",title:"modify tasks in main",id:"tasksinmain"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditTasksInMain},t,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){return e.editTasksInMainBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit add-task-btn edit-main-btn",title:"edit tasks in main"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-tasks"},_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.tasks.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-4 centered main-element main-element-collections"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",{className:"main-header"},"collections in main",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_OverlayTrigger__WEBPACK_IMPORTED_MODULE_6___default.a,{trigger:"click",placement:"bottom",ref:function(t){return e.editCollectionsInMainBtn=t},overlay:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Popover__WEBPACK_IMPORTED_MODULE_5___default.a,{className:"add-cg-popover collection-popover",title:"modify collections in main",id:"collectionsinmain"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form",{onSubmit:this.handleEditCollectionsInMain},r,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-12"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",type:"submit",bsSize:"small",bsStyle:"primary"},"edit"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Button__WEBPACK_IMPORTED_MODULE_3___default.a,{className:"add-cg-popover-btn",bsSize:"small",bsStyle:"default",onClick:function(){return e.editCollectionsInMainBtn.hide()}},"cancel")))))},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"glyphicon glyphicon-edit add-collection-btn edit-main-btn",title:"edit collections in main"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-collections"},_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.collections.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{key:t},e)})))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"col-xs-4 centered main-element main-element-groups"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5",{className:"main-header"},"groups"),_Store__WEBPACK_IMPORTED_MODULE_7__.i.main.groups.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-groups",key:t},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,e.id," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_bootstrap_lib_Badge__WEBPACK_IMPORTED_MODULE_2___default.a,null,e.n)))}))))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MainEditor}(react__WEBPACK_IMPORTED_MODULE_0__.Component),_class=_temp))||_class,reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(MainEditor,"MainEditor","/Users/orybalch/dev/DDS-topology-editor/src/components/MainEditor.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(20)(module))},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c={pullRight:_.default.bool},f=function(e){function t(){return e.apply(this,arguments)||this}(0,i.default)(t,e);var r=t.prototype;return r.hasContent=function(e){var t=!1;return u.default.Children.forEach(e,(function(e){t||(e||0===e)&&(t=!0)})),t},r.render=function(){var e=this.props,t=e.pullRight,r=e.className,n=e.children,i=(0,a.default)(e,["pullRight","className","children"]),_=(0,s.splitBsProps)(i),c=_[0],f=_[1],p=(0,o.default)({},(0,s.getClassSet)(c),{"pull-right":t,hidden:!this.hasContent(n)});return u.default.createElement("span",(0,o.default)({},f,{className:(0,l.default)(r,p)}),n)},t}(u.default.Component);f.propTypes=c,f.defaultProps={pullRight:!1};var p=(0,s.bsClass)("badge",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";e.exports=r(302)},function(e,t,r){e.exports=r(144)},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n),a=r(22),i=r.n(a),l=r(124);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;i.a.render(o.a.createElement(l.a,null),document.getElementById("main"))},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(89),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,_=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,c=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,d=o?Symbol.for("react.memo"):60115,E=o?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function v(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||m}function O(){}function P(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=v.prototype;var g=P.prototype=new O;g.constructor=P,n(g,v.prototype),g.isPureReactComponent=!0;var D={current:null},M=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,r){var n,o={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)M.call(t,n)&&!C.hasOwnProperty(n)&&(o[n]=t[n]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var _=Array(u),s=0;s<u;s++)_[s]=arguments[s+2];o.children=_}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===o[n]&&(o[n]=u[n]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:D.current}}function w(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var R=/\/+/g,A=[];function L(e,t,r,n){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=r,o.context=n,o.count=0,o}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function k(e,t,r){return null==e?0:function e(t,r,n,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case i:u=!0}}if(u)return n(o,t,""===r?"."+B(t,0):r),1;if(u=0,r=""===r?".":r+":",Array.isArray(t))for(var _=0;_<t.length;_++){var s=r+B(l=t[_],_);u+=e(l,s,n,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=h&&t[h]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),_=0;!(l=t.next()).done;)u+=e(l=l.value,s=r+B(l,_++),n,o);else if("object"===l)throw n=""+t,Error(b(31,"[object Object]"===n?"object with keys {"+Object.keys(t).join(", ")+"}":n,""));return u}(e,"",t,r)}function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function U(e,t){e.func.call(e.context,t,e.count++)}function x(e,t,r){var n=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?S(e,n,r,(function(e){return e})):null!=e&&(w(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+r)),n.push(e))}function S(e,t,r,n,o){var a="";null!=r&&(a=(""+r).replace(R,"$&/")+"/"),k(e,x,t=L(t,a,n,o)),I(t)}var W={current:null};function K(){var e=W.current;if(null===e)throw Error(b(321));return e}var N={ReactCurrentDispatcher:W,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:D,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:function(e,t,r){if(null==e)return e;var n=[];return S(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;k(e,U,t=L(null,null,t,r)),I(t)},count:function(e){return k(e,(function(){return null}),null)},toArray:function(e){var t=[];return S(e,t,null,(function(e){return e})),t},only:function(e){if(!w(e))throw Error(b(143));return e}},t.Component=v,t.Fragment=l,t.Profiler=_,t.PureComponent=P,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error(b(267,e));var o=n({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=D.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var _=e.type.defaultProps;for(s in t)M.call(t,s)&&!C.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==_?_[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){_=Array(s);for(var c=0;c<s;c++)_[c]=arguments[c+2];o.children=_}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=w,t.lazy=function(e){return{$$typeof:E,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return K().useCallback(e,t)},t.useContext=function(e,t){return K().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return K().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return K().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return K().useLayoutEffect(e,t)},t.useMemo=function(e,t){return K().useMemo(e,t)},t.useReducer=function(e,t,r){return K().useReducer(e,t,r)},t.useRef=function(e){return K().useRef(e)},t.useState=function(e){return K().useState(e)},t.version="16.13.1"},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(0),o=r(89),a=r(147);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));function l(e,t,r,n,o,a,i,l,u){var _=Array.prototype.slice.call(arguments,3);try{t.apply(r,_)}catch(e){this.onError(e)}}var u=!1,_=null,s=!1,c=null,f={onError:function(e){u=!0,_=e}};function p(e,t,r,n,o,a,i,s,c){u=!1,_=null,l.apply(f,arguments)}var d=null,E=null,h=null;function b(e,t,r){var n=e.type||"unknown-event";e.currentTarget=h(r),function(e,t,r,n,o,a,l,f,d){if(p.apply(this,arguments),u){if(!u)throw Error(i(198));var E=_;u=!1,_=null,s||(s=!0,c=E)}}(n,t,void 0,e),e.currentTarget=null}var m=null,y={};function v(){if(m)for(var e in y){var t=y[e],r=m.indexOf(e);if(!(-1<r))throw Error(i(96,e));if(!P[r]){if(!t.extractEvents)throw Error(i(97,e));for(var n in P[r]=t,r=t.eventTypes){var o=void 0,a=r[n],l=t,u=n;if(g.hasOwnProperty(u))throw Error(i(99,u));g[u]=a;var _=a.phasedRegistrationNames;if(_){for(o in _)_.hasOwnProperty(o)&&O(_[o],l,u);o=!0}else a.registrationName?(O(a.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(i(98,n,e))}}}}function O(e,t,r){if(D[e])throw Error(i(100,e));D[e]=t,M[e]=t.eventTypes[r].dependencies}var P=[],g={},D={},M={};function C(e){var t,r=!1;for(t in e)if(e.hasOwnProperty(t)){var n=e[t];if(!y.hasOwnProperty(t)||y[t]!==n){if(y[t])throw Error(i(102,t));y[t]=n,r=!0}}r&&v()}var T=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),w=null,R=null,A=null;function L(e){if(e=E(e)){if("function"!=typeof w)throw Error(i(280));var t=e.stateNode;t&&(t=d(t),w(e.stateNode,e.type,t))}}function I(e){R?A?A.push(e):A=[e]:R=e}function k(){if(R){var e=R,t=A;if(A=R=null,L(e),t)for(e=0;e<t.length;e++)L(t[e])}}function B(e,t){return e(t)}function U(e,t,r,n,o){return e(t,r,n,o)}function x(){}var S=B,W=!1,K=!1;function N(){null===R&&null===A||(x(),k())}function z(e,t,r){if(K)return e(t,r);K=!0;try{return S(e,t,r)}finally{K=!1,N()}}var j=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,q=Object.prototype.hasOwnProperty,F={},V={};function G(e,t,r,n,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a}var H={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){H[e]=new G(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];H[t]=new G(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){H[e]=new G(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){H[e]=new G(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){H[e]=new G(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){H[e]=new G(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){H[e]=new G(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){H[e]=new G(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){H[e]=new G(e,5,!1,e.toLowerCase(),null,!1)}));var $=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace($,Y);H[t]=new G(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace($,Y);H[t]=new G(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace($,Y);H[t]=new G(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){H[e]=new G(e,1,!1,e.toLowerCase(),null,!1)})),H.xlinkHref=new G("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){H[e]=new G(e,1,!1,e.toLowerCase(),null,!0)}));var Q=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,r,n){var o=H.hasOwnProperty(t)?H[t]:null;(null!==o?0===o.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!q.call(V,e)||!q.call(F,e)&&(j.test(e)?V[e]=!0:(F[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}Q.hasOwnProperty("ReactCurrentDispatcher")||(Q.ReactCurrentDispatcher={current:null}),Q.hasOwnProperty("ReactCurrentBatchConfig")||(Q.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,re=Z?Symbol.for("react.fragment"):60107,ne=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,_e=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,ce=Z?Symbol.for("react.memo"):60115,fe=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,de="function"==typeof Symbol&&Symbol.iterator;function Ee(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=de&&e[de]||e["@@iterator"])?e:null}function he(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case re:return"Fragment";case te:return"Portal";case oe:return"Profiler";case ne:return"StrictMode";case _e:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case ce:return he(e.type);case pe:return he(e.render);case fe:if(e=1===e._status?e._result:null)return he(e)}return null}function be(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var r="";break e;default:var n=e._debugOwner,o=e._debugSource,a=he(e.type);r=null,n&&(r=he(n.type)),n=a,a="",o?a=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":r&&(a=" (created by "+r+")"),r="\n    in "+(n||"Unknown")+a}t+=r,e=e.return}while(e);return t}function me(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ve(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Oe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=ye(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function Pe(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ge(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=me(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function De(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Me(e,t){De(e,t);var r=me(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?Te(e,t.type,r):t.hasOwnProperty("defaultValue")&&Te(e,t.type,me(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function Te(e,t,r){"number"===t&&e.ownerDocument.activeElement===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function we(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Re(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+me(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Le(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:me(r)}}function Ie(e,t){var r=me(t.value),n=me(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ke(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Be="http://www.w3.org/1999/xhtml",Ue="http://www.w3.org/2000/svg";function xe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?xe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var We,Ke=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,r,n,o){MSApp.execUnsafeLocalFunction((function(){return e(t,r)}))}:e}((function(e,t){if(e.namespaceURI!==Ue||"innerHTML"in e)e.innerHTML=t;else{for((We=We||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=We.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ne(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}function ze(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var je={animationend:ze("Animation","AnimationEnd"),animationiteration:ze("Animation","AnimationIteration"),animationstart:ze("Animation","AnimationStart"),transitionend:ze("Transition","TransitionEnd")},qe={},Fe={};function Ve(e){if(qe[e])return qe[e];if(!je[e])return e;var t,r=je[e];for(t in r)if(r.hasOwnProperty(t)&&t in Fe)return qe[e]=r[t];return e}T&&(Fe=document.createElement("div").style,"AnimationEvent"in window||(delete je.animationend.animation,delete je.animationiteration.animation,delete je.animationstart.animation),"TransitionEvent"in window||delete je.transitionend.transition);var Ge=Ve("animationend"),He=Ve("animationiteration"),$e=Ve("animationstart"),Ye=Ve("transitionend"),Qe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return tt(o),e;if(a===n)return tt(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=a;break}if(u===n){l=!0,n=o,r=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===r){l=!0,r=a,n=o;break}if(u===n){l=!0,n=a,r=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function nt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,r){Array.isArray(e)?e.forEach(t,r):e&&t.call(r,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(t))for(var n=0;n<t.length&&!e.isPropagationStopped();n++)b(e,t[n],r[n]);else t&&b(e,t,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=nt(at,e)),e=at,at=null,e){if(ot(e,it),at)throw Error(i(95));if(s)throw e=c,s=!1,c=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function _t(e){if(!T)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ct(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function ft(e,t,r,n){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=n,o.nativeEvent=t,o.targetInst=r,o}return{topLevelType:e,eventSystemFlags:n,nativeEvent:t,targetInst:r,ancestors:[]}}function pt(e){var t=e.targetInst,r=t;do{if(!r){e.ancestors.push(r);break}var n=r;if(3===n.tag)n=n.stateNode.containerInfo;else{for(;n.return;)n=n.return;n=3!==n.tag?null:n.stateNode.containerInfo}if(!n)break;5!==(t=r.tag)&&6!==t||e.ancestors.push(r),r=Cr(n)}while(r);for(r=0;r<e.ancestors.length;r++){t=e.ancestors[r];var o=ut(e.nativeEvent);n=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===r&&(i|=64);for(var l=null,u=0;u<P.length;u++){var _=P[u];_&&(_=_.extractEvents(n,t,a,o,i))&&(l=nt(l,_))}lt(l)}}function dt(e,t,r){if(!r.has(e)){switch(e){case"scroll":$t(t,"scroll",!0);break;case"focus":case"blur":$t(t,"focus",!0),$t(t,"blur",!0),r.set("blur",null),r.set("focus",null);break;case"cancel":case"close":_t(e)&&$t(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Qe.indexOf(e)&&Ht(e,t)}r.set(e,null)}}var Et,ht,bt,mt=!1,yt=[],vt=null,Ot=null,Pt=null,gt=new Map,Dt=new Map,Mt=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function wt(e,t,r,n,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|r,nativeEvent:o,container:n}}function Rt(e,t){switch(e){case"focus":case"blur":vt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":gt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function At(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=wt(t,r,n,o,a),null!==t&&(null!==(t=Tr(t))&&ht(t)),e):(e.eventSystemFlags|=n,e)}function Lt(e){var t=Cr(e.target);if(null!==t){var r=Ze(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=et(r)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){bt(r)}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var r=Tr(t);return null!==r&&ht(r),e.blockedOn=t,!1}return!0}function kt(e,t,r){It(e)&&r.delete(t)}function Bt(){for(mt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=Tr(e.blockedOn))&&Et(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==vt&&It(vt)&&(vt=null),null!==Ot&&It(Ot)&&(Ot=null),null!==Pt&&It(Pt)&&(Pt=null),gt.forEach(kt),Dt.forEach(kt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,mt||(mt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Bt)))}function xt(e){function t(t){return Ut(t,e)}if(0<yt.length){Ut(yt[0],e);for(var r=1;r<yt.length;r++){var n=yt[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==vt&&Ut(vt,e),null!==Ot&&Ut(Ot,e),null!==Pt&&Ut(Pt,e),gt.forEach(t),Dt.forEach(t),r=0;r<Mt.length;r++)(n=Mt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<Mt.length&&null===(r=Mt[0]).blockedOn;)Lt(r),null===r.blockedOn&&Mt.shift()}var St={},Wt=new Map,Kt=new Map,Nt=["abort","abort",Ge,"animationEnd",He,"animationIteration",$e,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function zt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[n],eventPriority:t},Kt.set(n,t),Wt.set(n,a),St[o]=a}}zt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(Nt,2);for(var jt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),qt=0;qt<jt.length;qt++)Kt.set(jt[qt],0);var Ft=a.unstable_UserBlockingPriority,Vt=a.unstable_runWithPriority,Gt=!0;function Ht(e,t){$t(t,e,!1)}function $t(e,t,r){var n=Kt.get(t);switch(void 0===n?2:n){case 0:n=Yt.bind(null,t,1,e);break;case 1:n=Qt.bind(null,t,1,e);break;default:n=Xt.bind(null,t,1,e)}r?e.addEventListener(t,n,!0):e.addEventListener(t,n,!1)}function Yt(e,t,r,n){W||x();var o=Xt,a=W;W=!0;try{U(o,e,t,r,n)}finally{(W=a)||N()}}function Qt(e,t,r,n){Vt(Ft,Xt.bind(null,e,t,r,n))}function Xt(e,t,r,n){if(Gt)if(0<yt.length&&-1<Ct.indexOf(e))e=wt(null,e,t,r,n),yt.push(e);else{var o=Jt(e,t,r,n);if(null===o)Rt(e,n);else if(-1<Ct.indexOf(e))e=wt(o,e,t,r,n),yt.push(e);else if(!function(e,t,r,n,o){switch(t){case"focus":return vt=At(vt,e,t,r,n,o),!0;case"dragenter":return Ot=At(Ot,e,t,r,n,o),!0;case"mouseover":return Pt=At(Pt,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return gt.set(a,At(gt.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,Dt.set(a,At(Dt.get(a)||null,e,t,r,n,o)),!0}return!1}(o,e,t,r,n)){Rt(e,n),e=ft(e,n,null,t);try{z(pt,e)}finally{ct(e)}}}}function Jt(e,t,r,n){if(null!==(r=Cr(r=ut(n)))){var o=Ze(r);if(null===o)r=null;else{var a=o.tag;if(13===a){if(null!==(r=et(o)))return r;r=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}e=ft(e,n,r,t);try{z(pt,e)}finally{ct(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},er=["Webkit","ms","Moz","O"];function tr(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function rr(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=tr(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(Zt).forEach((function(e){er.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var nr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function or(e,t){if(t){if(nr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function ar(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ir=Be;function lr(e,t){var r=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=M[t];for(var n=0;n<t.length;n++)dt(t[n],e,r)}function ur(){}function _r(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var r,n=sr(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sr(n)}}function fr(){for(var e=window,t=_r();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=_r((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var dr=null,Er=null;function hr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var mr="function"==typeof setTimeout?setTimeout:void 0,yr="function"==typeof clearTimeout?clearTimeout:void 0;function vr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Or(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Pr=Math.random().toString(36).slice(2),gr="__reactInternalInstance$"+Pr,Dr="__reactEventHandlers$"+Pr,Mr="__reactContainere$"+Pr;function Cr(e){var t=e[gr];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Mr]||r[gr]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=Or(e);null!==e;){if(r=e[gr])return r;e=Or(e)}return t}r=(e=r).parentNode}return null}function Tr(e){return!(e=e[gr]||e[Mr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Rr(e){return e[Dr]||null}function Ar(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t){var r=e.stateNode;if(!r)return null;var n=d(r);if(!n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(i(231,t,typeof r));return r}function Ir(e,t,r){(t=Lr(e,r.dispatchConfig.phasedRegistrationNames[t]))&&(r._dispatchListeners=nt(r._dispatchListeners,t),r._dispatchInstances=nt(r._dispatchInstances,e))}function kr(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,r=[];t;)r.push(t),t=Ar(t);for(t=r.length;0<t--;)Ir(r[t],"captured",e);for(t=0;t<r.length;t++)Ir(r[t],"bubbled",e)}}function Br(e,t,r){e&&r&&r.dispatchConfig.registrationName&&(t=Lr(e,r.dispatchConfig.registrationName))&&(r._dispatchListeners=nt(r._dispatchListeners,t),r._dispatchInstances=nt(r._dispatchInstances,e))}function Ur(e){e&&e.dispatchConfig.registrationName&&Br(e._targetInst,null,e)}function xr(e){ot(e,kr)}var Sr=null,Wr=null,Kr=null;function Nr(){if(Kr)return Kr;var e,t,r=Wr,n=r.length,o="value"in Sr?Sr.value:Sr.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return Kr=o.slice(e,1<t?1-t:void 0)}function zr(){return!0}function jr(){return!1}function qr(e,t,r,n){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=r,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(r):"target"===o?this.target=n:this[o]=r[o]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?zr:jr,this.isPropagationStopped=jr,this}function Fr(e,t,r,n){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,r,n),o}return new this(e,t,r,n)}function Vr(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gr(e){e.eventPool=[],e.getPooled=Fr,e.release=Vr}o(qr.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=zr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=zr)},persist:function(){this.isPersistent=zr},isPersistent:jr,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=jr,this._dispatchInstances=this._dispatchListeners=null}}),qr.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},qr.extend=function(e){function t(){}function r(){return n.apply(this,arguments)}var n=this;t.prototype=n.prototype;var a=new t;return o(a,r.prototype),r.prototype=a,r.prototype.constructor=r,r.Interface=o({},n.Interface,e),r.extend=n.extend,Gr(r),r},Gr(qr);var Hr=qr.extend({data:null}),$r=qr.extend({data:null}),Yr=[9,13,27,32],Qr=T&&"CompositionEvent"in window,Xr=null;T&&"documentMode"in document&&(Xr=document.documentMode);var Jr=T&&"TextEvent"in window&&!Xr,Zr=T&&(!Qr||Xr&&8<Xr&&11>=Xr),en=String.fromCharCode(32),tn={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rn=!1;function nn(e,t){switch(e){case"keyup":return-1!==Yr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function on(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var an=!1;var ln={eventTypes:tn,extractEvents:function(e,t,r,n){var o;if(Qr)e:{switch(e){case"compositionstart":var a=tn.compositionStart;break e;case"compositionend":a=tn.compositionEnd;break e;case"compositionupdate":a=tn.compositionUpdate;break e}a=void 0}else an?nn(e,r)&&(a=tn.compositionEnd):"keydown"===e&&229===r.keyCode&&(a=tn.compositionStart);return a?(Zr&&"ko"!==r.locale&&(an||a!==tn.compositionStart?a===tn.compositionEnd&&an&&(o=Nr()):(Wr="value"in(Sr=n)?Sr.value:Sr.textContent,an=!0)),a=Hr.getPooled(a,t,r,n),o?a.data=o:null!==(o=on(r))&&(a.data=o),xr(a),o=a):o=null,(e=Jr?function(e,t){switch(e){case"compositionend":return on(t);case"keypress":return 32!==t.which?null:(rn=!0,en);case"textInput":return(e=t.data)===en&&rn?null:e;default:return null}}(e,r):function(e,t){if(an)return"compositionend"===e||!Qr&&nn(e,t)?(e=Nr(),Kr=Wr=Sr=null,an=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Zr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))?((t=$r.getPooled(tn.beforeInput,t,r,n)).data=e,xr(t)):t=null,null===o?t:null===t?o:[o,t]}},un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function _n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!un[e.type]:"textarea"===t}var sn={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function cn(e,t,r){return(e=qr.getPooled(sn.change,e,t,r)).type="change",I(r),xr(e),e}var fn=null,pn=null;function dn(e){lt(e)}function En(e){if(Oe(wr(e)))return e}function hn(e,t){if("change"===e)return t}var bn=!1;function mn(){fn&&(fn.detachEvent("onpropertychange",yn),pn=fn=null)}function yn(e){if("value"===e.propertyName&&En(pn))if(e=cn(pn,e,ut(e)),W)lt(e);else{W=!0;try{B(dn,e)}finally{W=!1,N()}}}function vn(e,t,r){"focus"===e?(mn(),pn=r,(fn=t).attachEvent("onpropertychange",yn)):"blur"===e&&mn()}function On(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return En(pn)}function Pn(e,t){if("click"===e)return En(t)}function gn(e,t){if("input"===e||"change"===e)return En(t)}T&&(bn=_t("input")&&(!document.documentMode||9<document.documentMode));var Dn={eventTypes:sn,_isInputEventSupported:bn,extractEvents:function(e,t,r,n){var o=t?wr(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=hn;else if(_n(o))if(bn)i=gn;else{i=On;var l=vn}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Pn);if(i&&(i=i(e,t)))return cn(i,r,n);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Te(o,"number",o.value)}},Mn=qr.extend({view:null,detail:null}),Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Tn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function wn(){return Tn}var Rn=0,An=0,Ln=!1,In=!1,kn=Mn.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:wn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Rn;return Rn=e.screenX,Ln?"mousemove"===e.type?e.screenX-t:0:(Ln=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=An;return An=e.screenY,In?"mousemove"===e.type?e.screenY-t:0:(In=!0,0)}}),Bn=kn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Un={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},xn={eventTypes:Un,extractEvents:function(e,t,r,n,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(r.relatedTarget||r.fromElement)||!i&&!a)return null;(a=n.window===n?n:(a=n.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=r.relatedTarget||r.toElement)?Cr(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=kn,u=Un.mouseLeave,_=Un.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Bn,u=Un.pointerLeave,_=Un.pointerEnter,s="pointer");if(e=null==i?a:wr(i),a=null==t?a:wr(t),(u=l.getPooled(u,i,r,n)).type=s+"leave",u.target=e,u.relatedTarget=a,(r=l.getPooled(_,t,r,n)).type=s+"enter",r.target=a,r.relatedTarget=e,s=t,(n=i)&&s)e:{for(_=s,i=0,e=l=n;e;e=Ar(e))i++;for(e=0,t=_;t;t=Ar(t))e++;for(;0<i-e;)l=Ar(l),i--;for(;0<e-i;)_=Ar(_),e--;for(;i--;){if(l===_||l===_.alternate)break e;l=Ar(l),_=Ar(_)}l=null}else l=null;for(_=l,l=[];n&&n!==_&&(null===(i=n.alternate)||i!==_);)l.push(n),n=Ar(n);for(n=[];s&&s!==_&&(null===(i=s.alternate)||i!==_);)n.push(s),s=Ar(s);for(s=0;s<l.length;s++)Br(l[s],"bubbled",u);for(s=n.length;0<s--;)Br(n[s],"captured",r);return 0==(64&o)?[u]:[u,r]}};var Sn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Wn=Object.prototype.hasOwnProperty;function Kn(e,t){if(Sn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!Wn.call(t,r[n])||!Sn(e[r[n]],t[r[n]]))return!1;return!0}var Nn=T&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},jn=null,qn=null,Fn=null,Vn=!1;function Gn(e,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vn||null==jn||jn!==_r(r)?null:("selectionStart"in(r=jn)&&pr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Fn&&Kn(Fn,r)?null:(Fn=r,(e=qr.getPooled(zn.select,qn,e,t)).type="select",e.target=jn,xr(e),e))}var Hn={eventTypes:zn,extractEvents:function(e,t,r,n,o,a){if(!(a=!(o=a||(n.window===n?n.document:9===n.nodeType?n:n.ownerDocument)))){e:{o=Je(o),a=M.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?wr(t):window,e){case"focus":(_n(o)||"true"===o.contentEditable)&&(jn=o,qn=t,Fn=null);break;case"blur":Fn=qn=jn=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Gn(r,n);case"selectionchange":if(Nn)break;case"keydown":case"keyup":return Gn(r,n)}return null}},$n=qr.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yn=qr.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Qn=Mn.extend({relatedTarget:null});function Xn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Mn.extend({key:function(e){if(e.key){var t=Jn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:wn,charCode:function(e){return"keypress"===e.type?Xn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=kn.extend({dataTransfer:null}),ro=Mn.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:wn}),no=qr.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=kn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ao={eventTypes:St,extractEvents:function(e,t,r,n){var o=Wt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Xn(r))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Qn;break;case"click":if(2===r.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=kn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ro;break;case Ge:case He:case $e:e=$n;break;case Ye:e=no;break;case"scroll":e=Mn;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Bn;break;default:e=qr}return xr(t=e.getPooled(o,t,r,n)),t}};if(m)throw Error(i(101));m=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),v(),d=Rr,E=Tr,h=wr,C({SimpleEventPlugin:ao,EnterLeaveEventPlugin:xn,ChangeEventPlugin:Dn,SelectEventPlugin:Hn,BeforeInputEventPlugin:ln});var io=[],lo=-1;function uo(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function _o(e,t){lo++,io[lo]=e.current,e.current=t}var so={},co={current:so},fo={current:!1},po=so;function Eo(e,t){var r=e.type.contextTypes;if(!r)return so;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=(e=e.childContextTypes)}function bo(){uo(fo),uo(co)}function mo(e,t,r){if(co.current!==so)throw Error(i(168));_o(co,t),_o(fo,r)}function yo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,he(t)||"Unknown",a));return o({},r,{},n)}function vo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,po=co.current,_o(co,e),_o(fo,fo.current),!0}function Oo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=yo(e,t,po),n.__reactInternalMemoizedMergedChildContext=e,uo(fo),uo(co),_o(co,e)):uo(fo),_o(fo,r)}var Po=a.unstable_runWithPriority,go=a.unstable_scheduleCallback,Do=a.unstable_cancelCallback,Mo=a.unstable_requestPaint,Co=a.unstable_now,To=a.unstable_getCurrentPriorityLevel,wo=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,Ao=a.unstable_NormalPriority,Lo=a.unstable_LowPriority,Io=a.unstable_IdlePriority,ko={},Bo=a.unstable_shouldYield,Uo=void 0!==Mo?Mo:function(){},xo=null,So=null,Wo=!1,Ko=Co(),No=1e4>Ko?Co:function(){return Co()-Ko};function zo(){switch(To()){case wo:return 99;case Ro:return 98;case Ao:return 97;case Lo:return 96;case Io:return 95;default:throw Error(i(332))}}function jo(e){switch(e){case 99:return wo;case 98:return Ro;case 97:return Ao;case 96:return Lo;case 95:return Io;default:throw Error(i(332))}}function qo(e,t){return e=jo(e),Po(e,t)}function Fo(e,t,r){return e=jo(e),go(e,t,r)}function Vo(e){return null===xo?(xo=[e],So=go(wo,Ho)):xo.push(e),ko}function Go(){if(null!==So){var e=So;So=null,Do(e)}Ho()}function Ho(){if(!Wo&&null!==xo){Wo=!0;var e=0;try{var t=xo;qo(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),xo=null}catch(t){throw null!==xo&&(xo=xo.slice(e+1)),go(wo,Go),t}finally{Wo=!1}}}function $o(e,t,r){return 1073741821-(1+((1073741821-e+t/10)/(r/=10)|0))*r}function Yo(e,t){if(e&&e.defaultProps)for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}var Qo={current:null},Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Qo.current;uo(Qo),e.type._context._currentValue=t}function ra(e,t){for(;null!==e;){var r=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==r&&r.childExpirationTime<t&&(r.childExpirationTime=t);else{if(!(null!==r&&r.childExpirationTime<t))break;r.childExpirationTime=t}e=e.return}}function na(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ai=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ua(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function _a(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function sa(e,t){var r=e.alternate;null!==r&&la(r,e),null===(r=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=r.next,r.next=t)}function ca(e,t,r,n){var a=e.updateQueue;aa=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var u=i.next;i.next=l.next,l.next=u}i=l,a.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==i){u=i.next;var _=a.baseState,s=0,c=null,f=null,p=null;if(null!==u)for(var d=u;;){if((l=d.expirationTime)<n){var E={expirationTime:d.expirationTime,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null};null===p?(f=p=E,c=_):p=p.next=E,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null}),au(l,d.suspenseConfig);e:{var h=e,b=d;switch(l=t,E=r,b.tag){case 1:if("function"==typeof(h=b.payload)){_=h.call(E,_,l);break e}_=h;break e;case 3:h.effectTag=-4097&h.effectTag|64;case 0:if(null==(l="function"==typeof(h=b.payload)?h.call(E,_,l):h))break e;_=o({},_,l);break e;case 2:aa=!0}}null!==d.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[d]:l.push(d))}if(null===(d=d.next)||d===u){if(null===(l=a.shared.pending))break;d=i.next=l.next,l.next=u,a.baseQueue=i=l,a.shared.pending=null}}null===p?c=_:p.next=f,a.baseState=c,a.baseQueue=p,iu(s),e.expirationTime=s,e.memoizedState=_}}function fa(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=o,o=r,"function"!=typeof n)throw Error(i(191,n));n.call(o)}}}var pa=Q.ReactCurrentBatchConfig,da=(new n.Component).refs;function Ea(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:o({},t,r),e.memoizedState=r,0===e.expirationTime&&(e.updateQueue.baseState=r)}var ha={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternalFiber;var n=Gl(),o=pa.suspense;(o=ua(n=Hl(n,e,o),o)).payload=t,null!=r&&(o.callback=r),_a(e,o),$l(e,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternalFiber;var n=Gl(),o=pa.suspense;(o=ua(n=Hl(n,e,o),o)).tag=1,o.payload=t,null!=r&&(o.callback=r),_a(e,o),$l(e,n)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var r=Gl(),n=pa.suspense;(n=ua(r=Hl(r,e,n),n)).tag=2,null!=t&&(n.callback=t),_a(e,n),$l(e,r)}};function ba(e,t,r,n,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Kn(r,n)||!Kn(o,a))}function ma(e,t,r){var n=!1,o=so,a=t.contextType;return"object"==typeof a&&null!==a?a=oa(a):(o=ho(t)?po:co.current,a=(n=null!=(n=t.contextTypes))?Eo(e,o):so),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternalFiber=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function va(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=da,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=oa(a):(a=ho(t)?po:co.current,o.context=Eo(e,a)),ca(e,r,o,n),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ea(e,t,a,r),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ha.enqueueReplaceState(o,o.state,null),ca(e,r,o,n),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Oa=Array.isArray;function Pa(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=n.refs;t===da&&(t=n.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function ga(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Da(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.effectTag=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.effectTag=2,r):n:(t.effectTag=2,r):r}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Ru(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function _(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=Pa(e,t,r),n.return=e,n):((n=Tu(r.type,r.key,r.props,null,e.mode,n)).ref=Pa(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Au(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function c(e,t,r,n,a){return null===t||7!==t.tag?((t=wu(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function f(e,t,r){if("string"==typeof t||"number"==typeof t)return(t=Ru(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(r=Tu(t.type,t.key,t.props,null,e.mode,r)).ref=Pa(e,null,t),r.return=e,r;case te:return(t=Au(t,e.mode,r)).return=e,t}if(Oa(t)||Ee(t))return(t=wu(t,e.mode,r,null)).return=e,t;ga(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==o?null:u(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return r.key===o?r.type===re?c(e,t,r.props.children,n,o):_(e,t,r,n):null;case te:return r.key===o?s(e,t,r,n):null}if(Oa(r)||Ee(r))return null!==o?null:c(e,t,r,n,null);ga(e,r)}return null}function d(e,t,r,n,o){if("string"==typeof n||"number"==typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return e=e.get(null===n.key?r:n.key)||null,n.type===re?c(t,e,n.props.children,o,n.key):_(t,e,n,o);case te:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(Oa(n)||Ee(n))return c(t,e=e.get(r)||null,n,o,null);ga(t,n)}return null}function E(o,i,l,u){for(var _=null,s=null,c=i,E=i=0,h=null;null!==c&&E<l.length;E++){c.index>E?(h=c,c=null):h=c.sibling;var b=p(o,c,l[E],u);if(null===b){null===c&&(c=h);break}e&&c&&null===b.alternate&&t(o,c),i=a(b,i,E),null===s?_=b:s.sibling=b,s=b,c=h}if(E===l.length)return r(o,c),_;if(null===c){for(;E<l.length;E++)null!==(c=f(o,l[E],u))&&(i=a(c,i,E),null===s?_=c:s.sibling=c,s=c);return _}for(c=n(o,c);E<l.length;E++)null!==(h=d(c,o,E,l[E],u))&&(e&&null!==h.alternate&&c.delete(null===h.key?E:h.key),i=a(h,i,E),null===s?_=h:s.sibling=h,s=h);return e&&c.forEach((function(e){return t(o,e)})),_}function h(o,l,u,_){var s=Ee(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var c=s=null,E=l,h=l=0,b=null,m=u.next();null!==E&&!m.done;h++,m=u.next()){E.index>h?(b=E,E=null):b=E.sibling;var y=p(o,E,m.value,_);if(null===y){null===E&&(E=b);break}e&&E&&null===y.alternate&&t(o,E),l=a(y,l,h),null===c?s=y:c.sibling=y,c=y,E=b}if(m.done)return r(o,E),s;if(null===E){for(;!m.done;h++,m=u.next())null!==(m=f(o,m.value,_))&&(l=a(m,l,h),null===c?s=m:c.sibling=m,c=m);return s}for(E=n(o,E);!m.done;h++,m=u.next())null!==(m=d(E,o,h,m.value,_))&&(e&&null!==m.alternate&&E.delete(null===m.key?h:m.key),l=a(m,l,h),null===c?s=m:c.sibling=m,c=m);return e&&E.forEach((function(e){return t(o,e)})),s}return function(e,n,a,u){var _="object"==typeof a&&null!==a&&a.type===re&&null===a.key;_&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ee:e:{for(s=a.key,_=n;null!==_;){if(_.key===s){switch(_.tag){case 7:if(a.type===re){r(e,_.sibling),(n=o(_,a.props.children)).return=e,e=n;break e}break;default:if(_.elementType===a.type){r(e,_.sibling),(n=o(_,a.props)).ref=Pa(e,_,a),n.return=e,e=n;break e}}r(e,_);break}t(e,_),_=_.sibling}a.type===re?((n=wu(a.props.children,e.mode,u,a.key)).return=e,e=n):((u=Tu(a.type,a.key,a.props,null,e.mode,u)).ref=Pa(e,n,a),u.return=e,e=u)}return l(e);case te:e:{for(_=a.key;null!==n;){if(n.key===_){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Au(a,e.mode,u)).return=e,e=n}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Ru(a,e.mode,u)).return=e,e=n),l(e);if(Oa(a))return E(e,n,a,u);if(Ee(a))return h(e,n,a,u);if(s&&ga(e,a),void 0===a&&!_)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return r(e,n)}}var Ma=Da(!0),Ca=Da(!1),Ta={},wa={current:Ta},Ra={current:Ta},Aa={current:Ta};function La(e){if(e===Ta)throw Error(i(174));return e}function Ia(e,t){switch(_o(Aa,t),_o(Ra,e),_o(wa,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Se(null,"");break;default:t=Se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(wa),_o(wa,t)}function ka(){uo(wa),uo(Ra),uo(Aa)}function Ba(e){La(Aa.current);var t=La(wa.current),r=Se(t,e.type);t!==r&&(_o(Ra,e),_o(wa,r))}function Ua(e){Ra.current===e&&(uo(wa),uo(Ra))}var xa={current:0};function Sa(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Wa(e,t){return{responder:e,props:t}}var Ka=Q.ReactCurrentDispatcher,Na=Q.ReactCurrentBatchConfig,za=0,ja=null,qa=null,Fa=null,Va=!1;function Ga(){throw Error(i(321))}function Ha(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!Sn(e[r],t[r]))return!1;return!0}function $a(e,t,r,n,o,a){if(za=a,ja=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Ka.current=null===e||null===e.memoizedState?bi:mi,e=r(n,o),t.expirationTime===za){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,Fa=qa=null,t.updateQueue=null,Ka.current=yi,e=r(n,o)}while(t.expirationTime===za)}if(Ka.current=hi,t=null!==qa&&null!==qa.next,za=0,Fa=qa=ja=null,Va=!1,t)throw Error(i(300));return e}function Ya(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Fa?ja.memoizedState=Fa=e:Fa=Fa.next=e,Fa}function Qa(){if(null===qa){var e=ja.alternate;e=null!==e?e.memoizedState:null}else e=qa.next;var t=null===Fa?ja.memoizedState:Fa.next;if(null!==t)Fa=t,qa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(qa=e).memoizedState,baseState:qa.baseState,baseQueue:qa.baseQueue,queue:qa.queue,next:null},null===Fa?ja.memoizedState=Fa=e:Fa=Fa.next=e}return Fa}function Xa(e,t){return"function"==typeof t?t(e):t}function Ja(e){var t=Qa(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=qa,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var u=l=a=null,_=o;do{var s=_.expirationTime;if(s<za){var c={expirationTime:_.expirationTime,suspenseConfig:_.suspenseConfig,action:_.action,eagerReducer:_.eagerReducer,eagerState:_.eagerState,next:null};null===u?(l=u=c,a=n):u=u.next=c,s>ja.expirationTime&&(ja.expirationTime=s,iu(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:_.suspenseConfig,action:_.action,eagerReducer:_.eagerReducer,eagerState:_.eagerState,next:null}),au(s,_.suspenseConfig),n=_.eagerReducer===e?_.eagerState:e(n,_.action);_=_.next}while(null!==_&&_!==o);null===u?a=n:u.next=l,Sn(n,t.memoizedState)||(Ai=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function Za(e){var t=Qa(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Sn(a,t.memoizedState)||(Ai=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function ei(e){var t=Ya();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xa,lastRenderedState:e}).dispatch=Ei.bind(null,ja,e),[t.memoizedState,e]}function ti(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=ja.updateQueue)?(t={lastEffect:null},ja.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function ri(){return Qa().memoizedState}function ni(e,t,r,n){var o=Ya();ja.effectTag|=e,o.memoizedState=ti(1|t,r,void 0,void 0===n?null:n)}function oi(e,t,r,n){var o=Qa();n=void 0===n?null:n;var a=void 0;if(null!==qa){var i=qa.memoizedState;if(a=i.destroy,null!==n&&Ha(n,i.deps))return void ti(t,r,a,n)}ja.effectTag|=e,o.memoizedState=ti(1|t,r,a,n)}function ai(e,t){return ni(516,4,e,t)}function ii(e,t){return oi(516,4,e,t)}function li(e,t){return oi(4,2,e,t)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(e,t,r){return r=null!=r?r.concat([e]):null,oi(4,2,ui.bind(null,t,e),r)}function si(){}function ci(e,t){return Ya().memoizedState=[e,void 0===t?null:t],e}function fi(e,t){var r=Qa();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ha(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function pi(e,t){var r=Qa();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ha(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function di(e,t,r){var n=zo();qo(98>n?98:n,(function(){e(!0)})),qo(97<n?97:n,(function(){var n=Na.suspense;Na.suspense=void 0===t?null:t;try{e(!1),r()}finally{Na.suspense=n}}))}function Ei(e,t,r){var n=Gl(),o=pa.suspense;o={expirationTime:n=Hl(n,e,o),suspenseConfig:o,action:r,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===ja||null!==a&&a===ja)Va=!0,o.expirationTime=za,ja.expirationTime=za;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,r);if(o.eagerReducer=a,o.eagerState=l,Sn(l,i))return}catch(e){}$l(e,n)}}var hi={readContext:oa,useCallback:Ga,useContext:Ga,useEffect:Ga,useImperativeHandle:Ga,useLayoutEffect:Ga,useMemo:Ga,useReducer:Ga,useRef:Ga,useState:Ga,useDebugValue:Ga,useResponder:Ga,useDeferredValue:Ga,useTransition:Ga},bi={readContext:oa,useCallback:ci,useContext:oa,useEffect:ai,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,ni(4,2,ui.bind(null,t,e),r)},useLayoutEffect:function(e,t){return ni(4,2,e,t)},useMemo:function(e,t){var r=Ya();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Ya();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ei.bind(null,ja,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Ya().memoizedState=e},useState:ei,useDebugValue:si,useResponder:Wa,useDeferredValue:function(e,t){var r=ei(e),n=r[0],o=r[1];return ai((function(){var r=Na.suspense;Na.suspense=void 0===t?null:t;try{o(e)}finally{Na.suspense=r}}),[e,t]),n},useTransition:function(e){var t=ei(!1),r=t[0];return t=t[1],[ci(di.bind(null,t,e),[t,e]),r]}},mi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:_i,useLayoutEffect:li,useMemo:pi,useReducer:Ja,useRef:ri,useState:function(){return Ja(Xa)},useDebugValue:si,useResponder:Wa,useDeferredValue:function(e,t){var r=Ja(Xa),n=r[0],o=r[1];return ii((function(){var r=Na.suspense;Na.suspense=void 0===t?null:t;try{o(e)}finally{Na.suspense=r}}),[e,t]),n},useTransition:function(e){var t=Ja(Xa),r=t[0];return t=t[1],[fi(di.bind(null,t,e),[t,e]),r]}},yi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:_i,useLayoutEffect:li,useMemo:pi,useReducer:Za,useRef:ri,useState:function(){return Za(Xa)},useDebugValue:si,useResponder:Wa,useDeferredValue:function(e,t){var r=Za(Xa),n=r[0],o=r[1];return ii((function(){var r=Na.suspense;Na.suspense=void 0===t?null:t;try{o(e)}finally{Na.suspense=r}}),[e,t]),n},useTransition:function(e){var t=Za(Xa),r=t[0];return t=t[1],[fi(di.bind(null,t,e),[t,e]),r]}},vi=null,Oi=null,Pi=!1;function gi(e,t){var r=Du(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Di(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Mi(e){if(Pi){var t=Oi;if(t){var r=t;if(!Di(e,t)){if(!(t=vr(r.nextSibling))||!Di(e,t))return e.effectTag=-1025&e.effectTag|2,Pi=!1,void(vi=e);gi(vi,r)}vi=e,Oi=vr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Pi=!1,vi=e}}function Ci(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;vi=e}function Ti(e){if(e!==vi)return!1;if(!Pi)return Ci(e),Pi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=Oi;t;)gi(e,t),t=vr(t.nextSibling);if(Ci(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){Oi=vr(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}Oi=null}}else Oi=vi?vr(e.stateNode.nextSibling):null;return!0}function wi(){Oi=vi=null,Pi=!1}var Ri=Q.ReactCurrentOwner,Ai=!1;function Li(e,t,r,n){t.child=null===e?Ca(t,null,r,n):Ma(t,e.child,r,n)}function Ii(e,t,r,n,o){r=r.render;var a=t.ref;return na(t,o),n=$a(e,t,r,n,a,o),null===e||Ai?(t.effectTag|=1,Li(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),$i(e,t,o))}function ki(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!=typeof i||Mu(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Tu(r.type,null,n,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Bi(e,t,i,n,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:Kn)(o,n)&&e.ref===t.ref)?$i(e,t,a):(t.effectTag|=1,(e=Cu(i,n)).ref=t.ref,e.return=t,t.child=e)}function Bi(e,t,r,n,o,a){return null!==e&&Kn(e.memoizedProps,n)&&e.ref===t.ref&&(Ai=!1,o<a)?(t.expirationTime=e.expirationTime,$i(e,t,a)):xi(e,t,r,n,a)}function Ui(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.effectTag|=128)}function xi(e,t,r,n,o){var a=ho(r)?po:co.current;return a=Eo(t,a),na(t,o),r=$a(e,t,r,n,a,o),null===e||Ai?(t.effectTag|=1,Li(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),$i(e,t,o))}function Si(e,t,r,n,o){if(ho(r)){var a=!0;vo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ma(t,r,n),va(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,_=r.contextType;"object"==typeof _&&null!==_?_=oa(_):_=Eo(t,_=ho(r)?po:co.current);var s=r.getDerivedStateFromProps,c="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==n||u!==_)&&ya(t,i,n,_),aa=!1;var f=t.memoizedState;i.state=f,ca(t,n,i,o),u=t.memoizedState,l!==n||f!==u||fo.current||aa?("function"==typeof s&&(Ea(t,r,s,n),u=t.memoizedState),(l=aa||ba(t,r,l,n,f,u,_))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=_,n=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),n=!1)}else i=t.stateNode,la(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Yo(t.type,l),u=i.context,"object"==typeof(_=r.contextType)&&null!==_?_=oa(_):_=Eo(t,_=ho(r)?po:co.current),(c="function"==typeof(s=r.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==n||u!==_)&&ya(t,i,n,_),aa=!1,u=t.memoizedState,i.state=u,ca(t,n,i,o),f=t.memoizedState,l!==n||u!==f||fo.current||aa?("function"==typeof s&&(Ea(t,r,s,n),f=t.memoizedState),(s=aa||ba(t,r,l,n,u,f,_))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,f,_),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,f,_)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=n,t.memoizedState=f),i.props=n,i.state=f,i.context=_,n=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),n=!1);return Wi(e,t,r,n,a,o)}function Wi(e,t,r,n,o,a){Ui(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return o&&Oo(t,r,!1),$i(e,t,a);n=t.stateNode,Ri.current=t;var l=i&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.effectTag|=1,null!==e&&i?(t.child=Ma(t,e.child,null,a),t.child=Ma(t,null,l,a)):Li(e,t,l,a),t.memoizedState=n.state,o&&Oo(t,r,!0),t.child}function Ki(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ia(e,t.containerInfo)}var Ni,zi,ji,qi={dehydrated:null,retryTime:0};function Fi(e,t,r){var n,o=t.mode,a=t.pendingProps,i=xa.current,l=!1;if((n=0!=(64&t.effectTag))||(n=0!=(2&i)&&(null===e||null!==e.memoizedState)),n?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),_o(xa,1&i),null===e){if(void 0!==a.fallback&&Mi(t),l){if(l=a.fallback,(a=wu(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(r=wu(l,o,r,null)).return=t,a.sibling=r,t.memoizedState=qi,t.child=a,r}return o=a.children,t.memoizedState=null,t.child=Ca(t,null,o,r)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(r=Cu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(r.child=l;null!==l;)l.return=r,l=l.sibling;return(o=Cu(o,a)).return=t,r.sibling=o,r.childExpirationTime=0,t.memoizedState=qi,t.child=r,o}return r=Ma(t,e.child,a.children,r),t.memoizedState=null,t.child=r}if(e=e.child,l){if(l=a.fallback,(a=wu(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(r=wu(l,o,r,null)).return=t,a.sibling=r,r.effectTag|=2,a.childExpirationTime=0,t.memoizedState=qi,t.child=a,r}return t.memoizedState=null,t.child=Ma(t,e,a.children,r)}function Vi(e,t){e.expirationTime<t&&(e.expirationTime=t);var r=e.alternate;null!==r&&r.expirationTime<t&&(r.expirationTime=t),ra(e.return,t)}function Gi(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Hi(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(Li(e,t,n.children,r),0!=(2&(n=xa.current)))n=1&n|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vi(e,r);else if(19===e.tag)Vi(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(_o(xa,n),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Sa(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Gi(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Sa(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Gi(t,!0,r,null,a,t.lastEffect);break;case"together":Gi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function $i(e,t,r){null!==e&&(t.dependencies=e.dependencies);var n=t.expirationTime;if(0!==n&&iu(n),t.childExpirationTime<r)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Cu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Cu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function Yi(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Qi(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&bo(),null;case 3:return ka(),uo(fo),uo(co),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||!Ti(t)||(t.effectTag|=4),null;case 5:Ua(t),r=La(Aa.current);var a=t.type;if(null!==e&&null!=t.stateNode)zi(e,t,a,n,r),e.ref!==t.ref&&(t.effectTag|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=La(wa.current),Ti(t)){n=t.stateNode,a=t.type;var l=t.memoizedProps;switch(n[gr]=t,n[Dr]=l,a){case"iframe":case"object":case"embed":Ht("load",n);break;case"video":case"audio":for(e=0;e<Qe.length;e++)Ht(Qe[e],n);break;case"source":Ht("error",n);break;case"img":case"image":case"link":Ht("error",n),Ht("load",n);break;case"form":Ht("reset",n),Ht("submit",n);break;case"details":Ht("toggle",n);break;case"input":ge(n,l),Ht("invalid",n),lr(r,"onChange");break;case"select":n._wrapperState={wasMultiple:!!l.multiple},Ht("invalid",n),lr(r,"onChange");break;case"textarea":Le(n,l),Ht("invalid",n),lr(r,"onChange")}for(var u in or(a,l),e=null,l)if(l.hasOwnProperty(u)){var _=l[u];"children"===u?"string"==typeof _?n.textContent!==_&&(e=["children",_]):"number"==typeof _&&n.textContent!==""+_&&(e=["children",""+_]):D.hasOwnProperty(u)&&null!=_&&lr(r,u)}switch(a){case"input":ve(n),Ce(n,l,!0);break;case"textarea":ve(n),ke(n);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(n.onclick=ur)}r=e,t.updateQueue=r,null!==r&&(t.effectTag|=4)}else{switch(u=9===r.nodeType?r:r.ownerDocument,e===ir&&(e=xe(a)),e===ir?"script"===a?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=u.createElement(a,{is:n.is}):(e=u.createElement(a),"select"===a&&(u=e,n.multiple?u.multiple=!0:n.size&&(u.size=n.size))):e=u.createElementNS(e,a),e[gr]=t,e[Dr]=n,Ni(e,t),t.stateNode=e,u=ar(a,n),a){case"iframe":case"object":case"embed":Ht("load",e),_=n;break;case"video":case"audio":for(_=0;_<Qe.length;_++)Ht(Qe[_],e);_=n;break;case"source":Ht("error",e),_=n;break;case"img":case"image":case"link":Ht("error",e),Ht("load",e),_=n;break;case"form":Ht("reset",e),Ht("submit",e),_=n;break;case"details":Ht("toggle",e),_=n;break;case"input":ge(e,n),_=Pe(e,n),Ht("invalid",e),lr(r,"onChange");break;case"option":_=we(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},_=o({},n,{value:void 0}),Ht("invalid",e),lr(r,"onChange");break;case"textarea":Le(e,n),_=Ae(e,n),Ht("invalid",e),lr(r,"onChange");break;default:_=n}or(a,_);var s=_;for(l in s)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?rr(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Ke(e,c):"children"===l?"string"==typeof c?("textarea"!==a||""!==c)&&Ne(e,c):"number"==typeof c&&Ne(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(D.hasOwnProperty(l)?null!=c&&lr(r,l):null!=c&&X(e,l,c,u))}switch(a){case"input":ve(e),Ce(e,n,!1);break;case"textarea":ve(e),ke(e);break;case"option":null!=n.value&&e.setAttribute("value",""+me(n.value));break;case"select":e.multiple=!!n.multiple,null!=(r=n.value)?Re(e,!!n.multiple,r,!1):null!=n.defaultValue&&Re(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof _.onClick&&(e.onclick=ur)}hr(a,n)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)ji(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(i(166));r=La(Aa.current),La(wa.current),Ti(t)?(r=t.stateNode,n=t.memoizedProps,r[gr]=t,r.nodeValue!==n&&(t.effectTag|=4)):((r=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[gr]=t,t.stateNode=r)}return null;case 13:return uo(xa),n=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=r,t):(r=null!==n,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ti(t):(n=null!==(a=e.memoizedState),r||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&xa.current)?Tl===vl&&(Tl=Ol):(Tl!==vl&&Tl!==Ol||(Tl=Pl),0!==Il&&null!==Dl&&(ku(Dl,Cl),Bu(Dl,Il)))),(r||n)&&(t.effectTag|=4),null);case 4:return ka(),null;case 10:return ta(t),null;case 17:return ho(t.type)&&bo(),null;case 19:if(uo(xa),null===(n=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=n.rendering)){if(a)Yi(n,!1);else if(Tl!==vl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Sa(l))){for(t.effectTag|=64,Yi(n,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=t.child;null!==n;)l=r,(a=n).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),n=n.sibling;return _o(xa,1&xa.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=Sa(l))){if(t.effectTag|=64,a=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),Yi(n,!0),null===n.tail&&"hidden"===n.tailMode&&!l.alternate)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*No()-n.renderingStartTime>n.tailExpiration&&1<r&&(t.effectTag|=64,a=!0,Yi(n,!1),t.expirationTime=t.childExpirationTime=r-1);n.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=n.last)?r.sibling=l:t.child=l,n.last=l)}return null!==n.tail?(0===n.tailExpiration&&(n.tailExpiration=No()+500),r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=No(),r.sibling=null,t=xa.current,_o(xa,a?1&t|2:1&t),r):null}throw Error(i(156,t.tag))}function Xi(e){switch(e.tag){case 1:ho(e.type)&&bo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(ka(),uo(fo),uo(co),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ua(e),null;case 13:return uo(xa),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(xa),null;case 4:return ka(),null;case 10:return ta(e),null;default:return null}}function Ji(e,t){return{value:e,source:t,stack:be(t)}}Ni=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},zi=function(e,t,r,n,a){var i=e.memoizedProps;if(i!==n){var l,u,_=t.stateNode;switch(La(wa.current),e=null,r){case"input":i=Pe(_,i),n=Pe(_,n),e=[];break;case"option":i=we(_,i),n=we(_,n),e=[];break;case"select":i=o({},i,{value:void 0}),n=o({},n,{value:void 0}),e=[];break;case"textarea":i=Ae(_,i),n=Ae(_,n),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof n.onClick&&(_.onclick=ur)}for(l in or(r,n),r=null,i)if(!n.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in _=i[l])_.hasOwnProperty(u)&&(r||(r={}),r[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(D.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in n){var s=n[l];if(_=null!=i?i[l]:void 0,n.hasOwnProperty(l)&&s!==_&&(null!=s||null!=_))if("style"===l)if(_){for(u in _)!_.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(r||(r={}),r[u]="");for(u in s)s.hasOwnProperty(u)&&_[u]!==s[u]&&(r||(r={}),r[u]=s[u])}else r||(e||(e=[]),e.push(l,r)),r=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,_=_?_.__html:void 0,null!=s&&_!==s&&(e=e||[]).push(l,s)):"children"===l?_===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(D.hasOwnProperty(l)?(null!=s&&lr(a,l),e||_===s||(e=[])):(e=e||[]).push(l,s))}r&&(e=e||[]).push("style",r),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},ji=function(e,t,r,n){r!==n&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var r=t.source,n=t.stack;null===n&&null!==r&&(n=be(r)),null!==r&&he(r.type),t=t.value,null!==e&&1===e.tag&&he(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){mu(e,t)}else t.current=null}function rl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Yo(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function nl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.destroy;r.destroy=void 0,void 0!==n&&n()}r=r.next}while(r!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function al(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:return void ol(3,r);case 1:if(e=r.stateNode,4&r.effectTag)if(null===t)e.componentDidMount();else{var n=r.elementType===r.type?t.memoizedProps:Yo(r.type,t.memoizedProps);e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=r.updateQueue)&&fa(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}fa(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.effectTag&&hr(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&xt(r)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,r){switch("function"==typeof Pu&&Pu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e.next;qo(97<r?97:r,(function(){var e=n;do{var r=e.destroy;if(void 0!==r){var o=t;try{r()}catch(e){mu(o,e)}}e=e.next}while(e!==n)}))}break;case 1:tl(t),"function"==typeof(r=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){mu(e,t)}}(t,r);break;case 5:tl(t);break;case 4:sl(e,t,r)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function _l(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var r=t;break e}t=t.return}throw Error(i(160))}switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.effectTag&&(Ne(t,""),r.effectTag&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||ul(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.effectTag)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.effectTag)){r=r.stateNode;break e}}n?function e(t,r,n){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,r?8===n.nodeType?n.parentNode.insertBefore(t,r):n.insertBefore(t,r):(8===n.nodeType?(r=n.parentNode).insertBefore(t,n):(r=n).appendChild(t),null!==(n=n._reactRootContainer)&&void 0!==n||null!==r.onclick||(r.onclick=ur));else if(4!==o&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,r,t):function e(t,r,n){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,r?n.insertBefore(t,r):n.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,r,t)}function sl(e,t,r){for(var n,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(n=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:n=n.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,_=a,s=r,c=_;;)if(il(u,c,s),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===_)break e;for(;null===c.sibling;){if(null===c.return||c.return===_)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}o?(u=n,_=a.stateNode,8===u.nodeType?u.parentNode.removeChild(_):u.removeChild(_)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(il(e,a,r),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function cl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void nl(3,t);case 1:return;case 5:var r=t.stateNode;if(null!=r){var n=t.memoizedProps,o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Dr]=n,"input"===e&&"radio"===n.type&&null!=n.name&&De(r,n),ar(e,o),t=ar(e,n),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?rr(r,u):"dangerouslySetInnerHTML"===l?Ke(r,u):"children"===l?Ne(r,u):X(r,l,u,t)}switch(e){case"input":Me(r,n);break;case"textarea":Ie(r,n);break;case"select":t=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(e=n.value)?Re(r,!!n.multiple,e,!1):t!==!!n.multiple&&(null!=n.defaultValue?Re(r,!!n.multiple,n.defaultValue,!0):Re(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,xt(t.containerInfo)));case 12:return;case 13:if(r=t,null===t.memoizedState?n=!1:(n=!0,r=t.child,Bl=No()),null!==r)e:for(e=r;;){if(5===e.tag)a=e.stateNode,n?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=tr("display",o));else if(6===e.tag)e.stateNode.nodeValue=n?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===r)break;for(;null===e.sibling;){if(null===e.return||e.return===r)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fl(t);case 19:return void fl(t);case 17:return}throw Error(i(163))}function fl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new Zi),t.forEach((function(t){var n=vu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,r){(r=ua(r,null)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){xl||(xl=!0,Sl=n),el(e,t)},r}function El(e,t,r){(r=ua(r,null)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var o=t.value;r.payload=function(){return el(e,t),n(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(r.callback=function(){"function"!=typeof n&&(null===Wl?Wl=new Set([this]):Wl.add(this),el(e,t));var r=t.stack;this.componentDidCatch(t.value,{componentStack:null!==r?r:""})}),r}var hl,bl=Math.ceil,ml=Q.ReactCurrentDispatcher,yl=Q.ReactCurrentOwner,vl=0,Ol=3,Pl=4,gl=0,Dl=null,Ml=null,Cl=0,Tl=vl,wl=null,Rl=1073741823,Al=1073741823,Ll=null,Il=0,kl=!1,Bl=0,Ul=null,xl=!1,Sl=null,Wl=null,Kl=!1,Nl=null,zl=90,jl=null,ql=0,Fl=null,Vl=0;function Gl(){return 0!=(48&gl)?1073741821-(No()/10|0):0!==Vl?Vl:Vl=1073741821-(No()/10|0)}function Hl(e,t,r){if(0==(2&(t=t.mode)))return 1073741823;var n=zo();if(0==(4&t))return 99===n?1073741823:1073741822;if(0!=(16&gl))return Cl;if(null!==r)e=$o(e,0|r.timeoutMs||5e3,250);else switch(n){case 99:e=1073741823;break;case 98:e=$o(e,150,100);break;case 97:case 96:e=$o(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Dl&&e===Cl&&--e,e}function $l(e,t){if(50<ql)throw ql=0,Fl=null,Error(i(185));if(null!==(e=Yl(e,t))){var r=zo();1073741823===t?0!=(8&gl)&&0==(48&gl)?Zl(e):(Xl(e),0===gl&&Go()):Xl(e),0==(4&gl)||98!==r&&99!==r||(null===jl?jl=new Map([[e,t]]):(void 0===(r=jl.get(e))||r>t)&&jl.set(e,t))}}function Yl(e,t){e.expirationTime<t&&(e.expirationTime=t);var r=e.alternate;null!==r&&r.expirationTime<t&&(r.expirationTime=t);var n=e.return,o=null;if(null===n&&3===e.tag)o=e.stateNode;else for(;null!==n;){if(r=n.alternate,n.childExpirationTime<t&&(n.childExpirationTime=t),null!==r&&r.childExpirationTime<t&&(r.childExpirationTime=t),null===n.return&&3===n.tag){o=n.stateNode;break}n=n.return}return null!==o&&(Dl===o&&(iu(t),Tl===Pl&&ku(o,Cl)),Bu(o,t)),o}function Ql(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Iu(e,t=e.firstPendingTime))return t;var r=e.lastPingedTime;return 2>=(e=r>(e=e.nextKnownPendingLevel)?r:e)&&t!==e?0:e}function Xl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vo(Zl.bind(null,e));else{var t=Ql(e),r=e.callbackNode;if(0===t)null!==r&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var n=Gl();if(1073741823===t?n=99:1===t||2===t?n=95:n=0>=(n=10*(1073741821-t)-10*(1073741821-n))?99:250>=n?98:5250>=n?97:95,null!==r){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=n)return;r!==ko&&Do(r)}e.callbackExpirationTime=t,e.callbackPriority=n,t=1073741823===t?Vo(Zl.bind(null,e)):Fo(n,Jl.bind(null,e),{timeout:10*(1073741821-t)-No()}),e.callbackNode=t}}}function Jl(e,t){if(Vl=0,t)return Uu(e,t=Gl()),Xl(e),null;var r=Ql(e);if(0!==r){if(t=e.callbackNode,0!=(48&gl))throw Error(i(327));if(Eu(),e===Dl&&r===Cl||ru(e,r),null!==Ml){var n=gl;gl|=16;for(var o=ou();;)try{uu();break}catch(t){nu(e,t)}if(ea(),gl=n,ml.current=o,1===Tl)throw t=wl,ru(e,r),ku(e,r),Xl(e),t;if(null===Ml)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=r,n=Tl,Dl=null,n){case vl:case 1:throw Error(i(345));case 2:Uu(e,2<r?2:r);break;case Ol:if(ku(e,r),r===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(o)),1073741823===Rl&&10<(o=Bl+500-No())){if(kl){var a=e.lastPingedTime;if(0===a||a>=r){e.lastPingedTime=r,ru(e,r);break}}if(0!==(a=Ql(e))&&a!==r)break;if(0!==n&&n!==r){e.lastPingedTime=n;break}e.timeoutHandle=mr(fu.bind(null,e),o);break}fu(e);break;case Pl:if(ku(e,r),r===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(o)),kl&&(0===(o=e.lastPingedTime)||o>=r)){e.lastPingedTime=r,ru(e,r);break}if(0!==(o=Ql(e))&&o!==r)break;if(0!==n&&n!==r){e.lastPingedTime=n;break}if(1073741823!==Al?n=10*(1073741821-Al)-No():1073741823===Rl?n=0:(n=10*(1073741821-Rl)-5e3,0>(n=(o=No())-n)&&(n=0),(r=10*(1073741821-r)-o)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*bl(n/1960))-n)&&(n=r)),10<n){e.timeoutHandle=mr(fu.bind(null,e),n);break}fu(e);break;case 5:if(1073741823!==Rl&&null!==Ll){a=Rl;var l=Ll;if(0>=(n=0|l.busyMinDurationMs)?n=0:(o=0|l.busyDelayMs,n=(a=No()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+n-a),10<n){ku(e,r),e.timeoutHandle=mr(fu.bind(null,e),n);break}}fu(e);break;default:throw Error(i(329))}if(Xl(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&gl))throw Error(i(327));if(Eu(),e===Dl&&t===Cl||ru(e,t),null!==Ml){var r=gl;gl|=16;for(var n=ou();;)try{lu();break}catch(t){nu(e,t)}if(ea(),gl=r,ml.current=n,1===Tl)throw r=wl,ru(e,t),ku(e,t),Xl(e),r;if(null!==Ml)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Dl=null,fu(e),Xl(e)}return null}function eu(e,t){var r=gl;gl|=1;try{return e(t)}finally{0===(gl=r)&&Go()}}function tu(e,t){var r=gl;gl&=-2,gl|=8;try{return e(t)}finally{0===(gl=r)&&Go()}}function ru(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,yr(r)),null!==Ml)for(r=Ml.return;null!==r;){var n=r;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&bo();break;case 3:ka(),uo(fo),uo(co);break;case 5:Ua(n);break;case 4:ka();break;case 13:case 19:uo(xa);break;case 10:ta(n)}r=r.return}Dl=e,Ml=Cu(e.current,null),Cl=t,Tl=vl,wl=null,Al=Rl=1073741823,Ll=null,Il=0,kl=!1}function nu(e,t){for(;;){try{if(ea(),Ka.current=hi,Va)for(var r=ja.memoizedState;null!==r;){var n=r.queue;null!==n&&(n.pending=null),r=r.next}if(za=0,Fa=qa=ja=null,Va=!1,null===Ml||null===Ml.return)return Tl=1,wl=t,Ml=null;e:{var o=e,a=Ml.return,i=Ml,l=t;if(t=Cl,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&i.mode)){var _=i.alternate;_?(i.updateQueue=_.updateQueue,i.memoizedState=_.memoizedState,i.expirationTime=_.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&xa.current),c=a;do{var f;if(f=13===c.tag){var p=c.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var d=c.memoizedProps;f=void 0!==d.fallback&&(!0!==d.unstable_avoidThisFallback||!s)}}if(f){var E=c.updateQueue;if(null===E){var h=new Set;h.add(u),c.updateQueue=h}else E.add(u);if(0==(2&c.mode)){if(c.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var b=ua(1073741823,null);b.tag=2,_a(i,b)}i.expirationTime=1073741823;break e}l=void 0,i=t;var m=o.pingCache;if(null===m?(m=o.pingCache=new pl,l=new Set,m.set(u,l)):void 0===(l=m.get(u))&&(l=new Set,m.set(u,l)),!l.has(i)){l.add(i);var y=yu.bind(null,o,u,i);u.then(y,y)}c.effectTag|=4096,c.expirationTime=t;break e}c=c.return}while(null!==c);l=Error((he(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+be(i))}5!==Tl&&(Tl=2),l=Ji(l,i),c=a;do{switch(c.tag){case 3:u=l,c.effectTag|=4096,c.expirationTime=t,sa(c,dl(c,u,t));break e;case 1:u=l;var v=c.type,O=c.stateNode;if(0==(64&c.effectTag)&&("function"==typeof v.getDerivedStateFromError||null!==O&&"function"==typeof O.componentDidCatch&&(null===Wl||!Wl.has(O)))){c.effectTag|=4096,c.expirationTime=t,sa(c,El(c,u,t));break e}}c=c.return}while(null!==c)}Ml=su(Ml)}catch(e){t=e;continue}break}}function ou(){var e=ml.current;return ml.current=hi,null===e?hi:e}function au(e,t){e<Rl&&2<e&&(Rl=e),null!==t&&e<Al&&2<e&&(Al=e,Ll=t)}function iu(e){e>Il&&(Il=e)}function lu(){for(;null!==Ml;)Ml=_u(Ml)}function uu(){for(;null!==Ml&&!Bo();)Ml=_u(Ml)}function _u(e){var t=hl(e.alternate,e,Cl);return e.memoizedProps=e.pendingProps,null===t&&(t=su(e)),yl.current=null,t}function su(e){Ml=e;do{var t=Ml.alternate;if(e=Ml.return,0==(2048&Ml.effectTag)){if(t=Qi(t,Ml,Cl),1===Cl||1!==Ml.childExpirationTime){for(var r=0,n=Ml.child;null!==n;){var o=n.expirationTime,a=n.childExpirationTime;o>r&&(r=o),a>r&&(r=a),n=n.sibling}Ml.childExpirationTime=r}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ml.firstEffect),null!==Ml.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ml.firstEffect),e.lastEffect=Ml.lastEffect),1<Ml.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ml:e.firstEffect=Ml,e.lastEffect=Ml))}else{if(null!==(t=Xi(Ml)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ml.sibling))return t;Ml=e}while(null!==Ml);return Tl===vl&&(Tl=5),null}function cu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fu(e){var t=zo();return qo(99,pu.bind(null,e,t)),null}function pu(e,t){do{Eu()}while(null!==Nl);if(0!=(48&gl))throw Error(i(327));var r=e.finishedWork,n=e.finishedExpirationTime;if(null===r)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,r===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=cu(r);if(e.firstPendingTime=o,n<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:n<=e.firstSuspendedTime&&(e.firstSuspendedTime=n-1),n<=e.lastPingedTime&&(e.lastPingedTime=0),n<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Dl&&(Ml=Dl=null,Cl=0),1<r.effectTag?null!==r.lastEffect?(r.lastEffect.nextEffect=r,o=r.firstEffect):o=r:o=r.firstEffect,null!==o){var a=gl;gl|=32,yl.current=null,dr=Gt;var l=fr();if(pr(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var _=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(_&&0!==_.rangeCount){u=_.anchorNode;var s=_.anchorOffset,c=_.focusNode;_=_.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,p=-1,d=-1,E=0,h=0,b=l,m=null;t:for(;;){for(var y;b!==u||0!==s&&3!==b.nodeType||(p=f+s),b!==c||0!==_&&3!==b.nodeType||(d=f+_),3===b.nodeType&&(f+=b.nodeValue.length),null!==(y=b.firstChild);)m=b,b=y;for(;;){if(b===l)break t;if(m===u&&++E===s&&(p=f),m===c&&++h===_&&(d=f),null!==(y=b.nextSibling))break;m=(b=m).parentNode}b=y}u=-1===p||-1===d?null:{start:p,end:d}}else u=null}u=u||{start:0,end:0}}else u=null;Er={activeElementDetached:null,focusedElem:l,selectionRange:u},Gt=!1,Ul=o;do{try{du()}catch(e){if(null===Ul)throw Error(i(330));mu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);Ul=o;do{try{for(l=e,u=t;null!==Ul;){var v=Ul.effectTag;if(16&v&&Ne(Ul.stateNode,""),128&v){var O=Ul.alternate;if(null!==O){var P=O.ref;null!==P&&("function"==typeof P?P(null):P.current=null)}}switch(1038&v){case 2:_l(Ul),Ul.effectTag&=-3;break;case 6:_l(Ul),Ul.effectTag&=-3,cl(Ul.alternate,Ul);break;case 1024:Ul.effectTag&=-1025;break;case 1028:Ul.effectTag&=-1025,cl(Ul.alternate,Ul);break;case 4:cl(Ul.alternate,Ul);break;case 8:sl(l,s=Ul,u),ll(s)}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(i(330));mu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);if(P=Er,O=fr(),v=P.focusedElem,u=P.selectionRange,O!==v&&v&&v.ownerDocument&&function e(t,r){return!(!t||!r)&&(t===r||(!t||3!==t.nodeType)&&(r&&3===r.nodeType?e(t,r.parentNode):"contains"in t?t.contains(r):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(r))))}(v.ownerDocument.documentElement,v)){null!==u&&pr(v)&&(O=u.start,void 0===(P=u.end)&&(P=O),"selectionStart"in v?(v.selectionStart=O,v.selectionEnd=Math.min(P,v.value.length)):(P=(O=v.ownerDocument||document)&&O.defaultView||window).getSelection&&(P=P.getSelection(),s=v.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!P.extend&&l>u&&(s=u,u=l,l=s),s=cr(v,l),c=cr(v,u),s&&c&&(1!==P.rangeCount||P.anchorNode!==s.node||P.anchorOffset!==s.offset||P.focusNode!==c.node||P.focusOffset!==c.offset)&&((O=O.createRange()).setStart(s.node,s.offset),P.removeAllRanges(),l>u?(P.addRange(O),P.extend(c.node,c.offset)):(O.setEnd(c.node,c.offset),P.addRange(O))))),O=[];for(P=v;P=P.parentNode;)1===P.nodeType&&O.push({element:P,left:P.scrollLeft,top:P.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<O.length;v++)(P=O[v]).element.scrollLeft=P.left,P.element.scrollTop=P.top}Gt=!!dr,Er=dr=null,e.current=r,Ul=o;do{try{for(v=e;null!==Ul;){var g=Ul.effectTag;if(36&g&&al(v,Ul.alternate,Ul),128&g){O=void 0;var D=Ul.ref;if(null!==D){var M=Ul.stateNode;switch(Ul.tag){case 5:O=M;break;default:O=M}"function"==typeof D?D(O):D.current=O}}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(i(330));mu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);Ul=null,Uo(),gl=a}else e.current=r;if(Kl)Kl=!1,Nl=e,zl=t;else for(Ul=o;null!==Ul;)t=Ul.nextEffect,Ul.nextEffect=null,Ul=t;if(0===(t=e.firstPendingTime)&&(Wl=null),1073741823===t?e===Fl?ql++:(ql=0,Fl=e):ql=0,"function"==typeof Ou&&Ou(r.stateNode,n),Xl(e),xl)throw xl=!1,e=Sl,Sl=null,e;return 0!=(8&gl)||Go(),null}function du(){for(;null!==Ul;){var e=Ul.effectTag;0!=(256&e)&&rl(Ul.alternate,Ul),0==(512&e)||Kl||(Kl=!0,Fo(97,(function(){return Eu(),null}))),Ul=Ul.nextEffect}}function Eu(){if(90!==zl){var e=97<zl?97:zl;return zl=90,qo(e,hu)}}function hu(){if(null===Nl)return!1;var e=Nl;if(Nl=null,0!=(48&gl))throw Error(i(331));var t=gl;for(gl|=32,e=e.current.firstEffect;null!==e;){try{var r=e;if(0!=(512&r.effectTag))switch(r.tag){case 0:case 11:case 15:case 22:nl(5,r),ol(5,r)}}catch(t){if(null===e)throw Error(i(330));mu(e,t)}r=e.nextEffect,e.nextEffect=null,e=r}return gl=t,Go(),!0}function bu(e,t,r){_a(e,t=dl(e,t=Ji(r,t),1073741823)),null!==(e=Yl(e,1073741823))&&Xl(e)}function mu(e,t){if(3===e.tag)bu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){bu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"==typeof r.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Wl||!Wl.has(n))){_a(r,e=El(r,e=Ji(t,e),1073741823)),null!==(r=Yl(r,1073741823))&&Xl(r);break}}r=r.return}}function yu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),Dl===e&&Cl===r?Tl===Pl||Tl===Ol&&1073741823===Rl&&No()-Bl<500?ru(e,Cl):kl=!0:Iu(e,r)&&(0!==(t=e.lastPingedTime)&&t<r||(e.lastPingedTime=r,Xl(e)))}function vu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(t=Hl(t=Gl(),e,null)),null!==(e=Yl(e,t))&&Xl(e)}hl=function(e,t,r){var n=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||fo.current)Ai=!0;else{if(n<r){switch(Ai=!1,t.tag){case 3:Ki(t),wi();break;case 5:if(Ba(t),4&t.mode&&1!==r&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:ho(t.type)&&vo(t);break;case 4:Ia(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value,o=t.type._context,_o(Qo,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(n=t.child.childExpirationTime)&&n>=r?Fi(e,t,r):(_o(xa,1&xa.current),null!==(t=$i(e,t,r))?t.sibling:null);_o(xa,1&xa.current);break;case 19:if(n=t.childExpirationTime>=r,0!=(64&e.effectTag)){if(n)return Hi(e,t,r);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),_o(xa,xa.current),!n)return null}return $i(e,t,r)}Ai=!1}}else Ai=!1;switch(t.expirationTime=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Eo(t,co.current),na(t,r),o=$a(null,t,n,e,o,r),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(n)){var a=!0;vo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=n.getDerivedStateFromProps;"function"==typeof l&&Ea(t,n,l,e),o.updater=ha,t.stateNode=o,o._reactInternalFiber=t,va(t,n,e,r),t=Wi(null,t,n,!0,a,r)}else t.tag=0,Li(null,t,o,r),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Mu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===ce)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=xi(null,t,o,e,r);break e;case 1:t=Si(null,t,o,e,r);break e;case 11:t=Ii(null,t,o,e,r);break e;case 14:t=ki(null,t,o,Yo(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,xi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 1:return n=t.type,o=t.pendingProps,Si(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 3:if(Ki(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),ca(t,n,null,r),(n=t.memoizedState.element)===o)wi(),t=$i(e,t,r);else{if((o=t.stateNode.hydrate)&&(Oi=vr(t.stateNode.containerInfo.firstChild),vi=t,o=Pi=!0),o)for(r=Ca(t,null,n,r),t.child=r;r;)r.effectTag=-3&r.effectTag|1024,r=r.sibling;else Li(e,t,n,r),wi();t=t.child}return t;case 5:return Ba(t),null===e&&Mi(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,br(n,o)?l=null:null!==a&&br(n,a)&&(t.effectTag|=16),Ui(e,t),4&t.mode&&1!==r&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Li(e,t,l,r),t=t.child),t;case 6:return null===e&&Mi(t),null;case 13:return Fi(e,t,r);case 4:return Ia(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Ma(t,null,n,r):Li(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Ii(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 7:return Li(e,t,t.pendingProps,r),t.child;case 8:case 12:return Li(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(_o(Qo,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=Sn(u,a)?0:0|("function"==typeof n._calculateChangedBits?n._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!fo.current){t=$i(e,t,r);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var _=u.dependencies;if(null!==_){l=u.child;for(var s=_.firstContext;null!==s;){if(s.context===n&&0!=(s.observedBits&a)){1===u.tag&&((s=ua(r,null)).tag=2,_a(u,s)),u.expirationTime<r&&(u.expirationTime=r),null!==(s=u.alternate)&&s.expirationTime<r&&(s.expirationTime=r),ra(u.return,r),_.expirationTime<r&&(_.expirationTime=r);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,na(t,r),n=n(o=oa(o,a.unstable_observedBits)),t.effectTag|=1,Li(e,t,n,r),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),ki(e,t,o,a=Yo(o.type,a),n,r);case 15:return Bi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Yo(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,ho(n)?(e=!0,vo(t)):e=!1,na(t,r),ma(t,n,o),va(t,n,o,r),Wi(null,t,n,!0,e,r);case 19:return Hi(e,t,r)}throw Error(i(156,t.tag))};var Ou=null,Pu=null;function gu(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Du(e,t,r,n){return new gu(e,t,r,n)}function Mu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cu(e,t){var r=e.alternate;return null===r?((r=Du(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=e.childExpirationTime,r.expirationTime=e.expirationTime,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Tu(e,t,r,n,o,a){var l=2;if(n=e,"function"==typeof e)Mu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case re:return wu(r.children,o,a,t);case le:l=8,o|=7;break;case ne:l=8,o|=1;break;case oe:return(e=Du(12,r,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case _e:return(e=Du(13,r,t,o)).type=_e,e.elementType=_e,e.expirationTime=a,e;case se:return(e=Du(19,r,t,o)).elementType=se,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case ue:l=11;break e;case ce:l=14;break e;case fe:l=16,n=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Du(l,r,t,o)).elementType=e,t.type=n,t.expirationTime=a,t}function wu(e,t,r,n){return(e=Du(7,e,n,t)).expirationTime=r,e}function Ru(e,t,r){return(e=Du(6,e,null,t)).expirationTime=r,e}function Au(e,t,r){return(t=Du(4,null!==e.children?e.children:[],e.key,t)).expirationTime=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Lu(e,t,r){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Iu(e,t){var r=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==r&&r>=t&&e<=t}function ku(e,t){var r=e.firstSuspendedTime,n=e.lastSuspendedTime;r<t&&(e.firstSuspendedTime=t),(n>t||0===r)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Bu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var r=e.firstSuspendedTime;0!==r&&(t>=r?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Uu(e,t){var r=e.lastExpiredTime;(0===r||r>t)&&(e.lastExpiredTime=t)}function xu(e,t,r,n){var o=t.current,a=Gl(),l=pa.suspense;a=Hl(a,o,l);e:if(r){t:{if(Ze(r=r._reactInternalFiber)!==r||1!==r.tag)throw Error(i(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===r.tag){var _=r.type;if(ho(_)){r=yo(r,_,u);break e}}r=u}else r=so;return null===t.context?t.context=r:t.pendingContext=r,(t=ua(a,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),_a(o,t),$l(o,a),a}function Su(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Wu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Ku(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}function Nu(e,t,r){var n=new Lu(e,t,r=null!=r&&!0===r.hydrate),o=Du(3,null,null,2===t?7:1===t?3:0);n.current=o,o.stateNode=n,ia(o),e[Mr]=n.current,r&&0!==t&&function(e,t){var r=Je(t);Ct.forEach((function(e){dt(e,t,r)})),Tt.forEach((function(e){dt(e,t,r)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=n}function zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ju(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Su(i);l.call(e)}}xu(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new Nu(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Su(i);u.call(e)}}tu((function(){xu(t,i,e,o)}))}return Su(i)}function qu(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Fu(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!zu(t))throw Error(i(200));return qu(e,t,null,r)}Nu.prototype.render=function(e){xu(e,this._internalRoot,null,null)},Nu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;xu(null,e,null,(function(){t[Mr]=null}))},Et=function(e){if(13===e.tag){var t=$o(Gl(),150,100);$l(e,t),Ku(e,t)}},ht=function(e){13===e.tag&&($l(e,3),Ku(e,3))},bt=function(e){if(13===e.tag){var t=Gl();$l(e,t=Hl(t,e,null)),Ku(e,t)}},w=function(e,t,r){switch(t){case"input":if(Me(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=Rr(n);if(!o)throw Error(i(90));Oe(n),Me(n,o)}}}break;case"textarea":Ie(e,r);break;case"select":null!=(t=r.value)&&Re(e,!!r.multiple,t,!1)}},B=eu,U=function(e,t,r,n,o){var a=gl;gl|=4;try{return qo(98,e.bind(null,t,r,n,o))}finally{0===(gl=a)&&Go()}},x=function(){0==(49&gl)&&(function(){if(null!==jl){var e=jl;jl=null,e.forEach((function(e,t){Uu(t,e),Xl(t)})),Go()}}(),Eu())},S=function(e,t){var r=gl;gl|=2;try{return e(t)}finally{0===(gl=r)&&Go()}};var Vu,Gu,Hu={Events:[Tr,wr,Rr,C,g,xr,function(e){ot(e,Ur)},I,k,Xt,lt,Eu,{current:!1}]};Gu=(Vu={findFiberByHostInstance:Cr,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var r=t.inject(e);Ou=function(e){try{t.onCommitFiberRoot(r,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Pu=function(e){try{t.onCommitFiberUnmount(r,e)}catch(e){}}}catch(e){}}(o({},Vu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Q.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Gu?Gu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Hu,t.createPortal=Fu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&gl))throw Error(i(187));var r=gl;gl|=1;try{return qo(99,e.bind(null,t))}finally{gl=r,Go()}},t.hydrate=function(e,t,r){if(!zu(t))throw Error(i(200));return ju(null,e,t,!0,r)},t.render=function(e,t,r){if(!zu(t))throw Error(i(200));return ju(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!zu(e))throw Error(i(40));return!!e._reactRootContainer&&(tu((function(){ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[Mr]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Fu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!zu(r))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return ju(e,t,r,!1,n)},t.version="16.13.1"},function(e,t,r){"use strict";e.exports=r(148)},function(e,t,r){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n,o,a,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,_=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},c=Date.now();t.unstable_now=function(){return Date.now()-c},n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(s,0))},o=function(e,t){_=setTimeout(e,t)},a=function(){clearTimeout(_)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,d=window.setTimeout,E=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var b=p.now();t.unstable_now=function(){return p.now()-b}}var m=!1,y=null,v=-1,O=5,P=0;i=function(){return t.unstable_now()>=P},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):O=0<e?Math.floor(1e3/e):5};var g=new MessageChannel,D=g.port2;g.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();P=e+O;try{y(!0,e)?D.postMessage(null):(m=!1,y=null)}catch(e){throw D.postMessage(null),e}}else m=!1},n=function(e){y=e,m||(m=!0,D.postMessage(null))},o=function(e,r){v=d((function(){e(t.unstable_now())}),r)},a=function(){E(v),v=-1}}function M(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<w(o,t)))break e;e[n]=t,e[r]=o,r=n}}function C(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>w(i,r))void 0!==u&&0>w(u,i)?(e[n]=u,e[l]=r,n=l):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==u&&0>w(u,r)))break e;e[n]=u,e[l]=r,n=l}}}return t}return null}function w(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var R=[],A=[],L=1,I=null,k=3,B=!1,U=!1,x=!1;function S(e){for(var t=C(A);null!==t;){if(null===t.callback)T(A);else{if(!(t.startTime<=e))break;T(A),t.sortIndex=t.expirationTime,M(R,t)}t=C(A)}}function W(e){if(x=!1,S(e),!U)if(null!==C(R))U=!0,n(K);else{var t=C(A);null!==t&&o(W,t.startTime-e)}}function K(e,r){U=!1,x&&(x=!1,a()),B=!0;var n=k;try{for(S(r),I=C(R);null!==I&&(!(I.expirationTime>r)||e&&!i());){var l=I.callback;if(null!==l){I.callback=null,k=I.priorityLevel;var u=l(I.expirationTime<=r);r=t.unstable_now(),"function"==typeof u?I.callback=u:I===C(R)&&T(R),S(r)}else T(R);I=C(R)}if(null!==I)var _=!0;else{var s=C(A);null!==s&&o(W,s.startTime-r),_=!1}return _}finally{I=null,k=n,B=!1}}function N(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){U||B||(U=!0,n(K))},t.unstable_getCurrentPriorityLevel=function(){return k},t.unstable_getFirstCallbackNode=function(){return C(R)},t.unstable_next=function(e){switch(k){case 1:case 2:case 3:var t=3;break;default:t=k}var r=k;k=t;try{return e()}finally{k=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=k;k=e;try{return t()}finally{k=r}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:N(e)}else i=N(e),u=l;return e={id:L++,callback:r,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,M(A,e),null===C(R)&&e===C(A)&&(x?a():x=!0,o(W,u-l))):(e.sortIndex=i,M(R,e),U||B||(U=!0,n(K))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();S(e);var r=C(R);return r!==I&&null!==I&&null!==r&&null!==r.callback&&r.startTime<=e&&r.expirationTime<I.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=k;return function(){var r=k;k=t;try{return e.apply(this,arguments)}finally{k=r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clear=function(){return new Promise((function(e,t){try{window.localStorage.clear(),e(null)}catch(e){t(e)}}))},t.getItem=function(e){return new Promise((function(t,r){try{t(window.localStorage.getItem(e))}catch(e){r(e)}}))},t.removeItem=function(e){return new Promise((function(t,r){try{window.localStorage.removeItem(e),t(null)}catch(e){r(e)}}))},t.setItem=function(e,t){return new Promise((function(r,n){try{window.localStorage.setItem(e,t),r(null)}catch(e){n(e)}}))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1);t.mergeObservables=function e(t,r){var o=t,a=r;if("object"==typeof o&&"object"==typeof a)for(var i in o)o[i]&&"object"==typeof o[i]&&"object"==typeof a[i]?n.isObservableMap(o[i])?o[i].merge(a[i]):n.isObservableArray(o[i])?o[i].replace(a[i]):n.isObservableObject(o[i])&&(o[i]=e(o[i],a[i])):void 0!==a[i]&&(o[i]=a[i]);return o}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(63),o=r(90);t.persistObject=function(e,t){var r=function e(t){var r={};return Object.keys(t).forEach((function(n){"object"==typeof t[n]?t[n].type in o.types&&("object"==typeof t[n].schema?r[n]=o.types[t[n].type](e(t[n].schema)):r[n]=o.types[t[n].type](t[n].schema)):!0===t[n]&&(r[n]=!0)})),n.createSimpleSchema(r)}(t);return n.setDefaultModelSchema(e,r),e}},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(26);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__id=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"read",value:function(e){return this._request("GET","/gists/"+this.__id,null,e)}},{key:"create",value:function(e,t){var r=this;return this._request("POST","/gists",e,t).then((function(e){return r.__id=e.data.id,e}))}},{key:"delete",value:function(e){return this._request("DELETE","/gists/"+this.__id,null,e)}},{key:"fork",value:function(e){return this._request("POST","/gists/"+this.__id+"/forks",null,e)}},{key:"update",value:function(e,t){return this._request("PATCH","/gists/"+this.__id,e,t)}},{key:"star",value:function(e){return this._request("PUT","/gists/"+this.__id+"/star",null,e)}},{key:"unstar",value:function(e){return this._request("DELETE","/gists/"+this.__id+"/star",null,e)}},{key:"isStarred",value:function(e){return this._request204or404("/gists/"+this.__id+"/star",null,e)}},{key:"listCommits",value:function(e){return this._requestAllPages("/gists/"+this.__id+"/commits",null,e)}},{key:"getRevision",value:function(e,t){return this._request("GET","/gists/"+this.__id+"/"+e,null,t)}},{key:"listComments",value:function(e){return this._requestAllPages("/gists/"+this.__id+"/comments",null,e)}},{key:"getComment",value:function(e,t){return this._request("GET","/gists/"+this.__id+"/comments/"+e,null,t)}},{key:"createComment",value:function(e,t){return this._request("POST","/gists/"+this.__id+"/comments",{body:e},t)}},{key:"editComment",value:function(e,t,r){return this._request("PATCH","/gists/"+this.__id+"/comments/"+e,{body:t},r)}},{key:"deleteComment",value:function(e,t){return this._request("DELETE","/gists/"+this.__id+"/comments/"+e,null,t)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){e.exports=r(154)},function(e,t,r){"use strict";var n=r(23),o=r(91),a=r(155),i=r(97);function l(e){var t=new a(e),r=o(a.prototype.request,t);return n.extend(r,a.prototype,t),n.extend(r,t),r}var u=l(r(94));u.Axios=a,u.create=function(e){return l(i(u.defaults,e))},u.Cancel=r(98),u.CancelToken=r(168),u.isCancel=r(93),u.all=function(e){return Promise.all(e)},u.spread=r(169),e.exports=u,e.exports.default=u},function(e,t,r){"use strict";var n=r(23),o=r(92),a=r(156),i=r(157),l=r(97);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}})),n.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,r,o){return this.request(n.merge(o||{},{method:e,url:t,data:r}))}})),e.exports=u},function(e,t,r){"use strict";var n=r(23);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,r){"use strict";var n=r(23),o=r(158),a=r(93),i=r(94);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var n=r(23);e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t,r){"use strict";var n=r(23);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},function(e,t,r){"use strict";var n=r(96);e.exports=function(e,t,r){var o=r.config.validateStatus;!o||o(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(163),o=r(164);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(23),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,a,i={};return e?(n.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=n.trim(e.substr(0,a)).toLowerCase(),r=n.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},function(e,t,r){"use strict";var n=r(23);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(23);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&l.push("expires="+new Date(r).toGMTString()),n.isString(o)&&l.push("path="+o),n.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(98);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){var n;function o(e){function r(){if(r.enabled){var e=r,o=+new Date,a=o-(n||o);e.diff=a,e.prev=n,e.curr=o,n=o;for(var i=new Array(arguments.length),l=0;l<i.length;l++)i[l]=arguments[l];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var u=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var o=t.formatters[n];if("function"==typeof o){var a=i[u];r=o.call(e,a),i.splice(u,1),u--}return r})),t.formatArgs.call(e,i);var _=r.log||t.log||console.log.bind(console);_.apply(e,i)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),"function"==typeof t.init&&t.init(r),r}(t=e.exports=o.debug=o.default=o).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var r=("string"==typeof e?e:"").split(/[\s,]+/),n=r.length,o=0;o<n;o++)r[o]&&("-"===(e=r[o].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=r(171),t.names=[],t.skips=[],t.formatters={}},function(e,t){var r=1e3,n=6e4,o=60*n,a=24*o;function i(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var l,u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var i=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"days":case"day":case"d":return i*a;case"hours":case"hour":case"hrs":case"hr":case"h":return i*o;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?i(l=e,a,"day")||i(l,o,"hour")||i(l,n,"minute")||i(l,r,"second")||l+" ms":function(e){if(e>=a)return Math.round(e/a)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=n)return Math.round(e/n)+"m";if(e>=r)return Math.round(e/r)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(26));function a(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=(0,a(r(46)).default)("github:user"),l=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__user=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"__getScopedUrl",value:function(e){if(this.__user)return e?"/users/"+this.__user+"/"+e:"/users/"+this.__user;switch(e){case"":return"/user";case"notifications":case"gists":return"/"+e;default:return"/user/"+e}}},{key:"listRepos",value:function(e,t){return"function"==typeof e&&(t=e,e={}),e=this._getOptionsWithDefaults(e),i("Fetching repositories with options: "+JSON.stringify(e)),this._requestAllPages(this.__getScopedUrl("repos"),e,t)}},{key:"listOrgs",value:function(e){return this._request("GET",this.__getScopedUrl("orgs"),null,e)}},{key:"listFollowers",value:function(e){return this._request("GET",this.__getScopedUrl("followers"),null,e)}},{key:"listFollowing",value:function(e){return this._request("GET",this.__getScopedUrl("following"),null,e)}},{key:"listGists",value:function(e){return this._request("GET",this.__getScopedUrl("gists"),null,e)}},{key:"listNotifications",value:function(e,t){return"function"==typeof(e=e||{})&&(t=e,e={}),e.since=this._dateToISO(e.since),e.before=this._dateToISO(e.before),this._request("GET",this.__getScopedUrl("notifications"),e,t)}},{key:"getProfile",value:function(e){return this._request("GET",this.__getScopedUrl(""),null,e)}},{key:"listStarredRepos",value:function(e){var t=this._getOptionsWithDefaults();return this._requestAllPages(this.__getScopedUrl("starred"),t,e)}},{key:"listStarredGists",value:function(e,t){return"function"==typeof(e=e||{})&&(t=e,e={}),e.since=this._dateToISO(e.since),this._request("GET","/gists/starred",e,t)}},{key:"getEmails",value:function(e){return this._request("GET","/user/emails",null,e)}},{key:"follow",value:function(e,t){return this._request("PUT","/user/following/"+e,null,t)}},{key:"unfollow",value:function(e,t){return this._request("DELETE","/user/following/"+e,null,t)}},{key:"createRepo",value:function(e,t){return this._request("POST","/user/repos",e,t)}}]),t}(o.default);e.exports=l},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(26);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *             Github.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__repository=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"createIssue",value:function(e,t){return this._request("POST","/repos/"+this.__repository+"/issues",e,t)}},{key:"listIssues",value:function(e,t){return this._requestAllPages("/repos/"+this.__repository+"/issues",e,t)}},{key:"listIssueEvents",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/"+e+"/events",null,t)}},{key:"listIssueComments",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/"+e+"/comments",null,t)}},{key:"getIssueComment",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/comments/"+e,null,t)}},{key:"createIssueComment",value:function(e,t,r){return this._request("POST","/repos/"+this.__repository+"/issues/"+e+"/comments",{body:t},r)}},{key:"editIssueComment",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/issues/comments/"+e,{body:t},r)}},{key:"deleteIssueComment",value:function(e,t){return this._request("DELETE","/repos/"+this.__repository+"/issues/comments/"+e,null,t)}},{key:"editIssue",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/issues/"+e,t,r)}},{key:"getIssue",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/issues/"+e,null,t)}},{key:"listMilestones",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/milestones",e,t)}},{key:"getMilestone",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/milestones/"+e,null,t)}},{key:"createMilestone",value:function(e,t){return this._request("POST","/repos/"+this.__repository+"/milestones",e,t)}},{key:"editMilestone",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/milestones/"+e,t,r)}},{key:"deleteMilestone",value:function(e,t){return this._request("DELETE","/repos/"+this.__repository+"/milestones/"+e,null,t)}},{key:"createLabel",value:function(e,t){return this._request("POST","/repos/"+this.__repository+"/labels",e,t)}},{key:"listLabels",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/labels",e,t)}},{key:"getLabel",value:function(e,t){return this._request("GET","/repos/"+this.__repository+"/labels/"+e,null,t)}},{key:"editLabel",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__repository+"/labels/"+e,t,r)}},{key:"deleteLabel",value:function(e,t){return this._request("DELETE","/repos/"+this.__repository+"/labels/"+e,null,t)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(26));function a(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=(0,a(r(46)).default)("github:search"),l=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__defaults=o._getOptionsWithDefaults(e),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"_search",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,o={};return Object.keys(this.__defaults).forEach((function(e){o[e]=t.__defaults[e]})),Object.keys(r).forEach((function(e){o[e]=r[e]})),i("searching "+e+" with options:",o),this._requestAllPages("/search/"+e,o,n)}},{key:"forRepositories",value:function(e,t){return this._search("repositories",e,t)}},{key:"forCode",value:function(e,t){return this._search("code",e,t)}},{key:"forIssues",value:function(e,t){return this._search("issues",e,t)}},{key:"forUsers",value:function(e,t){return this._search("users",e,t)}}]),t}(o.default);e.exports=l},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(26);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"getRateLimit",value:function(e){return this._request("GET","/rate_limit",null,e)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";(function(t){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=u(r(26)),i=u(r(181)),l=r(99);function u(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var _=(0,u(r(46)).default)("github:repository"),s=function(e){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,t,n));return o.__fullname=e,o.__currentTree={branch:null,sha:null},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e),o(r,[{key:"getRef",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/refs/"+e,null,t)}},{key:"createRef",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/git/refs",e,t)}},{key:"deleteRef",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/git/refs/"+e,null,t)}},{key:"deleteRepo",value:function(e){return this._request("DELETE","/repos/"+this.__fullname,null,e)}},{key:"listTags",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/tags",null,e)}},{key:"listPullRequests",value:function(e,t){return e=e||{},this._request("GET","/repos/"+this.__fullname+"/pulls",e,t)}},{key:"getPullRequest",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/pulls/"+e,null,t)}},{key:"listPullRequestFiles",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/pulls/"+e+"/files",null,t)}},{key:"compareBranches",value:function(e,t,r){return this._request("GET","/repos/"+this.__fullname+"/compare/"+e+"..."+t,null,r)}},{key:"listBranches",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/branches",null,e)}},{key:"getBlob",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/blobs/"+e,null,t,"raw")}},{key:"getBranch",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/branches/"+e,null,t)}},{key:"getCommit",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/commits/"+e,null,t)}},{key:"listCommits",value:function(e,t){return"function"==typeof(e=e||{})&&(t=e,e={}),e.since=this._dateToISO(e.since),e.until=this._dateToISO(e.until),this._request("GET","/repos/"+this.__fullname+"/commits",e,t)}},{key:"getSingleCommit",value:function(e,t){return e=e||"",this._request("GET","/repos/"+this.__fullname+"/commits/"+e,null,t)}},{key:"getSha",value:function(e,t,r){return e=e?"?ref="+e:"",this._request("GET","/repos/"+this.__fullname+"/contents/"+t+e,null,r)}},{key:"listStatuses",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/commits/"+e+"/statuses",null,t)}},{key:"getCombinedStatus",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/commits/"+e+"/status",null,t)}},{key:"getTree",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/git/trees/"+e,null,t)}},{key:"createBlob",value:function(e,t){var r=this._getContentObject(e);return _("sending content",r),this._request("POST","/repos/"+this.__fullname+"/git/blobs",r,t)}},{key:"_getContentObject",value:function(e){if("string"==typeof e)return _("contet is a string"),{content:i.default.encode(e),encoding:"utf-8"};if(void 0!==t&&e instanceof t)return _("We appear to be in Node"),{content:e.toString("base64"),encoding:"base64"};if("undefined"!=typeof Blob&&e instanceof Blob)return _("We appear to be in the browser"),{content:l.Base64.encode(e),encoding:"base64"};throw _("Not sure what this content is: "+(void 0===e?"undefined":n(e))+", "+JSON.stringify(e)),new Error("Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)")}},{key:"updateTree",value:function(e,t,r,n){var o={base_tree:e,tree:[{path:t,sha:r,mode:"100644",type:"blob"}]};return this._request("POST","/repos/"+this.__fullname+"/git/trees",o,n)}},{key:"createTree",value:function(e,t,r){return this._request("POST","/repos/"+this.__fullname+"/git/trees",{tree:e,base_tree:t},r)}},{key:"commit",value:function(e,t,r,n,o){var a=this;"function"==typeof n&&(o=n,n={});var i={message:r,tree:t,parents:[e]};return i=Object.assign({},n,i),this._request("POST","/repos/"+this.__fullname+"/git/commits",i,o).then((function(e){return a.__currentTree.sha=e.data.sha,e}))}},{key:"updateHead",value:function(e,t,r,n){return this._request("PATCH","/repos/"+this.__fullname+"/git/refs/"+e,{sha:t,force:r},n)}},{key:"updateStatus",value:function(e,t,r){return this._request("POST","/repos/"+this.__fullname+"/statuses/"+e,t,r)}},{key:"updateRepository",value:function(e,t){return this._request("PATCH","/repos/"+this.__fullname,e,t)}},{key:"getDetails",value:function(e){return this._request("GET","/repos/"+this.__fullname,null,e)}},{key:"getContributors",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/contributors",null,e)}},{key:"getContributorStats",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/stats/contributors",null,e)}},{key:"getCollaborators",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/collaborators",null,e)}},{key:"isCollaborator",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/collaborators/"+e,null,t)}},{key:"getContents",value:function(e,t,r,n){return t=t?""+encodeURI(t):"",this._request("GET","/repos/"+this.__fullname+"/contents/"+t,{ref:e},n,r)}},{key:"getReadme",value:function(e,t,r){return this._request("GET","/repos/"+this.__fullname+"/readme",{ref:e},r,t)}},{key:"fork",value:function(e){return this._request("POST","/repos/"+this.__fullname+"/forks",null,e)}},{key:"forkToOrg",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/forks?organization="+e,null,t)}},{key:"listForks",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/forks",null,e)}},{key:"createBranch",value:function(e,t,r){var n=this;return"function"==typeof t&&(r=t,t=e,e="master"),this.getRef("heads/"+e).then((function(e){var o=e.data.object.sha;return n.createRef({sha:o,ref:"refs/heads/"+t},r)}))}},{key:"createPullRequest",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/pulls",e,t)}},{key:"updatePullRequest",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__fullname+"/pulls/"+e,t,r)}},{key:"listHooks",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/hooks",null,e)}},{key:"getHook",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/hooks/"+e,null,t)}},{key:"createHook",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/hooks",e,t)}},{key:"updateHook",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__fullname+"/hooks/"+e,t,r)}},{key:"deleteHook",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/hooks/"+e,null,t)}},{key:"listKeys",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/keys",null,e)}},{key:"getKey",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/keys/"+e,null,t)}},{key:"createKey",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/keys",e,t)}},{key:"deleteKey",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/keys/"+e,null,t)}},{key:"deleteFile",value:function(e,t,r){var n=this;return this.getSha(e,t).then((function(o){var a={message:"Delete the file at '"+t+"'",sha:o.data.sha,branch:e};return n._request("DELETE","/repos/"+n.__fullname+"/contents/"+t,a,r)}))}},{key:"move",value:function(e,t,r,n){var o=this,a=void 0;return this.getRef("heads/"+e).then((function(e){var t=e.data.object;return o.getTree(t.sha+"?recursive=true")})).then((function(e){var n=e.data,i=n.tree,l=n.sha;a=l;var u=i.map((function(e){return e.path===t&&(e.path=r),"tree"===e.type&&delete e.sha,e}));return o.createTree(u)})).then((function(e){var n=e.data;return o.commit(a,n.sha,"Renamed '"+t+"' to '"+r+"'")})).then((function(t){var r=t.data;return o.updateHead("heads/"+e,r.sha,!0,n)}))}},{key:"writeFile",value:function(e,t,r,n,o,a){var i=this;"function"==typeof o&&(a=o,o={});var u=t?encodeURI(t):"",_=!1!==o.encode,s={branch:e,message:n,author:o.author,committer:o.committer,content:_?l.Base64.encode(r):r};return this.getSha(e,u).then((function(e){return s.sha=e.data.sha,i._request("PUT","/repos/"+i.__fullname+"/contents/"+u,s,a)}),(function(){return i._request("PUT","/repos/"+i.__fullname+"/contents/"+u,s,a)}))}},{key:"isStarred",value:function(e){return this._request204or404("/user/starred/"+this.__fullname,null,e)}},{key:"star",value:function(e){return this._request("PUT","/user/starred/"+this.__fullname,null,e)}},{key:"unstar",value:function(e){return this._request("DELETE","/user/starred/"+this.__fullname,null,e)}},{key:"createRelease",value:function(e,t){return this._request("POST","/repos/"+this.__fullname+"/releases",e,t)}},{key:"updateRelease",value:function(e,t,r){return this._request("PATCH","/repos/"+this.__fullname+"/releases/"+e,t,r)}},{key:"listReleases",value:function(e){return this._request("GET","/repos/"+this.__fullname+"/releases",null,e)}},{key:"getRelease",value:function(e,t){return this._request("GET","/repos/"+this.__fullname+"/releases/"+e,null,t)}},{key:"deleteRelease",value:function(e,t){return this._request("DELETE","/repos/"+this.__fullname+"/releases/"+e,null,t)}},{key:"mergePullRequest",value:function(e,t,r){return this._request("PUT","/repos/"+this.__fullname+"/pulls/"+e+"/merge",t,r)}},{key:"listProjects",value:function(e){return this._requestAllPages("/repos/"+this.__fullname+"/projects",{AcceptHeader:"inertia-preview"},e)}},{key:"createProject",value:function(e,t){return(e=e||{}).AcceptHeader="inertia-preview",this._request("POST","/repos/"+this.__fullname+"/projects",e,t)}}]),r}(a.default);e.exports=s}).call(this,r(177).Buffer)},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(178),o=r(179),a=r(180);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function l(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return c(this,e)}return _(this,e,t,r)}function _(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=f(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(t,r),o=(e=l(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|p(t.length);return 0===(e=l(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?l(e,0):f(e,t);if("Buffer"===t.type&&a(t.data))return f(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function s(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function c(e,t){if(s(t),e=l(e,t<0?0:0|p(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function f(e,t){var r=t.length<0?0:0|p(t.length);e=l(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function p(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return N(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(e).length;default:if(n)return N(e).length;t=(""+t).toLowerCase(),n=!0}}function E(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,r);case"utf8":case"utf-8":return C(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return w(this,t,r);case"base64":return M(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function h(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function b(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,o){var a,i=1,l=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,l/=2,u/=2,r/=2}function _(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var s=-1;for(a=r;a<l;a++)if(_(e,a)===_(t,-1===s?0:a-s)){if(-1===s&&(s=a),a-s+1===u)return s*i}else-1!==s&&(a-=a-s),s=-1}else for(r+u>l&&(r=l-u),a=r;a>=0;a--){for(var c=!0,f=0;f<u;f++)if(_(e,a+f)!==_(t,f)){c=!1;break}if(c)return a}return-1}function y(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var i=0;i<n;++i){var l=parseInt(t.substr(2*i,2),16);if(isNaN(l))return i;e[r+i]=l}return i}function v(e,t,r,n){return j(N(t,e.length-r),e,r,n)}function O(e,t,r,n){return j(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return O(e,t,r,n)}function g(e,t,r,n){return j(z(t),e,r,n)}function D(e,t,r,n){return j(function(e,t){for(var r,n,o,a=[],i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,o=r%256,a.push(o),a.push(n);return a}(t,e.length-r),e,r,n)}function M(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function C(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var a,i,l,u,_=e[o],s=null,c=_>239?4:_>223?3:_>191?2:1;if(o+c<=r)switch(c){case 1:_<128&&(s=_);break;case 2:128==(192&(a=e[o+1]))&&(u=(31&_)<<6|63&a)>127&&(s=u);break;case 3:a=e[o+1],i=e[o+2],128==(192&a)&&128==(192&i)&&(u=(15&_)<<12|(63&a)<<6|63&i)>2047&&(u<55296||u>57343)&&(s=u);break;case 4:a=e[o+1],i=e[o+2],l=e[o+3],128==(192&a)&&128==(192&i)&&128==(192&l)&&(u=(15&_)<<18|(63&a)<<12|(63&i)<<6|63&l)>65535&&u<1114112&&(s=u)}null===s?(s=65533,c=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),o+=c}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return _(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return s(t),t<=0?l(e,t):void 0!==r?"string"==typeof n?l(e,t).fill(r,n):l(e,t).fill(r):l(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return c(null,e)},u.allocUnsafeSlow=function(e){return c(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,a=Math.min(r,n);o<a;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?C(this,0,e):E.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),l=Math.min(a,i),_=this.slice(n,o),s=e.slice(t,r),c=0;c<l;++c)if(_[c]!==s[c]){a=_[c],i=s[c];break}return a<i?-1:i<a?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return b(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return b(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return y(this,e,t,r);case"utf8":case"utf-8":return v(this,e,t,r);case"ascii":return O(this,e,t,r);case"latin1":case"binary":return P(this,e,t,r);case"base64":return g(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function T(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function w(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function R(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",a=t;a<r;++a)o+=K(e[a]);return o}function A(e,t,r){for(var n=e.slice(t,r),o="",a=0;a<n.length;a+=2)o+=String.fromCharCode(n[a]+256*n[a+1]);return o}function L(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,o,a){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function k(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-r,2);o<a;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function B(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-r,4);o<a;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function U(e,t,r,n,o,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function x(e,t,r,n,a){return a||U(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function S(e,t,r,n,a){return a||U(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;r=new u(o,void 0);for(var a=0;a<o;++a)r[a]=this[a+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUInt8=function(e,t){return t||L(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||L(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||L(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||L(e,t,this.length);for(var n=t,o=1,a=this[e+--n];n>0&&(o*=256);)a+=this[e+--n]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},u.prototype.readInt8=function(e,t){return t||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||L(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||L(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||L(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||L(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||L(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||L(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,a=0;for(this[t]=255&e;++a<r&&(o*=256);)this[t+a]=e/o&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):k(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):k(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):B(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var a=0,i=1,l=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===l&&0!==this[t+a-1]&&(l=1),this[t+a]=(e/i>>0)-l&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var a=r-1,i=1,l=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===l&&0!==this[t+a+1]&&(l=1),this[t+a]=(e/i>>0)-l&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):k(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):k(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):B(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return x(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return x(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return S(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return S(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,a=n-r;if(this===e&&r<t&&t<n)for(o=a-1;o>=0;--o)e[o+t]=this[o+r];else if(a<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var i=u.isBuffer(e)?e:N(new u(e,n).toString()),l=i.length;for(a=0;a<r-t;++a)this[a+t]=i[a%l]}return this};var W=/[^+\/0-9A-Za-z-_]/g;function K(e){return e<16?"0"+e.toString(16):e.toString(16)}function N(e,t){var r;t=t||1/0;for(var n=e.length,o=null,a=[],i=0;i<n;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&a.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function z(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(W,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function j(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(45))},function(e,t,r){"use strict";t.byteLength=function(e){var t=_(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=_(e),i=n[0],l=n[1],u=new a(function(e,t,r){return 3*(t+r)/4-r}(0,i,l)),s=0,c=l>0?i-4:i;for(r=0;r<c;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],u[s++]=t>>16&255,u[s++]=t>>8&255,u[s++]=255&t;2===l&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,u[s++]=255&t);1===l&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,u[s++]=t>>8&255,u[s++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,a=[],i=0,l=r-o;i<l;i+=16383)a.push(s(e,i,i+16383>l?l:i+16383));1===o?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=0,u=i.length;l<u;++l)n[l]=i[l],o[i.charCodeAt(l)]=l;function _(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function s(e,t,r){for(var o,a,i=[],l=t;l<r;l+=3)o=(e[l]<<16&16711680)+(e[l+1]<<8&65280)+(255&e[l+2]),i.push(n[(a=o)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,o){var a,i,l=8*o-n-1,u=(1<<l)-1,_=u>>1,s=-7,c=r?o-1:0,f=r?-1:1,p=e[t+c];for(c+=f,a=p&(1<<-s)-1,p>>=-s,s+=l;s>0;a=256*a+e[t+c],c+=f,s-=8);for(i=a&(1<<-s)-1,a>>=-s,s+=n;s>0;i=256*i+e[t+c],c+=f,s-=8);if(0===a)a=1-_;else{if(a===u)return i?NaN:1/0*(p?-1:1);i+=Math.pow(2,n),a-=_}return(p?-1:1)*i*Math.pow(2,a-n)},t.write=function(e,t,r,n,o,a){var i,l,u,_=8*a-o-1,s=(1<<_)-1,c=s>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:a-1,d=n?1:-1,E=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(l=isNaN(t)?1:0,i=s):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+c>=1?f/u:f*Math.pow(2,1-c))*u>=2&&(i++,u/=2),i+c>=s?(l=0,i=s):i+c>=1?(l=(t*u-1)*Math.pow(2,o),i+=c):(l=t*Math.pow(2,c-1)*Math.pow(2,o),i=0));o>=8;e[r+p]=255&l,p+=d,l/=256,o-=8);for(i=i<<o|l,_+=o;_>0;e[r+p]=255&i,p+=d,i/=256,_-=8);e[r+p-d]|=128*E}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){(function(e,n){var o;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(a){var i=t,l=(e&&e.exports,"object"==typeof n&&n);l.global!==l&&l.window;var u,_,s,c=String.fromCharCode;function f(e){for(var t,r,n=[],o=0,a=e.length;o<a;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<a?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function p(e){if(e>=55296&&e<=57343)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value")}function d(e,t){return c(e>>t&63|128)}function E(e){if(0==(4294967168&e))return c(e);var t="";return 0==(4294965248&e)?t=c(e>>6&31|192):0==(4294901760&e)?(p(e),t=c(e>>12&15|224),t+=d(e,6)):0==(4292870144&e)&&(t=c(e>>18&7|240),t+=d(e,12),t+=d(e,6)),t+=c(63&e|128)}function h(){if(s>=_)throw Error("Invalid byte index");var e=255&u[s];if(s++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function b(){var e,t;if(s>_)throw Error("Invalid byte index");if(s==_)return!1;if(e=255&u[s],s++,0==(128&e))return e;if(192==(224&e)){if((t=(31&e)<<6|h())>=128)return t;throw Error("Invalid continuation byte")}if(224==(240&e)){if((t=(15&e)<<12|h()<<6|h())>=2048)return p(t),t;throw Error("Invalid continuation byte")}if(240==(248&e)&&(t=(7&e)<<18|h()<<12|h()<<6|h())>=65536&&t<=1114111)return t;throw Error("Invalid UTF-8 detected")}var m={version:"2.1.2",encode:function(e){for(var t=f(e),r=t.length,n=-1,o="";++n<r;)o+=E(t[n]);return o},decode:function(e){u=f(e),_=u.length,s=0;for(var t,r=[];!1!==(t=b());)r.push(t);return function(e){for(var t,r=e.length,n=-1,o="";++n<r;)(t=e[n])>65535&&(o+=c((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=c(t);return o}(r)}};void 0===(o=function(){return m}.call(t,r,t,e))||(e.exports=o)}()}).call(this,r(182)(e),r(45))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(26);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__name=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"createRepo",value:function(e,t){return this._request("POST","/orgs/"+this.__name+"/repos",e,t)}},{key:"getRepos",value:function(e){var t=this._getOptionsWithDefaults({direction:"desc"});return this._requestAllPages("/orgs/"+this.__name+"/repos",t,e)}},{key:"isMember",value:function(e,t){return this._request204or404("/orgs/"+this.__name+"/members/"+e,null,t)}},{key:"listMembers",value:function(e,t){return this._request("GET","/orgs/"+this.__name+"/members",e,t)}},{key:"getTeams",value:function(e){return this._requestAllPages("/orgs/"+this.__name+"/teams",void 0,e)}},{key:"createTeam",value:function(e,t){return this._request("POST","/orgs/"+this.__name+"/teams",e,t)}},{key:"listProjects",value:function(e){return this._requestAllPages("/orgs/"+this.__name+"/projects",{AcceptHeader:"inertia-preview"},e)}},{key:"createProject",value:function(e,t){return(e=e||{}).AcceptHeader="inertia-preview",this._request("POST","/orgs/"+this.__name+"/projects",e,t)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(26));function a(e){return e&&e.__esModule?e:{default:e}}
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2016 Matt Smith (Development Seed)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=(0,a(r(46)).default)("github:team"),l=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n));return o.__teamId=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"getTeam",value:function(e){return i("Fetching Team "+this.__teamId),this._request("Get","/teams/"+this.__teamId,void 0,e)}},{key:"listRepos",value:function(e){return i("Fetching repositories for Team "+this.__teamId),this._requestAllPages("/teams/"+this.__teamId+"/repos",void 0,e)}},{key:"editTeam",value:function(e,t){return i("Editing Team "+this.__teamId),this._request("PATCH","/teams/"+this.__teamId,e,t)}},{key:"listMembers",value:function(e,t){return i("Getting members of Team "+this.__teamId),this._requestAllPages("/teams/"+this.__teamId+"/members",e,t)}},{key:"getMembership",value:function(e,t){return i("Getting membership of user "+e+" in Team "+this.__teamId),this._request("GET","/teams/"+this.__teamId+"/memberships/"+e,void 0,t)}},{key:"addMembership",value:function(e,t,r){return i("Adding user "+e+" to Team "+this.__teamId),this._request("PUT","/teams/"+this.__teamId+"/memberships/"+e,t,r)}},{key:"isManagedRepo",value:function(e,t,r){return i("Getting repo management by Team "+this.__teamId+" for repo "+e+"/"+t),this._request204or404("/teams/"+this.__teamId+"/repos/"+e+"/"+t,void 0,r)}},{key:"manageRepo",value:function(e,t,r,n){return i("Adding or Updating repo management by Team "+this.__teamId+" for repo "+e+"/"+t),this._request204or404("/teams/"+this.__teamId+"/repos/"+e+"/"+t,r,n,"PUT")}},{key:"unmanageRepo",value:function(e,t,r){return i("Remove repo management by Team "+this.__teamId+" for repo "+e+"/"+t),this._request204or404("/teams/"+this.__teamId+"/repos/"+e+"/"+t,void 0,r,"DELETE")}},{key:"deleteTeam",value:function(e){return i("Deleting Team "+this.__teamId),this._request204or404("/teams/"+this.__teamId,void 0,e,"DELETE")}}]),t}(o.default);e.exports=l},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(26);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(e,t){return this._request("POST","/markdown",e,t,!0)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){"use strict";var n,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(26);
/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.
ithub.js is freely distributable.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
var i=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n,"inertia-preview"));return o.__id=e,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"getProject",value:function(e){return this._request("GET","/projects/"+this.__id,null,e)}},{key:"updateProject",value:function(e,t){return this._request("PATCH","/projects/"+this.__id,e,t)}},{key:"deleteProject",value:function(e){return this._request("DELETE","/projects/"+this.__id,null,e)}},{key:"listProjectColumns",value:function(e){return this._requestAllPages("/projects/"+this.__id+"/columns",null,e)}},{key:"getProjectColumn",value:function(e,t){return this._request("GET","/projects/columns/"+e,null,t)}},{key:"createProjectColumn",value:function(e,t){return this._request("POST","/projects/"+this.__id+"/columns",e,t)}},{key:"updateProjectColumn",value:function(e,t,r){return this._request("PATCH","/projects/columns/"+e,t,r)}},{key:"deleteProjectColumn",value:function(e,t){return this._request("DELETE","/projects/columns/"+e,null,t)}},{key:"moveProjectColumn",value:function(e,t,r){return this._request("POST","/projects/columns/"+e+"/moves",{position:t},r)}},{key:"listProjectCards",value:function(e){var t=this;return this.listProjectColumns().then((function(e){var r=e.data;return Promise.all(r.map((function(e){return t._requestAllPages("/projects/columns/"+e.id+"/cards",null)})))})).then((function(t){var r=t.reduce((function(e,t){var r=t.data;return e.push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(r)),e}),[]);return e&&e(null,r),r})).catch((function(t){if(!e)throw t;e(t)}))}},{key:"listColumnCards",value:function(e,t){return this._requestAllPages("/projects/columns/"+e+"/cards",null,t)}},{key:"getProjectCard",value:function(e,t){return this._request("GET","/projects/columns/cards/"+e,null,t)}},{key:"createProjectCard",value:function(e,t,r){return this._request("POST","/projects/columns/"+e+"/cards",t,r)}},{key:"updateProjectCard",value:function(e,t,r){return this._request("PATCH","/projects/columns/cards/"+e,t,r)}},{key:"deleteProjectCard",value:function(e,t){return this._request("DELETE","/projects/columns/cards/"+e,null,t)}},{key:"moveProjectCard",value:function(e,t,r,n){return this._request("POST","/projects/columns/cards/"+e+"/moves",{position:t,column_id:r},n)}}]),t}(((n=a)&&n.__esModule?n:{default:n}).default);e.exports=i},function(e,t,r){e.exports=r(188)},function(e,t,r){r(189),e.exports=r(21).Object.assign},function(e,t,r){var n=r(24);n(n.S+n.F,"Object",{assign:r(103)})},function(e,t,r){var n=r(35),o=r(68),a=r(191);e.exports=function(e){return function(t,r,i){var l,u=n(t),_=o(u.length),s=a(i,_);if(e&&r!=r){for(;_>s;)if((l=u[s++])!=l)return!0}else for(;_>s;s++)if((e||s in u)&&u[s]===r)return e||s||0;return!e&&-1}}},function(e,t,r){var n=r(69),o=Math.max,a=Math.min;e.exports=function(e,t){return(e=n(e))<0?o(e+t,0):a(e,t)}},function(e,t,r){e.exports=r(193)},function(e,t,r){r(194),e.exports=r(21).Object.keys},function(e,t,r){var n=r(48),o=r(40);r(105)("keys",(function(){return function(e){return o(n(e))}}))},function(e,t,r){e.exports=r(196)},function(e,t,r){r(197);var n=r(21).Object;e.exports=function(e,t){return n.create(e,t)}},function(e,t,r){var n=r(24);n(n.S,"Object",{create:r(74)})},function(e,t,r){var n=r(33),o=r(37),a=r(40);e.exports=r(29)?Object.defineProperties:function(e,t){o(e);for(var r,i=a(t),l=i.length,u=0;l>u;)n.f(e,r=i[u++],t[r]);return e}},function(e,t,r){var n=r(27).document;e.exports=n&&n.documentElement},function(e,t,r){"use strict";var n=r(201);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,a,i){if(i!==n){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];function n(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=null;return t.forEach((function(e){if(null==o){var t=e.apply(void 0,r);null!=t&&(o=t)}})),o}return(0,a.default)(n)};var n,o=r(75),a=(n=o)&&n.__esModule?n:{default:n};e.exports=t.default},function(e,t,r){e.exports=r(204)},function(e,t,r){r(205),e.exports=r(21).Object.values},function(e,t,r){var n=r(24),o=r(106)(!1);n(n.S,"Object",{values:function(e){return o(e)}})},function(e,t,r){"use strict";e.exports=r(207)},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n="function"==typeof Symbol&&Symbol.for,o=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,l=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,_=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,E=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,b=n?Symbol.for("react.lazy"):60116,m=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,O=n?Symbol.for("react.scope"):60119;function P(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case c:case f:case i:case u:case l:case d:return e;default:switch(e=e&&e.$$typeof){case s:case p:case b:case h:case _:return e;default:return t}}case a:return t}}}function g(e){return P(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=_,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=b,t.Memo=h,t.Portal=a,t.Profiler=u,t.StrictMode=l,t.Suspense=d,t.isAsyncMode=function(e){return g(e)||P(e)===c},t.isConcurrentMode=g,t.isContextConsumer=function(e){return P(e)===s},t.isContextProvider=function(e){return P(e)===_},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return P(e)===p},t.isFragment=function(e){return P(e)===i},t.isLazy=function(e){return P(e)===b},t.isMemo=function(e){return P(e)===h},t.isPortal=function(e){return P(e)===a},t.isProfiler=function(e){return P(e)===u},t.isStrictMode=function(e){return P(e)===l},t.isSuspense=function(e){return P(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===l||e===d||e===E||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===h||e.$$typeof===_||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===v||e.$$typeof===O||e.$$typeof===m)},t.typeOf=P},function(e,t,r){r(209),e.exports=r(21).Object.entries},function(e,t,r){var n=r(24),o=r(106)(!0);n(n.S,"Object",{entries:function(e){return o(e)}})},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o,a,i,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var _=[r,n,o,a,i,l],s=0;(u=new Error(t.replace(/%s/g,(function(){return _[s++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(76)),u=n(r(0)),_=n(r(3)),s=n(r(25)),c=n(r(55)),f={href:_.default.string,onClick:_.default.func,onKeyDown:_.default.func,disabled:_.default.bool,role:_.default.string,tabIndex:_.default.oneOfType([_.default.number,_.default.string]),componentClass:s.default};function p(e){return!e||"#"===e.trim()}var d=function(e){function t(t,r){var n;return(n=e.call(this,t,r)||this).handleClick=n.handleClick.bind((0,l.default)((0,l.default)(n))),n.handleKeyDown=n.handleKeyDown.bind((0,l.default)((0,l.default)(n))),n}(0,i.default)(t,e);var r=t.prototype;return r.handleClick=function(e){var t=this.props,r=t.disabled,n=t.href,o=t.onClick;(r||p(n))&&e.preventDefault(),r?e.stopPropagation():o&&o(e)},r.handleKeyDown=function(e){" "===e.key&&(e.preventDefault(),this.handleClick(e))},r.render=function(){var e=this.props,t=e.componentClass,r=e.disabled,n=e.onKeyDown,i=(0,a.default)(e,["componentClass","disabled","onKeyDown"]);return p(i.href)&&(i.role=i.role||"button",i.href=i.href||"#"),r&&(i.tabIndex=-1,i.style=(0,o.default)({pointerEvents:"none"},i.style)),u.default.createElement(t,(0,o.default)({},i,{onClick:this.handleClick,onKeyDown:(0,c.default)(this.handleKeyDown,n)}))},t}(u.default.Component);d.propTypes=f,d.defaultProps={componentClass:"a"};var E=d;t.default=E,e.exports=t.default},function(e,t,r){e.exports=r(213)},function(e,t,r){r(214);var n=r(21).Object;e.exports=function(e,t){return n.getOwnPropertyDescriptor(e,t)}},function(e,t,r){var n=r(35),o=r(108).f;r(105)("getOwnPropertyDescriptor",(function(){return function(e,t){return o(n(e),t)}}))},function(e,t,r){e.exports=r(216)},function(e,t,r){r(217);var n=r(21).Object;e.exports=function(e,t,r){return n.defineProperty(e,t,r)}},function(e,t,r){var n=r(24);n(n.S+n.F*!r(29),"Object",{defineProperty:r(33).f})},function(e,t,r){var n=r(219),o=r(228);function a(t){return e.exports=a="function"==typeof o&&"symbol"==typeof n?function(e){return typeof e}:function(e){return e&&"function"==typeof o&&e.constructor===o&&e!==o.prototype?"symbol":typeof e},a(t)}e.exports=a},function(e,t,r){e.exports=r(220)},function(e,t,r){r(221),r(110),e.exports=r(79).f("iterator")},function(e,t,r){"use strict";var n=r(222)(!0);r(109)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})}))},function(e,t,r){var n=r(69),o=r(67);e.exports=function(e){return function(t,r){var a,i,l=String(o(t)),u=n(r),_=l.length;return u<0||u>=_?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===_||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}}},function(e,t,r){"use strict";var n=r(74),o=r(52),a=r(56),i={};r(32)(i,r(30)("iterator"),(function(){return this})),e.exports=function(e,t,r){e.prototype=n(i,{next:o(1,r)}),a(e,t+" Iterator")}},function(e,t,r){var n=r(34),o=r(48),a=r(70)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,r){"use strict";var n=r(226),o=r(227),a=r(49),i=r(35);e.exports=r(109)(Array,"Array",(function(e,t){this._t=i(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,r){e.exports=r(229)},function(e,t,r){r(230),r(112),r(233),r(234),e.exports=r(21).Symbol},function(e,t,r){"use strict";var n=r(27),o=r(34),a=r(29),i=r(24),l=r(78),u=r(57).KEY,_=r(38),s=r(71),c=r(56),f=r(54),p=r(30),d=r(79),E=r(80),h=r(231),b=r(81),m=r(37),y=r(28),v=r(48),O=r(35),P=r(64),g=r(52),D=r(74),M=r(232),C=r(108),T=r(73),w=r(33),R=r(40),A=C.f,L=w.f,I=M.f,k=n.Symbol,B=n.JSON,U=B&&B.stringify,x=p("_hidden"),S=p("toPrimitive"),W={}.propertyIsEnumerable,K=s("symbol-registry"),N=s("symbols"),z=s("op-symbols"),j=Object.prototype,q="function"==typeof k&&!!T.f,F=n.QObject,V=!F||!F.prototype||!F.prototype.findChild,G=a&&_((function(){return 7!=D(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=A(j,t);n&&delete j[t],L(e,t,r),n&&e!==j&&L(j,t,n)}:L,H=function(e){var t=N[e]=D(k.prototype);return t._k=e,t},$=q&&"symbol"==typeof k.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof k},Y=function(e,t,r){return e===j&&Y(z,t,r),m(e),t=P(t,!0),m(r),o(N,t)?(r.enumerable?(o(e,x)&&e[x][t]&&(e[x][t]=!1),r=D(r,{enumerable:g(0,!1)})):(o(e,x)||L(e,x,g(1,{})),e[x][t]=!0),G(e,t,r)):L(e,t,r)},Q=function(e,t){m(e);for(var r,n=h(t=O(t)),o=0,a=n.length;a>o;)Y(e,r=n[o++],t[r]);return e},X=function(e){var t=W.call(this,e=P(e,!0));return!(this===j&&o(N,e)&&!o(z,e))&&(!(t||!o(this,e)||!o(N,e)||o(this,x)&&this[x][e])||t)},J=function(e,t){if(e=O(e),t=P(t,!0),e!==j||!o(N,t)||o(z,t)){var r=A(e,t);return!r||!o(N,t)||o(e,x)&&e[x][t]||(r.enumerable=!0),r}},Z=function(e){for(var t,r=I(O(e)),n=[],a=0;r.length>a;)o(N,t=r[a++])||t==x||t==u||n.push(t);return n},ee=function(e){for(var t,r=e===j,n=I(r?z:O(e)),a=[],i=0;n.length>i;)!o(N,t=n[i++])||r&&!o(j,t)||a.push(N[t]);return a};q||(l((k=function(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(r){this===j&&t.call(z,r),o(this,x)&&o(this[x],e)&&(this[x][e]=!1),G(this,e,g(1,r))};return a&&V&&G(j,e,{configurable:!0,set:t}),H(e)}).prototype,"toString",(function(){return this._k})),C.f=J,w.f=Y,r(111).f=M.f=Z,r(47).f=X,T.f=ee,a&&!r(53)&&l(j,"propertyIsEnumerable",X,!0),d.f=function(e){return H(p(e))}),i(i.G+i.W+i.F*!q,{Symbol:k});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;te.length>re;)p(te[re++]);for(var ne=R(p.store),oe=0;ne.length>oe;)E(ne[oe++]);i(i.S+i.F*!q,"Symbol",{for:function(e){return o(K,e+="")?K[e]:K[e]=k(e)},keyFor:function(e){if(!$(e))throw TypeError(e+" is not a symbol!");for(var t in K)if(K[t]===e)return t},useSetter:function(){V=!0},useSimple:function(){V=!1}}),i(i.S+i.F*!q,"Object",{create:function(e,t){return void 0===t?D(e):Q(D(e),t)},defineProperty:Y,defineProperties:Q,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ae=_((function(){T.f(1)}));i(i.S+i.F*ae,"Object",{getOwnPropertySymbols:function(e){return T.f(v(e))}}),B&&i(i.S+i.F*(!q||_((function(){var e=k();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))}))),"JSON",{stringify:function(e){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);if(r=t=n[1],(y(t)||void 0!==e)&&!$(e))return b(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!$(t))return t}),n[1]=t,U.apply(B,n)}}),k.prototype[S]||r(32)(k.prototype,S,k.prototype.valueOf),c(k,"Symbol"),c(Math,"Math",!0),c(n.JSON,"JSON",!0)},function(e,t,r){var n=r(40),o=r(73),a=r(47);e.exports=function(e){var t=n(e),r=o.f;if(r)for(var i,l=r(e),u=a.f,_=0;l.length>_;)u.call(e,i=l[_++])&&t.push(i);return t}},function(e,t,r){var n=r(35),o=r(111).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(n(e))}},function(e,t,r){r(80)("asyncIterator")},function(e,t,r){r(80)("observable")},function(e,t,r){e.exports=r(236)},function(e,t,r){r(112),r(110),r(237),r(246),r(248),e.exports=r(21).WeakMap},function(e,t,r){"use strict";var n,o=r(27),a=r(82)(0),i=r(78),l=r(57),u=r(103),_=r(240),s=r(28),c=r(84),f=r(84),p=!o.ActiveXObject&&"ActiveXObject"in o,d=l.getWeak,E=Object.isExtensible,h=_.ufstore,b=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(e){if(s(e)){var t=d(e);return!0===t?h(c(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return _.def(c(this,"WeakMap"),e,t)}},y=e.exports=r(245)("WeakMap",b,m,_,!0,!0);f&&p&&(u((n=_.getConstructor(b,"WeakMap")).prototype,m),l.NEED=!0,a(["delete","has","get","set"],(function(e){var t=y.prototype,r=t[e];i(t,e,(function(t,o){if(s(t)&&!E(t)){this._f||(this._f=new n);var a=this._f[e](t,o);return"set"==e?this:a}return r.call(this,t,o)}))})))},function(e,t,r){var n=r(239);e.exports=function(e,t){return new(n(e))(t)}},function(e,t,r){var n=r(28),o=r(81),a=r(30)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),n(t)&&null===(t=t[a])&&(t=void 0)),void 0===t?Array:t}},function(e,t,r){"use strict";var n=r(113),o=r(57).getWeak,a=r(37),i=r(28),l=r(114),u=r(83),_=r(82),s=r(34),c=r(84),f=_(5),p=_(6),d=0,E=function(e){return e._l||(e._l=new h)},h=function(){this.a=[]},b=function(e,t){return f(e.a,(function(e){return e[0]===t}))};h.prototype={get:function(e){var t=b(this,e);if(t)return t[1]},has:function(e){return!!b(this,e)},set:function(e,t){var r=b(this,e);r?r[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,r,a){var _=e((function(e,n){l(e,_,t,"_i"),e._t=t,e._i=d++,e._l=void 0,null!=n&&u(n,r,e[a],e)}));return n(_.prototype,{delete:function(e){if(!i(e))return!1;var r=o(e);return!0===r?E(c(this,t)).delete(e):r&&s(r,this._i)&&delete r[this._i]},has:function(e){if(!i(e))return!1;var r=o(e);return!0===r?E(c(this,t)).has(e):r&&s(r,this._i)}}),_},def:function(e,t,r){var n=o(a(t),!0);return!0===n?E(e).set(t,r):n[e._i]=r,e},ufstore:E}},function(e,t,r){var n=r(37);e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){var a=e.return;throw void 0!==a&&n(a.call(e)),t}}},function(e,t,r){var n=r(49),o=r(30)("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(n.Array===e||a[o]===e)}},function(e,t,r){var n=r(244),o=r(30)("iterator"),a=r(49);e.exports=r(21).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||a[n(e)]}},function(e,t,r){var n=r(66),o=r(30)("toStringTag"),a="Arguments"==n(function(){return arguments}());e.exports=function(e){var t,r,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?r:a?n(t):"Object"==(i=n(t))&&"function"==typeof t.callee?"Arguments":i}},function(e,t,r){"use strict";var n=r(27),o=r(24),a=r(57),i=r(38),l=r(32),u=r(113),_=r(83),s=r(114),c=r(28),f=r(56),p=r(33).f,d=r(82)(0),E=r(29);e.exports=function(e,t,r,h,b,m){var y=n[e],v=y,O=b?"set":"add",P=v&&v.prototype,g={};return E&&"function"==typeof v&&(m||P.forEach&&!i((function(){(new v).entries().next()})))?(v=t((function(t,r){s(t,v,e,"_c"),t._c=new y,null!=r&&_(r,b,t[O],t)})),d("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","),(function(e){var t="add"==e||"set"==e;!(e in P)||m&&"clear"==e||l(v.prototype,e,(function(r,n){if(s(this,v,e),!t&&m&&!c(r))return"get"==e&&void 0;var o=this._c[e](0===r?0:r,n);return t?this:o}))})),m||p(v.prototype,"size",{get:function(){return this._c.size}})):(v=h.getConstructor(t,e,b,O),u(v.prototype,r),a.NEED=!0),f(v,e),g[e]=v,o(o.G+o.W+o.F,g),m||h.setStrong(v,e,b),v}},function(e,t,r){r(247)("WeakMap")},function(e,t,r){"use strict";var n=r(24);e.exports=function(e){n(n.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,r){r(249)("WeakMap")},function(e,t,r){"use strict";var n=r(24),o=r(100),a=r(51),i=r(83);e.exports=function(e){n(n.S,e,{from:function(e){var t,r,n,l,u=arguments[1];return o(this),(t=void 0!==u)&&o(u),null==e?new this:(r=[],t?(n=0,l=a(u,arguments[2],2),i(e,!1,(function(e){r.push(l(e,n++))}))):i(e,!1,r.push,r),new this(r))}})}},function(e,t,r){e.exports=r(251)},function(e,t,r){r(252),e.exports=r(21).Array.isArray},function(e,t,r){var n=r(24);n(n.S,"Array",{isArray:r(81)})},function(e,t,r){"use strict";var n=r(77),o=r(9);t.__esModule=!0,t.default=void 0;var a=o(r(13)),i=o(r(12)),l=o(r(11)),u=o(r(15)),_=n(r(0)),s=o(r(3)),c=o(r(254)),f=o(r(25)),p=o(r(120)),d=(0,l.default)({},c.default.propTypes,{show:s.default.bool,rootClose:s.default.bool,onHide:s.default.func,animation:s.default.oneOfType([s.default.bool,f.default]),onEnter:s.default.func,onEntering:s.default.func,onEntered:s.default.func,onExit:s.default.func,onExiting:s.default.func,onExited:s.default.func,placement:s.default.oneOf(["top","right","bottom","left"])}),E={animation:p.default,rootClose:!1,show:!1,placement:"right"},h=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.animation,n=t.children,o=(0,a.default)(t,["animation","children"]),i=!0===r?p.default:r||null;return e=i?n:(0,_.cloneElement)(n,{className:(0,u.default)(n.props.className,"in")}),_.default.createElement(c.default,(0,l.default)({},o,{transition:i}),e)},t}(_.default.Component);h.propTypes=d,h.defaultProps=E;var b=h;t.default=b,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=s(r(3)),a=s(r(25)),i=s(r(0)),l=s(r(115)),u=s(r(256)),_=s(r(269));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,r,n));return o.handleHidden=function(){var e;(o.setState({exited:!0}),o.props.onExited)&&(e=o.props).onExited.apply(e,arguments)},o.state={exited:!r.show},o.onHiddenListener=o.handleHidden.bind(o),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.UNSAFE_componentWillReceiveProps=function(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},t.prototype.render=function(){var e=this.props,t=e.container,r=e.containerPadding,n=e.target,o=e.placement,a=e.shouldUpdatePosition,s=e.rootClose,c=e.children,f=e.transition,p=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}(e,["container","containerPadding","target","placement","shouldUpdatePosition","rootClose","children","transition"]);if(!(p.show||f&&!this.state.exited))return null;var d=c;if(d=i.default.createElement(u.default,{container:t,containerPadding:r,target:n,placement:o,shouldUpdatePosition:a},d),f){var E=p.onExit,h=p.onExiting,b=p.onEnter,m=p.onEntering,y=p.onEntered;d=i.default.createElement(f,{in:p.show,appear:!0,onExit:E,onExiting:h,onExited:this.onHiddenListener,onEnter:b,onEntering:m,onEntered:y},d)}return s&&(d=i.default.createElement(_.default,{onRootClose:p.onHide,event:p.rootCloseEvent},d)),i.default.createElement(l.default,{container:t},d)},t}(i.default.Component);c.propTypes=n({},l.default.propTypes,u.default.propTypes,{show:o.default.bool,rootClose:o.default.bool,rootCloseEvent:_.default.propTypes.event,onHide:function(e){var t=o.default.func;e.rootClose&&(t=t.isRequired);for(var r=arguments.length,n=Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];return t.apply(void 0,[e].concat(n))},transition:a.default,onEnter:o.default.func,onEntering:o.default.func,onEntered:o.default.func,onExit:o.default.func,onExiting:o.default.func,onExited:o.default.func}),t.default=c,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=_(r(3)),o=_(r(58)),a=_(r(0)),i=_(r(22)),l=_(r(59)),u=_(r(42));function _(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){var r,n;s(this,t);for(var o=arguments.length,_=Array(o),f=0;f<o;f++)_[f]=arguments[f];return r=n=c(this,e.call.apply(e,[this].concat(_))),n._mountOverlayTarget=function(){n._overlayTarget||(n._overlayTarget=document.createElement("div"),n._portalContainerNode=(0,l.default)(n.props.container,(0,u.default)(n).body),n._portalContainerNode.appendChild(n._overlayTarget))},n._unmountOverlayTarget=function(){n._overlayTarget&&(n._portalContainerNode.removeChild(n._overlayTarget),n._overlayTarget=null),n._portalContainerNode=null},n._renderOverlay=function(){var e=n.props.children?a.default.Children.only(n.props.children):null;if(null!==e){n._mountOverlayTarget();var t=!n._overlayInstance;n._overlayInstance=i.default.unstable_renderSubtreeIntoContainer(n,e,n._overlayTarget,(function(){t&&n.props.onRendered&&n.props.onRendered()}))}else n._unrenderOverlay(),n._unmountOverlayTarget()},n._unrenderOverlay=function(){n._overlayTarget&&(i.default.unmountComponentAtNode(n._overlayTarget),n._overlayInstance=null)},n.getMountNode=function(){return n._overlayTarget},c(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){this._isMounted=!0,this._renderOverlay()},t.prototype.componentDidUpdate=function(){this._renderOverlay()},t.prototype.UNSAFE_componentWillReceiveProps=function(e){this._overlayTarget&&e.container!==this.props.container&&(this._portalContainerNode.removeChild(this._overlayTarget),this._portalContainerNode=(0,l.default)(e.container,(0,u.default)(this).body),this._portalContainerNode.appendChild(this._overlayTarget))},t.prototype.componentWillUnmount=function(){this._isMounted=!1,this._unrenderOverlay(),this._unmountOverlayTarget()},t.prototype.render=function(){return null},t}(a.default.Component);f.displayName="Portal",f.propTypes={container:n.default.oneOfType([o.default,n.default.func]),onRendered:n.default.func},t.default=f,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=p(r(15)),a=p(r(3)),i=p(r(58)),l=r(0),u=p(l),_=p(r(22)),s=p(r(257)),c=p(r(59)),f=p(r(42));function p(e){return e&&e.__esModule?e:{default:e}}function d(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}var E=function(e){function t(r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,r,n));return o.getTarget=function(){var e=o.props.target,t="function"==typeof e?e():e;return t&&_.default.findDOMNode(t)||null},o.maybeUpdatePosition=function(e){var t=o.getTarget();(o.props.shouldUpdatePosition||t!==o._lastTarget||e)&&o.updatePosition(t)},o.state={positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null},o._needsFlush=!1,o._lastTarget=null,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){this.updatePosition(this.getTarget())},t.prototype.UNSAFE_componentWillReceiveProps=function(){this._needsFlush=!0},t.prototype.componentDidUpdate=function(e){this._needsFlush&&(this._needsFlush=!1,this.maybeUpdatePosition(this.props.placement!==e.placement))},t.prototype.render=function(){var e=this.props,t=e.children,r=e.className,a=d(e,["children","className"]),i=this.state,_=i.positionLeft,s=i.positionTop,c=d(i,["positionLeft","positionTop"]);delete a.target,delete a.container,delete a.containerPadding,delete a.shouldUpdatePosition;var f=u.default.Children.only(t);return(0,l.cloneElement)(f,n({},a,c,{positionLeft:_,positionTop:s,className:(0,o.default)(r,f.props.className),style:n({},f.props.style,{left:_,top:s})}))},t.prototype.updatePosition=function(e){if(this._lastTarget=e,e){var t=_.default.findDOMNode(this),r=(0,c.default)(this.props.container,(0,f.default)(this).body);this.setState((0,s.default)(this.props.placement,t,e,r,this.props.containerPadding))}else this.setState({positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null})},t}(u.default.Component);E.propTypes={target:a.default.oneOfType([i.default,a.default.func]),container:a.default.oneOfType([i.default,a.default.func]),containerPadding:a.default.number,placement:a.default.oneOf(["top","right","bottom","left"]),shouldUpdatePosition:a.default.bool},E.displayName="Position",E.defaultProps={containerPadding:0,placement:"right",shouldUpdatePosition:!1},t.default=E,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t,r,a,i){var l="BODY"===a.tagName?(0,n.default)(r):(0,o.default)(r,a),_=(0,n.default)(t),s=_.height,c=_.width,f=void 0,p=void 0,d=void 0,E=void 0;if("left"===e||"right"===e){p=l.top+(l.height-s)/2,f="left"===e?l.left-c:l.left+l.width;var h=function(e,t,r,n){var o=u(r),a=o.scroll,i=o.height,l=e-n-a,_=e+n-a+t;return l<0?-l:_>i?i-_:0}(p,s,a,i);p+=h,E=50*(1-2*h/s)+"%",d=void 0}else{if("top"!==e&&"bottom"!==e)throw new Error('calcOverlayPosition(): No such placement of "'+e+'" found.');f=l.left+(l.width-c)/2,p="top"===e?l.top-s:l.top+l.height;var b=function(e,t,r,n){var o=u(r).width,a=e-n,i=e+n+t;if(a<0)return-a;if(i>o)return o-i;return 0}(f,c,a,i);f+=b,d=50*(1-2*b/c)+"%",E=void 0}return{positionLeft:f,positionTop:p,arrowOffsetLeft:d,arrowOffsetTop:E}};var n=l(r(116)),o=l(r(258)),a=l(r(118)),i=l(r(42));function l(e){return e&&e.__esModule?e:{default:e}}function u(e){var t=void 0,r=void 0,o=void 0;if("BODY"===e.tagName)t=window.innerWidth,r=window.innerHeight,o=(0,a.default)((0,i.default)(e).documentElement)||(0,a.default)(e);else{var l=(0,n.default)(e);t=l.width,r=l.height,o=(0,a.default)(e)}return{width:t,height:r,scroll:o}}e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){var r,n={top:0,left:0};"fixed"===(0,_.default)(e,"position")?r=e.getBoundingClientRect():(t=t||(0,i.default)(e),r=(0,a.default)(e),"html"!==function(e){return e.nodeName&&e.nodeName.toLowerCase()}(t)&&(n=(0,a.default)(t)),n.top+=parseInt((0,_.default)(t,"borderTopWidth"),10)-(0,l.default)(t)||0,n.left+=parseInt((0,_.default)(t,"borderLeftWidth"),10)-(0,u.default)(t)||0);return(0,o.default)({},r,{top:r.top-n.top-(parseInt((0,_.default)(e,"marginTop"),10)||0),left:r.left-n.left-(parseInt((0,_.default)(e,"marginLeft"),10)||0)})};var o=n(r(259)),a=n(r(116)),i=n(r(260)),l=n(r(118)),u=n(r(268)),_=n(r(85));e.exports=t.default},function(e,t){function r(){return e.exports=r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},r.apply(this,arguments)}e.exports=r},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e),r=e&&e.offsetParent;for(;r&&"html"!==i(e)&&"static"===(0,a.default)(r,"position");)r=r.offsetParent;return r||t.documentElement};var o=n(r(43)),a=n(r(85));function i(e){return e.nodeName&&e.nodeName.toLowerCase()}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(n,(function(e,t){return t.toUpperCase()}))};var n=/-(.)/g;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){return(0,o.default)(e).replace(a,"-ms-")};var o=n(r(263)),a=/^ms-/;e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(n,"-$1").toLowerCase()};var n=/([A-Z])/g;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var r=e.style;"float"==(t=(0,o.default)(t))&&(t="styleFloat");var n=e.currentStyle[t]||null;if(null==n&&r&&r[t]&&(n=r[t]),i.test(n)&&!a.test(t)){var l=r.left,u=e.runtimeStyle,_=u&&u.left;_&&(u.left=e.currentStyle.left),r.left="fontSize"===t?"1em":n,n=r.pixelLeft+"px",r.left=l,_&&(u.left=_)}return n}}};var o=n(r(117)),a=/^(top|right|bottom|left)$/,i=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,a,i,l,u,_,s,c,f,p,d,E=n(r(31)),h="transform";if(t.transform=h,t.animationEnd=i,t.transitionEnd=a,t.transitionDelay=s,t.transitionTiming=_,t.transitionDuration=u,t.transitionProperty=l,t.animationDelay=d,t.animationTiming=p,t.animationDuration=f,t.animationName=c,E.default){var b=function(){for(var e,t,r=document.createElement("div").style,n={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(n),a="",i=0;i<o.length;i++){var l=o[i];if(l+"TransitionProperty"in r){a="-"+l.toLowerCase(),e=n[l]("TransitionEnd"),t=n[l]("AnimationEnd");break}}!e&&"transitionProperty"in r&&(e="transitionend");!t&&"animationName"in r&&(t="animationend");return r=null,{animationEnd:t,transitionEnd:e,prefix:a}}();o=b.prefix,t.transitionEnd=a=b.transitionEnd,t.animationEnd=i=b.animationEnd,t.transform=h=o+"-"+h,t.transitionProperty=l=o+"-transition-property",t.transitionDuration=u=o+"-transition-duration",t.transitionDelay=s=o+"-transition-delay",t.transitionTiming=_=o+"-transition-timing-function",t.animationName=c=o+"-animation-name",t.animationDuration=f=o+"-animation-duration",t.animationTiming=p=o+"-animation-delay",t.animationDelay=d=o+"-animation-timing-function"}var m={transform:h,end:a,property:l,timing:_,delay:s,duration:u};t.default=m},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return!(!e||!n.test(e))};var n=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){var r=(0,o.default)(e);if(void 0===t)return r?"pageXOffset"in r?r.pageXOffset:r.document.documentElement.scrollLeft:e.scrollLeft;r?r.scrollTo(t,"pageYOffset"in r?r.pageYOffset:r.document.documentElement.scrollTop):e.scrollLeft=t};var o=n(r(60));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=_(r(50)),o=_(r(3)),a=_(r(0)),i=_(r(22)),l=_(r(119)),u=_(r(42));function _(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,r,o));return a.addEventListeners=function(){var e=a.props.event,t=(0,u.default)(a);a.documentMouseCaptureListener=(0,l.default)(t,e,a.handleMouseCapture,!0),a.documentMouseListener=(0,l.default)(t,e,a.handleMouse),a.documentKeyupListener=(0,l.default)(t,"keyup",a.handleKeyUp)},a.removeEventListeners=function(){a.documentMouseCaptureListener&&a.documentMouseCaptureListener.remove(),a.documentMouseListener&&a.documentMouseListener.remove(),a.documentKeyupListener&&a.documentKeyupListener.remove()},a.handleMouseCapture=function(e){var t;a.preventMouseRootClose=!!((t=e).metaKey||t.altKey||t.ctrlKey||t.shiftKey)||!function(e){return 0===e.button}(e)||(0,n.default)(i.default.findDOMNode(a),e.target)},a.handleMouse=function(e){!a.preventMouseRootClose&&a.props.onRootClose&&a.props.onRootClose(e)},a.handleKeyUp=function(e){27===e.keyCode&&a.props.onRootClose&&a.props.onRootClose(e)},a.preventMouseRootClose=!1,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){this.props.disabled||this.addEventListeners()},t.prototype.componentDidUpdate=function(e){!this.props.disabled&&e.disabled?this.addEventListeners():this.props.disabled&&!e.disabled&&this.removeEventListeners()},t.prototype.componentWillUnmount=function(){this.props.disabled||this.removeEventListeners()},t.prototype.render=function(){return this.props.children},t}(a.default.Component);s.displayName="RootCloseWrapper",s.propTypes={onRootClose:o.default.func,children:o.default.element,disabled:o.default.bool,event:o.default.oneOf(["click","mousedown"])},s.defaultProps={event:"click"},t.default=s,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(3)),o=l(r(0)),a=l(r(22)),i=r(271);r(272);function l(e){return e&&e.__esModule?e:{default:e}}t.UNMOUNTED="unmounted";t.EXITED="exited";t.ENTERING="entering";t.ENTERED="entered";t.EXITING="exiting";var u=function(e){var t,r;function n(t,r){var n;n=e.call(this,t,r)||this;var o,a=r.transitionGroup,i=a&&!a.isMounting?t.enter:t.appear;return n.appearStatus=null,t.in?i?(o="exited",n.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",n.state={status:o},n.nextCallback=null,n}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var i=n.prototype;return i.getChildContext=function(){return{transitionGroup:null}},n.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null},i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var t=null;if(e!==this.props){var r=this.state.status;this.props.in?"entering"!==r&&"entered"!==r&&(t="entering"):"entering"!==r&&"entered"!==r||(t="exiting")}this.updateStatus(!1,t)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,t,r,n=this.props.timeout;return e=t=r=n,null!=n&&"number"!=typeof n&&(e=n.exit,t=n.enter,r=void 0!==n.appear?n.appear:t),{exit:e,enter:t,appear:r}},i.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var r=a.default.findDOMNode(this);"entering"===t?this.performEnter(r,e):this.performExit(r)}else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},i.performEnter=function(e,t){var r=this,n=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts(),i=o?a.appear:a.enter;t||n?(this.props.onEnter(e,o),this.safeSetState({status:"entering"},(function(){r.props.onEntering(e,o),r.onTransitionEnd(e,i,(function(){r.safeSetState({status:"entered"},(function(){r.props.onEntered(e,o)}))}))}))):this.safeSetState({status:"entered"},(function(){r.props.onEntered(e)}))},i.performExit=function(e){var t=this,r=this.props.exit,n=this.getTimeouts();r?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,n.exit,(function(){t.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},i.setNextCallback=function(e){var t=this,r=!0;return this.nextCallback=function(n){r&&(r=!1,t.nextCallback=null,e(n))},this.nextCallback.cancel=function(){r=!1},this.nextCallback},i.onTransitionEnd=function(e,t,r){this.setNextCallback(r);var n=null==t&&!this.props.addEndListener;e&&!n?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},i.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,r=t.children,n=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(t,["children"]);if(delete n.in,delete n.mountOnEnter,delete n.unmountOnExit,delete n.appear,delete n.enter,delete n.exit,delete n.timeout,delete n.addEndListener,delete n.onEnter,delete n.onEntering,delete n.onEntered,delete n.onExit,delete n.onExiting,delete n.onExited,"function"==typeof r)return r(e,n);var a=o.default.Children.only(r);return o.default.cloneElement(a,n)},n}(o.default.Component);function _(){}u.contextTypes={transitionGroup:n.object},u.childContextTypes={transitionGroup:function(){}},u.propTypes={},u.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:_,onEntering:_,onEntered:_,onExit:_,onExiting:_,onExited:_},u.UNMOUNTED=0,u.EXITED=1,u.ENTERING=2,u.ENTERED=3,u.EXITING=4;var s=(0,i.polyfill)(u);t.default=s},function(e,t,r){"use strict";function n(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var r=this.constructor.getDerivedStateFromProps(e,t);return null!=r?r:null}.bind(this))}function a(e,t){try{var r=this.props,n=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(r,n)}finally{this.props=r,this.state=n}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var r=null,i=null,l=null;if("function"==typeof t.componentWillMount?r="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(r="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==r||null!==i||null!==l){var u=e.displayName||e.name,_="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+u+" uses "+_+" but also contains the following legacy lifecycles:"+(null!==r?"\n  "+r:"")+(null!==i?"\n  "+i:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=n,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,r){var n=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:r;s.call(this,e,t,n)}}return e}r.r(t),r.d(t,"polyfill",(function(){return i})),n.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,t,r){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0;var n;(n=r(3))&&n.__esModule;t.timeoutsShape=null;t.classNamesShape=null},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,r,n,o,a){var i=n||"<<anonymous>>",l=a||r;if(null==t[r])return new Error("The "+o+" `"+l+"` is required to make `"+i+"` accessible for users of assistive technologies such as screen readers.");for(var u=arguments.length,_=Array(u>5?u-5:0),s=5;s<u;s++)_[s-5]=arguments[s];return e.apply(void 0,[t,r,n,o,a].concat(_))}},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(0));var a={map:function(e,t,r){var n=0;return o.default.Children.map(e,(function(e){return o.default.isValidElement(e)?t.call(r,e,n++):e}))},forEach:function(e,t,r){var n=0;o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&t.call(r,e,n++)}))},count:function(e){var t=0;return o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&++t})),t},find:function(e,t,r){var n,a=0;return o.default.Children.forEach(e,(function(e){n||o.default.isValidElement(e)&&t.call(r,e,a++)&&(n=e)})),n},filter:function(e,t,r){var n=0,a=[];return o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&t.call(r,e,n++)&&a.push(e)})),a},every:function(e,t,r){var n=0,a=!0;return o.default.Children.forEach(e,(function(e){a&&o.default.isValidElement(e)&&(t.call(r,e,n++)||(a=!1))})),a},some:function(e,t,r){var n=0,a=!1;return o.default.Children.forEach(e,(function(e){a||o.default.isValidElement(e)&&t.call(r,e,n++)&&(a=!0)})),a},toArray:function(e){var t=[];return o.default.Children.forEach(e,(function(e){o.default.isValidElement(e)&&t.push(e)})),t}};t.default=a,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(13)),a=n(r(11)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=n(r(276)),c=r(18),f={$bs_formGroup:_.default.object},p=function(e){function t(){return e.apply(this,arguments)||this}(0,i.default)(t,e);var r=t.prototype;return r.getGlyph=function(e){switch(e){case"success":return"ok";case"warning":return"warning-sign";case"error":return"remove";default:return null}},r.renderDefaultFeedback=function(e,t,r,n){var o=this.getGlyph(e&&e.validationState);return o?u.default.createElement(s.default,(0,a.default)({},n,{glyph:o,className:(0,l.default)(t,r)})):null},r.render=function(){var e=this.props,t=e.className,r=e.children,n=(0,o.default)(e,["className","children"]),i=(0,c.splitBsProps)(n),_=i[0],s=i[1],f=(0,c.getClassSet)(_);if(!r)return this.renderDefaultFeedback(this.context.$bs_formGroup,t,f,s);var p=u.default.Children.only(r);return u.default.cloneElement(p,(0,a.default)({},s,{className:(0,l.default)(p.props.className,t,f)}))},t}(u.default.Component);p.defaultProps={bsRole:"feedback"},p.contextTypes=f;var d=(0,c.bsClass)("form-control-feedback",p);t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c={glyph:_.default.string.isRequired},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.glyph,n=t.className,i=(0,a.default)(t,["glyph","className"]),_=(0,s.splitBsProps)(i),c=_[0],f=_[1],p=(0,o.default)({},(0,s.getClassSet)(c),((e={})[(0,s.prefix)(c,r)]=!0,e));return u.default.createElement("span",(0,o.default)({},f,{className:(0,l.default)(n,p)}))},t}(u.default.Component);f.propTypes=c;var p=(0,s.bsClass)("glyphicon",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(25)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"p"};var p=(0,s.bsClass)("form-control-static",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(86));t.on=o.default;var a=n(r(87));t.off=a.default;var i=n(r(279));t.filter=i.default;var l=n(r(281));t.listen=l.default;var u={on:o.default,off:a.default,filter:i.default,listen:l.default};t.default=u},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){return function(r){var n=r.currentTarget,i=r.target;(0,a.default)(n,e).some((function(e){return(0,o.default)(e,i)}))&&t.call(this,r)}};var o=n(r(50)),a=n(r(280));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){var r,a="#"===t[0],i="."===t[0],l=a||i?t.slice(1):t;if(n.test(l))return a?(e=e.getElementById?e:document,(r=e.getElementById(l))?[r]:[]):e.getElementsByClassName&&i?o(e.getElementsByClassName(l)):o(e.getElementsByTagName(t));return o(e.querySelectorAll(t))};var n=/^[\w-]*$/,o=Function.prototype.bind.call(Function.prototype.call,[].slice);e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(31)),a=n(r(86)),i=n(r(87)),l=function(){};o.default&&(l=function(e,t,r,n){return(0,a.default)(e,t,r,n),function(){(0,i.default)(e,t,r,n)}});var u=l;t.default=u,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=P(r(283)),a=P(r(50)),i=P(r(31)),l=P(r(3)),u=P(r(58)),_=P(r(284)),s=P(r(25)),c=r(0),f=P(c),p=P(r(22)),d=P(r(41)),E=P(r(286)),h=P(r(115)),b=P(r(291)),m=P(r(119)),y=P(r(292)),v=P(r(59)),O=P(r(42));function P(e){return e&&e.__esModule?e:{default:e}}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function D(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var M=new E.default,C=function(e){function t(){var r,n;g(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=D(this,e.call.apply(e,[this].concat(a))),T.call(n),D(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.omitProps=function(e,t){var r=Object.keys(e),n={};return r.map((function(r){Object.prototype.hasOwnProperty.call(t,r)||(n[r]=e[r])})),n},t.prototype.render=function(){var e=this.props,r=e.show,o=e.container,a=e.children,i=e.transition,l=e.backdrop,u=e.className,_=e.style,s=e.onExit,p=e.onExiting,d=e.onEnter,E=e.onEntering,m=e.onEntered,y=f.default.Children.only(a),v=this.omitProps(this.props,t.propTypes);if(!(r||i&&!this.state.exited))return null;var O=y.props,P=O.role,g=O.tabIndex;return void 0!==P&&void 0!==g||(y=(0,c.cloneElement)(y,{role:void 0===P?"document":P,tabIndex:null==g?"-1":g})),i&&(y=f.default.createElement(i,{appear:!0,unmountOnExit:!0,in:r,onExit:s,onExiting:p,onExited:this.handleHidden,onEnter:d,onEntering:E,onEntered:m},y)),f.default.createElement(h.default,{ref:this.setMountNode,container:o,onRendered:this.onPortalRendered},f.default.createElement("div",n({ref:this.setModalNodeRef,role:P||"dialog"},v,{style:_,className:u}),l&&this.renderBackdrop(),f.default.createElement(b.default,{ref:this.setDialogRef},y)))},t.prototype.UNSAFE_componentWillReceiveProps=function(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},t.prototype.UNSAFE_componentWillUpdate=function(e){!this.props.show&&e.show&&this.checkForFocus()},t.prototype.componentDidMount=function(){this._isMounted=!0,this.props.show&&this.onShow()},t.prototype.componentDidUpdate=function(e){var t=this.props.transition;!e.show||this.props.show||t?!e.show&&this.props.show&&this.onShow():this.onHide()},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.show,r=e.transition;this._isMounted=!1,(t||r&&!this.state.exited)&&this.onHide()},t.prototype.autoFocus=function(){if(this.props.autoFocus){var e=this.getDialogElement(),t=(0,o.default)((0,O.default)(this));e&&!(0,a.default)(e,t)&&(this.lastFocus=t,e.hasAttribute("tabIndex")||((0,d.default)(!1,'The modal content node does not accept focus. For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'),e.setAttribute("tabIndex",-1)),e.focus())}},t.prototype.restoreLastFocus=function(){this.lastFocus&&this.lastFocus.focus&&(this.lastFocus.focus(),this.lastFocus=null)},t.prototype.getDialogElement=function(){return p.default.findDOMNode(this.dialog)},t.prototype.isTopModal=function(){return this.props.manager.isTopModal(this)},t}(f.default.Component);C.propTypes=n({},h.default.propTypes,{show:l.default.bool,container:l.default.oneOfType([u.default,l.default.func]),onShow:l.default.func,onHide:l.default.func,backdrop:l.default.oneOfType([l.default.bool,l.default.oneOf(["static"])]),renderBackdrop:l.default.func,onEscapeKeyDown:l.default.func,onEscapeKeyUp:(0,_.default)(l.default.func,"Please use onEscapeKeyDown instead for consistency"),onBackdropClick:l.default.func,backdropStyle:l.default.object,backdropClassName:l.default.string,containerClassName:l.default.string,keyboard:l.default.bool,transition:s.default,backdropTransition:s.default,autoFocus:l.default.bool,enforceFocus:l.default.bool,restoreFocus:l.default.bool,onEnter:l.default.func,onEntering:l.default.func,onEntered:l.default.func,onExit:l.default.func,onExiting:l.default.func,onExited:l.default.func,manager:l.default.object.isRequired}),C.defaultProps={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,onHide:function(){},manager:M,renderBackdrop:function(e){return f.default.createElement("div",e)}};var T=function(){var e=this;this.state={exited:!this.props.show},this.renderBackdrop=function(){var t=e.props,r=t.backdropStyle,n=t.backdropClassName,o=t.renderBackdrop,a=t.backdropTransition,i=o({ref:function(t){return e.backdrop=t},style:r,className:n,onClick:e.handleBackdropClick});return a&&(i=f.default.createElement(a,{appear:!0,in:e.props.show},i)),i},this.onPortalRendered=function(){e.autoFocus(),e.props.onShow&&e.props.onShow()},this.onShow=function(){var t=(0,O.default)(e),r=(0,v.default)(e.props.container,t.body);e.props.manager.add(e,r,e.props.containerClassName),e._onDocumentKeydownListener=(0,m.default)(t,"keydown",e.handleDocumentKeyDown),e._onDocumentKeyupListener=(0,m.default)(t,"keyup",e.handleDocumentKeyUp),e._onFocusinListener=(0,y.default)(e.enforceFocus)},this.onHide=function(){e.props.manager.remove(e),e._onDocumentKeydownListener.remove(),e._onDocumentKeyupListener.remove(),e._onFocusinListener.remove(),e.props.restoreFocus&&e.restoreLastFocus()},this.setMountNode=function(t){e.mountNode=t?t.getMountNode():t},this.setModalNodeRef=function(t){e.modalNode=t},this.setDialogRef=function(t){e.dialog=t},this.handleHidden=function(){var t;(e.setState({exited:!0}),e.onHide(),e.props.onExited)&&(t=e.props).onExited.apply(t,arguments)},this.handleBackdropClick=function(t){t.target===t.currentTarget&&(e.props.onBackdropClick&&e.props.onBackdropClick(t),!0===e.props.backdrop&&e.props.onHide())},this.handleDocumentKeyDown=function(t){e.props.keyboard&&27===t.keyCode&&e.isTopModal()&&(e.props.onEscapeKeyDown&&e.props.onEscapeKeyDown(t),e.props.onHide())},this.handleDocumentKeyUp=function(t){e.props.keyboard&&27===t.keyCode&&e.isTopModal()&&e.props.onEscapeKeyUp&&e.props.onEscapeKeyUp(t)},this.checkForFocus=function(){i.default&&(e.lastFocus=(0,o.default)())},this.enforceFocus=function(){if(e.props.enforceFocus&&e._isMounted&&e.isTopModal()){var t=e.getDialogElement(),r=(0,o.default)((0,O.default)(e));t&&!(0,a.default)(t,r)&&t.focus()}}};C.Manager=E.default,t.default=C,e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e){void 0===e&&(e=(0,o.default)());try{return e.activeElement}catch(e){}};var o=n(r(43));e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=l;var n,o=r(285),a=(n=o)&&n.__esModule?n:{default:n};var i={};function l(e,t){return function(r,n,o,l,u){var _=o||"<<anonymous>>",s=u||n;if(null!=r[n]){var c=o+"."+n;(0,a.default)(i[c],"The "+l+" `"+s+"` of `"+_+"` is deprecated. "+t+"."),i[c]=!0}for(var f=arguments.length,p=Array(f>5?f-5:0),d=5;d<f;d++)p[d-5]=arguments[d];return e.apply(void 0,[r,n,o,l,u].concat(p))}}l._resetWarned=function(){i={}},e.exports=t.default},function(e,t,r){"use strict";var n=function(){};e.exports=n},function(e,t,r){"use strict";t.__esModule=!0;var n=u(r(287)),o=u(r(85)),a=u(r(121)),i=u(r(123)),l=r(290);function u(e){return e&&e.__esModule?e:{default:e}}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){return r=function(e){return-1!==e.modals.indexOf(t)},n=-1,e.some((function(e,t){if(r(e,t))return n=t,!0})),n;var r,n}function c(e,t){var r={overflow:"hidden"};e.style={overflow:t.style.overflow,paddingRight:t.style.paddingRight},e.overflowing&&(r.paddingRight=parseInt((0,o.default)(t,"paddingRight")||0,10)+(0,a.default)()+"px"),(0,o.default)(t,r)}function f(e,t){var r=e.style;Object.keys(r).forEach((function(e){return t.style[e]=r[e]}))}t.default=function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=r.hideSiblingNodes,a=void 0===o||o,u=r.handleContainerOverflow,p=void 0===u||u;_(this,e),this.add=function(e,r,o){var a=t.modals.indexOf(e),u=t.containers.indexOf(r);if(-1!==a)return a;if(a=t.modals.length,t.modals.push(e),t.hideSiblingNodes&&(0,l.hideSiblings)(r,e.mountNode),-1!==u)return t.data[u].modals.push(e),a;var _={modals:[e],classes:o?o.split(/\s+/):[],overflowing:(0,i.default)(r)};return t.handleContainerOverflow&&c(_,r),_.classes.forEach(n.default.addClass.bind(null,r)),t.containers.push(r),t.data.push(_),a},this.remove=function(e){var r=t.modals.indexOf(e);if(-1!==r){var o=s(t.data,e),a=t.data[o],i=t.containers[o];a.modals.splice(a.modals.indexOf(e),1),t.modals.splice(r,1),0===a.modals.length?(a.classes.forEach(n.default.removeClass.bind(null,i)),t.handleContainerOverflow&&f(a,i),t.hideSiblingNodes&&(0,l.showSiblings)(i,e.mountNode),t.containers.splice(o,1),t.data.splice(o,1)):t.hideSiblingNodes&&(0,l.ariaHidden)(!1,a.modals[a.modals.length-1].mountNode)}},this.isTopModal=function(e){return!!t.modals.length&&t.modals[t.modals.length-1]===e},this.hideSiblingNodes=a,this.handleContainerOverflow=p,this.modals=[],this.containers=[],this.data=[]},e.exports=t.default},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=void 0;var o=n(r(288));t.addClass=o.default;var a=n(r(289));t.removeClass=a.default;var i=n(r(122));t.hasClass=i.default;var l={addClass:o.default,removeClass:a.default,hasClass:i.default};t.default=l},function(e,t,r){"use strict";var n=r(19);t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=n(r(122));e.exports=t.default},function(e,t,r){"use strict";function n(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=n(e.className,t):e.setAttribute("class",n(e.className&&e.className.baseVal||"",t))}},function(e,t,r){"use strict";t.__esModule=!0,t.ariaHidden=a,t.hideSiblings=function(e,t){o(e,t,(function(e){return a(!0,e)}))},t.showSiblings=function(e,t){o(e,t,(function(e){return a(!1,e)}))};var n=["template","script","style"],o=function(e,t,r){t=[].concat(t),[].forEach.call(e.children,(function(e){var o,a,i;-1===t.indexOf(e)&&(a=(o=e).nodeType,i=o.tagName,1===a&&-1===n.indexOf(i.toLowerCase()))&&r(e)}))};function a(e,t){t&&(e?t.setAttribute("aria-hidden","true"):t.removeAttribute("aria-hidden"))}},function(e,t,r){"use strict";t.__esModule=!0;var n=a(r(3)),o=a(r(0));function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u={children:n.default.node},_=function(e){function t(){return i(this,t),l(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return this.props.children},t}(o.default.Component);_.propTypes=u,t.default=_,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){var t=!document.addEventListener,r=void 0;t?(document.attachEvent("onfocusin",e),r=function(){return document.detachEvent("onfocusin",e)}):(document.addEventListener("focus",e,!0),r=function(){return document.removeEventListener("focus",e,!0)});return{remove:r}},e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(25)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"div"};var p=(0,s.bsClass)("modal-body",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(3)),s=r(18),c=r(39),f={dialogClassName:_.default.string},p=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e,t=this.props,r=t.dialogClassName,n=t.className,i=t.style,_=t.children,c=t.onMouseDownDialog,f=(0,a.default)(t,["dialogClassName","className","style","children","onMouseDownDialog"]),p=(0,s.splitBsProps)(f),d=p[0],E=p[1],h=(0,s.prefix)(d),b=(0,o.default)({display:"block"},i),m=(0,o.default)({},(0,s.getClassSet)(d),((e={})[h]=!1,e[(0,s.prefix)(d,"dialog")]=!0,e));return u.default.createElement("div",(0,o.default)({},E,{tabIndex:"-1",role:"dialog",style:b,className:(0,l.default)(n,h)}),u.default.createElement("div",{className:(0,l.default)(r,m),onMouseDown:c},u.default.createElement("div",{className:(0,s.prefix)(d,"content"),role:"document"},_)))},t}(u.default.Component);p.propTypes=f;var d=(0,s.bsClass)("modal",(0,s.bsSizes)([c.Size.LARGE,c.Size.SMALL],p));t.default=d,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(25)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"div"};var p=(0,s.bsClass)("modal-footer",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(3)),_=n(r(0)),s=r(18),c=n(r(55)),f=n(r(297)),p={closeLabel:u.default.string,closeButton:u.default.bool,onHide:u.default.func},d={$bs_modal:u.default.shape({onHide:u.default.func})},E=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.closeLabel,r=e.closeButton,n=e.onHide,i=e.className,u=e.children,p=(0,a.default)(e,["closeLabel","closeButton","onHide","className","children"]),d=this.context.$bs_modal,E=(0,s.splitBsProps)(p),h=E[0],b=E[1],m=(0,s.getClassSet)(h);return _.default.createElement("div",(0,o.default)({},b,{className:(0,l.default)(i,m)}),r&&_.default.createElement(f.default,{label:t,onClick:(0,c.default)(d&&d.onHide,n)}),u)},t}(_.default.Component);E.propTypes=p,E.defaultProps={closeLabel:"Close",closeButton:!1},E.contextTypes=d;var h=(0,s.bsClass)("modal-header",E);t.default=h,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(12)),a=n(r(3)),i=n(r(0)),l={label:a.default.string.isRequired,onClick:a.default.func},u=function(e){function t(){return e.apply(this,arguments)||this}return(0,o.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.label,r=e.onClick;return i.default.createElement("button",{type:"button",className:"close",onClick:r},i.default.createElement("span",{"aria-hidden":"true"},"×"),i.default.createElement("span",{className:"sr-only"},t))},t}(i.default.Component);u.propTypes=l,u.defaultProps={label:"Close"};var _=u;t.default=_,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=n(r(25)),s=r(18),c={componentClass:_.default},f=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.componentClass,r=e.className,n=(0,a.default)(e,["componentClass","className"]),i=(0,s.splitBsProps)(n),_=i[0],c=i[1],f=(0,s.getClassSet)(_);return u.default.createElement(t,(0,o.default)({},c,{className:(0,l.default)(r,f)}))},t}(u.default.Component);f.propTypes=c,f.defaultProps={componentClass:"h4"};var p=(0,s.bsClass)("modal-title",f);t.default=p,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=function(e,t){var r=t.propTypes,n={},a={};return(0,o.default)(e).forEach((function(e){var t=e[0],o=e[1];r[t]?n[t]=o:a[t]=o})),[n,a]};var o=n(r(107));e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=r(18),s=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=(0,a.default)(e,["className"]),n=(0,_.splitBsProps)(r),i=n[0],s=n[1],c=(0,_.getClassSet)(i);return u.default.createElement("span",(0,o.default)({},s,{className:(0,l.default)(t,c)}))},t}(u.default.Component),c=(0,_.bsClass)("input-group-addon",s);t.default=c,e.exports=t.default},function(e,t,r){"use strict";var n=r(9);t.__esModule=!0,t.default=void 0;var o=n(r(11)),a=n(r(13)),i=n(r(12)),l=n(r(15)),u=n(r(0)),_=r(18),s=function(e){function t(){return e.apply(this,arguments)||this}return(0,i.default)(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=(0,a.default)(e,["className"]),n=(0,_.splitBsProps)(r),i=n[0],s=n[1],c=(0,_.getClassSet)(i);return u.default.createElement("span",(0,o.default)({},s,{className:(0,l.default)(t,c)}))},t}(u.default.Component),c=(0,_.bsClass)("input-group-btn",s);t.default=c,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,o=(n=r(0))&&"object"==typeof n&&"default"in n?n.default:n;function a(e){return a.warnAboutHMRDisabled&&(a.warnAboutHMRDisabled=!0,console.error("React-Hot-Loader: misconfiguration detected, using production version in non-production environment."),console.error("React-Hot-Loader: Hot Module Replacement is not enabled.")),o.Children.only(e.children)}a.warnAboutHMRDisabled=!1;var i=function e(){return e.shouldWrapWithAppContainer?function(e){return function(t){return o.createElement(a,null,o.createElement(e,t))}}:function(e){return e}};i.shouldWrapWithAppContainer=!1;t.AppContainer=a,t.hot=i,t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){},t.cold=function(e){return e},t.configureComponent=function(){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb2J4L2xpYi9tb2J4Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcGVyc2lzdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QtbGl0ZS9kaXN0L2luZGV4Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC9kaXN0L21vYnhyZWFjdC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvYm9vdHN0cmFwVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2l0aHViLWFwaS9kaXN0L2NvbXBvbmVudHMvUmVxdWVzdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9pbkRPTS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1JhZGlvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvU3R5bGVDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9nZXRDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2lzV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0NvbnRyb2xMYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXJpYWxpenIvbGliL2VzL3NlcmlhbGl6ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29mZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2l0aHViLWFwaS9kaXN0L2NvbXBvbmVudHMvR2l0SHViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb2J4LXBlcnNpc3QvbGliL3R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy1iYXNlNjQvYmFzZTY0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvUG9ydGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvY2FtZWxpemVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvc2Nyb2xsVG9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvYWRkRXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9GYWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL3Njcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2hhc0NsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvaXNPdmVyZmxvd2luZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub3BvbG9neUVkaXRvci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9wQmFyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9GaWxlQWN0aW9ucy5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZrYmVhdXRpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZpbGUtc2F2ZXIvZGlzdC9GaWxlU2F2ZXIubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb25MaXN0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Hcm91cExpc3QuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0dyb3VwLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Qcm9wZXJ0eUxpc3QuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Byb3BlcnR5LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SZXF1aXJlbWVudExpc3QuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JlcXVpcmVtZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYXNrTGlzdC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFzay5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTWFpbkVkaXRvci5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQmFkZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC1sb2FkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9ieC1wZXJzaXN0L2xpYi9zdG9yYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb2J4LXBlcnNpc3QvbGliL21lcmdlLXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcGVyc2lzdC9saWIvcGVyc2lzdC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1hcGkvZGlzdC9jb21wb25lbnRzL0dpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9Vc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9Jc3N1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2l0aHViLWFwaS9kaXN0L2NvbXBvbmVudHMvU2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9SYXRlTGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dpdGh1Yi1hcGkvZGlzdC9jb21wb25lbnRzL1JlcG9zaXRvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGY4L3V0ZjguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2l0aHViLWFwaS9kaXN0L2NvbXBvbmVudHMvT3JnYW5pemF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9UZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9naXRodWItYXBpL2Rpc3QvY29tcG9uZW50cy9NYXJrZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2l0aHViLWFwaS9kaXN0L2NvbXBvbmVudHMvUHJvamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3Qva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9TYWZlQW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL3dlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvYXJyYXkvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9PdmVybGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvTGVnYWN5UG9ydGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvUG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9jYWxjdWxhdGVQb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvcG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvb2Zmc2V0UGFyZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2h5cGhlbmF0ZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2h5cGhlbmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvcmVtb3ZlU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9pc1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvc2Nyb2xsTGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1Jvb3RDbG9zZVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sRmVlZGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvR2x5cGhpY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sU3RhdGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L3F1ZXJ5U2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9saXN0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvZGVwcmVjYXRlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvbWFuYWdlQXJpYUhpZGRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1JlZkhvbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2FkZEZvY3VzTGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWxCb2R5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL01vZGFsRGlhbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL01vZGFsRm9vdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL01vZGFsSGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Nsb3NlQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL01vZGFsVGl0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvc3BsaXRDb21wb25lbnRQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwQWRkb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LWxvYWRlci9kaXN0L3JlYWN0LWhvdC1sb2FkZXIucHJvZHVjdGlvbi5taW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfX2Fzc2lnbiIsImFzc2lnbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFwcGx5IiwidGhpcyIsIl9fdmFsdWVzIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsIl9fcmVhZCIsImUiLCJhciIsInB1c2giLCJlcnJvciIsIl9fc3ByZWFkIiwiY29uY2F0IiwiRU1QVFlfQVJSQVkiLCJmcmVlemUiLCJFTVBUWV9PQkpFQ1QiLCJnZXROZXh0SWQiLCJnbG9iYWxTdGF0ZSIsIm1vYnhHdWlkIiwiZmFpbCIsIm1lc3NhZ2UiLCJpbnZhcmlhbnQiLCJjaGVjayIsIkVycm9yIiwib25jZSIsImZ1bmMiLCJpbnZva2VkIiwibm9vcCIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJhZGRIaWRkZW5Qcm9wIiwicHJvcE5hbWUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUiLCJjbGF6eiIsIngiLCJpc0FycmF5TGlrZSIsImlzQXJyYXkiLCJpc09ic2VydmFibGVBcnJheSIsImlzRVM2TWFwIiwidGhpbmciLCJNYXAiLCJpc0VTNlNldCIsIlNldCIsImdldFBsYWluT2JqZWN0S2V5cyIsImVudW1lcmFibGVzIiwiYWRkIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZm9yRWFjaCIsImsiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmcm9tIiwic3RyaW5naWZ5S2V5IiwidG9TdHJpbmciLCJTdHJpbmciLCJ0b1ByaW1pdGl2ZSIsIiRtb2J4IiwiQXRvbSIsImlzUGVuZGluZ1Vub2JzZXJ2YXRpb24iLCJpc0JlaW5nT2JzZXJ2ZWQiLCJvYnNlcnZlcnMiLCJkaWZmVmFsdWUiLCJsYXN0QWNjZXNzZWRCeSIsImxvd2VzdE9ic2VydmVyU3RhdGUiLCJJRGVyaXZhdGlvblN0YXRlIiwiTk9UX1RSQUNLSU5HIiwib25CZWNvbWVPYnNlcnZlZCIsIm9uQmVjb21lT2JzZXJ2ZWRMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsIm9uQmVjb21lVW5vYnNlcnZlZCIsIm9uQmVjb21lVW5vYnNlcnZlZExpc3RlbmVycyIsInJlcG9ydE9ic2VydmVkIiwicmVwb3J0Q2hhbmdlZCIsInN0YXJ0QmF0Y2giLCJvYnNlcnZhYmxlIiwiU1RBTEUiLCJkZXBlbmRlbmNpZXNTdGF0ZSIsIlVQX1RPX0RBVEUiLCJpc1RyYWNpbmciLCJUcmFjZU1vZGUiLCJOT05FIiwibG9nVHJhY2VJbmZvIiwib25CZWNvbWVTdGFsZSIsInByb3BhZ2F0ZUNoYW5nZWQiLCJlbmRCYXRjaCIsImlzQXRvbSIsImNyZWF0ZUF0b20iLCJvbkJlY29tZU9ic2VydmVkSGFuZGxlciIsIm9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIiLCJhdG9tIiwiY29tcGFyZXIiLCJpZGVudGl0eSIsImEiLCJzdHJ1Y3R1cmFsIiwiZGVlcEVxdWFsIiwiZGVmYXVsdCIsImlzIiwic2hhbGxvdyIsIm1vYnhEaWRSdW5MYXp5SW5pdGlhbGl6ZXJzU3ltYm9sIiwibW9ieFBlbmRpbmdEZWNvcmF0b3JzIiwiZW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSIsIm5vbkVudW1lcmFibGVEZXNjcmlwdG9yQ2FjaGUiLCJjcmVhdGVQcm9wZXJ0eUluaXRpYWxpemVyRGVzY3JpcHRvciIsInByb3AiLCJjYWNoZSIsImluaXRpYWxpemVJbnN0YW5jZSIsInNldCIsInRhcmdldCIsImVfMSIsIl9hIiwiZGVjb3JhdG9ycyIsImtleXMiLCJrZXlzXzEiLCJrZXlzXzFfMSIsInByb3BlcnR5Q3JlYXRvciIsImRlc2NyaXB0b3IiLCJkZWNvcmF0b3JUYXJnZXQiLCJkZWNvcmF0b3JBcmd1bWVudHMiLCJlXzFfMSIsInJldHVybiIsImNyZWF0ZVByb3BEZWNvcmF0b3IiLCJwcm9wZXJ0eUluaXRpYWxseUVudW1lcmFibGUiLCJkZWNvcmF0b3IiLCJhcHBseUltbWVkaWF0ZWx5IiwiaW5oZXJpdGVkRGVjb3JhdG9ycyIsInF1YWNrc0xpa2VBRGVjb3JhdG9yIiwic2xpY2UiLCJhcmdzIiwiZGVlcEVuaGFuY2VyIiwidiIsIl8iLCJpc09ic2VydmFibGUiLCJhcnJheSIsInVuZGVmaW5lZCIsIm1hcCIsInJlZmVyZW5jZUVuaGFuY2VyIiwibmV3VmFsdWUiLCJjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlciIsImVuaGFuY2VyIiwicHJvcGVydHlOYW1lIiwiX2RlY29yYXRvclRhcmdldCIsImRlY29yYXRvckFyZ3MiLCJpbml0aWFsVmFsdWUiLCJpbml0aWFsaXplciIsImFzT2JzZXJ2YWJsZU9iamVjdCIsImFkZE9ic2VydmFibGVQcm9wIiwicmVzIiwicHJvY2VzcyIsImVudiIsImRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyIsImRlZXAiLCJkZWZhdWx0RGVjb3JhdG9yIiwicHJveHkiLCJhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zIiwiZGVlcERlY29yYXRvciIsInNoYWxsb3dEZWNvcmF0b3IiLCJpc09ic2VydmFibGVPYmplY3QiLCJpc09ic2VydmFibGVNYXAiLCJpc09ic2VydmFibGVTZXQiLCJyZWZEZWNvcmF0b3IiLCJyZWZTdHJ1Y3REZWNvcmF0b3IiLCJvbGRWYWx1ZSIsImdldEVuaGFuY2VyRnJvbU9wdGlvbnMiLCJvcHRpb25zIiwib2JzZXJ2YWJsZUZhY3RvcmllcyIsImJveCIsImluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yIiwiT2JzZXJ2YWJsZVZhbHVlIiwiZXF1YWxzIiwiaW5pdGlhbFZhbHVlcyIsImNyZWF0ZU9ic2VydmFibGVBcnJheSIsIk9ic2VydmFibGVNYXAiLCJPYnNlcnZhYmxlU2V0IiwicHJvcHMiLCJleHRlbmRPYnNlcnZhYmxlIiwiZ2V0RGVmYXVsdERlY29yYXRvckZyb21PYmplY3RPcHRpb25zIiwiYmFzZSIsImNyZWF0ZUR5bmFtaWNPYnNlcnZhYmxlT2JqZWN0IiwiZXh0ZW5kT2JzZXJ2YWJsZU9iamVjdFdpdGhQcm9wZXJ0aWVzIiwicmVmIiwic3RydWN0IiwiYXJnMiIsImFyZzMiLCJtZXRob2ROYW1lIiwiY29tcHV0ZWREZWNvcmF0b3IiLCJpbnN0YW5jZSIsImFkZENvbXB1dGVkUHJvcCIsImNvbnRleHQiLCJjb21wdXRlZFN0cnVjdERlY29yYXRvciIsImNvbXB1dGVkIiwiYXJnMSIsIm9wdHMiLCJDb21wdXRlZFZhbHVlIiwiQ2F1Z2h0RXhjZXB0aW9uIiwiY2F1c2UiLCJpc0NhdWdodEV4Y2VwdGlvbiIsInNob3VsZENvbXB1dGUiLCJkZXJpdmF0aW9uIiwiUE9TU0lCTFlfU1RBTEUiLCJwcmV2QWxsb3dTdGF0ZVJlYWRzIiwiYWxsb3dTdGF0ZVJlYWRzU3RhcnQiLCJwcmV2VW50cmFja2VkIiwidW50cmFja2VkU3RhcnQiLCJvYnMiLCJvYnNlcnZpbmciLCJvYmoiLCJpc0NvbXB1dGVkVmFsdWUiLCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzIiwidW50cmFja2VkRW5kIiwiYWxsb3dTdGF0ZVJlYWRzRW5kIiwiY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAiLCJpc0NvbXB1dGluZ0Rlcml2YXRpb24iLCJ0cmFja2luZ0Rlcml2YXRpb24iLCJjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCIsImhhc09ic2VydmVycyIsInNpemUiLCJjb21wdXRhdGlvbkRlcHRoIiwiYWxsb3dTdGF0ZUNoYW5nZXMiLCJlbmZvcmNlQWN0aW9ucyIsInRyYWNrRGVyaXZlZEZ1bmN0aW9uIiwiZiIsIm5ld09ic2VydmluZyIsInVuYm91bmREZXBzQ291bnQiLCJydW5JZCIsInJlc3VsdCIsInByZXZUcmFja2luZyIsInByZXZPYnNlcnZpbmciLCJsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUiLCJpMCIsImRlcCIsInJlbW92ZU9ic2VydmVyIiwiYWRkT2JzZXJ2ZXIiLCJiaW5kRGVwZW5kZW5jaWVzIiwiY2xlYXJPYnNlcnZpbmciLCJ1bnRyYWNrZWQiLCJhY3Rpb24iLCJwcmV2IiwiYWxsb3dTdGF0ZVJlYWRzIiwiY3VycmVudEFjdGlvbklkIiwibmV4dEFjdGlvbklkIiwiZnVuY3Rpb25OYW1lRGVzY3JpcHRvciIsImNyZWF0ZUFjdGlvbiIsImFjdGlvbk5hbWUiLCJmbiIsImV4ZWN1dGVBY3Rpb24iLCJpc01vYnhBY3Rpb24iLCJzY29wZSIsInJ1bkluZm8iLCJfc3RhcnRBY3Rpb24iLCJlcnIiLCJfZW5kQWN0aW9uIiwic3RhcnRUaW1lIiwicHJldkRlcml2YXRpb24iLCJwcmV2QWxsb3dTdGF0ZUNoYW5nZXMiLCJhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0Iiwibm90aWZ5U3B5IiwiYWN0aW9uSWQiLCJwYXJlbnRBY3Rpb25JZCIsInN1cHByZXNzUmVhY3Rpb25FcnJvcnMiLCJhbGxvd1N0YXRlQ2hhbmdlc0VuZCIsImFsbG93U3RhdGVDaGFuZ2VzSW5zaWRlQ29tcHV0ZWQiLCJfc3VwZXIiLCJfdGhpcyIsImhhc1VucmVwb3J0ZWRDaGFuZ2UiLCJfXyIsImNvbnN0cnVjdG9yIiwiX19leHRlbmRzIiwiZGVoYW5jZVZhbHVlIiwiZGVoYW5jZXIiLCJwcmVwYXJlTmV3VmFsdWUiLCJVTkNIQU5HRUQiLCJzZXROZXdWYWx1ZSIsImhhc0ludGVyY2VwdG9ycyIsImNoYW5nZSIsImludGVyY2VwdENoYW5nZSIsInR5cGUiLCJoYXNMaXN0ZW5lcnMiLCJub3RpZnlMaXN0ZW5lcnMiLCJpbnRlcmNlcHQiLCJoYW5kbGVyIiwicmVnaXN0ZXJJbnRlcmNlcHRvciIsIm9ic2VydmUiLCJmaXJlSW1tZWRpYXRlbHkiLCJyZWdpc3Rlckxpc3RlbmVyIiwidG9KU09OIiwidmFsdWVPZiIsImlzT2JzZXJ2YWJsZVZhbHVlIiwiX19tYXBpZCIsImlzQ29tcHV0aW5nIiwiaXNSdW5uaW5nU2V0dGVyIiwic2V0dGVyIiwiY29tcGFyZVN0cnVjdHVyYWwiLCJyZXF1aXJlc1JlYWN0aW9uIiwia2VlcEFsaXZlIiwicHJvcGFnYXRlTWF5YmVDaGFuZ2VkIiwiaW5CYXRjaCIsInRyYWNrQW5kQ29tcHV0ZSIsInByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCIsIndhcm5BYm91dFVudHJhY2tlZFJlYWQiLCJjb21wdXRlVmFsdWUiLCJwZWVrIiwid2FzU3VzcGVuZGVkIiwiY2hhbmdlZCIsInRyYWNrIiwic3VzcGVuZCIsImZpcnN0VGltZSIsInByZXZWYWx1ZSIsImF1dG9ydW4iLCJwcmV2VSIsInBlcnNpc3RlbnRLZXlzIiwiTW9iWEdsb2JhbHMiLCJ2ZXJzaW9uIiwicGVuZGluZ1Vub2JzZXJ2YXRpb25zIiwicGVuZGluZ1JlYWN0aW9ucyIsImlzUnVubmluZ1JlYWN0aW9ucyIsInNweUxpc3RlbmVycyIsImdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycyIsImNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiIsInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24iLCJjb21wdXRlZENvbmZpZ3VyYWJsZSIsIm1vY2tHbG9iYWwiLCJnZXRHbG9iYWwiLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwiY2FuTWVyZ2VHbG9iYWxTdGF0ZSIsImlzb2xhdGVDYWxsZWQiLCJfX21vYnhJbnN0YW5jZUNvdW50IiwiX19tb2J4R2xvYmFscyIsInNldFRpbWVvdXQiLCJnZXRHbG9iYWxTdGF0ZSIsInJlc2V0R2xvYmFsU3RhdGUiLCJkZWZhdWx0R2xvYmFscyIsImluZGV4T2YiLCJub2RlIiwiZGVsZXRlIiwicXVldWVGb3JVbm9ic2VydmF0aW9uIiwicnVuUmVhY3Rpb25zIiwibGlzdCIsImNvbnNvbGUiLCJsb2ciLCJCUkVBSyIsImxpbmVzIiwicHJpbnREZXBUcmVlIiwidHJlZSIsImRlcHRoIiwiam9pbiIsImRlcGVuZGVuY2llcyIsImNoaWxkIiwiZ2V0RGVwZW5kZW5jeVRyZWUiLCJGdW5jdGlvbiIsInJlcGxhY2UiLCJSZWFjdGlvbiIsIm9uSW52YWxpZGF0ZSIsImVycm9ySGFuZGxlciIsInJlcXVpcmVzT2JzZXJ2YWJsZSIsImlzRGlzcG9zZWQiLCJfaXNTY2hlZHVsZWQiLCJfaXNUcmFja1BlbmRpbmciLCJfaXNSdW5uaW5nIiwic2NoZWR1bGUiLCJpc1NjaGVkdWxlZCIsInJ1blJlYWN0aW9uIiwicmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uIiwid2FybiIsImRpc3Bvc2UiLCJnZXREaXNwb3NlciIsInRyYWNlIiwiZW50ZXJCcmVha1BvaW50Iiwib25SZWFjdGlvbkVycm9yIiwiaWR4Iiwic3BsaWNlIiwicmVhY3Rpb25TY2hlZHVsZXIiLCJydW5SZWFjdGlvbnNIZWxwZXIiLCJhbGxSZWFjdGlvbnMiLCJpdGVyYXRpb25zIiwicmVtYWluaW5nUmVhY3Rpb25zIiwiaXNSZWFjdGlvbiIsInNldFJlYWN0aW9uU2NoZWR1bGVyIiwiYmFzZVNjaGVkdWxlciIsInNweSIsImRvbnRSZWFzc2lnbkZpZWxkcyIsIm5hbWVkQWN0aW9uRGVjb3JhdG9yIiwiaW5pdGlhbGl6ZXJfMSIsImFjdGlvbkZpZWxkRGVjb3JhdG9yIiwiYXJnNCIsInJ1bkluQWN0aW9uIiwiaXNBY3Rpb24iLCJkZWZpbmVCb3VuZEFjdGlvbiIsInZpZXciLCJyZWFjdGlvbiIsInNjaGVkdWxlciIsImRlbGF5IiwicmVhY3Rpb25SdW5uZXIiLCJvbkVycm9yIiwic2NoZWR1bGVyXzEiLCJjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyIsImlzU2NoZWR1bGVkXzEiLCJib3VuZCIsImFwcGx5VG9JbnN0YW5jZSIsInJ1biIsImV4cHJlc3Npb24iLCJlZmZlY3QiLCJiYXNlRm4iLCJlZmZlY3RBY3Rpb24iLCJydW5TeW5jIiwibmV4dFZhbHVlIiwiaW50ZXJjZXB0SG9vayIsImhvb2siLCJnZXRBdG9tIiwiY2IiLCJsaXN0ZW5lcnNLZXkiLCJob29rTGlzdGVuZXJzIiwiY29uZmlndXJlIiwiaXNvbGF0ZUdsb2JhbFN0YXRlIiwiZWEiLCJkZWNvcmF0ZSIsIl9sb29wXzEiLCJwcm9wZXJ0eURlY29yYXRvcnMiLCJuZXdEZXNjcmlwdG9yIiwicmVkdWNlIiwiYWNjRGVzY3JpcHRvciIsInByb3BlcnRpZXMiLCJlXzIiLCJfYiIsImtleXNfMiIsImtleXNfMl8xIiwicmVzdWx0RGVzY3JpcHRvciIsImVfMl8xIiwibm9kZVRvRGVwZW5kZW5jeVRyZWUiLCJpdGVtIiwiZ2V0T2JzZXJ2ZXJUcmVlIiwibm9kZVRvT2JzZXJ2ZXJUcmVlIiwiZ2V0T2JzZXJ2ZXJzIiwiZ2VuZXJhdG9ySWQiLCJGbG93Q2FuY2VsbGF0aW9uRXJyb3IiLCJpc0Zsb3dDYW5jZWxsYXRpb25FcnJvciIsImZsb3ciLCJnZW5lcmF0b3IiLCJyZWplY3RvciIsImN0eCIsImdlbiIsInBlbmRpbmdQcm9taXNlIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3RlcElkIiwib25GdWxmaWxsZWQiLCJyZXQiLCJvblJlamVjdGVkIiwidGhyb3ciLCJ0aGVuIiwiY2FuY2VsIiwiY2FuY2VsUHJvbWlzZSIsInlpZWxkZWRQcm9taXNlIiwiaW50ZXJjZXB0UmVhZHMiLCJwcm9wT3JIYW5kbGVyIiwiZ2V0QWRtaW5pc3RyYXRpb24iLCJpbnRlcmNlcHRQcm9wZXJ0eSIsImludGVyY2VwdEludGVyY2VwdGFibGUiLCJfaXNDb21wdXRlZCIsInZhbHVlcyIsImhhcyIsImlzQ29tcHV0ZWQiLCJpc0NvbXB1dGVkUHJvcCIsIl9pc09ic2VydmFibGUiLCJpc09ic2VydmFibGVQcm9wIiwiZ2V0S2V5cyIsImluZGV4IiwiZW50cmllcyIsImFkbSIsImV4aXN0aW5nT2JzZXJ2YWJsZSIsIndyaXRlIiwiZGVmYXVsdEVuaGFuY2VyIiwicGFyc2VJbnQiLCJ2YWx1ZXNfMSIsImtleV8xIiwicmVtb3ZlIiwicHJvcE9yQ2IiLCJjYk9yRmlyZSIsIm9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkiLCJvYnNlcnZlT2JzZXJ2YWJsZSIsImRlZmF1bHRPcHRpb25zIiwiZGV0ZWN0Q3ljbGVzIiwiZXhwb3J0TWFwc0FzT2JqZWN0cyIsInJlY3Vyc2VFdmVyeXRoaW5nIiwidG9KUyIsInNvdXJjZSIsIl9fYWxyZWFkeVNlZW4iLCJ0b0pTSGVscGVyIiwiRGF0ZSIsInJlc18xIiwidG9BZGQiLCJyZXNfMiIsInJlc18zIiwicmVzXzQiLCJyZXNfNSIsIl9pIiwicG9wIiwiZ2V0QXRvbUZyb21BcmdzIiwiTE9HIiwidHJhbnNhY3Rpb24iLCJ0aGlzQXJnIiwid2hlbiIsInByZWRpY2F0ZSIsIndoZW5Qcm9taXNlIiwiX3doZW4iLCJ0aW1lb3V0SGFuZGxlIiwidGltZW91dCIsImRpc3Bvc2VyIiwiY2xlYXJUaW1lb3V0IiwiZ2V0QWRtIiwiaXNQcm9wZXJ0eUtleSIsInZhbCIsIm9iamVjdFByb3h5VHJhcHMiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJrZXlzQXRvbSIsIlJlZmxlY3QiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIlByb3h5IiwiaW50ZXJjZXB0YWJsZSIsImludGVyY2VwdG9ycyIsImxpc3RlbmFibGUiLCJjaGFuZ2VMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJhcnJheVRyYXBzIiwiZ2V0QXJyYXlMZW5ndGgiLCJhcnJheUV4dGVuc2lvbnMiLCJpc05hTiIsInNldEFycmF5TGVuZ3RoIiwib3duZWQiLCJPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiIsInNwbGljZVdpdGhBcnJheSIsImxhc3RLbm93bkxlbmd0aCIsIm5ld1YiLCJvbGRWIiwiZGVoYW5jZVZhbHVlcyIsImFkZGVkIiwiYWRkZWRDb3VudCIsInJlbW92ZWQiLCJyZW1vdmVkQ291bnQiLCJuZXdMZW5ndGgiLCJjdXJyZW50TGVuZ3RoIiwibmV3SXRlbXMiLCJ1cGRhdGVBcnJheUxlbmd0aCIsIm9sZExlbmd0aCIsImRlbHRhIiwiZGVsZXRlQ291bnQiLCJNYXRoIiwibWF4IiwibWluIiwic3BsaWNlSXRlbXNJbnRvVmFsdWVzIiwibm90aWZ5QXJyYXlTcGxpY2UiLCJub3RpZnlBcnJheUNoaWxkVXBkYXRlIiwibm90aWZ5IiwiY2xlYXIiLCJpdGVtcyIsInNoaWZ0IiwidW5zaGlmdCIsInJldmVyc2UiLCJjbG9uZSIsInNvcnQiLCJjb21wYXJlRm4iLCJmdW5jTmFtZSIsImlzT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24iLCJfYSQxIiwiT2JzZXJ2YWJsZU1hcE1hcmtlciIsImluaXRpYWxEYXRhIiwiX2tleXNBdG9tIiwiX2RhdGEiLCJfaGFzTWFwIiwibWVyZ2UiLCJfaGFzIiwiZW50cnkiLCJuZXdFbnRyeSIsImhhc0tleSIsIl91cGRhdGVWYWx1ZSIsIl9hZGRWYWx1ZSIsIl91cGRhdGVIYXNNYXBFbnRyeSIsIm5leHRJbmRleCIsIm1ha2VJdGVyYWJsZSIsImNhbGxiYWNrIiwiX2MiLCJfZCIsIl9lIiwib3RoZXIiLCJuZXdLZXlzIiwiZmlsdGVyIiwidG9QT0pPIiwiZV8zIiwiZV8zXzEiLCJPYnNlcnZhYmxlU2V0TWFya2VyIiwiX2F0b20iLCJjYWxsYmFja0ZuIiwib2JzZXJ2YWJsZVZhbHVlcyIsIk9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiIsInJlYWQiLCJwZW5kaW5nS2V5cyIsImV4aXN0cyIsIm9ic2VydmFibGVQcm9wZXJ0eUNvbmZpZ3MiLCJnZW5lcmF0ZU9ic2VydmFibGVQcm9wQ29uZmlnIiwibm90aWZ5UHJvcGVydHlBZGRpdGlvbiIsInByb3BlcnR5T3duZXIiLCJjb21wdXRlZFByb3BlcnR5Q29uZmlncyIsImdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIiLCJnZW5lcmF0ZUNvbXB1dGVkUHJvcENvbmZpZyIsIm9sZE9ic2VydmFibGUiLCJpbGxlZ2FsQWNjZXNzIiwib3duZXIiLCJpc09ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiIsImFueVRoaW5nIiwiZ2V0RGVidWdOYW1lIiwiZXEiLCJhU3RhY2siLCJiU3RhY2siLCJjbGFzc05hbWUiLCJ1bndyYXAiLCJhcmVBcnJheXMiLCJhQ3RvciIsImJDdG9yIiwiaGFzJDEiLCJnZXRTZWxmIiwiX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpbmplY3RNb2J4IiwiZXh0cmFzIiwibW9ieCIsIk1WYXJpYWJsZSIsInBlcnNpc3QiLCJNUHJvcGVydHkiLCJNUmVxdWlyZW1lbnQiLCJNVGFza1Byb3BlcnR5IiwiTVRhc2siLCJNQ29sbGVjdGlvbiIsIk1Hcm91cCIsIk1NYWluIiwiU3RvcmUiLCJoYXNWYXJpYWJsZSIsImlkIiwidmFyaWFibGVzIiwic29tZSIsImVsIiwiaGFzUHJvcGVydHkiLCJoYXNSZXF1aXJlbWVudCIsInJlcXVpcmVtZW50cyIsImhhc1Rhc2siLCJ0YXNrcyIsImhhc0NvbGxlY3Rpb24iLCJjb2xsZWN0aW9ucyIsImhhc01haW5Hcm91cCIsIm1haW4iLCJncm91cHMiLCJ0b3BvbG9neUlkIiwibmV3VmFyaWFibGUiLCJuZXdQcm9wZXJ0eSIsIm5ld1JlcXVpcmVtZW50IiwibmV3VGFzayIsIm5ld0NvbGxlY3Rpb24iLCJuZXdHcm91cCIsInJlbW92ZWRQcm9wZXJ0eUlkIiwidGFzayIsInJlbW92ZWRSZXF1aXJlbWVudElkIiwicmVxdWlyZW1lbnQiLCJjb2xsZWN0aW9uIiwicmVtb3ZlZFRhc2tJZCIsImdyb3VwIiwicmVtb3ZlZENvbGxlY3Rpb25JZCIsInVwZGF0ZWRQcm9wZXJ0eSIsIm9sZElkIiwidXBkYXRlZFJlcXVpcmVtZW50IiwidXBkYXRlZFRhc2siLCJnIiwidXBkYXRlZENvbGxlY3Rpb24iLCJ1cGRhdGVkR3JvdXAiLCJoeWRyYXRlIiwic3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsImpzb25pZnkiLCJzdG9yZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdmFsdWVzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyIiwiX2V4dGVuZHMzIiwiX2luaGVyaXRzTG9vc2UyIiwiX2NsYXNzbmFtZXMiLCJfcmVhY3QiLCJfcHJvcFR5cGVzIiwiX2VsZW1lbnRUeXBlIiwiX2Jvb3RzdHJhcFV0aWxzIiwiX1N0eWxlQ29uZmlnIiwiX1NhZmVBbmNob3IiLCJwcm9wVHlwZXMiLCJhY3RpdmUiLCJib29sIiwiZGlzYWJsZWQiLCJibG9jayIsIm9uQ2xpY2siLCJjb21wb25lbnRDbGFzcyIsImhyZWYiLCJzdHJpbmciLCJvbmVPZiIsIkJ1dHRvbiIsIl9SZWFjdCRDb21wb25lbnQiLCJfcHJvdG8iLCJyZW5kZXJBbmNob3IiLCJlbGVtZW50UHJvcHMiLCJjcmVhdGVFbGVtZW50IiwicmVuZGVyQnV0dG9uIiwiX3JlZiIsIkNvbXBvbmVudCIsInJlbmRlciIsIl9leHRlbmRzMiIsIl90aGlzJHByb3BzIiwiX3NwbGl0QnNQcm9wcyIsInNwbGl0QnNQcm9wcyIsImJzUHJvcHMiLCJjbGFzc2VzIiwiZ2V0Q2xhc3NTZXQiLCJwcmVmaXgiLCJmdWxsQ2xhc3NOYW1lIiwiZGVmYXVsdFByb3BzIiwiX2RlZmF1bHQiLCJic0NsYXNzIiwiYnNTaXplcyIsIlNpemUiLCJMQVJHRSIsIlNNQUxMIiwiWFNNQUxMIiwiYnNTdHlsZXMiLCJTdGF0ZSIsIlN0eWxlIiwiREVGQVVMVCIsIlBSSU1BUlkiLCJMSU5LIiwiX0Zvcm1Db250cm9sRmVlZGJhY2siLCJfRm9ybUNvbnRyb2xTdGF0aWMiLCJpbnB1dFJlZiIsImNvbnRleHRUeXBlcyIsIiRic19mb3JtR3JvdXAiLCJGb3JtQ29udHJvbCIsImZvcm1Hcm91cCIsImNvbnRyb2xJZCIsIl90aGlzJHByb3BzJGlkIiwiYnNTaXplIiwiU0laRV9NQVAiLCJGZWVkYmFjayIsIlN0YXRpYyIsIl9JbnB1dEdyb3VwQWRkb24iLCJfSW5wdXRHcm91cEJ1dHRvbiIsIklucHV0R3JvdXAiLCJBZGRvbiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyIiwiX2V2ZW50cyIsIl9vd25lckRvY3VtZW50IiwiX2luRE9NIiwiX3Njcm9sbGJhclNpemUiLCJfcmVhY3REb20iLCJfTW9kYWwiLCJfaXNPdmVyZmxvd2luZyIsIl9GYWRlIiwiX01vZGFsQm9keSIsIl9Nb2RhbERpYWxvZyIsIl9Nb2RhbEZvb3RlciIsIl9Nb2RhbEhlYWRlciIsIl9Nb2RhbFRpdGxlIiwiX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIl9zcGxpdENvbXBvbmVudFByb3BzMiIsImJhY2tkcm9wIiwiYmFja2Ryb3BDbGFzc05hbWUiLCJrZXlib2FyZCIsImFuaW1hdGlvbiIsImRpYWxvZ0NvbXBvbmVudENsYXNzIiwiYXV0b0ZvY3VzIiwiZW5mb3JjZUZvY3VzIiwicmVzdG9yZUZvY3VzIiwic2hvdyIsIm9uSGlkZSIsIm9uRW50ZXIiLCJvbkVudGVyaW5nIiwib25FbnRlcmVkIiwib25FeGl0Iiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJjb250YWluZXIiLCJjaGlsZENvbnRleHRUeXBlcyIsIiRic19tb2RhbCIsInNoYXBlIiwiRGlhbG9nVHJhbnNpdGlvbiIsIk1vZGFsIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsIkJhY2tkcm9wVHJhbnNpdGlvbiIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJoYW5kbGVEaWFsb2dCYWNrZHJvcE1vdXNlRG93biIsIl93YWl0aW5nRm9yTW91c2VVcCIsImhhbmRsZU1vdXNlVXAiLCJldiIsImRpYWxvZ05vZGUiLCJfbW9kYWwiLCJnZXREaWFsb2dFbGVtZW50IiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZUV4aXRlZCIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsImhhbmRsZURpYWxvZ0NsaWNrIiwic2V0TW9kYWxSZWYiLCJzdGF0ZSIsInN0eWxlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjdXJyZW50VGFyZ2V0Iiwib24iLCJ1cGRhdGVTdHlsZSIsIm9mZiIsImRpYWxvZ0hlaWdodCIsInNjcm9sbEhlaWdodCIsImRvY3VtZW50IiwiYm9keUlzT3ZlcmZsb3dpbmciLCJmaW5kRE9NTm9kZSIsImJvZHkiLCJtb2RhbElzT3ZlcmZsb3dpbmciLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJzZXRTdGF0ZSIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdMZWZ0IiwiRGlhbG9nIiwiY2hpbGRyZW4iLCJfc3BsaXRDb21wb25lbnRQcm9wcyIsImJhc2VNb2RhbFByb3BzIiwiZGlhbG9nUHJvcHMiLCJpbkNsYXNzTmFtZSIsImNvbnRhaW5lckNsYXNzTmFtZSIsInRyYW5zaXRpb24iLCJiYWNrZHJvcFRyYW5zaXRpb24iLCJvbk1vdXNlVXAiLCJvbk1vdXNlRG93bkRpYWxvZyIsIkJvZHkiLCJIZWFkZXIiLCJUaXRsZSIsIkZvb3RlciIsIm1vYnhfMSIsInNlcmlhbGl6cl8xIiwiU3RvcmFnZSIsIm1lcmdlX3hfMSIsInR5cGVzXzEiLCJwZXJzaXN0X29iamVjdF8xIiwidHlwZXMiLCJzZXJpYWxpemFibGUiLCJwZXJzaXN0T2JqZWN0IiwiZGVib3VuY2UiLCJpbml0aWFsU3RhdGUiLCJzY2hlbWEiLCJnZXREZWZhdWx0TW9kZWxTY2hlbWEiLCJoeWRyYXRpb24iLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwicGVyc2lzdGVkIiwidXBkYXRlIiwibWVyZ2VPYnNlcnZhYmxlcyIsInJlaHlkcmF0ZSIsInNlcmlhbGl6ZSIsImRhdGEiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZ2xvYmFsSXNVc2luZ1N0YXRpY1JlbmRlcmluZyIsImlzVXNpbmdTdGF0aWNSZW5kZXJpbmciLCJwcmludERlYnVnVmFsdWUiLCJjdXJyZW50IiwidXNlRm9yY2VVcGRhdGUiLCJzZXRUaWNrIiwidGljayIsInVzZU9ic2VydmVyIiwiYmFzZUNvbXBvbmVudE5hbWUiLCJmb3JjZVVwZGF0ZSIsInJlbmRlcmluZyIsImV4Y2VwdGlvbiIsInVzZVVubW91bnQiLCJvYnNlcnZlciIsImJhc2VDb21wb25lbnQiLCJtZW1vQ29tcG9uZW50IiwicmVhbE9wdGlvbnMiLCJmb3J3YXJkUmVmIiwiZGlzcGxheU5hbWUiLCJ3cmFwcGVkQ29tcG9uZW50IiwiaG9pc3RCbGFja0xpc3QiLCIkJHR5cGVvZiIsImNvbXBhcmUiLCJPYnNlcnZlckNvbXBvbmVudCIsImNvbXBvbmVudCIsIk9ic2VydmVyUHJvcHNDaGVjayIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsImV4dHJhS2V5IiwiaGFzUHJvcCIsImhhc0V4dHJhUHJvcCIsInN5bWJvbElkIiwiY3JlYXRlZFN5bWJvbHMiLCJuZXdTeW1ib2wiLCJzeW1ib2wiLCJjcmVhdGVTeW1ib2wiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJ5Iiwic2V0SGlkZGVuUHJvcCIsIm1vYnhNaXhpbnMiLCJtb2J4UGF0Y2hlZERlZmluaXRpb24iLCJ3cmFwcGVyIiwicmVhbE1ldGhvZCIsIm1peGlucyIsIl9sZW4iLCJfa2V5IiwibG9ja3MiLCJyZXRWYWwiLCJtZXRob2RzIiwibXgiLCJ3cmFwRnVuY3Rpb24iLCJfbGVuMiIsIl9rZXkyIiwicGF0Y2giLCJtaXhpbk1ldGhvZCIsIm1ldGhvZE1peGlucyIsImdldE1peGlucyIsIm9sZERlZmluaXRpb24iLCJvcmlnaW5hbE1ldGhvZCIsIm5ld0RlZmluaXRpb24iLCJjcmVhdGVEZWZpbml0aW9uIiwid3JhcHBlZEZ1bmMiLCJtb2J4QWRtaW5Qcm9wZXJ0eSIsIm1vYnhJc1VubW91bnRlZCIsInNraXBSZW5kZXJLZXkiLCJpc0ZvcmNpbmdVcGRhdGVLZXkiLCJtYWtlQ2xhc3NDb21wb25lbnRPYnNlcnZlciIsImNvbXBvbmVudFdpbGxSZWFjdCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm9ic2VydmVyU0NVIiwibWFrZU9ic2VydmFibGVQcm9wIiwiYmFzZVJlbmRlciIsIm1ha2VDb21wb25lbnRSZWFjdGl2ZSIsImNvbXAiLCJpbml0aWFsTmFtZSIsImlzUmVuZGVyaW5nUGVuZGluZyIsImhhc0Vycm9yIiwicmVhY3RpdmVSZW5kZXIiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJ2YWx1ZUhvbGRlcktleSIsImF0b21Ib2xkZXJLZXkiLCJwcmV2UmVhZFN0YXRlIiwiaGFzU3ltYm9sIiwiZm9yIiwiUmVhY3RGb3J3YXJkUmVmU3ltYm9sIiwiUmVhY3RNZW1vU3ltYm9sIiwiaXNQcm90b3R5cGVPZiIsIl9PYmplY3QkYXNzaWduIiwiX2V4dGVuZHMiLCJfT2JqZWN0JGNyZWF0ZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9PYmplY3Qka2V5cyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9WYWxpZENvbXBvbmVudENoaWxkcmVuIiwidmFsaWRhdGlvblN0YXRlIiwiaXNSZXF1aXJlZCIsIkZvcm1Hcm91cCIsImhhc0ZlZWRiYWNrIiwiYnNSb2xlIiwiX3RoaXMkcHJvcHMyIiwiX3NwbGl0QnNQcm9wc0FuZE9taXQiLCJzcGxpdEJzUHJvcHNBbmRPbWl0IiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImFyZyIsImFyZ1R5cGUiLCJpbm5lciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2lzQXJyYXkiLCJfY29udGFpbnMiLCJfT3ZlcmxheSIsImlzT25lT2YiLCJvbmUiLCJvZiIsInRyaWdnZXJUeXBlIiwidHJpZ2dlciIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJudW1iZXIiLCJkZWxheVNob3ciLCJkZWxheUhpZGUiLCJkZWZhdWx0T3ZlcmxheVNob3duIiwib3ZlcmxheSIsIm9uQmx1ciIsIm9uRm9jdXMiLCJvbk1vdXNlT3V0Iiwib25Nb3VzZU92ZXIiLCJPdmVybGF5VHJpZ2dlciIsImhhbmRsZVRvZ2dsZSIsImhhbmRsZURlbGF5ZWRTaG93IiwiaGFuZGxlRGVsYXllZEhpZGUiLCJoYW5kbGVIaWRlIiwiaGFuZGxlTW91c2VPdmVyIiwiaGFuZGxlTW91c2VPdmVyT3V0IiwiaGFuZGxlTW91c2VPdXQiLCJfbW91bnROb2RlIiwiY29tcG9uZW50RGlkTW91bnQiLCJyZW5kZXJPdmVybGF5IiwiY29tcG9uZW50RGlkVXBkYXRlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsIl9ob3ZlclNob3dEZWxheSIsIl9ob3ZlckhpZGVEZWxheSIsIl90aGlzMiIsImhpZGUiLCJfdGhpczMiLCJyZWxhdGVkTmF0aXZlIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJuYXRpdmVFdmVudCIsIm1ha2VPdmVybGF5IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJfb3ZlcmxheSIsIkNoaWxkcmVuIiwib25seSIsImNoaWxkUHJvcHMiLCJ0cmlnZ2VyUHJvcHMiLCJjbG9uZUVsZW1lbnQiLCJfaXNSZXF1aXJlZEZvckExMXkiLCJwbGFjZW1lbnQiLCJwb3NpdGlvblRvcCIsInBvc2l0aW9uTGVmdCIsImFycm93T2Zmc2V0VG9wIiwiYXJyb3dPZmZzZXRMZWZ0IiwidGl0bGUiLCJQb3BvdmVyIiwib3V0ZXJTdHlsZSIsImRpc3BsYXkiLCJ0b3AiLCJsZWZ0IiwiYXJyb3dTdHlsZSIsInJvbGUiLCJfY2xhc3NlcyIsImJzU3R5bGUiLCJfZW50cmllcyIsInByb3BWYWx1ZSIsImlzQnNQcm9wIiwiZ2V0QnNQcm9wcyIsIm9taXR0ZWRQcm9wTmFtZXMiLCJpc09taXR0ZWRQcm9wIiwiX3JlZjIiLCJhZGRTdHlsZSIsInN0eWxlVmFyaWFudCIsIl9jdXJyeSIsImN1cnJ5IiwibGFzdCIsInZhcmlhbnQiLCJ0cmltIiwiZGVmYXVsdENsYXNzIiwic3R5bGVzIiwiZGVmYXVsdFN0eWxlIiwiZXhpc3RpbmciLCJTVFlMRVMiLCJwcm9wVHlwZSIsInNpemVzIiwiZGVmYXVsdFNpemUiLCJTSVpFUyIsIm1hcHBlZFNpemUiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImNvcmUiLCJfX2UiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzVW5kZWZpbmVkIiwiaXNGdW5jdGlvbiIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJhc3NpZ25WYWx1ZSIsImRlZXBNZXJnZSIsImV4dGVuZCIsInN0ciIsIiRleHBvcnQiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsIklTX1dSQVAiLCJXIiwiZXhwUHJvdG8iLCJDIiwidmlydHVhbCIsIlIiLCJVIiwiX3JlYWN0MiIsIl9yZWFjdElzIiwiX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiIsImlzVmFsaWRFbGVtZW50IiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiX3R5cGVvZiIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9heGlvczIiLCJfZGVidWcyIiwiX2pzQmFzZSIsIl9jbGFzc0NhbGxDaGVjayIsIlR5cGVFcnJvciIsIlJlc3BvbnNlRXJyb3IiLCJfRXJyb3IiLCJwYXRoIiwicmVzcG9uc2UiLCJSZWZlcmVuY2VFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwicmVxdWVzdCIsImNvbmZpZyIsInN0YXR1cyIsIl9pbmhlcml0cyIsIlJlcXVlc3RhYmxlIiwiYXV0aCIsImFwaUJhc2UiLCJBY2NlcHRIZWFkZXIiLCJfX2FwaUJhc2UiLCJfX2F1dGgiLCJ0b2tlbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJfX0FjY2VwdEhlYWRlciIsIl9fYXV0aG9yaXphdGlvbkhlYWRlciIsIkJhc2U2NCIsImVuY29kZSIsInVybCIsIm5ld0NhY2hlQnVzdGVyIiwiZ2V0VGltZSIsInJhdyIsImhlYWRlcnMiLCJBY2NlcHQiLCJBdXRob3JpemF0aW9uIiwicmVxdWVzdE9wdGlvbnMiLCJ2aXNpYmlsaXR5IiwiYWZmaWxpYXRpb24iLCJwZXJfcGFnZSIsImRhdGUiLCJ0b0lTT1N0cmluZyIsIm1ldGhvZCIsIl9fZ2V0VVJMIiwiX19nZXRSZXF1ZXN0SGVhZGVycyIsInF1ZXJ5UGFyYW1zIiwiTUVUSE9EU19XSVRIX05PX0JPRFkiLCJtZXRob2RIYXNOb0JvZHkiLCJwYXJhbXMiLCJyZXNwb25zZVR5cGUiLCJyZXF1ZXN0UHJvbWlzZSIsImNhdGNoIiwiY2FsbGJhY2tFcnJvck9yVGhyb3ciLCJfcmVxdWVzdCIsInJlc3VsdHMiLCJfcmVzdWx0cyIsInRoaXNHcm91cCIsImFyciIsImFycjIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJuZXh0VXJsIiwibGlua3NIZWFkZXIiLCJsaW5rcyIsInNwbGl0IiwibGluayIsInNlYXJjaCIsIm1hdGNoIiwiZ2V0TmV4dFBhZ2UiLCJwYWdlIiwiX3JlcXVlc3RBbGxQYWdlcyIsIl9vYmplY3QkcmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwiX29iamVjdCRjb25maWciLCJfX2ciLCJpdCIsInVpZCIsIlVTRV9TWU1CT0wiLCJkUCIsImNyZWF0ZURlc2MiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwiTyIsIkF0dHJpYnV0ZXMiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImlubGluZSIsIlJhZGlvIiwiaW5wdXQiLCJfY2xhc3NlczIiLCJleGVjIiwiREVWSUNFX1NJWkVTIiwibGFyZ2UiLCJtZWRpdW0iLCJzbWFsbCIsInhzbWFsbCIsImxnIiwibWQiLCJzbSIsInhzIiwiU1VDQ0VTUyIsIldBUk5JTkciLCJEQU5HRVIiLCJJTkZPIiwiSU5WRVJTRSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJjb21wb25lbnRPckVsZW1lbnQiLCJfb3duZXJEb2N1bWVudDIiLCJfcmVhY3REb20yIiwib3duZXJEb2N1bWVudCIsIkNoZWNrYm94IiwibG9hZCIsImRlYnVnIiwiREVCVUciLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiY29sb3IiLCJsYXN0QyIsInNhdmUiLCJuYW1lc3BhY2VzIiwicmVtb3ZlSXRlbSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwidGFibGUiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsIlJlZ0V4cCIsIiQxIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJmb3JtYXR0ZXJzIiwiaiIsImVuYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImZhbGxiYWNrIiwicGFyZW50Tm9kZSIsImFGdW5jdGlvbiIsInRoYXQiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsImZ1bmNzIiwiYWNjIiwiZGVmIiwiVEFHIiwidGFnIiwic3RhdCIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwic2V0TWV0YSIsInciLCJtZXRhIiwiS0VZIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJub2RlVHlwZSIsImRlZmF1bHRDb250YWluZXIiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImh0bWxGb3IiLCJzck9ubHkiLCJDb250cm9sTGFiZWwiLCJfdGhpcyRwcm9wcyRodG1sRm9yIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsImxlbiIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImNyZWF0ZVNpbXBsZVNjaGVtYSIsImZhY3RvcnkiLCJjb25kaXRpb24iLCJ2YXJpYWJsZXNUb0xvZyIsImZvcm1hdHRlZE1lc3NhZ2UiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJ2YXJpYWJsZSIsIkdVQVJERURfTk9PUCIsInBhcmFsbGVsIiwicHJvY2Vzc29yIiwicmVzdWx0QXJyYXkiLCJmYWlsZWQiLCJwcm9jZXNzb3JDYiIsImlzUHJpbWl0aXZlIiwiaXNNb2RlbFNjaGVtYSIsImlzUHJvcFNjaGVtYSIsInNlcmlhbGl6ZXIiLCJkZXNlcmlhbGl6ZXIiLCJpc0FsaWFzZWRQcm9wU2NoZW1hIiwicHJvcFNjaGVtYSIsImpzb25uYW1lIiwiaXNJZGVudGlmaWVyUHJvcFNjaGVtYSIsImlkZW50aWZpZXIiLCJpc0Fzc2lnbmFibGVUbyIsImFjdHVhbFR5cGUiLCJleHBlY3RlZFR5cGUiLCJleHRlbmRzIiwiaXNNYXBMaWtlIiwicHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyIsImFkZGl0aW9uYWxBcmdzIiwiYXJnTmFtZSIsInNlcmlhbGl6ZUluZm8iLCJzZXREZWZhdWx0TW9kZWxTY2hlbWEiLCJtb2RlbFNjaGVtYSIsImNyZWF0ZU1vZGVsU2NoZW1hIiwibW9kZWwiLCJ0YXJnZXRDbGFzcyIsInByaW1pdGl2ZSIsImpzb25WYWx1ZSIsIlNLSVAiLCJfZGVmYXVsdFByaW1pdGl2ZVByb3AiLCJTVFJJUF9DT01NRU5UUyIsIkFSR1VNRU5UX05BTUVTIiwiZ2V0UGFyYW1OYW1lcyIsImZuU3RyIiwic2VyaWFsaXphYmxlRGVjb3JhdG9yIiwicGFyYW1OYW1lcyIsInBhcmFtTnVtYmVyIiwianNvbiIsImluZm8iLCJzZXJpYWxpemVXaXRoU2NoZW1hIiwiY2hlY2tTdGFyU2NoZW1hSW52YXJpYW50IiwicHJvcERlZiIsInBhdHRlcm4iLCJ0ZXN0Iiwic2VyaWFsaXplU3RhclByb3BzIiwicm9vdENvbnRleHRDYWNoZSIsIldlYWtNYXAiLCJDb250ZXh0IiwicGFyZW50Q29udGV4dCIsIm9uUmVhZHlDYiIsImN1c3RvbUFyZ3MiLCJpc1Jvb3QiLCJwZW5kaW5nQ2FsbGJhY2tzIiwicGVuZGluZ1JlZnNDb3VudCIsInJvb3RDb250ZXh0IiwicGVuZGluZ1JlZnMiLCJyZXNvbHZlZFJlZnMiLCJzY2hlbWFIYXNBbGlhcyIsImRlc2VyaWFsaXplIiwiY2hpbGRKc29uIiwiaXRlbURvbmUiLCJkZXNlcmlhbGl6ZU9iamVjdFdpdGhTY2hlbWEiLCJzZXRUYXJnZXQiLCJsb2NrIiwiY3JlYXRlQ2FsbGJhY2siLCJkZXNlcmlhbGl6ZVByb3BzV2l0aFNjaGVtYSIsImpzb25BdHRyIiwib25CZWZvcmVEZXNlcmlhbGl6ZSIsInByZVByb2Nlc3MiLCJyZXN1bHRDYWxsYmFjayIsIm9uQWZ0ZXJEZXNlcmlhbGl6ZSIsImVyclByZWxpbWluYXJ5IiwiZmluYWxPclJldHJ5VmFsdWUiLCJhZnRlckRlc2VyaWFsaXplIiwiZGVzZXJpYWxpemVQcm9wIiwicmVzdWx0VmFsdWUiLCJzZXRWYWx1ZSIsImRlc2VyaWFsaXplU3RhclByb3BzIiwianNvblBhcmVudFZhbHVlIiwicHJvcE5hbWVPckluZGV4IiwiYmVmb3JlRGVzZXJpYWxpemUiLCJzZXJpYWxpemVBbGwiLCJ0YXJnZXRPclBhdHRlcm4iLCJjbGF6ek9yU2NoZW1hIiwiaW52b2tlSW1tZWRpYXRlbHkiLCJjYW5jZWxEZXNlcmlhbGl6ZSIsImNhbmNlbEF3YWl0cyIsImluZmVyTW9kZWxTY2hlbWEiLCJyZWdpc3RlckZuIiwiZGVmYXVsdFJlZ2lzdGVyRnVuY3Rpb24iLCJhbGlhcyIsImN1c3RvbSIsIm9wdGlvbmFsIiwicHJvcFNlcmlhbGl6ZXIiLCJyZWZlcmVuY2UiLCJsb29rdXBGbiIsImNoaWxkSWRlbnRpZmllckF0dHJpYnV0ZSIsImluaXRpYWxpemVkIiwiaW5pdGlhbGl6ZSIsInV1aWQiLCJhd2FpdCIsImNyZWF0ZURlZmF1bHRSZWZMb29rdXAiLCJnZXRJZGVudGlmaWVyUHJvcCIsImlkZW50aWZpZXJWYWx1ZSIsImpzb25BcnJheSIsIm9uSXRlbURvbmUiLCJpdGVtSW5kZXgiLCJkZXNlcmlhbGl6ZURvbmUiLCJjYWxsYmFja0FmdGVyIiwiaXNNYXAiLCJqc29uT2JqZWN0IiwibWFwQXNBcnJheSIsImtleVByb3BlcnR5TmFtZSIsImZpcmVkIiwicmVzb2x2ZWQiLCJyZWZPcHRzIiwiY29mIiwidG9JbnRlZ2VyIiwiY2VpbCIsImZsb29yIiwic2hhcmVkIiwiY29weXJpZ2h0IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsInZhbGlkYXRlIiwiY2hlY2tUeXBlIiwiY29tcG9uZW50TmFtZVNhZmUiLCJwcm9wRnVsbE5hbWVTYWZlIiwiY2hhaW5lZENoZWNrVHlwZSIsIl9PYmplY3QkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX09iamVjdCRkZWZpbmVQcm9wZXJ0eSIsIl9XZWFrTWFwIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsIkxJQlJBUlkiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiY2hhckF0IiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJSRVRVUk4iLCJpdGVyYWJsZSIsIklURVJBVE9SIiwic3RlcCIsIml0ZXJGbiIsIl90IiwiY3NzIiwidHJhbnNmb3JtcyIsIl9jYW1lbGl6ZVN0eWxlIiwiX2dldENvbXB1dGVkU3R5bGUyIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9oeXBoZW5hdGVTdHlsZSIsIl9pc1RyYW5zZm9ybSIsIl9yZW1vdmVTdHlsZSIsIl9wcm9wZXJ0aWVzIiwidHJhbnNmb3JtIiwiY3NzVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudE5hbWUiLCJjYXB0dXJlIiwiYXR0YWNoRXZlbnQiLCJldmVudCIsInNyY0VsZW1lbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJfR2lzdDIiLCJfVXNlcjIiLCJfSXNzdWUyIiwiX1NlYXJjaDIiLCJfUmF0ZUxpbWl0MiIsIl9SZXBvc2l0b3J5MiIsIl9Pcmdhbml6YXRpb24yIiwiX1RlYW0yIiwiX01hcmtkb3duMiIsIl9Qcm9qZWN0MiIsIkdpdEh1YiIsInVzZXIiLCJvcmdhbml6YXRpb24iLCJ0ZWFtSWQiLCJyZXBvIiwiX2dldEZ1bGxOYW1lIiwicXVlcnkiLCJmdWxsbmFtZSIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvIiwiX3dhbGsiLCJ1dGlscyIsImVuY29kZVVSSUNvbXBvbmVudCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsInNldHRsZSIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ0b1VwcGVyQ2FzZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiYXhpb3NLZXlzIiwib3RoZXJLZXlzIiwiQ2FuY2VsIiwiX0Jhc2U2NCIsImV2YWwiLCJiNjRjaGFycyIsImI2NHRhYiIsImJpbiIsImNiX3V0b2IiLCJjYyIsImNoYXJDb2RlQXQiLCJyZV91dG9iIiwidXRvYiIsInUiLCJjYl9lbmNvZGUiLCJjY2MiLCJwYWRsZW4iLCJvcmQiLCJfZW5jb2RlIiwidXJpc2FmZSIsIm0wIiwiZW5jb2RlVVJJIiwicmVfYnRvdSIsImNiX2J0b3UiLCJjY2NjIiwib2Zmc2V0IiwiYnRvdSIsImNiX2RlY29kZSIsImNoYXJzIiwiX2F0b2IiLCJhdG9iIiwiX2RlY29kZSIsIlVpbnQ4QXJyYXkiLCJkZWNvZGUiLCJub0NvbmZsaWN0IiwiVkVSU0lPTiIsImZyb21CYXNlNjQiLCJ0b0Jhc2U2NCIsIl9fYnVmZmVyX18iLCJub0VudW0iLCJleHRlbmRTdHJpbmciLCJERVNDUklQVE9SUyIsImdPUFMiLCJwSUUiLCIkYXNzaWduIiwiQSIsIksiLCJUIiwiYUxlbiIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ0b0lPYmplY3QiLCJhcnJheUluZGV4T2YiLCJuYW1lcyIsImZhaWxzIiwiZXhwIiwiaXNFbnRyaWVzIiwiZ09QRCIsInJlZGVmaW5lIiwiSXRlcmF0b3JzIiwiJGl0ZXJDcmVhdGUiLCJzZXRUb1N0cmluZ1RhZyIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiSVNfU0VUIiwiRk9SQ0VEIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJUT19TVFJJTkdfVEFHIiwiRE9NSXRlcmFibGVzIiwiQ29sbGVjdGlvbiIsImhpZGRlbktleXMiLCJzYWZlIiwiZm9yYmlkZGVuRmllbGQiLCJfaW5ET00yIiwiX3Byb3BUeXBlczIiLCJfY29tcG9uZW50T3JFbGVtZW50MiIsIl9nZXRDb250YWluZXIyIiwiX0xlZ2FjeVBvcnRhbDIiLCJQb3J0YWwiLCJfdGVtcCIsImdldE1vdW50Tm9kZSIsIl9wb3J0YWxDb250YWluZXJOb2RlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsInNldENvbnRhaW5lciIsIm9uUmVuZGVyZWQiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImNyZWF0ZVBvcnRhbCIsImRvYyIsIndpbiIsIl9pc1dpbmRvdyIsImRvY0VsZW0iLCJoZWlnaHQiLCJ3aWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiX2NhbWVsaXplIiwibXNQYXR0ZXJuIiwic2Nyb2xsVG8iLCJfb24yIiwiX29mZjIiLCJfZmFkZVN0eWxlcyIsIl9UcmFuc2l0aW9uIiwiaW4iLCJtb3VudE9uRW50ZXIiLCJ1bm1vdW50T25FeGl0IiwiYXBwZWFyIiwiZmFkZVN0eWxlcyIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIkZhZGUiLCJpbm5lclByb3BzIiwicmVjYWxjIiwic2Nyb2xsRGl2IiwicG9zaXRpb24iLCJvdmVyZmxvdyIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJlbGVtZW50IiwiY2xhc3NMaXN0IiwiYmFzZVZhbCIsIl9pc1dpbmRvdzIiLCJ0YWdOYW1lIiwiZnVsbFdpZHRoIiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudFJlY3QiLCJyaWdodCIsImFicyIsIlRvcG9sb2d5RWRpdG9yIiwicHJvcGVydHlDaGVja2JveGVzIiwidGFza0NoZWNrYm94ZXMiLCJjb2xsZWN0aW9uQ2hlY2tib3hlcyIsInJlcXVpcmVtZW50T3B0aW9ucyIsInBsYWNlaG9sZGVyIiwiZGVmYXVsdFZhbHVlIiwib3BlblJlc2V0TW9kYWwiLCJzaG93UmVzZXRNb2RhbCIsImNsb3NlUmVzZXRNb2RhbCIsImNsb3NlQnV0dG9uIiwicmVzZXQiLCJob3QiLCJUb3BCYXIiLCJoYW5kbGVUb3BvbG9neUlkQ2hhbmdlIiwicHJldmVudERlZmF1bHQiLCJzZXRUb3BvbG9neUlkIiwiZm9ybSIsInRvZ2dsZUVkaXRpbmciLCJkYXRhLXRvZ2dsZSIsImRhdGEtdGFyZ2V0IiwiZWRpdGluZyIsIm9uU3VibWl0IiwiRmlsZUFjdGlvbnMiLCJyZW1vdGVVc2VyIiwicmVtb3RlUmVwbyIsInJlbW90ZVBhdGgiLCJmZXRjaEJ0biIsImNhbmNlbEZldGNoIiwidXBkYXRlUmVtb3RlRmlsZXMiLCJzZXRFcnJvciIsImhhbmRsZUZldGNoIiwiZmlsZVNlbGVjdGlvbnMiLCJjaGVja2VkIiwiZ2V0UmVwbyIsImdldENvbnRlbnRzIiwicmVtb3RlRmlsZXMiLCJjb250ZW50cyIsInByb2Nlc3NYTUwiLCJmZXRjaFRvcG9sb2dpZXMiLCJnaXRodWIiLCJzdWJzdHIiLCJmaWxlIiwiZG93bmxvYWRfdXJsIiwiYWRkUmVtb3RlRmlsZSIsInhtbFN0cmluZyIsInBhcnNlciIsIkRPTVBhcnNlciIsInhtbCIsInBhcnNlRnJvbVN0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0VmFyaWFibGVzIiwic2V0UHJvcGVydGllcyIsImhwIiwic2V0UmVxdWlyZW1lbnRzIiwidGV4dENvbnRlbnQiLCJoYXNBdHRyaWJ1dGUiLCJleGVSZWFjaGFibGUiLCJleGVWYWx1ZSIsImVudlJlYWNoYWJsZSIsImVudlZhbHVlIiwiYWNjZXNzIiwic2V0VGFza3MiLCJzZXRDb2xsZWN0aW9ucyIsInNldE1haW4iLCJoYW5kbGVGaWxlTG9hZCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNUZXh0IiwiZmlsZXMiLCJoYW5kbGVGaWxlU2F2ZSIsInhtbERvYyIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlRG9jdW1lbnQiLCJyb290Iiwic2V0QXR0cmlidXRlIiwidGFza0V4ZSIsInRhc2tSZXF1aXJlbWVudHMiLCJ0YXNrUmVxdWlyZW1lbnQiLCJ0YXNrRW52IiwicHJvcGVydGllc0NvbnRhaW5lciIsImNvbGxlY3Rpb25SZXF1aXJlbWVudHMiLCJjb2xsZWN0aW9uUmVxdWlyZW1lbnQiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJ2a2JlYXV0aWZ5IiwiYmxvYiIsIkJsb2IiLCJzYXZlQXMiLCJvbkNoYW5nZSIsImNyZWF0ZVNoaWZ0QXJyIiwic3BhY2UiLCJpeCIsImlzU3VicXVlcnkiLCJwYXJlbnRoZXNpc0xldmVsIiwic3BsaXRfc3FsIiwidGFiIiwidGV4dCIsImluQ29tbWVudCIsInNxbCIsImFyX2J5X3F1b3RlIiwieG1sbWluIiwicHJlc2VydmVDb21tZW50cyIsImpzb25taW4iLCJjc3NtaW4iLCJzcWxtaW4iLCJkaXNwYXRjaEV2ZW50IiwiTW91c2VFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJIVE1MQW5jaG9yRWxlbWVudCIsImgiLCJVUkwiLCJ3ZWJraXRVUkwiLCJkb3dubG9hZCIsInJlbCIsIm9yaWdpbiIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIm1zU2F2ZU9yT3BlbkJsb2IiLCJhdXRvQm9tIiwiaW5uZXJUZXh0IiwiSFRNTEVsZW1lbnQiLCJzYWZhcmkiLCJvbmxvYWRlbmQiLCJyZWFkQXNEYXRhVVJMIiwiX2FsbCIsIl9CdXR0b24iLCJ2ZXJ0aWNhbCIsImp1c3RpZmllZCIsIkJ1dHRvbkdyb3VwIiwiQ29sbGVjdGlvbkxpc3QiLCJhZGRDb2xsZWN0aW9uQnRuIiwiaGFuZGxlQWRkQ29sbGVjdGlvbiIsInNldElucHV0VmFsaWRpdHkiLCJhZGRDb2xsZWN0aW9uIiwiaW5wdXRWYWxpZCIsImNvbGxlY3Rpb25zVmlzaWJsZSIsInRvZ2dsZUNvbGxlY3Rpb25zVmlzaWJpbGl0eSIsIlByb3BUeXBlcyIsInZhbGlkIiwiZWRpdENvbGxlY3Rpb25CdG4iLCJoaWRlRWRpdENvbGxlY3Rpb25CdXR0b24iLCJoYW5kbGVFZGl0Q29sbGVjdGlvbiIsImVkaXRDb2xsZWN0aW9uIiwiaGFuZGxlUmVtb3ZlQ29sbGVjdGlvbiIsInJlbW92ZUNvbGxlY3Rpb24iLCJjbG9zZURlbGV0ZU1vZGFsIiwiVGFza0NoZWNrYm94ZXMiLCJjdXJyZW50UmVxdWlyZW1lbnQiLCJyZXF1aXJlbWVudENvbnRhaW5lcnMiLCJjb3VudCIsImN1cnJlbnRUYXNrIiwiZmluZCIsImJvZHlWaXNpYmxlIiwidG9nZ2xlQm9keVZpc2liaWxpdHkiLCJvcGVuRGVsZXRlTW9kYWwiLCJkZWxldGVNb2RhbFZpc2libGUiLCJHcm91cExpc3QiLCJhZGRHcm91cEJ0biIsImhhbmRsZUFkZEdyb3VwIiwidGFza3NJbmRleCIsImFkZE1haW5Hcm91cCIsImdyb3Vwc1Zpc2libGUiLCJ0b2dnbGVHcm91cHNWaXNpYmlsaXR5IiwiR3JvdXAiLCJlZGl0R3JvdXBCdG4iLCJoaWRlRWRpdEdyb3VwQnV0dG9uIiwiaGFuZGxlRWRpdEdyb3VwIiwiZWRpdE1haW5Hcm91cCIsImhhbmRsZVJlbW92ZUdyb3VwIiwicmVtb3ZlTWFpbkdyb3VwIiwiQ29sbGVjdGlvbkNoZWNrYm94ZXMiLCJjdXJyZW50Q29sbGVjdGlvbiIsIlByb3BlcnR5TGlzdCIsImFkZFByb3BlcnR5QnRuIiwiaGFuZGxlQWRkUHJvcGVydHkiLCJhZGRQcm9wZXJ0eSIsInByb3BlcnRpZXNWaXNpYmxlIiwidG9nZ2xlUHJvcGVydGllc1Zpc2liaWxpdHkiLCJQcm9wZXJ0eSIsImhhbmRsZUVkaXRQcm9wZXJ0eSIsImVkaXRQcm9wZXJ0eSIsImhhbmRsZVJlbW92ZVByb3BlcnR5IiwicmVtb3ZlUHJvcGVydHkiLCJSZXF1aXJlbWVudExpc3QiLCJhZGRSZXF1aXJlbWVudEJ0biIsImhhbmRsZUFkZFJlcXVpcmVtZW50IiwiYWRkUmVxdWlyZW1lbnQiLCJkZWZhdWx0Q2hlY2tlZCIsInJlcXVpcmVtZW50c1Zpc2libGUiLCJ0b2dnbGVSZXF1aXJlbWVudHNWaXNpYmlsaXR5IiwiUmVxdWlyZW1lbnQiLCJlZGl0UmVxdWlyZW1lbnRCdG4iLCJoaWRlRWRpdFJlcXVpcmVtZW50QnV0dG9uIiwiaGFuZGxlRWRpdFJlcXVpcmVtZW50IiwiZWRpdFJlcXVpcmVtZW50IiwiaGFuZGxlUmVtb3ZlUmVxdWlyZW1lbnQiLCJyZW1vdmVSZXF1aXJlbWVudCIsInJlYWRPbmx5IiwiVGFza0xpc3QiLCJhZGRUYXNrQnRuIiwiaGFuZGxlQWRkVGFzayIsImFkZFRhc2siLCJ0ZXh0QWxpZ24iLCJwYWRkaW5nIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwidGFza3NWaXNpYmxlIiwidG9nZ2xlVGFza3NWaXNpYmlsaXR5IiwiVGFzayIsImVkaXRUYXNrQnRuIiwiaGlkZUVkaXRUYXNrQnV0dG9uIiwiaGFuZGxlRWRpdFRhc2siLCJlZGl0VGFzayIsImhhbmRsZVJlbW92ZVRhc2siLCJyZW1vdmVUYXNrIiwiZXhlUmVhY2hhYmxlQ2hlY2tib3giLCJlbnZSZWFjaGFibGVDaGVja2JveCIsImVudlByZXNlbnQiLCJjdXJyZW50UHJvcGVydHkiLCJNYWluRWRpdG9yIiwiZWRpdFRhc2tzSW5NYWluQnRuIiwiZWRpdENvbGxlY3Rpb25zSW5NYWluQnRuIiwiaGFuZGxlRWRpdFRhc2tzSW5NYWluIiwiaGFuZGxlRWRpdENvbGxlY3Rpb25zSW5NYWluIiwicHVsbFJpZ2h0IiwiQmFkZ2UiLCJoYXNDb250ZW50IiwiaGlkZGVuIiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCIsInEiLCJ6IiwiRCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwicmVmcyIsInVwZGF0ZXIiLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsIkkiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkoiLCJMIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiX293bmVyIiwiUSIsImtleVByZWZpeCIsIlYiLCJlc2NhcGUiLCJhYSIsIlgiLCJOIiwiWSIsIloiLCJiYSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsInRvQXJyYXkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJkYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5Iiwic2FuaXRpemVVUkwiLCJVYSIsIlZhIiwieGxpbmtIcmVmIiwiV2EiLCJYYSIsIlNhIiwiVGEiLCJSYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJwYiIsInFiIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyYiIsInNiIiwibm9kZU5hbWUiLCJ4YiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJ6YiIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFiIiwiY29udHJvbGxlZCIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsIlJiIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImRjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZWMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImZjIiwiaGMiLCJzaWJsaW5nIiwiZ2MiLCJpYyIsImpjIiwia2MiLCJsYyIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIm1jIiwibmMiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiTGMiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImtkIiwibGQiLCJzZXRQcm9wZXJ0eSIsInN1YnN0cmluZyIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwicGFyYW0iLCJ3YnIiLCJvZCIsInBkIiwicWQiLCJyZCIsInNkIiwidGQiLCJ1ZCIsInZkIiwibmV4dFNpYmxpbmciLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwieWQiLCJjb250ZW50RWRpdGFibGUiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIl9faHRtbCIsIkhkIiwiSWQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiZGlzcGF0Y2hDb25maWciLCJVZCIsIl90YXJnZXRJbnN0IiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIm5vdyIsImlzVHJ1c3RlZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsInJlIiwiZGV0YWlsIiwic2UiLCJ2ZSIsImxvY2FsZSIsIndoaWNoIiwidGUiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ1ZSIsIndlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0aW1lIiwid2VlayIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwiT2UiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGUiLCJnZXRNb2RpZmllclN0YXRlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwicmYiLCJyZXBlYXQiLCJzZiIsImRhdGFUcmFuc2ZlciIsInRmIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInVmIiwidmYiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIndmIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIkxmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiTWYiLCJ1bnN0YWJsZV9ub3ciLCJOZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiT2YiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlBmIiwiUWYiLCJSZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiU2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJUZiIsIlVmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsIkxnIiwiY29udGV4dFR5cGUiLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJOZyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tcG9uZW50V2lsbE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJlbGVtZW50VHlwZSIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImdpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiaGkiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwibGkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJzdGFjayIsIkJpIiwiV2Vha1NldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJmb2N1cyIsIktpIiwiTGkiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiUmkiLCJTaSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwiSmoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiS2oiLCJNaiIsIk5qIiwicGluZ0NhY2hlIiwiT2oiLCJ1YiIsIlBqIiwiWGMiLCJRaiIsIlNqIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIndiIiwiYWN0aXZlRWxlbWVudERldGFjaGVkIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlRqIiwid2QiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwiTGoiLCJsayIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJZaiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiY3JlYXRlTW9kZWwiLCJfUmVxdWVzdGFibGUyIiwiR2lzdCIsIl9SZXF1ZXN0YWJsZSIsIl9faWQiLCJnaXN0IiwiX3JlcXVlc3QyMDRvcjQwNCIsInJldmlzaW9uIiwiY29tbWVudCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInJlYXNvbiIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5OdW1iZXIiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJyZXF1ZXN0VVJMIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInByZXZUaW1lIiwiY3JlYXRlRGVidWciLCJlbmFibGVkIiwiY3VyciIsIm1zIiwiY29lcmNlIiwibG9nRm4iLCJzZWxlY3RDb2xvciIsImluaXQiLCJkaXNhYmxlIiwic2tpcHMiLCJwbHVyYWwiLCJwYXJzZUZsb2F0IiwibG9uZyIsInJvdW5kIiwiZm10U2hvcnQiLCJfUmVxdWVzdGFibGUzIiwiVXNlciIsIl9fdXNlciIsImVuZHBvaW50IiwiX2dldE9wdGlvbnNXaXRoRGVmYXVsdHMiLCJfX2dldFNjb3BlZFVybCIsInNpbmNlIiwiX2RhdGVUb0lTTyIsImJlZm9yZSIsIklzc3VlIiwicmVwb3NpdG9yeSIsIl9fcmVwb3NpdG9yeSIsImlzc3VlRGF0YSIsImlzc3VlIiwibWlsZXN0b25lIiwibWlsZXN0b25lRGF0YSIsImxhYmVsRGF0YSIsImxhYmVsIiwiU2VhcmNoIiwiX19kZWZhdWx0cyIsIndpdGhPcHRpb25zIiwiX3NlYXJjaCIsIlJhdGVMaW1pdCIsIl91dGYyIiwiUmVwb3NpdG9yeSIsIl9fZnVsbG5hbWUiLCJfX2N1cnJlbnRUcmVlIiwiYnJhbmNoIiwic2hhIiwiaGVhZCIsInVudGlsIiwidHJlZVNIQSIsImNvbnRlbnQiLCJwb3N0Qm9keSIsIl9nZXRDb250ZW50T2JqZWN0IiwiZW5jb2RpbmciLCJCdWZmZXIiLCJiYXNlVHJlZVNIQSIsImJsb2JTSEEiLCJuZXdUcmVlIiwiYmFzZV90cmVlIiwiYmFzZVNIQSIsInBhcmVudCIsInBhcmVudHMiLCJjb21taXRTSEEiLCJmb3JjZSIsIm9yZyIsIm9sZEJyYW5jaCIsIm5ld0JyYW5jaCIsImdldFJlZiIsIl90aGlzNCIsImdldFNoYSIsImRlbGV0ZUNvbW1pdCIsIm9sZFBhdGgiLCJuZXdQYXRoIiwiX3RoaXM1Iiwib2xkU2hhIiwiZ2V0VHJlZSIsIl9yZWYyJGRhdGEiLCJjcmVhdGVUcmVlIiwiX3JlZjMiLCJjb21taXQiLCJfcmVmNCIsInVwZGF0ZUhlYWQiLCJfdGhpczYiLCJmaWxlUGF0aCIsInNob3VsZEVuY29kZSIsImF1dGhvciIsImNvbW1pdHRlciIsImJhc2U2NCIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsIlJhbmdlRXJyb3IiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbVN0cmluZyIsImNvcHkiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5Iiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInN1YmFycmF5IiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJpbnNwZWN0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJfYXJyIiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJkc3QiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwib3V0cHV0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsIkxOMiIsImZyZWVFeHBvcnRzIiwiZnJlZUdsb2JhbCIsImJ5dGVDb3VudCIsImJ5dGVJbmRleCIsInN0cmluZ0Zyb21DaGFyQ29kZSIsInVjczJkZWNvZGUiLCJleHRyYSIsImNvdW50ZXIiLCJjaGVja1NjYWxhclZhbHVlIiwiY3JlYXRlQnl0ZSIsImVuY29kZUNvZGVQb2ludCIsInJlYWRDb250aW51YXRpb25CeXRlIiwiY29udGludWF0aW9uQnl0ZSIsImRlY29kZVN5bWJvbCIsImJ5dGUxIiwidXRmOCIsImJ5dGVTdHJpbmciLCJ1Y3MyZW5jb2RlIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJPcmdhbml6YXRpb24iLCJfX25hbWUiLCJkaXJlY3Rpb24iLCJUZWFtIiwiX190ZWFtSWQiLCJNYXJrZG93biIsIlByb2plY3QiLCJjb2xJZCIsImxpc3RQcm9qZWN0Q29sdW1ucyIsImNvbHVtbiIsImNhcmRzSW5Db2x1bW5zIiwiY2FyZHMiLCJjYXJkSWQiLCJjb2x1bW5faWQiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImZyb21JbmRleCIsIiRPYmplY3QiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYW55IiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsInZhbGlkYXRvcnMiLCJhbGxQcm9wVHlwZXMiLCJ2YWxpZGF0b3IiLCJfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCIkdmFsdWVzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIkxhenkiLCJNZW1vIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwidHlwZU9mIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIm9uS2V5RG93biIsInRhYkluZGV4IiwiaXNUcml2aWFsSHJlZiIsIlNhZmVBbmNob3IiLCJoYW5kbGVDbGljayIsImhhbmRsZUtleURvd24iLCJwb2ludGVyRXZlbnRzIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9TeW1ib2wkaXRlcmF0b3IiLCJfU3ltYm9sIiwiJGF0IiwiaXRlcmF0ZWQiLCJwb2ludCIsIlRPX1NUUklORyIsIk9iamVjdFByb3RvIiwiYWRkVG9VbnNjb3BhYmxlcyIsIl9rIiwiQXJndW1lbnRzIiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJEdPUFMiLCIkRFAiLCJnT1BOIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwiTkFUSVZFX1dFQUtfTUFQIiwiSVNfSUUxMSIsIkFjdGl2ZVhPYmplY3QiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwidWZzdG9yZSIsIiRXZWFrTWFwIiwiZ2V0Q29uc3RydWN0b3IiLCJfZiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIm9yaWdpbmFsIiwiU1BFQ0lFUyIsInJlZGVmaW5lQWxsIiwiYW5JbnN0YW5jZSIsImZvck9mIiwiY3JlYXRlQXJyYXlNZXRob2QiLCIkaGFzIiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJfbCIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJBRERFUiIsIkFycmF5UHJvdG8iLCJjbGFzc29mIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJBUkciLCJ0cnlHZXQiLCJjYWxsZWUiLCJJU19XRUFLIiwiSVNfQURERVIiLCJzZXRTdHJvbmciLCJDT0xMRUNUSU9OIiwibWFwcGluZyIsIm1hcEZuIiwibmV4dEl0ZW0iLCJyb290Q2xvc2UiLCJPdmVybGF5IiwiX2VsZW1lbnRUeXBlMiIsIl9Qb3J0YWwyIiwiX1Bvc2l0aW9uMiIsIl9Sb290Q2xvc2VXcmFwcGVyMiIsImhhbmRsZUhpZGRlbiIsImV4aXRlZCIsIm9uSGlkZGVuTGlzdGVuZXIiLCJfcHJvcHMiLCJjb250YWluZXJQYWRkaW5nIiwic2hvdWxkVXBkYXRlUG9zaXRpb24iLCJUcmFuc2l0aW9uIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwib25Sb290Q2xvc2UiLCJyb290Q2xvc2VFdmVudCIsIl9tb3VudE92ZXJsYXlUYXJnZXQiLCJfb3ZlcmxheVRhcmdldCIsIl91bm1vdW50T3ZlcmxheVRhcmdldCIsIl9yZW5kZXJPdmVybGF5IiwiaW5pdGlhbFJlbmRlciIsIl9vdmVybGF5SW5zdGFuY2UiLCJfdW5yZW5kZXJPdmVybGF5IiwiX2lzTW91bnRlZCIsIl9jbGFzc25hbWVzMiIsIl9jYWxjdWxhdGVQb3NpdGlvbjIiLCJQb3NpdGlvbiIsImdldFRhcmdldCIsInRhcmdldEVsZW1lbnQiLCJtYXliZVVwZGF0ZVBvc2l0aW9uIiwicGxhY2VtZW50Q2hhbmdlZCIsIl9sYXN0VGFyZ2V0IiwidXBkYXRlUG9zaXRpb24iLCJfbmVlZHNGbHVzaCIsInByZXZQcm9wcyIsIl9zdGF0ZSIsImFycm93UG9zaXRpb24iLCJvdmVybGF5Tm9kZSIsImNoaWxkT2Zmc2V0IiwiX29mZnNldDIiLCJfcG9zaXRpb24yIiwiX2dldE9mZnNldDIiLCJvdmVybGF5SGVpZ2h0Iiwib3ZlcmxheVdpZHRoIiwidG9wRGVsdGEiLCJjb250YWluZXJEaW1lbnNpb25zIiwiZ2V0Q29udGFpbmVyRGltZW5zaW9ucyIsImNvbnRhaW5lclNjcm9sbCIsInNjcm9sbCIsImNvbnRhaW5lckhlaWdodCIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwiZ2V0VG9wRGVsdGEiLCJsZWZ0RGVsdGEiLCJjb250YWluZXJXaWR0aCIsImxlZnRFZGdlT2Zmc2V0IiwicmlnaHRFZGdlT2Zmc2V0IiwiZ2V0TGVmdERlbHRhIiwiX3Njcm9sbFRvcDIiLCJjb250YWluZXJOb2RlIiwiaW5uZXJIZWlnaHQiLCJfZ2V0T2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0IiwiX3N0eWxlIiwiX29mZnNldFBhcmVudCIsIl9vZmZzZXQiLCJfc2Nyb2xsVG9wIiwiX3Njcm9sbExlZnQiLCJySHlwaGVuIiwiY2hyIiwiX2h5cGhlbmF0ZSIsInJVcHBlciIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJybnVtbm9ucHgiLCJycG9zaXRpb24iLCJydW5TdHlsZSIsInJ1bnRpbWVTdHlsZSIsInJzTGVmdCIsInBpeGVsTGVmdCIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uVGltaW5nIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwidHJhbnNpdGlvblRpbWluZyIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIl9nZXRUcmFuc2l0aW9uUHJvcGVydCIsInZlbmRvck1hcCIsIk1veiIsIldlYmtpdCIsInZlbmRvcnMiLCJ2ZW5kb3IiLCJnZXRUcmFuc2l0aW9uUHJvcGVydGllcyIsInRpbWluZyIsImR1cmF0aW9uIiwic3VwcG9ydGVkVHJhbnNmb3JtcyIsIl9jb250YWluczIiLCJfYWRkRXZlbnRMaXN0ZW5lcjIiLCJSb290Q2xvc2VXcmFwcGVyIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJkb2N1bWVudE1vdXNlQ2FwdHVyZUxpc3RlbmVyIiwiaGFuZGxlTW91c2VDYXB0dXJlIiwiZG9jdW1lbnRNb3VzZUxpc3RlbmVyIiwiaGFuZGxlTW91c2UiLCJkb2N1bWVudEtleXVwTGlzdGVuZXIiLCJoYW5kbGVLZXlVcCIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwicHJldmVudE1vdXNlUm9vdENsb3NlIiwiaXNMZWZ0Q2xpY2tFdmVudCIsIkVYSVRJTkciLCJFWElURUQiLCJVTk1PVU5URUQiLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiaW5pdGlhbFN0YXR1cyIsInBhcmVudEdyb3VwIiwidHJhbnNpdGlvbkdyb3VwIiwiaXNNb3VudGluZyIsImVudGVyIiwiYXBwZWFyU3RhdHVzIiwibmV4dENhbGxiYWNrIiwicHJldlN0YXRlIiwidXBkYXRlU3RhdHVzIiwibmV4dFN0YXR1cyIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwiZXhpdCIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsInNhZmVTZXRTdGF0ZSIsIm9uVHJhbnNpdGlvbkVuZCIsInNldE5leHRDYWxsYmFjayIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwicG9seWZpbGwiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImZvdW5kV2lsbE1vdW50TmFtZSIsImZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUiLCJmb3VuZFdpbGxVcGRhdGVOYW1lIiwibmV3QXBpTmFtZSIsIm1heWJlU25hcHNob3QiLCJzbmFwc2hvdCIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJjbGFzc05hbWVzU2hhcGUiLCJ0aW1lb3V0c1NoYXBlIiwiZXZlcnkiLCJfR2x5cGhpY29uIiwiRm9ybUNvbnRyb2xGZWVkYmFjayIsImdldEdseXBoIiwicmVuZGVyRGVmYXVsdEZlZWRiYWNrIiwiZ2x5cGgiLCJHbHlwaGljb24iLCJGb3JtQ29udHJvbFN0YXRpYyIsIl9vbiIsIl9vZmYiLCJfZmlsdGVyIiwiX2xpc3RlbiIsImxpc3RlbiIsInNlbGVjdG9yIiwiX3F1ZXJ5U2VsZWN0b3JBbGwiLCJtYXliZUlEIiwibWF5YmVDbGFzcyIsIm5hbWVPbmx5Iiwic2ltcGxlU2VsZWN0b3JSRSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIl9hY3RpdmVFbGVtZW50MiIsIl9kZXByZWNhdGVkMiIsIl93YXJuaW5nMiIsIl9Nb2RhbE1hbmFnZXIyIiwiX1JlZkhvbGRlcjIiLCJfYWRkRm9jdXNMaXN0ZW5lcjIiLCJtb2RhbE1hbmFnZXIiLCJfaW5pdGlhbGlzZVByb3BzIiwib21pdFByb3BzIiwibmV3UHJvcHMiLCJkaWFsb2ciLCJmaWx0ZXJlZFByb3BzIiwiX2RpYWxvZyRwcm9wcyIsInNldE1vdW50Tm9kZSIsIm9uUG9ydGFsUmVuZGVyZWQiLCJzZXRNb2RhbE5vZGVSZWYiLCJyZW5kZXJCYWNrZHJvcCIsInNldERpYWxvZ1JlZiIsImNoZWNrRm9yRm9jdXMiLCJvblNob3ciLCJfcHJvcHMyIiwiZGlhbG9nRWxlbWVudCIsImN1cnJlbnRBY3RpdmVFbGVtZW50IiwibGFzdEZvY3VzIiwicmVzdG9yZUxhc3RGb2N1cyIsImlzVG9wTW9kYWwiLCJtYW5hZ2VyIiwib25Fc2NhcGVLZXlEb3duIiwib25Fc2NhcGVLZXlVcCIsIm9uQmFja2Ryb3BDbGljayIsImJhY2tkcm9wU3R5bGUiLCJfcHJvcHMzIiwiaGFuZGxlQmFja2Ryb3BDbGljayIsIl9vbkRvY3VtZW50S2V5ZG93bkxpc3RlbmVyIiwiaGFuZGxlRG9jdW1lbnRLZXlEb3duIiwiX29uRG9jdW1lbnRLZXl1cExpc3RlbmVyIiwiaGFuZGxlRG9jdW1lbnRLZXlVcCIsIl9vbkZvY3VzaW5MaXN0ZW5lciIsIm1vdW50Tm9kZSIsIm1vZGFsTm9kZSIsIl9wcm9wczQiLCJNYW5hZ2VyIiwiZGVwcmVjYXRlZCIsIl93YXJuaW5nIiwid2FybmVkIiwibWVzc2FnZUtleSIsIl9yZXNldFdhcm5lZCIsIndhcm5pbmciLCJfY2xhc3MyIiwiX3N0eWxlMiIsIl9zY3JvbGxiYXJTaXplMiIsIl9pc092ZXJmbG93aW5nMiIsIl9tYW5hZ2VBcmlhSGlkZGVuIiwiZmluZENvbnRhaW5lciIsIm1vZGFsIiwibW9kYWxzIiwic2V0Q29udGFpbmVyU3R5bGUiLCJvdmVyZmxvd2luZyIsInJlbW92ZUNvbnRhaW5lclN0eWxlIiwiTW9kYWxNYW5hZ2VyIiwiX3JlZjIkaGlkZVNpYmxpbmdOb2RlIiwiaGlkZVNpYmxpbmdOb2RlcyIsIl9yZWYyJGhhbmRsZUNvbnRhaW5lciIsImhhbmRsZUNvbnRhaW5lck92ZXJmbG93IiwibW9kYWxJZHgiLCJjb250YWluZXJJZHgiLCJjb250YWluZXJzIiwiaGlkZVNpYmxpbmdzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInNob3dTaWJsaW5ncyIsImFyaWFIaWRkZW4iLCJfYWRkQ2xhc3MiLCJfcmVtb3ZlQ2xhc3MiLCJfaGFzQ2xhc3MiLCJoYXNDbGFzcyIsInJlcGxhY2VDbGFzc05hbWUiLCJvcmlnQ2xhc3MiLCJjbGFzc1RvUmVtb3ZlIiwic2libGluZ3MiLCJCTEFDS0xJU1QiLCJtb3VudCIsIlJlZkhvbGRlciIsInVzZUZvY3VzaW4iLCJNb2RhbEJvZHkiLCJkaWFsb2dDbGFzc05hbWUiLCJNb2RhbERpYWxvZyIsImJzQ2xhc3NOYW1lIiwibW9kYWxTdHlsZSIsImRpYWxvZ0NsYXNzZXMiLCJvbk1vdXNlRG93biIsIk1vZGFsRm9vdGVyIiwiX0Nsb3NlQnV0dG9uIiwiY2xvc2VMYWJlbCIsIk1vZGFsSGVhZGVyIiwiQ2xvc2VCdXR0b24iLCJNb2RhbFRpdGxlIiwiY29tcG9uZW50UHJvcFR5cGVzIiwicGFyZW50UHJvcHMiLCJJbnB1dEdyb3VwQWRkb24iLCJJbnB1dEdyb3VwQnV0dG9uIiwiUmVhY3QiLCJBcHBDb250YWluZXIiLCJ3YXJuQWJvdXRITVJEaXNhYmxlZCIsInNob3VsZFdyYXBXaXRoQXBwQ29udGFpbmVyIiwiYXJlQ29tcG9uZW50c0VxdWFsIiwic2V0Q29uZmln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b25CLEVBQ2xCaHdCLEVBQU9ELFFBQVVBLEVBQWlCLFMsNkJDbkQrRFksT0FBT0MsZUFBZWIsRUFBUSxhQUFhLENBQUNtQixPQUFNLElBQUssSUFBbEgrQixFQUFzSHFzSCxHQUF0SHJzSCxFQUE0SSxFQUFRLEtBQXZJLGlCQUFpQkEsR0FBRyxZQUFZQSxFQUFFQSxFQUFFMkYsUUFBUTNGLEVBQXFHLFNBQVNzc0gsRUFBYXRzSCxHQUFHLE9BQU9zc0gsRUFBYUMsdUJBQXVCRCxFQUFhQyxzQkFBcUIsRUFBR3YzRyxRQUFRN1UsTUFBTSx3R0FBd0c2VSxRQUFRN1UsTUFBTSw2REFBNkRrc0gsRUFBTXRzRixTQUFTQyxLQUFLaGdDLEVBQUV3ekIsVUFBVTg0RixFQUFhQyxzQkFBcUIsRUFBRyxJQUFJajlELEVBQUksU0FBU3R2RCxJQUFJLE9BQU9BLEVBQUV3c0gsMkJBQTJCLFNBQVN4c0gsR0FBRyxPQUFPLFNBQVN2QixHQUFHLE9BQU80dEgsRUFBTXJnRyxjQUFjc2dHLEVBQWEsS0FBS0QsRUFBTXJnRyxjQUFjaHNCLEVBQUV2QixNQUFNLFNBQVN1QixHQUFHLE9BQU9BLElBQUlzdkQsRUFBSWs5RCw0QkFBMkIsRUFBd0kxdkgsRUFBUXd2SCxhQUFhQSxFQUFheHZILEVBQVF3eUQsSUFBSUEsRUFBSXh5RCxFQUFRMnZILG1CQUF4SyxTQUFTenNILEVBQUV2QixHQUFHLE9BQU91QixJQUFJdkIsR0FBcUwzQixFQUFRNHZILFVBQWhMLGFBQW9NNXZILEVBQVE2dkgsS0FBMUwsU0FBUzNzSCxHQUFHLE9BQU9BLEdBQWlMbEQsRUFBUTh2SCxtQkFBbksiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNDMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogTW9iWCAtIChjKSBNaWNoZWwgV2VzdHN0cmF0ZSAyMDE1IC0gMjAyMCAtIE1JVCBMaWNlbnNlZCAqL1xuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cblxudmFyIE9CRlVTQ0FURURfRVJST1IgPSBcIkFuIGludmFyaWFudCBmYWlsZWQsIGhvd2V2ZXIgdGhlIGVycm9yIGlzIG9iZnVzY2F0ZWQgYmVjYXVzZSB0aGlzIGlzIGEgcHJvZHVjdGlvbiBidWlsZC5cIjtcclxudmFyIEVNUFRZX0FSUkFZID0gW107XHJcbk9iamVjdC5mcmVlemUoRU1QVFlfQVJSQVkpO1xyXG52YXIgRU1QVFlfT0JKRUNUID0ge307XHJcbk9iamVjdC5mcmVlemUoRU1QVFlfT0JKRUNUKTtcclxuZnVuY3Rpb24gZ2V0TmV4dElkKCkge1xyXG4gICAgcmV0dXJuICsrZ2xvYmFsU3RhdGUubW9ieEd1aWQ7XHJcbn1cclxuZnVuY3Rpb24gZmFpbChtZXNzYWdlKSB7XHJcbiAgICBpbnZhcmlhbnQoZmFsc2UsIG1lc3NhZ2UpO1xyXG4gICAgdGhyb3cgXCJYXCI7IC8vIHVucmVhY2hhYmxlXHJcbn1cclxuZnVuY3Rpb24gaW52YXJpYW50KGNoZWNrLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoIWNoZWNrKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4XSBcIiArIChtZXNzYWdlIHx8IE9CRlVTQ0FURURfRVJST1IpKTtcclxufVxyXG4vKipcclxuICogUHJpbnRzIGEgZGVwcmVjYXRpb24gbWVzc2FnZSwgYnV0IG9ubHkgb25lIHRpbWUuXHJcbiAqIFJldHVybnMgZmFsc2UgaWYgdGhlIGRlcHJlY2F0ZWQgbWVzc2FnZSB3YXMgYWxyZWFkeSBwcmludGVkIGJlZm9yZVxyXG4gKi9cclxudmFyIGRlcHJlY2F0ZWRNZXNzYWdlcyA9IFtdO1xyXG5mdW5jdGlvbiBkZXByZWNhdGVkKG1zZywgdGhpbmcpIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKHRoaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlcHJlY2F0ZWQoXCInXCIgKyBtc2cgKyBcIicsIHVzZSAnXCIgKyB0aGluZyArIFwiJyBpbnN0ZWFkLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChkZXByZWNhdGVkTWVzc2FnZXMuaW5kZXhPZihtc2cpICE9PSAtMSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBkZXByZWNhdGVkTWVzc2FnZXMucHVzaChtc2cpO1xyXG4gICAgY29uc29sZS5lcnJvcihcIlttb2J4XSBEZXByZWNhdGVkOiBcIiArIG1zZyk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICogTWFrZXMgc3VyZSB0aGF0IHRoZSBwcm92aWRlZCBmdW5jdGlvbiBpcyBpbnZva2VkIGF0IG1vc3Qgb25jZS5cclxuICovXHJcbmZ1bmN0aW9uIG9uY2UoZnVuYykge1xyXG4gICAgdmFyIGludm9rZWQgPSBmYWxzZTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGludm9rZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpbnZva2VkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufVxyXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcclxuZnVuY3Rpb24gdW5pcXVlKGxpc3QpIHtcclxuICAgIHZhciByZXMgPSBbXTtcclxuICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGlmIChyZXMuaW5kZXhPZihpdGVtKSA9PT0gLTEpXHJcbiAgICAgICAgICAgIHJlcy5wdXNoKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcclxuICAgIHJldHVybiBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBwcm90byA9PT0gbnVsbDtcclxufVxyXG5mdW5jdGlvbiBhZGRIaWRkZW5Qcm9wKG9iamVjdCwgcHJvcE5hbWUsIHZhbHVlKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wTmFtZSwge1xyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGFkZEhpZGRlbkZpbmFsUHJvcChvYmplY3QsIHByb3BOYW1lLCB2YWx1ZSkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcE5hbWUsIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gaXNQcm9wZXJ0eUNvbmZpZ3VyYWJsZShvYmplY3QsIHByb3ApIHtcclxuICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3ApO1xyXG4gICAgcmV0dXJuICFkZXNjcmlwdG9yIHx8IChkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSAhPT0gZmFsc2UgJiYgZGVzY3JpcHRvci53cml0YWJsZSAhPT0gZmFsc2UpO1xyXG59XHJcbmZ1bmN0aW9uIGFzc2VydFByb3BlcnR5Q29uZmlndXJhYmxlKG9iamVjdCwgcHJvcCkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaXNQcm9wZXJ0eUNvbmZpZ3VyYWJsZShvYmplY3QsIHByb3ApKVxyXG4gICAgICAgIGZhaWwoXCJDYW5ub3QgbWFrZSBwcm9wZXJ0eSAnXCIgKyBwcm9wLnRvU3RyaW5nKCkgKyBcIicgb2JzZXJ2YWJsZSwgaXQgaXMgbm90IGNvbmZpZ3VyYWJsZSBhbmQgd3JpdGFibGUgaW4gdGhlIHRhcmdldCBvYmplY3RcIik7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShuYW1lLCBjbGF6eikge1xyXG4gICAgdmFyIHByb3BOYW1lID0gXCJpc01vYlhcIiArIG5hbWU7XHJcbiAgICBjbGF6ei5wcm90b3R5cGVbcHJvcE5hbWVdID0gdHJ1ZTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIHJldHVybiBpc09iamVjdCh4KSAmJiB4W3Byb3BOYW1lXSA9PT0gdHJ1ZTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXksIGRpc3JlZ2FyZGluZyBvYnNlcnZhYmlsaXR5LlxyXG4gKi9cclxuZnVuY3Rpb24gaXNBcnJheUxpa2UoeCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoeCkgfHwgaXNPYnNlcnZhYmxlQXJyYXkoeCk7XHJcbn1cclxuZnVuY3Rpb24gaXNFUzZNYXAodGhpbmcpIHtcclxuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIE1hcDtcclxufVxyXG5mdW5jdGlvbiBpc0VTNlNldCh0aGluZykge1xyXG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgU2V0O1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBmb2xsb3dpbmc6IG93biBrZXlzLCBwcm90b3R5cGUga2V5cyAmIG93biBzeW1ib2wga2V5cywgaWYgdGhleSBhcmUgZW51bWVyYWJsZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldFBsYWluT2JqZWN0S2V5cyhvYmplY3QpIHtcclxuICAgIHZhciBlbnVtZXJhYmxlcyA9IG5ldyBTZXQoKTtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpXHJcbiAgICAgICAgZW51bWVyYWJsZXMuYWRkKGtleSk7IC8vICphbGwqIGVudW1lcmFibGVzXHJcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xyXG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgaykuZW51bWVyYWJsZSlcclxuICAgICAgICAgICAgZW51bWVyYWJsZXMuYWRkKGspO1xyXG4gICAgfSk7IC8vICpvd24qIHN5bWJvbHNcclxuICAgIC8vIE5vdGU6IHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbWlzc2luZyBlbnVtZXJhYmxlLCBpbmhlcml0ZWQsIHN5bWJvbGljIHByb3BlcnR5IG5hbWVzISBUaGF0IHdvdWxkIGhvd2V2ZXIgcHJldHR5IGV4cGVuc2l2ZSB0byBhZGQsXHJcbiAgICAvLyBhcyB0aGVyZSBpcyBubyBlZmZpY2llbnQgaXRlcmF0b3IgdGhhdCByZXR1cm5zICphbGwqIHByb3BlcnRpZXNcclxuICAgIHJldHVybiBBcnJheS5mcm9tKGVudW1lcmFibGVzKTtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnlLZXkoa2V5KSB7XHJcbiAgICBpZiAoa2V5ICYmIGtleS50b1N0cmluZylcclxuICAgICAgICByZXR1cm4ga2V5LnRvU3RyaW5nKCk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmcoa2V5KS50b1N0cmluZygpO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1hcExpa2VLZXlzKG1hcCkge1xyXG4gICAgaWYgKGlzUGxhaW5PYmplY3QobWFwKSlcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KG1hcCkpXHJcbiAgICAgICAgcmV0dXJuIG1hcC5tYXAoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHZhciBfYiA9IF9fcmVhZChfYSwgMSksIGtleSA9IF9iWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgIH0pO1xyXG4gICAgaWYgKGlzRVM2TWFwKG1hcCkgfHwgaXNPYnNlcnZhYmxlTWFwKG1hcCkpXHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obWFwLmtleXMoKSk7XHJcbiAgICByZXR1cm4gZmFpbChcIkNhbm5vdCBnZXQga2V5cyBmcm9tICdcIiArIG1hcCArIFwiJ1wiKTtcclxufVxyXG5mdW5jdGlvbiB0b1ByaW1pdGl2ZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gbnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiA/IFwiXCIgKyB2YWx1ZSA6IHZhbHVlO1xyXG59XG5cbnZhciAkbW9ieCA9IFN5bWJvbChcIm1vYnggYWRtaW5pc3RyYXRpb25cIik7XHJcbnZhciBBdG9tID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgYXRvbS4gRm9yIGRlYnVnZ2luZyBwdXJwb3NlcyBpdCBpcyByZWNvbW1lbmRlZCB0byBnaXZlIGl0IGEgbmFtZS5cclxuICAgICAqIFRoZSBvbkJlY29tZU9ic2VydmVkIGFuZCBvbkJlY29tZVVub2JzZXJ2ZWQgY2FsbGJhY2tzIGNhbiBiZSB1c2VkIGZvciByZXNvdXJjZSBtYW5hZ2VtZW50LlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBBdG9tKG5hbWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIkF0b21AXCIgKyBnZXROZXh0SWQoKTsgfVxyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pc1BlbmRpbmdVbm9ic2VydmF0aW9uID0gZmFsc2U7IC8vIGZvciBlZmZlY3RpdmUgdW5vYnNlcnZpbmcuIEJhc2VBdG9tIGhhcyB0cnVlLCBmb3IgZXh0cmEgb3B0aW1pemF0aW9uLCBzbyBpdHMgb25CZWNvbWVVbm9ic2VydmVkIG5ldmVyIGdldHMgY2FsbGVkLCBiZWNhdXNlIGl0J3Mgbm90IG5lZWRlZFxyXG4gICAgICAgIHRoaXMuaXNCZWluZ09ic2VydmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5kaWZmVmFsdWUgPSAwO1xyXG4gICAgICAgIHRoaXMubGFzdEFjY2Vzc2VkQnkgPSAwO1xyXG4gICAgICAgIHRoaXMubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HO1xyXG4gICAgfVxyXG4gICAgQXRvbS5wcm90b3R5cGUub25CZWNvbWVPYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbkJlY29tZU9ic2VydmVkTGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25CZWNvbWVPYnNlcnZlZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gbGlzdGVuZXIoKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEF0b20ucHJvdG90eXBlLm9uQmVjb21lVW5vYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbkJlY29tZVVub2JzZXJ2ZWRMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkJlY29tZVVub2JzZXJ2ZWRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZSB0aGlzIG1ldGhvZCB0byBub3RpZnkgbW9ieCB0aGF0IHlvdXIgYXRvbSBoYXMgYmVlbiB1c2VkIHNvbWVob3cuXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgY3VycmVudGx5IGEgcmVhY3RpdmUgY29udGV4dC5cclxuICAgICAqL1xyXG4gICAgQXRvbS5wcm90b3R5cGUucmVwb3J0T2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcG9ydE9ic2VydmVkKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIF9hZnRlcl8gdGhpcyBtZXRob2QgaGFzIGNoYW5nZWQgdG8gc2lnbmFsIG1vYnggdGhhdCBhbGwgaXRzIG9ic2VydmVycyBzaG91bGQgaW52YWxpZGF0ZS5cclxuICAgICAqL1xyXG4gICAgQXRvbS5wcm90b3R5cGUucmVwb3J0Q2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzdGFydEJhdGNoKCk7XHJcbiAgICAgICAgcHJvcGFnYXRlQ2hhbmdlZCh0aGlzKTtcclxuICAgICAgICBlbmRCYXRjaCgpO1xyXG4gICAgfTtcclxuICAgIEF0b20ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEF0b207XHJcbn0oKSk7XHJcbnZhciBpc0F0b20gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiQXRvbVwiLCBBdG9tKTtcclxuZnVuY3Rpb24gY3JlYXRlQXRvbShuYW1lLCBvbkJlY29tZU9ic2VydmVkSGFuZGxlciwgb25CZWNvbWVVbm9ic2VydmVkSGFuZGxlcikge1xyXG4gICAgaWYgKG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyID09PSB2b2lkIDApIHsgb25CZWNvbWVPYnNlcnZlZEhhbmRsZXIgPSBub29wOyB9XHJcbiAgICBpZiAob25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciA9PT0gdm9pZCAwKSB7IG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIgPSBub29wOyB9XHJcbiAgICB2YXIgYXRvbSA9IG5ldyBBdG9tKG5hbWUpO1xyXG4gICAgLy8gZGVmYXVsdCBgbm9vcGAgbGlzdGVuZXIgd2lsbCBub3QgaW5pdGlhbGl6ZSB0aGUgaG9vayBTZXRcclxuICAgIGlmIChvbkJlY29tZU9ic2VydmVkSGFuZGxlciAhPT0gbm9vcCkge1xyXG4gICAgICAgIG9uQmVjb21lT2JzZXJ2ZWQoYXRvbSwgb25CZWNvbWVPYnNlcnZlZEhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgaWYgKG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIgIT09IG5vb3ApIHtcclxuICAgICAgICBvbkJlY29tZVVub2JzZXJ2ZWQoYXRvbSwgb25CZWNvbWVVbm9ic2VydmVkSGFuZGxlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXRvbTtcclxufVxuXG5mdW5jdGlvbiBpZGVudGl0eUNvbXBhcmVyKGEsIGIpIHtcclxuICAgIHJldHVybiBhID09PSBiO1xyXG59XHJcbmZ1bmN0aW9uIHN0cnVjdHVyYWxDb21wYXJlcihhLCBiKSB7XHJcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIpO1xyXG59XHJcbmZ1bmN0aW9uIHNoYWxsb3dDb21wYXJlcihhLCBiKSB7XHJcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIDEpO1xyXG59XHJcbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlcihhLCBiKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmlzKGEsIGIpO1xyXG59XHJcbnZhciBjb21wYXJlciA9IHtcclxuICAgIGlkZW50aXR5OiBpZGVudGl0eUNvbXBhcmVyLFxyXG4gICAgc3RydWN0dXJhbDogc3RydWN0dXJhbENvbXBhcmVyLFxyXG4gICAgZGVmYXVsdDogZGVmYXVsdENvbXBhcmVyLFxyXG4gICAgc2hhbGxvdzogc2hhbGxvd0NvbXBhcmVyXHJcbn07XG5cbnZhciBtb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1N5bWJvbCA9IFN5bWJvbChcIm1vYnggZGlkIHJ1biBsYXp5IGluaXRpYWxpemVyc1wiKTtcclxudmFyIG1vYnhQZW5kaW5nRGVjb3JhdG9ycyA9IFN5bWJvbChcIm1vYnggcGVuZGluZyBkZWNvcmF0b3JzXCIpO1xyXG52YXIgZW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSA9IHt9O1xyXG52YXIgbm9uRW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSA9IHt9O1xyXG5mdW5jdGlvbiBjcmVhdGVQcm9wZXJ0eUluaXRpYWxpemVyRGVzY3JpcHRvcihwcm9wLCBlbnVtZXJhYmxlKSB7XHJcbiAgICB2YXIgY2FjaGUgPSBlbnVtZXJhYmxlID8gZW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSA6IG5vbkVudW1lcmFibGVEZXNjcmlwdG9yQ2FjaGU7XHJcbiAgICByZXR1cm4gKGNhY2hlW3Byb3BdIHx8XHJcbiAgICAgICAgKGNhY2hlW3Byb3BdID0ge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGVudW1lcmFibGUsXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbcHJvcF07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzW3Byb3BdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbn1cclxuZnVuY3Rpb24gaW5pdGlhbGl6ZUluc3RhbmNlKHRhcmdldCkge1xyXG4gICAgdmFyIGVfMSwgX2E7XHJcbiAgICBpZiAodGFyZ2V0W21vYnhEaWRSdW5MYXp5SW5pdGlhbGl6ZXJzU3ltYm9sXSA9PT0gdHJ1ZSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgZGVjb3JhdG9ycyA9IHRhcmdldFttb2J4UGVuZGluZ0RlY29yYXRvcnNdO1xyXG4gICAgaWYgKGRlY29yYXRvcnMpIHtcclxuICAgICAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgbW9ieERpZFJ1bkxhenlJbml0aWFsaXplcnNTeW1ib2wsIHRydWUpO1xyXG4gICAgICAgIC8vIEJ1aWxkIHByb3BlcnR5IGtleSBhcnJheSBmcm9tIGJvdGggc3RyaW5ncyBhbmQgc3ltYm9sc1xyXG4gICAgICAgIHZhciBrZXlzID0gX19zcHJlYWQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhkZWNvcmF0b3JzKSwgT2JqZWN0LmtleXMoZGVjb3JhdG9ycykpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleXNfMSA9IF9fdmFsdWVzKGtleXMpLCBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCk7ICFrZXlzXzFfMS5kb25lOyBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBkID0gZGVjb3JhdG9yc1trZXldO1xyXG4gICAgICAgICAgICAgICAgZC5wcm9wZXJ0eUNyZWF0b3IodGFyZ2V0LCBkLnByb3AsIGQuZGVzY3JpcHRvciwgZC5kZWNvcmF0b3JUYXJnZXQsIGQuZGVjb3JhdG9yQXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleXNfMV8xICYmICFrZXlzXzFfMS5kb25lICYmIChfYSA9IGtleXNfMS5yZXR1cm4pKSBfYS5jYWxsKGtleXNfMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVQcm9wRGVjb3JhdG9yKHByb3BlcnR5SW5pdGlhbGx5RW51bWVyYWJsZSwgcHJvcGVydHlDcmVhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yRmFjdG9yeSgpIHtcclxuICAgICAgICB2YXIgZGVjb3JhdG9yQXJndW1lbnRzO1xyXG4gICAgICAgIHZhciBkZWNvcmF0b3IgPSBmdW5jdGlvbiBkZWNvcmF0ZSh0YXJnZXQsIHByb3AsIGRlc2NyaXB0b3IsIGFwcGx5SW1tZWRpYXRlbHlcclxuICAgICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBwYXJhbWV0ZXIgdG8gc2lnbmFsIHRoZSBkaXJlY3QgYXBwbGljYXRpb24gb2YgYSBkZWNvcmF0b3IsIGFsbG93IGV4dGVuZE9ic2VydmFibGUgdG8gc2tpcCB0aGUgZW50aXJlIHR5cGUgZGVjb3JhdGlvbiBwYXJ0LFxyXG4gICAgICAgIC8vIGFzIHRoZSBpbnN0YW5jZSB0byBhcHBseSB0aGUgZGVjb3JhdG9yIHRvIGVxdWFscyB0aGUgdGFyZ2V0XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChhcHBseUltbWVkaWF0ZWx5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNyZWF0b3IodGFyZ2V0LCBwcm9wLCBkZXNjcmlwdG9yLCB0YXJnZXQsIGRlY29yYXRvckFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFxdWFja3NMaWtlQURlY29yYXRvcihhcmd1bWVudHMpKVxyXG4gICAgICAgICAgICAgICAgZmFpbChcIlRoaXMgZnVuY3Rpb24gaXMgYSBkZWNvcmF0b3IsIGJ1dCBpdCB3YXNuJ3QgaW52b2tlZCBsaWtlIGEgZGVjb3JhdG9yXCIpO1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIG1vYnhQZW5kaW5nRGVjb3JhdG9ycykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmhlcml0ZWREZWNvcmF0b3JzID0gdGFyZ2V0W21vYnhQZW5kaW5nRGVjb3JhdG9yc107XHJcbiAgICAgICAgICAgICAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgbW9ieFBlbmRpbmdEZWNvcmF0b3JzLCBfX2Fzc2lnbih7fSwgaW5oZXJpdGVkRGVjb3JhdG9ycykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhcmdldFttb2J4UGVuZGluZ0RlY29yYXRvcnNdW3Byb3BdID0ge1xyXG4gICAgICAgICAgICAgICAgcHJvcDogcHJvcCxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5Q3JlYXRvcjogcHJvcGVydHlDcmVhdG9yLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcclxuICAgICAgICAgICAgICAgIGRlY29yYXRvclRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgZGVjb3JhdG9yQXJndW1lbnRzOiBkZWNvcmF0b3JBcmd1bWVudHNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3BlcnR5SW5pdGlhbGl6ZXJEZXNjcmlwdG9yKHByb3AsIHByb3BlcnR5SW5pdGlhbGx5RW51bWVyYWJsZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAocXVhY2tzTGlrZUFEZWNvcmF0b3IoYXJndW1lbnRzKSkge1xyXG4gICAgICAgICAgICAvLyBAZGVjb3JhdG9yXHJcbiAgICAgICAgICAgIGRlY29yYXRvckFyZ3VtZW50cyA9IEVNUFRZX0FSUkFZO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBAZGVjb3JhdG9yKGFyZ3MpXHJcbiAgICAgICAgICAgIGRlY29yYXRvckFyZ3VtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBxdWFja3NMaWtlQURlY29yYXRvcihhcmdzKSB7XHJcbiAgICByZXR1cm4gKCgoYXJncy5sZW5ndGggPT09IDIgfHwgYXJncy5sZW5ndGggPT09IDMpICYmXHJcbiAgICAgICAgKHR5cGVvZiBhcmdzWzFdID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBhcmdzWzFdID09PSBcInN5bWJvbFwiKSkgfHxcclxuICAgICAgICAoYXJncy5sZW5ndGggPT09IDQgJiYgYXJnc1szXSA9PT0gdHJ1ZSkpO1xyXG59XG5cbmZ1bmN0aW9uIGRlZXBFbmhhbmNlcih2LCBfLCBuYW1lKSB7XHJcbiAgICAvLyBpdCBpcyBhbiBvYnNlcnZhYmxlIGFscmVhZHksIGRvbmVcclxuICAgIGlmIChpc09ic2VydmFibGUodikpXHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAvLyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIGFuZCBtdXRhdGVkP1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodikpXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuYXJyYXkodiwgeyBuYW1lOiBuYW1lIH0pO1xyXG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHYsIHVuZGVmaW5lZCwgeyBuYW1lOiBuYW1lIH0pO1xyXG4gICAgaWYgKGlzRVM2TWFwKHYpKVxyXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCB7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICBpZiAoaXNFUzZTZXQodikpXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc2V0KHYsIHsgbmFtZTogbmFtZSB9KTtcclxuICAgIHJldHVybiB2O1xyXG59XHJcbmZ1bmN0aW9uIHNoYWxsb3dFbmhhbmNlcih2LCBfLCBuYW1lKSB7XHJcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHYpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHYpIHx8IGlzT2JzZXJ2YWJsZU1hcCh2KSB8fCBpc09ic2VydmFibGVTZXQodikpXHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSlcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5hcnJheSh2LCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xyXG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHYsIHVuZGVmaW5lZCwgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcclxuICAgIGlmIChpc0VTNk1hcCh2KSlcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5tYXAodiwgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcclxuICAgIGlmIChpc0VTNlNldCh2KSlcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zZXQodiwgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcclxuICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgIFwiVGhlIHNoYWxsb3cgbW9kaWZpZXIgLyBkZWNvcmF0b3IgY2FuIG9ubHkgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGFycmF5cywgb2JqZWN0cywgbWFwcyBhbmQgc2V0c1wiKTtcclxufVxyXG5mdW5jdGlvbiByZWZlcmVuY2VFbmhhbmNlcihuZXdWYWx1ZSkge1xyXG4gICAgLy8gbmV2ZXIgdHVybiBpbnRvIGFuIG9ic2VydmFibGVcclxuICAgIHJldHVybiBuZXdWYWx1ZTtcclxufVxyXG5mdW5jdGlvbiByZWZTdHJ1Y3RFbmhhbmNlcih2LCBvbGRWYWx1ZSwgbmFtZSkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc09ic2VydmFibGUodikpXHJcbiAgICAgICAgdGhyb3cgXCJvYnNlcnZhYmxlLnN0cnVjdCBzaG91bGQgbm90IGJlIHVzZWQgd2l0aCBvYnNlcnZhYmxlIHZhbHVlc1wiO1xyXG4gICAgaWYgKGRlZXBFcXVhbCh2LCBvbGRWYWx1ZSkpXHJcbiAgICAgICAgcmV0dXJuIG9sZFZhbHVlO1xyXG4gICAgcmV0dXJuIHY7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIoZW5oYW5jZXIpIHtcclxuICAgIGludmFyaWFudChlbmhhbmNlcik7XHJcbiAgICB2YXIgZGVjb3JhdG9yID0gY3JlYXRlUHJvcERlY29yYXRvcih0cnVlLCBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IsIF9kZWNvcmF0b3JUYXJnZXQsIGRlY29yYXRvckFyZ3MpIHtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGludmFyaWFudCghZGVzY3JpcHRvciB8fCAhZGVzY3JpcHRvci5nZXQsIFwiQG9ic2VydmFibGUgY2Fubm90IGJlIHVzZWQgb24gZ2V0dGVyIChwcm9wZXJ0eSBcXFwiXCIgKyBzdHJpbmdpZnlLZXkocHJvcGVydHlOYW1lKSArIFwiXFxcIiksIHVzZSBAY29tcHV0ZWQgaW5zdGVhZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBkZXNjcmlwdG9yXHJcbiAgICAgICAgICAgID8gZGVzY3JpcHRvci5pbml0aWFsaXplclxyXG4gICAgICAgICAgICAgICAgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwodGFyZ2V0KVxyXG4gICAgICAgICAgICAgICAgOiBkZXNjcmlwdG9yLnZhbHVlXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQpLmFkZE9ic2VydmFibGVQcm9wKHByb3BlcnR5TmFtZSwgaW5pdGlhbFZhbHVlLCBlbmhhbmNlcik7XHJcbiAgICB9KTtcclxuICAgIHZhciByZXMgPSBcclxuICAgIC8vIEV4dHJhIHByb2Nlc3MgY2hlY2tzLCBhcyB0aGlzIGhhcHBlbnMgZHVyaW5nIG1vZHVsZSBpbml0aWFsaXphdGlvblxyXG4gICAgdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiXHJcbiAgICAgICAgPyBmdW5jdGlvbiBvYnNlcnZhYmxlRGVjb3JhdG9yKCkge1xyXG4gICAgICAgICAgICAvLyBUaGlzIHdyYXBwZXIgZnVuY3Rpb24gaXMganVzdCB0byBkZXRlY3QgaWxsZWdhbCBkZWNvcmF0b3IgaW52b2NhdGlvbnMsIGRlcHJlY2F0ZSBpbiBhIG5leHQgdmVyc2lvblxyXG4gICAgICAgICAgICAvLyBhbmQgc2ltcGx5IHJldHVybiB0aGUgY3JlYXRlZCBwcm9wIGRlY29yYXRvclxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFpbChcIkluY29ycmVjdCBkZWNvcmF0b3IgaW52b2NhdGlvbi4gQG9ic2VydmFibGUgZGVjb3JhdG9yIGRvZXNuJ3QgZXhwZWN0IGFueSBhcmd1bWVudHNcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3IuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgOiBkZWNvcmF0b3I7XHJcbiAgICByZXMuZW5oYW5jZXIgPSBlbmhhbmNlcjtcclxuICAgIHJldHVybiByZXM7XHJcbn1cblxuLy8gUHJlZGVmaW5lZCBiYWdzIG9mIGNyZWF0ZSBvYnNlcnZhYmxlIG9wdGlvbnMsIHRvIGF2b2lkIGFsbG9jYXRpbmcgdGVtcG9yYXJpbHkgb3B0aW9uIG9iamVjdHNcclxuLy8gaW4gdGhlIG1ham9yaXR5IG9mIGNhc2VzXHJcbnZhciBkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMgPSB7XHJcbiAgICBkZWVwOiB0cnVlLFxyXG4gICAgbmFtZTogdW5kZWZpbmVkLFxyXG4gICAgZGVmYXVsdERlY29yYXRvcjogdW5kZWZpbmVkLFxyXG4gICAgcHJveHk6IHRydWVcclxufTtcclxuT2JqZWN0LmZyZWV6ZShkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpO1xyXG5mdW5jdGlvbiBhc3NlcnRWYWxpZE9wdGlvbihrZXkpIHtcclxuICAgIGlmICghL14oZGVlcHxuYW1lfGVxdWFsc3xkZWZhdWx0RGVjb3JhdG9yfHByb3h5KSQvLnRlc3Qoa2V5KSlcclxuICAgICAgICBmYWlsKFwiaW52YWxpZCBvcHRpb24gZm9yIChleHRlbmQpb2JzZXJ2YWJsZTogXCIgKyBrZXkpO1xyXG59XHJcbmZ1bmN0aW9uIGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnModGhpbmcpIHtcclxuICAgIGlmICh0aGluZyA9PT0gbnVsbCB8fCB0aGluZyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnM7XHJcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgIHJldHVybiB7IG5hbWU6IHRoaW5nLCBkZWVwOiB0cnVlLCBwcm94eTogdHJ1ZSB9O1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpbmcgIT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKFwiZXhwZWN0ZWQgb3B0aW9ucyBvYmplY3RcIik7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpbmcpLmZvckVhY2goYXNzZXJ0VmFsaWRPcHRpb24pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaW5nO1xyXG59XHJcbnZhciBkZWVwRGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIoZGVlcEVuaGFuY2VyKTtcclxudmFyIHNoYWxsb3dEZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlcihzaGFsbG93RW5oYW5jZXIpO1xyXG52YXIgcmVmRGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIocmVmZXJlbmNlRW5oYW5jZXIpO1xyXG52YXIgcmVmU3RydWN0RGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIocmVmU3RydWN0RW5oYW5jZXIpO1xyXG5mdW5jdGlvbiBnZXRFbmhhbmNlckZyb21PcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBvcHRpb25zLmRlZmF1bHREZWNvcmF0b3JcclxuICAgICAgICA/IG9wdGlvbnMuZGVmYXVsdERlY29yYXRvci5lbmhhbmNlclxyXG4gICAgICAgIDogb3B0aW9ucy5kZWVwID09PSBmYWxzZVxyXG4gICAgICAgICAgICA/IHJlZmVyZW5jZUVuaGFuY2VyXHJcbiAgICAgICAgICAgIDogZGVlcEVuaGFuY2VyO1xyXG59XHJcbi8qKlxyXG4gKiBUdXJucyBhbiBvYmplY3QsIGFycmF5IG9yIGZ1bmN0aW9uIGludG8gYSByZWFjdGl2ZSBzdHJ1Y3R1cmUuXHJcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB3aGljaCBzaG91bGQgYmVjb21lIG9ic2VydmFibGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlKHYsIGFyZzIsIGFyZzMpIHtcclxuICAgIC8vIEBvYnNlcnZhYmxlIHNvbWVQcm9wO1xyXG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJzeW1ib2xcIikge1xyXG4gICAgICAgIHJldHVybiBkZWVwRGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcbiAgICAvLyBpdCBpcyBhbiBvYnNlcnZhYmxlIGFscmVhZHksIGRvbmVcclxuICAgIGlmIChpc09ic2VydmFibGUodikpXHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAvLyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIGFuZCBtdXRhdGVkP1xyXG4gICAgdmFyIHJlcyA9IGlzUGxhaW5PYmplY3QodilcclxuICAgICAgICA/IG9ic2VydmFibGUub2JqZWN0KHYsIGFyZzIsIGFyZzMpXHJcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KHYpXHJcbiAgICAgICAgICAgID8gb2JzZXJ2YWJsZS5hcnJheSh2LCBhcmcyKVxyXG4gICAgICAgICAgICA6IGlzRVM2TWFwKHYpXHJcbiAgICAgICAgICAgICAgICA/IG9ic2VydmFibGUubWFwKHYsIGFyZzIpXHJcbiAgICAgICAgICAgICAgICA6IGlzRVM2U2V0KHYpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBvYnNlcnZhYmxlLnNldCh2LCBhcmcyKVxyXG4gICAgICAgICAgICAgICAgICAgIDogdjtcclxuICAgIC8vIHRoaXMgdmFsdWUgY291bGQgYmUgY29udmVydGVkIHRvIGEgbmV3IG9ic2VydmFibGUgZGF0YSBzdHJ1Y3R1cmUsIHJldHVybiBpdFxyXG4gICAgaWYgKHJlcyAhPT0gdilcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgLy8gb3RoZXJ3aXNlLCBqdXN0IGJveCBpdFxyXG4gICAgZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICBcIlRoZSBwcm92aWRlZCB2YWx1ZSBjb3VsZCBub3QgYmUgY29udmVydGVkIGludG8gYW4gb2JzZXJ2YWJsZS4gSWYgeW91IHdhbnQganVzdCBjcmVhdGUgYW4gb2JzZXJ2YWJsZSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdCB1c2UgJ29ic2VydmFibGUuYm94KHZhbHVlKSdcIik7XHJcbn1cclxudmFyIG9ic2VydmFibGVGYWN0b3JpZXMgPSB7XHJcbiAgICBib3g6IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMilcclxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJib3hcIik7XHJcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVZhbHVlKHZhbHVlLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUsIHRydWUsIG8uZXF1YWxzKTtcclxuICAgIH0sXHJcbiAgICBhcnJheTogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZXMsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpXHJcbiAgICAgICAgICAgIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKFwiYXJyYXlcIik7XHJcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVPYnNlcnZhYmxlQXJyYXkoaW5pdGlhbFZhbHVlcywgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lKTtcclxuICAgIH0sXHJcbiAgICBtYXA6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWVzLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKVxyXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcIm1hcFwiKTtcclxuICAgICAgICB2YXIgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlTWFwKGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSk7XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlcywgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMilcclxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJzZXRcIik7XHJcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVNldChpbml0aWFsVmFsdWVzLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUpO1xyXG4gICAgfSxcclxuICAgIG9iamVjdDogZnVuY3Rpb24gKHByb3BzLCBkZWNvcmF0b3JzLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKFwib2JqZWN0XCIpO1xyXG4gICAgICAgIHZhciBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICBpZiAoby5wcm94eSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4dGVuZE9ic2VydmFibGUoe30sIHByb3BzLCBkZWNvcmF0b3JzLCBvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0RGVjb3JhdG9yID0gZ2V0RGVmYXVsdERlY29yYXRvckZyb21PYmplY3RPcHRpb25zKG8pO1xyXG4gICAgICAgICAgICB2YXIgYmFzZSA9IGV4dGVuZE9ic2VydmFibGUoe30sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvKTtcclxuICAgICAgICAgICAgdmFyIHByb3h5ID0gY3JlYXRlRHluYW1pY09ic2VydmFibGVPYmplY3QoYmFzZSk7XHJcbiAgICAgICAgICAgIGV4dGVuZE9ic2VydmFibGVPYmplY3RXaXRoUHJvcGVydGllcyhwcm94eSwgcHJvcHMsIGRlY29yYXRvcnMsIGRlZmF1bHREZWNvcmF0b3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJveHk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlZjogcmVmRGVjb3JhdG9yLFxyXG4gICAgc2hhbGxvdzogc2hhbGxvd0RlY29yYXRvcixcclxuICAgIGRlZXA6IGRlZXBEZWNvcmF0b3IsXHJcbiAgICBzdHJ1Y3Q6IHJlZlN0cnVjdERlY29yYXRvclxyXG59O1xyXG52YXIgb2JzZXJ2YWJsZSA9IGNyZWF0ZU9ic2VydmFibGU7XHJcbi8vIHdlaXJkIHRyaWNrIHRvIGtlZXAgb3VyIHR5cGluZ3MgbmljZWx5IHdpdGggb3VyIGZ1bmNzLCBhbmQgc3RpbGwgZXh0ZW5kIHRoZSBvYnNlcnZhYmxlIGZ1bmN0aW9uXHJcbk9iamVjdC5rZXlzKG9ic2VydmFibGVGYWN0b3JpZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIChvYnNlcnZhYmxlW25hbWVdID0gb2JzZXJ2YWJsZUZhY3Rvcmllc1tuYW1lXSk7IH0pO1xyXG5mdW5jdGlvbiBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihtZXRob2ROYW1lKSB7XHJcbiAgICBmYWlsKFxyXG4gICAgLy8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICBcIkV4cGVjdGVkIG9uZSBvciB0d28gYXJndW1lbnRzIHRvIG9ic2VydmFibGUuXCIgKyBtZXRob2ROYW1lICsgXCIuIERpZCB5b3UgYWNjaWRlbnRhbGx5IHRyeSB0byB1c2Ugb2JzZXJ2YWJsZS5cIiArIG1ldGhvZE5hbWUgKyBcIiBhcyBkZWNvcmF0b3I/XCIpO1xyXG59XG5cbnZhciBjb21wdXRlZERlY29yYXRvciA9IGNyZWF0ZVByb3BEZWNvcmF0b3IoZmFsc2UsIGZ1bmN0aW9uIChpbnN0YW5jZSwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLCBkZWNvcmF0b3JUYXJnZXQsIGRlY29yYXRvckFyZ3MpIHtcclxuICAgIHZhciBnZXQgPSBkZXNjcmlwdG9yLmdldCwgc2V0ID0gZGVzY3JpcHRvci5zZXQ7IC8vIGluaXRpYWxWYWx1ZSBpcyB0aGUgZGVzY3JpcHRvciBmb3IgZ2V0IC8gc2V0IHByb3BzXHJcbiAgICAvLyBPcHRpbWl6YXRpb246IGZhc3RlciBvbiBkZWNvcmF0b3IgdGFyZ2V0IG9yIGluc3RhbmNlPyBBc3N1bWluZyB0YXJnZXRcclxuICAgIC8vIE9wdGltaXphdGlvbjogZmluZCBvdXQgaWYgZGVjbGFyaW5nIG9uIGluc3RhbmNlIGlzbid0IGp1c3QgZmFzdGVyLiAoYWxzbyBtYWtlcyB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciBzaW1wbGVyKS4gQnV0LCBtb3JlIG1lbW9yeSB1c2FnZS4uXHJcbiAgICAvLyBGb3JjaW5nIGluc3RhbmNlIG5vdywgZml4ZXMgaG90IHJlbG9hZGlnIGlzc3VlcyBvbiBSZWFjdCBOYXRpdmU6XHJcbiAgICB2YXIgb3B0aW9ucyA9IGRlY29yYXRvckFyZ3NbMF0gfHwge307XHJcbiAgICBhc09ic2VydmFibGVPYmplY3QoaW5zdGFuY2UpLmFkZENvbXB1dGVkUHJvcChpbnN0YW5jZSwgcHJvcGVydHlOYW1lLCBfX2Fzc2lnbih7IGdldDogZ2V0LFxyXG4gICAgICAgIHNldDogc2V0LCBjb250ZXh0OiBpbnN0YW5jZSB9LCBvcHRpb25zKSk7XHJcbn0pO1xyXG52YXIgY29tcHV0ZWRTdHJ1Y3REZWNvcmF0b3IgPSBjb21wdXRlZERlY29yYXRvcih7IGVxdWFsczogY29tcGFyZXIuc3RydWN0dXJhbCB9KTtcclxuLyoqXHJcbiAqIERlY29yYXRvciBmb3IgY2xhc3MgcHJvcGVydGllczogQGNvbXB1dGVkIGdldCB2YWx1ZSgpIHsgcmV0dXJuIGV4cHI7IH0uXHJcbiAqIEZvciBsZWdhY3kgcHVycG9zZXMgYWxzbyBpbnZva2FibGUgYXMgRVM1IG9ic2VydmFibGUgY3JlYXRlZDogYGNvbXB1dGVkKCgpID0+IGV4cHIpYDtcclxuICovXHJcbnZhciBjb21wdXRlZCA9IGZ1bmN0aW9uIGNvbXB1dGVkKGFyZzEsIGFyZzIsIGFyZzMpIHtcclxuICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIC8vIEBjb21wdXRlZFxyXG4gICAgICAgIHJldHVybiBjb21wdXRlZERlY29yYXRvci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZzEgIT09IG51bGwgJiYgdHlwZW9mIGFyZzEgPT09IFwib2JqZWN0XCIgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIC8vIEBjb21wdXRlZCh7IG9wdGlvbnMgfSlcclxuICAgICAgICByZXR1cm4gY29tcHV0ZWREZWNvcmF0b3IuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICAgIC8vIGNvbXB1dGVkKGV4cHIsIG9wdGlvbnM/KVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiLCBcIkZpcnN0IGFyZ3VtZW50IHRvIGBjb21wdXRlZGAgc2hvdWxkIGJlIGFuIGV4cHJlc3Npb24uXCIpO1xyXG4gICAgICAgIGludmFyaWFudChhcmd1bWVudHMubGVuZ3RoIDwgMywgXCJDb21wdXRlZCB0YWtlcyBvbmUgb3IgdHdvIGFyZ3VtZW50cyBpZiB1c2VkIGFzIGZ1bmN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG9wdHMgPSB0eXBlb2YgYXJnMiA9PT0gXCJvYmplY3RcIiA/IGFyZzIgOiB7fTtcclxuICAgIG9wdHMuZ2V0ID0gYXJnMTtcclxuICAgIG9wdHMuc2V0ID0gdHlwZW9mIGFyZzIgPT09IFwiZnVuY3Rpb25cIiA/IGFyZzIgOiBvcHRzLnNldDtcclxuICAgIG9wdHMubmFtZSA9IG9wdHMubmFtZSB8fCBhcmcxLm5hbWUgfHwgXCJcIjsgLyogZm9yIGdlbmVyYXRlZCBuYW1lICovXHJcbiAgICByZXR1cm4gbmV3IENvbXB1dGVkVmFsdWUob3B0cyk7XHJcbn07XHJcbmNvbXB1dGVkLnN0cnVjdCA9IGNvbXB1dGVkU3RydWN0RGVjb3JhdG9yO1xuXG52YXIgSURlcml2YXRpb25TdGF0ZTtcclxuKGZ1bmN0aW9uIChJRGVyaXZhdGlvblN0YXRlKSB7XHJcbiAgICAvLyBiZWZvcmUgYmVpbmcgcnVuIG9yIChvdXRzaWRlIGJhdGNoIGFuZCBub3QgYmVpbmcgb2JzZXJ2ZWQpXHJcbiAgICAvLyBhdCB0aGlzIHBvaW50IGRlcml2YXRpb24gaXMgbm90IGhvbGRpbmcgYW55IGRhdGEgYWJvdXQgZGVwZW5kZW5jeSB0cmVlXHJcbiAgICBJRGVyaXZhdGlvblN0YXRlW0lEZXJpdmF0aW9uU3RhdGVbXCJOT1RfVFJBQ0tJTkdcIl0gPSAtMV0gPSBcIk5PVF9UUkFDS0lOR1wiO1xyXG4gICAgLy8gbm8gc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWQgc2luY2UgbGFzdCBjb21wdXRhdGlvblxyXG4gICAgLy8gd29uJ3QgcmVjYWxjdWxhdGUgZGVyaXZhdGlvblxyXG4gICAgLy8gdGhpcyBpcyB3aGF0IG1ha2VzIG1vYnggZmFzdFxyXG4gICAgSURlcml2YXRpb25TdGF0ZVtJRGVyaXZhdGlvblN0YXRlW1wiVVBfVE9fREFURVwiXSA9IDBdID0gXCJVUF9UT19EQVRFXCI7XHJcbiAgICAvLyBzb21lIGRlZXAgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgZG9uJ3Qga25vdyBpZiBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZFxyXG4gICAgLy8gd2lsbCByZXF1aXJlIHRvIGNoZWNrIGZpcnN0IGlmIFVQX1RPX0RBVEUgb3IgUE9TU0lCTFlfU1RBTEVcclxuICAgIC8vIGN1cnJlbnRseSBvbmx5IENvbXB1dGVkVmFsdWUgd2lsbCBwcm9wYWdhdGUgUE9TU0lCTFlfU1RBTEVcclxuICAgIC8vXHJcbiAgICAvLyBoYXZpbmcgdGhpcyBzdGF0ZSBpcyBzZWNvbmQgYmlnIG9wdGltaXphdGlvbjpcclxuICAgIC8vIGRvbid0IGhhdmUgdG8gcmVjb21wdXRlIG9uIGV2ZXJ5IGRlcGVuZGVuY3kgY2hhbmdlLCBidXQgb25seSB3aGVuIGl0J3MgbmVlZGVkXHJcbiAgICBJRGVyaXZhdGlvblN0YXRlW0lEZXJpdmF0aW9uU3RhdGVbXCJQT1NTSUJMWV9TVEFMRVwiXSA9IDFdID0gXCJQT1NTSUJMWV9TVEFMRVwiO1xyXG4gICAgLy8gQSBzaGFsbG93IGRlcGVuZGVuY3kgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCBjb21wdXRhdGlvbiBhbmQgdGhlIGRlcml2YXRpb25cclxuICAgIC8vIHdpbGwgbmVlZCB0byByZWNvbXB1dGUgd2hlbiBpdCdzIG5lZWRlZCBuZXh0LlxyXG4gICAgSURlcml2YXRpb25TdGF0ZVtJRGVyaXZhdGlvblN0YXRlW1wiU1RBTEVcIl0gPSAyXSA9IFwiU1RBTEVcIjtcclxufSkoSURlcml2YXRpb25TdGF0ZSB8fCAoSURlcml2YXRpb25TdGF0ZSA9IHt9KSk7XHJcbnZhciBUcmFjZU1vZGU7XHJcbihmdW5jdGlvbiAoVHJhY2VNb2RlKSB7XHJcbiAgICBUcmFjZU1vZGVbVHJhY2VNb2RlW1wiTk9ORVwiXSA9IDBdID0gXCJOT05FXCI7XHJcbiAgICBUcmFjZU1vZGVbVHJhY2VNb2RlW1wiTE9HXCJdID0gMV0gPSBcIkxPR1wiO1xyXG4gICAgVHJhY2VNb2RlW1RyYWNlTW9kZVtcIkJSRUFLXCJdID0gMl0gPSBcIkJSRUFLXCI7XHJcbn0pKFRyYWNlTW9kZSB8fCAoVHJhY2VNb2RlID0ge30pKTtcclxudmFyIENhdWdodEV4Y2VwdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENhdWdodEV4Y2VwdGlvbihjYXVzZSkge1xyXG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcclxuICAgICAgICAvLyBFbXB0eVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIENhdWdodEV4Y2VwdGlvbjtcclxufSgpKTtcclxuZnVuY3Rpb24gaXNDYXVnaHRFeGNlcHRpb24oZSkge1xyXG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDYXVnaHRFeGNlcHRpb247XHJcbn1cclxuLyoqXHJcbiAqIEZpbmRzIG91dCB3aGV0aGVyIGFueSBkZXBlbmRlbmN5IG9mIHRoZSBkZXJpdmF0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxyXG4gKiBJZiBkZXBlbmRlbmNpZXNTdGF0ZSBpcyAxIHRoZW4gaXQgd2lsbCByZWNhbGN1bGF0ZSBkZXBlbmRlbmNpZXMsXHJcbiAqIGlmIGFueSBkZXBlbmRlbmN5IGNoYW5nZWQgaXQgd2lsbCBwcm9wYWdhdGUgaXQgYnkgY2hhbmdpbmcgZGVwZW5kZW5jaWVzU3RhdGUgdG8gMi5cclxuICpcclxuICogQnkgaXRlcmF0aW5nIG92ZXIgdGhlIGRlcGVuZGVuY2llcyBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgd2VyZSByZXBvcnRlZCBhbmRcclxuICogc3RvcHBpbmcgb24gdGhlIGZpcnN0IGNoYW5nZSwgYWxsIHRoZSByZWNhbGN1bGF0aW9ucyBhcmUgb25seSBjYWxsZWQgZm9yIENvbXB1dGVkVmFsdWVzXHJcbiAqIHRoYXQgd2lsbCBiZSB0cmFja2VkIGJ5IGRlcml2YXRpb24uIFRoYXQgaXMgYmVjYXVzZSB3ZSBhc3N1bWUgdGhhdCBpZiB0aGUgZmlyc3QgeFxyXG4gKiBkZXBlbmRlbmNpZXMgb2YgdGhlIGRlcml2YXRpb24gZG9lc24ndCBjaGFuZ2UgdGhlbiB0aGUgZGVyaXZhdGlvbiBzaG91bGQgcnVuIHRoZSBzYW1lIHdheVxyXG4gKiB1cCB1bnRpbCBhY2Nlc3NpbmcgeC10aCBkZXBlbmRlbmN5LlxyXG4gKi9cclxuZnVuY3Rpb24gc2hvdWxkQ29tcHV0ZShkZXJpdmF0aW9uKSB7XHJcbiAgICBzd2l0Y2ggKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUpIHtcclxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc6XHJcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGUuUE9TU0lCTFlfU1RBTEU6IHtcclxuICAgICAgICAgICAgLy8gc3RhdGUgcHJvcGFnYXRpb24gY2FuIG9jY3VyIG91dHNpZGUgb2YgYWN0aW9uL3JlYWN0aXZlIGNvbnRleHQgIzIxOTVcclxuICAgICAgICAgICAgdmFyIHByZXZBbGxvd1N0YXRlUmVhZHMgPSBhbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKTtcclxuICAgICAgICAgICAgdmFyIHByZXZVbnRyYWNrZWQgPSB1bnRyYWNrZWRTdGFydCgpOyAvLyBubyBuZWVkIGZvciB0aG9zZSBjb21wdXRlZHMgdG8gYmUgcmVwb3J0ZWQsIHRoZXkgd2lsbCBiZSBwaWNrZWQgdXAgaW4gdHJhY2tEZXJpdmVkRnVuY3Rpb24uXHJcbiAgICAgICAgICAgIHZhciBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZywgbCA9IG9icy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gb2JzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ29tcHV0ZWRWYWx1ZShvYmopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5nZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG5vdCBpbnRlcmVzdGVkIGluIHRoZSB2YWx1ZSAqb3IqIGV4Y2VwdGlvbiBhdCB0aGlzIG1vbWVudCwgYnV0IGlmIHRoZXJlIGlzIG9uZSwgbm90aWZ5IGFsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXZBbGxvd1N0YXRlUmVhZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgQ29tcHV0ZWRWYWx1ZSBgb2JqYCBhY3R1YWxseSBjaGFuZ2VkIGl0IHdpbGwgYmUgY29tcHV0ZWQgYW5kIHByb3BhZ2F0ZWQgdG8gaXRzIG9ic2VydmVycy5cclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYGRlcml2YXRpb25gIGlzIGFuIG9ic2VydmVyIG9mIGBvYmpgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52YXJpYW50U2hvdWxkQ29tcHV0ZShkZXJpdmF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VW50cmFja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXZBbGxvd1N0YXRlUmVhZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAoZGVyaXZhdGlvbik7XHJcbiAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VW50cmFja2VkKTtcclxuICAgICAgICAgICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXZBbGxvd1N0YXRlUmVhZHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIGZ1bmN0aW9uIGludmFyaWFudFNob3VsZENvbXB1dGUoZGVyaXZhdGlvbjogSURlcml2YXRpb24pIHtcclxuLy8gICAgIGNvbnN0IG5ld0RlcFN0YXRlID0gKGRlcml2YXRpb24gYXMgYW55KS5kZXBlbmRlbmNpZXNTdGF0ZVxyXG4vLyAgICAgaWYgKFxyXG4vLyAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4vLyAgICAgICAgIChuZXdEZXBTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5QT1NTSUJMWV9TVEFMRSB8fFxyXG4vLyAgICAgICAgICAgICBuZXdEZXBTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkcpXHJcbi8vICAgICApXHJcbi8vICAgICAgICAgZmFpbChcIklsbGVnYWwgZGVwZW5kZW5jeSBzdGF0ZVwiKVxyXG4vLyB9XHJcbmZ1bmN0aW9uIGlzQ29tcHV0aW5nRGVyaXZhdGlvbigpIHtcclxuICAgIHJldHVybiBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gIT09IG51bGw7IC8vIGZpbHRlciBvdXQgYWN0aW9ucyBpbnNpZGUgY29tcHV0YXRpb25zXHJcbn1cclxuZnVuY3Rpb24gY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQoYXRvbSkge1xyXG4gICAgdmFyIGhhc09ic2VydmVycyA9IGF0b20ub2JzZXJ2ZXJzLnNpemUgPiAwO1xyXG4gICAgLy8gU2hvdWxkIG5ldmVyIGJlIHBvc3NpYmxlIHRvIGNoYW5nZSBhbiBvYnNlcnZlZCBvYnNlcnZhYmxlIGZyb20gaW5zaWRlIGNvbXB1dGVkLCBzZWUgIzc5OFxyXG4gICAgaWYgKGdsb2JhbFN0YXRlLmNvbXB1dGF0aW9uRGVwdGggPiAwICYmIGhhc09ic2VydmVycylcclxuICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBcIkNvbXB1dGVkIHZhbHVlcyBhcmUgbm90IGFsbG93ZWQgdG8gY2F1c2Ugc2lkZSBlZmZlY3RzIGJ5IGNoYW5naW5nIG9ic2VydmFibGVzIHRoYXQgYXJlIGFscmVhZHkgYmVpbmcgb2JzZXJ2ZWQuIFRyaWVkIHRvIG1vZGlmeTogXCIgKyBhdG9tLm5hbWUpO1xyXG4gICAgLy8gU2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBjaGFuZ2Ugb2JzZXJ2ZWQgc3RhdGUgb3V0c2lkZSBzdHJpY3QgbW9kZSwgZXhjZXB0IGR1cmluZyBpbml0aWFsaXphdGlvbiwgc2VlICM1NjNcclxuICAgIGlmICghZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgJiYgKGhhc09ic2VydmVycyB8fCBnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9ucyA9PT0gXCJzdHJpY3RcIikpXHJcbiAgICAgICAgZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgKGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zXHJcbiAgICAgICAgICAgICAgICA/IFwiU2luY2Ugc3RyaWN0LW1vZGUgaXMgZW5hYmxlZCwgY2hhbmdpbmcgb2JzZXJ2ZWQgb2JzZXJ2YWJsZSB2YWx1ZXMgb3V0c2lkZSBhY3Rpb25zIGlzIG5vdCBhbGxvd2VkLiBQbGVhc2Ugd3JhcCB0aGUgY29kZSBpbiBhbiBgYWN0aW9uYCBpZiB0aGlzIGNoYW5nZSBpcyBpbnRlbmRlZC4gVHJpZWQgdG8gbW9kaWZ5OiBcIlxyXG4gICAgICAgICAgICAgICAgOiBcIlNpZGUgZWZmZWN0cyBsaWtlIGNoYW5naW5nIHN0YXRlIGFyZSBub3QgYWxsb3dlZCBhdCB0aGlzIHBvaW50LiBBcmUgeW91IHRyeWluZyB0byBtb2RpZnkgc3RhdGUgZnJvbSwgZm9yIGV4YW1wbGUsIHRoZSByZW5kZXIgZnVuY3Rpb24gb2YgYSBSZWFjdCBjb21wb25lbnQ/IFRyaWVkIHRvIG1vZGlmeTogXCIpICtcclxuICAgICAgICAgICAgICAgIGF0b20ubmFtZSk7XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkKG9ic2VydmFibGUpIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAhZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzICYmXHJcbiAgICAgICAgZ2xvYmFsU3RhdGUub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24pIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0gT2JzZXJ2YWJsZSBcIiArIG9ic2VydmFibGUubmFtZSArIFwiIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcIik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIHRoZSBwcm92aWRlZCBmdW5jdGlvbiBgZmAgYW5kIHRyYWNrcyB3aGljaCBvYnNlcnZhYmxlcyBhcmUgYmVpbmcgYWNjZXNzZWQuXHJcbiAqIFRoZSB0cmFja2luZyBpbmZvcm1hdGlvbiBpcyBzdG9yZWQgb24gdGhlIGBkZXJpdmF0aW9uYCBvYmplY3QgYW5kIHRoZSBkZXJpdmF0aW9uIGlzIHJlZ2lzdGVyZWRcclxuICogYXMgb2JzZXJ2ZXIgb2YgYW55IG9mIHRoZSBhY2Nlc3NlZCBvYnNlcnZhYmxlcy5cclxuICovXHJcbmZ1bmN0aW9uIHRyYWNrRGVyaXZlZEZ1bmN0aW9uKGRlcml2YXRpb24sIGYsIGNvbnRleHQpIHtcclxuICAgIHZhciBwcmV2QWxsb3dTdGF0ZVJlYWRzID0gYWxsb3dTdGF0ZVJlYWRzU3RhcnQodHJ1ZSk7XHJcbiAgICAvLyBwcmUgYWxsb2NhdGUgYXJyYXkgYWxsb2NhdGlvbiArIHJvb20gZm9yIHZhcmlhdGlvbiBpbiBkZXBzXHJcbiAgICAvLyBhcnJheSB3aWxsIGJlIHRyaW1tZWQgYnkgYmluZERlcGVuZGVuY2llc1xyXG4gICAgY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAoZGVyaXZhdGlvbik7XHJcbiAgICBkZXJpdmF0aW9uLm5ld09ic2VydmluZyA9IG5ldyBBcnJheShkZXJpdmF0aW9uLm9ic2VydmluZy5sZW5ndGggKyAxMDApO1xyXG4gICAgZGVyaXZhdGlvbi51bmJvdW5kRGVwc0NvdW50ID0gMDtcclxuICAgIGRlcml2YXRpb24ucnVuSWQgPSArK2dsb2JhbFN0YXRlLnJ1bklkO1xyXG4gICAgdmFyIHByZXZUcmFja2luZyA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbjtcclxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IGRlcml2YXRpb247XHJcbiAgICB2YXIgcmVzdWx0O1xyXG4gICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPT09IHRydWUpIHtcclxuICAgICAgICByZXN1bHQgPSBmLmNhbGwoY29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBmLmNhbGwoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXVnaHRFeGNlcHRpb24oZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gcHJldlRyYWNraW5nO1xyXG4gICAgYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKTtcclxuICAgIHdhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzKGRlcml2YXRpb24pO1xyXG4gICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXZBbGxvd1N0YXRlUmVhZHMpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiB3YXJuQWJvdXREZXJpdmF0aW9uV2l0aG91dERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmIChkZXJpdmF0aW9uLm9ic2VydmluZy5sZW5ndGggIT09IDApXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKGdsb2JhbFN0YXRlLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlIHx8IGRlcml2YXRpb24ucmVxdWlyZXNPYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIERlcml2YXRpb24gXCIgKyBkZXJpdmF0aW9uLm5hbWUgKyBcIiBpcyBjcmVhdGVkL3VwZGF0ZWQgd2l0aG91dCByZWFkaW5nIGFueSBvYnNlcnZhYmxlIHZhbHVlXCIpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBkaWZmcyBuZXdPYnNlcnZpbmcgd2l0aCBvYnNlcnZpbmcuXHJcbiAqIHVwZGF0ZSBvYnNlcnZpbmcgdG8gYmUgbmV3T2JzZXJ2aW5nIHdpdGggdW5pcXVlIG9ic2VydmFibGVzXHJcbiAqIG5vdGlmeSBvYnNlcnZlcnMgdGhhdCBiZWNvbWUgb2JzZXJ2ZWQvdW5vYnNlcnZlZFxyXG4gKi9cclxuZnVuY3Rpb24gYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKSB7XHJcbiAgICAvLyBpbnZhcmlhbnQoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSAhPT0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkcsIFwiSU5URVJOQUwgRVJST1IgYmluZERlcGVuZGVuY2llcyBleHBlY3RzIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgIT09IC0xXCIpO1xyXG4gICAgdmFyIHByZXZPYnNlcnZpbmcgPSBkZXJpdmF0aW9uLm9ic2VydmluZztcclxuICAgIHZhciBvYnNlcnZpbmcgPSAoZGVyaXZhdGlvbi5vYnNlcnZpbmcgPSBkZXJpdmF0aW9uLm5ld09ic2VydmluZyk7XHJcbiAgICB2YXIgbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFO1xyXG4gICAgLy8gR28gdGhyb3VnaCBhbGwgbmV3IG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6ICh0aGlzIGxpc3QgY2FuIGNvbnRhaW4gZHVwbGljYXRlcyk6XHJcbiAgICAvLyAgIDA6IGZpcnN0IG9jY3VycmVuY2UsIGNoYW5nZSB0byAxIGFuZCBrZWVwIGl0XHJcbiAgICAvLyAgIDE6IGV4dHJhIG9jY3VycmVuY2UsIGRyb3AgaXRcclxuICAgIHZhciBpMCA9IDAsIGwgPSBkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnQ7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIHZhciBkZXAgPSBvYnNlcnZpbmdbaV07XHJcbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgZGVwLmRpZmZWYWx1ZSA9IDE7XHJcbiAgICAgICAgICAgIGlmIChpMCAhPT0gaSlcclxuICAgICAgICAgICAgICAgIG9ic2VydmluZ1tpMF0gPSBkZXA7XHJcbiAgICAgICAgICAgIGkwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwY2FzdCBpcyAnc2FmZScgaGVyZSwgYmVjYXVzZSBpZiBkZXAgaXMgSU9ic2VydmFibGUsIGBkZXBlbmRlbmNpZXNTdGF0ZWAgd2lsbCBiZSB1bmRlZmluZWQsXHJcbiAgICAgICAgLy8gbm90IGhpdHRpbmcgdGhlIGNvbmRpdGlvblxyXG4gICAgICAgIGlmIChkZXAuZGVwZW5kZW5jaWVzU3RhdGUgPiBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUpIHtcclxuICAgICAgICAgICAgbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlID0gZGVwLmRlcGVuZGVuY2llc1N0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9ic2VydmluZy5sZW5ndGggPSBpMDtcclxuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nID0gbnVsbDsgLy8gbmV3T2JzZXJ2aW5nIHNob3VsZG4ndCBiZSBuZWVkZWQgb3V0c2lkZSB0cmFja2luZyAoc3RhdGVtZW50IG1vdmVkIGRvd24gdG8gd29yayBhcm91bmQgRkYgYnVnLCBzZWUgIzYxNClcclxuICAgIC8vIEdvIHRocm91Z2ggYWxsIG9sZCBvYnNlcnZhYmxlcyBhbmQgY2hlY2sgZGlmZlZhbHVlOiAoaXQgaXMgdW5pcXVlIGFmdGVyIGxhc3QgYmluZERlcGVuZGVuY2llcylcclxuICAgIC8vICAgMDogaXQncyBub3QgaW4gbmV3IG9ic2VydmFibGVzLCB1bm9ic2VydmUgaXRcclxuICAgIC8vICAgMTogaXQga2VlcHMgYmVpbmcgb2JzZXJ2ZWQsIGRvbid0IHdhbnQgdG8gbm90aWZ5IGl0LiBjaGFuZ2UgdG8gMFxyXG4gICAgbCA9IHByZXZPYnNlcnZpbmcubGVuZ3RoO1xyXG4gICAgd2hpbGUgKGwtLSkge1xyXG4gICAgICAgIHZhciBkZXAgPSBwcmV2T2JzZXJ2aW5nW2xdO1xyXG4gICAgICAgIGlmIChkZXAuZGlmZlZhbHVlID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZU9ic2VydmVyKGRlcCwgZGVyaXZhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlcC5kaWZmVmFsdWUgPSAwO1xyXG4gICAgfVxyXG4gICAgLy8gR28gdGhyb3VnaCBhbGwgbmV3IG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6IChub3cgaXQgc2hvdWxkIGJlIHVuaXF1ZSlcclxuICAgIC8vICAgMDogaXQgd2FzIHNldCB0byAwIGluIGxhc3QgbG9vcC4gZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZy5cclxuICAgIC8vICAgMTogaXQgd2Fzbid0IG9ic2VydmVkLCBsZXQncyBvYnNlcnZlIGl0LiBzZXQgYmFjayB0byAwXHJcbiAgICB3aGlsZSAoaTAtLSkge1xyXG4gICAgICAgIHZhciBkZXAgPSBvYnNlcnZpbmdbaTBdO1xyXG4gICAgICAgIGlmIChkZXAuZGlmZlZhbHVlID09PSAxKSB7XHJcbiAgICAgICAgICAgIGRlcC5kaWZmVmFsdWUgPSAwO1xyXG4gICAgICAgICAgICBhZGRPYnNlcnZlcihkZXAsIGRlcml2YXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIFNvbWUgbmV3IG9ic2VydmVkIGRlcml2YXRpb25zIG1heSBiZWNvbWUgc3RhbGUgZHVyaW5nIHRoaXMgZGVyaXZhdGlvbiBjb21wdXRhdGlvblxyXG4gICAgLy8gc28gdGhleSBoYXZlIGhhZCBubyBjaGFuY2UgdG8gcHJvcGFnYXRlIHN0YWxlbmVzcyAoIzkxNilcclxuICAgIGlmIChsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgIT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xyXG4gICAgICAgIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgPSBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGU7XHJcbiAgICAgICAgZGVyaXZhdGlvbi5vbkJlY29tZVN0YWxlKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2xlYXJPYnNlcnZpbmcoZGVyaXZhdGlvbikge1xyXG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SIGNsZWFyT2JzZXJ2aW5nIHNob3VsZCBiZSBjYWxsZWQgb25seSBpbnNpZGUgYmF0Y2hcIik7XHJcbiAgICB2YXIgb2JzID0gZGVyaXZhdGlvbi5vYnNlcnZpbmc7XHJcbiAgICBkZXJpdmF0aW9uLm9ic2VydmluZyA9IFtdO1xyXG4gICAgdmFyIGkgPSBvYnMubGVuZ3RoO1xyXG4gICAgd2hpbGUgKGktLSlcclxuICAgICAgICByZW1vdmVPYnNlcnZlcihvYnNbaV0sIGRlcml2YXRpb24pO1xyXG4gICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HO1xyXG59XHJcbmZ1bmN0aW9uIHVudHJhY2tlZChhY3Rpb24pIHtcclxuICAgIHZhciBwcmV2ID0gdW50cmFja2VkU3RhcnQoKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbigpO1xyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdW50cmFja2VkRW5kKHByZXYpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHVudHJhY2tlZFN0YXJ0KCkge1xyXG4gICAgdmFyIHByZXYgPSBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb247XHJcbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBudWxsO1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbn1cclxuZnVuY3Rpb24gdW50cmFja2VkRW5kKHByZXYpIHtcclxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IHByZXY7XHJcbn1cclxuZnVuY3Rpb24gYWxsb3dTdGF0ZVJlYWRzU3RhcnQoYWxsb3dTdGF0ZVJlYWRzKSB7XHJcbiAgICB2YXIgcHJldiA9IGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcztcclxuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkcztcclxuICAgIHJldHVybiBwcmV2O1xyXG59XHJcbmZ1bmN0aW9uIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2KSB7XHJcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgPSBwcmV2O1xyXG59XHJcbi8qKlxyXG4gKiBuZWVkZWQgdG8ga2VlcCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWAgY29ycmVjdC4gd2hlbiBjaGFuZ2luZyBmcm9tICgyIG9yIDEpIHRvIDBcclxuICpcclxuICovXHJcbmZ1bmN0aW9uIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb24pIHtcclxuICAgIGlmIChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcclxuICAgIHZhciBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZztcclxuICAgIHZhciBpID0gb2JzLmxlbmd0aDtcclxuICAgIHdoaWxlIChpLS0pXHJcbiAgICAgICAgb2JzW2ldLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEU7XHJcbn1cblxuLy8gd2UgZG9uJ3QgdXNlIGdsb2JhbFN0YXRlIGZvciB0aGVzZSBpbiBvcmRlciB0byBhdm9pZCBwb3NzaWJsZSBpc3N1ZXMgd2l0aCBtdWx0aXBsZVxyXG4vLyBtb2J4IHZlcnNpb25zXHJcbnZhciBjdXJyZW50QWN0aW9uSWQgPSAwO1xyXG52YXIgbmV4dEFjdGlvbklkID0gMTtcclxudmFyIGZ1bmN0aW9uTmFtZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGZ1bmN0aW9uICgpIHsgfSwgXCJuYW1lXCIpO1xyXG52YXIgaXNGdW5jdGlvbk5hbWVDb25maWd1cmFibGUgPSBmdW5jdGlvbk5hbWVEZXNjcmlwdG9yICYmIGZ1bmN0aW9uTmFtZURlc2NyaXB0b3IuY29uZmlndXJhYmxlO1xyXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4sIHJlZikge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiwgXCJgYWN0aW9uYCBjYW4gb25seSBiZSBpbnZva2VkIG9uIGZ1bmN0aW9uc1wiKTtcclxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbk5hbWUgIT09IFwic3RyaW5nXCIgfHwgIWFjdGlvbk5hbWUpXHJcbiAgICAgICAgICAgIGZhaWwoXCJhY3Rpb25zIHNob3VsZCBoYXZlIHZhbGlkIG5hbWVzLCBnb3Q6ICdcIiArIGFjdGlvbk5hbWUgKyBcIidcIik7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBleGVjdXRlQWN0aW9uKGFjdGlvbk5hbWUsIGZuLCByZWYgfHwgdGhpcywgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgICByZXMuaXNNb2J4QWN0aW9uID0gdHJ1ZTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbk5hbWVDb25maWd1cmFibGUpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcywgXCJuYW1lXCIsIHsgdmFsdWU6IGFjdGlvbk5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiBleGVjdXRlQWN0aW9uKGFjdGlvbk5hbWUsIGZuLCBzY29wZSwgYXJncykge1xyXG4gICAgdmFyIHJ1bkluZm8gPSBfc3RhcnRBY3Rpb24oYWN0aW9uTmFtZSwgc2NvcGUsIGFyZ3MpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZm4uYXBwbHkoc2NvcGUsIGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJ1bkluZm8uZXJyb3IgPSBlcnI7XHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgX2VuZEFjdGlvbihydW5JbmZvKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBfc3RhcnRBY3Rpb24oYWN0aW9uTmFtZSwgc2NvcGUsIGFyZ3MpIHtcclxuICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKSAmJiAhIWFjdGlvbk5hbWU7XHJcbiAgICB2YXIgc3RhcnRUaW1lID0gMDtcclxuICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB2YXIgbCA9IChhcmdzICYmIGFyZ3MubGVuZ3RoKSB8fCAwO1xyXG4gICAgICAgIHZhciBmbGF0dGVuZEFyZ3MgPSBuZXcgQXJyYXkobCk7XHJcbiAgICAgICAgaWYgKGwgPiAwKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKylcclxuICAgICAgICAgICAgICAgIGZsYXR0ZW5kQXJnc1tpXSA9IGFyZ3NbaV07XHJcbiAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xyXG4gICAgICAgICAgICB0eXBlOiBcImFjdGlvblwiLFxyXG4gICAgICAgICAgICBuYW1lOiBhY3Rpb25OYW1lLFxyXG4gICAgICAgICAgICBvYmplY3Q6IHNjb3BlLFxyXG4gICAgICAgICAgICBhcmd1bWVudHM6IGZsYXR0ZW5kQXJnc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdmFyIHByZXZEZXJpdmF0aW9uID0gdW50cmFja2VkU3RhcnQoKTtcclxuICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgIHZhciBwcmV2QWxsb3dTdGF0ZUNoYW5nZXMgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KHRydWUpO1xyXG4gICAgdmFyIHByZXZBbGxvd1N0YXRlUmVhZHMgPSBhbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKTtcclxuICAgIHZhciBydW5JbmZvID0ge1xyXG4gICAgICAgIHByZXZEZXJpdmF0aW9uOiBwcmV2RGVyaXZhdGlvbixcclxuICAgICAgICBwcmV2QWxsb3dTdGF0ZUNoYW5nZXM6IHByZXZBbGxvd1N0YXRlQ2hhbmdlcyxcclxuICAgICAgICBwcmV2QWxsb3dTdGF0ZVJlYWRzOiBwcmV2QWxsb3dTdGF0ZVJlYWRzLFxyXG4gICAgICAgIG5vdGlmeVNweTogbm90aWZ5U3B5LFxyXG4gICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxyXG4gICAgICAgIGFjdGlvbklkOiBuZXh0QWN0aW9uSWQrKyxcclxuICAgICAgICBwYXJlbnRBY3Rpb25JZDogY3VycmVudEFjdGlvbklkXHJcbiAgICB9O1xyXG4gICAgY3VycmVudEFjdGlvbklkID0gcnVuSW5mby5hY3Rpb25JZDtcclxuICAgIHJldHVybiBydW5JbmZvO1xyXG59XHJcbmZ1bmN0aW9uIF9lbmRBY3Rpb24ocnVuSW5mbykge1xyXG4gICAgaWYgKGN1cnJlbnRBY3Rpb25JZCAhPT0gcnVuSW5mby5hY3Rpb25JZCkge1xyXG4gICAgICAgIGZhaWwoXCJpbnZhbGlkIGFjdGlvbiBzdGFjay4gZGlkIHlvdSBmb3JnZXQgdG8gZmluaXNoIGFuIGFjdGlvbj9cIik7XHJcbiAgICB9XHJcbiAgICBjdXJyZW50QWN0aW9uSWQgPSBydW5JbmZvLnBhcmVudEFjdGlvbklkO1xyXG4gICAgaWYgKHJ1bkluZm8uZXJyb3IgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQocnVuSW5mby5wcmV2QWxsb3dTdGF0ZUNoYW5nZXMpO1xyXG4gICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHJ1bkluZm8ucHJldkFsbG93U3RhdGVSZWFkcyk7XHJcbiAgICBlbmRCYXRjaCgpO1xyXG4gICAgdW50cmFja2VkRW5kKHJ1bkluZm8ucHJldkRlcml2YXRpb24pO1xyXG4gICAgaWYgKHJ1bkluZm8ubm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIHNweVJlcG9ydEVuZCh7IHRpbWU6IERhdGUubm93KCkgLSBydW5JbmZvLnN0YXJ0VGltZSB9KTtcclxuICAgIH1cclxuICAgIGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlcyhhbGxvd1N0YXRlQ2hhbmdlcywgZnVuYykge1xyXG4gICAgdmFyIHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGFsbG93U3RhdGVDaGFuZ2VzKTtcclxuICAgIHZhciByZXM7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJlcyA9IGZ1bmMoKTtcclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGFsbG93U3RhdGVDaGFuZ2VzKSB7XHJcbiAgICB2YXIgcHJldiA9IGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzO1xyXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBhbGxvd1N0YXRlQ2hhbmdlcztcclxuICAgIHJldHVybiBwcmV2O1xyXG59XHJcbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpIHtcclxuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzID0gcHJldjtcclxufVxyXG5mdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlc0luc2lkZUNvbXB1dGVkKGZ1bmMpIHtcclxuICAgIHZhciBwcmV2ID0gZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aDtcclxuICAgIGdsb2JhbFN0YXRlLmNvbXB1dGF0aW9uRGVwdGggPSAwO1xyXG4gICAgdmFyIHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gZnVuYygpO1xyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aCA9IHByZXY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XG5cbnZhciBPYnNlcnZhYmxlVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoT2JzZXJ2YWJsZVZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZVZhbHVlKHZhbHVlLCBlbmhhbmNlciwgbmFtZSwgbm90aWZ5U3B5LCBlcXVhbHMpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIk9ic2VydmFibGVWYWx1ZUBcIiArIGdldE5leHRJZCgpOyB9XHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSA9PT0gdm9pZCAwKSB7IG5vdGlmeVNweSA9IHRydWU7IH1cclxuICAgICAgICBpZiAoZXF1YWxzID09PSB2b2lkIDApIHsgZXF1YWxzID0gY29tcGFyZXIuZGVmYXVsdDsgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5hbWUpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZW5oYW5jZXIgPSBlbmhhbmNlcjtcclxuICAgICAgICBfdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICBfdGhpcy5lcXVhbHMgPSBlcXVhbHM7XHJcbiAgICAgICAgX3RoaXMuaGFzVW5yZXBvcnRlZENoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIF90aGlzLnZhbHVlID0gZW5oYW5jZXIodmFsdWUsIHVuZGVmaW5lZCwgbmFtZSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBpc1NweUVuYWJsZWQoKSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgLy8gb25seSBub3RpZnkgc3B5IGlmIHRoaXMgaXMgYSBzdGFuZC1hbG9uZSBvYnNlcnZhYmxlXHJcbiAgICAgICAgICAgIHNweVJlcG9ydCh7IHR5cGU6IFwiY3JlYXRlXCIsIG5hbWU6IF90aGlzLm5hbWUsIG5ld1ZhbHVlOiBcIlwiICsgX3RoaXMudmFsdWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUuZGVoYW5jZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLnByZXBhcmVOZXdWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQpIHtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TmV3VmFsdWUobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnByZXBhcmVOZXdWYWx1ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKHRoaXMpO1xyXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQ7XHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhcHBseSBtb2RpZmllclxyXG4gICAgICAgIG5ld1ZhbHVlID0gdGhpcy5lbmhhbmNlcihuZXdWYWx1ZSwgdGhpcy52YWx1ZSwgdGhpcy5uYW1lKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5lcXVhbHModGhpcy52YWx1ZSwgbmV3VmFsdWUpID8gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEIDogbmV3VmFsdWU7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5zZXROZXdWYWx1ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIHRoaXMucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgIGlmIChoYXNMaXN0ZW5lcnModGhpcykpIHtcclxuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucmVwb3J0T2JzZXJ2ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWUodGhpcy52YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5pbnRlcmNlcHQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSlcclxuICAgICAgICAgICAgbGlzdGVuZXIoe1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB0aGlzLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCJbXCIgKyB0aGlzLnZhbHVlICsgXCJdXCI7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0b1ByaW1pdGl2ZSh0aGlzLmdldCgpKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlVmFsdWU7XHJcbn0oQXRvbSkpO1xyXG52YXIgaXNPYnNlcnZhYmxlVmFsdWUgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZVZhbHVlXCIsIE9ic2VydmFibGVWYWx1ZSk7XG5cbi8qKlxyXG4gKiBBIG5vZGUgaW4gdGhlIHN0YXRlIGRlcGVuZGVuY3kgcm9vdCB0aGF0IG9ic2VydmVzIG90aGVyIG5vZGVzLCBhbmQgY2FuIGJlIG9ic2VydmVkIGl0c2VsZi5cclxuICpcclxuICogQ29tcHV0ZWRWYWx1ZSB3aWxsIHJlbWVtYmVyIHRoZSByZXN1bHQgb2YgdGhlIGNvbXB1dGF0aW9uIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGJhdGNoLCBvclxyXG4gKiB3aGlsZSBiZWluZyBvYnNlcnZlZC5cclxuICpcclxuICogRHVyaW5nIHRoaXMgdGltZSBpdCB3aWxsIHJlY29tcHV0ZSBvbmx5IHdoZW4gb25lIG9mIGl0cyBkaXJlY3QgZGVwZW5kZW5jaWVzIGNoYW5nZWQsXHJcbiAqIGJ1dCBvbmx5IHdoZW4gaXQgaXMgYmVpbmcgYWNjZXNzZWQgd2l0aCBgQ29tcHV0ZWRWYWx1ZS5nZXQoKWAuXHJcbiAqXHJcbiAqIEltcGxlbWVudGF0aW9uIGRlc2NyaXB0aW9uOlxyXG4gKiAxLiBGaXJzdCB0aW1lIGl0J3MgYmVpbmcgYWNjZXNzZWQgaXQgd2lsbCBjb21wdXRlIGFuZCByZW1lbWJlciByZXN1bHRcclxuICogICAgZ2l2ZSBiYWNrIHJlbWVtYmVyZWQgcmVzdWx0IHVudGlsIDIuIGhhcHBlbnNcclxuICogMi4gRmlyc3QgdGltZSBhbnkgZGVlcCBkZXBlbmRlbmN5IGNoYW5nZSwgcHJvcGFnYXRlIFBPU1NJQkxZX1NUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHdhaXQgZm9yIDMuXHJcbiAqIDMuIFdoZW4gaXQncyBiZWluZyBhY2Nlc3NlZCwgcmVjb21wdXRlIGlmIGFueSBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZC5cclxuICogICAgaWYgcmVzdWx0IGNoYW5nZWQ6IHByb3BhZ2F0ZSBTVEFMRSB0byBhbGwgb2JzZXJ2ZXJzLCB0aGF0IHdlcmUgUE9TU0lCTFlfU1RBTEUgZnJvbSB0aGUgbGFzdCBzdGVwLlxyXG4gKiAgICBnbyB0byBzdGVwIDIuIGVpdGhlciB3YXlcclxuICpcclxuICogSWYgYXQgYW55IHBvaW50IGl0J3Mgb3V0c2lkZSBiYXRjaCBhbmQgaXQgaXNuJ3Qgb2JzZXJ2ZWQ6IHJlc2V0IGV2ZXJ5dGhpbmcgYW5kIGdvIHRvIDEuXHJcbiAqL1xyXG52YXIgQ29tcHV0ZWRWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IGNvbXB1dGVkIHZhbHVlIGJhc2VkIG9uIGEgZnVuY3Rpb24gZXhwcmVzc2lvbi5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgYG5hbWVgIHByb3BlcnR5IGlzIGZvciBkZWJ1ZyBwdXJwb3NlcyBvbmx5LlxyXG4gICAgICpcclxuICAgICAqIFRoZSBgZXF1YWxzYCBwcm9wZXJ0eSBzcGVjaWZpZXMgdGhlIGNvbXBhcmVyIGZ1bmN0aW9uIHRvIHVzZSB0byBkZXRlcm1pbmUgaWYgYSBuZXdseSBwcm9kdWNlZFxyXG4gICAgICogdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBwcmV2aW91cyB2YWx1ZS4gVHdvIGNvbXBhcmVycyBhcmUgcHJvdmlkZWQgaW4gdGhlIGxpYnJhcnk7IGBkZWZhdWx0Q29tcGFyZXJgXHJcbiAgICAgKiBjb21wYXJlcyBiYXNlZCBvbiBpZGVudGl0eSBjb21wYXJpc29uICg9PT0pLCBhbmQgYHN0cnVjdHVhbENvbXBhcmVyYCBkZWVwbHkgY29tcGFyZXMgdGhlIHN0cnVjdHVyZS5cclxuICAgICAqIFN0cnVjdHVyYWwgY29tcGFyaXNvbiBjYW4gYmUgY29udmVuaWVudCBpZiB5b3UgYWx3YXlzIHByb2R1Y2UgYSBuZXcgYWdncmVnYXRlZCBvYmplY3QgYW5kXHJcbiAgICAgKiBkb24ndCB3YW50IHRvIG5vdGlmeSBvYnNlcnZlcnMgaWYgaXQgaXMgc3RydWN0dXJhbGx5IHRoZSBzYW1lLlxyXG4gICAgICogVGhpcyBpcyB1c2VmdWwgZm9yIHdvcmtpbmcgd2l0aCB2ZWN0b3JzLCBtb3VzZSBjb29yZGluYXRlcyBldGMuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIENvbXB1dGVkVmFsdWUob3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORztcclxuICAgICAgICB0aGlzLm9ic2VydmluZyA9IFtdOyAvLyBub2RlcyB3ZSBhcmUgbG9va2luZyBhdC4gT3VyIHZhbHVlIGRlcGVuZHMgb24gdGhlc2Ugbm9kZXNcclxuICAgICAgICB0aGlzLm5ld09ic2VydmluZyA9IG51bGw7IC8vIGR1cmluZyB0cmFja2luZyBpdCdzIGFuIGFycmF5IHdpdGggbmV3IG9ic2VydmVkIG9ic2VydmVyc1xyXG4gICAgICAgIHRoaXMuaXNCZWluZ09ic2VydmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1BlbmRpbmdVbm9ic2VydmF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5kaWZmVmFsdWUgPSAwO1xyXG4gICAgICAgIHRoaXMucnVuSWQgPSAwO1xyXG4gICAgICAgIHRoaXMubGFzdEFjY2Vzc2VkQnkgPSAwO1xyXG4gICAgICAgIHRoaXMubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcclxuICAgICAgICB0aGlzLnVuYm91bmREZXBzQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuX19tYXBpZCA9IFwiI1wiICsgZ2V0TmV4dElkKCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBDYXVnaHRFeGNlcHRpb24obnVsbCk7XHJcbiAgICAgICAgdGhpcy5pc0NvbXB1dGluZyA9IGZhbHNlOyAvLyB0byBjaGVjayBmb3IgY3ljbGVzXHJcbiAgICAgICAgdGhpcy5pc1J1bm5pbmdTZXR0ZXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzVHJhY2luZyA9IFRyYWNlTW9kZS5OT05FO1xyXG4gICAgICAgIGludmFyaWFudChvcHRpb25zLmdldCwgXCJtaXNzaW5nIG9wdGlvbiBmb3IgY29tcHV0ZWQ6IGdldFwiKTtcclxuICAgICAgICB0aGlzLmRlcml2YXRpb24gPSBvcHRpb25zLmdldDtcclxuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgXCJDb21wdXRlZFZhbHVlQFwiICsgZ2V0TmV4dElkKCk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2V0KVxyXG4gICAgICAgICAgICB0aGlzLnNldHRlciA9IGNyZWF0ZUFjdGlvbih0aGlzLm5hbWUgKyBcIi1zZXR0ZXJcIiwgb3B0aW9ucy5zZXQpO1xyXG4gICAgICAgIHRoaXMuZXF1YWxzID1cclxuICAgICAgICAgICAgb3B0aW9ucy5lcXVhbHMgfHxcclxuICAgICAgICAgICAgICAgIChvcHRpb25zLmNvbXBhcmVTdHJ1Y3R1cmFsIHx8IG9wdGlvbnMuc3RydWN0XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjb21wYXJlci5zdHJ1Y3R1cmFsXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjb21wYXJlci5kZWZhdWx0KTtcclxuICAgICAgICB0aGlzLnNjb3BlID0gb3B0aW9ucy5jb250ZXh0O1xyXG4gICAgICAgIHRoaXMucmVxdWlyZXNSZWFjdGlvbiA9ICEhb3B0aW9ucy5yZXF1aXJlc1JlYWN0aW9uO1xyXG4gICAgICAgIHRoaXMua2VlcEFsaXZlID0gISFvcHRpb25zLmtlZXBBbGl2ZTtcclxuICAgIH1cclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLm9uQmVjb21lU3RhbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLm9uQmVjb21lT2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub25CZWNvbWVPYnNlcnZlZExpc3RlbmVycykge1xyXG4gICAgICAgICAgICB0aGlzLm9uQmVjb21lT2JzZXJ2ZWRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5vbkJlY29tZVVub2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub25CZWNvbWVVbm9ic2VydmVkTGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25CZWNvbWVVbm9ic2VydmVkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBsaXN0ZW5lcigpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoaXMgY29tcHV0ZWQgdmFsdWUuXHJcbiAgICAgKiBXaWxsIGV2YWx1YXRlIGl0cyBjb21wdXRhdGlvbiBmaXJzdCBpZiBuZWVkZWQuXHJcbiAgICAgKi9cclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0NvbXB1dGluZylcclxuICAgICAgICAgICAgZmFpbChcIkN5Y2xlIGRldGVjdGVkIGluIGNvbXB1dGF0aW9uIFwiICsgdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5kZXJpdmF0aW9uKTtcclxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuaW5CYXRjaCA9PT0gMCAmJiB0aGlzLm9ic2VydmVycy5zaXplID09PSAwICYmICF0aGlzLmtlZXBBbGl2ZSkge1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcHV0ZSh0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53YXJuQWJvdXRVbnRyYWNrZWRSZWFkKCk7XHJcbiAgICAgICAgICAgICAgICBzdGFydEJhdGNoKCk7IC8vIFNlZSBwZXJmIHRlc3QgJ2NvbXB1dGVkIG1lbW9pemF0aW9uJ1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY29tcHV0ZVZhbHVlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcG9ydE9ic2VydmVkKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcHV0ZSh0aGlzKSlcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrQW5kQ29tcHV0ZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgaWYgKGlzQ2F1Z2h0RXhjZXB0aW9uKHJlc3VsdCkpXHJcbiAgICAgICAgICAgIHRocm93IHJlc3VsdC5jYXVzZTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IHRoaXMuY29tcHV0ZVZhbHVlKGZhbHNlKTtcclxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzKSlcclxuICAgICAgICAgICAgdGhyb3cgcmVzLmNhdXNlO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGVyKSB7XHJcbiAgICAgICAgICAgIGludmFyaWFudCghdGhpcy5pc1J1bm5pbmdTZXR0ZXIsIFwiVGhlIHNldHRlciBvZiBjb21wdXRlZCB2YWx1ZSAnXCIgKyB0aGlzLm5hbWUgKyBcIicgaXMgdHJ5aW5nIHRvIHVwZGF0ZSBpdHNlbGYuIERpZCB5b3UgaW50ZW5kIHRvIHVwZGF0ZSBhbiBfb2JzZXJ2YWJsZV8gdmFsdWUsIGluc3RlYWQgb2YgdGhlIGNvbXB1dGVkIHByb3BlcnR5P1wiKTtcclxuICAgICAgICAgICAgdGhpcy5pc1J1bm5pbmdTZXR0ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0ZXIuY2FsbCh0aGlzLnNjb3BlLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVubmluZ1NldHRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgaW52YXJpYW50KGZhbHNlLCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgICAgIFwiW0NvbXB1dGVkVmFsdWUgJ1wiICsgdGhpcy5uYW1lICsgXCInXSBJdCBpcyBub3QgcG9zc2libGUgdG8gYXNzaWduIGEgbmV3IHZhbHVlIHRvIGEgY29tcHV0ZWQgdmFsdWUuXCIpO1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnRyYWNrQW5kQ29tcHV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaXNTcHlFbmFibGVkKCkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMuc2NvcGUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNvbXB1dGVcIixcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB2YXIgd2FzU3VzcGVuZGVkID0gXHJcbiAgICAgICAgLyogc2VlICMxMjA4ICovIHRoaXMuZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HO1xyXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuY29tcHV0ZVZhbHVlKHRydWUpO1xyXG4gICAgICAgIHZhciBjaGFuZ2VkID0gd2FzU3VzcGVuZGVkIHx8XHJcbiAgICAgICAgICAgIGlzQ2F1Z2h0RXhjZXB0aW9uKG9sZFZhbHVlKSB8fFxyXG4gICAgICAgICAgICBpc0NhdWdodEV4Y2VwdGlvbihuZXdWYWx1ZSkgfHxcclxuICAgICAgICAgICAgIXRoaXMuZXF1YWxzKG9sZFZhbHVlLCBuZXdWYWx1ZSk7XHJcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2hhbmdlZDtcclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5jb21wdXRlVmFsdWUgPSBmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nID0gdHJ1ZTtcclxuICAgICAgICBnbG9iYWxTdGF0ZS5jb21wdXRhdGlvbkRlcHRoKys7XHJcbiAgICAgICAgdmFyIHJlcztcclxuICAgICAgICBpZiAodHJhY2spIHtcclxuICAgICAgICAgICAgcmVzID0gdHJhY2tEZXJpdmVkRnVuY3Rpb24odGhpcywgdGhpcy5kZXJpdmF0aW9uLCB0aGlzLnNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmRlcml2YXRpb24uY2FsbCh0aGlzLnNjb3BlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gdGhpcy5kZXJpdmF0aW9uLmNhbGwodGhpcy5zY29wZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IG5ldyBDYXVnaHRFeGNlcHRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aC0tO1xyXG4gICAgICAgIHRoaXMuaXNDb21wdXRpbmcgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnN1c3BlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmtlZXBBbGl2ZSkge1xyXG4gICAgICAgICAgICBjbGVhck9ic2VydmluZyh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDsgLy8gZG9uJ3QgaG9sZCBvbiB0byBjb21wdXRlZCB2YWx1ZSFcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcHJldlZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBhdXRvcnVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gX3RoaXMuZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmICghZmlyc3RUaW1lIHx8IGZpcmVJbW1lZGlhdGVseSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByZXZVID0gdW50cmFja2VkU3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogX3RoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBwcmV2VmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgcHJldlZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUud2FybkFib3V0VW50cmFja2VkUmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZXNSZWFjdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBmYWlsKFwiW21vYnhdIENvbXB1dGVkIHZhbHVlIFwiICsgdGhpcy5uYW1lICsgXCIgaXMgcmVhZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNUcmFjaW5nICE9PSBUcmFjZU1vZGUuTk9ORSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlttb2J4LnRyYWNlXSAnXCIgKyB0aGlzLm5hbWUgKyBcIicgaXMgYmVpbmcgcmVhZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dC4gRG9pbmcgYSBmdWxsIHJlY29tcHV0ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0gQ29tcHV0ZWQgdmFsdWUgXCIgKyB0aGlzLm5hbWUgKyBcIiBpcyBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0LiBEb2luZyBhIGZ1bGwgcmVjb21wdXRlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7XHJcbiAgICB9O1xyXG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArIFwiW1wiICsgdGhpcy5kZXJpdmF0aW9uLnRvU3RyaW5nKCkgKyBcIl1cIjtcclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0b1ByaW1pdGl2ZSh0aGlzLmdldCgpKTtcclxuICAgIH07XHJcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZVtTeW1ib2wudG9QcmltaXRpdmVdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcHV0ZWRWYWx1ZTtcclxufSgpKTtcclxudmFyIGlzQ29tcHV0ZWRWYWx1ZSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJDb21wdXRlZFZhbHVlXCIsIENvbXB1dGVkVmFsdWUpO1xuXG4vKipcclxuICogVGhlc2UgdmFsdWVzIHdpbGwgcGVyc2lzdCBpZiBnbG9iYWwgc3RhdGUgaXMgcmVzZXRcclxuICovXHJcbnZhciBwZXJzaXN0ZW50S2V5cyA9IFtcclxuICAgIFwibW9ieEd1aWRcIixcclxuICAgIFwic3B5TGlzdGVuZXJzXCIsXHJcbiAgICBcImVuZm9yY2VBY3Rpb25zXCIsXHJcbiAgICBcImNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvblwiLFxyXG4gICAgXCJyZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZVwiLFxyXG4gICAgXCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvblwiLFxyXG4gICAgXCJhbGxvd1N0YXRlUmVhZHNcIixcclxuICAgIFwiZGlzYWJsZUVycm9yQm91bmRhcmllc1wiLFxyXG4gICAgXCJydW5JZFwiLFxyXG4gICAgXCJVTkNIQU5HRURcIlxyXG5dO1xyXG52YXIgTW9iWEdsb2JhbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNb2JYR2xvYmFscygpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNb2JYR2xvYmFscyB2ZXJzaW9uLlxyXG4gICAgICAgICAqIE1vYlggY29tcGF0aWJsaXR5IHdpdGggb3RoZXIgdmVyc2lvbnMgbG9hZGVkIGluIG1lbW9yeSBhcyBsb25nIGFzIHRoaXMgdmVyc2lvbiBtYXRjaGVzLlxyXG4gICAgICAgICAqIEl0IGluZGljYXRlcyB0aGF0IHRoZSBnbG9iYWwgc3RhdGUgc3RpbGwgc3RvcmVzIHNpbWlsYXIgaW5mb3JtYXRpb25cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIE4uQjogdGhpcyB2ZXJzaW9uIGlzIHVucmVsYXRlZCB0byB0aGUgcGFja2FnZSB2ZXJzaW9uIG9mIE1vYlgsIGFuZCBpcyBvbmx5IHRoZSB2ZXJzaW9uIG9mIHRoZVxyXG4gICAgICAgICAqIGludGVybmFsIHN0YXRlIHN0b3JhZ2Ugb2YgTW9iWCwgYW5kIGNhbiBiZSB0aGUgc2FtZSBhY3Jvc3MgbWFueSBkaWZmZXJlbnQgcGFja2FnZSB2ZXJzaW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogZ2xvYmFsbHkgdW5pcXVlIHRva2VuIHRvIHNpZ25hbCB1bmNoYW5nZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLlVOQ0hBTkdFRCA9IHt9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEN1cnJlbnRseSBydW5uaW5nIGRlcml2YXRpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRyYWNraW5nRGVyaXZhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXJlIHdlIHJ1bm5pbmcgYSBjb21wdXRhdGlvbiBjdXJyZW50bHk/IChub3QgYSByZWFjdGlvbilcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbXB1dGF0aW9uRGVwdGggPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVhY2ggdGltZSBhIGRlcml2YXRpb24gaXMgdHJhY2tlZCwgaXQgaXMgYXNzaWduZWQgYSB1bmlxdWUgcnVuLWlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5ydW5JZCA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogJ2d1aWQnIGZvciBnZW5lcmFsIHB1cnBvc2UuIFdpbGwgYmUgcGVyc2lzdGVkIGFtb25nc3QgcmVzZXRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubW9ieEd1aWQgPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFyZSB3ZSBpbiBhIGJhdGNoIGJsb2NrPyAoYW5kIGhvdyBtYW55IG9mIHRoZW0pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbkJhdGNoID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPYnNlcnZhYmxlcyB0aGF0IGRvbid0IGhhdmUgb2JzZXJ2ZXJzIGFueW1vcmUsIGFuZCBhcmUgYWJvdXQgdG8gYmVcclxuICAgICAgICAgKiBzdXNwZW5kZWQsIHVubGVzcyBzb21lYm9keSBlbHNlIGFjY2Vzc2VzIGl0IGluIHRoZSBzYW1lIGJhdGNoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7SU9ic2VydmFibGVbXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBlbmRpbmdVbm9ic2VydmF0aW9ucyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIExpc3Qgb2Ygc2NoZWR1bGVkLCBub3QgeWV0IGV4ZWN1dGVkLCByZWFjdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVhY3Rpb25zID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXJlIHdlIGN1cnJlbnRseSBwcm9jZXNzaW5nIHJlYWN0aW9ucz9cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmlzUnVubmluZ1JlYWN0aW9ucyA9IGZhbHNlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElzIGl0IGFsbG93ZWQgdG8gY2hhbmdlIG9ic2VydmFibGVzIGF0IHRoaXMgcG9pbnQ/XHJcbiAgICAgICAgICogSW4gZ2VuZXJhbCwgTW9iWCBkb2Vzbid0IGFsbG93IHRoYXQgd2hlbiBydW5uaW5nIGNvbXB1dGF0aW9ucyBhbmQgUmVhY3QucmVuZGVyLlxyXG4gICAgICAgICAqIFRvIGVuc3VyZSB0aGF0IHRob3NlIGZ1bmN0aW9ucyBzdGF5IHB1cmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5hbGxvd1N0YXRlQ2hhbmdlcyA9IHRydWU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSXMgaXQgYWxsb3dlZCB0byByZWFkIG9ic2VydmFibGVzIGF0IHRoaXMgcG9pbnQ/XHJcbiAgICAgICAgICogVXNlZCB0byBob2xkIHRoZSBzdGF0ZSBuZWVkZWQgZm9yIGBvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbmBcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmFsbG93U3RhdGVSZWFkcyA9IHRydWU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgc3RyaWN0IG1vZGUgaXMgZW5hYmxlZCwgc3RhdGUgY2hhbmdlcyBhcmUgYnkgZGVmYXVsdCBub3QgYWxsb3dlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZW5mb3JjZUFjdGlvbnMgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcHkgY2FsbGJhY2tzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5zcHlMaXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHbG9iYWxseSBhdHRhY2hlZCBlcnJvciBoYW5kbGVycyB0aGF0IHJlYWN0IHNwZWNpZmljYWxseSB0byBlcnJvcnMgaW4gcmVhY3Rpb25zXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMgPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXYXJuIGlmIGNvbXB1dGVkIHZhbHVlcyBhcmUgYWNjZXNzZWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIChFeHBlcmltZW50YWwpXHJcbiAgICAgICAgICogV2FybiBpZiB5b3UgdHJ5IHRvIGNyZWF0ZSB0byBkZXJpdmF0aW9uIC8gcmVhY3RpdmUgY29udGV4dCB3aXRob3V0IGFjY2Vzc2luZyBhbnkgb2JzZXJ2YWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogKEV4cGVyaW1lbnRhbClcclxuICAgICAgICAgKiBXYXJuIGlmIG9ic2VydmFibGVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbGxvd3Mgb3ZlcndyaXRpbmcgb2YgY29tcHV0ZWQgcHJvcGVydGllcywgdXNlZnVsIGluIHRlc3RzIGJ1dCBub3QgcHJvZCBhcyBpdCBjYW4gY2F1c2VcclxuICAgICAgICAgKiBtZW1vcnkgbGVha3MuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzE4NjdcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbXB1dGVkQ29uZmlndXJhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBEb24ndCBjYXRjaCBhbmQgcmV0aHJvdyBleGNlcHRpb25zLiBUaGlzIGlzIHVzZWZ1bCBmb3IgaW5zcGVjdGluZyB0aGUgc3RhdGUgb2ZcclxuICAgICAgICAgKiB0aGUgc3RhY2sgd2hlbiBhbiBleGNlcHRpb24gb2NjdXJzIHdoaWxlIGRlYnVnZ2luZy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPSBmYWxzZTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIElmIHRydWUsIHdlIGFyZSBhbHJlYWR5IGhhbmRsaW5nIGFuIGV4Y2VwdGlvbiBpbiBhbiBhY3Rpb24uIEFueSBlcnJvcnMgaW4gcmVhY3Rpb25zIHNob3VsZCBiZSBzdXBwcmVzc2VkLCBhc1xyXG4gICAgICAgICAqIHRoZXkgYXJlIG5vdCB0aGUgY2F1c2UsIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy8xODM2XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5zdXBwcmVzc1JlYWN0aW9uRXJyb3JzID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTW9iWEdsb2JhbHM7XHJcbn0oKSk7XHJcbnZhciBtb2NrR2xvYmFsID0ge307XHJcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vY2tHbG9iYWw7XHJcbn1cclxudmFyIGNhbk1lcmdlR2xvYmFsU3RhdGUgPSB0cnVlO1xyXG52YXIgaXNvbGF0ZUNhbGxlZCA9IGZhbHNlO1xyXG52YXIgZ2xvYmFsU3RhdGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbCgpO1xyXG4gICAgaWYgKGdsb2JhbC5fX21vYnhJbnN0YW5jZUNvdW50ID4gMCAmJiAhZ2xvYmFsLl9fbW9ieEdsb2JhbHMpXHJcbiAgICAgICAgY2FuTWVyZ2VHbG9iYWxTdGF0ZSA9IGZhbHNlO1xyXG4gICAgaWYgKGdsb2JhbC5fX21vYnhHbG9iYWxzICYmIGdsb2JhbC5fX21vYnhHbG9iYWxzLnZlcnNpb24gIT09IG5ldyBNb2JYR2xvYmFscygpLnZlcnNpb24pXHJcbiAgICAgICAgY2FuTWVyZ2VHbG9iYWxTdGF0ZSA9IGZhbHNlO1xyXG4gICAgaWYgKCFjYW5NZXJnZUdsb2JhbFN0YXRlKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNvbGF0ZUNhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgZmFpbChcIlRoZXJlIGFyZSBtdWx0aXBsZSwgZGlmZmVyZW50IHZlcnNpb25zIG9mIE1vYlggYWN0aXZlLiBNYWtlIHN1cmUgTW9iWCBpcyBsb2FkZWQgb25seSBvbmNlIG9yIHVzZSBgY29uZmlndXJlKHsgaXNvbGF0ZUdsb2JhbFN0YXRlOiB0cnVlIH0pYFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDEpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTW9iWEdsb2JhbHMoKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGdsb2JhbC5fX21vYnhHbG9iYWxzKSB7XHJcbiAgICAgICAgZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgKz0gMTtcclxuICAgICAgICBpZiAoIWdsb2JhbC5fX21vYnhHbG9iYWxzLlVOQ0hBTkdFRClcclxuICAgICAgICAgICAgZ2xvYmFsLl9fbW9ieEdsb2JhbHMuVU5DSEFOR0VEID0ge307IC8vIG1ha2UgbWVyZ2UgYmFja3dhcmQgY29tcGF0aWJsZVxyXG4gICAgICAgIHJldHVybiBnbG9iYWwuX19tb2J4R2xvYmFscztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGdsb2JhbC5fX21vYnhJbnN0YW5jZUNvdW50ID0gMTtcclxuICAgICAgICByZXR1cm4gKGdsb2JhbC5fX21vYnhHbG9iYWxzID0gbmV3IE1vYlhHbG9iYWxzKCkpO1xyXG4gICAgfVxyXG59KSgpO1xyXG5mdW5jdGlvbiBpc29sYXRlR2xvYmFsU3RhdGUoKSB7XHJcbiAgICBpZiAoZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9ucy5sZW5ndGggfHxcclxuICAgICAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoIHx8XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zKVxyXG4gICAgICAgIGZhaWwoXCJpc29sYXRlR2xvYmFsU3RhdGUgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgTW9iWCBpcyBydW5uaW5nIGFueSByZWFjdGlvbnNcIik7XHJcbiAgICBpc29sYXRlQ2FsbGVkID0gdHJ1ZTtcclxuICAgIGlmIChjYW5NZXJnZUdsb2JhbFN0YXRlKSB7XHJcbiAgICAgICAgaWYgKC0tZ2V0R2xvYmFsKCkuX19tb2J4SW5zdGFuY2VDb3VudCA9PT0gMClcclxuICAgICAgICAgICAgZ2V0R2xvYmFsKCkuX19tb2J4R2xvYmFscyA9IHVuZGVmaW5lZDtcclxuICAgICAgICBnbG9iYWxTdGF0ZSA9IG5ldyBNb2JYR2xvYmFscygpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldEdsb2JhbFN0YXRlKCkge1xyXG4gICAgcmV0dXJuIGdsb2JhbFN0YXRlO1xyXG59XHJcbi8qKlxyXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5OyB0aGlzIHdpbGwgYnJlYWsgdGhlIGludGVybmFsIHN0YXRlIG9mIGV4aXN0aW5nIG9ic2VydmFibGVzLFxyXG4gKiBidXQgY2FuIGJlIHVzZWQgdG8gZ2V0IGJhY2sgYXQgYSBzdGFibGUgc3RhdGUgYWZ0ZXIgdGhyb3dpbmcgZXJyb3JzXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkge1xyXG4gICAgdmFyIGRlZmF1bHRHbG9iYWxzID0gbmV3IE1vYlhHbG9iYWxzKCk7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdEdsb2JhbHMpXHJcbiAgICAgICAgaWYgKHBlcnNpc3RlbnRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpXHJcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlW2tleV0gPSBkZWZhdWx0R2xvYmFsc1trZXldO1xyXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSAhZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnM7XHJcbn1cblxuZnVuY3Rpb24gaGFzT2JzZXJ2ZXJzKG9ic2VydmFibGUpIHtcclxuICAgIHJldHVybiBvYnNlcnZhYmxlLm9ic2VydmVycyAmJiBvYnNlcnZhYmxlLm9ic2VydmVycy5zaXplID4gMDtcclxufVxyXG5mdW5jdGlvbiBnZXRPYnNlcnZlcnMob2JzZXJ2YWJsZSkge1xyXG4gICAgcmV0dXJuIG9ic2VydmFibGUub2JzZXJ2ZXJzO1xyXG59XHJcbi8vIGZ1bmN0aW9uIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSkge1xyXG4vLyAgICAgY29uc3QgbGlzdCA9IG9ic2VydmFibGUub2JzZXJ2ZXJzXHJcbi8vICAgICBjb25zdCBtYXAgPSBvYnNlcnZhYmxlLm9ic2VydmVyc0luZGV4ZXNcclxuLy8gICAgIGNvbnN0IGwgPSBsaXN0Lmxlbmd0aFxyXG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuLy8gICAgICAgICBjb25zdCBpZCA9IGxpc3RbaV0uX19tYXBpZFxyXG4vLyAgICAgICAgIGlmIChpKSB7XHJcbi8vICAgICAgICAgICAgIGludmFyaWFudChtYXBbaWRdID09PSBpLCBcIklOVEVSTkFMIEVSUk9SIG1hcHMgZGVyaXZhdGlvbi5fX21hcGlkIHRvIGluZGV4IGluIGxpc3RcIikgLy8gZm9yIHBlcmZvcm1hbmNlXHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgaW52YXJpYW50KCEoaWQgaW4gbWFwKSwgXCJJTlRFUk5BTCBFUlJPUiBvYnNlcnZlciBvbiBpbmRleCAwIHNob3VsZG4ndCBiZSBoZWxkIGluIG1hcC5cIikgLy8gZm9yIHBlcmZvcm1hbmNlXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgaW52YXJpYW50KFxyXG4vLyAgICAgICAgIGxpc3QubGVuZ3RoID09PSAwIHx8IE9iamVjdC5rZXlzKG1hcCkubGVuZ3RoID09PSBsaXN0Lmxlbmd0aCAtIDEsXHJcbi8vICAgICAgICAgXCJJTlRFUk5BTCBFUlJPUiB0aGVyZSBpcyBubyBqdW5rIGluIG1hcFwiXHJcbi8vICAgICApXHJcbi8vIH1cclxuZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2YWJsZSwgbm9kZSkge1xyXG4gICAgLy8gaW52YXJpYW50KG5vZGUuZGVwZW5kZW5jaWVzU3RhdGUgIT09IC0xLCBcIklOVEVSTkFMIEVSUk9SLCBjYW4gYWRkIG9ubHkgZGVwZW5kZW5jaWVzU3RhdGUgIT09IC0xXCIpO1xyXG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpID09PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiBhZGQgYWxyZWFkeSBhZGRlZCBub2RlXCIpO1xyXG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xyXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnMuYWRkKG5vZGUpO1xyXG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA+IG5vZGUuZGVwZW5kZW5jaWVzU3RhdGUpXHJcbiAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID0gbm9kZS5kZXBlbmRlbmNpZXNTdGF0ZTtcclxuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcclxuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgZGlkbid0IGFkZCBub2RlXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZU9ic2VydmVyKG9ic2VydmFibGUsIG5vZGUpIHtcclxuICAgIC8vIGludmFyaWFudChnbG9iYWxTdGF0ZS5pbkJhdGNoID4gMCwgXCJJTlRFUk5BTCBFUlJPUiwgcmVtb3ZlIHNob3VsZCBiZSBjYWxsZWQgb25seSBpbnNpZGUgYmF0Y2hcIik7XHJcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgIT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIHJlbW92ZSBhbHJlYWR5IHJlbW92ZWQgbm9kZVwiKTtcclxuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcclxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzLmRlbGV0ZShub2RlKTtcclxuICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVycy5zaXplID09PSAwKSB7XHJcbiAgICAgICAgLy8gZGVsZXRpbmcgbGFzdCBvYnNlcnZlclxyXG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKTtcclxuICAgIH1cclxuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcclxuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSA9PT0gLTEsIFwiSU5URVJOQUwgRVJST1IgcmVtb3ZlIGFscmVhZHkgcmVtb3ZlZCBub2RlMlwiKTtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZUZvclVub2JzZXJ2YXRpb24ob2JzZXJ2YWJsZSkge1xyXG4gICAgaWYgKG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbiA9PT0gZmFsc2UpIHtcclxuICAgICAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCwgXCJJTlRFUk5BTCBFUlJPUiwgc2hvdWxkIG9ubHkgcXVldWUgZm9yIHVub2JzZXJ2YXRpb24gdW5vYnNlcnZlZCBvYnNlcnZhYmxlc1wiKTtcclxuICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSB0cnVlO1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9ucy5wdXNoKG9ic2VydmFibGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBCYXRjaCBzdGFydHMgYSB0cmFuc2FjdGlvbiwgYXQgbGVhc3QgZm9yIHB1cnBvc2VzIG9mIG1lbW9pemluZyBDb21wdXRlZFZhbHVlcyB3aGVuIG5vdGhpbmcgZWxzZSBkb2VzLlxyXG4gKiBEdXJpbmcgYSBiYXRjaCBgb25CZWNvbWVVbm9ic2VydmVkYCB3aWxsIGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UgcGVyIG9ic2VydmFibGUuXHJcbiAqIEF2b2lkcyB1bm5lY2Vzc2FyeSByZWNhbGN1bGF0aW9ucy5cclxuICovXHJcbmZ1bmN0aW9uIHN0YXJ0QmF0Y2goKSB7XHJcbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoKys7XHJcbn1cclxuZnVuY3Rpb24gZW5kQmF0Y2goKSB7XHJcbiAgICBpZiAoLS1nbG9iYWxTdGF0ZS5pbkJhdGNoID09PSAwKSB7XHJcbiAgICAgICAgcnVuUmVhY3Rpb25zKCk7XHJcbiAgICAgICAgLy8gdGhlIGJhdGNoIGlzIGFjdHVhbGx5IGFib3V0IHRvIGZpbmlzaCwgYWxsIHVub2JzZXJ2aW5nIHNob3VsZCBoYXBwZW4gaGVyZS5cclxuICAgICAgICB2YXIgbGlzdCA9IGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9ucztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBsaXN0W2ldO1xyXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKG9ic2VydmFibGUub2JzZXJ2ZXJzLnNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgb2JzZXJ2YWJsZSBoYWQgcmVhY3RpdmUgb2JzZXJ2ZXJzLCB0cmlnZ2VyIHRoZSBob29rc1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5vbkJlY29tZVVub2JzZXJ2ZWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlIGluc3RhbmNlb2YgQ29tcHV0ZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXB1dGVkIHZhbHVlcyBhcmUgYXV0b21hdGljYWxseSB0ZWFyZWQgZG93biB3aGVuIHRoZSBsYXN0IG9ic2VydmVyIGxlYXZlc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcHJvY2VzcyBoYXBwZW5zIHJlY3Vyc2l2ZWx5LCB0aGlzIGNvbXB1dGVkIG1pZ2h0IGJlIHRoZSBsYXN0IG9ic2VydmFiZSBvZiBhbm90aGVyLCBldGMuLlxyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuc3VzcGVuZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9ucyA9IFtdO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlcG9ydE9ic2VydmVkKG9ic2VydmFibGUpIHtcclxuICAgIGNoZWNrSWZTdGF0ZVJlYWRzQXJlQWxsb3dlZChvYnNlcnZhYmxlKTtcclxuICAgIHZhciBkZXJpdmF0aW9uID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xyXG4gICAgaWYgKGRlcml2YXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTaW1wbGUgb3B0aW1pemF0aW9uLCBnaXZlIGVhY2ggZGVyaXZhdGlvbiBydW4gYW4gdW5pcXVlIGlkIChydW5JZClcclxuICAgICAgICAgKiBDaGVjayBpZiBsYXN0IHRpbWUgdGhpcyBvYnNlcnZhYmxlIHdhcyBhY2Nlc3NlZCB0aGUgc2FtZSBydW5JZCBpcyB1c2VkXHJcbiAgICAgICAgICogaWYgdGhpcyBpcyB0aGUgY2FzZSwgdGhlIHJlbGF0aW9uIGlzIGFscmVhZHkga25vd25cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoZGVyaXZhdGlvbi5ydW5JZCAhPT0gb2JzZXJ2YWJsZS5sYXN0QWNjZXNzZWRCeSkge1xyXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5ID0gZGVyaXZhdGlvbi5ydW5JZDtcclxuICAgICAgICAgICAgLy8gVHJpZWQgc3RvcmluZyBuZXdPYnNlcnZpbmcsIG9yIG9ic2VydmluZywgb3IgYm90aCBhcyBTZXQsIGJ1dCBwZXJmb3JtYW5jZSBkaWRuJ3QgY29tZSBjbG9zZS4uLlxyXG4gICAgICAgICAgICBkZXJpdmF0aW9uLm5ld09ic2VydmluZ1tkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnQrK10gPSBvYnNlcnZhYmxlO1xyXG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkKSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLm9uQmVjb21lT2JzZXJ2ZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG9ic2VydmFibGUub2JzZXJ2ZXJzLnNpemUgPT09IDAgJiYgZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDApIHtcclxuICAgICAgICBxdWV1ZUZvclVub2JzZXJ2YXRpb24ob2JzZXJ2YWJsZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLy8gZnVuY3Rpb24gaW52YXJpYW50TE9TKG9ic2VydmFibGU6IElPYnNlcnZhYmxlLCBtc2c6IHN0cmluZykge1xyXG4vLyAgICAgLy8gaXQncyBleHBlbnNpdmUgc28gYmV0dGVyIG5vdCBydW4gaXQgaW4gcHJvZHVjaXRvbi4gYnV0IHRlbXBvcmFyaWx5IGhlbHBmdWwgZm9yIHRlc3RpbmdcclxuLy8gICAgIGNvbnN0IG1pbiA9IGdldE9ic2VydmVycyhvYnNlcnZhYmxlKS5yZWR1Y2UoKGEsIGIpID0+IE1hdGgubWluKGEsIGIuZGVwZW5kZW5jaWVzU3RhdGUpLCAyKVxyXG4vLyAgICAgaWYgKG1pbiA+PSBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUpIHJldHVybiAvLyA8LSB0aGUgb25seSBhc3N1bXB0aW9uIGFib3V0IGBsb3dlc3RPYnNlcnZlclN0YXRlYFxyXG4vLyAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4vLyAgICAgICAgIFwibG93ZXN0T2JzZXJ2ZXJTdGF0ZSBpcyB3cm9uZyBmb3IgXCIgK1xyXG4vLyAgICAgICAgICAgICBtc2cgK1xyXG4vLyAgICAgICAgICAgICBcIiBiZWNhdXNlIFwiICtcclxuLy8gICAgICAgICAgICAgbWluICtcclxuLy8gICAgICAgICAgICAgXCIgPCBcIiArXHJcbi8vICAgICAgICAgICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZVxyXG4vLyAgICAgKVxyXG4vLyB9XHJcbi8qKlxyXG4gKiBOT1RFOiBjdXJyZW50IHByb3BhZ2F0aW9uIG1lY2hhbmlzbSB3aWxsIGluIGNhc2Ugb2Ygc2VsZiByZXJ1bmluZyBhdXRvcnVucyBiZWhhdmUgdW5leHBlY3RlZGx5XHJcbiAqIEl0IHdpbGwgcHJvcGFnYXRlIGNoYW5nZXMgdG8gb2JzZXJ2ZXJzIGZyb20gcHJldmlvdXMgcnVuXHJcbiAqIEl0J3MgaGFyZCBvciBtYXliZSBpbXBvc3NpYmxlICh3aXRoIHJlYXNvbmFibGUgcGVyZikgdG8gZ2V0IGl0IHJpZ2h0IHdpdGggY3VycmVudCBhcHByb2FjaFxyXG4gKiBIb3BlZnVsbHkgc2VsZiByZXJ1bmluZyBhdXRvcnVucyBhcmVuJ3QgYSBmZWF0dXJlIHBlb3BsZSBzaG91bGQgZGVwZW5kIG9uXHJcbiAqIEFsc28gbW9zdCBiYXNpYyB1c2UgY2FzZXMgc2hvdWxkIGJlIG9rXHJcbiAqL1xyXG4vLyBDYWxsZWQgYnkgQXRvbSB3aGVuIGl0cyB2YWx1ZSBjaGFuZ2VzXHJcbmZ1bmN0aW9uIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZSkge1xyXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY2hhbmdlZCBzdGFydFwiKTtcclxuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuU1RBTEUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5TVEFMRTtcclxuICAgIC8vIElkZWFsbHkgd2UgdXNlIGZvci4ub2YgaGVyZSwgYnV0IHRoZSBkb3duY29tcGlsZWQgdmVyc2lvbiBpcyByZWFsbHkgc2xvdy4uLlxyXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEUpIHtcclxuICAgICAgICAgICAgaWYgKGQuaXNUcmFjaW5nICE9PSBUcmFjZU1vZGUuTk9ORSkge1xyXG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGQub25CZWNvbWVTdGFsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5TVEFMRTtcclxuICAgIH0pO1xyXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY2hhbmdlZCBlbmRcIik7XHJcbn1cclxuLy8gQ2FsbGVkIGJ5IENvbXB1dGVkVmFsdWUgd2hlbiBpdCByZWNhbGN1bGF0ZSBhbmQgaXRzIHZhbHVlIGNoYW5nZWRcclxuZnVuY3Rpb24gcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKG9ic2VydmFibGUpIHtcclxuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNvbmZpcm1lZCBzdGFydFwiKTtcclxuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuU1RBTEUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5TVEFMRTtcclxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5QT1NTSUJMWV9TVEFMRSlcclxuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuU1RBTEU7XHJcbiAgICAgICAgZWxzZSBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFIC8vIHRoaXMgaGFwcGVucyBkdXJpbmcgY29tcHV0aW5nIG9mIGBkYCwganVzdCBrZWVwIGxvd2VzdE9ic2VydmVyU3RhdGUgdXAgdG8gZGF0ZS5cclxuICAgICAgICApXHJcbiAgICAgICAgICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcclxuICAgIH0pO1xyXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIGVuZFwiKTtcclxufVxyXG4vLyBVc2VkIGJ5IGNvbXB1dGVkIHdoZW4gaXRzIGRlcGVuZGVuY3kgY2hhbmdlZCwgYnV0IHdlIGRvbid0IHdhbid0IHRvIGltbWVkaWF0ZWx5IHJlY29tcHV0ZS5cclxuZnVuY3Rpb24gcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKG9ic2VydmFibGUpIHtcclxuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcIm1heWJlIHN0YXJ0XCIpO1xyXG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSAhPT0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuUE9TU0lCTFlfU1RBTEU7XHJcbiAgICBvYnNlcnZhYmxlLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xyXG4gICAgICAgICAgICBkLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5QT1NTSUJMWV9TVEFMRTtcclxuICAgICAgICAgICAgaWYgKGQuaXNUcmFjaW5nICE9PSBUcmFjZU1vZGUuTk9ORSkge1xyXG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGQub25CZWNvbWVTdGFsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwibWF5YmUgZW5kXCIpO1xyXG59XHJcbmZ1bmN0aW9uIGxvZ1RyYWNlSW5mbyhkZXJpdmF0aW9uLCBvYnNlcnZhYmxlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlttb2J4LnRyYWNlXSAnXCIgKyBkZXJpdmF0aW9uLm5hbWUgKyBcIicgaXMgaW52YWxpZGF0ZWQgZHVlIHRvIGEgY2hhbmdlIGluOiAnXCIgKyBvYnNlcnZhYmxlLm5hbWUgKyBcIidcIik7XHJcbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmcgPT09IFRyYWNlTW9kZS5CUkVBSykge1xyXG4gICAgICAgIHZhciBsaW5lcyA9IFtdO1xyXG4gICAgICAgIHByaW50RGVwVHJlZShnZXREZXBlbmRlbmN5VHJlZShkZXJpdmF0aW9uKSwgbGluZXMsIDEpO1xyXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gICAgICAgIG5ldyBGdW5jdGlvbihcImRlYnVnZ2VyO1xcbi8qXFxuVHJhY2luZyAnXCIgKyBkZXJpdmF0aW9uLm5hbWUgKyBcIidcXG5cXG5Zb3UgYXJlIGVudGVyaW5nIHRoaXMgYnJlYWsgcG9pbnQgYmVjYXVzZSBkZXJpdmF0aW9uICdcIiArIGRlcml2YXRpb24ubmFtZSArIFwiJyBpcyBiZWluZyB0cmFjZWQgYW5kICdcIiArIG9ic2VydmFibGUubmFtZSArIFwiJyBpcyBub3cgZm9yY2luZyBpdCB0byB1cGRhdGUuXFxuSnVzdCBmb2xsb3cgdGhlIHN0YWNrdHJhY2UgeW91IHNob3VsZCBub3cgc2VlIGluIHRoZSBkZXZ0b29scyB0byBzZWUgcHJlY2lzZWx5IHdoYXQgcGllY2Ugb2YgeW91ciBjb2RlIGlzIGNhdXNpbmcgdGhpcyB1cGRhdGVcXG5UaGUgc3RhY2tmcmFtZSB5b3UgYXJlIGxvb2tpbmcgZm9yIGlzIGF0IGxlYXN0IH42LTggc3RhY2stZnJhbWVzIHVwLlxcblxcblwiICsgKGRlcml2YXRpb24gaW5zdGFuY2VvZiBDb21wdXRlZFZhbHVlID8gZGVyaXZhdGlvbi5kZXJpdmF0aW9uLnRvU3RyaW5nKCkucmVwbGFjZSgvWypdXFwvL2csIFwiL1wiKSA6IFwiXCIpICsgXCJcXG5cXG5UaGUgZGVwZW5kZW5jaWVzIGZvciB0aGlzIGRlcml2YXRpb24gYXJlOlxcblxcblwiICsgbGluZXMuam9pbihcIlxcblwiKSArIFwiXFxuKi9cXG4gICAgXCIpKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcHJpbnREZXBUcmVlKHRyZWUsIGxpbmVzLCBkZXB0aCkge1xyXG4gICAgaWYgKGxpbmVzLmxlbmd0aCA+PSAxMDAwKSB7XHJcbiAgICAgICAgbGluZXMucHVzaChcIihhbmQgbWFueSBtb3JlKVwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsaW5lcy5wdXNoKFwiXCIgKyBuZXcgQXJyYXkoZGVwdGgpLmpvaW4oXCJcXHRcIikgKyB0cmVlLm5hbWUpOyAvLyBNV0U6IG5vdCB0aGUgZmFzdGVzdCwgYnV0IHRoZSBlYXNpZXN0IHdheSA6KVxyXG4gICAgaWYgKHRyZWUuZGVwZW5kZW5jaWVzKVxyXG4gICAgICAgIHRyZWUuZGVwZW5kZW5jaWVzLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBwcmludERlcFRyZWUoY2hpbGQsIGxpbmVzLCBkZXB0aCArIDEpOyB9KTtcclxufVxuXG52YXIgUmVhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWFjdGlvbihuYW1lLCBvbkludmFsaWRhdGUsIGVycm9ySGFuZGxlciwgcmVxdWlyZXNPYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJSZWFjdGlvbkBcIiArIGdldE5leHRJZCgpOyB9XHJcbiAgICAgICAgaWYgKHJlcXVpcmVzT2JzZXJ2YWJsZSA9PT0gdm9pZCAwKSB7IHJlcXVpcmVzT2JzZXJ2YWJsZSA9IGZhbHNlOyB9XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLm9uSW52YWxpZGF0ZSA9IG9uSW52YWxpZGF0ZTtcclxuICAgICAgICB0aGlzLmVycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlcjtcclxuICAgICAgICB0aGlzLnJlcXVpcmVzT2JzZXJ2YWJsZSA9IHJlcXVpcmVzT2JzZXJ2YWJsZTtcclxuICAgICAgICB0aGlzLm9ic2VydmluZyA9IFtdOyAvLyBub2RlcyB3ZSBhcmUgbG9va2luZyBhdC4gT3VyIHZhbHVlIGRlcGVuZHMgb24gdGhlc2Ugbm9kZXNcclxuICAgICAgICB0aGlzLm5ld09ic2VydmluZyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORztcclxuICAgICAgICB0aGlzLmRpZmZWYWx1ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5ydW5JZCA9IDA7XHJcbiAgICAgICAgdGhpcy51bmJvdW5kRGVwc0NvdW50ID0gMDtcclxuICAgICAgICB0aGlzLl9fbWFwaWQgPSBcIiNcIiArIGdldE5leHRJZCgpO1xyXG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lzU2NoZWR1bGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5faXNUcmFja1BlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzVHJhY2luZyA9IFRyYWNlTW9kZS5OT05FO1xyXG4gICAgfVxyXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLm9uQmVjb21lU3RhbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xyXG4gICAgfTtcclxuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzU2NoZWR1bGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzU2NoZWR1bGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9ucy5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICBydW5SZWFjdGlvbnMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLmlzU2NoZWR1bGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NjaGVkdWxlZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIGludGVybmFsLCB1c2Ugc2NoZWR1bGUoKSBpZiB5b3UgaW50ZW5kIHRvIGtpY2sgb2ZmIGEgcmVhY3Rpb25cclxuICAgICAqL1xyXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnJ1blJlYWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0Rpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgICAgICAgICAgdGhpcy5faXNTY2hlZHVsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzVHJhY2tQZW5kaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkludmFsaWRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNUcmFja1BlbmRpbmcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTcHlFbmFibGVkKCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uSW52YWxpZGF0ZSBkaWRuJ3QgdHJpZ2dlciB0cmFjayByaWdodCBhd2F5Li5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3B5UmVwb3J0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2NoZWR1bGVkLXJlYWN0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbihlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmRCYXRjaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUudHJhY2sgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiUmVhY3Rpb24gYWxyZWFkeSBkaXNwb3NlZFwiKSAvLyBOb3RlOiBOb3QgYSB3YXJuaW5nIC8gZXJyb3IgaW4gbW9ieCA0IGVpdGhlclxyXG4gICAgICAgIH1cclxuICAgICAgICBzdGFydEJhdGNoKCk7XHJcbiAgICAgICAgdmFyIG5vdGlmeSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgIHZhciBzdGFydFRpbWU7XHJcbiAgICAgICAgaWYgKG5vdGlmeSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZWFjdGlvblwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0cmFja0Rlcml2ZWRGdW5jdGlvbih0aGlzLCBmbiwgdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pc1RyYWNrUGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgLy8gZGlzcG9zZWQgZHVyaW5nIGxhc3QgcnVuLiBDbGVhbiB1cCBldmVyeXRoaW5nIHRoYXQgd2FzIGJvdW5kIGFmdGVyIHRoZSBkaXNwb3NlIGNhbGwuXHJcbiAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzdWx0KSlcclxuICAgICAgICAgICAgdGhpcy5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb24ocmVzdWx0LmNhdXNlKTtcclxuICAgICAgICBpZiAobm90aWZ5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICBzcHlSZXBvcnRFbmQoe1xyXG4gICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZW5kQmF0Y2goKTtcclxuICAgIH07XHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUucmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5lcnJvckhhbmRsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIoZXJyb3IsIHRoaXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzKVxyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB2YXIgbWVzc2FnZSA9IFwiW21vYnhdIEVuY291bnRlcmVkIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbiB0aGF0IHdhcyB0aHJvd24gYnkgYSByZWFjdGlvbiBvciBvYnNlcnZlciBjb21wb25lbnQsIGluOiAnXCIgKyB0aGlzICsgXCInXCI7XHJcbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIChlcnJvciBpbiByZWFjdGlvbiAnXCIgKyB0aGlzLm5hbWUgKyBcIicgc3VwcHJlc3NlZCwgZml4IGVycm9yIG9mIGNhdXNpbmcgYWN0aW9uIGJlbG93KVwiKTsgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGVycm9yKTtcclxuICAgICAgICAgICAgLyoqIElmIGRlYnVnZ2luZyBicm91Z2h0IHlvdSBoZXJlLCBwbGVhc2UsIHJlYWQgdGhlIGFib3ZlIG1lc3NhZ2UgOi0pLiBUbnghICovXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1NweUVuYWJsZWQoKSkge1xyXG4gICAgICAgICAgICBzcHlSZXBvcnQoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIGVycm9yOiBcIlwiICsgZXJyb3JcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7IHJldHVybiBmKGVycm9yLCBfdGhpcyk7IH0pO1xyXG4gICAgfTtcclxuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0Rpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBkaXNwb3NlZCB3aGlsZSBydW5uaW5nLCBjbGVhbiB1cCBsYXRlci4gTWF5YmUgbm90IG9wdGltYWwsIGJ1dCByYXJlIGNhc2VcclxuICAgICAgICAgICAgICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgICAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUuZ2V0RGlzcG9zZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHIgPSB0aGlzLmRpc3Bvc2UuYmluZCh0aGlzKTtcclxuICAgICAgICByWyRtb2J4XSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBcIlJlYWN0aW9uW1wiICsgdGhpcy5uYW1lICsgXCJdXCI7XHJcbiAgICB9O1xyXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnRyYWNlID0gZnVuY3Rpb24gKGVudGVyQnJlYWtQb2ludCkge1xyXG4gICAgICAgIGlmIChlbnRlckJyZWFrUG9pbnQgPT09IHZvaWQgMCkgeyBlbnRlckJyZWFrUG9pbnQgPSBmYWxzZTsgfVxyXG4gICAgICAgIHRyYWNlKHRoaXMsIGVudGVyQnJlYWtQb2ludCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlYWN0aW9uO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBvblJlYWN0aW9uRXJyb3IoaGFuZGxlcikge1xyXG4gICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpZHggPSBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICBpZiAoaWR4ID49IDApXHJcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIE1hZ2ljIG51bWJlciBhbGVydCFcclxuICogRGVmaW5lcyB3aXRoaW4gaG93IG1hbnkgdGltZXMgYSByZWFjdGlvbiBpcyBhbGxvd2VkIHRvIHJlLXRyaWdnZXIgaXRzZWxmXHJcbiAqIHVudGlsIGl0IGlzIGFzc3VtZWQgdGhhdCB0aGlzIGlzIGdvbm5hIGJlIGEgbmV2ZXIgZW5kaW5nIGxvb3AuLi5cclxuICovXHJcbnZhciBNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUyA9IDEwMDtcclxudmFyIHJlYWN0aW9uU2NoZWR1bGVyID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYoKTsgfTtcclxuZnVuY3Rpb24gcnVuUmVhY3Rpb25zKCkge1xyXG4gICAgLy8gVHJhbXBvbGluaW5nLCBpZiBydW5SZWFjdGlvbnMgYXJlIGFscmVhZHkgcnVubmluZywgbmV3IHJlYWN0aW9ucyB3aWxsIGJlIHBpY2tlZCB1cFxyXG4gICAgaWYgKGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwIHx8IGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9ucylcclxuICAgICAgICByZXR1cm47XHJcbiAgICByZWFjdGlvblNjaGVkdWxlcihydW5SZWFjdGlvbnNIZWxwZXIpO1xyXG59XHJcbmZ1bmN0aW9uIHJ1blJlYWN0aW9uc0hlbHBlcigpIHtcclxuICAgIGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9ucyA9IHRydWU7XHJcbiAgICB2YXIgYWxsUmVhY3Rpb25zID0gZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9ucztcclxuICAgIHZhciBpdGVyYXRpb25zID0gMDtcclxuICAgIC8vIFdoaWxlIHJ1bm5pbmcgcmVhY3Rpb25zLCBuZXcgcmVhY3Rpb25zIG1pZ2h0IGJlIHRyaWdnZXJlZC5cclxuICAgIC8vIEhlbmNlIHdlIHdvcmsgd2l0aCB0d28gdmFyaWFibGVzIGFuZCBjaGVjayB3aGV0aGVyXHJcbiAgICAvLyB3ZSBjb252ZXJnZSB0byBubyByZW1haW5pbmcgcmVhY3Rpb25zIGFmdGVyIGEgd2hpbGUuXHJcbiAgICB3aGlsZSAoYWxsUmVhY3Rpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBpZiAoKytpdGVyYXRpb25zID09PSBNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUmVhY3Rpb24gZG9lc24ndCBjb252ZXJnZSB0byBhIHN0YWJsZSBzdGF0ZSBhZnRlciBcIiArIE1BWF9SRUFDVElPTl9JVEVSQVRJT05TICsgXCIgaXRlcmF0aW9ucy5cIiArXHJcbiAgICAgICAgICAgICAgICAoXCIgUHJvYmFibHkgdGhlcmUgaXMgYSBjeWNsZSBpbiB0aGUgcmVhY3RpdmUgZnVuY3Rpb246IFwiICsgYWxsUmVhY3Rpb25zWzBdKSk7XHJcbiAgICAgICAgICAgIGFsbFJlYWN0aW9ucy5zcGxpY2UoMCk7IC8vIGNsZWFyIHJlYWN0aW9uc1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVtYWluaW5nUmVhY3Rpb25zID0gYWxsUmVhY3Rpb25zLnNwbGljZSgwKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJlbWFpbmluZ1JlYWN0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspXHJcbiAgICAgICAgICAgIHJlbWFpbmluZ1JlYWN0aW9uc1tpXS5ydW5SZWFjdGlvbigpO1xyXG4gICAgfVxyXG4gICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zID0gZmFsc2U7XHJcbn1cclxudmFyIGlzUmVhY3Rpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiUmVhY3Rpb25cIiwgUmVhY3Rpb24pO1xyXG5mdW5jdGlvbiBzZXRSZWFjdGlvblNjaGVkdWxlcihmbikge1xyXG4gICAgdmFyIGJhc2VTY2hlZHVsZXIgPSByZWFjdGlvblNjaGVkdWxlcjtcclxuICAgIHJlYWN0aW9uU2NoZWR1bGVyID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGZuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VTY2hlZHVsZXIoZik7IH0pOyB9O1xyXG59XG5cbmZ1bmN0aW9uIGlzU3B5RW5hYmxlZCgpIHtcclxuICAgIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgISFnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMubGVuZ3RoO1xyXG59XHJcbmZ1bmN0aW9uIHNweVJlcG9ydChldmVudCkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICByZXR1cm47IC8vIGRlYWQgY29kZSBlbGltaW5hdGlvbiBjYW4gZG8gdGhlIHJlc3RcclxuICAgIGlmICghZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmxlbmd0aClcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgbGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKVxyXG4gICAgICAgIGxpc3RlbmVyc1tpXShldmVudCk7XHJcbn1cclxuZnVuY3Rpb24gc3B5UmVwb3J0U3RhcnQoZXZlbnQpIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIGNoYW5nZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudCksIHsgc3B5UmVwb3J0U3RhcnQ6IHRydWUgfSk7XHJcbiAgICBzcHlSZXBvcnQoY2hhbmdlKTtcclxufVxyXG52YXIgRU5EX0VWRU5UID0geyBzcHlSZXBvcnRFbmQ6IHRydWUgfTtcclxuZnVuY3Rpb24gc3B5UmVwb3J0RW5kKGNoYW5nZSkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAoY2hhbmdlKVxyXG4gICAgICAgIHNweVJlcG9ydChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2hhbmdlKSwgeyBzcHlSZXBvcnRFbmQ6IHRydWUgfSkpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHNweVJlcG9ydChFTkRfRVZFTlQpO1xyXG59XHJcbmZ1bmN0aW9uIHNweShsaXN0ZW5lcikge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4LnNweV0gSXMgYSBuby1vcCBpbiBwcm9kdWN0aW9uIGJ1aWxkc1wiKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgICAgIHJldHVybiBvbmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobCkgeyByZXR1cm4gbCAhPT0gbGlzdGVuZXI7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGRvbnRSZWFzc2lnbkZpZWxkcygpIHtcclxuICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQGFjdGlvbiBmaWVsZHMgYXJlIG5vdCByZWFzc2lnbmFibGVcIik7XHJcbn1cclxuZnVuY3Rpb24gbmFtZWRBY3Rpb25EZWNvcmF0b3IobmFtZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3AsIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGRlc2NyaXB0b3IuZ2V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKFwiQGFjdGlvbiBjYW5ub3QgYmUgdXNlZCB3aXRoIGdldHRlcnNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYmFiZWwgLyB0eXBlc2NyaXB0XHJcbiAgICAgICAgICAgIC8vIEBhY3Rpb24gbWV0aG9kKCkgeyB9XHJcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0eXBlc2NyaXB0XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjcmVhdGVBY3Rpb24obmFtZSwgZGVzY3JpcHRvci52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlIC8vIGZvciB0eXBlc2NyaXB0LCB0aGlzIG11c3QgYmUgd3JpdGFibGUsIG90aGVyd2lzZSBpdCBjYW5ub3QgaW5oZXJpdCA6LyAoc2VlIGluaGVyaXRhYmxlIGFjdGlvbnMgdGVzdClcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYmFiZWwgb25seTogQGFjdGlvbiBtZXRob2QgPSAoKSA9PiB7fVxyXG4gICAgICAgICAgICB2YXIgaW5pdGlhbGl6ZXJfMSA9IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXI7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBOLkI6IHdlIGNhbid0IGltbWVkaWF0ZWx5IGludm9rZSBpbml0aWFsaXplcjsgdGhpcyB3b3VsZCBiZSB3cm9uZ1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVBY3Rpb24obmFtZSwgaW5pdGlhbGl6ZXJfMS5jYWxsKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYm91bmQgaW5zdGFuY2UgbWV0aG9kc1xyXG4gICAgICAgIHJldHVybiBhY3Rpb25GaWVsZERlY29yYXRvcihuYW1lKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBhY3Rpb25GaWVsZERlY29yYXRvcihuYW1lKSB7XHJcbiAgICAvLyBTaW1wbGUgcHJvcGVydHkgdGhhdCB3cml0ZXMgb24gZmlyc3QgaW52b2NhdGlvbiB0byB0aGUgY3VycmVudCBpbnN0YW5jZVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3AsIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGFkZEhpZGRlblByb3AodGhpcywgcHJvcCwgYWN0aW9uKG5hbWUsIHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gYm91bmRBY3Rpb25EZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IsIGFwcGx5VG9JbnN0YW5jZSkge1xyXG4gICAgaWYgKGFwcGx5VG9JbnN0YW5jZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGRlZmluZUJvdW5kQWN0aW9uKHRhcmdldCwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLnZhbHVlKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGlmIChkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgLy8gaWYgKGRlc2NyaXB0b3IudmFsdWUpXHJcbiAgICAgICAgLy8gVHlwZXNjcmlwdCAvIEJhYmVsOiBAYWN0aW9uLmJvdW5kIG1ldGhvZCgpIHsgfVxyXG4gICAgICAgIC8vIGFsc286IGJhYmVsIEBhY3Rpb24uYm91bmQgbWV0aG9kID0gKCkgPT4ge31cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGRlZmluZUJvdW5kQWN0aW9uKHRoaXMsIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvci52YWx1ZSB8fCBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBkb250UmVhc3NpZ25GaWVsZHNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8gZmllbGQgZGVjb3JhdG9yIFR5cGVzY3JpcHQgQGFjdGlvbi5ib3VuZCBtZXRob2QgPSAoKSA9PiB7fVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICBkZWZpbmVCb3VuZEFjdGlvbih0aGlzLCBwcm9wZXJ0eU5hbWUsIHYpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxuXG52YXIgYWN0aW9uID0gZnVuY3Rpb24gYWN0aW9uKGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQpIHtcclxuICAgIC8vIGFjdGlvbihmbigpIHt9KVxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZzEgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICByZXR1cm4gY3JlYXRlQWN0aW9uKGFyZzEubmFtZSB8fCBcIjx1bm5hbWVkIGFjdGlvbj5cIiwgYXJnMSk7XHJcbiAgICAvLyBhY3Rpb24oXCJuYW1lXCIsIGZuKCkge30pXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgYXJnMiA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIHJldHVybiBjcmVhdGVBY3Rpb24oYXJnMSwgYXJnMik7XHJcbiAgICAvLyBAYWN0aW9uKFwibmFtZVwiKSBmbigpIHt9XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnMSA9PT0gXCJzdHJpbmdcIilcclxuICAgICAgICByZXR1cm4gbmFtZWRBY3Rpb25EZWNvcmF0b3IoYXJnMSk7XHJcbiAgICAvLyBAYWN0aW9uIGZuKCkge31cclxuICAgIGlmIChhcmc0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgLy8gYXBwbHkgdG8gaW5zdGFuY2UgaW1tZWRpYXRlbHlcclxuICAgICAgICBhZGRIaWRkZW5Qcm9wKGFyZzEsIGFyZzIsIGNyZWF0ZUFjdGlvbihhcmcxLm5hbWUgfHwgYXJnMiwgYXJnMy52YWx1ZSwgdGhpcykpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5hbWVkQWN0aW9uRGVjb3JhdG9yKGFyZzIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcbn07XHJcbmFjdGlvbi5ib3VuZCA9IGJvdW5kQWN0aW9uRGVjb3JhdG9yO1xyXG5mdW5jdGlvbiBydW5JbkFjdGlvbihhcmcxLCBhcmcyKSB7XHJcbiAgICB2YXIgYWN0aW9uTmFtZSA9IHR5cGVvZiBhcmcxID09PSBcInN0cmluZ1wiID8gYXJnMSA6IGFyZzEubmFtZSB8fCBcIjx1bm5hbWVkIGFjdGlvbj5cIjtcclxuICAgIHZhciBmbiA9IHR5cGVvZiBhcmcxID09PSBcImZ1bmN0aW9uXCIgPyBhcmcxIDogYXJnMjtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgJiYgZm4ubGVuZ3RoID09PSAwLCBcImBydW5JbkFjdGlvbmAgZXhwZWN0cyBhIGZ1bmN0aW9uIHdpdGhvdXQgYXJndW1lbnRzXCIpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uTmFtZSAhPT0gXCJzdHJpbmdcIiB8fCAhYWN0aW9uTmFtZSlcclxuICAgICAgICAgICAgZmFpbChcImFjdGlvbnMgc2hvdWxkIGhhdmUgdmFsaWQgbmFtZXMsIGdvdDogJ1wiICsgYWN0aW9uTmFtZSArIFwiJ1wiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBleGVjdXRlQWN0aW9uKGFjdGlvbk5hbWUsIGZuLCB0aGlzLCB1bmRlZmluZWQpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQWN0aW9uKHRoaW5nKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpbmcuaXNNb2J4QWN0aW9uID09PSB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGRlZmluZUJvdW5kQWN0aW9uKHRhcmdldCwgcHJvcGVydHlOYW1lLCBmbikge1xyXG4gICAgYWRkSGlkZGVuUHJvcCh0YXJnZXQsIHByb3BlcnR5TmFtZSwgY3JlYXRlQWN0aW9uKHByb3BlcnR5TmFtZSwgZm4uYmluZCh0YXJnZXQpKSk7XHJcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuYW1lZCByZWFjdGl2ZSB2aWV3IGFuZCBrZWVwcyBpdCBhbGl2ZSwgc28gdGhhdCB0aGUgdmlldyBpcyBhbHdheXNcclxuICogdXBkYXRlZCBpZiBvbmUgb2YgdGhlIGRlcGVuZGVuY2llcyBjaGFuZ2VzLCBldmVuIHdoZW4gdGhlIHZpZXcgaXMgbm90IGZ1cnRoZXIgdXNlZCBieSBzb21ldGhpbmcgZWxzZS5cclxuICogQHBhcmFtIHZpZXcgVGhlIHJlYWN0aXZlIHZpZXdcclxuICogQHJldHVybnMgZGlzcG9zZXIgZnVuY3Rpb24sIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHN0b3AgdGhlIHZpZXcgZnJvbSBiZWluZyB1cGRhdGVkIGluIHRoZSBmdXR1cmUuXHJcbiAqL1xyXG5mdW5jdGlvbiBhdXRvcnVuKHZpZXcsIG9wdHMpIHtcclxuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IEVNUFRZX09CSkVDVDsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgdmlldyA9PT0gXCJmdW5jdGlvblwiLCBcIkF1dG9ydW4gZXhwZWN0cyBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XCIpO1xyXG4gICAgICAgIGludmFyaWFudChpc0FjdGlvbih2aWV3KSA9PT0gZmFsc2UsIFwiQXV0b3J1biBkb2VzIG5vdCBhY2NlcHQgYWN0aW9ucyBzaW5jZSBhY3Rpb25zIGFyZSB1bnRyYWNrYWJsZVwiKTtcclxuICAgIH1cclxuICAgIHZhciBuYW1lID0gKG9wdHMgJiYgb3B0cy5uYW1lKSB8fCB2aWV3Lm5hbWUgfHwgXCJBdXRvcnVuQFwiICsgZ2V0TmV4dElkKCk7XHJcbiAgICB2YXIgcnVuU3luYyA9ICFvcHRzLnNjaGVkdWxlciAmJiAhb3B0cy5kZWxheTtcclxuICAgIHZhciByZWFjdGlvbjtcclxuICAgIGlmIChydW5TeW5jKSB7XHJcbiAgICAgICAgLy8gbm9ybWFsIGF1dG9ydW5cclxuICAgICAgICByZWFjdGlvbiA9IG5ldyBSZWFjdGlvbihuYW1lLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhY2socmVhY3Rpb25SdW5uZXIpO1xyXG4gICAgICAgIH0sIG9wdHMub25FcnJvciwgb3B0cy5yZXF1aXJlc09ic2VydmFibGUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHNjaGVkdWxlcl8xID0gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0cyk7XHJcbiAgICAgICAgLy8gZGVib3VuY2VkIGF1dG9ydW5cclxuICAgICAgICB2YXIgaXNTY2hlZHVsZWRfMSA9IGZhbHNlO1xyXG4gICAgICAgIHJlYWN0aW9uID0gbmV3IFJlYWN0aW9uKG5hbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1NjaGVkdWxlZF8xKSB7XHJcbiAgICAgICAgICAgICAgICBpc1NjaGVkdWxlZF8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHNjaGVkdWxlcl8xKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1NjaGVkdWxlZF8xID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWFjdGlvbi5pc0Rpc3Bvc2VkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFjdGlvbi50cmFjayhyZWFjdGlvblJ1bm5lcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdHMub25FcnJvciwgb3B0cy5yZXF1aXJlc09ic2VydmFibGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVhY3Rpb25SdW5uZXIoKSB7XHJcbiAgICAgICAgdmlldyhyZWFjdGlvbik7XHJcbiAgICB9XHJcbiAgICByZWFjdGlvbi5zY2hlZHVsZSgpO1xyXG4gICAgcmV0dXJuIHJlYWN0aW9uLmdldERpc3Bvc2VyKCk7XHJcbn1cclxudmFyIHJ1biA9IGZ1bmN0aW9uIChmKSB7IHJldHVybiBmKCk7IH07XHJcbmZ1bmN0aW9uIGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHMpIHtcclxuICAgIHJldHVybiBvcHRzLnNjaGVkdWxlclxyXG4gICAgICAgID8gb3B0cy5zY2hlZHVsZXJcclxuICAgICAgICA6IG9wdHMuZGVsYXlcclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZikgeyByZXR1cm4gc2V0VGltZW91dChmLCBvcHRzLmRlbGF5KTsgfVxyXG4gICAgICAgICAgICA6IHJ1bjtcclxufVxyXG5mdW5jdGlvbiByZWFjdGlvbihleHByZXNzaW9uLCBlZmZlY3QsIG9wdHMpIHtcclxuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IEVNUFRZX09CSkVDVDsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gXCJmdW5jdGlvblwiLCBcIkZpcnN0IGFyZ3VtZW50IHRvIHJlYWN0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgICAgIGludmFyaWFudCh0eXBlb2Ygb3B0cyA9PT0gXCJvYmplY3RcIiwgXCJUaGlyZCBhcmd1bWVudCBvZiByZWFjdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdFwiKTtcclxuICAgIH1cclxuICAgIHZhciBuYW1lID0gb3B0cy5uYW1lIHx8IFwiUmVhY3Rpb25AXCIgKyBnZXROZXh0SWQoKTtcclxuICAgIHZhciBlZmZlY3RBY3Rpb24gPSBhY3Rpb24obmFtZSwgb3B0cy5vbkVycm9yID8gd3JhcEVycm9ySGFuZGxlcihvcHRzLm9uRXJyb3IsIGVmZmVjdCkgOiBlZmZlY3QpO1xyXG4gICAgdmFyIHJ1blN5bmMgPSAhb3B0cy5zY2hlZHVsZXIgJiYgIW9wdHMuZGVsYXk7XHJcbiAgICB2YXIgc2NoZWR1bGVyID0gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0cyk7XHJcbiAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcclxuICAgIHZhciBpc1NjaGVkdWxlZCA9IGZhbHNlO1xyXG4gICAgdmFyIHZhbHVlO1xyXG4gICAgdmFyIGVxdWFscyA9IG9wdHMuY29tcGFyZVN0cnVjdHVyYWxcclxuICAgICAgICA/IGNvbXBhcmVyLnN0cnVjdHVyYWxcclxuICAgICAgICA6IG9wdHMuZXF1YWxzIHx8IGNvbXBhcmVyLmRlZmF1bHQ7XHJcbiAgICB2YXIgciA9IG5ldyBSZWFjdGlvbihuYW1lLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGZpcnN0VGltZSB8fCBydW5TeW5jKSB7XHJcbiAgICAgICAgICAgIHJlYWN0aW9uUnVubmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFpc1NjaGVkdWxlZCkge1xyXG4gICAgICAgICAgICBpc1NjaGVkdWxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNjaGVkdWxlcihyZWFjdGlvblJ1bm5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgb3B0cy5vbkVycm9yLCBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZSk7XHJcbiAgICBmdW5jdGlvbiByZWFjdGlvblJ1bm5lcigpIHtcclxuICAgICAgICBpc1NjaGVkdWxlZCA9IGZhbHNlOyAvLyBROiBtb3ZlIGludG8gcmVhY3Rpb24gcnVubmVyP1xyXG4gICAgICAgIGlmIChyLmlzRGlzcG9zZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgIHIudHJhY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gZXhwcmVzc2lvbihyKTtcclxuICAgICAgICAgICAgY2hhbmdlZCA9IGZpcnN0VGltZSB8fCAhZXF1YWxzKHZhbHVlLCBuZXh0VmFsdWUpO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZmlyc3RUaW1lICYmIG9wdHMuZmlyZUltbWVkaWF0ZWx5KVxyXG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24odmFsdWUsIHIpO1xyXG4gICAgICAgIGlmICghZmlyc3RUaW1lICYmIGNoYW5nZWQgPT09IHRydWUpXHJcbiAgICAgICAgICAgIGVmZmVjdEFjdGlvbih2YWx1ZSwgcik7XHJcbiAgICAgICAgaWYgKGZpcnN0VGltZSlcclxuICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByLnNjaGVkdWxlKCk7XHJcbiAgICByZXR1cm4gci5nZXREaXNwb3NlcigpO1xyXG59XHJcbmZ1bmN0aW9uIHdyYXBFcnJvckhhbmRsZXIoZXJyb3JIYW5kbGVyLCBiYXNlRm4pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGJhc2VGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBlcnJvckhhbmRsZXIuY2FsbCh0aGlzLCBlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIG9uQmVjb21lT2JzZXJ2ZWQodGhpbmcsIGFyZzIsIGFyZzMpIHtcclxuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKFwib25CZWNvbWVPYnNlcnZlZFwiLCB0aGluZywgYXJnMiwgYXJnMyk7XHJcbn1cclxuZnVuY3Rpb24gb25CZWNvbWVVbm9ic2VydmVkKHRoaW5nLCBhcmcyLCBhcmczKSB7XHJcbiAgICByZXR1cm4gaW50ZXJjZXB0SG9vayhcIm9uQmVjb21lVW5vYnNlcnZlZFwiLCB0aGluZywgYXJnMiwgYXJnMyk7XHJcbn1cclxuZnVuY3Rpb24gaW50ZXJjZXB0SG9vayhob29rLCB0aGluZywgYXJnMiwgYXJnMykge1xyXG4gICAgdmFyIGF0b20gPSB0eXBlb2YgYXJnMyA9PT0gXCJmdW5jdGlvblwiID8gZ2V0QXRvbSh0aGluZywgYXJnMikgOiBnZXRBdG9tKHRoaW5nKTtcclxuICAgIHZhciBjYiA9IHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBhcmczIDogYXJnMjtcclxuICAgIHZhciBsaXN0ZW5lcnNLZXkgPSBob29rICsgXCJMaXN0ZW5lcnNcIjtcclxuICAgIGlmIChhdG9tW2xpc3RlbmVyc0tleV0pIHtcclxuICAgICAgICBhdG9tW2xpc3RlbmVyc0tleV0uYWRkKGNiKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGF0b21bbGlzdGVuZXJzS2V5XSA9IG5ldyBTZXQoW2NiXSk7XHJcbiAgICB9XHJcbiAgICB2YXIgb3JpZyA9IGF0b21baG9va107XHJcbiAgICBpZiAodHlwZW9mIG9yaWcgIT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJOb3QgYW4gYXRvbSB0aGF0IGNhbiBiZSAodW4pb2JzZXJ2ZWRcIik7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBob29rTGlzdGVuZXJzID0gYXRvbVtsaXN0ZW5lcnNLZXldO1xyXG4gICAgICAgIGlmIChob29rTGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGhvb2tMaXN0ZW5lcnMuZGVsZXRlKGNiKTtcclxuICAgICAgICAgICAgaWYgKGhvb2tMaXN0ZW5lcnMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGF0b21bbGlzdGVuZXJzS2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cblxuZnVuY3Rpb24gY29uZmlndXJlKG9wdGlvbnMpIHtcclxuICAgIHZhciBlbmZvcmNlQWN0aW9ucyA9IG9wdGlvbnMuZW5mb3JjZUFjdGlvbnMsIGNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiA9IG9wdGlvbnMuY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uLCBjb21wdXRlZENvbmZpZ3VyYWJsZSA9IG9wdGlvbnMuY29tcHV0ZWRDb25maWd1cmFibGUsIGRpc2FibGVFcnJvckJvdW5kYXJpZXMgPSBvcHRpb25zLmRpc2FibGVFcnJvckJvdW5kYXJpZXMsIHJlYWN0aW9uU2NoZWR1bGVyID0gb3B0aW9ucy5yZWFjdGlvblNjaGVkdWxlciwgcmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUgPSBvcHRpb25zLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlLCBvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiA9IG9wdGlvbnMub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb247XHJcbiAgICBpZiAob3B0aW9ucy5pc29sYXRlR2xvYmFsU3RhdGUgPT09IHRydWUpIHtcclxuICAgICAgICBpc29sYXRlR2xvYmFsU3RhdGUoKTtcclxuICAgIH1cclxuICAgIGlmIChlbmZvcmNlQWN0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmZvcmNlQWN0aW9ucyA9PT0gXCJib29sZWFuXCIgfHwgZW5mb3JjZUFjdGlvbnMgPT09IFwic3RyaWN0XCIpXHJcbiAgICAgICAgICAgIGRlcHJlY2F0ZWQoXCJEZXByZWNhdGVkIHZhbHVlIGZvciAnZW5mb3JjZUFjdGlvbnMnLCB1c2UgJ2ZhbHNlJyA9PiAnXFxcIm5ldmVyXFxcIicsICd0cnVlJyA9PiAnXFxcIm9ic2VydmVkXFxcIicsICdcXFwic3RyaWN0XFxcIicgPT4gXFxcIidhbHdheXMnXFxcIiBpbnN0ZWFkXCIpO1xyXG4gICAgICAgIHZhciBlYSA9IHZvaWQgMDtcclxuICAgICAgICBzd2l0Y2ggKGVuZm9yY2VBY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIGNhc2UgdHJ1ZTpcclxuICAgICAgICAgICAgY2FzZSBcIm9ic2VydmVkXCI6XHJcbiAgICAgICAgICAgICAgICBlYSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBmYWxzZTpcclxuICAgICAgICAgICAgY2FzZSBcIm5ldmVyXCI6XHJcbiAgICAgICAgICAgICAgICBlYSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpY3RcIjpcclxuICAgICAgICAgICAgY2FzZSBcImFsd2F5c1wiOlxyXG4gICAgICAgICAgICAgICAgZWEgPSBcInN0cmljdFwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBmYWlsKFwiSW52YWxpZCB2YWx1ZSBmb3IgJ2VuZm9yY2VBY3Rpb25zJzogJ1wiICsgZW5mb3JjZUFjdGlvbnMgKyBcIicsIGV4cGVjdGVkICduZXZlcicsICdhbHdheXMnIG9yICdvYnNlcnZlZCdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID0gZWE7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBlYSA9PT0gdHJ1ZSB8fCBlYSA9PT0gXCJzdHJpY3RcIiA/IGZhbHNlIDogdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiA9ICEhY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBnbG9iYWxTdGF0ZS5yZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZSA9ICEhcmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGU7XHJcbiAgICB9XHJcbiAgICBpZiAob2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uID0gISFvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbjtcclxuICAgICAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgPSAhZ2xvYmFsU3RhdGUub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb247XHJcbiAgICB9XHJcbiAgICBpZiAoY29tcHV0ZWRDb25maWd1cmFibGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGdsb2JhbFN0YXRlLmNvbXB1dGVkQ29uZmlndXJhYmxlID0gISFjb21wdXRlZENvbmZpZ3VyYWJsZTtcclxuICAgIH1cclxuICAgIGlmIChkaXNhYmxlRXJyb3JCb3VuZGFyaWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSlcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiV0FSTklORzogRGVidWcgZmVhdHVyZSBvbmx5LiBNb2JYIHdpbGwgTk9UIHJlY292ZXIgZnJvbSBlcnJvcnMgd2hlbiBgZGlzYWJsZUVycm9yQm91bmRhcmllc2AgaXMgZW5hYmxlZC5cIik7XHJcbiAgICAgICAgZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9ICEhZGlzYWJsZUVycm9yQm91bmRhcmllcztcclxuICAgIH1cclxuICAgIGlmIChyZWFjdGlvblNjaGVkdWxlcikge1xyXG4gICAgICAgIHNldFJlYWN0aW9uU2NoZWR1bGVyKHJlYWN0aW9uU2NoZWR1bGVyKTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZSh0aGluZywgZGVjb3JhdG9ycykge1xyXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgaW52YXJpYW50KGlzUGxhaW5PYmplY3QoZGVjb3JhdG9ycyksIFwiRGVjb3JhdG9ycyBzaG91bGQgYmUgYSBrZXkgdmFsdWUgbWFwXCIpO1xyXG4gICAgdmFyIHRhcmdldCA9IHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiID8gdGhpbmcucHJvdG90eXBlIDogdGhpbmc7XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgdmFyIHByb3BlcnR5RGVjb3JhdG9ycyA9IGRlY29yYXRvcnNbcHJvcF07XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BlcnR5RGVjb3JhdG9ycykpIHtcclxuICAgICAgICAgICAgcHJvcGVydHlEZWNvcmF0b3JzID0gW3Byb3BlcnR5RGVjb3JhdG9yc107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBpbnZhcmlhbnQocHJvcGVydHlEZWNvcmF0b3JzLmV2ZXJ5KGZ1bmN0aW9uIChkZWNvcmF0b3IpIHsgcmV0dXJuIHR5cGVvZiBkZWNvcmF0b3IgPT09IFwiZnVuY3Rpb25cIjsgfSksIFwiRGVjb3JhdGU6IGV4cGVjdGVkIGEgZGVjb3JhdG9yIGZ1bmN0aW9uIG9yIGFycmF5IG9mIGRlY29yYXRvciBmdW5jdGlvbnMgZm9yICdcIiArIHByb3AgKyBcIidcIik7XHJcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCk7XHJcbiAgICAgICAgdmFyIG5ld0Rlc2NyaXB0b3IgPSBwcm9wZXJ0eURlY29yYXRvcnMucmVkdWNlKGZ1bmN0aW9uIChhY2NEZXNjcmlwdG9yLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3AsIGFjY0Rlc2NyaXB0b3IpOyB9LCBkZXNjcmlwdG9yKTtcclxuICAgICAgICBpZiAobmV3RGVzY3JpcHRvcilcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcCwgbmV3RGVzY3JpcHRvcik7XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgcHJvcCBpbiBkZWNvcmF0b3JzKSB7XHJcbiAgICAgICAgX2xvb3BfMShwcm9wKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGluZztcclxufVxuXG5mdW5jdGlvbiBleHRlbmRPYnNlcnZhYmxlKHRhcmdldCwgcHJvcGVydGllcywgZGVjb3JhdG9ycywgb3B0aW9ucykge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIGludmFyaWFudChhcmd1bWVudHMubGVuZ3RoID49IDIgJiYgYXJndW1lbnRzLmxlbmd0aCA8PSA0LCBcIidleHRlbmRPYnNlcnZhYmxlJyBleHBlY3RlZCAyLTQgYXJndW1lbnRzXCIpO1xyXG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgdGFyZ2V0ID09PSBcIm9iamVjdFwiLCBcIidleHRlbmRPYnNlcnZhYmxlJyBleHBlY3RzIGFuIG9iamVjdCBhcyBmaXJzdCBhcmd1bWVudFwiKTtcclxuICAgICAgICBpbnZhcmlhbnQoIWlzT2JzZXJ2YWJsZU1hcCh0YXJnZXQpLCBcIidleHRlbmRPYnNlcnZhYmxlJyBzaG91bGQgbm90IGJlIHVzZWQgb24gbWFwcywgdXNlIG1hcC5tZXJnZSBpbnN0ZWFkXCIpO1xyXG4gICAgfVxyXG4gICAgb3B0aW9ucyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICB2YXIgZGVmYXVsdERlY29yYXRvciA9IGdldERlZmF1bHREZWNvcmF0b3JGcm9tT2JqZWN0T3B0aW9ucyhvcHRpb25zKTtcclxuICAgIGluaXRpYWxpemVJbnN0YW5jZSh0YXJnZXQpOyAvLyBGaXhlcyAjMTc0MFxyXG4gICAgYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucy5uYW1lLCBkZWZhdWx0RGVjb3JhdG9yLmVuaGFuY2VyKTsgLy8gbWFrZSBzdXJlIG9iamVjdCBpcyBvYnNlcnZhYmxlLCBldmVuIHdpdGhvdXQgaW5pdGlhbCBwcm9wc1xyXG4gICAgaWYgKHByb3BlcnRpZXMpXHJcbiAgICAgICAgZXh0ZW5kT2JzZXJ2YWJsZU9iamVjdFdpdGhQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcGVydGllcywgZGVjb3JhdG9ycywgZGVmYXVsdERlY29yYXRvcik7XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGdldERlZmF1bHREZWNvcmF0b3JGcm9tT2JqZWN0T3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gb3B0aW9ucy5kZWZhdWx0RGVjb3JhdG9yIHx8IChvcHRpb25zLmRlZXAgPT09IGZhbHNlID8gcmVmRGVjb3JhdG9yIDogZGVlcERlY29yYXRvcik7XHJcbn1cclxuZnVuY3Rpb24gZXh0ZW5kT2JzZXJ2YWJsZU9iamVjdFdpdGhQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcGVydGllcywgZGVjb3JhdG9ycywgZGVmYXVsdERlY29yYXRvcikge1xyXG4gICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaW52YXJpYW50KCFpc09ic2VydmFibGUocHJvcGVydGllcyksIFwiRXh0ZW5kaW5nIGFuIG9iamVjdCB3aXRoIGFub3RoZXIgb2JzZXJ2YWJsZSAob2JqZWN0KSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgY29uc3RydWN0IGFuIGV4cGxpY2l0IHByb3BlcnR5bWFwLCB1c2luZyBgdG9KU2AgaWYgbmVlZC4gU2VlIGlzc3VlICM1NDBcIik7XHJcbiAgICAgICAgaWYgKGRlY29yYXRvcnMpIHtcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRQbGFpbk9iamVjdEtleXMoZGVjb3JhdG9ycyk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzXzEgPSBfX3ZhbHVlcyhrZXlzKSwga2V5c18xXzEgPSBrZXlzXzEubmV4dCgpOyAha2V5c18xXzEuZG9uZTsga2V5c18xXzEgPSBrZXlzXzEubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNfMV8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBwcm9wZXJ0aWVzKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbChcIlRyeWluZyB0byBkZWNsYXJlIGEgZGVjb3JhdG9yIGZvciB1bnNwZWNpZmllZCBwcm9wZXJ0eSAnXCIgKyBzdHJpbmdpZnlLZXkoa2V5KSArIFwiJ1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXNfMV8xICYmICFrZXlzXzFfMS5kb25lICYmIChfYSA9IGtleXNfMS5yZXR1cm4pKSBfYS5jYWxsKGtleXNfMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFydEJhdGNoKCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHZhciBrZXlzID0gZ2V0UGxhaW5PYmplY3RLZXlzKHByb3BlcnRpZXMpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleXNfMiA9IF9fdmFsdWVzKGtleXMpLCBrZXlzXzJfMSA9IGtleXNfMi5uZXh0KCk7ICFrZXlzXzJfMS5kb25lOyBrZXlzXzJfMSA9IGtleXNfMi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzJfMS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm9wZXJ0aWVzLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQbGFpbk9iamVjdChwcm9wZXJ0aWVzKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbChcIidleHRlbmRPYnNlcnZhYmUnIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzIGFzIHNlY29uZCBhcmd1bWVudFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDb21wdXRlZChkZXNjcmlwdG9yLnZhbHVlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbChcIlBhc3NpbmcgYSAnY29tcHV0ZWQnIGFzIGluaXRpYWwgcHJvcGVydHkgdmFsdWUgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCBieSBleHRlbmRPYnNlcnZhYmxlLiBVc2UgYSBnZXR0ZXIgb3IgZGVjb3JhdG9yIGluc3RlYWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9ycyAmJiBrZXkgaW4gZGVjb3JhdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgID8gZGVjb3JhdG9yc1trZXldXHJcbiAgICAgICAgICAgICAgICAgICAgOiBkZXNjcmlwdG9yLmdldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbXB1dGVkRGVjb3JhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZGVmYXVsdERlY29yYXRvcjtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgdHlwZW9mIGRlY29yYXRvciAhPT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWwoXCJOb3QgYSB2YWxpZCBkZWNvcmF0b3IgZm9yICdcIiArIHN0cmluZ2lmeUtleShrZXkpICsgXCInLCBnb3Q6IFwiICsgZGVjb3JhdG9yKTtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHREZXNjcmlwdG9yID0gZGVjb3JhdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHREZXNjcmlwdG9yIC8vIG90aGVyd2lzZSwgYXNzdW1lIGFscmVhZHkgYXBwbGllZCwgZHVlIHRvIGBhcHBseVRvSW5zdGFuY2VgXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByZXN1bHREZXNjcmlwdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleXNfMl8xICYmICFrZXlzXzJfMS5kb25lICYmIChfYiA9IGtleXNfMi5yZXR1cm4pKSBfYi5jYWxsKGtleXNfMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jeVRyZWUodGhpbmcsIHByb3BlcnR5KSB7XHJcbiAgICByZXR1cm4gbm9kZVRvRGVwZW5kZW5jeVRyZWUoZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKTtcclxufVxyXG5mdW5jdGlvbiBub2RlVG9EZXBlbmRlbmN5VHJlZShub2RlKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZVxyXG4gICAgfTtcclxuICAgIGlmIChub2RlLm9ic2VydmluZyAmJiBub2RlLm9ic2VydmluZy5sZW5ndGggPiAwKVxyXG4gICAgICAgIHJlc3VsdC5kZXBlbmRlbmNpZXMgPSB1bmlxdWUobm9kZS5vYnNlcnZpbmcpLm1hcChub2RlVG9EZXBlbmRlbmN5VHJlZSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGdldE9ic2VydmVyVHJlZSh0aGluZywgcHJvcGVydHkpIHtcclxuICAgIHJldHVybiBub2RlVG9PYnNlcnZlclRyZWUoZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKTtcclxufVxyXG5mdW5jdGlvbiBub2RlVG9PYnNlcnZlclRyZWUobm9kZSkge1xyXG4gICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICBuYW1lOiBub2RlLm5hbWVcclxuICAgIH07XHJcbiAgICBpZiAoaGFzT2JzZXJ2ZXJzKG5vZGUpKVxyXG4gICAgICAgIHJlc3VsdC5vYnNlcnZlcnMgPSBBcnJheS5mcm9tKGdldE9ic2VydmVycyhub2RlKSkubWFwKG5vZGVUb09ic2VydmVyVHJlZSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XG5cbnZhciBnZW5lcmF0b3JJZCA9IDA7XHJcbmZ1bmN0aW9uIEZsb3dDYW5jZWxsYXRpb25FcnJvcigpIHtcclxuICAgIHRoaXMubWVzc2FnZSA9IFwiRkxPV19DQU5DRUxMRURcIjtcclxufVxyXG5GbG93Q2FuY2VsbGF0aW9uRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xyXG5mdW5jdGlvbiBpc0Zsb3dDYW5jZWxsYXRpb25FcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRmxvd0NhbmNlbGxhdGlvbkVycm9yO1xyXG59XHJcbmZ1bmN0aW9uIGZsb3coZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSlcclxuICAgICAgICBmYWlsKCEhcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgXCJGbG93IGV4cGVjdHMgMSBhcmd1bWVudCBhbmQgY2Fubm90IGJlIHVzZWQgYXMgZGVjb3JhdG9yXCIpO1xyXG4gICAgdmFyIG5hbWUgPSBnZW5lcmF0b3IubmFtZSB8fCBcIjx1bm5hbWVkIGZsb3c+XCI7XHJcbiAgICAvLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdGovY28vYmxvYi9tYXN0ZXIvaW5kZXguanNcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGN0eCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgdmFyIHJ1bklkID0gKytnZW5lcmF0b3JJZDtcclxuICAgICAgICB2YXIgZ2VuID0gYWN0aW9uKG5hbWUgKyBcIiAtIHJ1bmlkOiBcIiArIHJ1bklkICsgXCIgLSBpbml0XCIsIGdlbmVyYXRvcikuYXBwbHkoY3R4LCBhcmdzKTtcclxuICAgICAgICB2YXIgcmVqZWN0b3I7XHJcbiAgICAgICAgdmFyIHBlbmRpbmdQcm9taXNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgc3RlcElkID0gMDtcclxuICAgICAgICAgICAgcmVqZWN0b3IgPSByZWplY3Q7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uRnVsZmlsbGVkKHJlcykge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmV0O1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICByZXQgPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIHlpZWxkIFwiICsgc3RlcElkKyssIGdlbi5uZXh0KS5jYWxsKGdlbiwgcmVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQocmV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBvblJlamVjdGVkKGVycikge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmV0O1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICByZXQgPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIHlpZWxkIFwiICsgc3RlcElkKyssIGdlbi50aHJvdykuY2FsbChnZW4sIGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0KHJldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gbmV4dChyZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXQgJiYgdHlwZW9mIHJldC50aGVuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbiBhc3luYyBpdGVyYXRvclxyXG4gICAgICAgICAgICAgICAgICAgIHJldC50aGVuKG5leHQsIHJlamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJldC5kb25lKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJldC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShyZXQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBlbmRpbmdQcm9taXNlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9uRnVsZmlsbGVkKHVuZGVmaW5lZCk7IC8vIGtpY2sgb2ZmIHRoZSBwcm9jZXNzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcHJvbWlzZS5jYW5jZWwgPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIGNhbmNlbFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1Byb21pc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsUHJvbWlzZShwZW5kaW5nUHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBGaW5hbGx5IGJsb2NrIGNhbiByZXR1cm4gKG9yIHlpZWxkKSBzdHVmZi4uXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gZ2VuLnJldHVybih1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gZWF0IGFueXRoaW5nIHRoYXQgcHJvbWlzZSB3b3VsZCBkbywgaXQncyBjYW5jZWxsZWQhXHJcbiAgICAgICAgICAgICAgICB2YXIgeWllbGRlZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUocmVzLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHlpZWxkZWRQcm9taXNlLnRoZW4obm9vcCwgbm9vcCk7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxQcm9taXNlKHlpZWxkZWRQcm9taXNlKTsgLy8gbWF5YmUgaXQgY2FuIGJlIGNhbmNlbGxlZCA6KVxyXG4gICAgICAgICAgICAgICAgLy8gcmVqZWN0IG91ciBvcmlnaW5hbCBwcm9taXNlXHJcbiAgICAgICAgICAgICAgICByZWplY3RvcihuZXcgRmxvd0NhbmNlbGxhdGlvbkVycm9yKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3RvcihlKTsgLy8gdGhlcmUgY291bGQgYmUgYSB0aHJvd2luZyBmaW5hbGx5IGJsb2NrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY2FuY2VsUHJvbWlzZShwcm9taXNlKSB7XHJcbiAgICBpZiAodHlwZW9mIHByb21pc2UuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgcHJvbWlzZS5jYW5jZWwoKTtcclxufVxuXG5mdW5jdGlvbiBpbnRlcmNlcHRSZWFkcyh0aGluZywgcHJvcE9ySGFuZGxlciwgaGFuZGxlcikge1xyXG4gICAgdmFyIHRhcmdldDtcclxuICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHRoaW5nKSB8fCBpc09ic2VydmFibGVWYWx1ZSh0aGluZykpIHtcclxuICAgICAgICB0YXJnZXQgPSBnZXRBZG1pbmlzdHJhdGlvbih0aGluZyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVPYmplY3QodGhpbmcpKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wT3JIYW5kbGVyICE9PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgICAgIFwiSW50ZXJjZXB0UmVhZHMgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGEgc3BlY2lmaWMgcHJvcGVydHksIG5vdCB3aXRoIGFuIG9iamVjdCBpbiBnZW5lcmFsXCIpO1xyXG4gICAgICAgIHRhcmdldCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wT3JIYW5kbGVyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBcIkV4cGVjdGVkIG9ic2VydmFibGUgbWFwLCBvYmplY3Qgb3IgYXJyYXkgYXMgZmlyc3QgYXJyYXlcIik7XHJcbiAgICB9XHJcbiAgICBpZiAodGFyZ2V0LmRlaGFuY2VyICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQW4gaW50ZXJjZXB0IHJlYWRlciB3YXMgYWxyZWFkeSBlc3RhYmxpc2hlZFwiKTtcclxuICAgIHRhcmdldC5kZWhhbmNlciA9IHR5cGVvZiBwcm9wT3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wT3JIYW5kbGVyIDogaGFuZGxlcjtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGFyZ2V0LmRlaGFuY2VyID0gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiBpbnRlcmNlcHQodGhpbmcsIHByb3BPckhhbmRsZXIsIGhhbmRsZXIpIHtcclxuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIHJldHVybiBpbnRlcmNlcHRQcm9wZXJ0eSh0aGluZywgcHJvcE9ySGFuZGxlciwgaGFuZGxlcik7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdEludGVyY2VwdGFibGUodGhpbmcsIHByb3BPckhhbmRsZXIpO1xyXG59XHJcbmZ1bmN0aW9uIGludGVyY2VwdEludGVyY2VwdGFibGUodGhpbmcsIGhhbmRsZXIpIHtcclxuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZykuaW50ZXJjZXB0KGhhbmRsZXIpO1xyXG59XHJcbmZ1bmN0aW9uIGludGVyY2VwdFByb3BlcnR5KHRoaW5nLCBwcm9wZXJ0eSwgaGFuZGxlcikge1xyXG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wZXJ0eSkuaW50ZXJjZXB0KGhhbmRsZXIpO1xyXG59XG5cbmZ1bmN0aW9uIF9pc0NvbXB1dGVkKHZhbHVlLCBwcm9wZXJ0eSkge1xyXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHZhbHVlKSA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIXZhbHVlWyRtb2J4XS52YWx1ZXMuaGFzKHByb3BlcnR5KSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciBhdG9tID0gZ2V0QXRvbSh2YWx1ZSwgcHJvcGVydHkpO1xyXG4gICAgICAgIHJldHVybiBpc0NvbXB1dGVkVmFsdWUoYXRvbSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNDb21wdXRlZFZhbHVlKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiBpc0NvbXB1dGVkKHZhbHVlKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpXHJcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIFwiaXNDb21wdXRlZCBleHBlY3RzIG9ubHkgMSBhcmd1bWVudC4gVXNlIGlzT2JzZXJ2YWJsZVByb3AgdG8gaW5zcGVjdCB0aGUgb2JzZXJ2YWJpbGl0eSBvZiBhIHByb3BlcnR5XCIpO1xyXG4gICAgcmV0dXJuIF9pc0NvbXB1dGVkKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiBpc0NvbXB1dGVkUHJvcCh2YWx1ZSwgcHJvcE5hbWUpIHtcclxuICAgIGlmICh0eXBlb2YgcHJvcE5hbWUgIT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIFwiaXNDb21wdXRlZCBleHBlY3RlZCBhIHByb3BlcnR5IG5hbWUgYXMgc2Vjb25kIGFyZ3VtZW50XCIpO1xyXG4gICAgcmV0dXJuIF9pc0NvbXB1dGVkKHZhbHVlLCBwcm9wTmFtZSk7XHJcbn1cblxuZnVuY3Rpb24gX2lzT2JzZXJ2YWJsZSh2YWx1ZSwgcHJvcGVydHkpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAoaXNPYnNlcnZhYmxlTWFwKHZhbHVlKSB8fCBpc09ic2VydmFibGVBcnJheSh2YWx1ZSkpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFpbChcImlzT2JzZXJ2YWJsZShvYmplY3QsIHByb3BlcnR5TmFtZSkgaXMgbm90IHN1cHBvcnRlZCBmb3IgYXJyYXlzIGFuZCBtYXBzLiBVc2UgbWFwLmhhcyBvciBhcnJheS5sZW5ndGggaW5zdGVhZC5cIik7XHJcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlWyRtb2J4XS52YWx1ZXMuaGFzKHByb3BlcnR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gRm9yIGZpcnN0IGNoZWNrLCBzZWUgIzcwMVxyXG4gICAgcmV0dXJuIChpc09ic2VydmFibGVPYmplY3QodmFsdWUpIHx8XHJcbiAgICAgICAgISF2YWx1ZVskbW9ieF0gfHxcclxuICAgICAgICBpc0F0b20odmFsdWUpIHx8XHJcbiAgICAgICAgaXNSZWFjdGlvbih2YWx1ZSkgfHxcclxuICAgICAgICBpc0NvbXB1dGVkVmFsdWUodmFsdWUpKTtcclxufVxyXG5mdW5jdGlvbiBpc09ic2VydmFibGUodmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxyXG4gICAgICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIFwiaXNPYnNlcnZhYmxlIGV4cGVjdHMgb25seSAxIGFyZ3VtZW50LiBVc2UgaXNPYnNlcnZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlcIik7XHJcbiAgICByZXR1cm4gX2lzT2JzZXJ2YWJsZSh2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlUHJvcCh2YWx1ZSwgcHJvcE5hbWUpIHtcclxuICAgIGlmICh0eXBlb2YgcHJvcE5hbWUgIT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiZXhwZWN0ZWQgYSBwcm9wZXJ0eSBuYW1lIGFzIHNlY29uZCBhcmd1bWVudFwiKTtcclxuICAgIHJldHVybiBfaXNPYnNlcnZhYmxlKHZhbHVlLCBwcm9wTmFtZSk7XHJcbn1cblxuZnVuY3Rpb24ga2V5cyhvYmopIHtcclxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmpbJG1vYnhdLmdldEtleXMoKTtcclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iai5rZXlzKCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ob2JqLmtleXMoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmoubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkgeyByZXR1cm4gaW5kZXg7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgXCIna2V5cygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzLCBzZXRzIGFuZCBtYXBzXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHZhbHVlcyhvYmopIHtcclxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG9ialtrZXldOyB9KTtcclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG9iai5nZXQoa2V5KTsgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmoudmFsdWVzKCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcclxuICAgICAgICByZXR1cm4gb2JqLnNsaWNlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICBcIid2YWx1ZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cywgc2V0cyBhbmQgbWFwc1wiKTtcclxufVxyXG5mdW5jdGlvbiBlbnRyaWVzKG9iaikge1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gW2tleSwgb2JqW2tleV1dOyB9KTtcclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIFtrZXksIG9iai5nZXQoa2V5KV07IH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ob2JqLmVudHJpZXMoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmoubWFwKGZ1bmN0aW9uIChrZXksIGluZGV4KSB7IHJldHVybiBbaW5kZXgsIGtleV07IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgXCInZW50cmllcygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHNldChvYmosIGtleSwgdmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmICFpc09ic2VydmFibGVTZXQob2JqKSkge1xyXG4gICAgICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgICAgICB2YXIgdmFsdWVzXzEgPSBrZXk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5XzEgaW4gdmFsdWVzXzEpXHJcbiAgICAgICAgICAgICAgICBzZXQob2JqLCBrZXlfMSwgdmFsdWVzXzFba2V5XzFdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIHZhciBhZG0gPSBvYmpbJG1vYnhdO1xyXG4gICAgICAgIHZhciBleGlzdGluZ09ic2VydmFibGUgPSBhZG0udmFsdWVzLmdldChrZXkpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ09ic2VydmFibGUpIHtcclxuICAgICAgICAgICAgYWRtLndyaXRlKGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRtLmFkZE9ic2VydmFibGVQcm9wKGtleSwgdmFsdWUsIGFkbS5kZWZhdWx0RW5oYW5jZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XHJcbiAgICAgICAgb2JqLnNldChrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XHJcbiAgICAgICAgb2JqLmFkZChrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKVxyXG4gICAgICAgICAgICBrZXkgPSBwYXJzZUludChrZXksIDEwKTtcclxuICAgICAgICBpbnZhcmlhbnQoa2V5ID49IDAsIFwiTm90IGEgdmFsaWQgaW5kZXg6ICdcIiArIGtleSArIFwiJ1wiKTtcclxuICAgICAgICBzdGFydEJhdGNoKCk7XHJcbiAgICAgICAgaWYgKGtleSA+PSBvYmoubGVuZ3RoKVxyXG4gICAgICAgICAgICBvYmoubGVuZ3RoID0ga2V5ICsgMTtcclxuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCInc2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlKG9iaiwga2V5KSB7XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcclxuICAgICAgICBvYmpbJG1vYnhdLnJlbW92ZShrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcclxuICAgICAgICBvYmouZGVsZXRlKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xyXG4gICAgICAgIG9iai5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJudW1iZXJcIilcclxuICAgICAgICAgICAga2V5ID0gcGFyc2VJbnQoa2V5LCAxMCk7XHJcbiAgICAgICAgaW52YXJpYW50KGtleSA+PSAwLCBcIk5vdCBhIHZhbGlkIGluZGV4OiAnXCIgKyBrZXkgKyBcIidcIik7XHJcbiAgICAgICAgb2JqLnNwbGljZShrZXksIDEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgICAgIFwiJ3JlbW92ZSgpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGtleXMob2JqKS5pbmRleE9mKGtleSkgPj0gMFxyXG4gICAgICAgIHZhciBhZG0gPSBnZXRBZG1pbmlzdHJhdGlvbihvYmopO1xyXG4gICAgICAgIHJldHVybiBhZG0uaGFzKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmouaGFzKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmouaGFzKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleSA+PSAwICYmIGtleSA8IG9iai5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCInaGFzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0KG9iaiwga2V5KSB7XHJcbiAgICBpZiAoIWhhcyhvYmosIGtleSkpXHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iai5nZXQoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcclxuICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCInZ2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZSh0aGluZywgcHJvcE9yQ2IsIGNiT3JGaXJlLCBmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgIGlmICh0eXBlb2YgY2JPckZpcmUgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICByZXR1cm4gb2JzZXJ2ZU9ic2VydmFibGVQcm9wZXJ0eSh0aGluZywgcHJvcE9yQ2IsIGNiT3JGaXJlLCBmaXJlSW1tZWRpYXRlbHkpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBvYnNlcnZlT2JzZXJ2YWJsZSh0aGluZywgcHJvcE9yQ2IsIGNiT3JGaXJlKTtcclxufVxyXG5mdW5jdGlvbiBvYnNlcnZlT2JzZXJ2YWJsZSh0aGluZywgbGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xyXG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKS5vYnNlcnZlKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpO1xyXG59XHJcbmZ1bmN0aW9uIG9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkodGhpbmcsIHByb3BlcnR5LCBsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KS5vYnNlcnZlKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpO1xyXG59XG5cbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgIGRldGVjdEN5Y2xlczogdHJ1ZSxcclxuICAgIGV4cG9ydE1hcHNBc09iamVjdHM6IHRydWUsXHJcbiAgICByZWN1cnNlRXZlcnl0aGluZzogZmFsc2VcclxufTtcclxuZnVuY3Rpb24gY2FjaGUobWFwLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucy5kZXRlY3RDeWNsZXMpXHJcbiAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG5mdW5jdGlvbiB0b0pTSGVscGVyKHNvdXJjZSwgb3B0aW9ucywgX19hbHJlYWR5U2Vlbikge1xyXG4gICAgaWYgKCFvcHRpb25zLnJlY3Vyc2VFdmVyeXRoaW5nICYmICFpc09ic2VydmFibGUoc291cmNlKSlcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIC8vIERpcmVjdGx5IHJldHVybiBudWxsIGlmIHNvdXJjZSBpcyBudWxsXHJcbiAgICBpZiAoc291cmNlID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gRGlyZWN0bHkgcmV0dXJuIHRoZSBEYXRlIG9iamVjdCBpdHNlbGYgaWYgY29udGFpbmVkIGluIHRoZSBvYnNlcnZhYmxlXHJcbiAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgRGF0ZSlcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZVZhbHVlKHNvdXJjZSkpXHJcbiAgICAgICAgcmV0dXJuIHRvSlNIZWxwZXIoc291cmNlLmdldCgpLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcclxuICAgIC8vIG1ha2Ugc3VyZSB3ZSB0cmFjayB0aGUga2V5cyBvZiB0aGUgb2JqZWN0XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHNvdXJjZSkpXHJcbiAgICAgICAga2V5cyhzb3VyY2UpO1xyXG4gICAgdmFyIGRldGVjdEN5Y2xlcyA9IG9wdGlvbnMuZGV0ZWN0Q3ljbGVzID09PSB0cnVlO1xyXG4gICAgaWYgKGRldGVjdEN5Y2xlcyAmJiBzb3VyY2UgIT09IG51bGwgJiYgX19hbHJlYWR5U2Vlbi5oYXMoc291cmNlKSkge1xyXG4gICAgICAgIHJldHVybiBfX2FscmVhZHlTZWVuLmdldChzb3VyY2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KHNvdXJjZSkgfHwgQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XHJcbiAgICAgICAgdmFyIHJlc18xID0gY2FjaGUoX19hbHJlYWR5U2Vlbiwgc291cmNlLCBbXSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdmFyIHRvQWRkID0gc291cmNlLm1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRvSlNIZWxwZXIodmFsdWUsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pOyB9KTtcclxuICAgICAgICByZXNfMS5sZW5ndGggPSB0b0FkZC5sZW5ndGg7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0b0FkZC5sZW5ndGg7IGkgPCBsOyBpKyspXHJcbiAgICAgICAgICAgIHJlc18xW2ldID0gdG9BZGRbaV07XHJcbiAgICAgICAgcmV0dXJuIHJlc18xO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChzb3VyY2UpIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpID09PSBTZXQucHJvdG90eXBlKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuZXhwb3J0TWFwc0FzT2JqZWN0cyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdmFyIHJlc18yID0gY2FjaGUoX19hbHJlYWR5U2Vlbiwgc291cmNlLCBuZXcgU2V0KCksIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJlc18yLmFkZCh0b0pTSGVscGVyKHZhbHVlLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzXzI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmVzXzMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIFtdLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXNfMy5wdXNoKHRvSlNIZWxwZXIodmFsdWUsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNfMztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHNvdXJjZSkgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkgPT09IE1hcC5wcm90b3R5cGUpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5leHBvcnRNYXBzQXNPYmplY3RzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzXzQgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIG5ldyBNYXAoKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXNfNC5zZXQoa2V5LCB0b0pTSGVscGVyKHZhbHVlLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzXzQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmVzXzUgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIHt9LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgIHJlc181W2tleV0gPSB0b0pTSGVscGVyKHZhbHVlLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNfNTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBGYWxsYmFjayB0byB0aGUgc2l0dWF0aW9uIHRoYXQgc291cmNlIGlzIGFuIE9ic2VydmFibGVPYmplY3Qgb3IgYSBwbGFpbiBvYmplY3RcclxuICAgIHZhciByZXMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIHt9LCBvcHRpb25zKTtcclxuICAgIGdldFBsYWluT2JqZWN0S2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJlc1trZXldID0gdG9KU0hlbHBlcihzb3VyY2Vba2V5XSwgb3B0aW9ucywgX19hbHJlYWR5U2Vlbik7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gdG9KUyhzb3VyY2UsIG9wdGlvbnMpIHtcclxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJib29sZWFuXCIpXHJcbiAgICAgICAgb3B0aW9ucyA9IHsgZGV0ZWN0Q3ljbGVzOiBvcHRpb25zIH07XHJcbiAgICBpZiAoIW9wdGlvbnMpXHJcbiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xyXG4gICAgb3B0aW9ucy5kZXRlY3RDeWNsZXMgPVxyXG4gICAgICAgIG9wdGlvbnMuZGV0ZWN0Q3ljbGVzID09PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgPyBvcHRpb25zLnJlY3Vyc2VFdmVyeXRoaW5nID09PSB0cnVlXHJcbiAgICAgICAgICAgIDogb3B0aW9ucy5kZXRlY3RDeWNsZXMgPT09IHRydWU7XHJcbiAgICB2YXIgX19hbHJlYWR5U2VlbjtcclxuICAgIGlmIChvcHRpb25zLmRldGVjdEN5Y2xlcylcclxuICAgICAgICBfX2FscmVhZHlTZWVuID0gbmV3IE1hcCgpO1xyXG4gICAgcmV0dXJuIHRvSlNIZWxwZXIoc291cmNlLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcclxufVxuXG5mdW5jdGlvbiB0cmFjZSgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBlbnRlckJyZWFrUG9pbnQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSBcImJvb2xlYW5cIilcclxuICAgICAgICBlbnRlckJyZWFrUG9pbnQgPSBhcmdzLnBvcCgpO1xyXG4gICAgdmFyIGRlcml2YXRpb24gPSBnZXRBdG9tRnJvbUFyZ3MoYXJncyk7XHJcbiAgICBpZiAoIWRlcml2YXRpb24pIHtcclxuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgXCIndHJhY2UoYnJlYWs/KScgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYSB0cmFja2VkIGNvbXB1dGVkIHZhbHVlIG9yIGEgUmVhY3Rpb24uIENvbnNpZGVyIHBhc3NpbmcgaW4gdGhlIGNvbXB1dGVkIHZhbHVlIG9yIHJlYWN0aW9uIGV4cGxpY2l0bHlcIik7XHJcbiAgICB9XHJcbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmcgPT09IFRyYWNlTW9kZS5OT05FKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJbbW9ieC50cmFjZV0gJ1wiICsgZGVyaXZhdGlvbi5uYW1lICsgXCInIHRyYWNpbmcgZW5hYmxlZFwiKTtcclxuICAgIH1cclxuICAgIGRlcml2YXRpb24uaXNUcmFjaW5nID0gZW50ZXJCcmVha1BvaW50ID8gVHJhY2VNb2RlLkJSRUFLIDogVHJhY2VNb2RlLkxPRztcclxufVxyXG5mdW5jdGlvbiBnZXRBdG9tRnJvbUFyZ3MoYXJncykge1xyXG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbjtcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRBdG9tKGFyZ3NbMF0pO1xyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSwgYXJnc1sxXSk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIER1cmluZyBhIHRyYW5zYWN0aW9uIG5vIHZpZXdzIGFyZSB1cGRhdGVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIHRyYW5zYWN0aW9uLlxyXG4gKiBUaGUgdHJhbnNhY3Rpb24gd2lsbCBiZSBydW4gc3luY2hyb25vdXNseSBub25ldGhlbGVzcy5cclxuICpcclxuICogQHBhcmFtIGFjdGlvbiBhIGZ1bmN0aW9uIHRoYXQgdXBkYXRlcyBzb21lIHJlYWN0aXZlIHN0YXRlXHJcbiAqIEByZXR1cm5zIGFueSB2YWx1ZSB0aGF0IHdhcyByZXR1cm5lZCBieSB0aGUgJ2FjdGlvbicgcGFyYW1ldGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJhbnNhY3Rpb24oYWN0aW9uLCB0aGlzQXJnKSB7XHJcbiAgICBpZiAodGhpc0FyZyA9PT0gdm9pZCAwKSB7IHRoaXNBcmcgPSB1bmRlZmluZWQ7IH1cclxuICAgIHN0YXJ0QmF0Y2goKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5hcHBseSh0aGlzQXJnKTtcclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIGVuZEJhdGNoKCk7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gd2hlbihwcmVkaWNhdGUsIGFyZzEsIGFyZzIpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxIHx8IChhcmcxICYmIHR5cGVvZiBhcmcxID09PSBcIm9iamVjdFwiKSlcclxuICAgICAgICByZXR1cm4gd2hlblByb21pc2UocHJlZGljYXRlLCBhcmcxKTtcclxuICAgIHJldHVybiBfd2hlbihwcmVkaWNhdGUsIGFyZzEsIGFyZzIgfHwge30pO1xyXG59XHJcbmZ1bmN0aW9uIF93aGVuKHByZWRpY2F0ZSwgZWZmZWN0LCBvcHRzKSB7XHJcbiAgICB2YXIgdGltZW91dEhhbmRsZTtcclxuICAgIGlmICh0eXBlb2Ygb3B0cy50aW1lb3V0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgdGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWRpc3Bvc2VyWyRtb2J4XS5pc0Rpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwb3NlcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiV0hFTl9USU1FT1VUXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMub25FcnJvcilcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLm9uRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0cy50aW1lb3V0KTtcclxuICAgIH1cclxuICAgIG9wdHMubmFtZSA9IG9wdHMubmFtZSB8fCBcIldoZW5AXCIgKyBnZXROZXh0SWQoKTtcclxuICAgIHZhciBlZmZlY3RBY3Rpb24gPSBjcmVhdGVBY3Rpb24ob3B0cy5uYW1lICsgXCItZWZmZWN0XCIsIGVmZmVjdCk7XHJcbiAgICB2YXIgZGlzcG9zZXIgPSBhdXRvcnVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZSgpKSB7XHJcbiAgICAgICAgICAgIHIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICBpZiAodGltZW91dEhhbmRsZSlcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcclxuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgb3B0cyk7XHJcbiAgICByZXR1cm4gZGlzcG9zZXI7XHJcbn1cclxuZnVuY3Rpb24gd2hlblByb21pc2UocHJlZGljYXRlLCBvcHRzKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIG9wdHMgJiYgb3B0cy5vbkVycm9yKVxyXG4gICAgICAgIHJldHVybiBmYWlsKFwidGhlIG9wdGlvbnMgJ29uRXJyb3InIGFuZCAncHJvbWlzZScgY2Fubm90IGJlIGNvbWJpbmVkXCIpO1xyXG4gICAgdmFyIGNhbmNlbDtcclxuICAgIHZhciByZXMgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdmFyIGRpc3Bvc2VyID0gX3doZW4ocHJlZGljYXRlLCByZXNvbHZlLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0cyksIHsgb25FcnJvcjogcmVqZWN0IH0pKTtcclxuICAgICAgICBjYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRpc3Bvc2VyKCk7XHJcbiAgICAgICAgICAgIHJlamVjdChcIldIRU5fQ0FOQ0VMTEVEXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuICAgIHJlcy5jYW5jZWwgPSBjYW5jZWw7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XG5cbmZ1bmN0aW9uIGdldEFkbSh0YXJnZXQpIHtcclxuICAgIHJldHVybiB0YXJnZXRbJG1vYnhdO1xyXG59XHJcbmZ1bmN0aW9uIGlzUHJvcGVydHlLZXkodmFsKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWwgPT09IFwic3ltYm9sXCI7XHJcbn1cclxuLy8gT3B0aW1pemF0aW9uOiB3ZSBkb24ndCBuZWVkIHRoZSBpbnRlcm1lZGlhdGUgb2JqZWN0cyBhbmQgY291bGQgaGF2ZSBhIGNvbXBsZXRlbHkgY3VzdG9tIGFkbWluaXN0cmF0aW9uIGZvciBEeW5hbWljT2JqZWN0cyxcclxuLy8gYW5kIHNraXAgZWl0aGVyIHRoZSBpbnRlcm5hbCB2YWx1ZXMgbWFwLCBvciB0aGUgYmFzZSBvYmplY3Qgd2l0aCBpdHMgcHJvcGVydHkgZGVzY3JpcHRvcnMhXHJcbnZhciBvYmplY3RQcm94eVRyYXBzID0ge1xyXG4gICAgaGFzOiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICRtb2J4IHx8IG5hbWUgPT09IFwiY29uc3RydWN0b3JcIiB8fCBuYW1lID09PSBtb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1N5bWJvbClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbSh0YXJnZXQpO1xyXG4gICAgICAgIC8vIE1XRTogc2hvdWxkIGBpbmAgb3BlcmF0b3IgYmUgcmVhY3RpdmU/IElmIG5vdCwgYmVsb3cgY29kZSBwYXRoIHdpbGwgYmUgZmFzdGVyIC8gbW9yZSBtZW1vcnkgZWZmaWNpZW50XHJcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgcGVyZm9ybWFuY2Ugc3RhdHMhXHJcbiAgICAgICAgLy8gaWYgKGFkbS52YWx1ZXMuZ2V0KG5hbWUgYXMgc3RyaW5nKSkgcmV0dXJuIHRydWVcclxuICAgICAgICBpZiAoaXNQcm9wZXJ0eUtleShuYW1lKSlcclxuICAgICAgICAgICAgcmV0dXJuIGFkbS5oYXMobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIG5hbWUgaW4gdGFyZ2V0O1xyXG4gICAgfSxcclxuICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAkbW9ieCB8fCBuYW1lID09PSBcImNvbnN0cnVjdG9yXCIgfHwgbmFtZSA9PT0gbW9ieERpZFJ1bkxhenlJbml0aWFsaXplcnNTeW1ib2wpXHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRbbmFtZV07XHJcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbSh0YXJnZXQpO1xyXG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gYWRtLnZhbHVlcy5nZXQobmFtZSk7XHJcbiAgICAgICAgaWYgKG9ic2VydmFibGUgaW5zdGFuY2VvZiBBdG9tKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYnNlcnZhYmxlLmdldCgpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZml4ZXMgIzE3OTYsIGJlY2F1c2UgZGVsZXRpbmcgYSBwcm9wIHRoYXQgaGFzIGFuXHJcbiAgICAgICAgICAgICAgICAvLyB1bmRlZmluZWQgdmFsdWUgd29uJ3QgcmV0cmlnZ2VyIGEgb2JzZXJ2ZXIgKG5vIHZpc2libGUgZWZmZWN0KSxcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBhdXRvcnVuIHdvdWxkbid0IHN1YnNjcmliZSB0byBmdXR1cmUga2V5IGNoYW5nZXMgKHNlZSBhbHNvIG5leHQgY29tbWVudClcclxuICAgICAgICAgICAgICAgIGFkbS5oYXMobmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHN0YXJ0IGxpc3RlbmluZyB0byBmdXR1cmUga2V5c1xyXG4gICAgICAgIC8vIG5vdGUgdGhhdCB3ZSBvbmx5IGRvIHRoaXMgaGVyZSBmb3Igb3B0aW1pemF0aW9uXHJcbiAgICAgICAgaWYgKGlzUHJvcGVydHlLZXkobmFtZSkpXHJcbiAgICAgICAgICAgIGFkbS5oYXMobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFtuYW1lXTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCFpc1Byb3BlcnR5S2V5KG5hbWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgc2V0KHRhcmdldCwgbmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKCFpc1Byb3BlcnR5S2V5KG5hbWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbSh0YXJnZXQpO1xyXG4gICAgICAgIGFkbS5yZW1vdmUobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgb3duS2V5czogZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIHZhciBhZG0gPSBnZXRBZG0odGFyZ2V0KTtcclxuICAgICAgICBhZG0ua2V5c0F0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XHJcbiAgICB9LFxyXG4gICAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBmYWlsKFwiRHluYW1pYyBvYnNlcnZhYmxlIG9iamVjdHMgY2Fubm90IGJlIGZyb3plblwiKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZUR5bmFtaWNPYnNlcnZhYmxlT2JqZWN0KGJhc2UpIHtcclxuICAgIHZhciBwcm94eSA9IG5ldyBQcm94eShiYXNlLCBvYmplY3RQcm94eVRyYXBzKTtcclxuICAgIGJhc2VbJG1vYnhdLnByb3h5ID0gcHJveHk7XHJcbiAgICByZXR1cm4gcHJveHk7XHJcbn1cblxuZnVuY3Rpb24gaGFzSW50ZXJjZXB0b3JzKGludGVyY2VwdGFibGUpIHtcclxuICAgIHJldHVybiBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9ycyAhPT0gdW5kZWZpbmVkICYmIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzLmxlbmd0aCA+IDA7XHJcbn1cclxuZnVuY3Rpb24gcmVnaXN0ZXJJbnRlcmNlcHRvcihpbnRlcmNlcHRhYmxlLCBoYW5kbGVyKSB7XHJcbiAgICB2YXIgaW50ZXJjZXB0b3JzID0gaW50ZXJjZXB0YWJsZS5pbnRlcmNlcHRvcnMgfHwgKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzID0gW10pO1xyXG4gICAgaW50ZXJjZXB0b3JzLnB1c2goaGFuZGxlcik7XHJcbiAgICByZXR1cm4gb25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IGludGVyY2VwdG9ycy5pbmRleE9mKGhhbmRsZXIpO1xyXG4gICAgICAgIGlmIChpZHggIT09IC0xKVxyXG4gICAgICAgICAgICBpbnRlcmNlcHRvcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBpbnRlcmNlcHRDaGFuZ2UoaW50ZXJjZXB0YWJsZSwgY2hhbmdlKSB7XHJcbiAgICB2YXIgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBJbnRlcmNlcHRvciBjYW4gbW9kaWZ5IHRoZSBhcnJheSwgY29weSBpdCB0byBhdm9pZCBjb25jdXJyZW50IG1vZGlmaWNhdGlvbiwgc2VlICMxOTUwXHJcbiAgICAgICAgdmFyIGludGVyY2VwdG9ycyA9IF9fc3ByZWFkKChpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9ycyB8fCBbXSkpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaW50ZXJjZXB0b3JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBjaGFuZ2UgPSBpbnRlcmNlcHRvcnNbaV0oY2hhbmdlKTtcclxuICAgICAgICAgICAgaW52YXJpYW50KCFjaGFuZ2UgfHwgY2hhbmdlLnR5cGUsIFwiSW50ZXJjZXB0IGhhbmRsZXJzIHNob3VsZCByZXR1cm4gbm90aGluZyBvciBhIGNoYW5nZSBvYmplY3RcIik7XHJcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGFuZ2U7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB1bnRyYWNrZWRFbmQocHJldlUpO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGhhc0xpc3RlbmVycyhsaXN0ZW5hYmxlKSB7XHJcbiAgICByZXR1cm4gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycy5sZW5ndGggPiAwO1xyXG59XHJcbmZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXIobGlzdGVuYWJsZSwgaGFuZGxlcikge1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzIHx8IChsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycyA9IFtdKTtcclxuICAgIGxpc3RlbmVycy5wdXNoKGhhbmRsZXIpO1xyXG4gICAgcmV0dXJuIG9uY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpZHggPSBsaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICBpZiAoaWR4ICE9PSAtMSlcclxuICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKGxpc3RlbmFibGUsIGNoYW5nZSkge1xyXG4gICAgdmFyIHByZXZVID0gdW50cmFja2VkU3RhcnQoKTtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSBsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycztcclxuICAgIGlmICghbGlzdGVuZXJzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgpO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgbGlzdGVuZXJzW2ldKGNoYW5nZSk7XHJcbiAgICB9XHJcbiAgICB1bnRyYWNrZWRFbmQocHJldlUpO1xyXG59XG5cbnZhciBNQVhfU1BMSUNFX1NJWkUgPSAxMDAwMDsgLy8gU2VlIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy84NTlcclxudmFyIGFycmF5VHJhcHMgPSB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJG1vYngpXHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRbJG1vYnhdO1xyXG4gICAgICAgIGlmIChuYW1lID09PSBcImxlbmd0aFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0WyRtb2J4XS5nZXRBcnJheUxlbmd0aCgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXlFeHRlbnNpb25zLmdldC5jYWxsKHRhcmdldCwgbmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiAmJiAhaXNOYU4obmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFycmF5RXh0ZW5zaW9ucy5nZXQuY2FsbCh0YXJnZXQsIHBhcnNlSW50KG5hbWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFycmF5RXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXlFeHRlbnNpb25zW25hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdO1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xyXG4gICAgICAgICAgICB0YXJnZXRbJG1vYnhdLnNldEFycmF5TGVuZ3RoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGFycmF5RXh0ZW5zaW9ucy5zZXQuY2FsbCh0YXJnZXQsIG5hbWUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiIHx8IGlzTmFOKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbnVtZXJpYyBzdHJpbmdcclxuICAgICAgICAgICAgYXJyYXlFeHRlbnNpb25zLnNldC5jYWxsKHRhcmdldCwgcGFyc2VJbnQobmFtZSksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBmYWlsKFwiT2JzZXJ2YWJsZSBhcnJheXMgY2Fubm90IGJlIGZyb3plblwiKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGVBcnJheShpbml0aWFsVmFsdWVzLCBlbmhhbmNlciwgbmFtZSwgb3duZWQpIHtcclxuICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiT2JzZXJ2YWJsZUFycmF5QFwiICsgZ2V0TmV4dElkKCk7IH1cclxuICAgIGlmIChvd25lZCA9PT0gdm9pZCAwKSB7IG93bmVkID0gZmFsc2U7IH1cclxuICAgIHZhciBhZG0gPSBuZXcgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24obmFtZSwgZW5oYW5jZXIsIG93bmVkKTtcclxuICAgIGFkZEhpZGRlbkZpbmFsUHJvcChhZG0udmFsdWVzLCAkbW9ieCwgYWRtKTtcclxuICAgIHZhciBwcm94eSA9IG5ldyBQcm94eShhZG0udmFsdWVzLCBhcnJheVRyYXBzKTtcclxuICAgIGFkbS5wcm94eSA9IHByb3h5O1xyXG4gICAgaWYgKGluaXRpYWxWYWx1ZXMgJiYgaW5pdGlhbFZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgcHJldiA9IGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQodHJ1ZSk7XHJcbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheSgwLCAwLCBpbml0aWFsVmFsdWVzKTtcclxuICAgICAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChwcmV2KTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm94eTtcclxufVxyXG52YXIgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbihuYW1lLCBlbmhhbmNlciwgb3duZWQpIHtcclxuICAgICAgICB0aGlzLm93bmVkID0gb3duZWQ7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnByb3h5ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMubGFzdEtub3duTGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLmF0b20gPSBuZXcgQXRvbShuYW1lIHx8IFwiT2JzZXJ2YWJsZUFycmF5QFwiICsgZ2V0TmV4dElkKCkpO1xyXG4gICAgICAgIHRoaXMuZW5oYW5jZXIgPSBmdW5jdGlvbiAobmV3Viwgb2xkVikgeyByZXR1cm4gZW5oYW5jZXIobmV3Viwgb2xkViwgbmFtZSArIFwiWy4uXVwiKTsgfTtcclxuICAgIH1cclxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5kZWhhbmNlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5kZWhhbmNlVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcykge1xyXG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQgJiYgdmFsdWVzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKHRoaXMuZGVoYW5jZXIpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmludGVyY2VwdCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xyXG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkgPT09IHZvaWQgMCkgeyBmaXJlSW1tZWRpYXRlbHkgPSBmYWxzZTsgfVxyXG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgICAgICAgICAgbGlzdGVuZXIoe1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcclxuICAgICAgICAgICAgICAgIGluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgYWRkZWQ6IHRoaXMudmFsdWVzLnNsaWNlKCksXHJcbiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiB0aGlzLnZhbHVlcy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICByZW1vdmVkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZWRDb3VudDogMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5nZXRBcnJheUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmF0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMubGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5zZXRBcnJheUxlbmd0aCA9IGZ1bmN0aW9uIChuZXdMZW5ndGgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG5ld0xlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBuZXdMZW5ndGggPCAwKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC5hcnJheV0gT3V0IG9mIHJhbmdlOiBcIiArIG5ld0xlbmd0aCk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRMZW5ndGggPSB0aGlzLnZhbHVlcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKG5ld0xlbmd0aCA9PT0gY3VycmVudExlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGVsc2UgaWYgKG5ld0xlbmd0aCA+IGN1cnJlbnRMZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0l0ZW1zID0gbmV3IEFycmF5KG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIG5ld0l0ZW1zW2ldID0gdW5kZWZpbmVkOyAvLyBObyBBcnJheS5maWxsIGV2ZXJ5d2hlcmUuLi5cclxuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXkoY3VycmVudExlbmd0aCwgMCwgbmV3SXRlbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlV2l0aEFycmF5KG5ld0xlbmd0aCwgY3VycmVudExlbmd0aCAtIG5ld0xlbmd0aCk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLnVwZGF0ZUFycmF5TGVuZ3RoID0gZnVuY3Rpb24gKG9sZExlbmd0aCwgZGVsdGEpIHtcclxuICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSB0aGlzLmxhc3RLbm93bkxlbmd0aClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnhdIE1vZGlmaWNhdGlvbiBleGNlcHRpb246IHRoZSBpbnRlcm5hbCBzdHJ1Y3R1cmUgb2YgYW4gb2JzZXJ2YWJsZSBhcnJheSB3YXMgY2hhbmdlZC5cIik7XHJcbiAgICAgICAgdGhpcy5sYXN0S25vd25MZW5ndGggKz0gZGVsdGE7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLnNwbGljZVdpdGhBcnJheSA9IGZ1bmN0aW9uIChpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b20pO1xyXG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLnZhbHVlcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICBlbHNlIGlmIChpbmRleCA+IGxlbmd0aClcclxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XHJcbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPCAwKVxyXG4gICAgICAgICAgICBpbmRleCA9IE1hdGgubWF4KDAsIGxlbmd0aCArIGluZGV4KTtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSlcclxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBsZW5ndGggLSBpbmRleDtcclxuICAgICAgICBlbHNlIGlmIChkZWxldGVDb3VudCA9PT0gdW5kZWZpbmVkIHx8IGRlbGV0ZUNvdW50ID09PSBudWxsKVxyXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDA7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGRlbGV0ZUNvdW50LCBsZW5ndGggLSBpbmRleCkpO1xyXG4gICAgICAgIGlmIChuZXdJdGVtcyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBuZXdJdGVtcyA9IEVNUFRZX0FSUkFZO1xyXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHksXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNwbGljZVwiLFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiBkZWxldGVDb3VudCxcclxuICAgICAgICAgICAgICAgIGFkZGVkOiBuZXdJdGVtc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFlfQVJSQVk7XHJcbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gY2hhbmdlLnJlbW92ZWRDb3VudDtcclxuICAgICAgICAgICAgbmV3SXRlbXMgPSBjaGFuZ2UuYWRkZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ld0l0ZW1zID0gbmV3SXRlbXMubGVuZ3RoID09PSAwID8gbmV3SXRlbXMgOiBuZXdJdGVtcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIF90aGlzLmVuaGFuY2VyKHYsIHVuZGVmaW5lZCk7IH0pO1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgdmFyIGxlbmd0aERlbHRhID0gbmV3SXRlbXMubGVuZ3RoIC0gZGVsZXRlQ291bnQ7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXJyYXlMZW5ndGgobGVuZ3RoLCBsZW5ndGhEZWx0YSk7IC8vIGNoZWNrcyBpZiBpbnRlcm5hbCBhcnJheSB3YXNuJ3QgbW9kaWZpZWRcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlcyA9IHRoaXMuc3BsaWNlSXRlbXNJbnRvVmFsdWVzKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpO1xyXG4gICAgICAgIGlmIChkZWxldGVDb3VudCAhPT0gMCB8fCBuZXdJdGVtcy5sZW5ndGggIT09IDApXHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5QXJyYXlTcGxpY2UoaW5kZXgsIG5ld0l0ZW1zLCByZXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZXMocmVzKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuc3BsaWNlSXRlbXNJbnRvVmFsdWVzID0gZnVuY3Rpb24gKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgaWYgKG5ld0l0ZW1zLmxlbmd0aCA8IE1BWF9TUExJQ0VfU0laRSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy52YWx1ZXMpLnNwbGljZS5hcHBseShfYSwgX19zcHJlYWQoW2luZGV4LCBkZWxldGVDb3VudF0sIG5ld0l0ZW1zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gdGhpcy52YWx1ZXMuc2xpY2UoaW5kZXgsIGluZGV4ICsgZGVsZXRlQ291bnQpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IHRoaXMudmFsdWVzXHJcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAuY29uY2F0KG5ld0l0ZW1zLCB0aGlzLnZhbHVlcy5zbGljZShpbmRleCArIGRlbGV0ZUNvdW50KSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5ub3RpZnlBcnJheUNoaWxkVXBkYXRlID0gZnVuY3Rpb24gKGluZGV4LCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICB2YXIgbm90aWZ5U3B5ID0gIXRoaXMub3duZWQgJiYgaXNTcHlFbmFibGVkKCk7XHJcbiAgICAgICAgdmFyIG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKTtcclxuICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxyXG4gICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgLy8gVGhlIHJlYXNvbiB3aHkgdGhpcyBpcyBvbiByaWdodCBoYW5kIHNpZGUgaGVyZSAoYW5kIG5vdCBhYm92ZSksIGlzIHRoaXMgd2F5IHRoZSB1Z2xpZmllciB3aWxsIGRyb3AgaXQsIGJ1dCBpdCB3b24ndFxyXG4gICAgICAgIC8vIGNhdXNlIGFueSBydW50aW1lIG92ZXJoZWFkIGluIGRldmVsb3BtZW50IG1vZGUgd2l0aG91dCBOT0RFX0VOViBzZXQsIHVubGVzcyBzcHlpbmcgaXMgZW5hYmxlZFxyXG4gICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2hhbmdlKSwgeyBuYW1lOiB0aGlzLmF0b20ubmFtZSB9KSk7XHJcbiAgICAgICAgdGhpcy5hdG9tLnJlcG9ydENoYW5nZWQoKTtcclxuICAgICAgICBpZiAobm90aWZ5KVxyXG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm5vdGlmeUFycmF5U3BsaWNlID0gZnVuY3Rpb24gKGluZGV4LCBhZGRlZCwgcmVtb3ZlZCkge1xyXG4gICAgICAgIHZhciBub3RpZnlTcHkgPSAhdGhpcy5vd25lZCAmJiBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XHJcbiAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcclxuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgIHJlbW92ZWQ6IHJlbW92ZWQsXHJcbiAgICAgICAgICAgICAgICBhZGRlZDogYWRkZWQsXHJcbiAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IHJlbW92ZWQubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgYWRkZWRDb3VudDogYWRkZWQubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2hhbmdlKSwgeyBuYW1lOiB0aGlzLmF0b20ubmFtZSB9KSk7XHJcbiAgICAgICAgdGhpcy5hdG9tLnJlcG9ydENoYW5nZWQoKTtcclxuICAgICAgICAvLyBjb25mb3JtOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9vYnNlcnZlXHJcbiAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbjtcclxufSgpKTtcclxudmFyIGFycmF5RXh0ZW5zaW9ucyA9IHtcclxuICAgIGludGVyY2VwdDogZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpc1skbW9ieF0uaW50ZXJjZXB0KGhhbmRsZXIpO1xyXG4gICAgfSxcclxuICAgIG9ic2VydmU6IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSA9PT0gdm9pZCAwKSB7IGZpcmVJbW1lZGlhdGVseSA9IGZhbHNlOyB9XHJcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xyXG4gICAgICAgIHJldHVybiBhZG0ub2JzZXJ2ZShsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KTtcclxuICAgIH0sXHJcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZSgwKTtcclxuICAgIH0sXHJcbiAgICByZXBsYWNlOiBmdW5jdGlvbiAobmV3SXRlbXMpIHtcclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXkoMCwgYWRtLnZhbHVlcy5sZW5ndGgsIG5ld0l0ZW1zKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgYXJyYXkgYmFjayB0byBhIChzaGFsbG93KSBqYXZhc2NyaXB0IHN0cnVjdHVyZS5cclxuICAgICAqIEZvciBhIGRlZXAgY2xvbmUgdXNlIG1vYngudG9KU1xyXG4gICAgICovXHJcbiAgICB0b0pTOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoKTtcclxuICAgIH0sXHJcbiAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBVc2VkIGJ5IEpTT04uc3RyaW5naWZ5XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9KUygpO1xyXG4gICAgfSxcclxuICAgIC8qXHJcbiAgICAgKiBmdW5jdGlvbnMgdGhhdCBkbyBhbHRlciB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIHRoZSBhcnJheSwgKGJhc2VkIG9uIGxpYi5lczYuZC50cylcclxuICAgICAqIHNpbmNlIHRoZXNlIGZ1bmN0aW9ucyBhbHRlciB0aGUgaW5uZXIgc3RydWN0dXJlIG9mIHRoZSBhcnJheSwgdGhlIGhhdmUgc2lkZSBlZmZlY3RzLlxyXG4gICAgICogQmVjYXVzZSB0aGUgaGF2ZSBzaWRlIGVmZmVjdHMsIHRoZXkgc2hvdWxkIG5vdCBiZSB1c2VkIGluIGNvbXB1dGVkIGZ1bmN0aW9uLFxyXG4gICAgICogYW5kIGZvciB0aGF0IHJlYXNvbiB0aGUgZG8gbm90IGNhbGwgZGVwZW5kZW5jeVN0YXRlLm5vdGlmeU9ic2VydmVkXHJcbiAgICAgKi9cclxuICAgIHNwbGljZTogZnVuY3Rpb24gKGluZGV4LCBkZWxldGVDb3VudCkge1xyXG4gICAgICAgIHZhciBuZXdJdGVtcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIG5ld0l0ZW1zW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXkoaW5kZXgpO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheShpbmRleCwgZGVsZXRlQ291bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheShpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKTtcclxuICAgIH0sXHJcbiAgICBzcGxpY2VXaXRoQXJyYXk6IGZ1bmN0aW9uIChpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKSB7XHJcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xyXG4gICAgICAgIHJldHVybiBhZG0uc3BsaWNlV2l0aEFycmF5KGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpO1xyXG4gICAgfSxcclxuICAgIHB1c2g6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBpdGVtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheShhZG0udmFsdWVzLmxlbmd0aCwgMCwgaXRlbXMpO1xyXG4gICAgICAgIHJldHVybiBhZG0udmFsdWVzLmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICBwb3A6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcGxpY2UoTWF0aC5tYXgodGhpc1skbW9ieF0udmFsdWVzLmxlbmd0aCAtIDEsIDApLCAxKVswXTtcclxuICAgIH0sXHJcbiAgICBzaGlmdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZSgwLCAxKVswXTtcclxuICAgIH0sXHJcbiAgICB1bnNoaWZ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGl0ZW1zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgaXRlbXNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xyXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXkoMCwgMCwgaXRlbXMpO1xyXG4gICAgICAgIHJldHVybiBhZG0udmFsdWVzLmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gcmV2ZXJzZSBieSBkZWZhdWx0IG11dGF0ZXMgaW4gcGxhY2UgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0XHJcbiAgICAgICAgLy8gd2hpY2ggbWFrZXMgaXQgYm90aCBhICdkZXJpdmF0aW9uJyBhbmQgYSAnbXV0YXRpb24nLlxyXG4gICAgICAgIC8vIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgZGVmYXVsdCBhbmQganVzdCBtYWtlIGl0IGFuIGRlcnZpdGF0aW9uXHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0gYG9ic2VydmFibGVBcnJheS5yZXZlcnNlKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgYXJyYXkgaW4gcGxhY2UuIFVzZSBgb2JzZXJ2YWJsZUFycmF5LnNsaWNlKCkucmV2ZXJzZSgpYCB0byBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgYW5kIHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBvbiBhIGNvcHksIG9yIGBvYnNlcnZhYmxlQXJyYXkucmVwbGFjZShvYnNlcnZhYmxlQXJyYXkuc2xpY2UoKS5yZXZlcnNlKCkpYCB0byByZXZlcnNlICYgdXBkYXRlIGluIHBsYWNlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLnNsaWNlKCk7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lLnJldmVyc2UuYXBwbHkoY2xvbmUsIGFyZ3VtZW50cyk7XHJcbiAgICB9LFxyXG4gICAgc29ydDogZnVuY3Rpb24gKGNvbXBhcmVGbikge1xyXG4gICAgICAgIC8vIHNvcnQgYnkgZGVmYXVsdCBtdXRhdGVzIGluIHBsYWNlIGJlZm9yZSByZXR1cm5pbmcgdGhlIHJlc3VsdFxyXG4gICAgICAgIC8vIHdoaWNoIGdvZXMgYWdhaW5zdCBhbGwgZ29vZCBwcmFjdGljZXMuIExldCdzIG5vdCBjaGFuZ2UgdGhlIGFycmF5IGluIHBsYWNlIVxyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIGBvYnNlcnZhYmxlQXJyYXkuc29ydCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIGFycmF5IGluIHBsYWNlLiBVc2UgYG9ic2VydmFibGVBcnJheS5zbGljZSgpLnNvcnQoKWAgdG8gc3VwcHJlc3MgdGhpcyB3YXJuaW5nIGFuZCBwZXJmb3JtIHRoZSBvcGVyYXRpb24gb24gYSBjb3B5LCBvciBgb2JzZXJ2YWJsZUFycmF5LnJlcGxhY2Uob2JzZXJ2YWJsZUFycmF5LnNsaWNlKCkuc29ydCgpKWAgdG8gc29ydCAmIHVwZGF0ZSBpbiBwbGFjZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5zbGljZSgpO1xyXG4gICAgICAgIHJldHVybiBjbG9uZS5zb3J0LmFwcGx5KGNsb25lLCBhcmd1bWVudHMpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xyXG4gICAgICAgIHZhciBpZHggPSBhZG0uZGVoYW5jZVZhbHVlcyhhZG0udmFsdWVzKS5pbmRleE9mKHZhbHVlKTtcclxuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcclxuICAgICAgICBpZiAoYWRtKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGFkbS52YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBhZG0uYXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkbS5kZWhhbmNlVmFsdWUoYWRtLnZhbHVlc1tpbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4LmFycmF5XSBBdHRlbXB0IHRvIHJlYWQgYW4gYXJyYXkgaW5kZXggKFwiICsgaW5kZXggKyBcIikgdGhhdCBpcyBvdXQgb2YgYm91bmRzIChcIiArIGFkbS52YWx1ZXMubGVuZ3RoICsgXCIpLiBQbGVhc2UgY2hlY2sgbGVuZ3RoIGZpcnN0LiBPdXQgb2YgYm91bmQgaW5kaWNlcyB3aWxsIG5vdCBiZSB0cmFja2VkIGJ5IE1vYlhcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbiAoaW5kZXgsIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBhZG0udmFsdWVzO1xyXG4gICAgICAgIGlmIChpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGF0IGluZGV4IGluIHJhbmdlXHJcbiAgICAgICAgICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKGFkbS5hdG9tKTtcclxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gdmFsdWVzW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyhhZG0pKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKGFkbSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBhZG0ucHJveHksXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGFkbS5lbmhhbmNlcihuZXdWYWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IG5ld1ZhbHVlICE9PSBvbGRWYWx1ZTtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGFkbS5ub3RpZnlBcnJheUNoaWxkVXBkYXRlKGluZGV4LCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSB2YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCBhIG5ldyBpdGVtXHJcbiAgICAgICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXkoaW5kZXgsIDAsIFtuZXdWYWx1ZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gb3V0IG9mIGJvdW5kc1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC5hcnJheV0gSW5kZXggb3V0IG9mIGJvdW5kcywgXCIgKyBpbmRleCArIFwiIGlzIGxhcmdlciB0aGFuIFwiICsgdmFsdWVzLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5bXHJcbiAgICBcImNvbmNhdFwiLFxyXG4gICAgXCJldmVyeVwiLFxyXG4gICAgXCJmaWx0ZXJcIixcclxuICAgIFwiZm9yRWFjaFwiLFxyXG4gICAgXCJpbmRleE9mXCIsXHJcbiAgICBcImpvaW5cIixcclxuICAgIFwibGFzdEluZGV4T2ZcIixcclxuICAgIFwibWFwXCIsXHJcbiAgICBcInJlZHVjZVwiLFxyXG4gICAgXCJyZWR1Y2VSaWdodFwiLFxyXG4gICAgXCJzbGljZVwiLFxyXG4gICAgXCJzb21lXCIsXHJcbiAgICBcInRvU3RyaW5nXCIsXHJcbiAgICBcInRvTG9jYWxlU3RyaW5nXCJcclxuXS5mb3JFYWNoKGZ1bmN0aW9uIChmdW5jTmFtZSkge1xyXG4gICAgYXJyYXlFeHRlbnNpb25zW2Z1bmNOYW1lXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XHJcbiAgICAgICAgYWRtLmF0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcclxuICAgICAgICB2YXIgcmVzID0gYWRtLmRlaGFuY2VWYWx1ZXMoYWRtLnZhbHVlcyk7XHJcbiAgICAgICAgcmV0dXJuIHJlc1tmdW5jTmFtZV0uYXBwbHkocmVzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufSk7XHJcbnZhciBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXCIsIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKTtcclxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlQXJyYXkodGhpbmcpIHtcclxuICAgIHJldHVybiBpc09iamVjdCh0aGluZykgJiYgaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbih0aGluZ1skbW9ieF0pO1xyXG59XG5cbnZhciBfYTtcclxudmFyIE9ic2VydmFibGVNYXBNYXJrZXIgPSB7fTtcclxuLy8ganVzdCBleHRlbmQgTWFwPyBTZWUgYWxzbyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9uZXN0aGFydXMvMTNiNGQ3NGYyZWY0YTJmNDM1N2RiZDNmYzIzYzFlNTRcclxuLy8gQnV0OiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzE1NTZcclxudmFyIE9ic2VydmFibGVNYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlTWFwKGluaXRpYWxEYXRhLCBlbmhhbmNlciwgbmFtZSkge1xyXG4gICAgICAgIGlmIChlbmhhbmNlciA9PT0gdm9pZCAwKSB7IGVuaGFuY2VyID0gZGVlcEVuaGFuY2VyOyB9XHJcbiAgICAgICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJPYnNlcnZhYmxlTWFwQFwiICsgZ2V0TmV4dElkKCk7IH1cclxuICAgICAgICB0aGlzLmVuaGFuY2VyID0gZW5oYW5jZXI7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzW19hXSA9IE9ic2VydmFibGVNYXBNYXJrZXI7XHJcbiAgICAgICAgdGhpcy5fa2V5c0F0b20gPSBjcmVhdGVBdG9tKHRoaXMubmFtZSArIFwiLmtleXMoKVwiKTtcclxuICAgICAgICB0aGlzW1N5bWJvbC50b1N0cmluZ1RhZ10gPSBcIk1hcFwiO1xyXG4gICAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibW9ieC5tYXAgcmVxdWlyZXMgTWFwIHBvbHlmaWxsIGZvciB0aGUgY3VycmVudCBicm93c2VyLiBDaGVjayBiYWJlbC1wb2x5ZmlsbCBvciBjb3JlLWpzL2VzNi9tYXAuanNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5faGFzTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMubWVyZ2UoaW5pdGlhbERhdGEpO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX2hhcyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5oYXMoa2V5KTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIWdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbilcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhcyhrZXkpO1xyXG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX2hhc01hcC5nZXQoa2V5KTtcclxuICAgICAgICBpZiAoIWVudHJ5KSB7XHJcbiAgICAgICAgICAgIC8vIHRvZG86IHJlcGxhY2Ugd2l0aCBhdG9tIChicmVha2luZyBjaGFuZ2UpXHJcbiAgICAgICAgICAgIHZhciBuZXdFbnRyeSA9IChlbnRyeSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUodGhpcy5faGFzKGtleSksIHJlZmVyZW5jZUVuaGFuY2VyLCB0aGlzLm5hbWUgKyBcIi5cIiArIHN0cmluZ2lmeUtleShrZXkpICsgXCI/XCIsIGZhbHNlKSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhc01hcC5zZXQoa2V5LCBuZXdFbnRyeSk7XHJcbiAgICAgICAgICAgIG9uQmVjb21lVW5vYnNlcnZlZChuZXdFbnRyeSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2hhc01hcC5kZWxldGUoa2V5KTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbnRyeS5nZXQoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBoYXNLZXkgPSB0aGlzLl9oYXMoa2V5KTtcclxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogaGFzS2V5ID8gXCJ1cGRhdGVcIiA6IFwiYWRkXCIsXHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIHZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzS2V5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlKGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fYWRkVmFsdWUoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRlbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgbmFtZToga2V5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcclxuICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB0aGlzLl9kYXRhLmdldChrZXkpLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IG5hbWU6IHRoaXMubmFtZSwga2V5OiBrZXkgfSkpO1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUhhc01hcEVudHJ5KGtleSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBfdGhpcy5fZGF0YS5nZXQoa2V5KTtcclxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUuc2V0TmV3VmFsdWUodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9kYXRhLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLl91cGRhdGVIYXNNYXBFbnRyeSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5faGFzTWFwLmdldChrZXkpO1xyXG4gICAgICAgIGlmIChlbnRyeSkge1xyXG4gICAgICAgICAgICBlbnRyeS5zZXROZXdWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLl91cGRhdGVWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGlzLl9kYXRhLmdldChrZXkpO1xyXG4gICAgICAgIG5ld1ZhbHVlID0gb2JzZXJ2YWJsZS5wcmVwYXJlTmV3VmFsdWUobmV3VmFsdWUpO1xyXG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEKSB7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcclxuICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvYnNlcnZhYmxlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2hhbmdlKSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcclxuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX2FkZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgbmV3VmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKHRoaXMuX2tleXNBdG9tKTtcclxuICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGVWYWx1ZShuZXdWYWx1ZSwgX3RoaXMuZW5oYW5jZXIsIF90aGlzLm5hbWUgKyBcIi5cIiArIHN0cmluZ2lmeUtleShrZXkpLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIF90aGlzLl9kYXRhLnNldChrZXksIG9ic2VydmFibGUpO1xyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ic2VydmFibGUudmFsdWU7IC8vIHZhbHVlIG1pZ2h0IGhhdmUgYmVlbiBjaGFuZ2VkXHJcbiAgICAgICAgICAgIF90aGlzLl91cGRhdGVIYXNNYXBFbnRyeShrZXksIHRydWUpO1xyXG4gICAgICAgICAgICBfdGhpcy5fa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XHJcbiAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRcIixcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcclxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oX19hc3NpZ24oe30sIGNoYW5nZSksIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlKHRoaXMuX2RhdGEuZ2V0KGtleSkuZ2V0KCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZSh1bmRlZmluZWQpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmRlaGFuY2VWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9rZXlzQXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmtleXMoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xyXG4gICAgICAgIHZhciBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSk7XHJcbiAgICAgICAgcmV0dXJuIG1ha2VJdGVyYWJsZSh7XHJcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SW5kZXggPCBrZXlzLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZTogc2VsZi5nZXQoa2V5c1tuZXh0SW5kZXgrK10pLCBkb25lOiBmYWxzZSB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiB7IGRvbmU6IHRydWUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xyXG4gICAgICAgIHZhciBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSk7XHJcbiAgICAgICAgcmV0dXJuIG1ha2VJdGVyYWJsZSh7XHJcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0SW5kZXggPCBrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW25leHRJbmRleCsrXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW2tleSwgc2VsZi5nZXQoa2V5KV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlWyhfYSA9ICRtb2J4LCBTeW1ib2wuaXRlcmF0b3IpXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xyXG4gICAgICAgIHZhciBlXzEsIF9iO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9jID0gX192YWx1ZXModGhpcyksIF9kID0gX2MubmV4dCgpOyAhX2QuZG9uZTsgX2QgPSBfYy5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfZSA9IF9fcmVhZChfZC52YWx1ZSwgMiksIGtleSA9IF9lWzBdLCB2YWx1ZSA9IF9lWzFdO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwga2V5LCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYiA9IF9jLnJldHVybikpIF9iLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIE1lcmdlIGFub3RoZXIgb2JqZWN0IGludG8gdGhpcyBvYmplY3QsIHJldHVybnMgdGhpcy4gKi9cclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG90aGVyKSkge1xyXG4gICAgICAgICAgICBvdGhlciA9IG90aGVyLnRvSlMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChvdGhlcikpXHJcbiAgICAgICAgICAgICAgICBnZXRQbGFpbk9iamVjdEtleXMob3RoZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gX3RoaXMuc2V0KGtleSwgb3RoZXJba2V5XSk7IH0pO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG90aGVyKSlcclxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2goZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9jID0gX19yZWFkKF9iLCAyKSwga2V5ID0gX2NbMF0sIHZhbHVlID0gX2NbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0VTNk1hcChvdGhlcikpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvdGhlci5jb25zdHJ1Y3RvciAhPT0gTWFwKVxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWwoXCJDYW5ub3QgaW5pdGlhbGl6ZSBmcm9tIGNsYXNzZXMgdGhhdCBpbmhlcml0IGZyb20gTWFwOiBcIiArIG90aGVyLmNvbnN0cnVjdG9yLm5hbWUpOyAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsgcmV0dXJuIF90aGlzLnNldChrZXksIHZhbHVlKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIGZhaWwoXCJDYW5ub3QgaW5pdGlhbGl6ZSBtYXAgZnJvbSBcIiArIG90aGVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlXzIsIF9iO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYyA9IF9fdmFsdWVzKF90aGlzLmtleXMoKSksIF9kID0gX2MubmV4dCgpOyAhX2QuZG9uZTsgX2QgPSBfYy5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9kLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxyXG4gICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYiA9IF9jLnJldHVybikpIF9iLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAodmFsdWVzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIGdyYWIgYWxsIHRoZSBrZXlzIHRoYXQgYXJlIHByZXNlbnQgaW4gdGhlIG5ldyBtYXAgYnV0IG5vdCBwcmVzZW50IGluIHRoZSBjdXJyZW50IG1hcFxyXG4gICAgICAgICAgICAvLyBhbmQgZGVsZXRlIHRoZW0gZnJvbSB0aGUgbWFwLCB0aGVuIG1lcmdlIHRoZSBuZXcgbWFwXHJcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBjYXVzZSByZWFjdGlvbnMgb25seSBvbiBjaGFuZ2VkIHZhbHVlc1xyXG4gICAgICAgICAgICB2YXIgbmV3S2V5cyA9IGdldE1hcExpa2VLZXlzKHZhbHVlcyk7XHJcbiAgICAgICAgICAgIHZhciBvbGRLZXlzID0gQXJyYXkuZnJvbShfdGhpcy5rZXlzKCkpO1xyXG4gICAgICAgICAgICB2YXIgbWlzc2luZ0tleXMgPSBvbGRLZXlzLmZpbHRlcihmdW5jdGlvbiAoaykgeyByZXR1cm4gbmV3S2V5cy5pbmRleE9mKGspID09PSAtMTsgfSk7XHJcbiAgICAgICAgICAgIG1pc3NpbmdLZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHsgcmV0dXJuIF90aGlzLmRlbGV0ZShrKTsgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLm1lcmdlKHZhbHVlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9ic2VydmFibGVNYXAucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9rZXlzQXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5zaXplO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgcGxhaW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGlzIG1hcC5cclxuICAgICAqIE5vdGUgdGhhdCBhbGwgdGhlIGtleXMgYmVpbmcgc3RyaW5naWZpZWQuXHJcbiAgICAgKiBJZiB0aGVyZSBhcmUgZHVwbGljYXRpbmcga2V5cyBhZnRlciBjb252ZXJ0aW5nIHRoZW0gdG8gc3RyaW5ncywgYmVoYXZpb3VyIGlzIHVuZGV0ZXJtaW5lZC5cclxuICAgICAqL1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9QT0pPID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlXzMsIF9iO1xyXG4gICAgICAgIHZhciByZXMgPSB7fTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYyA9IF9fdmFsdWVzKHRoaXMpLCBfZCA9IF9jLm5leHQoKTsgIV9kLmRvbmU7IF9kID0gX2MubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2UgPSBfX3JlYWQoX2QudmFsdWUsIDIpLCBrZXkgPSBfZVswXSwgdmFsdWUgPSBfZVsxXTtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGxpZSBhYm91dCBzeW1ib2wga2V5IHR5cGVzIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzE4NjNcclxuICAgICAgICAgICAgICAgIHJlc1t0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogc3RyaW5naWZ5S2V5KGtleSldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfZCAmJiAhX2QuZG9uZSAmJiAoX2IgPSBfYy5yZXR1cm4pKSBfYi5jYWxsKF9jKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc2hhbGxvdyBub24gb2JzZXJ2YWJsZSBvYmplY3QgY2xvbmUgb2YgdGhpcyBtYXAuXHJcbiAgICAgKiBOb3RlIHRoYXQgdGhlIHZhbHVlcyBtaWd0aCBzdGlsbCBiZSBvYnNlcnZhYmxlLiBGb3IgYSBkZWVwIGNsb25lIHVzZSBtb2J4LnRvSlMuXHJcbiAgICAgKi9cclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLnRvSlMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFVzZWQgYnkgSlNPTi5zdHJpbmdpZnlcclxuICAgICAgICByZXR1cm4gdGhpcy50b1BPSk8oKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiAodGhpcy5uYW1lICtcclxuICAgICAgICAgICAgXCJbeyBcIiArXHJcbiAgICAgICAgICAgIEFycmF5LmZyb20odGhpcy5rZXlzKCkpXHJcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHN0cmluZ2lmeUtleShrZXkpICsgXCI6IFwiICsgKFwiXCIgKyBfdGhpcy5nZXQoa2V5KSk7IH0pXHJcbiAgICAgICAgICAgICAgICAuam9pbihcIiwgXCIpICtcclxuICAgICAgICAgICAgXCIgfV1cIik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cclxuICAgICAqIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L29ic2VydmVcclxuICAgICAqIGZvciBjYWxsYmFjayBkZXRhaWxzXHJcbiAgICAgKi9cclxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICBpbnZhcmlhbnQoZmlyZUltbWVkaWF0ZWx5ICE9PSB0cnVlLCBcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgZmlyZUltbWVkaWF0ZWx5PXRydWUgaW4gY29tYmluYXRpb24gd2l0aCBtYXBzLlwiKTtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZU1hcDtcclxufSgpKTtcclxuLyogJ3ZhcicgZml4ZXMgc21hbGwtYnVpbGQgaXNzdWUgKi9cclxudmFyIGlzT2JzZXJ2YWJsZU1hcCA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJPYnNlcnZhYmxlTWFwXCIsIE9ic2VydmFibGVNYXApO1xuXG52YXIgX2EkMTtcclxudmFyIE9ic2VydmFibGVTZXRNYXJrZXIgPSB7fTtcclxudmFyIE9ic2VydmFibGVTZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlU2V0KGluaXRpYWxEYXRhLCBlbmhhbmNlciwgbmFtZSkge1xyXG4gICAgICAgIGlmIChlbmhhbmNlciA9PT0gdm9pZCAwKSB7IGVuaGFuY2VyID0gZGVlcEVuaGFuY2VyOyB9XHJcbiAgICAgICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJPYnNlcnZhYmxlU2V0QFwiICsgZ2V0TmV4dElkKCk7IH1cclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXNbX2EkMV0gPSBPYnNlcnZhYmxlU2V0TWFya2VyO1xyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5fYXRvbSA9IGNyZWF0ZUF0b20odGhpcy5uYW1lKTtcclxuICAgICAgICB0aGlzW1N5bWJvbC50b1N0cmluZ1RhZ10gPSBcIlNldFwiO1xyXG4gICAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibW9ieC5zZXQgcmVxdWlyZXMgU2V0IHBvbHlmaWxsIGZvciB0aGUgY3VycmVudCBicm93c2VyLiBDaGVjayBiYWJlbC1wb2x5ZmlsbCBvciBjb3JlLWpzL2VzNi9zZXQuanNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZW5oYW5jZXIgPSBmdW5jdGlvbiAobmV3Viwgb2xkVikgeyByZXR1cm4gZW5oYW5jZXIobmV3Viwgb2xkViwgbmFtZSk7IH07XHJcbiAgICAgICAgaWYgKGluaXRpYWxEYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZShpbml0aWFsRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuZGVoYW5jZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlXzEsIF9iO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYyA9IF9fdmFsdWVzKF90aGlzLl9kYXRhLnZhbHVlcygpKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfZC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVsZXRlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYiA9IF9jLnJldHVybikpIF9iLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2tGbiwgdGhpc0FyZykge1xyXG4gICAgICAgIHZhciBlXzIsIF9iO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9jID0gX192YWx1ZXModGhpcyksIF9kID0gX2MubmV4dCgpOyAhX2QuZG9uZTsgX2QgPSBfYy5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9kLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tGbi5jYWxsKHRoaXNBcmcsIHZhbHVlLCB2YWx1ZSwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfZCAmJiAhX2QuZG9uZSAmJiAoX2IgPSBfYy5yZXR1cm4pKSBfYi5jYWxsKF9jKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlU2V0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fYXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5zaXplO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLl9hdG9tKTtcclxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRcIixcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgLy8gVE9ETzogaWRlYWxseSwgdmFsdWUgPSBjaGFuZ2UudmFsdWUgd291bGQgYmUgZG9uZSBoZXJlLCBzbyB0aGF0IHZhbHVlcyBjYW4gYmVcclxuICAgICAgICAgICAgLy8gY2hhbmdlZCBieSBpbnRlcmNlcHRvci4gU2FtZSBhcHBsaWVzIGZvciBvdGhlciBTZXQgYW5kIE1hcCBhcGkncy5cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhcyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2RhdGEuYWRkKF90aGlzLmVuaGFuY2VyKHZhbHVlLCB1bmRlZmluZWQpKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9hdG9tLnJlcG9ydENoYW5nZWQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcclxuICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJkZWxldGVcIixcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhcyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxyXG4gICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkZWxldGVcIixcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oX19hc3NpZ24oe30sIGNoYW5nZSksIHsgbmFtZTogdGhpcy5uYW1lIH0pKTtcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2F0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2RhdGEuZGVsZXRlKHZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9hdG9tLnJlcG9ydE9ic2VydmVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuaGFzKHRoaXMuZGVoYW5jZVZhbHVlKHZhbHVlKSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmV4dEluZGV4ID0gMDtcclxuICAgICAgICB2YXIga2V5cyA9IEFycmF5LmZyb20odGhpcy5rZXlzKCkpO1xyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBBcnJheS5mcm9tKHRoaXMudmFsdWVzKCkpO1xyXG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGUoe1xyXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBuZXh0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBuZXh0SW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA8IHZhbHVlcy5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IFtrZXlzW2luZGV4XSwgdmFsdWVzW2luZGV4XV0sIGRvbmU6IGZhbHNlIH1cclxuICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fYXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgbmV4dEluZGV4ID0gMDtcclxuICAgICAgICB2YXIgb2JzZXJ2YWJsZVZhbHVlcyA9IEFycmF5LmZyb20odGhpcy5fZGF0YS52YWx1ZXMoKSk7XHJcbiAgICAgICAgcmV0dXJuIG1ha2VJdGVyYWJsZSh7XHJcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SW5kZXggPCBvYnNlcnZhYmxlVmFsdWVzLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZTogc2VsZi5kZWhhbmNlVmFsdWUob2JzZXJ2YWJsZVZhbHVlc1tuZXh0SW5kZXgrK10pLCBkb25lOiBmYWxzZSB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiB7IGRvbmU6IHRydWUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChpc09ic2VydmFibGVTZXQob3RoZXIpKSB7XHJcbiAgICAgICAgICAgIG90aGVyID0gb3RoZXIudG9KUygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG90aGVyKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBfdGhpcy5hZGQodmFsdWUpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0VTNlNldChvdGhlcikpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gX3RoaXMuYWRkKHZhbHVlKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZmFpbChcIkNhbm5vdCBpbml0aWFsaXplIHNldCBmcm9tIFwiICsgb3RoZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgLy8gVE9ETyAnZmlyZUltbWVkaWF0ZWx5JyBjYW4gYmUgdHJ1ZT9cclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgaW52YXJpYW50KGZpcmVJbW1lZGlhdGVseSAhPT0gdHJ1ZSwgXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IGZpcmVJbW1lZGlhdGVseT10cnVlIGluIGNvbWJpbmF0aW9uIHdpdGggc2V0cy5cIik7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLmludGVyY2VwdCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUudG9KUyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNldCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCJbIFwiICsgQXJyYXkuZnJvbSh0aGlzKS5qb2luKFwiLCBcIikgKyBcIiBdXCI7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGVbKF9hJDEgPSAkbW9ieCwgU3ltYm9sLml0ZXJhdG9yKV0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGVTZXQ7XHJcbn0oKSk7XHJcbnZhciBpc09ic2VydmFibGVTZXQgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZVNldFwiLCBPYnNlcnZhYmxlU2V0KTtcblxudmFyIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbih0YXJnZXQsIHZhbHVlcywgbmFtZSwgZGVmYXVsdEVuaGFuY2VyKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlcyA9PT0gdm9pZCAwKSB7IHZhbHVlcyA9IG5ldyBNYXAoKTsgfVxyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0RW5oYW5jZXIgPSBkZWZhdWx0RW5oYW5jZXI7XHJcbiAgICAgICAgdGhpcy5rZXlzQXRvbSA9IG5ldyBBdG9tKG5hbWUgKyBcIi5rZXlzXCIpO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5nZXQoa2V5KS5nZXQoKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGtleSwgbmV3VmFsdWUpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLnRhcmdldDtcclxuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IHRoaXMudmFsdWVzLmdldChrZXkpO1xyXG4gICAgICAgIGlmIChvYnNlcnZhYmxlIGluc3RhbmNlb2YgQ29tcHV0ZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaW50ZXJjZXB0XHJcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHkgfHwgaW5zdGFuY2UsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3VmFsdWUgPSBvYnNlcnZhYmxlLnByZXBhcmVOZXdWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgLy8gbm90aWZ5IHNweSAmIG9ic2VydmVyc1xyXG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEKSB7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcclxuICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5IHx8IGluc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvYnNlcnZhYmxlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2hhbmdlKSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcclxuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMucGVuZGluZ0tleXMgfHwgKHRoaXMucGVuZGluZ0tleXMgPSBuZXcgTWFwKCkpO1xyXG4gICAgICAgIHZhciBlbnRyeSA9IG1hcC5nZXQoa2V5KTtcclxuICAgICAgICBpZiAoZW50cnkpXHJcbiAgICAgICAgICAgIHJldHVybiBlbnRyeS5nZXQoKTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGV4aXN0cyA9ICEhdGhpcy52YWx1ZXMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIG9wdGltaXphdGlvbjogRG9uJ3QgaGF2ZSBhIHNlcGFyYXRlIG1hcCBmb3Igbm9uIGV4aXN0aW5nIGtleXMsXHJcbiAgICAgICAgICAgIC8vIGJ1dCBzdG9yZSB0aGVtIGluIHRoZSB2YWx1ZXMgbWFwIGluc3RlYWQsIHVzaW5nIGEgc3BlY2lhbCBzeW1ib2wgdG8gZGVub3RlIFwibm90IGV4aXN0aW5nXCJcclxuICAgICAgICAgICAgZW50cnkgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKGV4aXN0cywgcmVmZXJlbmNlRW5oYW5jZXIsIHRoaXMubmFtZSArIFwiLlwiICsgc3RyaW5naWZ5S2V5KGtleSkgKyBcIj9cIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgZW50cnkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnkuZ2V0KCk7IC8vIHJlYWQgdG8gc3Vic2NyaWJlXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuYWRkT2JzZXJ2YWJsZVByb3AgPSBmdW5jdGlvbiAocHJvcE5hbWUsIG5ld1ZhbHVlLCBlbmhhbmNlcikge1xyXG4gICAgICAgIGlmIChlbmhhbmNlciA9PT0gdm9pZCAwKSB7IGVuaGFuY2VyID0gdGhpcy5kZWZhdWx0RW5oYW5jZXI7IH1cclxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XHJcbiAgICAgICAgYXNzZXJ0UHJvcGVydHlDb25maWd1cmFibGUodGFyZ2V0LCBwcm9wTmFtZSk7XHJcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBwcm9wTmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkXCIsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKG5ld1ZhbHVlLCBlbmhhbmNlciwgdGhpcy5uYW1lICsgXCIuXCIgKyBzdHJpbmdpZnlLZXkocHJvcE5hbWUpLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KHByb3BOYW1lLCBvYnNlcnZhYmxlKTtcclxuICAgICAgICBuZXdWYWx1ZSA9IG9ic2VydmFibGUudmFsdWU7IC8vIG9ic2VydmFibGVWYWx1ZSBtaWdodCBoYXZlIGNoYW5nZWQgaXRcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wTmFtZSwgZ2VuZXJhdGVPYnNlcnZhYmxlUHJvcENvbmZpZyhwcm9wTmFtZSkpO1xyXG4gICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbihwcm9wTmFtZSwgbmV3VmFsdWUpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuYWRkQ29tcHV0ZWRQcm9wID0gZnVuY3Rpb24gKHByb3BlcnR5T3duZXIsIC8vIHdoZXJlIGlzIHRoZSBwcm9wZXJ0eSBkZWNsYXJlZD9cclxuICAgIHByb3BOYW1lLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xyXG4gICAgICAgIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCB0aGlzLm5hbWUgKyBcIi5cIiArIHN0cmluZ2lmeUtleShwcm9wTmFtZSk7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KHByb3BOYW1lLCBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRpb25zKSk7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5T3duZXIgPT09IHRhcmdldCB8fCBpc1Byb3BlcnR5Q29uZmlndXJhYmxlKHByb3BlcnR5T3duZXIsIHByb3BOYW1lKSlcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BlcnR5T3duZXIsIHByb3BOYW1lLCBnZW5lcmF0ZUNvbXB1dGVkUHJvcENvbmZpZyhwcm9wTmFtZSkpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmICghdGhpcy52YWx1ZXMuaGFzKGtleSkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XHJcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlbW92ZVwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc3RhcnRCYXRjaCgpO1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCk7XHJcbiAgICAgICAgICAgIHZhciBvbGRPYnNlcnZhYmxlID0gdGhpcy52YWx1ZXMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IG9sZE9ic2VydmFibGUgJiYgb2xkT2JzZXJ2YWJsZS5nZXQoKTtcclxuICAgICAgICAgICAgb2xkT2JzZXJ2YWJsZSAmJiBvbGRPYnNlcnZhYmxlLnNldCh1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAvLyBub3RpZnkga2V5IGFuZCBrZXlzZXQgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgIHRoaXMua2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGVuZGluZ0tleXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMucGVuZGluZ0tleXMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkpXHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuc2V0KGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBkZWxldGUgdGhlIHByb3BcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMudGFyZ2V0W2tleV07XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XHJcbiAgICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlbW92ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcclxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IG5hbWU6IHRoaXMubmFtZSwga2V5OiBrZXkgfSkpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZ5KVxyXG4gICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICBlbmRCYXRjaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmlsbGVnYWxBY2Nlc3MgPSBmdW5jdGlvbiAob3duZXIsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhpcyBoYXBwZW5zIGlmIGEgcHJvcGVydHkgaXMgYWNjZXNzZWQgdGhyb3VnaCB0aGUgcHJvdG90eXBlIGNoYWluLCBidXQgdGhlIHByb3BlcnR5IHdhc1xyXG4gICAgICAgICAqIGRlY2xhcmVkIGRpcmVjdGx5IGFzIG93biBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogRS5nLjpcclxuICAgICAgICAgKiBjbGFzcyBBIHtcclxuICAgICAgICAgKiB9XHJcbiAgICAgICAgICogZXh0ZW5kT2JzZXJ2YWJsZShBLnByb3RvdHlwZSwgeyB4OiAxIH0pXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBjbGFzc0IgZXh0ZW5zIEEge1xyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKiBjb25zb2xlLmxvZyhuZXcgQigpLngpXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBJdCBpcyB1bmNsZWFyIHdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkICdzdGF0aWMnIG9yIGluaGVyaXRlZC5cclxuICAgICAgICAgKiBFaXRoZXIgdXNlIGBjb25zb2xlLmxvZyhBLngpYFxyXG4gICAgICAgICAqIG9yOiBkZWNvcmF0ZShBLCB7IHg6IG9ic2VydmFibGUgfSlcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFdoZW4gdXNpbmcgZGVjb3JhdGUsIHRoZSBwcm9wZXJ0eSB3aWxsIGFsd2F5cyBiZSByZWRlY2xhcmVkIGFzIG93biBwcm9wZXJ0eSBvbiB0aGUgYWN0dWFsIGluc3RhbmNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiUHJvcGVydHkgJ1wiICsgcHJvcE5hbWUgKyBcIicgb2YgJ1wiICsgb3duZXIgKyBcIicgd2FzIGFjY2Vzc2VkIHRocm91Z2ggdGhlIHByb3RvdHlwZSBjaGFpbi4gVXNlICdkZWNvcmF0ZScgaW5zdGVhZCB0byBkZWNsYXJlIHRoZSBwcm9wIG9yIGFjY2VzcyBpdCBzdGF0aWNhbGx5IHRocm91Z2ggaXQncyBvd25lclwiKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmVzIHRoaXMgb2JqZWN0LiBUcmlnZ2VycyBmb3IgdGhlIGV2ZW50cyAnYWRkJywgJ3VwZGF0ZScgYW5kICdkZWxldGUnLlxyXG4gICAgICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qvb2JzZXJ2ZVxyXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcclxuICAgICAqL1xyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBmaXJlSW1tZWRpYXRlbHkpIHtcclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcclxuICAgICAgICAgICAgaW52YXJpYW50KGZpcmVJbW1lZGlhdGVseSAhPT0gdHJ1ZSwgXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IHRoZSBmaXJlIGltbWVkaWF0ZWx5IHByb3BlcnR5IGZvciBvYnNlcnZhYmxlIG9iamVjdHMuXCIpO1xyXG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmludGVyY2VwdCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5ub3RpZnlQcm9wZXJ0eUFkZGl0aW9uID0gZnVuY3Rpb24gKGtleSwgbmV3VmFsdWUpIHtcclxuICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xyXG4gICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcclxuICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxyXG4gICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkXCIsXHJcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHkgfHwgdGhpcy50YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXHJcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjaGFuZ2UpLCB7IG5hbWU6IHRoaXMubmFtZSwga2V5OiBrZXkgfSkpO1xyXG4gICAgICAgIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xyXG4gICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxyXG4gICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcclxuICAgICAgICBpZiAodGhpcy5wZW5kaW5nS2V5cykge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnBlbmRpbmdLZXlzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAoZW50cnkpXHJcbiAgICAgICAgICAgICAgICBlbnRyeS5zZXQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMua2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuZ2V0S2V5cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZV8xLCBfYTtcclxuICAgICAgICB0aGlzLmtleXNBdG9tLnJlcG9ydE9ic2VydmVkKCk7XHJcbiAgICAgICAgLy8gcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0aGlzLnZhbHVlcykgYXMgYW55XHJcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy52YWx1ZXMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2QgPSBfX3JlYWQoX2MudmFsdWUsIDIpLCBrZXkgPSBfZFswXSwgdmFsdWUgPSBfZFsxXTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9ic2VydmFibGVWYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb247XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQsIG5hbWUsIGRlZmF1bHRFbmhhbmNlcikge1xyXG4gICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJcIjsgfVxyXG4gICAgaWYgKGRlZmF1bHRFbmhhbmNlciA9PT0gdm9pZCAwKSB7IGRlZmF1bHRFbmhhbmNlciA9IGRlZXBFbmhhbmNlcjsgfVxyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsICRtb2J4KSlcclxuICAgICAgICByZXR1cm4gdGFyZ2V0WyRtb2J4XTtcclxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgIGludmFyaWFudChPYmplY3QuaXNFeHRlbnNpYmxlKHRhcmdldCksIFwiQ2Fubm90IG1ha2UgdGhlIGRlc2lnbmF0ZWQgb2JqZWN0IG9ic2VydmFibGU7IGl0IGlzIG5vdCBleHRlbnNpYmxlXCIpO1xyXG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgbmFtZSA9ICh0YXJnZXQuY29uc3RydWN0b3IubmFtZSB8fCBcIk9ic2VydmFibGVPYmplY3RcIikgKyBcIkBcIiArIGdldE5leHRJZCgpO1xyXG4gICAgaWYgKCFuYW1lKVxyXG4gICAgICAgIG5hbWUgPSBcIk9ic2VydmFibGVPYmplY3RAXCIgKyBnZXROZXh0SWQoKTtcclxuICAgIHZhciBhZG0gPSBuZXcgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKHRhcmdldCwgbmV3IE1hcCgpLCBzdHJpbmdpZnlLZXkobmFtZSksIGRlZmF1bHRFbmhhbmNlcik7XHJcbiAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgJG1vYngsIGFkbSk7XHJcbiAgICByZXR1cm4gYWRtO1xyXG59XHJcbnZhciBvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxudmFyIGNvbXB1dGVkUHJvcGVydHlDb25maWdzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuZnVuY3Rpb24gZ2VuZXJhdGVPYnNlcnZhYmxlUHJvcENvbmZpZyhwcm9wTmFtZSkge1xyXG4gICAgcmV0dXJuIChvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzW3Byb3BOYW1lXSB8fFxyXG4gICAgICAgIChvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzW3Byb3BOYW1lXSA9IHtcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWyRtb2J4XS5yZWFkKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgdGhpc1skbW9ieF0ud3JpdGUocHJvcE5hbWUsIHYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIob3duZXIpIHtcclxuICAgIHZhciBhZG0gPSBvd25lclskbW9ieF07XHJcbiAgICBpZiAoIWFkbSkge1xyXG4gICAgICAgIC8vIGJlY2F1c2UgY29tcHV0ZWQgcHJvcHMgYXJlIGRlY2xhcmVkIG9uIHByb3R5LFxyXG4gICAgICAgIC8vIHRoZSBjdXJyZW50IGluc3RhbmNlIG1pZ2h0IG5vdCBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgeWV0XHJcbiAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKG93bmVyKTtcclxuICAgICAgICByZXR1cm4gb3duZXJbJG1vYnhdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFkbTtcclxufVxyXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbXB1dGVkUHJvcENvbmZpZyhwcm9wTmFtZSkge1xyXG4gICAgcmV0dXJuIChjb21wdXRlZFByb3BlcnR5Q29uZmlnc1twcm9wTmFtZV0gfHxcclxuICAgICAgICAoY29tcHV0ZWRQcm9wZXJ0eUNvbmZpZ3NbcHJvcE5hbWVdID0ge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLmNvbXB1dGVkQ29uZmlndXJhYmxlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb25Gb3JDb21wdXRlZFByb3BPd25lcih0aGlzKS5yZWFkKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2V0QWRtaW5pc3RyYXRpb25Gb3JDb21wdXRlZFByb3BPd25lcih0aGlzKS53cml0ZShwcm9wTmFtZSwgdik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbn1cclxudmFyIGlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblwiLCBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24pO1xyXG5mdW5jdGlvbiBpc09ic2VydmFibGVPYmplY3QodGhpbmcpIHtcclxuICAgIGlmIChpc09iamVjdCh0aGluZykpIHtcclxuICAgICAgICAvLyBJbml0aWFsaXplcnMgcnVuIGxhemlseSB3aGVuIHRyYW5zcGlsaW5nIHRvIGJhYmVsLCBzbyBtYWtlIHN1cmUgdGhleSBhcmUgcnVuLi4uXHJcbiAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaW5nKTtcclxuICAgICAgICByZXR1cm4gaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24odGhpbmdbJG1vYnhdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxuXG5mdW5jdGlvbiBnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSkge1xyXG4gICAgaWYgKHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiB0aGluZyAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChpc09ic2VydmFibGVBcnJheSh0aGluZykpIHtcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFwiSXQgaXMgbm90IHBvc3NpYmxlIHRvIGdldCBpbmRleCBhdG9tcyBmcm9tIGFycmF5c1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaW5nWyRtb2J4XS5hdG9tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KHRoaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpbmdbJG1vYnhdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSkge1xyXG4gICAgICAgICAgICB2YXIgYW55VGhpbmcgPSB0aGluZztcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYW55VGhpbmcuX2tleXNBdG9tO1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFueVRoaW5nLl9kYXRhLmdldChwcm9wZXJ0eSkgfHwgYW55VGhpbmcuX2hhc01hcC5nZXQocHJvcGVydHkpO1xyXG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUpXHJcbiAgICAgICAgICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFwidGhlIGVudHJ5ICdcIiArIHByb3BlcnR5ICsgXCInIGRvZXMgbm90IGV4aXN0IGluIHRoZSBvYnNlcnZhYmxlIG1hcCAnXCIgKyBnZXREZWJ1Z05hbWUodGhpbmcpICsgXCInXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZXJzIHJ1biBsYXppbHkgd2hlbiB0cmFuc3BpbGluZyB0byBiYWJlbCwgc28gbWFrZSBzdXJlIHRoZXkgYXJlIHJ1bi4uLlxyXG4gICAgICAgIGluaXRpYWxpemVJbnN0YW5jZSh0aGluZyk7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5ICYmICF0aGluZ1skbW9ieF0pXHJcbiAgICAgICAgICAgIHRoaW5nW3Byb3BlcnR5XTsgLy8gU2VlICMxMDcyXHJcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh0aGluZykpIHtcclxuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcInBsZWFzZSBzcGVjaWZ5IGEgcHJvcGVydHlcIik7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpbmdbJG1vYnhdLnZhbHVlcy5nZXQocHJvcGVydHkpO1xyXG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUpXHJcbiAgICAgICAgICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFwibm8gb2JzZXJ2YWJsZSBwcm9wZXJ0eSAnXCIgKyBwcm9wZXJ0eSArIFwiJyBmb3VuZCBvbiB0aGUgb2JzZXJ2YWJsZSBvYmplY3QgJ1wiICsgZ2V0RGVidWdOYW1lKHRoaW5nKSArIFwiJ1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0F0b20odGhpbmcpIHx8IGlzQ29tcHV0ZWRWYWx1ZSh0aGluZykgfHwgaXNSZWFjdGlvbih0aGluZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKGlzUmVhY3Rpb24odGhpbmdbJG1vYnhdKSkge1xyXG4gICAgICAgICAgICAvLyBkaXNwb3NlciBmdW5jdGlvblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpbmdbJG1vYnhdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcIkNhbm5vdCBvYnRhaW4gYXRvbSBmcm9tIFwiICsgdGhpbmcpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wZXJ0eSkge1xyXG4gICAgaWYgKCF0aGluZylcclxuICAgICAgICBmYWlsKFwiRXhwZWN0aW5nIHNvbWUgb2JqZWN0XCIpO1xyXG4gICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSk7XHJcbiAgICBpZiAoaXNBdG9tKHRoaW5nKSB8fCBpc0NvbXB1dGVkVmFsdWUodGhpbmcpIHx8IGlzUmVhY3Rpb24odGhpbmcpKVxyXG4gICAgICAgIHJldHVybiB0aGluZztcclxuICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpXHJcbiAgICAgICAgcmV0dXJuIHRoaW5nO1xyXG4gICAgLy8gSW5pdGlhbGl6ZXJzIHJ1biBsYXppbHkgd2hlbiB0cmFuc3BpbGluZyB0byBiYWJlbCwgc28gbWFrZSBzdXJlIHRoZXkgYXJlIHJ1bi4uLlxyXG4gICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaW5nKTtcclxuICAgIGlmICh0aGluZ1skbW9ieF0pXHJcbiAgICAgICAgcmV0dXJuIHRoaW5nWyRtb2J4XTtcclxuICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQ2Fubm90IG9idGFpbiBhZG1pbmlzdHJhdGlvbiBmcm9tIFwiICsgdGhpbmcpO1xyXG59XHJcbmZ1bmN0aW9uIGdldERlYnVnTmFtZSh0aGluZywgcHJvcGVydHkpIHtcclxuICAgIHZhciBuYW1lZDtcclxuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIG5hbWVkID0gZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpO1xyXG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSB8fCBpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpXHJcbiAgICAgICAgbmFtZWQgPSBnZXRBZG1pbmlzdHJhdGlvbih0aGluZyk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nKTsgLy8gdmFsaWQgZm9yIGFycmF5cyBhcyB3ZWxsXHJcbiAgICByZXR1cm4gbmFtZWQubmFtZTtcclxufVxuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xyXG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYiwgZGVwdGgpIHtcclxuICAgIGlmIChkZXB0aCA9PT0gdm9pZCAwKSB7IGRlcHRoID0gLTE7IH1cclxuICAgIHJldHVybiBlcShhLCBiLCBkZXB0aCk7XHJcbn1cclxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvNWMyMzdhN2M2ODJmYjY4ZmQ1Mzc4MjAzZjBiZjIyZGNlMTYyNDg1NC91bmRlcnNjb3JlLmpzI0wxMTg2LUwxMjg5XHJcbi8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuXHJcbmZ1bmN0aW9uIGVxKGEsIGIsIGRlcHRoLCBhU3RhY2ssIGJTdGFjaykge1xyXG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxyXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXHJcbiAgICBpZiAoYSA9PT0gYilcclxuICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XHJcbiAgICAvLyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgb25seSBlcXVhbCB0byBpdHNlbGYgKHN0cmljdCBjb21wYXJpc29uKS5cclxuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXHJcbiAgICBpZiAoYSAhPT0gYSlcclxuICAgICAgICByZXR1cm4gYiAhPT0gYjtcclxuICAgIC8vIEV4aGF1c3QgcHJpbWl0aXZlIGNoZWNrc1xyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgYTtcclxuICAgIGlmICh0eXBlICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiAhPSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXHJcbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcclxuICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcclxuICAgICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cclxuICAgICAgICBjYXNlIFwiW29iamVjdCBSZWdFeHBdXCI6XHJcbiAgICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcclxuICAgICAgICBjYXNlIFwiW29iamVjdCBTdHJpbmddXCI6XHJcbiAgICAgICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXHJcbiAgICAgICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cclxuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBhID09PSBcIlwiICsgYjtcclxuICAgICAgICBjYXNlIFwiW29iamVjdCBOdW1iZXJdXCI6XHJcbiAgICAgICAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXHJcbiAgICAgICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxyXG4gICAgICAgICAgICBpZiAoK2EgIT09ICthKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICtiICE9PSArYjtcclxuICAgICAgICAgICAgLy8gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvciBvdGhlciBudW1lcmljIHZhbHVlcy5cclxuICAgICAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcclxuICAgICAgICBjYXNlIFwiW29iamVjdCBEYXRlXVwiOlxyXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IEJvb2xlYW5dXCI6XHJcbiAgICAgICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcclxuICAgICAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xyXG4gICAgICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXHJcbiAgICAgICAgICAgIHJldHVybiArYSA9PT0gK2I7XHJcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU3ltYm9sXVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLnZhbHVlT2YuY2FsbChhKSA9PT0gU3ltYm9sLnZhbHVlT2YuY2FsbChiKSk7XHJcbiAgICAgICAgY2FzZSBcIltvYmplY3QgTWFwXVwiOlxyXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFNldF1cIjpcclxuICAgICAgICAgICAgLy8gTWFwcyBhbmQgU2V0cyBhcmUgdW53cmFwcGVkIHRvIGFycmF5cyBvZiBlbnRyeS1wYWlycywgYWRkaW5nIGFuIGluY2lkZW50YWwgbGV2ZWwuXHJcbiAgICAgICAgICAgIC8vIEhpZGUgdGhpcyBleHRyYSBsZXZlbCBieSBpbmNyZWFzaW5nIHRoZSBkZXB0aC5cclxuICAgICAgICAgICAgaWYgKGRlcHRoID49IDApIHtcclxuICAgICAgICAgICAgICAgIGRlcHRoKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cclxuICAgIGEgPSB1bndyYXAoYSk7XHJcbiAgICBiID0gdW53cmFwKGIpO1xyXG4gICAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xyXG4gICAgaWYgKCFhcmVBcnJheXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGEgIT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgYiAhPSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXHJcbiAgICAgICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cclxuICAgICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XHJcbiAgICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJlxyXG4gICAgICAgICAgICAhKHR5cGVvZiBhQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmXHJcbiAgICAgICAgICAgICAgICBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgYkN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG4gICAgICAgICAgICAgICAgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcikgJiZcclxuICAgICAgICAgICAgKFwiY29uc3RydWN0b3JcIiBpbiBhICYmIFwiY29uc3RydWN0b3JcIiBpbiBiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGRlcHRoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZGVwdGggPCAwKSB7XHJcbiAgICAgICAgZGVwdGggPSAtMTtcclxuICAgIH1cclxuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcclxuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxyXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxyXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxyXG4gICAgYVN0YWNrID0gYVN0YWNrIHx8IFtdO1xyXG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xyXG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XHJcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcclxuICAgICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcclxuICAgICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXHJcbiAgICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09PSBhKVxyXG4gICAgICAgICAgICByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT09IGI7XHJcbiAgICB9XHJcbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXHJcbiAgICBhU3RhY2sucHVzaChhKTtcclxuICAgIGJTdGFjay5wdXNoKGIpO1xyXG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuXHJcbiAgICBpZiAoYXJlQXJyYXlzKSB7XHJcbiAgICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXHJcbiAgICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xyXG4gICAgICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBkZXB0aCAtIDEsIGFTdGFjaywgYlN0YWNrKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cclxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgICAgIHZhciBrZXkgPSB2b2lkIDA7XHJcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XHJcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xyXG4gICAgICAgICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXJcclxuICAgICAgICAgICAga2V5ID0ga2V5c1tsZW5ndGhdO1xyXG4gICAgICAgICAgICBpZiAoIShoYXMkMShiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBkZXB0aCAtIDEsIGFTdGFjaywgYlN0YWNrKSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXHJcbiAgICBhU3RhY2sucG9wKCk7XHJcbiAgICBiU3RhY2sucG9wKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiB1bndyYXAoYSkge1xyXG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KGEpKVxyXG4gICAgICAgIHJldHVybiBhLnNsaWNlKCk7XHJcbiAgICBpZiAoaXNFUzZNYXAoYSkgfHwgaXNPYnNlcnZhYmxlTWFwKGEpKVxyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGEuZW50cmllcygpKTtcclxuICAgIGlmIChpc0VTNlNldChhKSB8fCBpc09ic2VydmFibGVTZXQoYSkpXHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYS5lbnRyaWVzKCkpO1xyXG4gICAgcmV0dXJuIGE7XHJcbn1cclxuZnVuY3Rpb24gaGFzJDEoYSwga2V5KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGtleSk7XHJcbn1cblxuZnVuY3Rpb24gbWFrZUl0ZXJhYmxlKGl0ZXJhdG9yKSB7XHJcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZ2V0U2VsZjtcclxuICAgIHJldHVybiBpdGVyYXRvcjtcclxufVxyXG5mdW5jdGlvbiBnZXRTZWxmKCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cblxuLypcclxuVGhlIG9ubHkgcmVhc29uIGZvciB0aGlzIGZpbGUgdG8gZXhpc3QgaXMgcHVyZSBob3Jyb3I6XHJcbldpdGhvdXQgaXQgcm9sbHVwIGNhbiBtYWtlIHRoZSBidW5kbGluZyBmYWlsIGF0IGFueSBwb2ludCBpbiB0aW1lOyB3aGVuIGl0IHJvbGxzIHVwIHRoZSBmaWxlcyBpbiB0aGUgd3Jvbmcgb3JkZXJcclxuaXQgd2lsbCBjYXVzZSB1bmRlZmluZWQgZXJyb3JzIChmb3IgZXhhbXBsZSBiZWNhdXNlIHN1cGVyIGNsYXNzZXMgb3IgbG9jYWwgdmFyaWFibGVzIG5vdCBiZWluZyBob2lzdGVkKS5cclxuV2l0aCB0aGlzIGZpbGUgdGhhdCB3aWxsIHN0aWxsIGhhcHBlbixcclxuYnV0IGF0IGxlYXN0IGluIHRoaXMgZmlsZSB3ZSBjYW4gbWFnaWNhbGx5IHJlb3JkZXIgdGhlIGltcG9ydHMgd2l0aCB0cmlhbCBhbmQgZXJyb3IgdW50aWwgdGhlIGJ1aWxkIHN1Y2NlZWRzIGFnYWluLlxyXG4qL1xuXG4vKipcclxuICogKGMpIE1pY2hlbCBXZXN0c3RyYXRlIDIwMTUgLSAyMDE4XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKlxyXG4gKiBXZWxjb21lIHRvIHRoZSBtb2J4IHNvdXJjZXMhIFRvIGdldCBhbiBnbG9iYWwgb3ZlcnZpZXcgb2YgaG93IE1vYlggaW50ZXJuYWxseSB3b3JrcyxcclxuICogdGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gc3RhcnQ6XHJcbiAqIGh0dHBzOi8vbWVkaXVtLmNvbS9AbXdlc3RzdHJhdGUvYmVjb21pbmctZnVsbHktcmVhY3RpdmUtYW4taW4tZGVwdGgtZXhwbGFuYXRpb24tb2YtbW9ic2VydmFibGUtNTU5OTUyNjJhMjU0Iy54dmJoNnFkNzRcclxuICpcclxuICogU291cmNlIGZvbGRlcnM6XHJcbiAqID09PT09PT09PT09PT09PVxyXG4gKlxyXG4gKiAtIGFwaS8gICAgIE1vc3Qgb2YgdGhlIHB1YmxpYyBzdGF0aWMgbWV0aG9kcyBleHBvc2VkIGJ5IHRoZSBtb2R1bGUgY2FuIGJlIGZvdW5kIGhlcmUuXHJcbiAqIC0gY29yZS8gICAgSW1wbGVtZW50YXRpb24gb2YgdGhlIE1vYlggYWxnb3JpdGhtOyBhdG9tcywgZGVyaXZhdGlvbnMsIHJlYWN0aW9ucywgZGVwZW5kZW5jeSB0cmVlcywgb3B0aW1pemF0aW9ucy4gQ29vbCBzdHVmZiBjYW4gYmUgZm91bmQgaGVyZS5cclxuICogLSB0eXBlcy8gICBBbGwgdGhlIG1hZ2ljIHRoYXQgaXMgbmVlZCB0byBoYXZlIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCB2YWx1ZXMgaXMgaW4gdGhpcyBmb2xkZXIuIEluY2x1ZGluZyB0aGUgbW9kaWZpZXJzIGxpa2UgYGFzRmxhdGAuXHJcbiAqIC0gdXRpbHMvICAgVXRpbGl0eSBzdHVmZi5cclxuICpcclxuICovXHJcbmlmICh0eXBlb2YgUHJveHkgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnhdIE1vYlggNSsgcmVxdWlyZXMgUHJveHkgYW5kIFN5bWJvbCBvYmplY3RzLiBJZiB5b3VyIGVudmlyb25tZW50IGRvZXNuJ3Qgc3VwcG9ydCBTeW1ib2wgb3IgUHJveHkgb2JqZWN0cywgcGxlYXNlIGRvd25ncmFkZSB0byBNb2JYIDQuIEZvciBSZWFjdCBOYXRpdmUgQW5kcm9pZCwgY29uc2lkZXIgdXBncmFkaW5nIEpTQ29yZS5cIik7XHJcbn1cclxudHJ5IHtcclxuICAgIC8vIGRlZmluZSBwcm9jZXNzLmVudiBpZiBuZWVkZWRcclxuICAgIC8vIGlmIHRoaXMgaXMgbm90IGEgcHJvZHVjdGlvbiBidWlsZCBpbiB0aGUgZmlyc3QgcGxhY2VcclxuICAgIC8vIChpbiB3aGljaCBjYXNlIHRoZSBleHByZXNzaW9uIGJlbG93IHdvdWxkIGJlIHN1YnN0aXR1dGVkIHdpdGggJ3Byb2R1Y3Rpb24nKVxyXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XHJcbn1cclxuY2F0Y2ggKGUpIHtcclxuICAgIHZhciBnID0gZ2V0R2xvYmFsKCk7XHJcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgZy5wcm9jZXNzID0ge307XHJcbiAgICBnLnByb2Nlc3MuZW52ID0ge307XHJcbn1cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIHRlc3RDb2RlTWluaWZpY2F0aW9uKCkgeyB9XHJcbiAgICBpZiAodGVzdENvZGVNaW5pZmljYXRpb24ubmFtZSAhPT0gXCJ0ZXN0Q29kZU1pbmlmaWNhdGlvblwiICYmXHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXHJcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LklHTk9SRV9NT0JYX01JTklGWV9XQVJOSU5HICE9PSBcInRydWVcIikge1xyXG4gICAgICAgIC8vIHRyaWNrIHNvIGl0IGRvZXNuJ3QgZ2V0IHJlcGxhY2VkXHJcbiAgICAgICAgdmFyIHZhck5hbWUgPSBbXCJwcm9jZXNzXCIsIFwiZW52XCIsIFwiTk9ERV9FTlZcIl0uam9pbihcIi5cIik7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIHlvdSBhcmUgcnVubmluZyBhIG1pbmlmaWVkIGJ1aWxkLCBidXQgJ1wiICsgdmFyTmFtZSArIFwiJyB3YXMgbm90IHNldCB0byAncHJvZHVjdGlvbicgaW4geW91ciBidW5kbGVyLiBUaGlzIHJlc3VsdHMgaW4gYW4gdW5uZWNlc3NhcmlseSBsYXJnZSBhbmQgc2xvdyBidW5kbGVcIik7XHJcbiAgICB9XHJcbn0pKCk7XHJcbmlmICh0eXBlb2YgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09IFwib2JqZWN0XCIpIHtcclxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZHlrb2cvbW9ieC1kZXZ0b29scy9cclxuICAgIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdE1vYngoe1xyXG4gICAgICAgIHNweTogc3B5LFxyXG4gICAgICAgIGV4dHJhczoge1xyXG4gICAgICAgICAgICBnZXREZWJ1Z05hbWU6IGdldERlYnVnTmFtZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJG1vYng6ICRtb2J4XHJcbiAgICB9KTtcclxufVxuXG5leHBvcnQgeyAkbW9ieCwgRmxvd0NhbmNlbGxhdGlvbkVycm9yLCBJRGVyaXZhdGlvblN0YXRlLCBPYnNlcnZhYmxlTWFwLCBPYnNlcnZhYmxlU2V0LCBSZWFjdGlvbiwgYWxsb3dTdGF0ZUNoYW5nZXMgYXMgX2FsbG93U3RhdGVDaGFuZ2VzLCBhbGxvd1N0YXRlQ2hhbmdlc0luc2lkZUNvbXB1dGVkIGFzIF9hbGxvd1N0YXRlQ2hhbmdlc0luc2lkZUNvbXB1dGVkLCBhbGxvd1N0YXRlUmVhZHNFbmQgYXMgX2FsbG93U3RhdGVSZWFkc0VuZCwgYWxsb3dTdGF0ZVJlYWRzU3RhcnQgYXMgX2FsbG93U3RhdGVSZWFkc1N0YXJ0LCBfZW5kQWN0aW9uLCBnZXRBZG1pbmlzdHJhdGlvbiBhcyBfZ2V0QWRtaW5pc3RyYXRpb24sIGdldEdsb2JhbFN0YXRlIGFzIF9nZXRHbG9iYWxTdGF0ZSwgaW50ZXJjZXB0UmVhZHMgYXMgX2ludGVyY2VwdFJlYWRzLCBpc0NvbXB1dGluZ0Rlcml2YXRpb24gYXMgX2lzQ29tcHV0aW5nRGVyaXZhdGlvbiwgcmVzZXRHbG9iYWxTdGF0ZSBhcyBfcmVzZXRHbG9iYWxTdGF0ZSwgX3N0YXJ0QWN0aW9uLCBhY3Rpb24sIGF1dG9ydW4sIGNvbXBhcmVyLCBjb21wdXRlZCwgY29uZmlndXJlLCBjcmVhdGVBdG9tLCBkZWNvcmF0ZSwgZW50cmllcywgZXh0ZW5kT2JzZXJ2YWJsZSwgZmxvdywgZ2V0LCBnZXRBdG9tLCBnZXREZWJ1Z05hbWUsIGdldERlcGVuZGVuY3lUcmVlLCBnZXRPYnNlcnZlclRyZWUsIGhhcywgaW50ZXJjZXB0LCBpc0FjdGlvbiwgaXNBcnJheUxpa2UsIGlzT2JzZXJ2YWJsZVZhbHVlIGFzIGlzQm94ZWRPYnNlcnZhYmxlLCBpc0NvbXB1dGVkLCBpc0NvbXB1dGVkUHJvcCwgaXNGbG93Q2FuY2VsbGF0aW9uRXJyb3IsIGlzT2JzZXJ2YWJsZSwgaXNPYnNlcnZhYmxlQXJyYXksIGlzT2JzZXJ2YWJsZU1hcCwgaXNPYnNlcnZhYmxlT2JqZWN0LCBpc09ic2VydmFibGVQcm9wLCBpc09ic2VydmFibGVTZXQsIGtleXMsIG9ic2VydmFibGUsIG9ic2VydmUsIG9uQmVjb21lT2JzZXJ2ZWQsIG9uQmVjb21lVW5vYnNlcnZlZCwgb25SZWFjdGlvbkVycm9yLCByZWFjdGlvbiwgcmVtb3ZlLCBydW5JbkFjdGlvbiwgc2V0LCBzcHksIHRvSlMsIHRyYWNlLCB0cmFuc2FjdGlvbiwgdW50cmFja2VkLCB2YWx1ZXMsIHdoZW4gfTtcbiIsImltcG9ydCB7IGFjdGlvbiwgYXV0b3J1biwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0ICogYXMgbW9ieCBmcm9tICdtb2J4JztcbmltcG9ydCB7IGNyZWF0ZSwgcGVyc2lzdCB9IGZyb20gJ21vYngtcGVyc2lzdCc7XG5cbm1vYnguY29uZmlndXJlKHsgZW5mb3JjZUFjdGlvbnM6IFwib2JzZXJ2ZWRcIiB9KTtcblxuZXhwb3J0IGNsYXNzIE1WYXJpYWJsZSB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGlkID0gJyc7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIHZhbHVlID0gJyc7XG59XG5cbmV4cG9ydCBjbGFzcyBNUHJvcGVydHkge1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBpZCA9ICcnO1xufVxuXG5leHBvcnQgY2xhc3MgTVJlcXVpcmVtZW50IHtcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgaWQgPSAnJztcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgdHlwZSA9ICcnO1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSB2YWx1ZSA9ICcnO1xufVxuXG5leHBvcnQgY2xhc3MgTVRhc2tQcm9wZXJ0eSB7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGlkID0gJyc7XG4gIEBwZXJzaXN0IEBvYnNlcnZhYmxlIGFjY2VzcyA9ICcnO1xufVxuXG5leHBvcnQgY2xhc3MgTVRhc2sge1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBpZCA9ICcnO1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBleGVWYWx1ZSA9ICcnO1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBleGVSZWFjaGFibGUgPSAnJztcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgZW52VmFsdWUgPSAnJztcbiAgQHBlcnNpc3QgQG9ic2VydmFibGUgZW52UmVhY2hhYmxlID0gJyc7XG4gIEBwZXJzaXN0KCdsaXN0JywgTVRhc2tQcm9wZXJ0eSkgQG9ic2VydmFibGUgcHJvcGVydGllcyA9IFtdO1xuICBAcGVyc2lzdCgnbGlzdCcpIEBvYnNlcnZhYmxlIHJlcXVpcmVtZW50cyA9IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgTUNvbGxlY3Rpb24ge1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBpZCA9ICcnO1xuICBAcGVyc2lzdCgnbGlzdCcpIEBvYnNlcnZhYmxlIHRhc2tzID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JykgQG9ic2VydmFibGUgcmVxdWlyZW1lbnRzID0gW107XG59XG5cbmV4cG9ydCBjbGFzcyBNR3JvdXAge1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBpZCA9ICcnO1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBuID0gJyc7XG4gIEBwZXJzaXN0KCdsaXN0JykgQG9ic2VydmFibGUgdGFza3MgPSBbXTtcbiAgQHBlcnNpc3QoJ2xpc3QnKSBAb2JzZXJ2YWJsZSBjb2xsZWN0aW9ucyA9IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgTU1haW4ge1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSBpZCA9ICdtYWluJztcbiAgQHBlcnNpc3QoJ2xpc3QnKSBAb2JzZXJ2YWJsZSB0YXNrcyA9IFtdO1xuICBAcGVyc2lzdCgnbGlzdCcpIEBvYnNlcnZhYmxlIGNvbGxlY3Rpb25zID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JywgTUdyb3VwKSBAb2JzZXJ2YWJsZSBncm91cHMgPSBbXTtcbn1cblxuY2xhc3MgU3RvcmUge1xuICBAcGVyc2lzdCBAb2JzZXJ2YWJsZSB0b3BvbG9neUlkID0gJ25ldyc7XG5cbiAgQHBlcnNpc3QoJ2xpc3QnLCBNVmFyaWFibGUpIEBvYnNlcnZhYmxlIHZhcmlhYmxlcyA9IFtdO1xuICBAcGVyc2lzdCgnbGlzdCcsIE1Qcm9wZXJ0eSkgQG9ic2VydmFibGUgcHJvcGVydGllcyA9IFtdO1xuICBAcGVyc2lzdCgnbGlzdCcsIE1SZXF1aXJlbWVudCkgQG9ic2VydmFibGUgcmVxdWlyZW1lbnRzID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JywgTVRhc2spIEBvYnNlcnZhYmxlIHRhc2tzID0gW107XG4gIEBwZXJzaXN0KCdsaXN0JywgTUNvbGxlY3Rpb24pIEBvYnNlcnZhYmxlIGNvbGxlY3Rpb25zID0gW107XG4gIEBwZXJzaXN0KCdvYmplY3QnLCBNTWFpbikgQG9ic2VydmFibGUgbWFpbiA9IG5ldyBNTWFpbjtcblxuICBAYWN0aW9uIHJlc2V0ID0gKCkgPT4ge1xuICAgIHRoaXMudG9wb2xvZ3lJZCA9ICduZXcnO1xuICAgIHRoaXMudmFyaWFibGVzID0gW107XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gW107XG4gICAgdGhpcy5yZXF1aXJlbWVudHMgPSBbXTtcbiAgICB0aGlzLnRhc2tzID0gW107XG4gICAgdGhpcy5jb2xsZWN0aW9ucyA9IFtdO1xuICAgIHRoaXMubWFpbiA9IG5ldyBNTWFpbjtcbiAgfVxuXG4gIEBhY3Rpb24gc2V0VG9wb2xvZ3lJZCA9IChpZCkgPT4geyB0aGlzLnRvcG9sb2d5SWQgPSBpZDsgfVxuXG4gIEBhY3Rpb24gc2V0VmFyaWFibGVzID0gKHZhcmlhYmxlcykgPT4geyB0aGlzLnZhcmlhYmxlcyA9IHZhcmlhYmxlczsgfVxuICBAYWN0aW9uIHNldFByb3BlcnRpZXMgPSAocHJvcGVydGllcykgPT4geyB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzOyB9XG4gIEBhY3Rpb24gc2V0UmVxdWlyZW1lbnRzID0gKHJlcXVpcmVtZW50cykgPT4geyB0aGlzLnJlcXVpcmVtZW50cyA9IHJlcXVpcmVtZW50czsgfVxuICBAYWN0aW9uIHNldFRhc2tzID0gKHRhc2tzKSA9PiB7IHRoaXMudGFza3MgPSB0YXNrczsgfVxuICBAYWN0aW9uIHNldENvbGxlY3Rpb25zID0gKGNvbGxlY3Rpb25zKSA9PiB7IHRoaXMuY29sbGVjdGlvbnMgPSBjb2xsZWN0aW9uczsgfVxuICBAYWN0aW9uIHNldE1haW4gPSAobWFpbikgPT4geyB0aGlzLm1haW4gPSBtYWluOyB9XG5cbiAgQGFjdGlvbiBhZGRWYXJpYWJsZSA9IChuZXdWYXJpYWJsZSkgPT4geyB0aGlzLnZhcmlhYmxlcy5wdXNoKG5ld1ZhcmlhYmxlKTsgfVxuICBAYWN0aW9uIGFkZFByb3BlcnR5ID0gKG5ld1Byb3BlcnR5KSA9PiB7IHRoaXMucHJvcGVydGllcy5wdXNoKG5ld1Byb3BlcnR5KTsgfVxuICBAYWN0aW9uIGFkZFJlcXVpcmVtZW50ID0gKG5ld1JlcXVpcmVtZW50KSA9PiB7IHRoaXMucmVxdWlyZW1lbnRzLnB1c2gobmV3UmVxdWlyZW1lbnQpOyB9XG4gIEBhY3Rpb24gYWRkVGFzayA9IChuZXdUYXNrKSA9PiB7IHRoaXMudGFza3MucHVzaChuZXdUYXNrKTsgfVxuICBAYWN0aW9uIGFkZENvbGxlY3Rpb24gPSAobmV3Q29sbGVjdGlvbikgPT4geyB0aGlzLmNvbGxlY3Rpb25zLnB1c2gobmV3Q29sbGVjdGlvbik7IH1cbiAgQGFjdGlvbiBhZGRNYWluR3JvdXAgPSAobmV3R3JvdXApID0+IHsgdGhpcy5tYWluLmdyb3Vwcy5wdXNoKG5ld0dyb3VwKTsgfVxuXG4gIEBhY3Rpb24gcmVtb3ZlVmFyaWFibGUgPSAoaSkgPT4ge1xuICAgIHRoaXMudmFyaWFibGVzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIEBhY3Rpb24gcmVtb3ZlUHJvcGVydHkgPSAoaSkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZWRQcm9wZXJ0eUlkID0gdGhpcy5wcm9wZXJ0aWVzLnNwbGljZShpLCAxKVswXS5pZDtcbiAgICB0aGlzLnRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICB0YXNrLnByb3BlcnRpZXMgPSB0YXNrLnByb3BlcnRpZXMuZmlsdGVyKHByb3BlcnR5ID0+IHByb3BlcnR5LmlkICE9PSByZW1vdmVkUHJvcGVydHlJZCk7XG4gICAgfSk7XG4gIH1cblxuICBAYWN0aW9uIHJlbW92ZVJlcXVpcmVtZW50ID0gKGkpID0+IHtcbiAgICBjb25zdCByZW1vdmVkUmVxdWlyZW1lbnRJZCA9IHRoaXMucmVxdWlyZW1lbnRzLnNwbGljZShpLCAxKVswXS5pZDtcblxuICAgIHRoaXMudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgIHRhc2sucmVxdWlyZW1lbnRzID0gdGFzay5yZXF1aXJlbWVudHMuZmlsdGVyKHJlcXVpcmVtZW50ID0+IHJlcXVpcmVtZW50ICE9PSByZW1vdmVkUmVxdWlyZW1lbnRJZCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb25zLmZvckVhY2goY29sbGVjdGlvbiA9PiB7XG4gICAgICBjb2xsZWN0aW9uLnJlcXVpcmVtZW50cyA9IGNvbGxlY3Rpb24ucmVxdWlyZW1lbnRzLmZpbHRlcihyZXF1aXJlbWVudCA9PiByZXF1aXJlbWVudCAhPT0gcmVtb3ZlZFJlcXVpcmVtZW50SWQpO1xuICAgIH0pO1xuICB9XG5cbiAgQGFjdGlvbiByZW1vdmVUYXNrID0gKGkpID0+IHtcbiAgICBjb25zdCByZW1vdmVkVGFza0lkID0gdGhpcy50YXNrcy5zcGxpY2UoaSwgMSlbMF0uaWQ7XG5cbiAgICB0aGlzLm1haW4udGFza3MgPSB0aGlzLm1haW4udGFza3MuZmlsdGVyKHRhc2sgPT4gdGFzayAhPT0gcmVtb3ZlZFRhc2tJZCk7XG4gICAgdGhpcy5jb2xsZWN0aW9ucy5mb3JFYWNoKGNvbGxlY3Rpb24gPT4ge1xuICAgICAgY29sbGVjdGlvbi50YXNrcyA9IGNvbGxlY3Rpb24udGFza3MuZmlsdGVyKHRhc2sgPT4gdGFzayAhPT0gcmVtb3ZlZFRhc2tJZCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluLmdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgIGdyb3VwLnRhc2tzID0gZ3JvdXAudGFza3MuZmlsdGVyKHRhc2sgPT4gdGFzayAhPT0gcmVtb3ZlZFRhc2tJZCk7XG4gICAgfSk7XG4gIH1cblxuICBAYWN0aW9uIHJlbW92ZUNvbGxlY3Rpb24gPSAoaSkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZWRDb2xsZWN0aW9uSWQgPSB0aGlzLmNvbGxlY3Rpb25zLnNwbGljZShpLCAxKVswXS5pZDtcbiAgICB0aGlzLm1haW4uY29sbGVjdGlvbnMgPSB0aGlzLm1haW4uY29sbGVjdGlvbnMuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbiAhPT0gcmVtb3ZlZENvbGxlY3Rpb25JZCk7XG4gICAgdGhpcy5tYWluLmdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgIGdyb3VwLmNvbGxlY3Rpb25zID0gZ3JvdXAuY29sbGVjdGlvbnMuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbiAhPT0gcmVtb3ZlZENvbGxlY3Rpb25JZCk7XG4gICAgfSk7XG4gIH1cblxuICBAYWN0aW9uIHJlbW92ZU1haW5Hcm91cCA9IChpKSA9PiB7XG4gICAgdGhpcy5tYWluLmdyb3Vwcy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICAvLyBAYWN0aW9uIGVkaXRWYXJpYWJsZSA9IChpLCB2YXJpYWJsZSkgPT4geyB9XG4gIEBhY3Rpb24gZWRpdFByb3BlcnR5ID0gKGksIHVwZGF0ZWRQcm9wZXJ0eSkgPT4ge1xuICAgIGNvbnN0IG9sZElkID0gdGhpcy5wcm9wZXJ0aWVzW2ldLmlkO1xuICAgIHRoaXMucHJvcGVydGllc1tpXSA9IHVwZGF0ZWRQcm9wZXJ0eTtcblxuICAgIHRoaXMudGFza3MuZm9yRWFjaCh0ID0+IHtcbiAgICAgIHQucHJvcGVydGllcy5mb3JFYWNoKHAgPT4ge1xuICAgICAgICBpZiAocC5pZCA9PT0gb2xkSWQpIHtcbiAgICAgICAgICBwLmlkID0gdXBkYXRlZFByb3BlcnR5LmlkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gZWRpdFJlcXVpcmVtZW50ID0gKGksIHVwZGF0ZWRSZXF1aXJlbWVudCkgPT4ge1xuICAgIGNvbnN0IG9sZElkID0gdGhpcy5yZXF1aXJlbWVudHNbaV0uaWQ7XG4gICAgdGhpcy5yZXF1aXJlbWVudHNbaV0gPSB1cGRhdGVkUmVxdWlyZW1lbnQ7XG5cbiAgICB0aGlzLnRhc2tzLmZvckVhY2godCA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHQucmVxdWlyZW1lbnRzLmluZGV4T2Yob2xkSWQpO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgdC5yZXF1aXJlbWVudHNbaW5kZXhdID0gdXBkYXRlZFJlcXVpcmVtZW50LmlkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5jb2xsZWN0aW9ucy5mb3JFYWNoKGMgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBjLnJlcXVpcmVtZW50cy5pbmRleE9mKG9sZElkKTtcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGMucmVxdWlyZW1lbnRzW2luZGV4XSA9IHVwZGF0ZWRSZXF1aXJlbWVudC5pZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gZWRpdFRhc2sgPSAoaSwgdXBkYXRlZFRhc2spID0+IHtcbiAgICBjb25zdCBvbGRJZCA9IHRoaXMudGFza3NbaV0uaWQ7XG4gICAgdGhpcy50YXNrc1tpXSA9IHVwZGF0ZWRUYXNrO1xuXG4gICAgLy8gdXBkYXRlIGNvbGxlY3Rpb25zIHdpdGggbmV3IHRhc2sgaW5mb1xuICAgIHRoaXMuY29sbGVjdGlvbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgYy50YXNrcy5mb3JFYWNoKCh0LCBpLCBhKSA9PiB7XG4gICAgICAgIGlmICh0ID09PSBvbGRJZCkge1xuICAgICAgICAgIGFbaV0gPSB1cGRhdGVkVGFzay5pZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgZ3JvdXBzIHdpdGggbmV3IHRhc2sgaW5mb1xuICAgIHRoaXMubWFpbi5ncm91cHMuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgZy50YXNrcy5mb3JFYWNoKCh0LCBpLCBhKSA9PiB7XG4gICAgICAgIGlmICh0ID09PSBvbGRJZCkge1xuICAgICAgICAgIGFbaV0gPSB1cGRhdGVkVGFzay5pZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgbWFpbiB3aXRoIG5ldyB0YXNrIGluZm9cbiAgICB0aGlzLm1haW4udGFza3MuZm9yRWFjaCgodCwgaSwgYSkgPT4ge1xuICAgICAgaWYgKHQgPT09IG9sZElkKSB7XG4gICAgICAgIGFbaV0gPSB1cGRhdGVkVGFzay5pZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gZWRpdENvbGxlY3Rpb24gPSAoaSwgdXBkYXRlZENvbGxlY3Rpb24pID0+IHtcbiAgICBjb25zdCBvbGRJZCA9IHRoaXMuY29sbGVjdGlvbnNbaV0uaWQ7XG4gICAgdGhpcy5jb2xsZWN0aW9uc1tpXSA9IHVwZGF0ZWRDb2xsZWN0aW9uO1xuXG4gICAgLy8gdXBkYXRlIGdyb3VwcyB3aXRoIG5ldyBjb2xsZWN0aW9uIGluZm9cbiAgICB0aGlzLm1haW4uZ3JvdXBzLmZvckVhY2goKGcpID0+IHtcbiAgICAgIGcuY29sbGVjdGlvbnMuZm9yRWFjaCgoYywgaSwgYSkgPT4ge1xuICAgICAgICBpZiAoYyA9PT0gb2xkSWQpIHtcbiAgICAgICAgICBhW2ldID0gdXBkYXRlZENvbGxlY3Rpb24uaWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG1haW4gd2l0aCBuZXcgY29sbGVjdGlvbiBpbmZvXG4gICAgdGhpcy5tYWluLmNvbGxlY3Rpb25zLmZvckVhY2goKGMsIGksIGEpID0+IHtcbiAgICAgIGlmIChjID09PSBvbGRJZCkge1xuICAgICAgICBhW2ldID0gdXBkYXRlZENvbGxlY3Rpb24uaWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBAYWN0aW9uIGVkaXRNYWluR3JvdXAgPSAoaSwgdXBkYXRlZEdyb3VwKSA9PiB7XG4gICAgdGhpcy5tYWluLmdyb3Vwc1tpXSA9IHVwZGF0ZWRHcm91cDtcbiAgfVxuXG4gIGhhc1ZhcmlhYmxlID0gKGlkKSA9PiB7IHJldHVybiB0aGlzLnZhcmlhYmxlcy5zb21lKGVsID0+IGVsLmlkID09PSBpZCk7IH1cbiAgaGFzUHJvcGVydHkgPSAoaWQpID0+IHsgcmV0dXJuIHRoaXMucHJvcGVydGllcy5zb21lKGVsID0+IGVsLmlkID09PSBpZCk7IH1cbiAgaGFzUmVxdWlyZW1lbnQgPSAoaWQpID0+IHsgcmV0dXJuIHRoaXMucmVxdWlyZW1lbnRzLnNvbWUoZWwgPT4gZWwuaWQgPT09IGlkKTsgfVxuICBoYXNUYXNrID0gKGlkKSA9PiB7IHJldHVybiB0aGlzLnRhc2tzLnNvbWUoZWwgPT4gZWwuaWQgPT09IGlkKTsgfVxuICBoYXNDb2xsZWN0aW9uID0gKGlkKSA9PiB7IHJldHVybiB0aGlzLmNvbGxlY3Rpb25zLnNvbWUoZWwgPT4gZWwuaWQgPT09IGlkKTsgfVxuICBoYXNNYWluR3JvdXAgPSAoaWQpID0+IHsgcmV0dXJuIHRoaXMubWFpbi5ncm91cHMuc29tZShlbCA9PiBlbC5pZCA9PT0gaWQpOyB9XG59XG5cbmNvbnN0IGh5ZHJhdGUgPSBjcmVhdGUoeyBzdG9yYWdlOiBsb2NhbFN0b3JhZ2UsIGpzb25pZnk6IHRydWUgfSk7XG5cbmNvbnN0IHN0b3JlID0gbmV3IFN0b3JlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0b3JlO1xuXG5oeWRyYXRlKCd0b3BvbG9neUVkaXRvcicsIHN0b3JlKTtcblxuYXV0b3J1bigoKSA9PiB7XG4gIC8vIGNvbnNvbGUubG9nKCdzdG9yZS50b3BvbG9neUlkOiAnICsgc3RvcmUudG9wb2xvZ3lJZCk7XG59KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3ZhbHVlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvdmFsdWVzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIF9TdHlsZUNvbmZpZyA9IHJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpO1xuXG52YXIgX1NhZmVBbmNob3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NhZmVBbmNob3JcIikpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGJsb2NrOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgb25DbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIGNvbXBvbmVudENsYXNzOiBfZWxlbWVudFR5cGUuZGVmYXVsdCxcbiAgaHJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogRGVmaW5lcyBIVE1MIGJ1dHRvbiB0eXBlIGF0dHJpYnV0ZVxuICAgKiBAZGVmYXVsdFZhbHVlICdidXR0b24nXG4gICAqL1xuICB0eXBlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgYmxvY2s6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbnZhciBCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyQW5jaG9yID0gZnVuY3Rpb24gcmVuZGVyQW5jaG9yKGVsZW1lbnRQcm9wcywgY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NhZmVBbmNob3IuZGVmYXVsdCwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGVsZW1lbnRQcm9wcy5kaXNhYmxlZCAmJiAnZGlzYWJsZWQnKVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyQnV0dG9uID0gZnVuY3Rpb24gcmVuZGVyQnV0dG9uKF9yZWYsIGNsYXNzTmFtZSkge1xuICAgIHZhciBjb21wb25lbnRDbGFzcyA9IF9yZWYuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZiwgW1wiY29tcG9uZW50Q2xhc3NcIl0pO1xuICAgIHZhciBDb21wb25lbnQgPSBjb21wb25lbnRDbGFzcyB8fCAnYnV0dG9uJztcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgdHlwZTogZWxlbWVudFByb3BzLnR5cGUgfHwgJ2J1dHRvbicsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHMuYmxvY2ssXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJhY3RpdmVcIiwgXCJibG9ja1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKSwgKF9leHRlbmRzMiA9IHtcbiAgICAgIGFjdGl2ZTogYWN0aXZlXG4gICAgfSwgX2V4dGVuZHMyWygwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShic1Byb3BzLCAnYmxvY2snKV0gPSBibG9jaywgX2V4dGVuZHMyKSk7XG4gICAgdmFyIGZ1bGxDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKTtcblxuICAgIGlmIChlbGVtZW50UHJvcHMuaHJlZikge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQW5jaG9yKGVsZW1lbnRQcm9wcywgZnVsbENsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyQnV0dG9uKGVsZW1lbnRQcm9wcywgZnVsbENsYXNzTmFtZSk7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQnV0dG9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2J0bicsICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNTaXplcykoW19TdHlsZUNvbmZpZy5TaXplLkxBUkdFLCBfU3R5bGVDb25maWcuU2l6ZS5TTUFMTCwgX1N0eWxlQ29uZmlnLlNpemUuWFNNQUxMXSwgKDAsIF9ib290c3RyYXBVdGlscy5ic1N0eWxlcykoKDAsIF92YWx1ZXMuZGVmYXVsdCkoX1N0eWxlQ29uZmlnLlN0YXRlKS5jb25jYXQoW19TdHlsZUNvbmZpZy5TdHlsZS5ERUZBVUxULCBfU3R5bGVDb25maWcuU3R5bGUuUFJJTUFSWSwgX1N0eWxlQ29uZmlnLlN0eWxlLkxJTktdKSwgX1N0eWxlQ29uZmlnLlN0eWxlLkRFRkFVTFQsIEJ1dHRvbikpKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfRm9ybUNvbnRyb2xGZWVkYmFjayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xGZWVkYmFja1wiKSk7XG5cbnZhciBfRm9ybUNvbnRyb2xTdGF0aWMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Db250cm9sU3RhdGljXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgX1N0eWxlQ29uZmlnID0gcmVxdWlyZShcIi4vdXRpbHMvU3R5bGVDb25maWdcIik7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBfZWxlbWVudFR5cGUuZGVmYXVsdCxcblxuICAvKipcbiAgICogT25seSByZWxldmFudCBpZiBgY29tcG9uZW50Q2xhc3NgIGlzIGAnaW5wdXQnYC5cbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFVzZXMgYGNvbnRyb2xJZGAgZnJvbSBgPEZvcm1Hcm91cD5gIGlmIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZC5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhIHJlZiB0byB0aGUgYDxpbnB1dD5gIGVsZW1lbnQuIE9ubHkgZnVuY3Rpb25zIGNhbiBiZSB1c2VkIGhlcmUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIDxGb3JtQ29udHJvbCBpbnB1dFJlZj17cmVmID0+IHsgdGhpcy5pbnB1dCA9IHJlZjsgfX0gLz5cbiAgICogYGBgXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2lucHV0J1xufTtcbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19mb3JtR3JvdXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBGb3JtQ29udHJvbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Db250cm9sLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ29udHJvbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUNvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGZvcm1Hcm91cCA9IHRoaXMuY29udGV4dC4kYnNfZm9ybUdyb3VwO1xuICAgIHZhciBjb250cm9sSWQgPSBmb3JtR3JvdXAgJiYgZm9ybUdyb3VwLmNvbnRyb2xJZDtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIF90aGlzJHByb3BzJGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHMkaWQgPT09IHZvaWQgMCA/IGNvbnRyb2xJZCA6IF90aGlzJHByb3BzJGlkLFxuICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGJzU2l6ZSA9IF90aGlzJHByb3BzLmJzU2l6ZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcInR5cGVcIiwgXCJpZFwiLCBcImlucHV0UmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwiYnNTaXplXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoY29udHJvbElkID09IG51bGwgfHwgaWQgPT09IGNvbnRyb2xJZCwgJ2Bjb250cm9sSWRgIGlzIGlnbm9yZWQgb24gYDxGb3JtQ29udHJvbD5gIHdoZW4gYGlkYCBpcyBzcGVjaWZpZWQuJykgOiB2b2lkIDA7IC8vIGlucHV0W3R5cGU9XCJmaWxlXCJdIHNob3VsZCBub3QgaGF2ZSAuZm9ybS1jb250cm9sLlxuXG4gICAgdmFyIGNsYXNzZXM7XG5cbiAgICBpZiAodHlwZSAhPT0gJ2ZpbGUnKSB7XG4gICAgICBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgfSAvLyBJZiB1c2VyIHByb3ZpZGVzIGEgc2l6ZSwgbWFrZSBzdXJlIHRvIGFwcGVuZCBpdCB0byBjbGFzc2VzIGFzIGlucHV0LVxuICAgIC8vIGUuZy4gaWYgYnNTaXplIGlzIHNtYWxsLCBpdCB3aWxsIGFwcGVuZCBpbnB1dC1zbVxuXG5cbiAgICBpZiAoYnNTaXplKSB7XG4gICAgICB2YXIgc2l6ZSA9IF9TdHlsZUNvbmZpZy5TSVpFX01BUFtic1NpemVdIHx8IGJzU2l6ZTtcbiAgICAgIGNsYXNzZXNbKDAsIF9ib290c3RyYXBVdGlscy5wcmVmaXgpKHtcbiAgICAgICAgYnNDbGFzczogJ2lucHV0J1xuICAgICAgfSwgc2l6ZSldID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGb3JtQ29udHJvbDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRm9ybUNvbnRyb2wucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRm9ybUNvbnRyb2wuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuRm9ybUNvbnRyb2wuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuRm9ybUNvbnRyb2wuRmVlZGJhY2sgPSBfRm9ybUNvbnRyb2xGZWVkYmFjay5kZWZhdWx0O1xuRm9ybUNvbnRyb2wuU3RhdGljID0gX0Zvcm1Db250cm9sU3RhdGljLmRlZmF1bHQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2Zvcm0tY29udHJvbCcsICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNTaXplcykoW19TdHlsZUNvbmZpZy5TaXplLlNNQUxMLCBfU3R5bGVDb25maWcuU2l6ZS5MQVJHRV0sIEZvcm1Db250cm9sKSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfSW5wdXRHcm91cEFkZG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JbnB1dEdyb3VwQWRkb25cIikpO1xuXG52YXIgX0lucHV0R3JvdXBCdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0R3JvdXBCdXR0b25cIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBfU3R5bGVDb25maWcgPSByZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKTtcblxudmFyIElucHV0R3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShJbnB1dEdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbnB1dEdyb3VwKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbnB1dEdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW5wdXRHcm91cDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuSW5wdXRHcm91cC5BZGRvbiA9IF9JbnB1dEdyb3VwQWRkb24uZGVmYXVsdDtcbklucHV0R3JvdXAuQnV0dG9uID0gX0lucHV0R3JvdXBCdXR0b24uZGVmYXVsdDtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnaW5wdXQtZ3JvdXAnLCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSwgX1N0eWxlQ29uZmlnLlNpemUuU01BTExdLCBJbnB1dEdyb3VwKSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2V2ZW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2V2ZW50c1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfc2Nyb2xsYmFyU2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX01vZGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtb3ZlcmxheXMvbGliL01vZGFsXCIpKTtcblxudmFyIF9pc092ZXJmbG93aW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2lzT3ZlcmZsb3dpbmdcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX0ZhZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ZhZGVcIikpO1xuXG52YXIgX01vZGFsQm9keSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxCb2R5XCIpKTtcblxudmFyIF9Nb2RhbERpYWxvZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxEaWFsb2dcIikpO1xuXG52YXIgX01vZGFsRm9vdGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbEZvb3RlclwiKSk7XG5cbnZhciBfTW9kYWxIZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vZGFsSGVhZGVyXCIpKTtcblxudmFyIF9Nb2RhbFRpdGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbFRpdGxlXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKTtcblxudmFyIF9zcGxpdENvbXBvbmVudFByb3BzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvc3BsaXRDb21wb25lbnRQcm9wc1wiKSk7XG5cbnZhciBfU3R5bGVDb25maWcgPSByZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKTtcblxudmFyIHByb3BUeXBlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIF9Nb2RhbC5kZWZhdWx0LnByb3BUeXBlcywgX01vZGFsRGlhbG9nLmRlZmF1bHQucHJvcFR5cGVzLCB7XG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgYmFja2Ryb3AgY29tcG9uZW50LiBTcGVjaWZ5ICdzdGF0aWMnIGZvciBhIGJhY2tkcm9wIHRoYXQgZG9lc24ndFxuICAgKiB0cmlnZ2VyIGFuIFwib25IaWRlXCIgd2hlbiBjbGlja2VkLlxuICAgKi9cbiAgYmFja2Ryb3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N0YXRpYycsIHRydWUsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIEFkZCBhbiBvcHRpb25hbCBleHRyYSBjbGFzcyBuYW1lIHRvIC5tb2RhbC1iYWNrZHJvcFxuICAgKiBJdCBjb3VsZCBlbmQgdXAgbG9va2luZyBsaWtlIGNsYXNzPVwibW9kYWwtYmFja2Ryb3AgZm9vLW1vZGFsLWJhY2tkcm9wIGluXCIuXG4gICAqL1xuICBiYWNrZHJvcENsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQ2xvc2UgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkXG4gICAqL1xuICBrZXlib2FyZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE9wZW4gYW5kIGNsb3NlIHRoZSBNb2RhbCB3aXRoIGEgc2xpZGUgYW5kIGZhZGUgYW5pbWF0aW9uLlxuICAgKi9cbiAgYW5pbWF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBDb21wb25lbnQgdHlwZSB0aGF0IHByb3ZpZGVzIHRoZSBtb2RhbCBjb250ZW50IE1hcmt1cC4gVGhpcyBpcyBhIHVzZWZ1bFxuICAgKiBwcm9wIHdoZW4geW91IHdhbnQgdG8gdXNlIHlvdXIgb3duIHN0eWxlcyBhbmQgbWFya3VwIHRvIGNyZWF0ZSBhIGN1c3RvbVxuICAgKiBtb2RhbCBjb21wb25lbnQuXG4gICAqL1xuICBkaWFsb2dDb21wb25lbnRDbGFzczogX2VsZW1lbnRUeXBlLmRlZmF1bHQsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXRcbiAgICogb3BlbnMsIGFuZCByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBmYWxzZSBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuLXJlYWRlcnMuXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgTW9kYWwgd2hpbGVcbiAgICogb3Blbi4gQ29uc2lkZXIgbGVhdmluZyB0aGUgZGVmYXVsdCB2YWx1ZSBoZXJlLCBhcyBpdCBpcyBuZWNlc3NhcnkgdG8gbWFrZVxuICAgKiB0aGUgTW9kYWwgd29yayB3ZWxsIHdpdGggYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGVuZm9yY2VGb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW5cbiAgICovXG4gIHJlc3RvcmVGb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHNob3cgaXRzZWxmLlxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgaGVhZGVyIGNsb3NlQnV0dG9uIG9yIG5vbi1zdGF0aWMgYmFja2Ryb3AgaXNcbiAgICogY2xpY2tlZC4gUmVxdWlyZWQgaWYgZWl0aGVyIGFyZSBzcGVjaWZpZWQuXG4gICAqL1xuICBvbkhpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIGluXG4gICAqL1xuICBvbkVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE1vZGFsIGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnRhaW5lcjogX01vZGFsLmRlZmF1bHQucHJvcFR5cGVzLmNvbnRhaW5lclxufSk7XG52YXIgZGVmYXVsdFByb3BzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX01vZGFsLmRlZmF1bHQuZGVmYXVsdFByb3BzLCB7XG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgZGlhbG9nQ29tcG9uZW50Q2xhc3M6IF9Nb2RhbERpYWxvZy5kZWZhdWx0XG59KTtcbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX21vZGFsOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIG9uSGlkZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbiAgfSlcbn07XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSwgcmVhY3Qvbm8tbXVsdGktY29tcCAqL1xuXG5mdW5jdGlvbiBEaWFsb2dUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9GYWRlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgdGltZW91dDogTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTlxuICB9KSk7XG59XG5cbmZ1bmN0aW9uIEJhY2tkcm9wVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRmFkZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIHRpbWVvdXQ6IE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT05cbiAgfSkpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG5cbnZhciBNb2RhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlRGlhbG9nQmFja2Ryb3BNb3VzZURvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5fd2FpdGluZ0Zvck1vdXNlVXAgPSB0cnVlO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICB2YXIgZGlhbG9nTm9kZSA9IF90aGlzLl9tb2RhbC5nZXREaWFsb2dFbGVtZW50KCk7XG5cbiAgICAgIGlmIChfdGhpcy5fd2FpdGluZ0Zvck1vdXNlVXAgJiYgZXYudGFyZ2V0ID09PSBkaWFsb2dOb2RlKSB7XG4gICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyaW5nID0gX3RoaXMuaGFuZGxlRW50ZXJpbmcuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlV2luZG93UmVzaXplID0gX3RoaXMuaGFuZGxlV2luZG93UmVzaXplLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVEaWFsb2dDbGljayA9IF90aGlzLmhhbmRsZURpYWxvZ0NsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5zZXRNb2RhbFJlZiA9IF90aGlzLnNldE1vZGFsUmVmLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0eWxlOiB7fVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAkYnNfbW9kYWw6IHtcbiAgICAgICAgb25IaWRlOiB0aGlzLnByb3BzLm9uSGlkZVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gQ2xlYW4gdXAgdGhlIGxpc3RlbmVyIGlmIHdlIG5lZWQgdG8uXG4gICAgdGhpcy5oYW5kbGVFeGl0ZWQoKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TW9kYWxSZWYgPSBmdW5jdGlvbiBzZXRNb2RhbFJlZihyZWYpIHtcbiAgICB0aGlzLl9tb2RhbCA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRGlhbG9nQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVEaWFsb2dDbGljayhlKSB7XG4gICAgaWYgKHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgfHwgZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25IaWRlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJpbmcoKSB7XG4gICAgLy8gRklYTUU6IFRoaXMgc2hvdWxkIHdvcmsgZXZlbiB3aGVuIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICBfZXZlbnRzLmRlZmF1bHQub24od2luZG93LCAncmVzaXplJywgdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUpO1xuXG4gICAgdGhpcy51cGRhdGVTdHlsZSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgLy8gRklYTUU6IFRoaXMgc2hvdWxkIHdvcmsgZXZlbiB3aGVuIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICBfZXZlbnRzLmRlZmF1bHQub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlV2luZG93UmVzaXplID0gZnVuY3Rpb24gaGFuZGxlV2luZG93UmVzaXplKCkge1xuICAgIHRoaXMudXBkYXRlU3R5bGUoKTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3R5bGUgPSBmdW5jdGlvbiB1cGRhdGVTdHlsZSgpIHtcbiAgICBpZiAoIV9pbkRPTS5kZWZhdWx0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpYWxvZ05vZGUgPSB0aGlzLl9tb2RhbC5nZXREaWFsb2dFbGVtZW50KCk7XG5cbiAgICB2YXIgZGlhbG9nSGVpZ2h0ID0gZGlhbG9nTm9kZS5zY3JvbGxIZWlnaHQ7XG4gICAgdmFyIGRvY3VtZW50ID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKGRpYWxvZ05vZGUpO1xuICAgIHZhciBib2R5SXNPdmVyZmxvd2luZyA9ICgwLCBfaXNPdmVyZmxvd2luZy5kZWZhdWx0KShfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnByb3BzLmNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5KSk7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IGRpYWxvZ0hlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdHlsZToge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IGJvZHlJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyAoMCwgX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICFib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyAoMCwgX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKSA6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmFja2Ryb3AgPSBfdGhpcyRwcm9wcy5iYWNrZHJvcCxcbiAgICAgICAgYmFja2Ryb3BDbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5iYWNrZHJvcENsYXNzTmFtZSxcbiAgICAgICAgYW5pbWF0aW9uID0gX3RoaXMkcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICBzaG93ID0gX3RoaXMkcHJvcHMuc2hvdyxcbiAgICAgICAgRGlhbG9nID0gX3RoaXMkcHJvcHMuZGlhbG9nQ29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIG9uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiYmFja2Ryb3BcIiwgXCJiYWNrZHJvcENsYXNzTmFtZVwiLCBcImFuaW1hdGlvblwiLCBcInNob3dcIiwgXCJkaWFsb2dDb21wb25lbnRDbGFzc1wiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0ZWRcIl0pO1xuXG4gICAgdmFyIF9zcGxpdENvbXBvbmVudFByb3BzID0gKDAsIF9zcGxpdENvbXBvbmVudFByb3BzMi5kZWZhdWx0KShwcm9wcywgX01vZGFsLmRlZmF1bHQpLFxuICAgICAgICBiYXNlTW9kYWxQcm9wcyA9IF9zcGxpdENvbXBvbmVudFByb3BzWzBdLFxuICAgICAgICBkaWFsb2dQcm9wcyA9IF9zcGxpdENvbXBvbmVudFByb3BzWzFdO1xuXG4gICAgdmFyIGluQ2xhc3NOYW1lID0gc2hvdyAmJiAhYW5pbWF0aW9uICYmICdpbic7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01vZGFsLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGJhc2VNb2RhbFByb3BzLCB7XG4gICAgICByZWY6IHRoaXMuc2V0TW9kYWxSZWYsXG4gICAgICBzaG93OiBzaG93LFxuICAgICAgY29udGFpbmVyQ2xhc3NOYW1lOiAoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkocHJvcHMsICdvcGVuJyksXG4gICAgICB0cmFuc2l0aW9uOiBhbmltYXRpb24gPyBEaWFsb2dUcmFuc2l0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgYmFja2Ryb3A6IGJhY2tkcm9wLFxuICAgICAgYmFja2Ryb3BUcmFuc2l0aW9uOiBhbmltYXRpb24gPyBCYWNrZHJvcFRyYW5zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICBiYWNrZHJvcENsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKCgwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShwcm9wcywgJ2JhY2tkcm9wJyksIGJhY2tkcm9wQ2xhc3NOYW1lLCBpbkNsYXNzTmFtZSksXG4gICAgICBvbkVudGVyaW5nOiAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShvbkVudGVyaW5nLCB0aGlzLmhhbmRsZUVudGVyaW5nKSxcbiAgICAgIG9uRXhpdGVkOiAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShvbkV4aXRlZCwgdGhpcy5oYW5kbGVFeGl0ZWQpLFxuICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXBcbiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChEaWFsb2csICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGRpYWxvZ1Byb3BzLCB7XG4gICAgICBzdHlsZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgdGhpcy5zdGF0ZS5zdHlsZSwgc3R5bGUpLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBpbkNsYXNzTmFtZSksXG4gICAgICBvbkNsaWNrOiBiYWNrZHJvcCA9PT0gdHJ1ZSA/IHRoaXMuaGFuZGxlRGlhbG9nQ2xpY2sgOiBudWxsLFxuICAgICAgb25Nb3VzZURvd25EaWFsb2c6IHRoaXMuaGFuZGxlRGlhbG9nQmFja2Ryb3BNb3VzZURvd25cbiAgICB9KSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1vZGFsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbk1vZGFsLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5Nb2RhbC5Cb2R5ID0gX01vZGFsQm9keS5kZWZhdWx0O1xuTW9kYWwuSGVhZGVyID0gX01vZGFsSGVhZGVyLmRlZmF1bHQ7XG5Nb2RhbC5UaXRsZSA9IF9Nb2RhbFRpdGxlLmRlZmF1bHQ7XG5Nb2RhbC5Gb290ZXIgPSBfTW9kYWxGb290ZXIuZGVmYXVsdDtcbk1vZGFsLkRpYWxvZyA9IF9Nb2RhbERpYWxvZy5kZWZhdWx0O1xuTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMDtcbk1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ21vZGFsJywgKDAsIF9ib290c3RyYXBVdGlscy5ic1NpemVzKShbX1N0eWxlQ29uZmlnLlNpemUuTEFSR0UsIF9TdHlsZUNvbmZpZy5TaXplLlNNQUxMXSwgTW9kYWwpKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG1vYnhfMSA9IHJlcXVpcmUoXCJtb2J4XCIpO1xudmFyIHNlcmlhbGl6cl8xID0gcmVxdWlyZShcInNlcmlhbGl6clwiKTtcbnZhciBTdG9yYWdlID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbnZhciBtZXJnZV94XzEgPSByZXF1aXJlKFwiLi9tZXJnZS14XCIpO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbnZhciBwZXJzaXN0X29iamVjdF8xID0gcmVxdWlyZShcIi4vcGVyc2lzdC1vYmplY3RcIik7XG5mdW5jdGlvbiBwZXJzaXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgYSA9IGFyZ3NbMF0sIGIgPSBhcmdzWzFdLCBjID0gYXJnc1syXTtcbiAgICBpZiAoYSBpbiB0eXBlc18xLnR5cGVzKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpenJfMS5zZXJpYWxpemFibGUodHlwZXNfMS50eXBlc1thXShiKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiBwZXJzaXN0X29iamVjdF8xLnBlcnNpc3RPYmplY3QodGFyZ2V0LCBhKTsgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpenJfMS5zZXJpYWxpemFibGUuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxufVxuZXhwb3J0cy5wZXJzaXN0ID0gcGVyc2lzdDtcbmZ1bmN0aW9uIGNyZWF0ZShfYSkge1xuICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfYyA9IF9iLnN0b3JhZ2UsIHN0b3JhZ2UgPSBfYyA9PT0gdm9pZCAwID8gU3RvcmFnZSA6IF9jLCBfZCA9IF9iLmpzb25pZnksIGpzb25pZnkgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IF9iLmRlYm91bmNlLCBkZWJvdW5jZSA9IF9lID09PSB2b2lkIDAgPyAwIDogX2U7XG4gICAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnICYmIGxvY2FsU3RvcmFnZSA9PT0gc3RvcmFnZSlcbiAgICAgICAgc3RvcmFnZSA9IFN0b3JhZ2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh5ZHJhdGUoa2V5LCBzdG9yZSwgaW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHZvaWQgMCkgeyBpbml0aWFsU3RhdGUgPSB7fTsgfVxuICAgICAgICB2YXIgc2NoZW1hID0gc2VyaWFsaXpyXzEuZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHN0b3JlKTtcbiAgICAgICAgZnVuY3Rpb24gaHlkcmF0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHByb21pc2UgPSBzdG9yYWdlLmdldEl0ZW0oa2V5KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkKSB7IHJldHVybiAhanNvbmlmeSA/IGQgOiBKU09OLnBhcnNlKGQpOyB9KVxuICAgICAgICAgICAgICAgIC50aGVuKG1vYnhfMS5hY3Rpb24oXCJbbW9ieC1wZXJzaXN0IFwiICsga2V5ICsgXCJdIExPQURfREFUQVwiLCBmdW5jdGlvbiAocGVyc2lzdGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBlcnNpc3RlZCAmJiB0eXBlb2YgcGVyc2lzdGVkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBzZXJpYWxpenJfMS51cGRhdGUoc2NoZW1hLCBzdG9yZSwgcGVyc2lzdGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVyZ2VfeF8xLm1lcmdlT2JzZXJ2YWJsZXMoc3RvcmUsIGluaXRpYWxTdGF0ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcHJvbWlzZS5yZWh5ZHJhdGUgPSBoeWRyYXRpb247XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gaHlkcmF0aW9uKCk7XG4gICAgICAgIG1vYnhfMS5yZWFjdGlvbihmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJpYWxpenJfMS5zZXJpYWxpemUoc2NoZW1hLCBzdG9yZSk7IH0sIGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBzdG9yYWdlLnNldEl0ZW0oa2V5LCAhanNvbmlmeSA/IGRhdGEgOiBKU09OLnN0cmluZ2lmeShkYXRhKSk7IH0sIHtcbiAgICAgICAgICAgIGRlbGF5OiBkZWJvdW5jZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsImltcG9ydCB7IHNweSwgb2JzZXJ2YWJsZSwgY29tcHV0ZWQsIGdldERlcGVuZGVuY3lUcmVlLCBSZWFjdGlvbiwgcnVuSW5BY3Rpb24sIHRyYW5zYWN0aW9uLCBjb25maWd1cmUgfSBmcm9tICdtb2J4JztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VEZWJ1Z1ZhbHVlLCBtZW1vLCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pZiAoIXVzZVN0YXRlKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0LWxpdGUgcmVxdWlyZXMgUmVhY3Qgd2l0aCBIb29rcyBzdXBwb3J0XCIpO1xyXG59XHJcbmlmICghc3B5KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0LWxpdGUgcmVxdWlyZXMgbW9ieCBhdCBsZWFzdCB2ZXJzaW9uIDQgdG8gYmUgYXZhaWxhYmxlXCIpO1xyXG59XG5cbmZ1bmN0aW9uIHVzZU9ic2VydmFibGUoaW5pdGlhbFZhbHVlKSB7XHJcbiAgICB2YXIgb2JzZXJ2YWJsZVJlZiA9IHVzZVJlZihudWxsKTtcclxuICAgIGlmICghb2JzZXJ2YWJsZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgb2JzZXJ2YWJsZVJlZi5jdXJyZW50ID0gb2JzZXJ2YWJsZShpbml0aWFsVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9ic2VydmFibGVSZWYuY3VycmVudDtcclxufVxuXG5mdW5jdGlvbiB1c2VDb21wdXRlZChmdW5jLCBpbnB1dHMpIHtcclxuICAgIGlmIChpbnB1dHMgPT09IHZvaWQgMCkgeyBpbnB1dHMgPSBbXTsgfVxyXG4gICAgdmFyIGNvbXB1dGVkJDEgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXB1dGVkKGZ1bmMpOyB9LCBpbnB1dHMpO1xyXG4gICAgcmV0dXJuIGNvbXB1dGVkJDEuZ2V0KCk7XHJcbn1cblxudmFyIGRvTm90aGluZ0Rpc3Bvc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gZW1wdHlcclxufTtcclxuLyoqXHJcbiAqIEFkZHMgYW4gb2JzZXJ2YWJsZSBlZmZlY3QgKHJlYWN0aW9uLCBhdXRvcnVuLCBvciBhbnl0aGluZyBlbHNlIHRoYXQgcmV0dXJucyBhIGRpc3Bvc2VyKSB0aGF0IHdpbGwgYmUgcmVnaXN0ZXJlZCB1cG9uIGNvbXBvbmVudCBjcmVhdGlvbiBhbmQgZGlzcG9zZWQgdXBvbiB1bm1vdW50aW5nLlxyXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgZGlzcG9zZXIgZm9yIGVhcmx5IGRpc3Bvc2FsLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEB0ZW1wbGF0ZSBEXHJcbiAqIEBwYXJhbSB7KCkgPT4gRH0gZGlzcG9zZXJHZW5lcmF0b3IgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGRpc3Bvc2VyIG9mIHRoZSB3YW50ZWQgZWZmZWN0LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8YW55Pn0gW2lucHV0cz1bXV0gSWYgeW91IHdhbnQgdGhlIGVmZmVjdCB0byBiZSBhdXRvbWF0aWNhbGx5IHJlLWNyZWF0ZWQgd2hlbiBzb21lIHZhcmlhYmxlKHMpIGFyZSBjaGFuZ2VkIHRoZW4gcGFzcyB0aGVtIGluIHRoaXMgYXJyYXkuXHJcbiAqIEByZXR1cm5zIHtEfVxyXG4gKi9cclxuZnVuY3Rpb24gdXNlRGlzcG9zYWJsZShkaXNwb3NlckdlbmVyYXRvciwgaW5wdXRzKSB7XHJcbiAgICBpZiAoaW5wdXRzID09PSB2b2lkIDApIHsgaW5wdXRzID0gW107IH1cclxuICAgIHZhciBkaXNwb3NlclJlZiA9IHVzZVJlZihudWxsKTtcclxuICAgIHZhciBlYXJseURpc3Bvc2VkUmVmID0gdXNlUmVmKGZhbHNlKTtcclxuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhenlDcmVhdGVEaXNwb3NlcihmYWxzZSk7XHJcbiAgICB9LCBpbnB1dHMpO1xyXG4gICAgZnVuY3Rpb24gbGF6eUNyZWF0ZURpc3Bvc2VyKGVhcmx5RGlzcG9zYWwpIHtcclxuICAgICAgICAvLyBlbnN1cmUgdGhhdCB3ZSB3b24ndCBjcmVhdGUgYSBuZXcgZGlzcG9zZXIgaWYgaXQgd2FzIGVhcmx5IGRpc3Bvc2VkXHJcbiAgICAgICAgaWYgKGVhcmx5RGlzcG9zZWRSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9Ob3RoaW5nRGlzcG9zZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZGlzcG9zZXJSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICB2YXIgbmV3RGlzcG9zZXIgPSBkaXNwb3NlckdlbmVyYXRvcigpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld0Rpc3Bvc2VyICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcImdlbmVyYXRlZCBkaXNwb3NlciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9Ob3RoaW5nRGlzcG9zZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcG9zZXJSZWYuY3VycmVudCA9IG5ld0Rpc3Bvc2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoZGlzcG9zZXJSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgZGlzcG9zZXJSZWYuY3VycmVudCgpO1xyXG4gICAgICAgICAgICAgICAgZGlzcG9zZXJSZWYuY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVhcmx5RGlzcG9zYWwpIHtcclxuICAgICAgICAgICAgICAgIGVhcmx5RGlzcG9zZWRSZWYuY3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxhenlDcmVhdGVEaXNwb3Nlcih0cnVlKTtcclxufVxuXG52YXIgZ2xvYmFsSXNVc2luZ1N0YXRpY1JlbmRlcmluZyA9IGZhbHNlO1xyXG5mdW5jdGlvbiB1c2VTdGF0aWNSZW5kZXJpbmcoZW5hYmxlKSB7XHJcbiAgICBnbG9iYWxJc1VzaW5nU3RhdGljUmVuZGVyaW5nID0gZW5hYmxlO1xyXG59XHJcbmZ1bmN0aW9uIGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSB7XHJcbiAgICByZXR1cm4gZ2xvYmFsSXNVc2luZ1N0YXRpY1JlbmRlcmluZztcclxufVxuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cblxuZnVuY3Rpb24gcHJpbnREZWJ1Z1ZhbHVlKHYpIHtcclxuICAgIGlmICghdi5jdXJyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIFwiPHVua25vd24+XCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0RGVwZW5kZW5jeVRyZWUodi5jdXJyZW50KTtcclxufVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcclxuZnVuY3Rpb24gdXNlVW5tb3VudChmbikge1xyXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuOyB9LCBFTVBUWV9BUlJBWSk7XHJcbn1cclxuZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XHJcbiAgICB2YXIgX2EgPSBfX3JlYWQodXNlU3RhdGUoMCksIDIpLCBzZXRUaWNrID0gX2FbMV07XHJcbiAgICB2YXIgdXBkYXRlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNldFRpY2soZnVuY3Rpb24gKHRpY2spIHsgcmV0dXJuIHRpY2sgKyAxOyB9KTtcclxuICAgIH0sIFtdKTtcclxuICAgIHJldHVybiB1cGRhdGU7XHJcbn1cclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xyXG4gICAgcmV0dXJuICFwcm90byB8fCBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZTtcclxufVxuXG52YXIgRU1QVFlfT0JKRUNUID0ge307XHJcbmZ1bmN0aW9uIHVzZU9ic2VydmVyKGZuLCBiYXNlQ29tcG9uZW50TmFtZSwgb3B0aW9ucykge1xyXG4gICAgaWYgKGJhc2VDb21wb25lbnROYW1lID09PSB2b2lkIDApIHsgYmFzZUNvbXBvbmVudE5hbWUgPSBcIm9ic2VydmVkXCI7IH1cclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IEVNUFRZX09CSkVDVDsgfVxyXG4gICAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSkge1xyXG4gICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgfVxyXG4gICAgdmFyIHdhbnRlZEZvcmNlVXBkYXRlSG9vayA9IG9wdGlvbnMudXNlRm9yY2VVcGRhdGUgfHwgdXNlRm9yY2VVcGRhdGU7XHJcbiAgICB2YXIgZm9yY2VVcGRhdGUgPSB3YW50ZWRGb3JjZVVwZGF0ZUhvb2soKTtcclxuICAgIHZhciByZWFjdGlvbiA9IHVzZVJlZihudWxsKTtcclxuICAgIGlmICghcmVhY3Rpb24uY3VycmVudCkge1xyXG4gICAgICAgIHJlYWN0aW9uLmN1cnJlbnQgPSBuZXcgUmVhY3Rpb24oXCJvYnNlcnZlcihcIiArIGJhc2VDb21wb25lbnROYW1lICsgXCIpXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChyZWFjdGlvbi5jdXJyZW50ICYmICFyZWFjdGlvbi5jdXJyZW50LmlzRGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgcmVhY3Rpb24uY3VycmVudC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHJlYWN0aW9uLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB1c2VEZWJ1Z1ZhbHVlKHJlYWN0aW9uLCBwcmludERlYnVnVmFsdWUpO1xyXG4gICAgdXNlVW5tb3VudChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZGlzcG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgICAvLyByZW5kZXIgdGhlIG9yaWdpbmFsIGNvbXBvbmVudCwgYnV0IGhhdmUgdGhlXHJcbiAgICAvLyByZWFjdGlvbiB0cmFjayB0aGUgb2JzZXJ2YWJsZXMsIHNvIHRoYXQgcmVuZGVyaW5nXHJcbiAgICAvLyBjYW4gYmUgaW52YWxpZGF0ZWQgKHNlZSBhYm92ZSkgb25jZSBhIGRlcGVuZGVuY3kgY2hhbmdlc1xyXG4gICAgdmFyIHJlbmRlcmluZztcclxuICAgIHZhciBleGNlcHRpb247XHJcbiAgICByZWFjdGlvbi5jdXJyZW50LnRyYWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZW5kZXJpbmcgPSBmbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBleGNlcHRpb24gPSBlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKGV4Y2VwdGlvbikge1xyXG4gICAgICAgIGRpc3Bvc2UoKTtcclxuICAgICAgICB0aHJvdyBleGNlcHRpb247IC8vIHJlLXRocm93IGFueSBleGNlcHRpb25zIGNhdGNoZWQgZHVyaW5nIHJlbmRlcmluZ1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlbmRlcmluZztcclxufVxuXG4vLyBuLmIuIGJhc2UgY2FzZSBpcyBub3QgdXNlZCBmb3IgYWN0dWFsIHR5cGluZ3Mgb3IgZXhwb3J0ZWQgaW4gdGhlIHR5cGluZyBmaWxlc1xyXG5mdW5jdGlvbiBvYnNlcnZlcihiYXNlQ29tcG9uZW50LCBvcHRpb25zKSB7XHJcbiAgICAvLyBUaGUgd29ya2luZyBvZiBvYnNlcnZlciBpcyBleHBsYWluZWQgc3RlcCBieSBzdGVwIGluIHRoaXMgdGFsazogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jUEY0aUJlZG9GMCZmZWF0dXJlPXlvdXR1LmJlJnQ9MTMwN1xyXG4gICAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSkge1xyXG4gICAgICAgIHJldHVybiBiYXNlQ29tcG9uZW50O1xyXG4gICAgfVxyXG4gICAgdmFyIHJlYWxPcHRpb25zID0gX19hc3NpZ24oeyBmb3J3YXJkUmVmOiBmYWxzZSB9LCBvcHRpb25zKTtcclxuICAgIHZhciBiYXNlQ29tcG9uZW50TmFtZSA9IGJhc2VDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgYmFzZUNvbXBvbmVudC5uYW1lO1xyXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnQgPSBmdW5jdGlvbiAocHJvcHMsIHJlZikge1xyXG4gICAgICAgIHJldHVybiB1c2VPYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBiYXNlQ29tcG9uZW50KHByb3BzLCByZWYpOyB9LCBiYXNlQ29tcG9uZW50TmFtZSk7XHJcbiAgICB9O1xyXG4gICAgd3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGJhc2VDb21wb25lbnROYW1lO1xyXG4gICAgLy8gbWVtbzsgd2UgYXJlIG5vdCBpbnRlc3RlZCBpbiBkZWVwIHVwZGF0ZXNcclxuICAgIC8vIGluIHByb3BzOyB3ZSBhc3N1bWUgdGhhdCBpZiBkZWVwIG9iamVjdHMgYXJlIGNoYW5nZWQsXHJcbiAgICAvLyB0aGlzIGlzIGluIG9ic2VydmFibGVzLCB3aGljaCB3b3VsZCBoYXZlIGJlZW4gdHJhY2tlZCBhbnl3YXlcclxuICAgIHZhciBtZW1vQ29tcG9uZW50O1xyXG4gICAgaWYgKHJlYWxPcHRpb25zLmZvcndhcmRSZWYpIHtcclxuICAgICAgICAvLyB3ZSBoYXZlIHRvIHVzZSBmb3J3YXJkUmVmIGhlcmUgYmVjYXVzZTpcclxuICAgICAgICAvLyAxLiBpdCBjYW5ub3QgZ28gYmVmb3JlIG1lbW8sIG9ubHkgYWZ0ZXIgaXRcclxuICAgICAgICAvLyAyLiBmb3J3YXJkUmVmIGNvbnZlcnRzIHRoZSBmdW5jdGlvbiBpbnRvIGFuIGFjdHVhbCBjb21wb25lbnQsIHNvIHdlIGNhbid0IGxldCB0aGUgYmFzZUNvbXBvbmVudCBkbyBpdFxyXG4gICAgICAgIC8vICAgIHNpbmNlIGl0IHdvdWxkbid0IGJlIGEgY2FsbGFibGUgZnVuY3Rpb24gYW55bW9yZVxyXG4gICAgICAgIG1lbW9Db21wb25lbnQgPSBtZW1vKGZvcndhcmRSZWYod3JhcHBlZENvbXBvbmVudCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbWVtb0NvbXBvbmVudCA9IG1lbW8od3JhcHBlZENvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICBjb3B5U3RhdGljUHJvcGVydGllcyhiYXNlQ29tcG9uZW50LCBtZW1vQ29tcG9uZW50KTtcclxuICAgIG1lbW9Db21wb25lbnQuZGlzcGxheU5hbWUgPSBiYXNlQ29tcG9uZW50TmFtZTtcclxuICAgIHJldHVybiBtZW1vQ29tcG9uZW50O1xyXG59XHJcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmlkZ3dheS9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ibG9iL21hc3Rlci9zcmMvaW5kZXguanNcclxudmFyIGhvaXN0QmxhY2tMaXN0ID0ge1xyXG4gICAgJCR0eXBlb2Y6IHRydWUsXHJcbiAgICByZW5kZXI6IHRydWUsXHJcbiAgICBjb21wYXJlOiB0cnVlLFxyXG4gICAgdHlwZTogdHJ1ZVxyXG59O1xyXG5mdW5jdGlvbiBjb3B5U3RhdGljUHJvcGVydGllcyhiYXNlLCB0YXJnZXQpIHtcclxuICAgIE9iamVjdC5rZXlzKGJhc2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmIChiYXNlLmhhc093blByb3BlcnR5KGtleSkgJiYgIWhvaXN0QmxhY2tMaXN0W2tleV0pIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIGtleSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XG5cbmZ1bmN0aW9uIE9ic2VydmVyQ29tcG9uZW50KF9hKSB7XHJcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgcmVuZGVyID0gX2EucmVuZGVyO1xyXG4gICAgdmFyIGNvbXBvbmVudCA9IGNoaWxkcmVuIHx8IHJlbmRlcjtcclxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50ICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiB1c2VPYnNlcnZlcihjb21wb25lbnQpO1xyXG59XHJcbk9ic2VydmVyQ29tcG9uZW50LnByb3BUeXBlcyA9IHtcclxuICAgIGNoaWxkcmVuOiBPYnNlcnZlclByb3BzQ2hlY2ssXHJcbiAgICByZW5kZXI6IE9ic2VydmVyUHJvcHNDaGVja1xyXG59O1xyXG5PYnNlcnZlckNvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiT2JzZXJ2ZXJcIjtcclxuZnVuY3Rpb24gT2JzZXJ2ZXJQcm9wc0NoZWNrKHByb3BzLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcclxuICAgIHZhciBleHRyYUtleSA9IGtleSA9PT0gXCJjaGlsZHJlblwiID8gXCJyZW5kZXJcIiA6IFwiY2hpbGRyZW5cIjtcclxuICAgIHZhciBoYXNQcm9wID0gdHlwZW9mIHByb3BzW2tleV0gPT09IFwiZnVuY3Rpb25cIjtcclxuICAgIHZhciBoYXNFeHRyYVByb3AgPSB0eXBlb2YgcHJvcHNbZXh0cmFLZXldID09PSBcImZ1bmN0aW9uXCI7XHJcbiAgICBpZiAoaGFzUHJvcCAmJiBoYXNFeHRyYVByb3ApIHtcclxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiTW9iWCBPYnNlcnZlcjogRG8gbm90IHVzZSBjaGlsZHJlbiBhbmQgcmVuZGVyIGluIHRoZSBzYW1lIHRpbWUgaW5gXCIgKyBjb21wb25lbnROYW1lKTtcclxuICAgIH1cclxuICAgIGlmIChoYXNQcm9wIHx8IGhhc0V4dHJhUHJvcCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCBgXCIgK1xyXG4gICAgICAgIHByb3BGdWxsTmFtZSArXHJcbiAgICAgICAgXCJgIG9mIHR5cGUgYFwiICtcclxuICAgICAgICB0eXBlb2YgcHJvcHNba2V5XSArXHJcbiAgICAgICAgXCJgIHN1cHBsaWVkIHRvXCIgK1xyXG4gICAgICAgIFwiIGBcIiArXHJcbiAgICAgICAgY29tcG9uZW50TmFtZSArXHJcbiAgICAgICAgXCJgLCBleHBlY3RlZCBgZnVuY3Rpb25gLlwiKTtcclxufVxuXG5mdW5jdGlvbiB1c2VBc09ic2VydmFibGVTb3VyY2VJbnRlcm5hbChjdXJyZW50LCB1c2VkQnlMb2NhbFN0b3JlKSB7XHJcbiAgICBpZiAodXNlZEJ5TG9jYWxTdG9yZSAmJiBjdXJyZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgdmFyIF9hID0gX19yZWFkKFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmFibGUoY3VycmVudCwge30sIHsgZGVlcDogZmFsc2UgfSk7IH0pLCAxKSwgcmVzID0gX2FbMF07XHJcbiAgICBydW5JbkFjdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIGN1cnJlbnQpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIHVzZUFzT2JzZXJ2YWJsZVNvdXJjZShjdXJyZW50KSB7XHJcbiAgICByZXR1cm4gdXNlQXNPYnNlcnZhYmxlU291cmNlSW50ZXJuYWwoY3VycmVudCwgZmFsc2UpO1xyXG59XG5cbmZ1bmN0aW9uIHVzZUxvY2FsU3RvcmUoaW5pdGlhbGl6ZXIsIGN1cnJlbnQpIHtcclxuICAgIHZhciBzb3VyY2UgPSB1c2VBc09ic2VydmFibGVTb3VyY2VJbnRlcm5hbChjdXJyZW50LCB0cnVlKTtcclxuICAgIHJldHVybiBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGxvY2FsID0gb2JzZXJ2YWJsZShpbml0aWFsaXplcihzb3VyY2UpKTtcclxuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChsb2NhbCkpIHtcclxuICAgICAgICAgICAgcnVuSW5BY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMobG9jYWwpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxvY2FsW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgTm8gaWRlYSB3aHkgdHMyNTM2IGlzIHBvcHBpbmcgb3V0IGhlcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxba2V5XSA9IHdyYXBJblRyYW5zYWN0aW9uKHZhbHVlLCBsb2NhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbG9jYWw7XHJcbiAgICB9KVswXTtcclxufVxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGJhbi10eXBlc1xyXG5mdW5jdGlvbiB3cmFwSW5UcmFuc2FjdGlvbihmbiwgY29udGV4dCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpOyB9KTtcclxuICAgIH07XHJcbn1cblxudmFyIG9wdGltaXplU2NoZWR1bGVyID0gZnVuY3Rpb24gKHJlYWN0aW9uU2NoZWR1bGVyKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlYWN0aW9uU2NoZWR1bGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBjb25maWd1cmUoeyByZWFjdGlvblNjaGVkdWxlcjogcmVhY3Rpb25TY2hlZHVsZXIgfSk7XHJcbiAgICB9XHJcbn07XG5cbmV4cG9ydCB7IE9ic2VydmVyQ29tcG9uZW50IGFzIE9ic2VydmVyLCBpc1VzaW5nU3RhdGljUmVuZGVyaW5nLCBvYnNlcnZlciwgb3B0aW1pemVTY2hlZHVsZXIsIHVzZUFzT2JzZXJ2YWJsZVNvdXJjZSwgdXNlQ29tcHV0ZWQsIHVzZURpc3Bvc2FibGUsIHVzZUZvcmNlVXBkYXRlLCB1c2VMb2NhbFN0b3JlLCB1c2VPYnNlcnZhYmxlLCB1c2VPYnNlcnZlciwgdXNlU3RhdGljUmVuZGVyaW5nIH07XG4iLCJpbXBvcnQgeyBSZWFjdGlvbiwgX2FsbG93U3RhdGVDaGFuZ2VzLCBfYWxsb3dTdGF0ZVJlYWRzU3RhcnQsIF9hbGxvd1N0YXRlUmVhZHNFbmQsICRtb2J4LCBjcmVhdGVBdG9tLCB1bnRyYWNrZWQsIGlzT2JzZXJ2YWJsZU1hcCwgaXNPYnNlcnZhYmxlT2JqZWN0LCBpc09ic2VydmFibGVBcnJheSwgb2JzZXJ2YWJsZSwgY29uZmlndXJlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgUHVyZUNvbXBvbmVudCwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBtZW1vLCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgaXNVc2luZ1N0YXRpY1JlbmRlcmluZywgT2JzZXJ2ZXIsIG9ic2VydmVyIGFzIG9ic2VydmVyJDEgfSBmcm9tICdtb2J4LXJlYWN0LWxpdGUnO1xuZXhwb3J0IHsgT2JzZXJ2ZXIsIGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcsIHVzZUFzT2JzZXJ2YWJsZVNvdXJjZSwgdXNlTG9jYWxTdG9yZSwgdXNlT2JzZXJ2ZXIsIHVzZVN0YXRpY1JlbmRlcmluZyB9IGZyb20gJ21vYngtcmVhY3QtbGl0ZSc7XG5cbnZhciBzeW1ib2xJZCA9IDA7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN5bWJvbChuYW1lKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gU3ltYm9sKG5hbWUpO1xuICB9XG5cbiAgdmFyIHN5bWJvbCA9IFwiX18kbW9ieC1yZWFjdCBcIiArIG5hbWUgKyBcIiAoXCIgKyBzeW1ib2xJZCArIFwiKVwiO1xuICBzeW1ib2xJZCsrO1xuICByZXR1cm4gc3ltYm9sO1xufVxuXG52YXIgY3JlYXRlZFN5bWJvbHMgPSB7fTtcbmZ1bmN0aW9uIG5ld1N5bWJvbChuYW1lKSB7XG4gIGlmICghY3JlYXRlZFN5bWJvbHNbbmFtZV0pIHtcbiAgICBjcmVhdGVkU3ltYm9sc1tuYW1lXSA9IGNyZWF0ZVN5bWJvbChuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVkU3ltYm9sc1tuYW1lXTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIC8vRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9jNjk5MDRhNTExYjkwMDI2NjkzNTE2ODIyMzA2M2RkODc3MmRmYzQwL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvc2hhbGxvd0VxdWFsLmpzXG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSBcIm9iamVjdFwiIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9jNjk5MDRhNTExYjkwMDI2NjkzNTE2ODIyMzA2M2RkODc3MmRmYzQwL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvc2hhbGxvd0VxdWFsLmpzXG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn0gLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21yaWRnd2F5L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC5qc1xuXG5cbnZhciBob2lzdEJsYWNrTGlzdCA9IHtcbiAgJCR0eXBlb2Y6IDEsXG4gIHJlbmRlcjogMSxcbiAgY29tcGFyZTogMSxcbiAgdHlwZTogMSxcbiAgY2hpbGRDb250ZXh0VHlwZXM6IDEsXG4gIGNvbnRleHRUeXBlOiAxLFxuICBjb250ZXh0VHlwZXM6IDEsXG4gIGRlZmF1bHRQcm9wczogMSxcbiAgZ2V0RGVmYXVsdFByb3BzOiAxLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IDEsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogMSxcbiAgbWl4aW5zOiAxLFxuICBwcm9wVHlwZXM6IDFcbn07XG5mdW5jdGlvbiBjb3B5U3RhdGljUHJvcGVydGllcyhiYXNlLCB0YXJnZXQpIHtcbiAgdmFyIHByb3RvUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZSkpO1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiYXNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhvaXN0QmxhY2tMaXN0W2tleV0gJiYgcHJvdG9Qcm9wcy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwga2V5KSk7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxyXG4gKiBIZWxwZXIgdG8gc2V0IGBwcm9wYCB0byBgdGhpc2AgYXMgbm9uLWVudW1lcmFibGUgKGhpZGRlbiBwcm9wKVxyXG4gKiBAcGFyYW0gdGFyZ2V0XHJcbiAqIEBwYXJhbSBwcm9wXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKi9cblxuZnVuY3Rpb24gc2V0SGlkZGVuUHJvcCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gIGlmICghT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgfVxufVxuLyoqXHJcbiAqIFV0aWxpdGllcyBmb3IgcGF0Y2hpbmcgY29tcG9uZW50V2lsbFVubW91bnQsIHRvIG1ha2Ugc3VyZSBAZGlzcG9zZU9uVW5tb3VudCB3b3JrcyBjb3JyZWN0bHkgaWNtIHdpdGggdXNlciBkZWZpbmVkIGhvb2tzXHJcbiAqIGFuZCB0aGUgaGFuZGxlciBwcm92aWRlZCBieSBtb2J4LXJlYWN0XHJcbiAqL1xuXG52YXIgbW9ieE1peGlucyA9XG4vKiNfX1BVUkVfXyovXG5uZXdTeW1ib2woXCJwYXRjaE1peGluc1wiKTtcbnZhciBtb2J4UGF0Y2hlZERlZmluaXRpb24gPVxuLyojX19QVVJFX18qL1xubmV3U3ltYm9sKFwicGF0Y2hlZERlZmluaXRpb25cIik7XG5cbmZ1bmN0aW9uIGdldE1peGlucyh0YXJnZXQsIG1ldGhvZE5hbWUpIHtcbiAgdmFyIG1peGlucyA9IHRhcmdldFttb2J4TWl4aW5zXSA9IHRhcmdldFttb2J4TWl4aW5zXSB8fCB7fTtcbiAgdmFyIG1ldGhvZE1peGlucyA9IG1peGluc1ttZXRob2ROYW1lXSA9IG1peGluc1ttZXRob2ROYW1lXSB8fCB7fTtcbiAgbWV0aG9kTWl4aW5zLmxvY2tzID0gbWV0aG9kTWl4aW5zLmxvY2tzIHx8IDA7XG4gIG1ldGhvZE1peGlucy5tZXRob2RzID0gbWV0aG9kTWl4aW5zLm1ldGhvZHMgfHwgW107XG4gIHJldHVybiBtZXRob2RNaXhpbnM7XG59XG5cbmZ1bmN0aW9uIHdyYXBwZXIocmVhbE1ldGhvZCwgbWl4aW5zKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgLy8gbG9ja3MgYXJlIHVzZWQgdG8gZW5zdXJlIHRoYXQgbWl4aW5zIGFyZSBpbnZva2VkIG9ubHkgb25jZSBwZXIgaW52b2NhdGlvbiwgZXZlbiBvbiByZWN1cnNpdmUgY2FsbHNcbiAgbWl4aW5zLmxvY2tzKys7XG5cbiAgdHJ5IHtcbiAgICB2YXIgcmV0VmFsO1xuXG4gICAgaWYgKHJlYWxNZXRob2QgIT09IHVuZGVmaW5lZCAmJiByZWFsTWV0aG9kICE9PSBudWxsKSB7XG4gICAgICByZXRWYWwgPSByZWFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIHJldHVybiByZXRWYWw7XG4gIH0gZmluYWxseSB7XG4gICAgbWl4aW5zLmxvY2tzLS07XG5cbiAgICBpZiAobWl4aW5zLmxvY2tzID09PSAwKSB7XG4gICAgICBtaXhpbnMubWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChteCkge1xuICAgICAgICBteC5hcHBseShfdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKHJlYWxNZXRob2QsIG1peGlucykge1xuICB2YXIgZm4gPSBmdW5jdGlvbiBmbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLmNhbGwuYXBwbHkod3JhcHBlciwgW3RoaXMsIHJlYWxNZXRob2QsIG1peGluc10uY29uY2F0KGFyZ3MpKTtcbiAgfTtcblxuICByZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIHBhdGNoKHRhcmdldCwgbWV0aG9kTmFtZSwgbWl4aW5NZXRob2QpIHtcbiAgdmFyIG1peGlucyA9IGdldE1peGlucyh0YXJnZXQsIG1ldGhvZE5hbWUpO1xuXG4gIGlmIChtaXhpbnMubWV0aG9kcy5pbmRleE9mKG1peGluTWV0aG9kKSA8IDApIHtcbiAgICBtaXhpbnMubWV0aG9kcy5wdXNoKG1peGluTWV0aG9kKTtcbiAgfVxuXG4gIHZhciBvbGREZWZpbml0aW9uID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG1ldGhvZE5hbWUpO1xuXG4gIGlmIChvbGREZWZpbml0aW9uICYmIG9sZERlZmluaXRpb25bbW9ieFBhdGNoZWREZWZpbml0aW9uXSkge1xuICAgIC8vIGFscmVhZHkgcGF0Y2hlZCBkZWZpbml0aW9uLCBkbyBub3QgcmVwYXRjaFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbE1ldGhvZCA9IHRhcmdldFttZXRob2ROYW1lXTtcbiAgdmFyIG5ld0RlZmluaXRpb24gPSBjcmVhdGVEZWZpbml0aW9uKHRhcmdldCwgbWV0aG9kTmFtZSwgb2xkRGVmaW5pdGlvbiA/IG9sZERlZmluaXRpb24uZW51bWVyYWJsZSA6IHVuZGVmaW5lZCwgbWl4aW5zLCBvcmlnaW5hbE1ldGhvZCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG1ldGhvZE5hbWUsIG5ld0RlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWZpbml0aW9uKHRhcmdldCwgbWV0aG9kTmFtZSwgZW51bWVyYWJsZSwgbWl4aW5zLCBvcmlnaW5hbE1ldGhvZCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgd3JhcHBlZEZ1bmMgPSB3cmFwRnVuY3Rpb24ob3JpZ2luYWxNZXRob2QsIG1peGlucyk7XG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbbW9ieFBhdGNoZWREZWZpbml0aW9uXSA9IHRydWUsIF9yZWYuZ2V0ID0gZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB3cmFwcGVkRnVuYztcbiAgfSwgX3JlZi5zZXQgPSBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICBpZiAodGhpcyA9PT0gdGFyZ2V0KSB7XG4gICAgICB3cmFwcGVkRnVuYyA9IHdyYXBGdW5jdGlvbih2YWx1ZSwgbWl4aW5zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2hlbiBpdCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgcHJvdG90eXBlL2EgY2hpbGQgcHJvdG90eXBlIHBhdGNoIHRoYXQgcGFydGljdWxhciBjYXNlIGFnYWluIHNlcGFyYXRlbHlcbiAgICAgIC8vIHNpbmNlIHdlIG5lZWQgdG8gc3RvcmUgc2VwYXJhdGUgdmFsdWVzIGRlcGVuZGluZyBvbiB3ZXRoZXIgaXQgaXMgdGhlIGFjdHVhbCBpbnN0YW5jZSwgdGhlIHByb3RvdHlwZSwgZXRjXG4gICAgICAvLyBlLmcuIHRoZSBtZXRob2QgZm9yIHN1cGVyIG1pZ2h0IG5vdCBiZSB0aGUgc2FtZSBhcyB0aGUgbWV0aG9kIGZvciB0aGUgcHJvdG90eXBlIHdoaWNoIG1pZ2h0IGJlIG5vdCB0aGUgc2FtZVxuICAgICAgLy8gYXMgdGhlIG1ldGhvZCBmb3IgdGhlIGluc3RhbmNlXG4gICAgICB2YXIgbmV3RGVmaW5pdGlvbiA9IGNyZWF0ZURlZmluaXRpb24odGhpcywgbWV0aG9kTmFtZSwgZW51bWVyYWJsZSwgbWl4aW5zLCB2YWx1ZSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbWV0aG9kTmFtZSwgbmV3RGVmaW5pdGlvbik7XG4gICAgfVxuICB9LCBfcmVmLmNvbmZpZ3VyYWJsZSA9IHRydWUsIF9yZWYuZW51bWVyYWJsZSA9IGVudW1lcmFibGUsIF9yZWY7XG59XG5cbnZhciBtb2J4QWRtaW5Qcm9wZXJ0eSA9ICRtb2J4IHx8IFwiJG1vYnhcIjtcbnZhciBtb2J4SXNVbm1vdW50ZWQgPVxuLyojX19QVVJFX18qL1xubmV3U3ltYm9sKFwiaXNVbm1vdW50ZWRcIik7XG52YXIgc2tpcFJlbmRlcktleSA9XG4vKiNfX1BVUkVfXyovXG5uZXdTeW1ib2woXCJza2lwUmVuZGVyXCIpO1xudmFyIGlzRm9yY2luZ1VwZGF0ZUtleSA9XG4vKiNfX1BVUkVfXyovXG5uZXdTeW1ib2woXCJpc0ZvcmNpbmdVcGRhdGVcIik7XG5mdW5jdGlvbiBtYWtlQ2xhc3NDb21wb25lbnRPYnNlcnZlcihjb21wb25lbnRDbGFzcykge1xuICB2YXIgdGFyZ2V0ID0gY29tcG9uZW50Q2xhc3MucHJvdG90eXBlO1xuICBpZiAodGFyZ2V0LmNvbXBvbmVudFdpbGxSZWFjdCkgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbXBvbmVudFdpbGxSZWFjdCBsaWZlLWN5Y2xlIGV2ZW50IGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIik7XG5cbiAgaWYgKGNvbXBvbmVudENsYXNzW1wiX19wcm90b19fXCJdICE9PSBQdXJlQ29tcG9uZW50KSB7XG4gICAgaWYgKCF0YXJnZXQuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB0YXJnZXQuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gb2JzZXJ2ZXJTQ1U7ZWxzZSBpZiAodGFyZ2V0LnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPT0gb2JzZXJ2ZXJTQ1UpIC8vIG4uYi4gdW5lcXVhbCBjaGVjaywgaW5zdGVhZCBvZiBleGlzdGVuY2UgY2hlY2ssIGFzIEBvYnNlcnZlciBtaWdodCBiZSBvbiBzdXBlcmNsYXNzIGFzIHdlbGxcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0IGlzIG5vdCBhbGxvd2VkIHRvIHVzZSBzaG91bGRDb21wb25lbnRVcGRhdGUgaW4gb2JzZXJ2ZXIgYmFzZWQgY29tcG9uZW50cy5cIik7XG4gIH0gLy8gdGhpcy5wcm9wcyBhbmQgdGhpcy5zdGF0ZSBhcmUgbWFkZSBvYnNlcnZhYmxlLCBqdXN0IHRvIG1ha2Ugc3VyZSBAY29tcHV0ZWQgZmllbGRzIHRoYXRcbiAgLy8gYXJlIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQsIGFuZCB3aGljaCByZWx5IG9uIHN0YXRlIG9yIHByb3BzLCByZS1jb21wdXRlIGlmIHN0YXRlIG9yIHByb3BzIGNoYW5nZVxuICAvLyAob3RoZXJ3aXNlIHRoZSBjb21wdXRlZCB3b3VsZG4ndCB1cGRhdGUgYW5kIGJlY29tZSBzdGFsZSBvbiBwcm9wcyBjaGFuZ2UsIHNpbmNlIHByb3BzIGFyZSBub3Qgb2JzZXJ2YWJsZSlcbiAgLy8gSG93ZXZlciwgdGhpcyBzb2x1dGlvbiBpcyBub3Qgd2l0aG91dCBpdCdzIG93biBwcm9ibGVtczogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4LXJlYWN0L2lzc3Vlcz91dGY4PSVFMiU5QyU5MyZxPWlzJTNBaXNzdWUrbGFiZWwlM0FvYnNlcnZhYmxlLXByb3BzLW9yLW5vdCtcblxuXG4gIG1ha2VPYnNlcnZhYmxlUHJvcCh0YXJnZXQsIFwicHJvcHNcIik7XG4gIG1ha2VPYnNlcnZhYmxlUHJvcCh0YXJnZXQsIFwic3RhdGVcIik7XG4gIHZhciBiYXNlUmVuZGVyID0gdGFyZ2V0LnJlbmRlcjtcblxuICB0YXJnZXQucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYWtlQ29tcG9uZW50UmVhY3RpdmUuY2FsbCh0aGlzLCBiYXNlUmVuZGVyKTtcbiAgfTtcblxuICBwYXRjaCh0YXJnZXQsIFwiY29tcG9uZW50V2lsbFVubW91bnRcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc1VzaW5nU3RhdGljUmVuZGVyaW5nKCkgPT09IHRydWUpIHJldHVybjtcblxuICAgIGlmICh0aGlzLnJlbmRlclttb2J4QWRtaW5Qcm9wZXJ0eV0pIHtcbiAgICAgIHRoaXMucmVuZGVyW21vYnhBZG1pblByb3BlcnR5XS5kaXNwb3NlKCk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHRoaXMpO1xuICAgICAgY29uc29sZS53YXJuKFwiVGhlIHJlbmRlciBmdW5jdGlvbiBmb3IgYW4gb2JzZXJ2ZXIgY29tcG9uZW50IChcIiArIGRpc3BsYXlOYW1lICsgXCIpIHdhcyBtb2RpZmllZCBhZnRlciBNb2JYIGF0dGFjaGVkLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQsIHNpbmNlIHRoZSBuZXcgZnVuY3Rpb24gY2FuJ3QgYmUgdHJpZ2dlcmVkIGJ5IE1vYlguXCIpO1xuICAgIH1cblxuICAgIHRoaXNbbW9ieElzVW5tb3VudGVkXSA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gY29tcG9uZW50Q2xhc3M7XG59IC8vIEdlbmVyYXRlcyBhIGZyaWVuZGx5IG5hbWUgZm9yIGRlYnVnZ2luZ1xuXG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShjb21wKSB7XG4gIHJldHVybiBjb21wLmRpc3BsYXlOYW1lIHx8IGNvbXAubmFtZSB8fCBjb21wLmNvbnN0cnVjdG9yICYmIChjb21wLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IGNvbXAuY29uc3RydWN0b3IubmFtZSkgfHwgXCI8Y29tcG9uZW50PlwiO1xufVxuXG5mdW5jdGlvbiBtYWtlQ29tcG9uZW50UmVhY3RpdmUocmVuZGVyKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSA9PT0gdHJ1ZSkgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMpO1xuICAvKipcclxuICAgKiBJZiBwcm9wcyBhcmUgc2hhbGxvd2x5IG1vZGlmaWVkLCByZWFjdCB3aWxsIHJlbmRlciBhbnl3YXksXHJcbiAgICogc28gYXRvbS5yZXBvcnRDaGFuZ2VkKCkgc2hvdWxkIG5vdCByZXN1bHQgaW4geWV0IGFub3RoZXIgcmUtcmVuZGVyXHJcbiAgICovXG5cbiAgc2V0SGlkZGVuUHJvcCh0aGlzLCBza2lwUmVuZGVyS2V5LCBmYWxzZSk7XG4gIC8qKlxyXG4gICAqIGZvcmNlVXBkYXRlIHdpbGwgcmUtYXNzaWduIHRoaXMucHJvcHMuIFdlIGRvbid0IHdhbnQgdGhhdCB0byBjYXVzZSBhIGxvb3AsXHJcbiAgICogc28gZGV0ZWN0IHRoZXNlIGNoYW5nZXNcclxuICAgKi9cblxuICBzZXRIaWRkZW5Qcm9wKHRoaXMsIGlzRm9yY2luZ1VwZGF0ZUtleSwgZmFsc2UpO1xuICB2YXIgaW5pdGlhbE5hbWUgPSBnZXREaXNwbGF5TmFtZSh0aGlzKTtcbiAgdmFyIGJhc2VSZW5kZXIgPSByZW5kZXIuYmluZCh0aGlzKTtcbiAgdmFyIGlzUmVuZGVyaW5nUGVuZGluZyA9IGZhbHNlO1xuICB2YXIgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24oaW5pdGlhbE5hbWUgKyBcIi5yZW5kZXIoKVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc1JlbmRlcmluZ1BlbmRpbmcpIHtcbiAgICAgIC8vIE4uQi4gR2V0dGluZyBoZXJlICpiZWZvcmUgbW91bnRpbmcqIG1lYW5zIHRoYXQgYSBjb21wb25lbnQgY29uc3RydWN0b3IgaGFzIHNpZGUgZWZmZWN0cyAoc2VlIHRoZSByZWxldmFudCB0ZXN0IGluIG1pc2MuanMpXG4gICAgICAvLyBUaGlzIHVuaWRpb21hdGljIFJlYWN0IHVzYWdlIGJ1dCBSZWFjdCB3aWxsIGNvcnJlY3RseSB3YXJuIGFib3V0IHRoaXMgc28gd2UgY29udGludWUgYXMgdXN1YWxcbiAgICAgIC8vIFNlZSAjODUgLyBQdWxsICM0NFxuICAgICAgaXNSZW5kZXJpbmdQZW5kaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKF90aGlzW21vYnhJc1VubW91bnRlZF0gIT09IHRydWUpIHtcbiAgICAgICAgdmFyIGhhc0Vycm9yID0gdHJ1ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHNldEhpZGRlblByb3AoX3RoaXMsIGlzRm9yY2luZ1VwZGF0ZUtleSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKCFfdGhpc1tza2lwUmVuZGVyS2V5XSkgQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZS5jYWxsKF90aGlzKTtcbiAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNldEhpZGRlblByb3AoX3RoaXMsIGlzRm9yY2luZ1VwZGF0ZUtleSwgZmFsc2UpO1xuICAgICAgICAgIGlmIChoYXNFcnJvcikgcmVhY3Rpb24uZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmVhY3Rpb25bXCJyZWFjdENvbXBvbmVudFwiXSA9IHRoaXM7XG4gIHJlYWN0aXZlUmVuZGVyW21vYnhBZG1pblByb3BlcnR5XSA9IHJlYWN0aW9uO1xuICB0aGlzLnJlbmRlciA9IHJlYWN0aXZlUmVuZGVyO1xuXG4gIGZ1bmN0aW9uIHJlYWN0aXZlUmVuZGVyKCkge1xuICAgIGlzUmVuZGVyaW5nUGVuZGluZyA9IGZhbHNlO1xuICAgIHZhciBleGNlcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHJlbmRlcmluZyA9IHVuZGVmaW5lZDtcbiAgICByZWFjdGlvbi50cmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZW5kZXJpbmcgPSBfYWxsb3dTdGF0ZUNoYW5nZXMoZmFsc2UsIGJhc2VSZW5kZXIpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBleGNlcHRpb24gPSBlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGV4Y2VwdGlvbikge1xuICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiByZW5kZXJpbmc7XG4gIH1cblxuICByZXR1cm4gcmVhY3RpdmVSZW5kZXIuY2FsbCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZXJTQ1UobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSkge1xuICAgIGNvbnNvbGUud2FybihcIlttb2J4LXJlYWN0XSBJdCBzZWVtcyB0aGF0IGEgcmUtcmVuZGVyaW5nIG9mIGEgUmVhY3QgY29tcG9uZW50IGlzIHRyaWdnZXJlZCB3aGlsZSBpbiBzdGF0aWMgKHNlcnZlci1zaWRlKSBtb2RlLiBQbGVhc2UgbWFrZSBzdXJlIGNvbXBvbmVudHMgYXJlIHJlbmRlcmVkIG9ubHkgb25jZSBzZXJ2ZXItc2lkZS5cIik7XG4gIH0gLy8gdXBkYXRlIG9uIGFueSBzdGF0ZSBjaGFuZ2VzIChhcyBpcyB0aGUgZGVmYXVsdClcblxuXG4gIGlmICh0aGlzLnN0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB1cGRhdGUgaWYgcHJvcHMgYXJlIHNoYWxsb3dseSBub3QgZXF1YWwsIGluc3BpcmVkIGJ5IFB1cmVSZW5kZXJNaXhpblxuICAvLyB3ZSBjb3VsZCByZXR1cm4ganVzdCAnZmFsc2UnIGhlcmUsIGFuZCBhdm9pZCB0aGUgYHNraXBSZW5kZXJgIGNoZWNrcyBldGNcbiAgLy8gaG93ZXZlciwgaXQgaXMgbmljZXIgaWYgbGlmZWN5Y2xlIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIGxpa2UgdXN1YWxseSxcbiAgLy8gc28gd2UgcmV0dXJuIHRydWUgaGVyZSBpZiBwcm9wcyBhcmUgc2hhbGxvd2x5IG1vZGlmaWVkLlxuXG5cbiAgcmV0dXJuICFzaGFsbG93RXF1YWwodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbn1cblxuZnVuY3Rpb24gbWFrZU9ic2VydmFibGVQcm9wKHRhcmdldCwgcHJvcE5hbWUpIHtcbiAgdmFyIHZhbHVlSG9sZGVyS2V5ID0gbmV3U3ltYm9sKFwicmVhY3RQcm9wX1wiICsgcHJvcE5hbWUgKyBcIl92YWx1ZUhvbGRlclwiKTtcbiAgdmFyIGF0b21Ib2xkZXJLZXkgPSBuZXdTeW1ib2woXCJyZWFjdFByb3BfXCIgKyBwcm9wTmFtZSArIFwiX2F0b21Ib2xkZXJcIik7XG5cbiAgZnVuY3Rpb24gZ2V0QXRvbSgpIHtcbiAgICBpZiAoIXRoaXNbYXRvbUhvbGRlcktleV0pIHtcbiAgICAgIHNldEhpZGRlblByb3AodGhpcywgYXRvbUhvbGRlcktleSwgY3JlYXRlQXRvbShcInJlYWN0aXZlIFwiICsgcHJvcE5hbWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1thdG9tSG9sZGVyS2V5XTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BOYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcHJldlJlYWRTdGF0ZSA9IGZhbHNlO1xuXG4gICAgICBpZiAoX2FsbG93U3RhdGVSZWFkc1N0YXJ0ICYmIF9hbGxvd1N0YXRlUmVhZHNFbmQpIHtcbiAgICAgICAgcHJldlJlYWRTdGF0ZSA9IF9hbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZ2V0QXRvbS5jYWxsKHRoaXMpLnJlcG9ydE9ic2VydmVkKCk7XG5cbiAgICAgIGlmIChfYWxsb3dTdGF0ZVJlYWRzU3RhcnQgJiYgX2FsbG93U3RhdGVSZWFkc0VuZCkge1xuICAgICAgICBfYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXZSZWFkU3RhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1t2YWx1ZUhvbGRlcktleV07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7XG4gICAgICBpZiAoIXRoaXNbaXNGb3JjaW5nVXBkYXRlS2V5XSAmJiAhc2hhbGxvd0VxdWFsKHRoaXNbdmFsdWVIb2xkZXJLZXldLCB2KSkge1xuICAgICAgICBzZXRIaWRkZW5Qcm9wKHRoaXMsIHZhbHVlSG9sZGVyS2V5LCB2KTtcbiAgICAgICAgc2V0SGlkZGVuUHJvcCh0aGlzLCBza2lwUmVuZGVyS2V5LCB0cnVlKTtcbiAgICAgICAgZ2V0QXRvbS5jYWxsKHRoaXMpLnJlcG9ydENoYW5nZWQoKTtcbiAgICAgICAgc2V0SGlkZGVuUHJvcCh0aGlzLCBza2lwUmVuZGVyS2V5LCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRIaWRkZW5Qcm9wKHRoaXMsIHZhbHVlSG9sZGVyS2V5LCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG52YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5mb3I7IC8vIFVzaW5nIHJlYWN0LWlzIGhhZCBzb21lIGlzc3VlcyAoYW5kIG9wZXJhdGVzIG9uIGVsZW1lbnRzLCBub3Qgb24gdHlwZXMpLCBzZWUgIzYwOCAvICM2MDlcblxudmFyIFJlYWN0Rm9yd2FyZFJlZlN5bWJvbCA9IGhhc1N5bWJvbCA/XG4vKiNfX1BVUkVfXyovXG5TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIikgOiB0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJmdW5jdGlvblwiICYmXG4vKiNfX1BVUkVfXyovXG5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcykge1xuICByZXR1cm4gbnVsbDtcbn0pW1wiJCR0eXBlb2ZcIl07XG52YXIgUmVhY3RNZW1vU3ltYm9sID0gaGFzU3ltYm9sID9cbi8qI19fUFVSRV9fKi9cblN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpIDogdHlwZW9mIG1lbW8gPT09IFwiZnVuY3Rpb25cIiAmJlxuLyojX19QVVJFX18qL1xubWVtbyhmdW5jdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIG51bGw7XG59KVtcIiQkdHlwZW9mXCJdO1xuLyoqXHJcbiAqIE9ic2VydmVyIGZ1bmN0aW9uIC8gZGVjb3JhdG9yXHJcbiAqL1xuXG5mdW5jdGlvbiBvYnNlcnZlcihjb21wb25lbnQpIHtcbiAgaWYgKGNvbXBvbmVudFtcImlzTW9ieEluamVjdG9yXCJdID09PSB0cnVlKSB7XG4gICAgY29uc29sZS53YXJuKFwiTW9ieCBvYnNlcnZlcjogWW91IGFyZSB0cnlpbmcgdG8gdXNlICdvYnNlcnZlcicgb24gYSBjb21wb25lbnQgdGhhdCBhbHJlYWR5IGhhcyAnaW5qZWN0Jy4gUGxlYXNlIGFwcGx5ICdvYnNlcnZlcicgYmVmb3JlIGFwcGx5aW5nICdpbmplY3QnXCIpO1xuICB9XG5cbiAgaWYgKFJlYWN0TWVtb1N5bWJvbCAmJiBjb21wb25lbnRbXCIkJHR5cGVvZlwiXSA9PT0gUmVhY3RNZW1vU3ltYm9sKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTW9ieCBvYnNlcnZlcjogWW91IGFyZSB0cnlpbmcgdG8gdXNlICdvYnNlcnZlcicgb24gZnVuY3Rpb24gY29tcG9uZW50IHdyYXBwZWQgdG8gZWl0aGVyIGFub3RoZXIgb2JzZXJ2ZXIgb3IgJ1JlYWN0Lm1lbW8nLiBUaGUgb2JzZXJ2ZXIgYWxyZWFkeSBhcHBsaWVzICdSZWFjdC5tZW1vJyBmb3IgeW91LlwiKTtcbiAgfSAvLyBVbndyYXAgZm9yd2FyZCByZWZzIGludG8gYDxPYnNlcnZlcj5gIGNvbXBvbmVudFxuICAvLyB3ZSBuZWVkIHRvIHVud3JhcCB0aGUgcmVuZGVyLCBiZWNhdXNlIGl0IGlzIHRoZSBpbm5lciByZW5kZXIgdGhhdCBuZWVkcyB0byBiZSB0cmFja2VkLFxuICAvLyBub3QgdGhlIEZvcndhcmRSZWYgSG9DXG5cblxuICBpZiAoUmVhY3RGb3J3YXJkUmVmU3ltYm9sICYmIGNvbXBvbmVudFtcIiQkdHlwZW9mXCJdID09PSBSZWFjdEZvcndhcmRSZWZTeW1ib2wpIHtcbiAgICB2YXIgYmFzZVJlbmRlciA9IGNvbXBvbmVudFtcInJlbmRlclwiXTtcbiAgICBpZiAodHlwZW9mIGJhc2VSZW5kZXIgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyIHByb3BlcnR5IG9mIEZvcndhcmRSZWYgd2FzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHJldHVybiBmb3J3YXJkUmVmKGZ1bmN0aW9uIE9ic2VydmVyRm9yd2FyZFJlZigpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoT2JzZXJ2ZXIsIG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VSZW5kZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IC8vIEZ1bmN0aW9uIGNvbXBvbmVudFxuXG5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09IFwiZnVuY3Rpb25cIiAmJiAoIWNvbXBvbmVudC5wcm90b3R5cGUgfHwgIWNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyKSAmJiAhY29tcG9uZW50W1wiaXNSZWFjdENsYXNzXCJdICYmICFPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YuY2FsbChDb21wb25lbnQsIGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gb2JzZXJ2ZXIkMShjb21wb25lbnQpO1xuICB9XG5cbiAgcmV0dXJuIG1ha2VDbGFzc0NvbXBvbmVudE9ic2VydmVyKGNvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgTW9iWFByb3ZpZGVyQ29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5SZWFjdF9fZGVmYXVsdC5jcmVhdGVDb250ZXh0KHt9KTtcbmZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgc3RvcmVzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImNoaWxkcmVuXCJdKTtcblxuICB2YXIgcGFyZW50VmFsdWUgPSBSZWFjdF9fZGVmYXVsdC51c2VDb250ZXh0KE1vYlhQcm92aWRlckNvbnRleHQpO1xuICB2YXIgbXV0YWJsZVByb3ZpZGVyUmVmID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKF9leHRlbmRzKHt9LCBwYXJlbnRWYWx1ZSwge30sIHN0b3JlcykpO1xuICB2YXIgdmFsdWUgPSBtdXRhYmxlUHJvdmlkZXJSZWYuY3VycmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gX2V4dGVuZHMoe30sIHZhbHVlLCB7fSwgc3RvcmVzKTsgLy8gc3ByZWFkIGluIHByZXZpb3VzIHN0YXRlIGZvciB0aGUgY29udGV4dCBiYXNlZCBzdG9yZXNcblxuXG4gICAgaWYgKCFzaGFsbG93RXF1YWwodmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9iWCBQcm92aWRlcjogVGhlIHNldCBvZiBwcm92aWRlZCBzdG9yZXMgaGFzIGNoYW5nZWQuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4LXJlYWN0I3RoZS1zZXQtb2YtcHJvdmlkZWQtc3RvcmVzLWhhcy1jaGFuZ2VkLWVycm9yLlwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChNb2JYUHJvdmlkZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblByb3ZpZGVyLmRpc3BsYXlOYW1lID0gXCJNb2JYUHJvdmlkZXJcIjtcblxuLyoqXHJcbiAqIFN0b3JlIEluamVjdGlvblxyXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmVJbmplY3RvcihncmFiU3RvcmVzRm4sIGNvbXBvbmVudCwgaW5qZWN0TmFtZXMsIG1ha2VSZWFjdGl2ZSkge1xuICAvLyBTdXBwb3J0IGZvcndhcmQgcmVmc1xuICB2YXIgSW5qZWN0b3IgPSBSZWFjdF9fZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgdmFyIG5ld1Byb3BzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcblxuICAgIHZhciBjb250ZXh0ID0gUmVhY3RfX2RlZmF1bHQudXNlQ29udGV4dChNb2JYUHJvdmlkZXJDb250ZXh0KTtcbiAgICBPYmplY3QuYXNzaWduKG5ld1Byb3BzLCBncmFiU3RvcmVzRm4oY29udGV4dCB8fCB7fSwgbmV3UHJvcHMpIHx8IHt9KTtcblxuICAgIGlmIChyZWYpIHtcbiAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIG5ld1Byb3BzKTtcbiAgfSk7XG4gIGlmIChtYWtlUmVhY3RpdmUpIEluamVjdG9yID0gb2JzZXJ2ZXIoSW5qZWN0b3IpO1xuICBJbmplY3RvcltcImlzTW9ieEluamVjdG9yXCJdID0gdHJ1ZTsgLy8gYXNzaWduZWQgbGF0ZSB0byBzdXBwcmVzcyBvYnNlcnZlciB3YXJuaW5nXG4gIC8vIFN0YXRpYyBmaWVsZHMgZnJvbSBjb21wb25lbnQgc2hvdWxkIGJlIHZpc2libGUgb24gdGhlIGdlbmVyYXRlZCBJbmplY3RvclxuXG4gIGNvcHlTdGF0aWNQcm9wZXJ0aWVzKGNvbXBvbmVudCwgSW5qZWN0b3IpO1xuICBJbmplY3RvcltcIndyYXBwZWRDb21wb25lbnRcIl0gPSBjb21wb25lbnQ7XG4gIEluamVjdG9yLmRpc3BsYXlOYW1lID0gZ2V0SW5qZWN0TmFtZShjb21wb25lbnQsIGluamVjdE5hbWVzKTtcbiAgcmV0dXJuIEluamVjdG9yO1xufVxuXG5mdW5jdGlvbiBnZXRJbmplY3ROYW1lKGNvbXBvbmVudCwgaW5qZWN0TmFtZXMpIHtcbiAgdmFyIGRpc3BsYXlOYW1lO1xuICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnQubmFtZSB8fCBjb21wb25lbnQuY29uc3RydWN0b3IgJiYgY29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWUgfHwgXCJDb21wb25lbnRcIjtcbiAgaWYgKGluamVjdE5hbWVzKSBkaXNwbGF5TmFtZSA9IFwiaW5qZWN0LXdpdGgtXCIgKyBpbmplY3ROYW1lcyArIFwiKFwiICsgY29tcG9uZW50TmFtZSArIFwiKVwiO2Vsc2UgZGlzcGxheU5hbWUgPSBcImluamVjdChcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGRpc3BsYXlOYW1lO1xufVxuXG5mdW5jdGlvbiBncmFiU3RvcmVzQnlOYW1lKHN0b3JlTmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiYXNlU3RvcmVzLCBuZXh0UHJvcHMpIHtcbiAgICBzdG9yZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuICAgICAgaWYgKHN0b3JlTmFtZSBpbiBuZXh0UHJvcHMgLy8gcHJlZmVyIHByb3BzIG92ZXIgc3RvcmVzXG4gICAgICApIHJldHVybjtcbiAgICAgIGlmICghKHN0b3JlTmFtZSBpbiBiYXNlU3RvcmVzKSkgdGhyb3cgbmV3IEVycm9yKFwiTW9iWCBpbmplY3RvcjogU3RvcmUgJ1wiICsgc3RvcmVOYW1lICsgXCInIGlzIG5vdCBhdmFpbGFibGUhIE1ha2Ugc3VyZSBpdCBpcyBwcm92aWRlZCBieSBzb21lIFByb3ZpZGVyXCIpO1xuICAgICAgbmV4dFByb3BzW3N0b3JlTmFtZV0gPSBiYXNlU3RvcmVzW3N0b3JlTmFtZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHRQcm9wcztcbiAgfTtcbn1cbi8qKlxyXG4gKiBoaWdoZXIgb3JkZXIgY29tcG9uZW50IHRoYXQgaW5qZWN0cyBzdG9yZXMgdG8gYSBjaGlsZC5cclxuICogdGFrZXMgZWl0aGVyIGEgdmFyYXJncyBsaXN0IG9mIHN0cmluZ3MsIHdoaWNoIGFyZSBzdG9yZXMgcmVhZCBmcm9tIHRoZSBjb250ZXh0LFxyXG4gKiBvciBhIGZ1bmN0aW9uIHRoYXQgbWFudWFsbHkgbWFwcyB0aGUgYXZhaWxhYmxlIHN0b3JlcyBmcm9tIHRoZSBjb250ZXh0IHRvIHByb3BzOlxyXG4gKiBzdG9yZXNUb1Byb3BzKG1vYnhTdG9yZXMsIHByb3BzLCBjb250ZXh0KSA9PiBuZXdQcm9wc1xyXG4gKi9cblxuXG5mdW5jdGlvbiBpbmplY3QoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdG9yZU5hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHN0b3JlTmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGdyYWJTdG9yZXNGbiA9IGFyZ3VtZW50c1swXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3RvcmVJbmplY3RvcihncmFiU3RvcmVzRm4sIGNvbXBvbmVudENsYXNzLCBncmFiU3RvcmVzRm4ubmFtZSwgdHJ1ZSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3RvcmVJbmplY3RvcihncmFiU3RvcmVzQnlOYW1lKHN0b3JlTmFtZXMpLCBjb21wb25lbnRDbGFzcywgc3RvcmVOYW1lcy5qb2luKFwiLVwiKSwgZmFsc2UpO1xuICAgIH07XG4gIH1cbn1cblxudmFyIHByb3RvU3RvcmVLZXkgPVxuLyojX19QVVJFX18qL1xubmV3U3ltYm9sKFwiZGlzcG9zZU9uVW5tb3VudFByb3RvXCIpO1xudmFyIGluc3RTdG9yZUtleSA9XG4vKiNfX1BVUkVfXyovXG5uZXdTeW1ib2woXCJkaXNwb3NlT25Vbm1vdW50SW5zdFwiKTtcblxuZnVuY3Rpb24gcnVuRGlzcG9zZXJzT25XaWxsVW5tb3VudCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgW10uY29uY2F0KHRoaXNbcHJvdG9TdG9yZUtleV0gfHwgW10sIHRoaXNbaW5zdFN0b3JlS2V5XSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcEtleU9yRnVuY3Rpb24pIHtcbiAgICB2YXIgcHJvcCA9IHR5cGVvZiBwcm9wS2V5T3JGdW5jdGlvbiA9PT0gXCJzdHJpbmdcIiA/IF90aGlzW3Byb3BLZXlPckZ1bmN0aW9uXSA6IHByb3BLZXlPckZ1bmN0aW9uO1xuXG4gICAgaWYgKHByb3AgIT09IHVuZGVmaW5lZCAmJiBwcm9wICE9PSBudWxsKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wKSkgcHJvcC5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgIH0pO2Vsc2UgcHJvcCgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc3Bvc2VPblVubW91bnQodGFyZ2V0LCBwcm9wZXJ0eUtleU9yRnVuY3Rpb24pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHlLZXlPckZ1bmN0aW9uKSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleU9yRnVuY3Rpb24ubWFwKGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGRpc3Bvc2VPblVubW91bnQodGFyZ2V0LCBmbik7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpLmNvbnN0cnVjdG9yIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQuY29uc3RydWN0b3IpO1xuICB2YXIgYzIgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0LmNvbnN0cnVjdG9yKTtcblxuICBpZiAoIShjID09PSBSZWFjdF9fZGVmYXVsdC5Db21wb25lbnQgfHwgYyA9PT0gUmVhY3RfX2RlZmF1bHQuUHVyZUNvbXBvbmVudCB8fCBjMiA9PT0gUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50IHx8IGMyID09PSBSZWFjdF9fZGVmYXVsdC5QdXJlQ29tcG9uZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4LXJlYWN0XSBkaXNwb3NlT25Vbm1vdW50IG9ubHkgc3VwcG9ydHMgZGlyZWN0IHN1YmNsYXNzZXMgb2YgUmVhY3QuQ29tcG9uZW50IG9yIFJlYWN0LlB1cmVDb21wb25lbnQuXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eUtleU9yRnVuY3Rpb24gIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHByb3BlcnR5S2V5T3JGdW5jdGlvbiAhPT0gXCJmdW5jdGlvblwiICYmICFBcnJheS5pc0FycmF5KHByb3BlcnR5S2V5T3JGdW5jdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC1yZWFjdF0gZGlzcG9zZU9uVW5tb3VudCBvbmx5IHdvcmtzIGlmIHRoZSBwYXJhbWV0ZXIgaXMgZWl0aGVyIGEgcHJvcGVydHkga2V5IG9yIGEgZnVuY3Rpb24uXCIpO1xuICB9IC8vIGRlY29yYXRvcidzIHRhcmdldCBpcyB0aGUgcHJvdG90eXBlLCBzbyBpdCBkb2Vzbid0IGhhdmUgYW55IGluc3RhbmNlIHByb3BlcnRpZXMgbGlrZSBwcm9wc1xuXG5cbiAgdmFyIGlzRGVjb3JhdG9yID0gdHlwZW9mIHByb3BlcnR5S2V5T3JGdW5jdGlvbiA9PT0gXCJzdHJpbmdcIjsgLy8gYWRkIHByb3BlcnR5IGtleSAvIGZ1bmN0aW9uIHdlIHdhbnQgcnVuIChkaXNwb3NlZCkgdG8gdGhlIHN0b3JlXG5cbiAgdmFyIGNvbXBvbmVudFdhc0FscmVhZHlNb2RpZmllZCA9ICEhdGFyZ2V0W3Byb3RvU3RvcmVLZXldIHx8ICEhdGFyZ2V0W2luc3RTdG9yZUtleV07XG4gIHZhciBzdG9yZSA9IGlzRGVjb3JhdG9yID8gLy8gZGVjb3JhdG9ycyBhcmUgYWRkZWQgdG8gdGhlIHByb3RvdHlwZSBzdG9yZVxuICB0YXJnZXRbcHJvdG9TdG9yZUtleV0gfHwgKHRhcmdldFtwcm90b1N0b3JlS2V5XSA9IFtdKSA6IC8vIGZ1bmN0aW9ucyBhcmUgYWRkZWQgdG8gdGhlIGluc3RhbmNlIHN0b3JlXG4gIHRhcmdldFtpbnN0U3RvcmVLZXldIHx8ICh0YXJnZXRbaW5zdFN0b3JlS2V5XSA9IFtdKTtcbiAgc3RvcmUucHVzaChwcm9wZXJ0eUtleU9yRnVuY3Rpb24pOyAvLyB0d2VhayB0aGUgY29tcG9uZW50IGNsYXNzIGNvbXBvbmVudFdpbGxVbm1vdW50IGlmIG5vdCBkb25lIGFscmVhZHlcblxuICBpZiAoIWNvbXBvbmVudFdhc0FscmVhZHlNb2RpZmllZCkge1xuICAgIHBhdGNoKHRhcmdldCwgXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLCBydW5EaXNwb3NlcnNPbldpbGxVbm1vdW50KTtcbiAgfSAvLyByZXR1cm4gdGhlIGRpc3Bvc2VyIGFzIGlzIGlmIGludm9rZWQgYXMgYSBub24gZGVjb3JhdG9yXG5cblxuICBpZiAodHlwZW9mIHByb3BlcnR5S2V5T3JGdW5jdGlvbiAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleU9yRnVuY3Rpb247XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdG9yKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gNiA/IF9sZW4gLSA2IDogMCksIF9rZXkgPSA2OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICByZXN0W19rZXkgLSA2XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IFwiPDxhbm9ueW1vdXM+PlwiO1xuICAgICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsID0gcHJvcHNbcHJvcE5hbWVdID09PSBudWxsID8gXCJudWxsXCIgOiBcInVuZGVmaW5lZFwiO1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgXCIgKyBsb2NhdGlvbiArIFwiIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgXCIgKyBcImluIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYFwiICsgYWN0dWFsICsgXCJgLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSByZXN0IGFyZyBpcyBuZWNlc3NhcnkgZm9yIHNvbWUgUmVhY3QgaW50ZXJuYWxzIC0gZmFpbHMgdGVzdHMgb3RoZXJ3aXNlXG4gICAgICAgIHJldHVybiB2YWxpZGF0b3IuYXBwbHkodm9pZCAwLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lXS5jb25jYXQocmVzdCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7IC8vIEFkZCBpc1JlcXVpcmVkIHRvIHNhdGlzZnkgUmVxdWlyYWJsZVxuXG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn0gLy8gQ29waWVkIGZyb20gUmVhY3QuUHJvcFR5cGVzXG5cblxuZnVuY3Rpb24gaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkge1xuICAvLyBOYXRpdmUgU3ltYm9sLlxuICBpZiAocHJvcFR5cGUgPT09IFwic3ltYm9sXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuXG5cbiAgaWYgKHByb3BWYWx1ZVtcIkBAdG9TdHJpbmdUYWdcIl0gPT09IFwiU3ltYm9sXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG5cblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcblxuXG5mdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIFwiYXJyYXlcIjtcbiAgfVxuXG4gIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgcmV0dXJuIFwib2JqZWN0XCI7XG4gIH1cblxuICBpZiAoaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gXCJzeW1ib2xcIjtcbiAgfVxuXG4gIHJldHVybiBwcm9wVHlwZTtcbn0gLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuLy8gQ29waWVkIGZyb20gUmVhY3QuUHJvcFR5cGVzXG5cblxuZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG5cbiAgaWYgKHByb3BUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiBcImRhdGVcIjtcbiAgICB9IGVsc2UgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIFwicmVnZXhwXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGFsbG93TmF0aXZlVHlwZSwgbW9ieFR5cGUpIHtcbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICByZXR1cm4gdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChhbGxvd05hdGl2ZVR5cGUpIHtcbiAgICAgICAgaWYgKGdldFByb3BUeXBlKHByb3BzW3Byb3BOYW1lXSkgPT09IG1vYnhUeXBlLnRvTG93ZXJDYXNlKCkpIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW9ieENoZWNrZXI7XG5cbiAgICAgIHN3aXRjaCAobW9ieFR5cGUpIHtcbiAgICAgICAgY2FzZSBcIkFycmF5XCI6XG4gICAgICAgICAgbW9ieENoZWNrZXIgPSBpc09ic2VydmFibGVBcnJheTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiT2JqZWN0XCI6XG4gICAgICAgICAgbW9ieENoZWNrZXIgPSBpc09ic2VydmFibGVPYmplY3Q7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIk1hcFwiOlxuICAgICAgICAgIG1vYnhDaGVja2VyID0gaXNPYnNlcnZhYmxlTWFwO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBtb2J4VHlwZTogXCIgKyBtb2J4VHlwZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgICAgIGlmICghbW9ieENoZWNrZXIocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICB2YXIgbmF0aXZlVHlwZUV4cGVjdGF0aW9uTWVzc2FnZSA9IGFsbG93TmF0aXZlVHlwZSA/IFwiIG9yIGphdmFzY3JpcHQgYFwiICsgbW9ieFR5cGUudG9Mb3dlckNhc2UoKSArIFwiYFwiIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBwcmVjaXNlVHlwZSArIFwiYCBzdXBwbGllZCB0b1wiICsgXCIgYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYG1vYnguT2JzZXJ2YWJsZVwiICsgbW9ieFR5cGUgKyBcImBcIiArIG5hdGl2ZVR5cGVFeHBlY3RhdGlvbk1lc3NhZ2UgKyBcIi5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZUFycmF5T2ZUeXBlQ2hlY2tlcihhbGxvd05hdGl2ZVR5cGUsIHR5cGVDaGVja2VyKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4yID4gNSA/IF9sZW4yIC0gNSA6IDApLCBfa2V5MiA9IDU7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIHJlc3RbX2tleTIgLSA1XSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVudHJhY2tlZChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlByb3BlcnR5IGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBvZiBjb21wb25lbnQgYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCBoYXMgXCIgKyBcImludmFsaWQgUHJvcFR5cGUgbm90YXRpb24uXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVycm9yID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcihhbGxvd05hdGl2ZVR5cGUsIFwiQXJyYXlcIikocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVycm9yID0gdHlwZUNoZWNrZXIuYXBwbHkodm9pZCAwLCBbcHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgXCJbXCIgKyBpICsgXCJdXCJdLmNvbmNhdChyZXN0KSk7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxudmFyIG9ic2VydmFibGVBcnJheSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGZhbHNlLCBcIkFycmF5XCIpO1xudmFyIG9ic2VydmFibGVBcnJheU9mID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU9ic2VydmFibGVBcnJheU9mVHlwZUNoZWNrZXIuYmluZChudWxsLCBmYWxzZSk7XG52YXIgb2JzZXJ2YWJsZU1hcCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGZhbHNlLCBcIk1hcFwiKTtcbnZhciBvYnNlcnZhYmxlT2JqZWN0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoZmFsc2UsIFwiT2JqZWN0XCIpO1xudmFyIGFycmF5T3JPYnNlcnZhYmxlQXJyYXkgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcih0cnVlLCBcIkFycmF5XCIpO1xudmFyIGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZiA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyLmJpbmQobnVsbCwgdHJ1ZSk7XG52YXIgb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IodHJ1ZSwgXCJPYmplY3RcIik7XG52YXIgUHJvcFR5cGVzID0ge1xuICBvYnNlcnZhYmxlQXJyYXk6IG9ic2VydmFibGVBcnJheSxcbiAgb2JzZXJ2YWJsZUFycmF5T2Y6IG9ic2VydmFibGVBcnJheU9mLFxuICBvYnNlcnZhYmxlTWFwOiBvYnNlcnZhYmxlTWFwLFxuICBvYnNlcnZhYmxlT2JqZWN0OiBvYnNlcnZhYmxlT2JqZWN0LFxuICBhcnJheU9yT2JzZXJ2YWJsZUFycmF5OiBhcnJheU9yT2JzZXJ2YWJsZUFycmF5LFxuICBhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2Y6IGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZixcbiAgb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0OiBvYmplY3RPck9ic2VydmFibGVPYmplY3Rcbn07XG5cbmlmICghQ29tcG9uZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0IHJlcXVpcmVzIFJlYWN0IHRvIGJlIGF2YWlsYWJsZVwiKTtcbmlmICghb2JzZXJ2YWJsZSkgdGhyb3cgbmV3IEVycm9yKFwibW9ieC1yZWFjdCByZXF1aXJlcyBtb2J4IHRvIGJlIGF2YWlsYWJsZVwiKTtcbmlmICh0eXBlb2YgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPT09IFwiZnVuY3Rpb25cIikgY29uZmlndXJlKHtcbiAgcmVhY3Rpb25TY2hlZHVsZXI6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzXG59KTtcblxuZXhwb3J0IHsgTW9iWFByb3ZpZGVyQ29udGV4dCwgUHJvcFR5cGVzLCBQcm92aWRlciwgZGlzcG9zZU9uVW5tb3VudCwgaW5qZWN0LCBvYnNlcnZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9ieHJlYWN0LmVzbS5qcy5tYXBcbiIsInZhciBfT2JqZWN0JGFzc2lnbiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gX09iamVjdCRhc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwidmFyIF9PYmplY3QkY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gX09iamVjdCRjcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCJ2YXIgX09iamVjdCRrZXlzID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2tleXNcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICB2YXIgc291cmNlS2V5cyA9IF9PYmplY3Qka2V5cyhzb3VyY2UpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBfU3R5bGVDb25maWcgPSByZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKTtcblxudmFyIF9WYWxpZENvbXBvbmVudENoaWxkcmVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuXCIpKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldHMgYGlkYCBvbiBgPEZvcm1Db250cm9sPmAgYW5kIGBodG1sRm9yYCBvbiBgPEZvcm1Hcm91cC5MYWJlbD5gLlxuICAgKi9cbiAgY29udHJvbElkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICB2YWxpZGF0aW9uU3RhdGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdlcnJvcicsIG51bGxdKVxufTtcbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG52YXIgRm9ybUdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRm9ybUdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtR3JvdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm1Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjb250cm9sSWQgPSBfdGhpcyRwcm9wcy5jb250cm9sSWQsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0ZSA9IF90aGlzJHByb3BzLnZhbGlkYXRpb25TdGF0ZTtcbiAgICByZXR1cm4ge1xuICAgICAgJGJzX2Zvcm1Hcm91cDoge1xuICAgICAgICBjb250cm9sSWQ6IGNvbnRyb2xJZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlOiB2YWxpZGF0aW9uU3RhdGVcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5oYXNGZWVkYmFjayA9IGZ1bmN0aW9uIGhhc0ZlZWRiYWNrKGNoaWxkcmVuKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0LnNvbWUoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLmJzUm9sZSA9PT0gJ2ZlZWRiYWNrJyB8fCBjaGlsZC5wcm9wcy5jaGlsZHJlbiAmJiBfdGhpcy5oYXNGZWVkYmFjayhjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3RoaXMkcHJvcHMyLnZhbGlkYXRpb25TdGF0ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wczIsIFtcInZhbGlkYXRpb25TdGF0ZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzQW5kT21pdCkocHJvcHMsIFsnY29udHJvbElkJ10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKSwge1xuICAgICAgJ2hhcy1mZWVkYmFjayc6IHRoaXMuaGFzRmVlZGJhY2soY2hpbGRyZW4pXG4gICAgfSk7XG5cbiAgICBpZiAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjbGFzc2VzW1wiaGFzLVwiICsgdmFsaWRhdGlvblN0YXRlXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybUdyb3VwO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Gb3JtR3JvdXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRm9ybUdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2Zvcm0tZ3JvdXAnLCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSwgX1N0eWxlQ29uZmlnLlNpemUuU01BTExdLCBGb3JtR3JvdXApKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2lzQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvYXJyYXkvaXMtYXJyYXlcIikpO1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX092ZXJsYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL092ZXJsYXlcIikpO1xuXG52YXIgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKTtcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBvbmUgaXMgaW5zaWRlIG9yIGVxdWFsIHRvIHRoZSBvZiB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVcbiAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSBvZlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT25lT2Yob25lLCBvZikge1xuICBpZiAoKDAsIF9pc0FycmF5LmRlZmF1bHQpKG9mKSkge1xuICAgIHJldHVybiBvZi5pbmRleE9mKG9uZSkgPj0gMDtcbiAgfVxuXG4gIHJldHVybiBvbmUgPT09IG9mO1xufVxuXG52YXIgdHJpZ2dlclR5cGUgPSBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydjbGljaycsICdob3ZlcicsICdmb2N1cyddKTtcblxudmFyIHByb3BUeXBlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIF9PdmVybGF5LmRlZmF1bHQucHJvcFR5cGVzLCB7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoaWNoIGFjdGlvbiBvciBhY3Rpb25zIHRyaWdnZXIgT3ZlcmxheSB2aXNpYmlsaXR5XG4gICAqL1xuICB0cmlnZ2VyOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFt0cmlnZ2VyVHlwZSwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YodHJpZ2dlclR5cGUpXSksXG5cbiAgLyoqXG4gICAqIEEgbWlsbGlzZWNvbmQgZGVsYXkgYW1vdW50IHRvIHNob3cgYW5kIGhpZGUgdGhlIE92ZXJsYXkgb25jZSB0cmlnZ2VyZWRcbiAgICovXG4gIGRlbGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBBIG1pbGxpc2Vjb25kIGRlbGF5IGFtb3VudCBiZWZvcmUgc2hvd2luZyB0aGUgT3ZlcmxheSBvbmNlIHRyaWdnZXJlZC5cbiAgICovXG4gIGRlbGF5U2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogQSBtaWxsaXNlY29uZCBkZWxheSBhbW91bnQgYmVmb3JlIGhpZGluZyB0aGUgT3ZlcmxheSBvbmNlIHRyaWdnZXJlZC5cbiAgICovXG4gIGRlbGF5SGlkZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgLy8gRklYTUU6IFRoaXMgc2hvdWxkIGJlIGBkZWZhdWx0U2hvd2AuXG5cbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsIHZpc2liaWxpdHkgc3RhdGUgb2YgdGhlIE92ZXJsYXkuIEZvciBtb3JlIG51YW5jZWQgdmlzaWJpbGl0eVxuICAgKiBjb250cm9sLCBjb25zaWRlciB1c2luZyB0aGUgT3ZlcmxheSBjb21wb25lbnQgZGlyZWN0bHkuXG4gICAqL1xuICBkZWZhdWx0T3ZlcmxheVNob3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQW4gZWxlbWVudCBvciB0ZXh0IHRvIG92ZXJsYXkgbmV4dCB0byB0aGUgdGFyZ2V0LlxuICAgKi9cbiAgb3ZlcmxheTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Nb3VzZU91dDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbk1vdXNlT3ZlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8vIE92ZXJyaWRkZW4gcHJvcHMgZnJvbSBgPE92ZXJsYXk+YC5cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRhcmdldDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtudWxsXSksXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkhpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbbnVsbF0pLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtudWxsXSlcbn0pO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGVmYXVsdE92ZXJsYXlTaG93bjogZmFsc2UsXG4gIHRyaWdnZXI6IFsnaG92ZXInLCAnZm9jdXMnXVxufTtcblxudmFyIE92ZXJsYXlUcmlnZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoT3ZlcmxheVRyaWdnZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE92ZXJsYXlUcmlnZ2VyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlVG9nZ2xlID0gX3RoaXMuaGFuZGxlVG9nZ2xlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVEZWxheWVkU2hvdyA9IF90aGlzLmhhbmRsZURlbGF5ZWRTaG93LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVEZWxheWVkSGlkZSA9IF90aGlzLmhhbmRsZURlbGF5ZWRIaWRlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICBfdGhpcy5oYW5kbGVIaWRlID0gX3RoaXMuaGFuZGxlSGlkZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZU92ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vdXNlT3Zlck91dChfdGhpcy5oYW5kbGVEZWxheWVkU2hvdywgZSwgJ2Zyb21FbGVtZW50Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlT3V0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVNb3VzZU92ZXJPdXQoX3RoaXMuaGFuZGxlRGVsYXllZEhpZGUsIGUsICd0b0VsZW1lbnQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX21vdW50Tm9kZSA9IG51bGw7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93OiBwcm9wcy5kZWZhdWx0T3ZlcmxheVNob3duXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT3ZlcmxheVRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX21vdW50Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMucmVuZGVyT3ZlcmxheSgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5yZW5kZXJPdmVybGF5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgX3JlYWN0RG9tLmRlZmF1bHQudW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLl9tb3VudE5vZGUpO1xuXG4gICAgdGhpcy5fbW91bnROb2RlID0gbnVsbDtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5faG92ZXJTaG93RGVsYXkpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9ob3ZlckhpZGVEZWxheSk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZURlbGF5ZWRIaWRlID0gZnVuY3Rpb24gaGFuZGxlRGVsYXllZEhpZGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5faG92ZXJTaG93RGVsYXkgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hvdmVyU2hvd0RlbGF5KTtcbiAgICAgIHRoaXMuX2hvdmVyU2hvd0RlbGF5ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuc2hvdyB8fCB0aGlzLl9ob3ZlckhpZGVEZWxheSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlbGF5ID0gdGhpcy5wcm9wcy5kZWxheUhpZGUgIT0gbnVsbCA/IHRoaXMucHJvcHMuZGVsYXlIaWRlIDogdGhpcy5wcm9wcy5kZWxheTtcblxuICAgIGlmICghZGVsYXkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2hvdmVySGlkZURlbGF5ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuX2hvdmVySGlkZURlbGF5ID0gbnVsbDtcblxuICAgICAgX3RoaXMyLmhpZGUoKTtcbiAgICB9LCBkZWxheSk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZURlbGF5ZWRTaG93ID0gZnVuY3Rpb24gaGFuZGxlRGVsYXllZFNob3coKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5faG92ZXJIaWRlRGVsYXkgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hvdmVySGlkZURlbGF5KTtcbiAgICAgIHRoaXMuX2hvdmVySGlkZURlbGF5ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5zaG93IHx8IHRoaXMuX2hvdmVyU2hvd0RlbGF5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVsYXkgPSB0aGlzLnByb3BzLmRlbGF5U2hvdyAhPSBudWxsID8gdGhpcy5wcm9wcy5kZWxheVNob3cgOiB0aGlzLnByb3BzLmRlbGF5O1xuXG4gICAgaWYgKCFkZWxheSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faG92ZXJTaG93RGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5faG92ZXJTaG93RGVsYXkgPSBudWxsO1xuXG4gICAgICBfdGhpczMuc2hvdygpO1xuICAgIH0sIGRlbGF5KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlSGlkZSA9IGZ1bmN0aW9uIGhhbmRsZUhpZGUoKSB7XG4gICAgdGhpcy5oaWRlKCk7XG4gIH07IC8vIFNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZUVudGVyIGFuZCBtb3VzZUxlYXZlLlxuICAvLyBSZWFjdCdzIGJ1aWx0IHZlcnNpb24gaXMgYnJva2VuOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzQyNTFcbiAgLy8gZm9yIGNhc2VzIHdoZW4gdGhlIHRyaWdnZXIgaXMgZGlzYWJsZWQgYW5kIG1vdXNlT3V0L092ZXIgY2FuIGNhdXNlIGZsaWNrZXJcbiAgLy8gbW92aW5nIGZyb20gb25lIGNoaWxkIGVsZW1lbnQgdG8gYW5vdGhlci5cblxuXG4gIF9wcm90by5oYW5kbGVNb3VzZU92ZXJPdXQgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU92ZXJPdXQoaGFuZGxlciwgZSwgcmVsYXRlZE5hdGl2ZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgdmFyIHJlbGF0ZWQgPSBlLnJlbGF0ZWRUYXJnZXQgfHwgZS5uYXRpdmVFdmVudFtyZWxhdGVkTmF0aXZlXTtcblxuICAgIGlmICgoIXJlbGF0ZWQgfHwgcmVsYXRlZCAhPT0gdGFyZ2V0KSAmJiAhKDAsIF9jb250YWlucy5kZWZhdWx0KSh0YXJnZXQsIHJlbGF0ZWQpKSB7XG4gICAgICBoYW5kbGVyKGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNob3cpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvdzogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFrZU92ZXJsYXkgPSBmdW5jdGlvbiBtYWtlT3ZlcmxheShvdmVybGF5LCBwcm9wcykge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PdmVybGF5LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICBzaG93OiB0aGlzLnN0YXRlLnNob3csXG4gICAgICBvbkhpZGU6IHRoaXMuaGFuZGxlSGlkZSxcbiAgICAgIHRhcmdldDogdGhpc1xuICAgIH0pLCBvdmVybGF5KTtcbiAgfTtcblxuICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiByZW5kZXJPdmVybGF5KCkge1xuICAgIF9yZWFjdERvbS5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHRoaXMsIHRoaXMuX292ZXJsYXksIHRoaXMuX21vdW50Tm9kZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICB0cmlnZ2VyID0gX3RoaXMkcHJvcHMudHJpZ2dlcixcbiAgICAgICAgb3ZlcmxheSA9IF90aGlzJHByb3BzLm92ZXJsYXksXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uQmx1ciA9IF90aGlzJHByb3BzLm9uQmx1cixcbiAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgIG9uRm9jdXMgPSBfdGhpcyRwcm9wcy5vbkZvY3VzLFxuICAgICAgICBvbk1vdXNlT3V0ID0gX3RoaXMkcHJvcHMub25Nb3VzZU91dCxcbiAgICAgICAgb25Nb3VzZU92ZXIgPSBfdGhpcyRwcm9wcy5vbk1vdXNlT3ZlcixcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJ0cmlnZ2VyXCIsIFwib3ZlcmxheVwiLCBcImNoaWxkcmVuXCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbk1vdXNlT3V0XCIsIFwib25Nb3VzZU92ZXJcIl0pO1xuICAgIGRlbGV0ZSBwcm9wcy5kZWxheTtcbiAgICBkZWxldGUgcHJvcHMuZGVsYXlTaG93O1xuICAgIGRlbGV0ZSBwcm9wcy5kZWxheUhpZGU7XG4gICAgZGVsZXRlIHByb3BzLmRlZmF1bHRPdmVybGF5U2hvd247XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHZhciBjaGlsZFByb3BzID0gY2hpbGQucHJvcHM7XG4gICAgdmFyIHRyaWdnZXJQcm9wcyA9IHt9O1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuc2hvdykge1xuICAgICAgdHJpZ2dlclByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10gPSBvdmVybGF5LnByb3BzLmlkO1xuICAgIH0gLy8gRklYTUU6IFRoZSBsb2dpYyBoZXJlIGZvciBwYXNzaW5nIHRocm91Z2ggaGFuZGxlcnMgb24gdGhpcyBjb21wb25lbnQgaXNcbiAgICAvLyBpbmNvbnNpc3RlbnQuIFdlIHNob3VsZG4ndCBiZSBwYXNzaW5nIGFueSBvZiB0aGVzZSBwcm9wcyB0aHJvdWdoLlxuXG5cbiAgICB0cmlnZ2VyUHJvcHMub25DbGljayA9ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGNoaWxkUHJvcHMub25DbGljaywgb25DbGljayk7XG5cbiAgICBpZiAoaXNPbmVPZignY2xpY2snLCB0cmlnZ2VyKSkge1xuICAgICAgdHJpZ2dlclByb3BzLm9uQ2xpY2sgPSAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KSh0cmlnZ2VyUHJvcHMub25DbGljaywgdGhpcy5oYW5kbGVUb2dnbGUpO1xuICAgIH1cblxuICAgIGlmIChpc09uZU9mKCdob3ZlcicsIHRyaWdnZXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoISh0cmlnZ2VyID09PSAnaG92ZXInKSwgJ1tyZWFjdC1ib290c3RyYXBdIFNwZWNpZnlpbmcgb25seSB0aGUgYFwiaG92ZXJcImAgdHJpZ2dlciBsaW1pdHMgdGhlICcgKyAndmlzaWJpbGl0eSBvZiB0aGUgb3ZlcmxheSB0byBqdXN0IG1vdXNlIHVzZXJzLiBDb25zaWRlciBhbHNvICcgKyAnaW5jbHVkaW5nIHRoZSBgXCJmb2N1c1wiYCB0cmlnZ2VyIHNvIHRoYXQgdG91Y2ggYW5kIGtleWJvYXJkIG9ubHkgJyArICd1c2VycyBjYW4gc2VlIHRoZSBvdmVybGF5IGFzIHdlbGwuJykgOiB2b2lkIDA7XG4gICAgICB0cmlnZ2VyUHJvcHMub25Nb3VzZU92ZXIgPSAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShjaGlsZFByb3BzLm9uTW91c2VPdmVyLCBvbk1vdXNlT3ZlciwgdGhpcy5oYW5kbGVNb3VzZU92ZXIpO1xuICAgICAgdHJpZ2dlclByb3BzLm9uTW91c2VPdXQgPSAoMCwgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShjaGlsZFByb3BzLm9uTW91c2VPdXQsIG9uTW91c2VPdXQsIHRoaXMuaGFuZGxlTW91c2VPdXQpO1xuICAgIH1cblxuICAgIGlmIChpc09uZU9mKCdmb2N1cycsIHRyaWdnZXIpKSB7XG4gICAgICB0cmlnZ2VyUHJvcHMub25Gb2N1cyA9ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGNoaWxkUHJvcHMub25Gb2N1cywgb25Gb2N1cywgdGhpcy5oYW5kbGVEZWxheWVkU2hvdyk7XG4gICAgICB0cmlnZ2VyUHJvcHMub25CbHVyID0gKDAsIF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoY2hpbGRQcm9wcy5vbkJsdXIsIG9uQmx1ciwgdGhpcy5oYW5kbGVEZWxheWVkSGlkZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fb3ZlcmxheSA9IHRoaXMubWFrZU92ZXJsYXkob3ZlcmxheSwgcHJvcHMpO1xuICAgIHJldHVybiAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHRyaWdnZXJQcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIE92ZXJsYXlUcmlnZ2VyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5PdmVybGF5VHJpZ2dlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5PdmVybGF5VHJpZ2dlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgX2RlZmF1bHQgPSBPdmVybGF5VHJpZ2dlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfaXNSZXF1aXJlZEZvckExMXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeVwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFuIGh0bWwgaWQgYXR0cmlidXRlLCBuZWNlc3NhcnkgZm9yIGFjY2Vzc2liaWxpdHlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHJlcXVpcmVkXG4gICAqL1xuICBpZDogKDAsIF9pc1JlcXVpcmVkRm9yQTExeS5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSkpLFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gdGhlIFBvcG92ZXIgaXMgcG9zaXRpb25lZCB0b3dhcmRzLlxuICAgKi9cbiAgcGxhY2VtZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcInRvcFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3Zlci5cbiAgICovXG4gIHBvc2l0aW9uVG9wOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcImxlZnRcIiBwb3NpdGlvbiB2YWx1ZSBmb3IgdGhlIFBvcG92ZXIuXG4gICAqL1xuICBwb3NpdGlvbkxlZnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwidG9wXCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBQb3BvdmVyIGFycm93LlxuICAgKi9cbiAgYXJyb3dPZmZzZXRUb3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwibGVmdFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3ZlciBhcnJvdy5cbiAgICovXG4gIGFycm93T2Zmc2V0TGVmdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaXRsZSBjb250ZW50XG4gICAqL1xuICB0aXRsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGVcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbnZhciBQb3BvdmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUG9wb3ZlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUG9wb3Zlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcGxhY2VtZW50ID0gX3RoaXMkcHJvcHMucGxhY2VtZW50LFxuICAgICAgICBwb3NpdGlvblRvcCA9IF90aGlzJHByb3BzLnBvc2l0aW9uVG9wLFxuICAgICAgICBwb3NpdGlvbkxlZnQgPSBfdGhpcyRwcm9wcy5wb3NpdGlvbkxlZnQsXG4gICAgICAgIGFycm93T2Zmc2V0VG9wID0gX3RoaXMkcHJvcHMuYXJyb3dPZmZzZXRUb3AsXG4gICAgICAgIGFycm93T2Zmc2V0TGVmdCA9IF90aGlzJHByb3BzLmFycm93T2Zmc2V0TGVmdCxcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcInBsYWNlbWVudFwiLCBcInBvc2l0aW9uVG9wXCIsIFwicG9zaXRpb25MZWZ0XCIsIFwiYXJyb3dPZmZzZXRUb3BcIiwgXCJhcnJvd09mZnNldExlZnRcIiwgXCJ0aXRsZVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3BsYWNlbWVudF0gPSB0cnVlLCBfZXh0ZW5kczIpKTtcbiAgICB2YXIgb3V0ZXJTdHlsZSA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRvcDogcG9zaXRpb25Ub3AsXG4gICAgICBsZWZ0OiBwb3NpdGlvbkxlZnRcbiAgICB9LCBzdHlsZSk7XG4gICAgdmFyIGFycm93U3R5bGUgPSB7XG4gICAgICB0b3A6IGFycm93T2Zmc2V0VG9wLFxuICAgICAgbGVmdDogYXJyb3dPZmZzZXRMZWZ0XG4gICAgfTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJvbGU6IFwidG9vbHRpcFwiLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKSxcbiAgICAgIHN0eWxlOiBvdXRlclN0eWxlXG4gICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcImFycm93XCIsXG4gICAgICBzdHlsZTogYXJyb3dTdHlsZVxuICAgIH0pLCB0aXRsZSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ3RpdGxlJylcbiAgICB9LCB0aXRsZSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ2NvbnRlbnQnKVxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFBvcG92ZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvcG92ZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ3BvcG92ZXInLCBQb3BvdmVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmdldENsYXNzU2V0ID0gZ2V0Q2xhc3NTZXQ7XG5leHBvcnRzLnNwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcztcbmV4cG9ydHMuc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQ7XG5leHBvcnRzLmFkZFN0eWxlID0gYWRkU3R5bGU7XG5leHBvcnRzLl9jdXJyeSA9IGV4cG9ydHMuYnNTaXplcyA9IGV4cG9ydHMuYnNTdHlsZXMgPSBleHBvcnRzLmJzQ2xhc3MgPSB2b2lkIDA7XG5cbnZhciBfZW50cmllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZW50cmllc1wiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfaW52YXJpYW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW52YXJpYW50XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9TdHlsZUNvbmZpZyA9IHJlcXVpcmUoXCIuL1N0eWxlQ29uZmlnXCIpO1xuXG4vLyBUT0RPOiBUaGUgcHVibGljbHkgZXhwb3NlZCBwYXJ0cyBvZiB0aGlzIHNob3VsZCBiZSBpbiBsaWIvQm9vdHN0cmFwVXRpbHMuXG5mdW5jdGlvbiBjdXJyeShmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgbGFzdCA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcblxuICAgIGlmICh0eXBlb2YgbGFzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3MuY29uY2F0KFtDb21wb25lbnRdKSk7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlZml4KHByb3BzLCB2YXJpYW50KSB7XG4gIHZhciBic0NsYXNzID0gKHByb3BzLmJzQ2xhc3MgfHwgJycpLnRyaW0oKTtcbiAgIShic0NsYXNzICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoZmFsc2UsICdBIGBic0NsYXNzYCBwcm9wIGlzIHJlcXVpcmVkIGZvciB0aGlzIGNvbXBvbmVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGJzQ2xhc3MgKyAodmFyaWFudCA/IFwiLVwiICsgdmFyaWFudCA6ICcnKTtcbn1cblxudmFyIGJzQ2xhc3MgPSBjdXJyeShmdW5jdGlvbiAoZGVmYXVsdENsYXNzLCBDb21wb25lbnQpIHtcbiAgdmFyIHByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXMgfHwgKENvbXBvbmVudC5wcm9wVHlwZXMgPSB7fSk7XG4gIHZhciBkZWZhdWx0UHJvcHMgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzIHx8IChDb21wb25lbnQuZGVmYXVsdFByb3BzID0ge30pO1xuICBwcm9wVHlwZXMuYnNDbGFzcyA9IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmc7XG4gIGRlZmF1bHRQcm9wcy5ic0NsYXNzID0gZGVmYXVsdENsYXNzO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSk7XG5leHBvcnRzLmJzQ2xhc3MgPSBic0NsYXNzO1xudmFyIGJzU3R5bGVzID0gY3VycnkoZnVuY3Rpb24gKHN0eWxlcywgZGVmYXVsdFN0eWxlLCBDb21wb25lbnQpIHtcbiAgaWYgKHR5cGVvZiBkZWZhdWx0U3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlO1xuICAgIGRlZmF1bHRTdHlsZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBleGlzdGluZyA9IENvbXBvbmVudC5TVFlMRVMgfHwgW107XG4gIHZhciBwcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzIHx8IHt9O1xuICBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICBpZiAoZXhpc3RpbmcuaW5kZXhPZihzdHlsZSkgPT09IC0xKSB7XG4gICAgICBleGlzdGluZy5wdXNoKHN0eWxlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBwcm9wVHlwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihleGlzdGluZyk7IC8vIGV4cG9zZSB0aGUgdmFsdWVzIG9uIHRoZSBwcm9wVHlwZSBmdW5jdGlvbiBmb3IgZG9jdW1lbnRhdGlvblxuXG5cbiAgQ29tcG9uZW50LlNUWUxFUyA9IGV4aXN0aW5nO1xuICBwcm9wVHlwZS5fdmFsdWVzID0gZXhpc3Rpbmc7XG4gIENvbXBvbmVudC5wcm9wVHlwZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wVHlwZXMsIHtcbiAgICBic1N0eWxlOiBwcm9wVHlwZVxuICB9KTtcblxuICBpZiAoZGVmYXVsdFN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcyB8fCAoQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IHt9KTtcbiAgICBkZWZhdWx0UHJvcHMuYnNTdHlsZSA9IGRlZmF1bHRTdHlsZTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59KTtcbmV4cG9ydHMuYnNTdHlsZXMgPSBic1N0eWxlcztcbnZhciBic1NpemVzID0gY3VycnkoZnVuY3Rpb24gKHNpemVzLCBkZWZhdWx0U2l6ZSwgQ29tcG9uZW50KSB7XG4gIGlmICh0eXBlb2YgZGVmYXVsdFNpemUgIT09ICdzdHJpbmcnKSB7XG4gICAgQ29tcG9uZW50ID0gZGVmYXVsdFNpemU7XG4gICAgZGVmYXVsdFNpemUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgZXhpc3RpbmcgPSBDb21wb25lbnQuU0laRVMgfHwgW107XG4gIHZhciBwcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzIHx8IHt9O1xuICBzaXplcy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgaWYgKGV4aXN0aW5nLmluZGV4T2Yoc2l6ZSkgPT09IC0xKSB7XG4gICAgICBleGlzdGluZy5wdXNoKHNpemUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZXhpc3RpbmcuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHZhciBtYXBwZWRTaXplID0gX1N0eWxlQ29uZmlnLlNJWkVfTUFQW3NpemVdO1xuXG4gICAgaWYgKG1hcHBlZFNpemUgJiYgbWFwcGVkU2l6ZSAhPT0gc2l6ZSkge1xuICAgICAgdmFsdWVzLnB1c2gobWFwcGVkU2l6ZSk7XG4gICAgfVxuXG4gICAgdmFsdWVzLnB1c2goc2l6ZSk7XG4gIH0pO1xuXG4gIHZhciBwcm9wVHlwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZih2YWx1ZXMpO1xuXG4gIHByb3BUeXBlLl92YWx1ZXMgPSB2YWx1ZXM7IC8vIGV4cG9zZSB0aGUgdmFsdWVzIG9uIHRoZSBwcm9wVHlwZSBmdW5jdGlvbiBmb3IgZG9jdW1lbnRhdGlvblxuXG4gIENvbXBvbmVudC5TSVpFUyA9IGV4aXN0aW5nO1xuICBDb21wb25lbnQucHJvcFR5cGVzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcFR5cGVzLCB7XG4gICAgYnNTaXplOiBwcm9wVHlwZVxuICB9KTtcblxuICBpZiAoZGVmYXVsdFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghQ29tcG9uZW50LmRlZmF1bHRQcm9wcykge1xuICAgICAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIENvbXBvbmVudC5kZWZhdWx0UHJvcHMuYnNTaXplID0gZGVmYXVsdFNpemU7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufSk7XG5leHBvcnRzLmJzU2l6ZXMgPSBic1NpemVzO1xuXG5mdW5jdGlvbiBnZXRDbGFzc1NldChwcm9wcykge1xuICB2YXIgX2NsYXNzZXM7XG5cbiAgdmFyIGNsYXNzZXMgPSAoX2NsYXNzZXMgPSB7fSwgX2NsYXNzZXNbcHJlZml4KHByb3BzKV0gPSB0cnVlLCBfY2xhc3Nlcyk7XG5cbiAgaWYgKHByb3BzLmJzU2l6ZSkge1xuICAgIHZhciBic1NpemUgPSBfU3R5bGVDb25maWcuU0laRV9NQVBbcHJvcHMuYnNTaXplXSB8fCBwcm9wcy5ic1NpemU7XG4gICAgY2xhc3Nlc1twcmVmaXgocHJvcHMsIGJzU2l6ZSldID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9wcy5ic1N0eWxlKSB7XG4gICAgY2xhc3Nlc1twcmVmaXgocHJvcHMsIHByb3BzLmJzU3R5bGUpXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuZnVuY3Rpb24gZ2V0QnNQcm9wcyhwcm9wcykge1xuICByZXR1cm4ge1xuICAgIGJzQ2xhc3M6IHByb3BzLmJzQ2xhc3MsXG4gICAgYnNTaXplOiBwcm9wcy5ic1NpemUsXG4gICAgYnNTdHlsZTogcHJvcHMuYnNTdHlsZSxcbiAgICBic1JvbGU6IHByb3BzLmJzUm9sZVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0JzUHJvcChwcm9wTmFtZSkge1xuICByZXR1cm4gcHJvcE5hbWUgPT09ICdic0NsYXNzJyB8fCBwcm9wTmFtZSA9PT0gJ2JzU2l6ZScgfHwgcHJvcE5hbWUgPT09ICdic1N0eWxlJyB8fCBwcm9wTmFtZSA9PT0gJ2JzUm9sZSc7XG59XG5cbmZ1bmN0aW9uIHNwbGl0QnNQcm9wcyhwcm9wcykge1xuICB2YXIgZWxlbWVudFByb3BzID0ge307XG4gICgwLCBfZW50cmllcy5kZWZhdWx0KShwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwcm9wTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgIHByb3BWYWx1ZSA9IF9yZWZbMV07XG5cbiAgICBpZiAoIWlzQnNQcm9wKHByb3BOYW1lKSkge1xuICAgICAgZWxlbWVudFByb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW2dldEJzUHJvcHMocHJvcHMpLCBlbGVtZW50UHJvcHNdO1xufVxuXG5mdW5jdGlvbiBzcGxpdEJzUHJvcHNBbmRPbWl0KHByb3BzLCBvbWl0dGVkUHJvcE5hbWVzKSB7XG4gIHZhciBpc09taXR0ZWRQcm9wID0ge307XG4gIG9taXR0ZWRQcm9wTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICBpc09taXR0ZWRQcm9wW3Byb3BOYW1lXSA9IHRydWU7XG4gIH0pO1xuICB2YXIgZWxlbWVudFByb3BzID0ge307XG4gICgwLCBfZW50cmllcy5kZWZhdWx0KShwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBfcmVmMlswXSxcbiAgICAgICAgcHJvcFZhbHVlID0gX3JlZjJbMV07XG5cbiAgICBpZiAoIWlzQnNQcm9wKHByb3BOYW1lKSAmJiAhaXNPbWl0dGVkUHJvcFtwcm9wTmFtZV0pIHtcbiAgICAgIGVsZW1lbnRQcm9wc1twcm9wTmFtZV0gPSBwcm9wVmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtnZXRCc1Byb3BzKHByb3BzKSwgZWxlbWVudFByb3BzXTtcbn1cbi8qKlxuICogQWRkIGEgc3R5bGUgdmFyaWFudCB0byBhIENvbXBvbmVudC4gTXV0YXRlcyB0aGUgcHJvcFR5cGVzIG9mIHRoZSBjb21wb25lbnRcbiAqIGluIG9yZGVyIHRvIHZhbGlkYXRlIHRoZSBuZXcgdmFyaWFudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGFkZFN0eWxlKENvbXBvbmVudCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0eWxlVmFyaWFudCA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgc3R5bGVWYXJpYW50W19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgYnNTdHlsZXMoc3R5bGVWYXJpYW50KShDb21wb25lbnQpO1xufVxuXG52YXIgX2N1cnJ5ID0gY3Vycnk7XG5leHBvcnRzLl9jdXJyeSA9IF9jdXJyeTsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGVsZW1lbnRUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgUmVhY3RFbGVtZW50ICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLGV4cGVjdGVkIGFuIGVsZW1lbnQgdHlwZSAoYSBzdHJpbmcgJykgKyAnLCBjb21wb25lbnQgY2xhc3MsIG9yIGZ1bmN0aW9uIGNvbXBvbmVudCkuJyk7XG4gIH1cblxuICBpZiAoISgwLCBfcmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUpKHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgKGEgc3RyaW5nICcpICsgJywgY29tcG9uZW50IGNsYXNzLCBvciBmdW5jdGlvbiBjb21wb25lbnQpLicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGVsZW1lbnRUeXBlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2F4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxudmFyIF9heGlvczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9heGlvcyk7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9qc0Jhc2UgPSByZXF1aXJlKCdqcy1iYXNlNjQnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbnZhciBsb2cgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KSgnZ2l0aHViOnJlcXVlc3QnKTtcblxuLyoqXG4gKiBUaGUgZXJyb3Igc3RydWN0dXJlIHJldHVybmVkIHdoZW4gYSBuZXR3b3JrIGNhbGwgZmFpbHNcbiAqL1xuXG52YXIgUmVzcG9uc2VFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgIF9pbmhlcml0cyhSZXNwb25zZUVycm9yLCBfRXJyb3IpO1xuXG4gICAvKipcbiAgICAqIENvbnN0cnVjdCBhIG5ldyBSZXNwb25zZUVycm9yXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIGFuIG1lc3NhZ2UgdG8gcmV0dXJuIGluc3RlYWQgb2YgdGhlIHRoZSBkZWZhdWx0IGVycm9yIG1lc3NhZ2VcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHJlcXVlc3RlZCBwYXRoXG4gICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgLSB0aGUgb2JqZWN0IHJldHVybmVkIGJ5IEF4aW9zXG4gICAgKi9cbiAgIGZ1bmN0aW9uIFJlc3BvbnNlRXJyb3IobWVzc2FnZSwgcGF0aCwgcmVzcG9uc2UpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNwb25zZUVycm9yKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlc3BvbnNlRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXNwb25zZUVycm9yKSkuY2FsbCh0aGlzLCBtZXNzYWdlKSk7XG5cbiAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgX3RoaXMucmVxdWVzdCA9IHJlc3BvbnNlLmNvbmZpZztcbiAgICAgIF90aGlzLnJlc3BvbnNlID0gKHJlc3BvbnNlIHx8IHt9KS5yZXNwb25zZSB8fCByZXNwb25zZTtcbiAgICAgIF90aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgIHJldHVybiBfdGhpcztcbiAgIH1cblxuICAgcmV0dXJuIFJlc3BvbnNlRXJyb3I7XG59KEVycm9yKTtcblxuLyoqXG4gKiBSZXF1ZXN0YWJsZSB3cmFwcyB0aGUgbG9naWMgZm9yIG1ha2luZyBodHRwIHJlcXVlc3RzIHRvIHRoZSBBUElcbiAqL1xuXG5cbnZhciBSZXF1ZXN0YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgIC8qKlxuICAgICogRWl0aGVyIGEgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIG9yIGFuIG9hdXRoIHRva2VuIGZvciBHaXRodWJcbiAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFJlcXVlc3RhYmxlLmF1dGhcbiAgICAqIEBwcm9wIHtzdHJpbmd9IFt1c2VybmFtZV0gLSB0aGUgR2l0aHViIHVzZXJuYW1lXG4gICAgKiBAcHJvcCB7c3RyaW5nfSBbcGFzc3dvcmRdIC0gdGhlIHVzZXIncyBwYXNzd29yZFxuICAgICogQHByb3Age3Rva2VufSBbdG9rZW5dIC0gYW4gT0F1dGggdG9rZW5cbiAgICAqL1xuICAgLyoqXG4gICAgKiBJbml0aWFsaXplIHRoZSBodHRwIGludGVybmFscy5cbiAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gW2F1dGhdIC0gdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWIuIElmIGF1dGggaXNcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBwcm92aWRlZCByZXF1ZXN0IHdpbGwgYmUgbWFkZSB1bmF1dGhlbnRpY2F0ZWRcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW0FjY2VwdEhlYWRlcj12M10gLSB0aGUgYWNjZXB0IGhlYWRlciBmb3IgdGhlIHJlcXVlc3RzXG4gICAgKi9cbiAgIGZ1bmN0aW9uIFJlcXVlc3RhYmxlKGF1dGgsIGFwaUJhc2UsIEFjY2VwdEhlYWRlcikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3RhYmxlKTtcblxuICAgICAgdGhpcy5fX2FwaUJhc2UgPSBhcGlCYXNlIHx8ICdodHRwczovL2FwaS5naXRodWIuY29tJztcbiAgICAgIHRoaXMuX19hdXRoID0ge1xuICAgICAgICAgdG9rZW46IGF1dGgudG9rZW4sXG4gICAgICAgICB1c2VybmFtZTogYXV0aC51c2VybmFtZSxcbiAgICAgICAgIHBhc3N3b3JkOiBhdXRoLnBhc3N3b3JkXG4gICAgICB9O1xuICAgICAgdGhpcy5fX0FjY2VwdEhlYWRlciA9IEFjY2VwdEhlYWRlciB8fCAndjMnO1xuXG4gICAgICBpZiAoYXV0aC50b2tlbikge1xuICAgICAgICAgdGhpcy5fX2F1dGhvcml6YXRpb25IZWFkZXIgPSAndG9rZW4gJyArIGF1dGgudG9rZW47XG4gICAgICB9IGVsc2UgaWYgKGF1dGgudXNlcm5hbWUgJiYgYXV0aC5wYXNzd29yZCkge1xuICAgICAgICAgdGhpcy5fX2F1dGhvcml6YXRpb25IZWFkZXIgPSAnQmFzaWMgJyArIF9qc0Jhc2UuQmFzZTY0LmVuY29kZShhdXRoLnVzZXJuYW1lICsgJzonICsgYXV0aC5wYXNzd29yZCk7XG4gICAgICB9XG4gICB9XG5cbiAgIC8qKlxuICAgICogQ29tcHV0ZSB0aGUgVVJMIHRvIHVzZSB0byBtYWtlIGEgcmVxdWVzdC5cbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIGVpdGhlciBhIFVSTCByZWxhdGl2ZSB0byB0aGUgQVBJIGJhc2Ugb3IgYW4gYWJzb2x1dGUgVVJMXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gdGhlIFVSTCB0byB1c2VcbiAgICAqL1xuXG5cbiAgIF9jcmVhdGVDbGFzcyhSZXF1ZXN0YWJsZSwgW3tcbiAgICAgIGtleTogJ19fZ2V0VVJMJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfX2dldFVSTChwYXRoKSB7XG4gICAgICAgICB2YXIgdXJsID0gcGF0aDtcblxuICAgICAgICAgaWYgKHBhdGguaW5kZXhPZignLy8nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHVybCA9IHRoaXMuX19hcGlCYXNlICsgcGF0aDtcbiAgICAgICAgIH1cblxuICAgICAgICAgdmFyIG5ld0NhY2hlQnVzdGVyID0gJ3RpbWVzdGFtcD0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UoLyh0aW1lc3RhbXA9XFxkKykvLCBuZXdDYWNoZUJ1c3Rlcik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29tcHV0ZSB0aGUgaGVhZGVycyByZXF1aXJlZCBmb3IgYW4gQVBJIHJlcXVlc3QuXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByYXcgLSBpZiB0aGUgcmVxdWVzdCBzaG91bGQgYmUgdHJlYXRlZCBhcyBKU09OIG9yIGFzIGEgcmF3IHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBBY2NlcHRIZWFkZXIgLSB0aGUgYWNjZXB0IGhlYWRlciBmb3IgdGhlIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gLSB0aGUgaGVhZGVycyB0byB1c2UgaW4gdGhlIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdfX2dldFJlcXVlc3RIZWFkZXJzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfX2dldFJlcXVlc3RIZWFkZXJzKHJhdywgQWNjZXB0SGVhZGVyKSB7XG4gICAgICAgICB2YXIgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi4nICsgKEFjY2VwdEhlYWRlciB8fCB0aGlzLl9fQWNjZXB0SGVhZGVyKVxuICAgICAgICAgfTtcblxuICAgICAgICAgaWYgKHJhdykge1xuICAgICAgICAgICAgaGVhZGVycy5BY2NlcHQgKz0gJy5yYXcnO1xuICAgICAgICAgfVxuICAgICAgICAgaGVhZGVycy5BY2NlcHQgKz0gJytqc29uJztcblxuICAgICAgICAgaWYgKHRoaXMuX19hdXRob3JpemF0aW9uSGVhZGVyKSB7XG4gICAgICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSB0aGlzLl9fYXV0aG9yaXphdGlvbkhlYWRlcjtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciBBUEkgcmVxdWVzdHNcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdE9wdGlvbnM9e31dIC0gdGhlIGN1cnJlbnQgb3B0aW9ucyBmb3IgdGhlIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gLSB0aGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnX2dldE9wdGlvbnNXaXRoRGVmYXVsdHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRPcHRpb25zV2l0aERlZmF1bHRzKCkge1xuICAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICAgaWYgKCEocmVxdWVzdE9wdGlvbnMudmlzaWJpbGl0eSB8fCByZXF1ZXN0T3B0aW9ucy5hZmZpbGlhdGlvbikpIHtcbiAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnR5cGUgPSByZXF1ZXN0T3B0aW9ucy50eXBlIHx8ICdhbGwnO1xuICAgICAgICAgfVxuICAgICAgICAgcmVxdWVzdE9wdGlvbnMuc29ydCA9IHJlcXVlc3RPcHRpb25zLnNvcnQgfHwgJ3VwZGF0ZWQnO1xuICAgICAgICAgcmVxdWVzdE9wdGlvbnMucGVyX3BhZ2UgPSByZXF1ZXN0T3B0aW9ucy5wZXJfcGFnZSB8fCAnMTAwJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgICByZXR1cm4gcmVxdWVzdE9wdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogaWYgYSBgRGF0ZWAgaXMgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW4gSVNPIHN0cmluZ1xuICAgICAgICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIG9iamVjdCB0byBhdHRlbXB0IHRvIGNvZXJjZSBpbnRvIGFuIElTTyBkYXRlIHN0cmluZ1xuICAgICAgICogQHJldHVybiB7c3RyaW5nfSAtIHRoZSBJU08gcmVwcmVzZW50YXRpb24gb2YgYGRhdGVgIG9yIHdoYXRldmVyIHdhcyBwYXNzZWQgaW4gaWYgaXQgd2FzIG5vdCBhIGRhdGVcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdfZGF0ZVRvSVNPJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZGF0ZVRvSVNPKGRhdGUpIHtcbiAgICAgICAgIGlmIChkYXRlICYmIGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBkYXRlID0gZGF0ZS50b0lTT1N0cmluZygpO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIHJlc3VsdCBvZiB0aGUgQVBJIHJlcXVlc3QuXG4gICAgICAgKiBAY2FsbGJhY2sgUmVxdWVzdGFibGUuY2FsbGJhY2tcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuRXJyb3J9IGVycm9yIC0gdGhlIGVycm9yIHJldHVybmVkIGJ5IHRoZSBBUEkgb3IgYG51bGxgXG4gICAgICAgKiBAcGFyYW0geyhPYmplY3R8dHJ1ZSl9IHJlc3VsdCAtIHRoZSBkYXRhIHJldHVybmVkIGJ5IHRoZSBBUEkgb3IgYHRydWVgIGlmIHRoZSBBUEkgcmV0dXJucyBgMjA0IE5vIENvbnRlbnRgXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdCAtIHRoZSByYXcge0BsaW5rY29kZSBodHRwczovL2dpdGh1Yi5jb20vbXphYnJpc2tpZS9heGlvcyNyZXNwb25zZS1zY2hlbWEgUmVzcG9uc2V9XG4gICAgICAgKi9cbiAgICAgIC8qKlxuICAgICAgICogTWFrZSBhIHJlcXVlc3QuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIC0gdGhlIG1ldGhvZCBmb3IgdGhlIHJlcXVlc3QgKEdFVCwgUFVULCBQT1NULCBERUxFVEUpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIGZvciB0aGUgcmVxdWVzdFxuICAgICAgICogQHBhcmFtIHsqfSBbZGF0YV0gLSB0aGUgZGF0YSB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuIEZvciBIVFRQIG1ldGhvZHMgdGhhdCBkb24ndCBoYXZlIGEgYm9keSB0aGUgZGF0YVxuICAgICAgICogICAgICAgICAgICAgICAgICAgd2lsbCBiZSBzZW50IGFzIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB0aGUgY2FsbGJhY2sgZm9yIHRoZSByZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyYXc9ZmFsc2VdIC0gaWYgdGhlIHJlcXVlc3Qgc2hvdWxkIGJlIHNlbnQgYXMgcmF3LiBJZiB0aGlzIGlzIGEgZmFsc3kgdmFsdWUgdGhlbiB0aGVcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCB3aWxsIGJlIG1hZGUgYXMgSlNPTlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ19yZXF1ZXN0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVxdWVzdChtZXRob2QsIHBhdGgsIGRhdGEsIGNiLCByYXcpIHtcbiAgICAgICAgIHZhciB1cmwgPSB0aGlzLl9fZ2V0VVJMKHBhdGgpO1xuXG4gICAgICAgICB2YXIgQWNjZXB0SGVhZGVyID0gKGRhdGEgfHwge30pLkFjY2VwdEhlYWRlcjtcbiAgICAgICAgIGlmIChBY2NlcHRIZWFkZXIpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhLkFjY2VwdEhlYWRlcjtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBoZWFkZXJzID0gdGhpcy5fX2dldFJlcXVlc3RIZWFkZXJzKHJhdywgQWNjZXB0SGVhZGVyKTtcblxuICAgICAgICAgdmFyIHF1ZXJ5UGFyYW1zID0ge307XG5cbiAgICAgICAgIHZhciBzaG91bGRVc2VEYXRhQXNQYXJhbXMgPSBkYXRhICYmICh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZGF0YSkpID09PSAnb2JqZWN0JyAmJiBtZXRob2RIYXNOb0JvZHkobWV0aG9kKTtcbiAgICAgICAgIGlmIChzaG91bGRVc2VEYXRhQXNQYXJhbXMpIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zID0gZGF0YTtcbiAgICAgICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbXMsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiByYXcgPyAndGV4dCcgOiAnanNvbidcbiAgICAgICAgIH07XG5cbiAgICAgICAgIGxvZyhjb25maWcubWV0aG9kICsgJyB0byAnICsgY29uZmlnLnVybCk7XG4gICAgICAgICB2YXIgcmVxdWVzdFByb21pc2UgPSAoMCwgX2F4aW9zMi5kZWZhdWx0KShjb25maWcpLmNhdGNoKGNhbGxiYWNrRXJyb3JPclRocm93KGNiLCBwYXRoKSk7XG5cbiAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgcmVxdWVzdFByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICYmIE9iamVjdC5rZXlzKHJlc3BvbnNlLmRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vIFdoZW4gZGF0YSBoYXMgcmVzdWx0c1xuICAgICAgICAgICAgICAgICAgY2IobnVsbCwgcmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcubWV0aG9kICE9PSAnR0VUJyAmJiBPYmplY3Qua2V5cyhyZXNwb25zZS5kYXRhKS5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUcnVlIHdoZW4gc3VjY2Vzc2Z1bCBzdWJtaXQgYSByZXF1ZXN0IGFuZCByZWNlaXZlIGEgZW1wdHkgb2JqZWN0XG4gICAgICAgICAgICAgICAgICBjYihudWxsLCByZXNwb25zZS5zdGF0dXMgPCAzMDAsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjYihudWxsLCByZXNwb25zZS5kYXRhLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIHJlcXVlc3RQcm9taXNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE1ha2UgYSByZXF1ZXN0IHRvIGFuIGVuZHBvaW50IHRoZSByZXR1cm5zIDIwNCB3aGVuIHRydWUgYW5kIDQwNCB3aGVuIGZhbHNlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIHRvIHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gYW55IHF1ZXJ5IHBhcmFtZXRlcnMgZm9yIHRoZSByZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHRoZSBjYWxsYmFjayB0aGF0IHdpbGwgcmVjZWl2ZSBgdHJ1ZWAgb3IgYGZhbHNlYFxuICAgICAgICogQHBhcmFtIHttZXRob2R9IFttZXRob2Q9R0VUXSAtIEhUVFAgTWV0aG9kIHRvIHVzZVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ19yZXF1ZXN0MjA0b3I0MDQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXF1ZXN0MjA0b3I0MDQocGF0aCwgZGF0YSwgY2IpIHtcbiAgICAgICAgIHZhciBtZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICdHRVQnO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChtZXRob2QsIHBhdGgsIGRhdGEpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICBjYihudWxsLCB0cnVlLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgIH0sIGZ1bmN0aW9uIGZhaWx1cmUocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgICBjYihudWxsLCBmYWxzZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgIGNiKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IHJlc3BvbnNlO1xuICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTWFrZSBhIHJlcXVlc3QgYW5kIGZldGNoIGFsbCB0aGUgYXZhaWxhYmxlIGRhdGEuIEdpdGh1YiB3aWxsIHBhZ2luYXRlIHJlc3BvbnNlcyBzbyBmb3IgcXVlcmllc1xuICAgICAgICogdGhhdCBtaWdodCBzcGFuIG11bHRpcGxlIHBhZ2VzIHRoaXMgbWV0aG9kIGlzIHByZWZlcnJlZCB0byB7QGxpbmsgUmVxdWVzdGFibGUjcmVxdWVzdH1cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggdG8gcmVxdWVzdFxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgcXVlcnkgcGFyYW1ldGVycyB0byBpbmNsdWRlXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gdGhlIGZ1bmN0aW9uIHRvIHJlY2VpdmUgdGhlIGRhdGEuIFRoZSByZXR1cm5lZCBkYXRhIHdpbGwgYWx3YXlzIGJlIGFuIGFycmF5LlxuICAgICAgICogQHBhcmFtIHtPYmplY3RbXX0gcmVzdWx0cyAtIHRoZSBwYXJ0aWFsIHJlc3VsdHMuIFRoaXMgYXJndW1lbnQgaXMgaW50ZW5kZWQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBhIHByb21pc2Ugd2hpY2ggd2lsbCByZXNvbHZlIHdoZW4gYWxsIHBhZ2VzIGhhdmUgYmVlbiBmZXRjaGVkXG4gICAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIHdpbGwgYmUgZm9sZGVkIGludG8ge0BsaW5rIFJlcXVlc3RhYmxlI19yZXF1ZXN0fSBpbiB0aGUgMi4wIHJlbGVhc2UuXG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnX3JlcXVlc3RBbGxQYWdlcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlcXVlc3RBbGxQYWdlcyhwYXRoLCBvcHRpb25zLCBjYiwgcmVzdWx0cykge1xuICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgcGF0aCwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBfcmVzdWx0cztcblxuICAgICAgICAgICAgdmFyIHRoaXNHcm91cCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgIHRoaXNHcm91cCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgdGhpc0dyb3VwID0gcmVzcG9uc2UuZGF0YS5pdGVtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICdjYW5ub3QgZmlndXJlIG91dCBob3cgdG8gYXBwZW5kICcgKyByZXNwb25zZS5kYXRhICsgJyB0byB0aGUgcmVzdWx0IHNldCc7XG4gICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVzcG9uc2VFcnJvcihtZXNzYWdlLCBwYXRoLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoX3Jlc3VsdHMgPSByZXN1bHRzKS5wdXNoLmFwcGx5KF9yZXN1bHRzLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpc0dyb3VwKSk7XG5cbiAgICAgICAgICAgIHZhciBuZXh0VXJsID0gZ2V0TmV4dFBhZ2UocmVzcG9uc2UuaGVhZGVycy5saW5rKTtcbiAgICAgICAgICAgIGlmIChuZXh0VXJsKSB7XG4gICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIG9wdGlvbnMucGFnZSA9IHBhcnNlSW50KG5leHRVcmwubWF0Y2goLyhwYWdlPVswLTldKikvZykuc2hpZnQoKS5zcGxpdCgnPScpLnBvcCgpKTtcbiAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMucGFnZSAhPT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgICBsb2coJ2dldHRpbmcgbmV4dCBwYWdlOiAnICsgbmV4dFVybCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9yZXF1ZXN0QWxsUGFnZXMobmV4dFVybCwgb3B0aW9ucywgY2IsIHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdHMsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3VsdHM7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICB9KS5jYXRjaChjYWxsYmFja0Vycm9yT3JUaHJvdyhjYiwgcGF0aCkpO1xuICAgICAgfVxuICAgfV0pO1xuXG4gICByZXR1cm4gUmVxdWVzdGFibGU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVxdWVzdGFibGU7XG5cbi8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIC8vXG4vLyAgUHJpdmF0ZSBoZWxwZXIgZnVuY3Rpb25zICAvL1xuLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gLy9cbnZhciBNRVRIT0RTX1dJVEhfTk9fQk9EWSA9IFsnR0VUJywgJ0hFQUQnLCAnREVMRVRFJ107XG5mdW5jdGlvbiBtZXRob2RIYXNOb0JvZHkobWV0aG9kKSB7XG4gICByZXR1cm4gTUVUSE9EU19XSVRIX05PX0JPRFkuaW5kZXhPZihtZXRob2QpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dFBhZ2UoKSB7XG4gICB2YXIgbGlua3NIZWFkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuXG4gICB2YXIgbGlua3MgPSBsaW5rc0hlYWRlci5zcGxpdCgvXFxzKixcXHMqLyk7IC8vIHNwbGl0cyBhbmQgc3RyaXBzIHRoZSB1cmxzXG4gICByZXR1cm4gbGlua3MucmVkdWNlKGZ1bmN0aW9uIChuZXh0VXJsLCBsaW5rKSB7XG4gICAgICBpZiAobGluay5zZWFyY2goL3JlbD1cIm5leHRcIi8pICE9PSAtMSkge1xuICAgICAgICAgcmV0dXJuIChsaW5rLm1hdGNoKC88KC4qKT4vKSB8fCBbXSlbMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0VXJsO1xuICAgfSwgdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tFcnJvck9yVGhyb3coY2IsIHBhdGgpIHtcbiAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKG9iamVjdCkge1xuICAgICAgdmFyIGVycm9yID0gdm9pZCAwO1xuICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnY29uZmlnJykpIHtcbiAgICAgICAgIHZhciBfb2JqZWN0JHJlc3BvbnNlID0gb2JqZWN0LnJlc3BvbnNlLFxuICAgICAgICAgICAgIHN0YXR1cyA9IF9vYmplY3QkcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgIHN0YXR1c1RleHQgPSBfb2JqZWN0JHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgX29iamVjdCRjb25maWcgPSBvYmplY3QuY29uZmlnLFxuICAgICAgICAgICAgIG1ldGhvZCA9IF9vYmplY3QkY29uZmlnLm1ldGhvZCxcbiAgICAgICAgICAgICB1cmwgPSBfb2JqZWN0JGNvbmZpZy51cmw7XG5cbiAgICAgICAgIHZhciBtZXNzYWdlID0gc3RhdHVzICsgJyBlcnJvciBtYWtpbmcgcmVxdWVzdCAnICsgbWV0aG9kICsgJyAnICsgdXJsICsgJzogXCInICsgc3RhdHVzVGV4dCArICdcIic7XG4gICAgICAgICBlcnJvciA9IG5ldyBSZXNwb25zZUVycm9yKG1lc3NhZ2UsIHBhdGgsIG9iamVjdCk7XG4gICAgICAgICBsb2cobWVzc2FnZSArICcgJyArIEpTT04uc3RyaW5naWZ5KG9iamVjdC5kYXRhKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgZXJyb3IgPSBvYmplY3Q7XG4gICAgICB9XG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgIGxvZygnZ29pbmcgdG8gZXJyb3IgY2FsbGJhY2snKTtcbiAgICAgICAgIGNiKGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICBsb2coJ3Rocm93aW5nIGVycm9yJyk7XG4gICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsY1hWbGMzUmhZbXhsTG1weklsMHNJbTVoYldWeklqcGJJbXh2WnlJc0lsSmxjM0J2Ym5ObFJYSnliM0lpTENKdFpYTnpZV2RsSWl3aWNHRjBhQ0lzSW5KbGMzQnZibk5sSWl3aWNtVnhkV1Z6ZENJc0ltTnZibVpwWnlJc0luTjBZWFIxY3lJc0lrVnljbTl5SWl3aVVtVnhkV1Z6ZEdGaWJHVWlMQ0poZFhSb0lpd2lZWEJwUW1GelpTSXNJa0ZqWTJWd2RFaGxZV1JsY2lJc0lsOWZZWEJwUW1GelpTSXNJbDlmWVhWMGFDSXNJblJ2YTJWdUlpd2lkWE5sY201aGJXVWlMQ0p3WVhOemQyOXlaQ0lzSWw5ZlFXTmpaWEIwU0dWaFpHVnlJaXdpWDE5aGRYUm9iM0pwZW1GMGFXOXVTR1ZoWkdWeUlpd2lRbUZ6WlRZMElpd2laVzVqYjJSbElpd2lkWEpzSWl3aWFXNWtaWGhQWmlJc0ltNWxkME5oWTJobFFuVnpkR1Z5SWl3aVJHRjBaU0lzSW1kbGRGUnBiV1VpTENKeVpYQnNZV05sSWl3aWNtRjNJaXdpYUdWaFpHVnljeUlzSWtGalkyVndkQ0lzSWtGMWRHaHZjbWw2WVhScGIyNGlMQ0p5WlhGMVpYTjBUM0IwYVc5dWN5SXNJblpwYzJsaWFXeHBkSGtpTENKaFptWnBiR2xoZEdsdmJpSXNJblI1Y0dVaUxDSnpiM0owSWl3aWNHVnlYM0JoWjJVaUxDSmtZWFJsSWl3aWRHOUpVMDlUZEhKcGJtY2lMQ0p0WlhSb2IyUWlMQ0prWVhSaElpd2lZMklpTENKZlgyZGxkRlZTVENJc0lsOWZaMlYwVW1WeGRXVnpkRWhsWVdSbGNuTWlMQ0p4ZFdWeWVWQmhjbUZ0Y3lJc0luTm9iM1ZzWkZWelpVUmhkR0ZCYzFCaGNtRnRjeUlzSW0xbGRHaHZaRWhoYzA1dlFtOWtlU0lzSW5WdVpHVm1hVzVsWkNJc0luQmhjbUZ0Y3lJc0luSmxjM0J2Ym5ObFZIbHdaU0lzSW5KbGNYVmxjM1JRY205dGFYTmxJaXdpWTJGMFkyZ2lMQ0pqWVd4c1ltRmphMFZ5Y205eVQzSlVhSEp2ZHlJc0luUm9aVzRpTENKUFltcGxZM1FpTENKclpYbHpJaXdpYkdWdVozUm9JaXdpWDNKbGNYVmxjM1FpTENKemRXTmpaWE56SWl3aVptRnBiSFZ5WlNJc0ltOXdkR2x2Ym5NaUxDSnlaWE4xYkhSeklpd2lkR2hwYzBkeWIzVndJaXdpUVhKeVlYa2lMQ0pwZEdWdGN5SXNJbkIxYzJnaUxDSnVaWGgwVlhKc0lpd2laMlYwVG1WNGRGQmhaMlVpTENKc2FXNXJJaXdpY0dGblpTSXNJbkJoY25ObFNXNTBJaXdpYldGMFkyZ2lMQ0p6YUdsbWRDSXNJbk53YkdsMElpd2ljRzl3SWl3aVgzSmxjWFZsYzNSQmJHeFFZV2RsY3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSk5SVlJJVDBSVFgxZEpWRWhmVGs5ZlFrOUVXU0lzSW14cGJtdHpTR1ZoWkdWeUlpd2liR2x1YTNNaUxDSnlaV1IxWTJVaUxDSnpaV0Z5WTJnaUxDSm9ZVzVrYkdWeUlpd2liMkpxWldOMElpd2laWEp5YjNJaUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0luTjBZWFIxYzFSbGVIUWlMQ0pLVTA5T0lpd2ljM1J5YVc1bmFXWjVJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3UVVGUFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdPenM3T3pzN0syVkJWRUU3T3pzN096czdRVUZYUVN4SlFVRk5RU3hOUVVGTkxIRkNRVUZOTEdkQ1FVRk9MRU5CUVZvN08wRkJSVUU3T3pzN1NVRkhUVU1zWVRzN08wRkJRMGc3T3pzN096dEJRVTFCTERCQ1FVRlpReXhQUVVGYUxFVkJRWEZDUXl4SlFVRnlRaXhGUVVFeVFrTXNVVUZCTTBJc1JVRkJjVU03UVVGQlFUczdRVUZCUVN4blNVRkROVUpHTEU5QlJEUkNPenRCUVVWc1F5eFpRVUZMUXl4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFFTeFpRVUZMUlN4UFFVRk1MRWRCUVdWRUxGTkJRVk5GTEUxQlFYaENPMEZCUTBFc1dVRkJTMFlzVVVGQlRDeEhRVUZuUWl4RFFVRkRRU3haUVVGWkxFVkJRV0lzUlVGQmFVSkJMRkZCUVdwQ0xFbEJRVFpDUVN4UlFVRTNRenRCUVVOQkxGbEJRVXRITEUxQlFVd3NSMEZCWTBnc1UwRkJVMGNzVFVGQmRrSTdRVUZNYTBNN1FVRk5jRU03T3p0RlFXSjNRa01zU3pzN1FVRm5RalZDT3pzN096dEpRVWROUXl4WE8wRkJRMGc3T3pzN096czdRVUZQUVRzN096czdPenRCUVU5QkxIZENRVUZaUXl4SlFVRmFMRVZCUVd0Q1F5eFBRVUZzUWl4RlFVRXlRa01zV1VGQk0wSXNSVUZCZVVNN1FVRkJRVHM3UVVGRGRFTXNWMEZCUzBNc1UwRkJUQ3hIUVVGcFFrWXNWMEZCVnl4M1FrRkJOVUk3UVVGRFFTeFhRVUZMUnl4TlFVRk1MRWRCUVdNN1FVRkRXRU1zWjBKQlFVOU1MRXRCUVV0TExFdEJSRVE3UVVGRldFTXNiVUpCUVZWT0xFdEJRVXROTEZGQlJrbzdRVUZIV0VNc2JVSkJRVlZRTEV0QlFVdFBPMEZCU0Vvc1QwRkJaRHRCUVV0QkxGZEJRVXRETEdOQlFVd3NSMEZCYzBKT0xHZENRVUZuUWl4SlFVRjBRenM3UVVGRlFTeFZRVUZKUml4TFFVRkxTeXhMUVVGVUxFVkJRV2RDTzBGQlEySXNZMEZCUzBrc2NVSkJRVXdzUjBGQk5rSXNWMEZCVjFRc1MwRkJTMHNzUzBGQk4wTTdRVUZEUml4UFFVWkVMRTFCUlU4c1NVRkJTVXdzUzBGQlMwMHNVVUZCVEN4SlFVRnBRazRzUzBGQlMwOHNVVUZCTVVJc1JVRkJiME03UVVGRGVFTXNZMEZCUzBVc2NVSkJRVXdzUjBGQk5rSXNWMEZCVjBNc1pVRkJUME1zVFVGQlVDeERRVUZqV0N4TFFVRkxUU3hSUVVGTUxFZEJRV2RDTEVkQlFXaENMRWRCUVhOQ1RpeExRVUZMVHl4UlFVRjZReXhEUVVGNFF6dEJRVU5HTzBGQlEwZzdPMEZCUlVRN096czdPenM3T3pzN0swSkJUVk5rTEVrc1JVRkJUVHRCUVVOYUxHRkJRVWx0UWl4TlFVRk5ia0lzU1VGQlZqczdRVUZGUVN4aFFVRkpRU3hMUVVGTGIwSXNUMEZCVEN4RFFVRmhMRWxCUVdJc1RVRkJkVUlzUTBGQlF5eERRVUUxUWl4RlFVRXJRanRCUVVNMVFrUXNhMEpCUVUwc1MwRkJTMVFzVTBGQlRDeEhRVUZwUWxZc1NVRkJka0k3UVVGRFJqczdRVUZGUkN4aFFVRkpjVUlzYVVKQlFXbENMR1ZCUVdVc1NVRkJTVU1zU1VGQlNpeEhRVUZYUXl4UFFVRllMRVZCUVhCRE8wRkJRMEVzWjBKQlFVOUtMRWxCUVVsTExFOUJRVW9zUTBGQldTeHBRa0ZCV2l4RlFVRXJRa2dzWTBGQkwwSXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096QkRRVTl2UWtrc1J5eEZRVUZMYUVJc1dTeEZRVUZqTzBGQlEzQkRMR0ZCUVVscFFpeFZRVUZWTzBGQlExZ3NORUpCUVdkQ0xHZERRVVJNTzBGQlJWZ3NjMEpCUVZVc05rSkJRVFpDYWtJc1owSkJRV2RDTEV0QlFVdE5MR05CUVd4RU8wRkJSa01zVlVGQlpEczdRVUZMUVN4aFFVRkpWU3hIUVVGS0xFVkJRVk03UVVGRFRrTXNiMEpCUVZGRExFMUJRVklzU1VGQmEwSXNUVUZCYkVJN1FVRkRSanRCUVVORVJDeHBRa0ZCVVVNc1RVRkJVaXhKUVVGclFpeFBRVUZzUWpzN1FVRkZRU3hoUVVGSkxFdEJRVXRZTEhGQ1FVRlVMRVZCUVdkRE8wRkJRemRDVlN4dlFrRkJVVVVzWVVGQlVpeEhRVUYzUWl4TFFVRkxXaXh4UWtGQk4wSTdRVUZEUmpzN1FVRkZSQ3huUWtGQlQxVXNUMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN1owUkJUVFpETzBGQlFVRXNZVUZCY2tKSExHTkJRWEZDTEhWRlFVRktMRVZCUVVrN08wRkJRekZETEdGQlFVa3NSVUZCUlVFc1pVRkJaVU1zVlVGQlppeEpRVUUyUWtRc1pVRkJaVVVzVjBGQk9VTXNRMEZCU2l4RlFVRm5SVHRCUVVNM1JFWXNNa0pCUVdWSExFbEJRV1lzUjBGQmMwSklMR1ZCUVdWSExFbEJRV1lzU1VGQmRVSXNTMEZCTjBNN1FVRkRSanRCUVVORVNDeDNRa0ZCWlVrc1NVRkJaaXhIUVVGelFrb3NaVUZCWlVrc1NVRkJaaXhKUVVGMVFpeFRRVUUzUXp0QlFVTkJTaXgzUWtGQlpVc3NVVUZCWml4SFFVRXdRa3dzWlVGQlpVc3NVVUZCWml4SlFVRXlRaXhMUVVGeVJDeERRVXd3UXl4RFFVdHJRanM3UVVGRk5VUXNaMEpCUVU5TUxHTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3YVVOQlMxZE5MRWtzUlVGQlRUdEJRVU5rTEdGQlFVbEJMRkZCUVZOQkxHZENRVUZuUW1Jc1NVRkJOMElzUlVGQmIwTTdRVUZEYWtOaExHMUNRVUZQUVN4TFFVRkxReXhYUVVGTUxFVkJRVkE3UVVGRFJqczdRVUZGUkN4blFrRkJUMFFzU1VGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN08wRkJUMEU3T3pzN096czdPenM3T3pzN095dENRVmRUUlN4TkxFVkJRVkZ5UXl4SkxFVkJRVTF6UXl4SkxFVkJRVTFETEVVc1JVRkJTV1FzUnl4RlFVRkxPMEZCUTI1RExHRkJRVTFPTEUxQlFVMHNTMEZCUzNGQ0xGRkJRVXdzUTBGQlkzaERMRWxCUVdRc1EwRkJXanM3UVVGRlFTeGhRVUZOVXl4bFFVRmxMRU5CUVVNMlFpeFJRVUZSTEVWQlFWUXNSVUZCWVRkQ0xGbEJRV3hETzBGQlEwRXNZVUZCU1VFc1dVRkJTaXhGUVVGclFqdEJRVU5tTEcxQ1FVRlBOa0lzUzBGQlN6ZENMRmxCUVZvN1FVRkRSanRCUVVORUxHRkJRVTFwUWl4VlFVRlZMRXRCUVV0bExHMUNRVUZNTEVOQlFYbENhRUlzUjBGQmVrSXNSVUZCT0VKb1FpeFpRVUU1UWl4RFFVRm9RanM3UVVGRlFTeGhRVUZKYVVNc1kwRkJZeXhGUVVGc1FqczdRVUZGUVN4aFFVRk5ReXgzUWtGQmQwSk1MRkZCUVZNc1VVRkJUMEVzU1VGQlVDeDVRMEZCVDBFc1NVRkJVQ3hQUVVGblFpeFJRVUY2UWl4SlFVRnpRMDBzWjBKQlFXZENVQ3hOUVVGb1FpeERRVUZ3UlR0QlFVTkJMR0ZCUVVsTkxIRkNRVUZLTEVWQlFUSkNPMEZCUTNoQ1JDd3dRa0ZCWTBvc1NVRkJaRHRCUVVOQlFTeHRRa0ZCVDA4c1UwRkJVRHRCUVVOR096dEJRVVZFTEdGQlFVMHhReXhUUVVGVE8wRkJRMXBuUWl4cFFrRkJTMEVzUjBGRVR6dEJRVVZhYTBJc2IwSkJRVkZCTEUxQlJrazdRVUZIV2xnc2NVSkJRVk5CTEU5QlNFYzdRVUZKV205Q0xHOUNRVUZSU2l4WFFVcEpPMEZCUzFwS0xHdENRVUZOUVN4SlFVeE5PMEZCVFZwVExEQkNRVUZqZEVJc1RVRkJUU3hOUVVGT0xFZEJRV1U3UVVGT2FrSXNWVUZCWmpzN1FVRlRRVFZDTEdGQlFVOU5MRTlCUVU5clF5eE5RVUZrTEZsQlFUSkNiRU1zVDBGQlQyZENMRWRCUVd4RE8wRkJRMEVzWVVGQlRUWkNMR2xDUVVGcFFpeHhRa0ZCVFRkRExFMUJRVTRzUlVGQll6aERMRXRCUVdRc1EwRkJiMEpETEhGQ1FVRnhRbGdzUlVGQmNrSXNSVUZCZVVKMlF5eEpRVUY2UWl4RFFVRndRaXhEUVVGMlFqczdRVUZGUVN4aFFVRkpkVU1zUlVGQlNpeEZRVUZSTzBGQlEweFRMREpDUVVGbFJ5eEpRVUZtTEVOQlFXOUNMRlZCUVVOc1JDeFJRVUZFTEVWQlFXTTdRVUZETDBJc2JVSkJRVWxCTEZOQlFWTnhReXhKUVVGVUxFbEJRV2xDWXl4UFFVRlBReXhKUVVGUUxFTkJRVmx3UkN4VFFVRlRjVU1zU1VGQmNrSXNSVUZCTWtKblFpeE5RVUV6UWl4SFFVRnZReXhEUVVGNlJDeEZRVUUwUkR0QlFVTjZSRHRCUVVOQlppeHhRa0ZCUnl4SlFVRklMRVZCUVZOMFF5eFRRVUZUY1VNc1NVRkJiRUlzUlVGQmQwSnlReXhSUVVGNFFqdEJRVU5HTEdkQ1FVaEVMRTFCUjA4c1NVRkJTVVVzVDBGQlQydERMRTFCUVZBc1MwRkJhMElzUzBGQmJFSXNTVUZCTWtKbExFOUJRVTlETEVsQlFWQXNRMEZCV1hCRUxGTkJRVk54UXl4SlFVRnlRaXhGUVVFeVFtZENMRTFCUVROQ0xFZEJRVzlETEVOQlFXNUZMRVZCUVhORk8wRkJRekZGTzBGQlEwRm1MSEZDUVVGSExFbEJRVWdzUlVGQlZYUkRMRk5CUVZOSExFMUJRVlFzUjBGQmEwSXNSMEZCTlVJc1JVRkJhME5JTEZGQlFXeERPMEZCUTBZc1owSkJTRTBzVFVGSFFUdEJRVU5LYzBNc2NVSkJRVWNzU1VGQlNDeEZRVUZUZEVNc1UwRkJVM0ZETEVsQlFXeENMRVZCUVhkQ2NrTXNVVUZCZUVJN1FVRkRSanRCUVVOSUxHRkJWa1E3UVVGWFJqczdRVUZGUkN4blFrRkJUeXRETEdOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3ZFVOQlVXbENhRVFzU1N4RlFVRk5jME1zU1N4RlFVRk5ReXhGTEVWQlFXOUNPMEZCUVVFc1lVRkJhRUpHTEUxQlFXZENMSFZGUVVGUUxFdEJRVTg3TzBGQlF6bERMR2RDUVVGUExFdEJRVXRyUWl4UlFVRk1MRU5CUVdOc1FpeE5RVUZrTEVWQlFYTkNja01zU1VGQmRFSXNSVUZCTkVKelF5eEpRVUUxUWl4RlFVTklZU3hKUVVSSExFTkJRMFVzVTBGQlUwc3NUMEZCVkN4RFFVRnBRblpFTEZGQlFXcENMRVZCUVRKQ08wRkJRemxDTEdkQ1FVRkpjME1zUlVGQlNpeEZRVUZSTzBGQlEweEJMR3RDUVVGSExFbEJRVWdzUlVGQlV5eEpRVUZVTEVWQlFXVjBReXhSUVVGbU8wRkJRMFk3UVVGRFJDeHRRa0ZCVHl4SlFVRlFPMEZCUTBZc1ZVRk9SeXhGUVUxRUxGTkJRVk4zUkN4UFFVRlVMRU5CUVdsQ2VFUXNVVUZCYWtJc1JVRkJNa0k3UVVGRE0wSXNaMEpCUVVsQkxGTkJRVk5CTEZGQlFWUXNRMEZCYTBKSExFMUJRV3hDTEV0QlFUWkNMRWRCUVdwRExFVkJRWE5ETzBGQlEyNURMRzFDUVVGSmJVTXNSVUZCU2l4RlFVRlJPMEZCUTB4QkxIRkNRVUZITEVsQlFVZ3NSVUZCVXl4TFFVRlVMRVZCUVdkQ2RFTXNVVUZCYUVJN1FVRkRSanRCUVVORUxITkNRVUZQTEV0QlFWQTdRVUZEUmpzN1FVRkZSQ3huUWtGQlNYTkRMRVZCUVVvc1JVRkJVVHRCUVVOTVFTeHJRa0ZCUjNSRExGRkJRVWc3UVVGRFJqdEJRVU5FTEd0Q1FVRk5RU3hSUVVGT08wRkJRMFlzVlVGc1FrY3NRMEZCVUR0QlFXMUNSanM3UVVGRlJEczdPenM3T3pzN096czdPenQxUTBGVmFVSkVMRWtzUlVGQlRUQkVMRThzUlVGQlUyNUNMRVVzUlVGQlNXOUNMRThzUlVGQlV6dEJRVUZCT3p0QlFVTXhRMEVzYlVKQlFWVkJMRmRCUVZjc1JVRkJja0k3TzBGQlJVRXNaMEpCUVU4c1MwRkJTMG9zVVVGQlRDeERRVUZqTEV0QlFXUXNSVUZCY1VKMlJDeEpRVUZ5UWl4RlFVRXlRakJFTEU5QlFUTkNMRVZCUTBoUUxFbEJSRWNzUTBGRFJTeFZRVUZEYkVRc1VVRkJSQ3hGUVVGak8wRkJRVUU3TzBGQlEycENMR2RDUVVGSk1rUXNhMEpCUVVvN1FVRkRRU3huUWtGQlNUTkVMRk5CUVZOeFF5eEpRVUZVTEZsQlFYbENkVUlzUzBGQk4wSXNSVUZCYjBNN1FVRkRha05FTERKQ1FVRlpNMFFzVTBGQlUzRkRMRWxCUVhKQ08wRkJRMFlzWVVGR1JDeE5RVVZQTEVsQlFVbHlReXhUUVVGVGNVTXNTVUZCVkN4RFFVRmpkMElzUzBGQlpDeFpRVUVyUWtRc1MwRkJia01zUlVGQk1FTTdRVUZET1VORUxESkNRVUZaTTBRc1UwRkJVM0ZETEVsQlFWUXNRMEZCWTNkQ0xFdEJRVEZDTzBGQlEwWXNZVUZHVFN4TlFVVkJPMEZCUTBvc2JVSkJRVWt2UkN3clEwRkJOa05GTEZOQlFWTnhReXhKUVVGMFJDeDFRa0ZCU2p0QlFVTkJMSEZDUVVGTkxFbEJRVWw0UXl4aFFVRktMRU5CUVd0Q1F5eFBRVUZzUWl4RlFVRXlRa01zU1VGQk0wSXNSVUZCYVVORExGRkJRV3BETEVOQlFVNDdRVUZEUmp0QlFVTkVMR2xEUVVGUk9FUXNTVUZCVWl4dlEwRkJaMEpJTEZOQlFXaENPenRCUVVWQkxHZENRVUZOU1N4VlFVRlZReXhaUVVGWmFFVXNVMEZCVTNsQ0xFOUJRVlFzUTBGQmFVSjNReXhKUVVFM1FpeERRVUZvUWp0QlFVTkJMR2RDUVVGSFJpeFBRVUZJTEVWQlFWazdRVUZEVkN4dFFrRkJTU3hEUVVGRFRpeFBRVUZNTEVWQlFXTTdRVUZEV0VFc05FSkJRVlVzUlVGQlZqdEJRVU5HTzBGQlEwUkJMSFZDUVVGUlV5eEpRVUZTTEVkQlFXVkRMRk5CUTJKS0xGRkJRVkZMTEV0QlFWSXNRMEZCWXl4blFrRkJaQ3hGUVVOSFF5eExRVVJJTEVkQlJVZERMRXRCUmtnc1EwRkZVeXhIUVVaVUxFVkJSMGRETEVkQlNFZ3NSVUZFWVN4RFFVRm1PMEZCVFVFc2JVSkJRVWtzUlVGQlJXUXNWMEZCVnl4UFFVRlBRU3hSUVVGUlV5eEpRVUZtTEV0QlFYZENMRkZCUVhKRExFTkJRVW9zUlVGQmIwUTdRVUZEYWtSMFJTdzRRMEZCTUVKdFJTeFBRVUV4UWp0QlFVTkJMSGxDUVVGUExFOUJRVXRUTEdkQ1FVRk1MRU5CUVhOQ1ZDeFBRVUYwUWl4RlFVRXJRazRzVDBGQkwwSXNSVUZCZDBOdVFpeEZRVUY0UXl4RlFVRTBRMjlDTEU5QlFUVkRMRU5CUVZBN1FVRkRSanRCUVVOSU96dEJRVVZFTEdkQ1FVRkpjRUlzUlVGQlNpeEZRVUZSTzBGQlEweEJMR3RDUVVGSExFbEJRVWdzUlVGQlUyOUNMRTlCUVZRc1JVRkJhMEl4UkN4UlFVRnNRanRCUVVOR096dEJRVVZFUVN4eFFrRkJVM0ZETEVsQlFWUXNSMEZCWjBKeFFpeFBRVUZvUWp0QlFVTkJMRzFDUVVGUE1VUXNVVUZCVUR0QlFVTkdMRlZCY0VOSExFVkJiME5FWjBRc1MwRndRME1zUTBGdlEwdERMSEZDUVVGeFFsZ3NSVUZCY2tJc1JVRkJlVUoyUXl4SlFVRjZRaXhEUVhCRFRDeERRVUZRTzBGQmNVTkdPenM3T3pzN1FVRkhTakJGTEU5QlFVOURMRTlCUVZBc1IwRkJhVUp5UlN4WFFVRnFRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRk5jMFVzZFVKQlFYVkNMRU5CUVVNc1MwRkJSQ3hGUVVGUkxFMUJRVklzUlVGQlowSXNVVUZCYUVJc1EwRkJOMEk3UVVGRFFTeFRRVUZUYUVNc1pVRkJWQ3hEUVVGNVFsQXNUVUZCZWtJc1JVRkJhVU03UVVGRE9VSXNWVUZCVDNWRExIRkNRVUZ4UW5oRUxFOUJRWEpDTEVOQlFUWkNhVUlzVFVGQk4wSXNUVUZCZVVNc1EwRkJReXhEUVVGcVJEdEJRVU5HT3p0QlFVVkVMRk5CUVZNMFFpeFhRVUZVTEVkQlFYVkRPMEZCUVVFc1QwRkJiRUpaTEZkQlFXdENMSFZGUVVGS0xFVkJRVWs3TzBGQlEzQkRMRTlCUVUxRExGRkJRVkZFTEZsQlFWbE9MRXRCUVZvc1EwRkJhMElzVTBGQmJFSXNRMEZCWkN4RFFVUnZReXhEUVVOUk8wRkJRelZETEZWQlFVOVBMRTFCUVUxRExFMUJRVTRzUTBGQllTeFZRVUZUWml4UFFVRlVMRVZCUVd0Q1JTeEpRVUZzUWl4RlFVRjNRanRCUVVONlF5eFZRVUZKUVN4TFFVRkxZeXhOUVVGTUxFTkJRVmtzV1VGQldpeE5RVUU0UWl4RFFVRkRMRU5CUVc1RExFVkJRWE5ETzBGQlEyNURMR2RDUVVGUExFTkJRVU5rTEV0QlFVdEhMRXRCUVV3c1EwRkJWeXhSUVVGWUxFdEJRWGRDTEVWQlFYcENMRVZCUVRaQ0xFTkJRVGRDTEVOQlFWQTdRVUZEUmpzN1FVRkZSQ3hoUVVGUFRDeFBRVUZRTzBGQlEwWXNTVUZPVFN4RlFVMUtia0lzVTBGT1NTeERRVUZRTzBGQlQwWTdPMEZCUlVRc1UwRkJVMHNzYjBKQlFWUXNRMEZCT0VKWUxFVkJRVGxDTEVWQlFXdERka01zU1VGQmJFTXNSVUZCZDBNN1FVRkRja01zVlVGQlR5eFRRVUZUYVVZc1QwRkJWQ3hEUVVGcFFrTXNUVUZCYWtJc1JVRkJlVUk3UVVGRE4wSXNWVUZCU1VNc1kwRkJTanRCUVVOQkxGVkJRVWxFTEU5QlFVOUZMR05CUVZBc1EwRkJjMElzVVVGQmRFSXNRMEZCU2l4RlFVRnhRenRCUVVGQkxHZERRVU00UWtZc1RVRkVPVUlzUTBGRE0wSnFSaXhSUVVReVFqdEJRVUZCTEdGQlEyaENSeXhOUVVSblFpeHZRa0ZEYUVKQkxFMUJSR2RDTzBGQlFVRXNZVUZEVW1sR0xGVkJSRkVzYjBKQlExSkJMRlZCUkZFN1FVRkJRU3c0UWtGRE9FSklMRTFCUkRsQ0xFTkJRMHN2UlN4TlFVUk1PMEZCUVVFc1lVRkRZMnRETEUxQlJHUXNhMEpCUTJOQkxFMUJSR1E3UVVGQlFTeGhRVU56UW14Q0xFZEJSSFJDTEd0Q1FVTnpRa0VzUjBGRWRFSTdPMEZCUld4RExHRkJRVWx3UWl4VlFVRmpTeXhOUVVGa0xEaENRVUUyUTJsRExFMUJRVGRETEZOQlFYVkViRUlzUjBGQmRrUXNWMEZCWjBWclJTeFZRVUZvUlN4TlFVRktPMEZCUTBGR0xHbENRVUZSTEVsQlFVbHlSaXhoUVVGS0xFTkJRV3RDUXl4UFFVRnNRaXhGUVVFeVFrTXNTVUZCTTBJc1JVRkJhVU5yUml4TlFVRnFReXhEUVVGU08wRkJRMEZ5Uml4aFFVRlBSU3hQUVVGUUxGTkJRV3RDZFVZc1MwRkJTME1zVTBGQlRDeERRVUZsVEN4UFFVRlBOVU1zU1VGQmRFSXNRMEZCYkVJN1FVRkRSaXhQUVV4RUxFMUJTMDg3UVVGRFNqWkRMR2xDUVVGUlJDeE5RVUZTTzBGQlEwWTdRVUZEUkN4VlFVRkpNME1zUlVGQlNpeEZRVUZSTzBGQlEwd3hReXhoUVVGSkxIbENRVUZLTzBGQlEwRXdReXhaUVVGSE5FTXNTMEZCU0R0QlFVTkdMRTlCU0VRc1RVRkhUenRCUVVOS2RFWXNZVUZCU1N4blFrRkJTanRCUVVOQkxHVkJRVTF6Uml4TFFVRk9PMEZCUTBZN1FVRkRTQ3hKUVdwQ1JEdEJRV3RDUmlJc0ltWnBiR1VpT2lKU1pYRjFaWE4wWVdKc1pTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUUdacGJHVmNiaUFxSUVCamIzQjVjbWxuYUhRZ0lESXdNVFlnV1dGb2IyOGdTVzVqTGx4dUlDb2dRR3hwWTJWdWMyVWdJQ0FnVEdsalpXNXpaV1FnZFc1a1pYSWdlMEJzYVc1cklHaDBkSEJ6T2k4dmMzQmtlQzV2Y21jdmJHbGpaVzV6WlhNdlFsTkVMVE10UTJ4aGRYTmxMVU5zWldGeUxtaDBiV3dnUWxORUxUTXRRMnhoZFhObExVTnNaV0Z5ZlM1Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUVkcGRHaDFZaTVxY3lCcGN5Qm1jbVZsYkhrZ1pHbHpkSEpwWW5WMFlXSnNaUzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdZWGhwYjNNZ1puSnZiU0FuWVhocGIzTW5PMXh1YVcxd2IzSjBJR1JsWW5WbklHWnliMjBnSjJSbFluVm5KenRjYm1sdGNHOXlkQ0I3UW1GelpUWTBmU0JtY205dElDZHFjeTFpWVhObE5qUW5PMXh1WEc1amIyNXpkQ0JzYjJjZ1BTQmtaV0oxWnlnbloybDBhSFZpT25KbGNYVmxjM1FuS1R0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWlhKeWIzSWdjM1J5ZFdOMGRYSmxJSEpsZEhWeWJtVmtJSGRvWlc0Z1lTQnVaWFIzYjNKcklHTmhiR3dnWm1GcGJITmNiaUFxTDF4dVkyeGhjM01nVW1WemNHOXVjMlZGY25KdmNpQmxlSFJsYm1SeklFVnljbTl5SUh0Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTI5dWMzUnlkV04wSUdFZ2JtVjNJRkpsYzNCdmJuTmxSWEp5YjNKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J0WlhOellXZGxJQzBnWVc0Z2JXVnpjMkZuWlNCMGJ5QnlaWFIxY200Z2FXNXpkR1ZoWkNCdlppQjBhR1VnZEdobElHUmxabUYxYkhRZ1pYSnliM0lnYldWemMyRm5aVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQmhkR2dnTFNCMGFHVWdjbVZ4ZFdWemRHVmtJSEJoZEdoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J5WlhOd2IyNXpaU0F0SUhSb1pTQnZZbXBsWTNRZ2NtVjBkWEp1WldRZ1lua2dRWGhwYjNOY2JpQWdJQ0FxTDF4dUlDQWdZMjl1YzNSeWRXTjBiM0lvYldWemMyRm5aU3dnY0dGMGFDd2djbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJSE4xY0dWeUtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2RHaHBjeTV3WVhSb0lEMGdjR0YwYUR0Y2JpQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRDQTlJSEpsYzNCdmJuTmxMbU52Ym1acFp6dGNiaUFnSUNBZ0lIUm9hWE11Y21WemNHOXVjMlVnUFNBb2NtVnpjRzl1YzJVZ2ZId2dlMzBwTG5KbGMzQnZibk5sSUh4OElISmxjM0J2Ym5ObE8xeHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMGRYTWdQU0J5WlhOd2IyNXpaUzV6ZEdGMGRYTTdYRzRnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nVW1WeGRXVnpkR0ZpYkdVZ2QzSmhjSE1nZEdobElHeHZaMmxqSUdadmNpQnRZV3RwYm1jZ2FIUjBjQ0J5WlhGMVpYTjBjeUIwYnlCMGFHVWdRVkJKWEc0Z0tpOWNibU5zWVhOeklGSmxjWFZsYzNSaFlteGxJSHRjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSV2wwYUdWeUlHRWdkWE5sY201aGJXVWdZVzVrSUhCaGMzTjNiM0prSUc5eUlHRnVJRzloZFhSb0lIUnZhMlZ1SUdadmNpQkhhWFJvZFdKY2JpQWdJQ0FxSUVCMGVYQmxaR1ZtSUh0UFltcGxZM1I5SUZKbGNYVmxjM1JoWW14bExtRjFkR2hjYmlBZ0lDQXFJRUJ3Y205d0lIdHpkSEpwYm1kOUlGdDFjMlZ5Ym1GdFpWMGdMU0IwYUdVZ1IybDBhSFZpSUhWelpYSnVZVzFsWEc0Z0lDQWdLaUJBY0hKdmNDQjdjM1J5YVc1bmZTQmJjR0Z6YzNkdmNtUmRJQzBnZEdobElIVnpaWEluY3lCd1lYTnpkMjl5WkZ4dUlDQWdJQ29nUUhCeWIzQWdlM1J2YTJWdWZTQmJkRzlyWlc1ZElDMGdZVzRnVDBGMWRHZ2dkRzlyWlc1Y2JpQWdJQ0FxTDF4dUlDQWdMeW9xWEc0Z0lDQWdLaUJKYm1sMGFXRnNhWHBsSUhSb1pTQm9kSFJ3SUdsdWRHVnlibUZzY3k1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVlYVjBhSDBnVzJGMWRHaGRJQzBnZEdobElHTnlaV1JsYm5ScFlXeHpJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSb2RXSXVJRWxtSUdGMWRHZ2dhWE5jYmlBZ0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZkQ0J3Y205MmFXUmxaQ0J5WlhGMVpYTjBJSGRwYkd3Z1ltVWdiV0ZrWlNCMWJtRjFkR2hsYm5ScFkyRjBaV1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZWEJwUW1GelpUMW9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0WFNBdElIUm9aU0JpWVhObElFZHBkR2gxWWlCQlVFa2dWVkpNWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMEZqWTJWd2RFaGxZV1JsY2oxMk0xMGdMU0IwYUdVZ1lXTmpaWEIwSUdobFlXUmxjaUJtYjNJZ2RHaGxJSEpsY1hWbGMzUnpYRzRnSUNBZ0tpOWNiaUFnSUdOdmJuTjBjblZqZEc5eUtHRjFkR2dzSUdGd2FVSmhjMlVzSUVGalkyVndkRWhsWVdSbGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlgyRndhVUpoYzJVZ1BTQmhjR2xDWVhObElIeDhJQ2RvZEhSd2N6b3ZMMkZ3YVM1bmFYUm9kV0l1WTI5dEp6dGNiaUFnSUNBZ0lIUm9hWE11WDE5aGRYUm9JRDBnZTF4dUlDQWdJQ0FnSUNBZ2RHOXJaVzQ2SUdGMWRHZ3VkRzlyWlc0c1hHNGdJQ0FnSUNBZ0lDQjFjMlZ5Ym1GdFpUb2dZWFYwYUM1MWMyVnlibUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lIQmhjM04zYjNKa09pQmhkWFJvTG5CaGMzTjNiM0prTEZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUhSb2FYTXVYMTlCWTJObGNIUklaV0ZrWlhJZ1BTQkJZMk5sY0hSSVpXRmtaWElnZkh3Z0ozWXpKenRjYmx4dUlDQWdJQ0FnYVdZZ0tHRjFkR2d1ZEc5clpXNHBJSHRjYmlBZ0lDQWdJQ0FnSUhSb2FYTXVYMTloZFhSb2IzSnBlbUYwYVc5dVNHVmhaR1Z5SUQwZ0ozUnZhMlZ1SUNjZ0t5QmhkWFJvTG5SdmEyVnVPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hoZFhSb0xuVnpaWEp1WVcxbElDWW1JR0YxZEdndWNHRnpjM2R2Y21RcElIdGNiaUFnSUNBZ0lDQWdJSFJvYVhNdVgxOWhkWFJvYjNKcGVtRjBhVzl1U0dWaFpHVnlJRDBnSjBKaGMybGpJQ2NnS3lCQ1lYTmxOalF1Wlc1amIyUmxLR0YxZEdndWRYTmxjbTVoYldVZ0t5QW5PaWNnS3lCaGRYUm9MbkJoYzNOM2IzSmtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRiMjF3ZFhSbElIUm9aU0JWVWt3Z2RHOGdkWE5sSUhSdklHMWhhMlVnWVNCeVpYRjFaWE4wTGx4dUlDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQndZWFJvSUMwZ1pXbDBhR1Z5SUdFZ1ZWSk1JSEpsYkdGMGFYWmxJSFJ2SUhSb1pTQkJVRWtnWW1GelpTQnZjaUJoYmlCaFluTnZiSFYwWlNCVlVreGNiaUFnSUNBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ0xTQjBhR1VnVlZKTUlIUnZJSFZ6WlZ4dUlDQWdJQ292WEc0Z0lDQmZYMmRsZEZWU1RDaHdZWFJvS1NCN1hHNGdJQ0FnSUNCc1pYUWdkWEpzSUQwZ2NHRjBhRHRjYmx4dUlDQWdJQ0FnYVdZZ0tIQmhkR2d1YVc1a1pYaFBaaWduTHk4bktTQTlQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJSFZ5YkNBOUlIUm9hWE11WDE5aGNHbENZWE5sSUNzZ2NHRjBhRHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYkdWMElHNWxkME5oWTJobFFuVnpkR1Z5SUQwZ0ozUnBiV1Z6ZEdGdGNEMG5JQ3NnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFhKc0xuSmxjR3hoWTJVb0x5aDBhVzFsYzNSaGJYQTlYRnhrS3lrdkxDQnVaWGREWVdOb1pVSjFjM1JsY2lrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTI5dGNIVjBaU0IwYUdVZ2FHVmhaR1Z5Y3lCeVpYRjFhWEpsWkNCbWIzSWdZVzRnUVZCSklISmxjWFZsYzNRdVhHNGdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0J5WVhjZ0xTQnBaaUIwYUdVZ2NtVnhkV1Z6ZENCemFHOTFiR1FnWW1VZ2RISmxZWFJsWkNCaGN5QktVMDlPSUc5eUlHRnpJR0VnY21GM0lISmxjWFZsYzNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JCWTJObGNIUklaV0ZrWlhJZ0xTQjBhR1VnWVdOalpYQjBJR2hsWVdSbGNpQm1iM0lnZEdobElISmxjWFZsYzNSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnTFNCMGFHVWdhR1ZoWkdWeWN5QjBieUIxYzJVZ2FXNGdkR2hsSUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1gxOW5aWFJTWlhGMVpYTjBTR1ZoWkdWeWN5aHlZWGNzSUVGalkyVndkRWhsWVdSbGNpa2dlMXh1SUNBZ0lDQWdiR1YwSUdobFlXUmxjbk1nUFNCN1hHNGdJQ0FnSUNBZ0lDQW5RMjl1ZEdWdWRDMVVlWEJsSnpvZ0oyRndjR3hwWTJGMGFXOXVMMnB6YjI0N1kyaGhjbk5sZEQxVlZFWXRPQ2NzWEc0Z0lDQWdJQ0FnSUNBblFXTmpaWEIwSnpvZ0oyRndjR3hwWTJGMGFXOXVMM1p1WkM1bmFYUm9kV0l1SnlBcklDaEJZMk5sY0hSSVpXRmtaWElnZkh3Z2RHaHBjeTVmWDBGalkyVndkRWhsWVdSbGNpa3NYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JwWmlBb2NtRjNLU0I3WEc0Z0lDQWdJQ0FnSUNCb1pXRmtaWEp6TGtGalkyVndkQ0FyUFNBbkxuSmhkeWM3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JvWldGa1pYSnpMa0ZqWTJWd2RDQXJQU0FuSzJwemIyNG5PMXh1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVmWDJGMWRHaHZjbWw2WVhScGIyNUlaV0ZrWlhJcElIdGNiaUFnSUNBZ0lDQWdJR2hsWVdSbGNuTXVRWFYwYUc5eWFYcGhkR2x2YmlBOUlIUm9hWE11WDE5aGRYUm9iM0pwZW1GMGFXOXVTR1ZoWkdWeU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2FHVmhaR1Z5Y3p0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJUWlhSeklIUm9aU0JrWldaaGRXeDBJRzl3ZEdsdmJuTWdabTl5SUVGUVNTQnlaWEYxWlhOMGMxeHVJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0eVpYRjFaWE4wVDNCMGFXOXVjejE3ZlYwZ0xTQjBhR1VnWTNWeWNtVnVkQ0J2Y0hScGIyNXpJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlNBdElIUm9aU0J2Y0hScGIyNXpJSFJ2SUhCaGMzTWdkRzhnZEdobElISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdYMmRsZEU5d2RHbHZibk5YYVhSb1JHVm1ZWFZzZEhNb2NtVnhkV1Z6ZEU5d2RHbHZibk1nUFNCN2ZTa2dlMXh1SUNBZ0lDQWdhV1lnS0NFb2NtVnhkV1Z6ZEU5d2RHbHZibk11ZG1semFXSnBiR2wwZVNCOGZDQnlaWEYxWlhOMFQzQjBhVzl1Y3k1aFptWnBiR2xoZEdsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUhKbGNYVmxjM1JQY0hScGIyNXpMblI1Y0dVZ1BTQnlaWEYxWlhOMFQzQjBhVzl1Y3k1MGVYQmxJSHg4SUNkaGJHd25PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVZ4ZFdWemRFOXdkR2x2Ym5NdWMyOXlkQ0E5SUhKbGNYVmxjM1JQY0hScGIyNXpMbk52Y25RZ2ZId2dKM1Z3WkdGMFpXUW5PMXh1SUNBZ0lDQWdjbVZ4ZFdWemRFOXdkR2x2Ym5NdWNHVnlYM0JoWjJVZ1BTQnlaWEYxWlhOMFQzQjBhVzl1Y3k1d1pYSmZjR0ZuWlNCOGZDQW5NVEF3SnpzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ4ZFdWemRFOXdkR2x2Ym5NN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nYVdZZ1lTQmdSR0YwWldBZ2FYTWdjR0Z6YzJWa0lIUnZJSFJvYVhNZ1puVnVZM1JwYjI0Z2FYUWdkMmxzYkNCaVpTQmpiMjUyWlhKMFpXUWdkRzhnWVc0Z1NWTlBJSE4wY21sdVoxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUhzcWZTQmtZWFJsSUMwZ2RHaGxJRzlpYW1WamRDQjBieUJoZEhSbGJYQjBJSFJ2SUdOdlpYSmpaU0JwYm5SdklHRnVJRWxUVHlCa1lYUmxJSE4wY21sdVoxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNBdElIUm9aU0JKVTA4Z2NtVndjbVZ6Wlc1MFlYUnBiMjRnYjJZZ1lHUmhkR1ZnSUc5eUlIZG9ZWFJsZG1WeUlIZGhjeUJ3WVhOelpXUWdhVzRnYVdZZ2FYUWdkMkZ6SUc1dmRDQmhJR1JoZEdWY2JpQWdJQ0FxTDF4dUlDQWdYMlJoZEdWVWIwbFRUeWhrWVhSbEtTQjdYRzRnSUNBZ0lDQnBaaUFvWkdGMFpTQW1KaUFvWkdGMFpTQnBibk4wWVc1alpXOW1JRVJoZEdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0JrWVhSbElEMGdaR0YwWlM1MGIwbFRUMU4wY21sdVp5Z3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaR0YwWlR0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJCSUdaMWJtTjBhVzl1SUhSb1lYUWdjbVZqWldsMlpYTWdkR2hsSUhKbGMzVnNkQ0J2WmlCMGFHVWdRVkJKSUhKbGNYVmxjM1F1WEc0Z0lDQWdLaUJBWTJGc2JHSmhZMnNnVW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVJYSnliM0o5SUdWeWNtOXlJQzBnZEdobElHVnljbTl5SUhKbGRIVnlibVZrSUdKNUlIUm9aU0JCVUVrZ2IzSWdZRzUxYkd4Z1hHNGdJQ0FnS2lCQWNHRnlZVzBnZXloUFltcGxZM1I4ZEhKMVpTbDlJSEpsYzNWc2RDQXRJSFJvWlNCa1lYUmhJSEpsZEhWeWJtVmtJR0o1SUhSb1pTQkJVRWtnYjNJZ1lIUnlkV1ZnSUdsbUlIUm9aU0JCVUVrZ2NtVjBkWEp1Y3lCZ01qQTBJRTV2SUVOdmJuUmxiblJnWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjbVZ4ZFdWemRDQXRJSFJvWlNCeVlYY2dlMEJzYVc1clkyOWtaU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YlhwaFluSnBjMnRwWlM5aGVHbHZjeU55WlhOd2IyNXpaUzF6WTJobGJXRWdVbVZ6Y0c5dWMyVjlYRzRnSUNBZ0tpOWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RXRnJaU0JoSUhKbGNYVmxjM1F1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiV1YwYUc5a0lDMGdkR2hsSUcxbGRHaHZaQ0JtYjNJZ2RHaGxJSEpsY1hWbGMzUWdLRWRGVkN3Z1VGVlVMQ0JRVDFOVUxDQkVSVXhGVkVVcFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0dGMGFDQXRJSFJvWlNCd1lYUm9JR1p2Y2lCMGFHVWdjbVZ4ZFdWemRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUhzcWZTQmJaR0YwWVYwZ0xTQjBhR1VnWkdGMFlTQjBieUJ6Wlc1a0lIUnZJSFJvWlNCelpYSjJaWEl1SUVadmNpQklWRlJRSUcxbGRHaHZaSE1nZEdoaGRDQmtiMjRuZENCb1lYWmxJR0VnWW05a2VTQjBhR1VnWkdGMFlWeHVJQ0FnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHNiQ0JpWlNCelpXNTBJR0Z6SUhGMVpYSjVJSEJoY21GdFpYUmxjbk5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IwYUdVZ1kyRnNiR0poWTJzZ1ptOXlJSFJvWlNCeVpYRjFaWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRnR5WVhjOVptRnNjMlZkSUMwZ2FXWWdkR2hsSUhKbGNYVmxjM1FnYzJodmRXeGtJR0psSUhObGJuUWdZWE1nY21GM0xpQkpaaUIwYUdseklHbHpJR0VnWm1Gc2Mza2dkbUZzZFdVZ2RHaGxiaUIwYUdWY2JpQWdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnhkV1Z6ZENCM2FXeHNJR0psSUcxaFpHVWdZWE1nU2xOUFRseHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnVUhKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmZjbVZ4ZFdWemRDaHRaWFJvYjJRc0lIQmhkR2dzSUdSaGRHRXNJR05pTENCeVlYY3BJSHRjYmlBZ0lDQWdJR052Ym5OMElIVnliQ0E5SUhSb2FYTXVYMTluWlhSVlVrd29jR0YwYUNrN1hHNWNiaUFnSUNBZ0lHTnZibk4wSUVGalkyVndkRWhsWVdSbGNpQTlJQ2hrWVhSaElIeDhJSHQ5S1M1QlkyTmxjSFJJWldGa1pYSTdYRzRnSUNBZ0lDQnBaaUFvUVdOalpYQjBTR1ZoWkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0JrWld4bGRHVWdaR0YwWVM1QlkyTmxjSFJJWldGa1pYSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpiMjV6ZENCb1pXRmtaWEp6SUQwZ2RHaHBjeTVmWDJkbGRGSmxjWFZsYzNSSVpXRmtaWEp6S0hKaGR5d2dRV05qWlhCMFNHVmhaR1Z5S1R0Y2JseHVJQ0FnSUNBZ2JHVjBJSEYxWlhKNVVHRnlZVzF6SUQwZ2UzMDdYRzVjYmlBZ0lDQWdJR052Ym5OMElITm9iM1ZzWkZWelpVUmhkR0ZCYzFCaGNtRnRjeUE5SUdSaGRHRWdKaVlnS0hSNWNHVnZaaUJrWVhSaElEMDlQU0FuYjJKcVpXTjBKeWtnSmlZZ2JXVjBhRzlrU0dGelRtOUNiMlI1S0cxbGRHaHZaQ2s3WEc0Z0lDQWdJQ0JwWmlBb2MyaHZkV3hrVlhObFJHRjBZVUZ6VUdGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNCeGRXVnllVkJoY21GdGN5QTlJR1JoZEdFN1hHNGdJQ0FnSUNBZ0lDQmtZWFJoSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCamIyNW1hV2NnUFNCN1hHNGdJQ0FnSUNBZ0lDQjFjbXc2SUhWeWJDeGNiaUFnSUNBZ0lDQWdJRzFsZEdodlpEb2diV1YwYUc5a0xGeHVJQ0FnSUNBZ0lDQWdhR1ZoWkdWeWN6b2dhR1ZoWkdWeWN5eGNiaUFnSUNBZ0lDQWdJSEJoY21GdGN6b2djWFZsY25sUVlYSmhiWE1zWEc0Z0lDQWdJQ0FnSUNCa1lYUmhPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMyVlVlWEJsT2lCeVlYY2dQeUFuZEdWNGRDY2dPaUFuYW5OdmJpY3NYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JzYjJjb1lDUjdZMjl1Wm1sbkxtMWxkR2h2WkgwZ2RHOGdKSHRqYjI1bWFXY3VkWEpzZldBcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnY21WeGRXVnpkRkJ5YjIxcGMyVWdQU0JoZUdsdmN5aGpiMjVtYVdjcExtTmhkR05vS0dOaGJHeGlZV05yUlhKeWIzSlBjbFJvY205M0tHTmlMQ0J3WVhSb0tTazdYRzVjYmlBZ0lDQWdJR2xtSUNoallpa2dlMXh1SUNBZ0lDQWdJQ0FnY21WeGRXVnpkRkJ5YjIxcGMyVXVkR2hsYmlnb2NtVnpjRzl1YzJVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaUzVrWVhSaElDWW1JRTlpYW1WamRDNXJaWGx6S0hKbGMzQnZibk5sTG1SaGRHRXBMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGZG9aVzRnWkdGMFlTQm9ZWE1nY21WemRXeDBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMklvYm5Wc2JDd2djbVZ6Y0c5dWMyVXVaR0YwWVN3Z2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoamIyNW1hV2N1YldWMGFHOWtJQ0U5UFNBblIwVlVKeUFtSmlCUFltcGxZM1F1YTJWNWN5aHlaWE53YjI1elpTNWtZWFJoS1M1c1pXNW5kR2dnUENBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVY25WbElIZG9aVzRnYzNWalkyVnpjMloxYkNCemRXSnRhWFFnWVNCeVpYRjFaWE4wSUdGdVpDQnlaV05sYVhabElHRWdaVzF3ZEhrZ2IySnFaV04wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWWlodWRXeHNMQ0FvY21WemNHOXVjMlV1YzNSaGRIVnpJRHdnTXpBd0tTd2djbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaUtHNTFiR3dzSUhKbGMzQnZibk5sTG1SaGRHRXNJSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WeGRXVnpkRkJ5YjIxcGMyVTdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RXRnJaU0JoSUhKbGNYVmxjM1FnZEc4Z1lXNGdaVzVrY0c5cGJuUWdkR2hsSUhKbGRIVnlibk1nTWpBMElIZG9aVzRnZEhKMVpTQmhibVFnTkRBMElIZG9aVzRnWm1Gc2MyVmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCd1lYUm9JQzBnZEdobElIQmhkR2dnZEc4Z2NtVnhkV1Z6ZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1JoZEdFZ0xTQmhibmtnY1hWbGNua2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2RHaGxJR05oYkd4aVlXTnJJSFJvWVhRZ2QybHNiQ0J5WldObGFYWmxJR0IwY25WbFlDQnZjaUJnWm1Gc2MyVmdYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UyMWxkR2h2WkgwZ1cyMWxkR2h2WkQxSFJWUmRJQzBnU0ZSVVVDQk5aWFJvYjJRZ2RHOGdkWE5sWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUY5eVpYRjFaWE4wTWpBMGIzSTBNRFFvY0dGMGFDd2daR0YwWVN3Z1kySXNJRzFsZEdodlpDQTlJQ2RIUlZRbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2h0WlhSb2IyUXNJSEJoZEdnc0lHUmhkR0VwWEc0Z0lDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaUJ6ZFdOalpYTnpLSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmlLRzUxYkd3c0lIUnlkV1VzSUhKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0Z1ptRnBiSFZ5WlNoeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExuSmxjM0J2Ym5ObExuTjBZWFIxY3lBOVBUMGdOREEwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmlLRzUxYkd3c0lHWmhiSE5sTENCeVpYTndiMjV6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJJb2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk5ZV3RsSUdFZ2NtVnhkV1Z6ZENCaGJtUWdabVYwWTJnZ1lXeHNJSFJvWlNCaGRtRnBiR0ZpYkdVZ1pHRjBZUzRnUjJsMGFIVmlJSGRwYkd3Z2NHRm5hVzVoZEdVZ2NtVnpjRzl1YzJWeklITnZJR1p2Y2lCeGRXVnlhV1Z6WEc0Z0lDQWdLaUIwYUdGMElHMXBaMmgwSUhOd1lXNGdiWFZzZEdsd2JHVWdjR0ZuWlhNZ2RHaHBjeUJ0WlhSb2IyUWdhWE1nY0hKbFptVnljbVZrSUhSdklIdEFiR2x1YXlCU1pYRjFaWE4wWVdKc1pTTnlaWEYxWlhOMGZWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCaGRHZ2dMU0IwYUdVZ2NHRjBhQ0IwYnlCeVpYRjFaWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJSFJvWlNCeGRXVnllU0J3WVhKaGJXVjBaWEp6SUhSdklHbHVZMngxWkdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCMGFHVWdablZ1WTNScGIyNGdkRzhnY21WalpXbDJaU0IwYUdVZ1pHRjBZUzRnVkdobElISmxkSFZ5Ym1Wa0lHUmhkR0VnZDJsc2JDQmhiSGRoZVhNZ1ltVWdZVzRnWVhKeVlYa3VYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEZ0ZGZTQnlaWE4xYkhSeklDMGdkR2hsSUhCaGNuUnBZV3dnY21WemRXeDBjeTRnVkdocGN5QmhjbWQxYldWdWRDQnBjeUJwYm5SbGJtUmxaQ0JtYjNJZ2FXNTBaWEp1WVd3Z2RYTmxJRzl1YkhrdVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElHRWdjSEp2YldselpTQjNhR2xqYUNCM2FXeHNJSEpsYzI5c2RtVWdkMmhsYmlCaGJHd2djR0ZuWlhNZ2FHRjJaU0JpWldWdUlHWmxkR05vWldSY2JpQWdJQ0FxSUVCa1pYQnlaV05oZEdWa0lGUm9hWE1nZDJsc2JDQmlaU0JtYjJ4a1pXUWdhVzUwYnlCN1FHeHBibXNnVW1WeGRXVnpkR0ZpYkdValgzSmxjWFZsYzNSOUlHbHVJSFJvWlNBeUxqQWdjbVZzWldGelpTNWNiaUFnSUNBcUwxeHVJQ0FnWDNKbGNYVmxjM1JCYkd4UVlXZGxjeWh3WVhSb0xDQnZjSFJwYjI1ekxDQmpZaXdnY21WemRXeDBjeWtnZTF4dUlDQWdJQ0FnY21WemRXeDBjeUE5SUhKbGMzVnNkSE1nZkh3Z1cxMDdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0J3WVhSb0xDQnZjSFJwYjI1ektWeHVJQ0FnSUNBZ0lDQWdMblJvWlc0b0tISmxjM0J2Ym5ObEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEdocGMwZHliM1Z3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG1SaGRHRWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwYzBkeWIzVndJRDBnY21WemNHOXVjMlV1WkdGMFlUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVnpjRzl1YzJVdVpHRjBZUzVwZEdWdGN5QnBibk4wWVc1alpXOW1JRUZ5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6UjNKdmRYQWdQU0J5WlhOd2IyNXpaUzVrWVhSaExtbDBaVzF6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WlhOellXZGxJRDBnWUdOaGJtNXZkQ0JtYVdkMWNtVWdiM1YwSUdodmR5QjBieUJoY0hCbGJtUWdKSHR5WlhOd2IyNXpaUzVrWVhSaGZTQjBieUIwYUdVZ2NtVnpkV3gwSUhObGRHQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dVbVZ6Y0c5dWMyVkZjbkp2Y2lodFpYTnpZV2RsTENCd1lYUm9MQ0J5WlhOd2IyNXpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29MaTR1ZEdocGMwZHliM1Z3S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdibVY0ZEZWeWJDQTlJR2RsZEU1bGVIUlFZV2RsS0hKbGMzQnZibk5sTG1obFlXUmxjbk11YkdsdWF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaHVaWGgwVlhKc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVjR0ZuWlNBOUlIQmhjbk5sU1c1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGgwVlhKc0xtMWhkR05vS0M4b2NHRm5aVDFiTUMwNVhTb3BMMmNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuTm9hV1owS0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjM0JzYVhRb0p6MG5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1d2IzQW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtHOXdkR2x2Ym5NZ0ppWWdkSGx3Wlc5bUlHOXdkR2x2Ym5NdWNHRm5aU0FoUFQwZ0oyNTFiV0psY2ljcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJjb1lHZGxkSFJwYm1jZ2JtVjRkQ0J3WVdkbE9pQWtlMjVsZUhSVmNteDlZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRFRnNiRkJoWjJWektHNWxlSFJWY213c0lHOXdkR2x2Ym5Nc0lHTmlMQ0J5WlhOMWJIUnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05pS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallpaHVkV3hzTENCeVpYTjFiSFJ6TENCeVpYTndiMjV6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTmxMbVJoZEdFZ1BTQnlaWE4xYkhSek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNCdmJuTmxPMXh1SUNBZ0lDQWdJQ0FnZlNrdVkyRjBZMmdvWTJGc2JHSmhZMnRGY25KdmNrOXlWR2h5YjNjb1kySXNJSEJoZEdncEtUdGNiaUFnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWlhGMVpYTjBZV0pzWlR0Y2JseHVMeThnTHk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeThnTHk5Y2JpOHZJQ0JRY21sMllYUmxJR2hsYkhCbGNpQm1kVzVqZEdsdmJuTWdJQzh2WEc0dkx5QXZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5QXZMMXh1WTI5dWMzUWdUVVZVU0U5RVUxOVhTVlJJWDA1UFgwSlBSRmtnUFNCYkowZEZWQ2NzSUNkSVJVRkVKeXdnSjBSRlRFVlVSU2RkTzF4dVpuVnVZM1JwYjI0Z2JXVjBhRzlrU0dGelRtOUNiMlI1S0cxbGRHaHZaQ2tnZTF4dUlDQWdjbVYwZFhKdUlFMUZWRWhQUkZOZlYwbFVTRjlPVDE5Q1QwUlpMbWx1WkdWNFQyWW9iV1YwYUc5a0tTQWhQVDBnTFRFN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFNWxlSFJRWVdkbEtHeHBibXR6U0dWaFpHVnlJRDBnSnljcElIdGNiaUFnSUdOdmJuTjBJR3hwYm10eklEMGdiR2x1YTNOSVpXRmtaWEl1YzNCc2FYUW9MMXhjY3lvc1hGeHpLaThwT3lBdkx5QnpjR3hwZEhNZ1lXNWtJSE4wY21sd2N5QjBhR1VnZFhKc2MxeHVJQ0FnY21WMGRYSnVJR3hwYm10ekxuSmxaSFZqWlNobWRXNWpkR2x2YmlodVpYaDBWWEpzTENCc2FXNXJLU0I3WEc0Z0lDQWdJQ0JwWmlBb2JHbHVheTV6WldGeVkyZ29MM0psYkQxY0ltNWxlSFJjSWk4cElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaHNhVzVyTG0xaGRHTm9LQzg4S0M0cUtUNHZLU0I4ZkNCYlhTbGJNVjA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhoMFZYSnNPMXh1SUNBZ2ZTd2dkVzVrWldacGJtVmtLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZMkZzYkdKaFkydEZjbkp2Y2s5eVZHaHliM2NvWTJJc0lIQmhkR2dwSUh0Y2JpQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm9ZVzVrYkdWeUtHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2JHVjBJR1Z5Y205eU8xeHVJQ0FnSUNBZ2FXWWdLRzlpYW1WamRDNW9ZWE5QZDI1UWNtOXdaWEowZVNnblkyOXVabWxuSnlrcElIdGNiaUFnSUNBZ0lDQWdJR052Ym5OMElIdHlaWE53YjI1elpUb2dlM04wWVhSMWN5d2djM1JoZEhWelZHVjRkSDBzSUdOdmJtWnBaem9nZTIxbGRHaHZaQ3dnZFhKc2ZYMGdQU0J2WW1wbFkzUTdYRzRnSUNBZ0lDQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlDaGdKSHR6ZEdGMGRYTjlJR1Z5Y205eUlHMWhhMmx1WnlCeVpYRjFaWE4wSUNSN2JXVjBhRzlrZlNBa2UzVnliSDA2SUZ3aUpIdHpkR0YwZFhOVVpYaDBmVndpWUNrN1hHNGdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlHNWxkeUJTWlhOd2IyNXpaVVZ5Y205eUtHMWxjM05oWjJVc0lIQmhkR2dzSUc5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0FnSUNCc2IyY29ZQ1I3YldWemMyRm5aWDBnSkh0S1UwOU9Mbk4wY21sdVoybG1lU2h2WW1wbFkzUXVaR0YwWVNsOVlDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQnZZbXBsWTNRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ0lHeHZaeWduWjI5cGJtY2dkRzhnWlhKeWIzSWdZMkZzYkdKaFkyc25LVHRjYmlBZ0lDQWdJQ0FnSUdOaUtHVnljbTl5S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNCc2IyY29KM1JvY205M2FXNW5JR1Z5Y205eUp5azdYRzRnSUNBZ0lDQWdJQ0IwYUhKdmR5Qmxjbkp2Y2p0Y2JpQWdJQ0FnSUgxY2JpQWdJSDA3WEc1OVhHNGlYWDA9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0YWJsZS5qcy5tYXBcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbGFiZWwtaGFzLWZvciAqL1xudmFyIHByb3BUeXBlcyA9IHtcbiAgaW5saW5lOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICB0aXRsZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogT25seSB2YWxpZCBpZiBgaW5saW5lYCBpcyBub3Qgc2V0LlxuICAgKi9cbiAgdmFsaWRhdGlvblN0YXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InLCBudWxsXSksXG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgcmVmIHRvIHRoZSBgPGlucHV0PmAgZWxlbWVudC4gT25seSBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgaGVyZS5cbiAgICpcbiAgICogYGBganNcbiAgICogPFJhZGlvIGlucHV0UmVmPXtyZWYgPT4geyB0aGlzLmlucHV0ID0gcmVmOyB9fSAvPlxuICAgKiBgYGBcbiAgICovXG4gIGlucHV0UmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGlubGluZTogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgdGl0bGU6ICcnXG59O1xuXG52YXIgUmFkaW8gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShSYWRpbywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmFkaW8oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJhZGlvLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlubGluZSA9IF90aGlzJHByb3BzLmlubGluZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3RoaXMkcHJvcHMudmFsaWRhdGlvblN0YXRlLFxuICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiaW5saW5lXCIsIFwiZGlzYWJsZWRcIiwgXCJ2YWxpZGF0aW9uU3RhdGVcIiwgXCJpbnB1dFJlZlwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwidGl0bGVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGlucHV0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIHR5cGU6IFwicmFkaW9cIixcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgIH0pKTtcblxuICAgIGlmIChpbmxpbmUpIHtcbiAgICAgIHZhciBfY2xhc3NlczI7XG5cbiAgICAgIHZhciBfY2xhc3NlcyA9IChfY2xhc3NlczIgPSB7fSwgX2NsYXNzZXMyWygwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShic1Byb3BzLCAnaW5saW5lJyldID0gdHJ1ZSwgX2NsYXNzZXMyLmRpc2FibGVkID0gZGlzYWJsZWQsIF9jbGFzc2VzMik7IC8vIFVzZSBhIHdhcm5pbmcgaGVyZSBpbnN0ZWFkIG9mIGluIHByb3BUeXBlcyB0byBnZXQgYmV0dGVyLWxvb2tpbmdcbiAgICAgIC8vIGdlbmVyYXRlZCBkb2N1bWVudGF0aW9uLlxuXG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSghdmFsaWRhdGlvblN0YXRlLCAnYHZhbGlkYXRpb25TdGF0ZWAgaXMgaWdub3JlZCBvbiBgPFJhZGlvIGlubGluZT5gLiBUbyBkaXNwbGF5ICcgKyAndmFsaWRhdGlvbiBzdGF0ZSBvbiBhbiBpbmxpbmUgcmFkaW8sIHNldCBgdmFsaWRhdGlvblN0YXRlYCBvbiBhICcgKyAncGFyZW50IGA8Rm9ybUdyb3VwPmAgb3Igb3RoZXIgZWxlbWVudCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgX2NsYXNzZXMpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgfSwgaW5wdXQsIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sICgwLCBfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGJzUHJvcHMpLCB7XG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9KTtcblxuICAgIGlmICh2YWxpZGF0aW9uU3RhdGUpIHtcbiAgICAgIGNsYXNzZXNbXCJoYXMtXCIgKyB2YWxpZGF0aW9uU3RhdGVdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcbiAgICAgIHRpdGxlOiB0aXRsZVxuICAgIH0sIGlucHV0LCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBSYWRpbztcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUmFkaW8ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUmFkaW8uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdyYWRpbycsIFJhZGlvKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5TdHlsZSA9IGV4cG9ydHMuU3RhdGUgPSBleHBvcnRzLkRFVklDRV9TSVpFUyA9IGV4cG9ydHMuU0laRV9NQVAgPSBleHBvcnRzLlNpemUgPSB2b2lkIDA7XG52YXIgU2l6ZSA9IHtcbiAgTEFSR0U6ICdsYXJnZScsXG4gIFNNQUxMOiAnc21hbGwnLFxuICBYU01BTEw6ICd4c21hbGwnXG59O1xuZXhwb3J0cy5TaXplID0gU2l6ZTtcbnZhciBTSVpFX01BUCA9IHtcbiAgbGFyZ2U6ICdsZycsXG4gIG1lZGl1bTogJ21kJyxcbiAgc21hbGw6ICdzbScsXG4gIHhzbWFsbDogJ3hzJyxcbiAgbGc6ICdsZycsXG4gIG1kOiAnbWQnLFxuICBzbTogJ3NtJyxcbiAgeHM6ICd4cydcbn07XG5leHBvcnRzLlNJWkVfTUFQID0gU0laRV9NQVA7XG52YXIgREVWSUNFX1NJWkVTID0gWydsZycsICdtZCcsICdzbScsICd4cyddO1xuZXhwb3J0cy5ERVZJQ0VfU0laRVMgPSBERVZJQ0VfU0laRVM7XG52YXIgU3RhdGUgPSB7XG4gIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbiAgV0FSTklORzogJ3dhcm5pbmcnLFxuICBEQU5HRVI6ICdkYW5nZXInLFxuICBJTkZPOiAnaW5mbydcbn07XG5leHBvcnRzLlN0YXRlID0gU3RhdGU7XG52YXIgU3R5bGUgPSB7XG4gIERFRkFVTFQ6ICdkZWZhdWx0JyxcbiAgUFJJTUFSWTogJ3ByaW1hcnknLFxuICBMSU5LOiAnbGluaycsXG4gIElOVkVSU0U6ICdpbnZlcnNlJ1xufTtcbmV4cG9ydHMuU3R5bGUgPSBTdHlsZTsiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgcmV0dXJuICgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkpO1xufTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gb3duZXJEb2N1bWVudDtcblxuZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2xhYmVsLWhhcy1mb3IgKi9cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGlubGluZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgdGl0bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE9ubHkgdmFsaWQgaWYgYGlubGluZWAgaXMgbm90IHNldC5cbiAgICovXG4gIHZhbGlkYXRpb25TdGF0ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnc3VjY2VzcycsICd3YXJuaW5nJywgJ2Vycm9yJywgbnVsbF0pLFxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhIHJlZiB0byB0aGUgYDxpbnB1dD5gIGVsZW1lbnQuIE9ubHkgZnVuY3Rpb25zIGNhbiBiZSB1c2VkIGhlcmUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIDxDaGVja2JveCBpbnB1dFJlZj17cmVmID0+IHsgdGhpcy5pbnB1dCA9IHJlZjsgfX0gLz5cbiAgICogYGBgXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbmxpbmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHRpdGxlOiAnJ1xufTtcblxudmFyIENoZWNrYm94ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoQ2hlY2tib3gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENoZWNrYm94KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDaGVja2JveC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpbmxpbmUgPSBfdGhpcyRwcm9wcy5pbmxpbmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0ZSA9IF90aGlzJHByb3BzLnZhbGlkYXRpb25TdGF0ZSxcbiAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wcy5pbnB1dFJlZixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICB0aXRsZSA9IF90aGlzJHByb3BzLnRpdGxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImlubGluZVwiLCBcImRpc2FibGVkXCIsIFwidmFsaWRhdGlvblN0YXRlXCIsIFwiaW5wdXRSZWZcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInRpdGxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBpbnB1dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9KSk7XG5cbiAgICBpZiAoaW5saW5lKSB7XG4gICAgICB2YXIgX2NsYXNzZXMyO1xuXG4gICAgICB2YXIgX2NsYXNzZXMgPSAoX2NsYXNzZXMyID0ge30sIF9jbGFzc2VzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ2lubGluZScpXSA9IHRydWUsIF9jbGFzc2VzMi5kaXNhYmxlZCA9IGRpc2FibGVkLCBfY2xhc3NlczIpOyAvLyBVc2UgYSB3YXJuaW5nIGhlcmUgaW5zdGVhZCBvZiBpbiBwcm9wVHlwZXMgdG8gZ2V0IGJldHRlci1sb29raW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgZG9jdW1lbnRhdGlvbi5cblxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoIXZhbGlkYXRpb25TdGF0ZSwgJ2B2YWxpZGF0aW9uU3RhdGVgIGlzIGlnbm9yZWQgb24gYDxDaGVja2JveCBpbmxpbmU+YC4gVG8gZGlzcGxheSAnICsgJ3ZhbGlkYXRpb24gc3RhdGUgb24gYW4gaW5saW5lIGNoZWNrYm94LCBzZXQgYHZhbGlkYXRpb25TdGF0ZWAgb24gYSAnICsgJ3BhcmVudCBgPEZvcm1Hcm91cD5gIG9yIG90aGVyIGVsZW1lbnQgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIF9jbGFzc2VzKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgIH0sIGlucHV0LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKSwge1xuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSk7XG5cbiAgICBpZiAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjbGFzc2VzW1wiaGFzLVwiICsgdmFsaWRhdGlvblN0YXRlXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKSxcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgICB0aXRsZTogdGl0bGVcbiAgICB9LCBpbnB1dCwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gQ2hlY2tib3g7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNoZWNrYm94LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNoZWNrYm94LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnY2hlY2tib3gnLCBDaGVja2JveCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICdsaWdodHNlYWdyZWVuJyxcbiAgJ2ZvcmVzdGdyZWVuJyxcbiAgJ2dvbGRlbnJvZCcsXG4gICdkb2RnZXJibHVlJyxcbiAgJ2RhcmtvcmNoaWQnLFxuICAnY3JpbXNvbidcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUwgRE9NIGFuZCBTVkcgRE9NIG1heSBoYXZlIGRpZmZlcmVudCBzdXBwb3J0IGxldmVscyxcbiAgLy8gc28gd2UgbmVlZCB0byBjaGVjayBvbiBjb250ZXh0IGluc3RlYWQgb2YgYSBkb2N1bWVudCByb290IGVsZW1lbnQuXG4gIHJldHVybiBfaW5ET00uZGVmYXVsdCA/IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgaWYgKGNvbnRleHQuY29udGFpbnMpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbGxiYWNrKGNvbnRleHQsIG5vZGUpO1xuICAgIH1cbiAgfSA6IGZhbGxiYWNrO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZmFsbGJhY2soY29udGV4dCwgbm9kZSkge1xuICBpZiAobm9kZSkgZG8ge1xuICAgIGlmIChub2RlID09PSBjb250ZXh0KSByZXR1cm4gdHJ1ZTtcbiAgfSB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50Tm9kZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZiAhPSBudWxsO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZikge1xuICAgIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgIH1cblxuICAgIGlmIChhY2MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByb3BWYWx1ZSk7XG5cbiAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBSZWFjdEVsZW1lbnQgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LiBZb3UgY2FuIHVzdWFsbHkgb2J0YWluIGEgUmVhY3RDb21wb25lbnQgb3IgRE9NRWxlbWVudCAnICsgJ2Zyb20gYSBSZWFjdEVsZW1lbnQgYnkgYXR0YWNoaW5nIGEgcmVmIHRvIGl0LicpO1xuICB9XG5cbiAgaWYgKChwcm9wVHlwZSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BWYWx1ZS5yZW5kZXIgIT09ICdmdW5jdGlvbicpICYmIHByb3BWYWx1ZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgcHJvcFZhbHVlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKHZhbGlkYXRlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldENvbnRhaW5lcjtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lciwgZGVmYXVsdENvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG4gIHJldHVybiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBkZWZhdWx0Q29udGFpbmVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRXaW5kb3c7XG5cbmZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIHJldHVybiBub2RlID09PSBub2RlLndpbmRvdyA/IG5vZGUgOiBub2RlLm5vZGVUeXBlID09PSA5ID8gbm9kZS5kZWZhdWx0VmlldyB8fCBub2RlLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFVzZXMgYGNvbnRyb2xJZGAgZnJvbSBgPEZvcm1Hcm91cD5gIGlmIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZC5cbiAgICovXG4gIGh0bWxGb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIHNyT25seTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzck9ubHk6IGZhbHNlXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIENvbnRyb2xMYWJlbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKENvbnRyb2xMYWJlbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29udHJvbExhYmVsKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDb250cm9sTGFiZWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGZvcm1Hcm91cCA9IHRoaXMuY29udGV4dC4kYnNfZm9ybUdyb3VwO1xuICAgIHZhciBjb250cm9sSWQgPSBmb3JtR3JvdXAgJiYgZm9ybUdyb3VwLmNvbnRyb2xJZDtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRodG1sRm9yID0gX3RoaXMkcHJvcHMuaHRtbEZvcixcbiAgICAgICAgaHRtbEZvciA9IF90aGlzJHByb3BzJGh0bWxGb3IgPT09IHZvaWQgMCA/IGNvbnRyb2xJZCA6IF90aGlzJHByb3BzJGh0bWxGb3IsXG4gICAgICAgIHNyT25seSA9IF90aGlzJHByb3BzLnNyT25seSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImh0bWxGb3JcIiwgXCJzck9ubHlcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb250cm9sSWQgPT0gbnVsbCB8fCBodG1sRm9yID09PSBjb250cm9sSWQsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Q29udHJvbExhYmVsPmAgd2hlbiBgaHRtbEZvcmAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuICAgIHZhciBjbGFzc2VzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIHtcbiAgICAgICdzci1vbmx5Jzogc3JPbmx5XG4gICAgfSk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDb250cm9sTGFiZWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNvbnRyb2xMYWJlbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Db250cm9sTGFiZWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuQ29udHJvbExhYmVsLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnY29udHJvbC1sYWJlbCcsIENvbnRyb2xMYWJlbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgbW9kZWwgc2NoZW1hIHRoYXQgKGRlKXNlcmlhbGl6ZXMgZnJvbSAvIHRvIHBsYWluIGphdmFzY3JpcHQgb2JqZWN0cy5cbiAqIEl0cyBmYWN0b3J5IG1ldGhvZCBpczogYCgpID0+ICh7fSlgXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciB0b2RvU2NoZW1hID0gY3JlYXRlU2ltcGxlU2NoZW1hKHtcbiAqICAgICB0aXRsZTogdHJ1ZSxcbiAqICAgICBkb25lOiB0cnVlLFxuICogfSk7XG4gKlxuICogdmFyIGpzb24gPSBzZXJpYWxpemUodG9kb1NjaGVtYSwgeyB0aXRsZTogJ1Rlc3QnLCBkb25lOiBmYWxzZSB9KTtcbiAqIHZhciB0b2RvID0gZGVzZXJpYWxpemUodG9kb1NjaGVtYSwganNvbik7XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIHByb3BlcnR5IG1hcHBpbmcsXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBtb2RlbCBzY2hlbWFcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2ltcGxlU2NoZW1hKHByb3BzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmFjdG9yeTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge31cbiAgICAgICAgfSxcbiAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgfVxufVxuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgICBqOiBmdW5jdGlvbiBqc29uKHYpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIFwiW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06IFwiICsgZXJyb3IubWVzc2FnZVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHZhciB2YXJpYWJsZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgICAgICB2YXIgdmFyaWFibGVzVG9Mb2cgPSBbXTtcblxuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgZm9ybWF0dGVkTWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uIG1lc3NhZ2VGb3JtYXR0ZXIobWF0Y2gsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKG1hdGNoID09PSBcIiUlXCIpIHJldHVybiBtYXRjaFxuXG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gdmFyaWFibGVzW2luZGV4KytdO1xuXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzVG9Mb2cucHVzaCh2YXJpYWJsZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyKHZhcmlhYmxlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNvbnNvbGUgJiYgdmFyaWFibGVzVG9Mb2cubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIHZhcmlhYmxlc1RvTG9nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltzZXJpYWxpenJdIFwiICsgKGZvcm1hdHRlZE1lc3NhZ2UgfHwgXCJJbGxlZ2FsIFN0YXRlXCIpKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gR1VBUkRFRF9OT09QKGVycikge1xuICAgIGlmIChlcnIpIC8vIHVuZ3VhcmRlZCBlcnJvci4uLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKVxufVxuXG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgdmFyIGZpcmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFmaXJlZCkge1xuICAgICAgICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiY2FsbGJhY2sgd2FzIGludm9rZWQgdHdpY2VcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJhbGxlbChhciwgcHJvY2Vzc29yLCBjYikge1xuICAgIC8vIFRPRE86IGxpbWl0IHBhcmFsbGVsaXphdGlvbj9cbiAgICBpZiAoYXIubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gdm9pZCBjYihudWxsLCBbXSlcbiAgICB2YXIgbGVmdCA9IGFyLmZpbHRlcihmdW5jdGlvbigpeyByZXR1cm4gdHJ1ZSB9KS5sZW5ndGg7IC8vIG9ubHkgY291bnQgaXRlbXMgcHJvY2Vzc2VkIGJ5IGZvckVhY2hcbiAgICB2YXIgcmVzdWx0QXJyYXkgPSBbXTtcbiAgICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gICAgdmFyIHByb2Nlc3NvckNiID0gZnVuY3Rpb24gKGlkeCwgZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgaWYgKCFmYWlsZWQpIHtcbiAgICAgICAgICAgICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNiKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRBcnJheVtpZHhdID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKC0tbGVmdCA9PT0gMClcbiAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHRBcnJheSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpZHgpIHtcbiAgICAgICAgcHJvY2Vzc29yKHZhbHVlLCBwcm9jZXNzb3JDYi5iaW5kKG51bGwsIGlkeCksIGlkeCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCJcbn1cblxuZnVuY3Rpb24gaXNNb2RlbFNjaGVtYSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyAmJiB0aGluZy5mYWN0b3J5ICYmIHRoaW5nLnByb3BzXG59XG5cbmZ1bmN0aW9uIGlzUHJvcFNjaGVtYSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyAmJiB0aGluZy5zZXJpYWxpemVyICYmIHRoaW5nLmRlc2VyaWFsaXplclxufVxuXG5mdW5jdGlvbiBpc0FsaWFzZWRQcm9wU2NoZW1hKHByb3BTY2hlbWEpIHtcbiAgICByZXR1cm4gdHlwZW9mIHByb3BTY2hlbWEgPT09IFwib2JqZWN0XCIgJiYgISFwcm9wU2NoZW1hLmpzb25uYW1lXG59XG5cbmZ1bmN0aW9uIGlzSWRlbnRpZmllclByb3BTY2hlbWEocHJvcFNjaGVtYSkge1xuICAgIHJldHVybiB0eXBlb2YgcHJvcFNjaGVtYSA9PT0gXCJvYmplY3RcIiAmJiBwcm9wU2NoZW1hLmlkZW50aWZpZXIgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNBc3NpZ25hYmxlVG8oYWN0dWFsVHlwZSwgZXhwZWN0ZWRUeXBlKSB7XG4gICAgd2hpbGUgKGFjdHVhbFR5cGUpIHtcbiAgICAgICAgaWYgKGFjdHVhbFR5cGUgPT09IGV4cGVjdGVkVHlwZSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIGFjdHVhbFR5cGUgPSBhY3R1YWxUeXBlLmV4dGVuZHM7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBpc01hcExpa2UodGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgJiYgdHlwZW9mIHRoaW5nLmtleXMgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdGhpbmcuY2xlYXIgPT09IFwiZnVuY3Rpb25cIlxufVxuXG5mdW5jdGlvbiBnZXRJZGVudGlmaWVyUHJvcChtb2RlbFNjaGVtYSkge1xuICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSk7XG4gICAgLy8gb3B0aW1pemF0aW9uOiBjYWNoZSB0aGlzIGxvb2t1cFxuICAgIHdoaWxlIChtb2RlbFNjaGVtYSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBtb2RlbFNjaGVtYS5wcm9wcylcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kZWxTY2hlbWEucHJvcHNbcHJvcE5hbWVdID09PSBcIm9iamVjdFwiICYmIG1vZGVsU2NoZW1hLnByb3BzW3Byb3BOYW1lXS5pZGVudGlmaWVyID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wTmFtZVxuICAgICAgICBtb2RlbFNjaGVtYSA9IG1vZGVsU2NoZW1hLmV4dGVuZHM7XG4gICAgfVxuICAgIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NBZGRpdGlvbmFsUHJvcEFyZ3MocHJvcFNjaGVtYSwgYWRkaXRpb25hbEFyZ3MpIHtcbiAgICBpZiAoYWRkaXRpb25hbEFyZ3MpIHtcbiAgICAgICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBhIHByb3BTY2hlbWFcIik7XG4gICAgICAgIHZhciBhcmdOYW1lcyA9IFtcImJlZm9yZURlc2VyaWFsaXplXCIsIFwiYWZ0ZXJEZXNlcmlhbGl6ZVwiXTtcbiAgICAgICAgYXJnTmFtZXMuZm9yRWFjaChmdW5jdGlvbihhcmdOYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFkZGl0aW9uYWxBcmdzW2FyZ05hbWVdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBwcm9wU2NoZW1hW2FyZ05hbWVdID0gYWRkaXRpb25hbEFyZ3NbYXJnTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFNjaGVtYVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0YW5kYXJkIG1vZGVsIHNjaGVtYSBhc3NvY2lhdGVkIHdpdGggYSBjbGFzcyAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHRoaW5nXG4gKiBAcmV0dXJucyB7TW9kZWxTY2hlbWF9IG1vZGVsIHNjaGVtYVxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0TW9kZWxTY2hlbWEodGhpbmcpIHtcbiAgICBpZiAoIXRoaW5nKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIGlmIChpc01vZGVsU2NoZW1hKHRoaW5nKSlcbiAgICAgICAgcmV0dXJuIHRoaW5nXG4gICAgaWYgKGlzTW9kZWxTY2hlbWEodGhpbmcuc2VyaWFsaXplSW5mbykpXG4gICAgICAgIHJldHVybiB0aGluZy5zZXJpYWxpemVJbmZvXG4gICAgaWYgKHRoaW5nLmNvbnN0cnVjdG9yICYmIHRoaW5nLmNvbnN0cnVjdG9yLnNlcmlhbGl6ZUluZm8pXG4gICAgICAgIHJldHVybiB0aGluZy5jb25zdHJ1Y3Rvci5zZXJpYWxpemVJbmZvXG59XG5cbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBtb2RlbCBzY2hlbWEgZm9yIGNsYXNzIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiBFdmVyeXdoZXJlIHdoZXJlIGEgbW9kZWwgc2NoZW1hIGlzIHJlcXVpcmVkIGFzIGFyZ3VtZW50LCB0aGlzIGNsYXNzIC8gY29uc3RydWN0b3IgZnVuY3Rpb25cbiAqIGNhbiBiZSBwYXNzZWQgaW4gYXMgd2VsbCAoZm9yIGV4YW1wbGUgd2hlbiB1c2luZyBgb2JqZWN0YCBvciBgcmVmYC5cbiAqXG4gKiBXaGVuIHBhc3NpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyB0byBgc2VyaWFsaXplYCwgaXQgaXMgbm90IHJlcXVpcmVkIHRvIHBhc3MgdGhlIG1vZGVsIHNjaGVtYVxuICogYXMgZmlyc3QgYXJndW1lbnQgYW55bW9yZSwgYmVjYXVzZSB0aGUgZGVmYXVsdCBzY2hlbWEgd2lsbCBiZSBpbmZlcnJlZCBmcm9tIHRoZSBpbnN0YW5jZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7Y29uc3RydWN0b3J8Y2xhc3N9IGNsYXp6IGNsYXNzIG9yIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge01vZGVsU2NoZW1hfSBtb2RlbFNjaGVtYSAtIGEgbW9kZWwgc2NoZW1hXG4gKiBAcmV0dXJucyB7TW9kZWxTY2hlbWF9IG1vZGVsIHNjaGVtYVxuICovXG5mdW5jdGlvbiBzZXREZWZhdWx0TW9kZWxTY2hlbWEoY2xhenosIG1vZGVsU2NoZW1hKSB7XG4gICAgaW52YXJpYW50KGlzTW9kZWxTY2hlbWEobW9kZWxTY2hlbWEpKTtcbiAgICByZXR1cm4gY2xhenouc2VyaWFsaXplSW5mbyA9IG1vZGVsU2NoZW1hXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1vZGVsIHNjaGVtYSB0aGF0IChkZSlzZXJpYWxpemVzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY29uc3RydWN0b3IgZnVuY3Rpb24gKGNsYXNzKS5cbiAqIFRoZSBjcmVhdGVkIG1vZGVsIHNjaGVtYSBpcyBhc3NvY2lhdGVkIGJ5IHRoZSB0YXJnZXRlZCB0eXBlIGFzIGRlZmF1bHQgbW9kZWwgc2NoZW1hLCBzZWUgc2V0RGVmYXVsdE1vZGVsU2NoZW1hLlxuICogSXRzIGZhY3RvcnkgbWV0aG9kIGlzIGAoKSA9PiBuZXcgY2xhenooKWAgKHVubGVzcyBvdmVycmlkZW4sIHNlZSB0aGlyZCBhcmcpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBUb2RvKHRpdGxlLCBkb25lKSB7XG4gKiAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICogICAgIHRoaXMuZG9uZSA9IGRvbmU7XG4gKiB9XG4gKlxuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiB0cnVlLFxuICogICAgIGRvbmU6IHRydWUsXG4gKiB9KTtcbiAqXG4gKiB2YXIganNvbiA9IHNlcmlhbGl6ZShuZXcgVG9kbygnVGVzdCcsIGZhbHNlKSk7XG4gKiB2YXIgdG9kbyA9IGRlc2VyaWFsaXplKFRvZG8sIGpzb24pO1xuICpcbiAqIEBwYXJhbSB7Y29uc3RydWN0b3J8Y2xhc3N9IGNsYXp6IGNsYXNzIG9yIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgcHJvcGVydHkgbWFwcGluZ1xuICogQHBhcmFtIHtmdW5jdGlvbn0gZmFjdG9yeSBvcHRpb25hbCBjdXN0b20gZmFjdG9yeS4gUmVjZWl2ZXMgY29udGV4dCBhcyBmaXJzdCBhcmdcbiAqIEByZXR1cm5zIHtvYmplY3R9IG1vZGVsIHNjaGVtYVxuICovXG5mdW5jdGlvbiBjcmVhdGVNb2RlbFNjaGVtYShjbGF6eiwgcHJvcHMsIGZhY3RvcnkpIHtcbiAgICBpbnZhcmlhbnQoY2xhenogIT09IE9iamVjdCwgXCJvbmUgY2Fubm90IHNpbXBseSBwdXQgZGVmaW5lIGEgbW9kZWwgc2NoZW1hIGZvciBPYmplY3RcIik7XG4gICAgaW52YXJpYW50KHR5cGVvZiBjbGF6eiA9PT0gXCJmdW5jdGlvblwiLCBcImV4cGVjdGVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXCIpO1xuICAgIHZhciBtb2RlbCA9IHtcbiAgICAgICAgdGFyZ2V0Q2xhc3M6IGNsYXp6LFxuICAgICAgICBmYWN0b3J5OiBmYWN0b3J5IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBjbGF6eigpXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzOiBwcm9wc1xuICAgIH07XG4gICAgLy8gZmluZCBzdXBlciBtb2RlbFxuICAgIGlmIChjbGF6ei5wcm90b3R5cGUuY29uc3RydWN0b3IgIT09IE9iamVjdCkge1xuICAgICAgICB2YXIgcyA9IGdldERlZmF1bHRNb2RlbFNjaGVtYShjbGF6ei5wcm90b3R5cGUuY29uc3RydWN0b3IpO1xuICAgICAgICBpZiAocyAmJiBzLnRhcmdldENsYXNzICE9PSBjbGF6eilcbiAgICAgICAgICAgIG1vZGVsLmV4dGVuZHMgPSBzO1xuICAgIH1cbiAgICBzZXREZWZhdWx0TW9kZWxTY2hlbWEoY2xhenosIG1vZGVsKTtcbiAgICByZXR1cm4gbW9kZWxcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGlzIGZpZWxkIGNvbnRhaW5zIGEgcHJpbWl0aXZlIHZhbHVlIChvciBEYXRlKSB3aGljaCBzaG91bGQgYmUgc2VyaWFsaXplZCBsaXRlcmFsbHkgdG8ganNvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiBwcmltaXRpdmUoKSxcbiAqIH0pO1xuICpcbiAqIGNvbnNvbGUuZGlyKHNlcmlhbGl6ZShuZXcgVG9kbygndGVzdCcpKSk7XG4gKiAvLyBvdXRwdXRzOiB7IHRpdGxlIDogXCJ0ZXN0XCIgfVxuICpcbiAqIEBwYXJhbSB7QWRkaXRpb25hbFByb3BBcmdzfSBhZGRpdGlvbmFsQXJncyBvcHRpb25hbCBvYmplY3QgdGhhdCBjb250YWlucyBiZWZvcmVEZXNlcmlhbGl6ZSBhbmQvb3IgYWZ0ZXJEZXNlcmlhbGl6ZSBoYW5kbGVyc1xuICogQHJldHVybnMge01vZGVsU2NoZW1hfVxuICovXG5mdW5jdGlvbiBwcmltaXRpdmUoYWRkaXRpb25hbEFyZ3MpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzZXJpYWxpemVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGludmFyaWFudChpc1ByaW1pdGl2ZSh2YWx1ZSksIFwidGhpcyB2YWx1ZSBpcyBub3QgcHJpbWl0aXZlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBkZXNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChqc29uVmFsdWUsIGRvbmUpIHtcbiAgICAgICAgICAgIGlmICghaXNQcmltaXRpdmUoanNvblZhbHVlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKFwiW3NlcmlhbGl6cl0gdGhpcyB2YWx1ZSBpcyBub3QgcHJpbWl0aXZlOiBcIiArIGpzb25WYWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB2b2lkIGRvbmUobnVsbCwganNvblZhbHVlKVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBJbiB0aGUgZXZlbnQgdGhhdCBhIHByb3BlcnR5IG5lZWRzIHRvIGJlIGRlc2VyaWFsaXplZCwgYnV0IG5vdCBzZXJpYWxpemVkLCB5b3UgY2FuIHVzZSB0aGUgU0tJUCBzeW1ib2wgdG8gb21pdCB0aGUgcHJvcGVydHkuIFRoaXMgaGFzIHRvIGJlIHVzZWQgd2l0aCB0aGUgY3VzdG9tIHNlcmlhbGl6ZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciBzY2hlbWEgPSBfLmNyZWF0ZVNpbXBsZVNjaGVtYSh7XG4gKiAgICAgYTogXy5jdXN0b20oXG4gKiAgICAgICAgIGZ1bmN0aW9uKHYpIHtcbiAqICAgICAgICAgICAgIHJldHVybiBfLlNLSVBcbiAqICAgICAgICAgfSxcbiAqICAgICAgICAgZnVuY3Rpb24odikge1xuICogICAgICAgICAgICAgcmV0dXJuIHY7XG4gKiAgICAgICAgIH1cbiAqICAgICApLFxuICogfSk7XG4gKiB0LmRlZXBFcXVhbChfLnNlcmlhbGl6ZShzLCB7IGE6IDQgfSksIHsgfSk7XG4gKiB0LmRlZXBFcXVhbChfLmRlc2VyaWFsaXplKHMsIHsgYTogNCB9KSwgeyBhOiA0IH0pO1xuICovXG52YXIgU0tJUCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2woXCJTS0lQXCIpIDogeyBTS0lQOiB0cnVlIH07XG5cbnZhciBfZGVmYXVsdFByaW1pdGl2ZVByb3AgPSBwcmltaXRpdmUoKTtcblxuLy8gVWdseSB3YXkgdG8gZ2V0IHRoZSBwYXJhbWV0ZXIgbmFtZXMgc2luY2UgdGhleSBhcmVuJ3QgZWFzaWx5IHJldHJpZXZhYmxlIHZpYSByZWZsZWN0aW9uXG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgQVJHVU1FTlRfTkFNRVMgPSAvKFteXFxzLF0rKS9nO1xuXG5mdW5jdGlvbiBnZXRQYXJhbU5hbWVzKGZ1bmMpIHtcbiAgICB2YXIgZm5TdHIgPSBmdW5jLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgXCJcIik7XG4gICAgdmFyIHJlc3VsdCA9IGZuU3RyLnNsaWNlKGZuU3RyLmluZGV4T2YoXCIoXCIpKzEsIGZuU3RyLmluZGV4T2YoXCIpXCIpKS5tYXRjaChBUkdVTUVOVF9OQU1FUyk7XG4gICAgaWYocmVzdWx0ID09PSBudWxsKVxuICAgICAgICByZXN1bHQgPSBbXTtcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6YWJsZURlY29yYXRvcihwcm9wU2NoZW1hLCB0YXJnZXQsIHByb3BOYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgaW52YXJpYW50KGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgXCJ0b28gZmV3IGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBAc2VyaWFsaXphYmxlIGFzIHByb3BlcnR5IGRlY29yYXRvclwiKTtcbiAgICAvLyBGaXggZm9yIEBzZXJpYWxpemFibGUgdXNlZCBpbiBjbGFzcyBjb25zdHJ1Y3RvciBwYXJhbXMgKHR5cGVzY3JpcHQpXG4gICAgdmFyIGZhY3Rvcnk7XG4gICAgaWYgKHByb3BOYW1lID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHRhcmdldCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICYmIHRhcmdldC5wcm90b3R5cGVcbiAgICAgICAgJiYgZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBkZXNjcmlwdG9yID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGludmFyaWFudChpc1Byb3BTY2hlbWEocHJvcFNjaGVtYSksIFwiQ29uc3RydWN0b3IgcGFyYW1zIG11c3QgdXNlIGFsaWFzKG5hbWUpXCIpO1xuICAgICAgICBpbnZhcmlhbnQocHJvcFNjaGVtYS5qc29ubmFtZSwgXCJDb25zdHJ1Y3RvciBwYXJhbXMgbXVzdCB1c2UgYWxpYXMobmFtZSlcIik7XG4gICAgICAgIHZhciBwYXJhbU5hbWVzID0gZ2V0UGFyYW1OYW1lcyh0YXJnZXQpO1xuICAgICAgICBpZiAocGFyYW1OYW1lcy5sZW5ndGggPj0gZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgcHJvcE5hbWUgPSBwYXJhbU5hbWVzW2Rlc2NyaXB0b3JdO1xuICAgICAgICAgICAgcHJvcFNjaGVtYS5wYXJhbU51bWJlciA9IGRlc2NyaXB0b3I7XG4gICAgICAgICAgICBkZXNjcmlwdG9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZhY3Rvcnkgc28gdGhlIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCBwcm9wZXJseVxuICAgICAgICAgICAgZmFjdG9yeSA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXQuY29uc3RydWN0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dC5tb2RlbFNjaGVtYS5wcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGNvbnRleHQubW9kZWxTY2hlbWEucHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wLnBhcmFtTnVtYmVyID09PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW2ldID0gY29udGV4dC5qc29uW3Byb3AuanNvbm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSh0YXJnZXQuY29uc3RydWN0b3IsIFtudWxsXS5jb25jYXQocGFyYW1zKSkpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGludmFyaWFudCh0eXBlb2YgcHJvcE5hbWUgPT09IFwic3RyaW5nXCIsIFwiaW5jb3JyZWN0IHVzYWdlIG9mIEBzZXJpYWxpemFibGUgZGVjb3JhdG9yXCIpO1xuICAgIHZhciBpbmZvID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCk7XG5cbiAgICBpZiAoIWluZm8gfHwgIXRhcmdldC5jb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcInNlcmlhbGl6ZUluZm9cIikpXG4gICAgICAgIGluZm8gPSBjcmVhdGVNb2RlbFNjaGVtYSh0YXJnZXQuY29uc3RydWN0b3IsIHt9LCBmYWN0b3J5KTtcbiAgICBpZiAoaW5mbyAmJiBpbmZvLnRhcmdldENsYXNzICE9PSB0YXJnZXQuY29uc3RydWN0b3IpXG4gICAgICAgIC8vIGZpeGVzIHR5cGVzY3JpcHQgaXNzdWUgdGhhdCB0ZW5kcyB0byBjb3B5IGZpZWxkcyBmcm9tIHN1cGVyIGNvbnN0cnVjdG9yIHRvIHN1YiBjb25zdHJ1Y3RvciBpbiBleHRlbmRzXG4gICAgICAgIGluZm8gPSBjcmVhdGVNb2RlbFNjaGVtYSh0YXJnZXQuY29uc3RydWN0b3IsIHt9LCBmYWN0b3J5KTtcbiAgICBpbmZvLnByb3BzW3Byb3BOYW1lXSA9IHByb3BTY2hlbWE7XG4gICAgLy8gTVdFOiB3aHkgd29uJ3QgYmFiZWwgd29yayB3aXRob3V0P1xuICAgIGlmIChkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmdldCAmJiAhZGVzY3JpcHRvci5zZXQpXG4gICAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIHJldHVybiBkZXNjcmlwdG9yXG59XG5cbi8qKlxuICogRGVjb3JhdG9yIHRoYXQgZGVmaW5lcyBhIG5ldyBwcm9wZXJ0eSBtYXBwaW5nIG9uIHRoZSBkZWZhdWx0IG1vZGVsIHNjaGVtYSBmb3IgdGhlIGNsYXNzXG4gKiBpdCBpcyB1c2VkIGluLlxuICpcbiAqIFdoZW4gdXNpbmcgdHlwZXNjcmlwdCwgdGhlIGRlY29yYXRvciBjYW4gYWxzbyBiZSB1c2VkIG9uIGZpZWxkcyBkZWNsYXJlZCBhcyBjb25zdHJ1Y3RvciBhcmd1bWVudHMgKHVzaW5nIHRoZSBgcHJpdmF0ZWAgLyBgcHJvdGVjdGVkYCAvIGBwdWJsaWNgIGtleXdvcmRzKS5cbiAqIFRoZSBkZWZhdWx0IGZhY3Rvcnkgd2lsbCB0aGVuIGludm9rZSB0aGUgY29uc3RydWN0b3Igd2l0aCB0aGUgY29ycmVjdCBhcmd1bWVudHMgYXMgd2VsbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgVG9kbyB7XG4gKiAgICAgQHNlcmlhbGl6YWJsZShwcmltaXRpdmUoKSlcbiAqICAgICB0aXRsZTsgLy8gc2hvcnRoYW5kIGZvciBwcmltaXR2ZXNcbiAqXG4gKiAgICAgQHNlcmlhbGl6YWJsZSBkb25lO1xuICpcbiAqICAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgZG9uZSkge1xuICogICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gKiAgICAgICAgIHRoaXMuZG9uZSA9IGRvbmU7XG4gKiAgICAgfVxuICogfVxuICpcbiAqIHZhciBqc29uID0gc2VyaWFsaXplKG5ldyBUb2RvKCdUZXN0JywgZmFsc2UpKTtcbiAqIHZhciB0b2RvID0gZGVzZXJpYWxpemUoVG9kbywganNvbik7XG4gKlxuICogQHBhcmFtIGFyZzFcbiAqIEBwYXJhbSBhcmcyXG4gKiBAcGFyYW0gYXJnM1xuICogQHJldHVybnMge1Byb3BlcnR5RGVzY3JpcHRvcn1cbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXphYmxlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBkZWNvcmF0ZWQgd2l0aCBwcm9wU2NoZW1hXG4gICAgICAgIHZhciBwcm9wU2NoZW1hID0gYXJnMSA9PT0gdHJ1ZSA/IF9kZWZhdWx0UHJpbWl0aXZlUHJvcCA6IGFyZzE7XG4gICAgICAgIGludmFyaWFudChpc1Byb3BTY2hlbWEocHJvcFNjaGVtYSksIFwiQHNlcmlhbGl6YWJsZSBleHBlY3RzIHByb3Agc2NoZW1hXCIpO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXphYmxlRGVjb3JhdG9yLmJpbmQobnVsbCwgcHJvcFNjaGVtYSlcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWNvcmF0ZWQgd2l0aG91dCBhcmd1bWVudHMsIHRyZWF0IGFzIHByaW1pdGl2ZVxuICAgICAgICByZXR1cm4gc2VyaWFsaXphYmxlRGVjb3JhdG9yKHByaW1pdGl2ZSgpLCBhcmcxLCBhcmcyLCBhcmczKVxuICAgIH1cbn1cblxuLyoqXG4gKiBTZXJpYWxpemVzIGFuIG9iamVjdCAoZ3JhcGgpIGludG8ganNvbiB1c2luZyB0aGUgcHJvdmlkZWQgbW9kZWwgc2NoZW1hLlxuICogVGhlIG1vZGVsIHNjaGVtYSBjYW4gYmUgb21pdHRlZCBpZiB0aGUgb2JqZWN0IHR5cGUgaGFzIGEgZGVmYXVsdCBtb2RlbCBzY2hlbWEgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICogSWYgYSBsaXN0IG9mIG9iamVjdHMgaXMgcHJvdmlkZWQsIHRoZXkgc2hvdWxkIGhhdmUgYW4gdW5pZm9ybSB0eXBlLlxuICpcbiAqIEBwYXJhbSBhcmcxIGNsYXNzIG9yIG1vZGVsc2NoZW1hIHRvIHVzZS4gT3B0aW9uYWxcbiAqIEBwYXJhbSBhcmcyIG9iamVjdChzKSB0byBzZXJpYWxpemVcbiAqIEByZXR1cm5zIHtvYmplY3R9IHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICovXG5mdW5jdGlvbiBzZXJpYWxpemUoYXJnMSwgYXJnMikge1xuICAgIGludmFyaWFudChhcmd1bWVudHMubGVuZ3RoID09PSAxIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIsIFwic2VyaWFsaXplIGV4cGVjdHMgb25lIG9yIDIgYXJndW1lbnRzXCIpO1xuICAgIHZhciB0aGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBhcmcxIDogYXJnMjtcbiAgICB2YXIgc2NoZW1hID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IG51bGwgOiBhcmcxO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaW5nKSkge1xuICAgICAgICBpZiAodGhpbmcubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIFtdIC8vIGRvbid0IGJvdGhlciBmaW5kaW5nIGEgc2NoZW1hXG4gICAgICAgIGVsc2UgaWYgKCFzY2hlbWEpXG4gICAgICAgICAgICBzY2hlbWEgPSBnZXREZWZhdWx0TW9kZWxTY2hlbWEodGhpbmdbMF0pO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgc2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHNjaGVtYSk7XG4gICAgfSBlbHNlIGlmICghc2NoZW1hKSB7XG4gICAgICAgIHNjaGVtYSA9IGdldERlZmF1bHRNb2RlbFNjaGVtYSh0aGluZyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHNjaGVtYSA9IGdldERlZmF1bHRNb2RlbFNjaGVtYShzY2hlbWEpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoISFzY2hlbWEsIFwiRmFpbGVkIHRvIGZpbmQgZGVmYXVsdCBzY2hlbWEgZm9yIFwiICsgYXJnMSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpbmcpKVxuICAgICAgICByZXR1cm4gdGhpbmcubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplV2l0aFNjaGVtYShzY2hlbWEsIGl0ZW0pXG4gICAgICAgIH0pXG4gICAgcmV0dXJuIHNlcmlhbGl6ZVdpdGhTY2hlbWEoc2NoZW1hLCB0aGluZylcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGFyU2NoZW1hSW52YXJpYW50KHByb3BEZWYpIHtcbiAgICBpbnZhcmlhbnQocHJvcERlZiA9PT0gdHJ1ZSB8fCBwcm9wRGVmLnBhdHRlcm4sIFwicHJvcCBzY2hlbWEgJyonIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCAndHJ1ZScgb3IgYSBwcm9wIGRlZiB3aXRoIGEgJ3BhdHRlcm4nOiBcIiArIEpTT04uc3RyaW5naWZ5KHByb3BEZWYpKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplV2l0aFNjaGVtYShzY2hlbWEsIG9iaikge1xuICAgIGludmFyaWFudChzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIiAmJiBzY2hlbWEucHJvcHMsIFwiRXhwZWN0ZWQgc2NoZW1hXCIpO1xuICAgIGludmFyaWFudChvYmogJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiwgXCJFeHBlY3RlZCBvYmplY3RcIik7XG4gICAgdmFyIHJlcztcbiAgICBpZiAoc2NoZW1hLmV4dGVuZHMpXG4gICAgICAgIHJlcyA9IHNlcmlhbGl6ZVdpdGhTY2hlbWEoc2NoZW1hLmV4dGVuZHMsIG9iaik7XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IG1ha2UgaW52YXJpYW50PzogIGludmFyaWFudCghb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5zZXJpYWxpemVJbmZvLCBcIm9iamVjdCBoYXMgYSBzZXJpYWxpemFibGUgc3VwZXJ0eXBlLCBidXQgbW9kZWxzY2hlbWEgZGlkIG5vdCBwcm92aWRlIGV4dGVuZHMgY2xhdXNlXCIpXG4gICAgICAgIHJlcyA9IHt9O1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzY2hlbWEucHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgcHJvcERlZiA9IHNjaGVtYS5wcm9wc1trZXldO1xuICAgICAgICBpZiAoa2V5ID09PSBcIipcIikge1xuICAgICAgICAgICAgc2VyaWFsaXplU3RhclByb3BzKHNjaGVtYSwgcHJvcERlZiwgb2JqLCByZXMpO1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BEZWYgPT09IHRydWUpXG4gICAgICAgICAgICBwcm9wRGVmID0gX2RlZmF1bHRQcmltaXRpdmVQcm9wO1xuICAgICAgICBpZiAocHJvcERlZiA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgdmFyIGpzb25WYWx1ZSA9IHByb3BEZWYuc2VyaWFsaXplcihvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICBpZiAoanNvblZhbHVlID09PSBTS0lQKXtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJlc1twcm9wRGVmLmpzb25uYW1lIHx8IGtleV0gPSBqc29uVmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVTdGFyUHJvcHMoc2NoZW1hLCBwcm9wRGVmLCBvYmosIHRhcmdldCkge1xuICAgIGNoZWNrU3RhclNjaGVtYUludmFyaWFudChwcm9wRGVmKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIGlmICghKGtleSBpbiBzY2hlbWEucHJvcHMpKSB7XG4gICAgICAgIGlmICgocHJvcERlZiA9PT0gdHJ1ZSkgfHwgKHByb3BEZWYucGF0dGVybiAmJiBwcm9wRGVmLnBhdHRlcm4udGVzdChrZXkpKSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAocHJvcERlZiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BEZWYucHJvcHMpIHtcbiAgICAgICAgICAgICAgICB2YXIganNvblZhbHVlID0gc2VyaWFsaXplKHByb3BEZWYsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoanNvblZhbHVlID09PSBTS0lQKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRvZG86IHByb3BEZWYuanNvbm5hbWUgY291bGQgYmUgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gb24ga2V5XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBqc29uVmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBqc29uVmFsdWUgPSBwcm9wRGVmLnNlcmlhbGl6ZXIodmFsdWUsIGtleSwgb2JqKTtcbiAgICAgICAgICAgICAgICBpZiAoanNvblZhbHVlID09PSBTS0lQKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRvZG86IHByb3BEZWYuanNvbm5hbWUgY291bGQgYmUgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gb24ga2V5XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBqc29uVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciByb290Q29udGV4dENhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxuZnVuY3Rpb24gQ29udGV4dChwYXJlbnRDb250ZXh0LCBtb2RlbFNjaGVtYSwganNvbiwgb25SZWFkeUNiLCBjdXN0b21BcmdzKSB7XG4gICAgdGhpcy5wYXJlbnRDb250ZXh0ID0gcGFyZW50Q29udGV4dDtcbiAgICB0aGlzLmlzUm9vdCA9ICFwYXJlbnRDb250ZXh0O1xuICAgIHRoaXMucGVuZGluZ0NhbGxiYWNrcyA9IDA7XG4gICAgdGhpcy5wZW5kaW5nUmVmc0NvdW50ID0gMDtcbiAgICB0aGlzLm9uUmVhZHlDYiA9IG9uUmVhZHlDYiB8fCBHVUFSREVEX05PT1A7XG4gICAgdGhpcy5qc29uID0ganNvbjtcbiAgICB0aGlzLnRhcmdldCA9IG51bGw7IC8vIGFsd2F5cyBzZXQgdGhpcyBwcm9wZXJ0eSB1c2luZyBzZXRUYXJnZXRcbiAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlbFNjaGVtYSA9IG1vZGVsU2NoZW1hO1xuICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICB0aGlzLnJvb3RDb250ZXh0ID0gdGhpcztcbiAgICAgICAgdGhpcy5hcmdzID0gY3VzdG9tQXJncztcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVmcyA9IHt9OyAvLyB1dWlkOiBbeyBtb2RlbFNjaGVtYSwgdXVpZCwgY2IgfV1cbiAgICAgICAgdGhpcy5yZXNvbHZlZFJlZnMgPSB7fTsgLy8gdXVpZDogW3sgbW9kZWxTY2hlbWEsIHZhbHVlIH1dXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yb290Q29udGV4dCA9IHBhcmVudENvbnRleHQucm9vdENvbnRleHQ7XG4gICAgICAgIHRoaXMuYXJncyA9IHBhcmVudENvbnRleHQuYXJncztcbiAgICB9XG59XG5cbkNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUNhbGxiYWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgdGhpcy5wZW5kaW5nQ2FsbGJhY2tzKys7XG4gICAgLy8gb25jZTogZGVmZW5kIGFnYWluc3QgdXNlci1sYW5kIGNhbGxpbmcgJ2RvbmUnIHR3aWNlXG4gICAgcmV0dXJuIG9uY2UoZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlYWR5Q2IoZXJyKTtcbiAgICAgICAgICAgICAgICByb290Q29udGV4dENhY2hlLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICAgICAgaWYgKC0tdGhpcy5wZW5kaW5nQ2FsbGJhY2tzID09PSB0aGlzLnBlbmRpbmdSZWZzQ291bnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nUmVmc0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhbGwgcGVuZGluZyBjYWxsYmFja3MgYXJlIHBlbmRpbmcgcmVmZXJlbmNlIHJlc29sdmVycy4gbm90IGdvb2QuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25SZWFkeUNiKG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVW5yZXNvbHZhYmxlIHJlZmVyZW5jZXMgaW4ganNvbjogXFxcIlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMucGVuZGluZ1JlZnMpLmZpbHRlcihmdW5jdGlvbiAodXVpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdSZWZzW3V1aWRdLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpLmpvaW4oXCJcXFwiLCBcXFwiXCIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxcIlwiXG4gICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICByb290Q29udGV4dENhY2hlLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUmVhZHlDYihudWxsLCB0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RDb250ZXh0Q2FjaGUuZGVsZXRlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSlcbn07XG5cbi8vIGdpdmVuIGFuIG9iamVjdCB3aXRoIHV1aWQsIG1vZGVsU2NoZW1hLCBjYWxsYmFjaywgYXdhaXRzIHVudGlsIHRoZSBnaXZlbiB1dWlkIGlzIGF2YWlsYWJsZVxuLy8gcmVzb2x2ZSBpbW1lZGlhdGVseSBpZiBwb3NzaWJsZVxuQ29udGV4dC5wcm90b3R5cGUuYXdhaXQgPSBmdW5jdGlvbiAobW9kZWxTY2hlbWEsIHV1aWQsIGNhbGxiYWNrKSB7XG4gICAgaW52YXJpYW50KHRoaXMuaXNSb290KTtcbiAgICBpZiAodXVpZCBpbiB0aGlzLnJlc29sdmVkUmVmcykge1xuICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLnJlc29sdmVkUmVmc1t1dWlkXS5maWx0ZXIoZnVuY3Rpb24gKHJlc29sdmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBc3NpZ25hYmxlVG8ocmVzb2x2ZWQubW9kZWxTY2hlbWEsIG1vZGVsU2NoZW1hKVxuICAgICAgICB9KVswXTtcbiAgICAgICAgaWYgKG1hdGNoKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgY2FsbGJhY2sobnVsbCwgbWF0Y2gudmFsdWUpXG4gICAgfVxuICAgIHRoaXMucGVuZGluZ1JlZnNDb3VudCsrO1xuICAgIGlmICghdGhpcy5wZW5kaW5nUmVmc1t1dWlkXSlcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVmc1t1dWlkXSA9IFtdO1xuICAgIHRoaXMucGVuZGluZ1JlZnNbdXVpZF0ucHVzaCh7XG4gICAgICAgIG1vZGVsU2NoZW1hOiBtb2RlbFNjaGVtYSxcbiAgICAgICAgdXVpZDogdXVpZCxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgfSk7XG59O1xuXG4vLyBnaXZlbiBhIG1vZGVsIHNjaGVtYSwgdXVpZCBhbmQgdmFsdWUsIHJlc29sdmUgYWxsIHJlZmVyZW5jZXMgdGhhdCB3aGVyZSBsb29raW5nIGZvciB0aGlzIG9iamVjdFxuQ29udGV4dC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChtb2RlbFNjaGVtYSwgdXVpZCwgdmFsdWUpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5pc1Jvb3QpO1xuICAgIGlmICghdGhpcy5yZXNvbHZlZFJlZnNbdXVpZF0pXG4gICAgICAgIHRoaXMucmVzb2x2ZWRSZWZzW3V1aWRdID0gW107XG4gICAgdGhpcy5yZXNvbHZlZFJlZnNbdXVpZF0ucHVzaCh7XG4gICAgICAgIG1vZGVsU2NoZW1hOiBtb2RlbFNjaGVtYSwgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gICAgaWYgKHV1aWQgaW4gdGhpcy5wZW5kaW5nUmVmcykge1xuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5wZW5kaW5nUmVmc1t1dWlkXS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIG9wdHMgPSB0aGlzLnBlbmRpbmdSZWZzW3V1aWRdW2ldO1xuICAgICAgICAgICAgaWYgKGlzQXNzaWduYWJsZVRvKG1vZGVsU2NoZW1hLCBvcHRzLm1vZGVsU2NoZW1hKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1JlZnNbdXVpZF0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1JlZnNDb3VudC0tO1xuICAgICAgICAgICAgICAgIG9wdHMuY2FsbGJhY2sobnVsbCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuLy8gc2V0IHRhcmdldCBhbmQgdXBkYXRlIHJvb3QgY29udGV4dCBjYWNoZVxuQ29udGV4dC5wcm90b3R5cGUuc2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGlmICh0aGlzLmlzUm9vdCAmJiB0aGlzLnRhcmdldCkge1xuICAgICAgICByb290Q29udGV4dENhY2hlLmRlbGV0ZSh0aGlzLnRhcmdldCk7XG4gICAgfVxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHJvb3RDb250ZXh0Q2FjaGUuc2V0KHRoaXMudGFyZ2V0LCB0aGlzKTtcbn07XG5cbi8vIGNhbGwgYWxsIHJlbWFpbmluZyByZWZlcmVuY2UgbG9va3VwIGNhbGxiYWNrcyBpbmRpY2F0aW5nIGFuIGVycm9yIGR1cmluZyByZWYgcmVzb2x1dGlvblxuQ29udGV4dC5wcm90b3R5cGUuY2FuY2VsQXdhaXRzID0gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudCh0aGlzLmlzUm9vdCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIE9iamVjdC5rZXlzKHRoaXMucGVuZGluZ1JlZnMpLmZvckVhY2goZnVuY3Rpb24gKHV1aWQpIHtcbiAgICAgICAgc2VsZi5wZW5kaW5nUmVmc1t1dWlkXS5mb3JFYWNoKGZ1bmN0aW9uIChyZWZPcHRzKSB7XG4gICAgICAgICAgICBzZWxmLnBlbmRpbmdSZWZzQ291bnQtLTtcbiAgICAgICAgICAgIHJlZk9wdHMuY2FsbGJhY2sobmV3IEVycm9yKFwiUmVmZXJlbmNlIHJlc29sdXRpb24gY2FuY2VsZWQgZm9yIFwiICsgdXVpZCkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLnBlbmRpbmdSZWZzID0ge307XG4gICAgdGhpcy5wZW5kaW5nUmVmc0NvdW50ID0gMDtcbn07XG5cbmZ1bmN0aW9uIGdldFRhcmdldENvbnRleHQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHJvb3RDb250ZXh0Q2FjaGUuZ2V0KHRhcmdldClcbn1cblxuLypcbiAqIERlc2VyaWFsaXphdGlvblxuICovXG5cbmZ1bmN0aW9uIHNjaGVtYUhhc0FsaWFzKHNjaGVtYSwgbmFtZSkge1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEucHJvcHMpXG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLnByb3BzW2tleV0gPT09IFwib2JqZWN0XCIgJiYgc2NoZW1hLnByb3BzW2tleV0uanNvbm5hbWUgPT09IG5hbWUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVN0YXJQcm9wcyhjb250ZXh0LCBzY2hlbWEsIHByb3BEZWYsIG9iaiwganNvbikge1xuICAgIGNoZWNrU3RhclNjaGVtYUludmFyaWFudChwcm9wRGVmKTtcbiAgICBmb3IgKHZhciBrZXkgaW4ganNvbikgaWYgKCEoa2V5IGluIHNjaGVtYS5wcm9wcykgJiYgIXNjaGVtYUhhc0FsaWFzKHNjaGVtYSwga2V5KSkge1xuICAgICAgICB2YXIganNvblZhbHVlID0ganNvbltrZXldO1xuICAgICAgICBpZiAocHJvcERlZiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gd2hlbiBkZXNlcmlhbGl6aW5nIHdlIGRvbid0IHdhbnQgdG8gc2lsZW50bHkgaWdub3JlICd1bnBhcnNlYWJsZSBkYXRhJyB0byBhdm9pZFxuICAgICAgICAgICAgLy8gY29uZnVzaW5nIGJ1Z3NcbiAgICAgICAgICAgIGludmFyaWFudChpc1ByaW1pdGl2ZShqc29uVmFsdWUpLFxuICAgICAgICAgICAgICAgIFwiZW5jb3VudGVyZWQgbm9uIHByaW1pdGl2ZSB2YWx1ZSB3aGlsZSBkZXNlcmlhbGl6aW5nICcqJyBwcm9wZXJ0aWVzIGluIHByb3BlcnR5ICdcIiArXG4gICAgICAgICAgICAgICAga2V5ICsgXCInOiBcIiArIGpzb25WYWx1ZSk7XG4gICAgICAgICAgICBvYmpba2V5XSA9IGpzb25WYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wRGVmLnBhdHRlcm4udGVzdChrZXkpKSB7XG4gICAgICAgICAgICBpZiAocHJvcERlZi5mYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdFZhbHVlID0gZGVzZXJpYWxpemVPYmplY3RXaXRoU2NoZW1hKGNvbnRleHQsIHByb3BEZWYsIGpzb25WYWx1ZSwgY29udGV4dC5jYWxsYmFjayB8fCBHVUFSREVEX05PT1AsIHt9KTtcbiAgICAgICAgICAgICAgICAvLyBkZXNlcmlhbGl6ZU9iamVjdFdpdGhTY2hlbWEgcmV0dXJucyB1bmRlZmluZWQgb24gZXJyb3JcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHJlc3VsdFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0VmFsdWUocmVzdWx0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFZhbHVlICE9PSBTS0lQKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHJlc3VsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb3BEZWYuZGVzZXJpYWxpemVyKGpzb25WYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGluZGl2aWR1YWwgcHJvcHMsIHVzZSByb290IGNvbnRleHQgYmFzZWQgY2FsbGJhY2tzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIHByb3BzIHRvIGNvbXBsZXRlIGFmdGVyIGNvbXBsZXRpbmcgdGhlIG9iamVjdCBpdHNlbGZcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxpbmcgcmVmZXJlbmNlIHJlc29sdmluZyBhbmQgc3VjaFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJvb3RDb250ZXh0LmNyZWF0ZUNhbGxiYWNrKHNldFZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGEganNvbiBzdHJ1Y3R1cmUgaW50byBhbiBvYmplY3QgZ3JhcGguXG4gKlxuICogVGhpcyBwcm9jZXNzIG1pZ2h0IGJlIGFzeW5jaHJvbm91cyAoZm9yIGV4YW1wbGUgaWYgdGhlcmUgYXJlIHJlZmVyZW5jZXMgd2l0aCBhbiBhc3luY2hyb25vdXNcbiAqIGxvb2t1cCBmdW5jdGlvbikuIFRoZSBmdW5jdGlvbiByZXR1cm5zIGFuIG9iamVjdCAob3IgYXJyYXkgb2Ygb2JqZWN0cyksIGJ1dCB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gKiBtaWdodCBiZSBpbmNvbXBsZXRlIHVudGlsIHRoZSBjYWxsYmFjayBoYXMgZmlyZWQgYXMgd2VsbCAod2hpY2ggbWlnaHQgaGFwcGVuIGltbWVkaWF0ZWx5KVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSBzY2hlbWEgdG8gdXNlIGZvciBkZXNlcmlhbGl6YXRpb25cbiAqIEBwYXJhbSB7anNvbn0ganNvbiBkYXRhIHRvIGRlc2VyaWFsaXplXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBub2RlIHN0eWxlIGNhbGxiYWNrIHRoYXQgaXMgaW52b2tlZCBvbmNlIHRoZSBkZXNlcmlhbGl6YXRpb24gaGFzXG4gKiAgIGZpbmlzaGVkLiBGaXJzdCBhcmd1bWVudCBpcyB0aGUgb3B0aW9uYWwgZXJyb3IsIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgZGVzZXJpYWxpemVkIG9iamVjdFxuICogICAoc2FtZSBhcyB0aGUgcmV0dXJuIHZhbHVlKVxuICogQHBhcmFtIHsqfSBjdXN0b21BcmdzIGN1c3RvbSBhcmd1bWVudHMgdGhhdCBhcmUgYXZhaWxhYmxlIGFzIGBjb250ZXh0LmFyZ3NgIGR1cmluZyB0aGVcbiAqICAgZGVzZXJpYWxpemF0aW9uIHByb2Nlc3MuIFRoaXMgY2FuIGJlIHVzZWQgYXMgZGVwZW5kZW5jeSBpbmplY3Rpb24gbWVjaGFuaXNtIHRvIHBhc3MgaW4sIGZvclxuICogICBleGFtcGxlLCBzdG9yZXMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fGFycmF5fSBkZXNlcmlhbGl6ZWQgb2JqZWN0LCBwb3NzaWJseSBpbmNvbXBsZXRlLlxuICovXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZShzY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKSB7XG4gICAgaW52YXJpYW50KGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgXCJkZXNlcmlhbGl6ZSBleHBlY3RzIGF0IGxlYXN0IDIgYXJndW1lbnRzXCIpO1xuICAgIHNjaGVtYSA9IGdldERlZmF1bHRNb2RlbFNjaGVtYShzY2hlbWEpO1xuICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKHNjaGVtYSksIFwiZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIG1vZGVsIHNjaGVtYVwiKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uKSkge1xuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgcGFyYWxsZWwoXG4gICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGNoaWxkSnNvbiwgaXRlbURvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBkZXNlcmlhbGl6ZU9iamVjdFdpdGhTY2hlbWEobnVsbCwgc2NoZW1hLCBjaGlsZEpzb24sIGl0ZW1Eb25lLCBjdXN0b21BcmdzKTtcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZSBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgc28gY2FuIGJlIHB1c2hlZFxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrIHx8IEdVQVJERURfTk9PUFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gaXRlbXNcbiAgICB9IGVsc2VcbiAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplT2JqZWN0V2l0aFNjaGVtYShudWxsLCBzY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKVxufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZU9iamVjdFdpdGhTY2hlbWEocGFyZW50Q29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKSB7XG4gICAgaWYgKGpzb24gPT09IG51bGwgfHwganNvbiA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBqc29uICE9PSBcIm9iamVjdFwiKVxuICAgICAgICByZXR1cm4gdm9pZCBjYWxsYmFjayhudWxsLCBudWxsKVxuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQocGFyZW50Q29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKTtcbiAgICB2YXIgdGFyZ2V0ID0gbW9kZWxTY2hlbWEuZmFjdG9yeShjb250ZXh0KTtcbiAgICAvLyB0b2RvIGFzeW5jIGludmFyaWFudFxuICAgIGludmFyaWFudCghIXRhcmdldCwgXCJObyBvYmplY3QgcmV0dXJuZWQgZnJvbSBmYWN0b3J5XCIpO1xuICAgIC8vIFRPRE86IG1ha2UgaW52YXJpYW50PyAgICAgICAgICAgIGludmFyaWFudChzY2hlbWEuZXh0ZW5kcyB8fFxuICAgIC8vICF0YXJnZXQuY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLnNlcmlhbGl6ZUluZm8sIFwib2JqZWN0IGhhcyBhIHNlcmlhbGl6YWJsZVxuICAgIC8vIHN1cGVydHlwZSwgYnV0IG1vZGVsc2NoZW1hIGRpZCBub3QgcHJvdmlkZSBleHRlbmRzIGNsYXVzZVwiKVxuICAgIGNvbnRleHQuc2V0VGFyZ2V0KHRhcmdldCk7XG4gICAgdmFyIGxvY2sgPSBjb250ZXh0LmNyZWF0ZUNhbGxiYWNrKEdVQVJERURfTk9PUCk7XG4gICAgZGVzZXJpYWxpemVQcm9wc1dpdGhTY2hlbWEoY29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIHRhcmdldCk7XG4gICAgbG9jaygpO1xuICAgIHJldHVybiB0YXJnZXRcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVQcm9wc1dpdGhTY2hlbWEoY29udGV4dCwgbW9kZWxTY2hlbWEsIGpzb24sIHRhcmdldCkge1xuICAgIGlmIChtb2RlbFNjaGVtYS5leHRlbmRzKVxuICAgICAgICBkZXNlcmlhbGl6ZVByb3BzV2l0aFNjaGVtYShjb250ZXh0LCBtb2RlbFNjaGVtYS5leHRlbmRzLCBqc29uLCB0YXJnZXQpO1xuXG4gICAgZnVuY3Rpb24gZGVzZXJpYWxpemVQcm9wKHByb3BEZWYsIGpzb25WYWx1ZSwgcHJvcE5hbWUpIHtcblxuICAgICAgICBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBTS0lQKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcHJlUHJvY2VzcyhyZXN1bHRDYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlcnIsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmluYWxDYWxsYmFjayhlcnJQcmVsaW1pbmFyeSwgZmluYWxPclJldHJ5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyclByZWxpbWluYXJ5ICYmIGZpbmFsT3JSZXRyeVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBwcm9wRGVmLmFmdGVyRGVzZXJpYWxpemUgPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wRGVmLmRlc2VyaWFsaXplcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbE9yUmV0cnlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVQcm9jZXNzKHJlc3VsdENhbGxiYWNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wTmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayhlcnJQcmVsaW1pbmFyeSwgZmluYWxPclJldHJ5VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb25BZnRlckRlc2VyaWFsaXplKGZpbmFsQ2FsbGJhY2ssIGVyciwgbmV3VmFsdWUsIGpzb25WYWx1ZSwganNvbixcbiAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWUsIGNvbnRleHQsIHByb3BEZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvcERlZi5kZXNlcmlhbGl6ZXIoXG4gICAgICAgICAgICBqc29uVmFsdWUsXG4gICAgICAgICAgICAvLyBmb3IgaW5kaXZpZHVhbCBwcm9wcywgdXNlIHJvb3QgY29udGV4dCBiYXNlZCBjYWxsYmFja3NcbiAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIHByb3BzIHRvIGNvbXBsZXRlIGFmdGVyIGNvbXBsZXRpbmcgdGhlIG9iamVjdCBpdHNlbGZcbiAgICAgICAgICAgIC8vIGVuYWJsaW5nIHJlZmVyZW5jZSByZXNvbHZpbmcgYW5kIHN1Y2hcbiAgICAgICAgICAgIHByZVByb2Nlc3MoY29udGV4dC5yb290Q29udGV4dC5jcmVhdGVDYWxsYmFjayhzZXRWYWx1ZSkpLFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIHRhcmdldFtwcm9wTmFtZV0gLy8gaW5pdGlhbCB2YWx1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKG1vZGVsU2NoZW1hLnByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgICB2YXIgcHJvcERlZiA9IG1vZGVsU2NoZW1hLnByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgICBmdW5jdGlvbiBjYWxsYmFja0Rlc2VyaWFsaXplKGVyciwganNvblZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWVyciAmJiBqc29uVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlc2VyaWFsaXplUHJvcChwcm9wRGVmLCBqc29uVmFsdWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcE5hbWUgPT09IFwiKlwiKSB7XG4gICAgICAgICAgICBkZXNlcmlhbGl6ZVN0YXJQcm9wcyhjb250ZXh0LCBtb2RlbFNjaGVtYSwgcHJvcERlZiwgdGFyZ2V0LCBqc29uKTtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wRGVmID09PSB0cnVlKVxuICAgICAgICAgICAgcHJvcERlZiA9IF9kZWZhdWx0UHJpbWl0aXZlUHJvcDtcbiAgICAgICAgaWYgKHByb3BEZWYgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIHZhciBqc29uQXR0ciA9IHByb3BEZWYuanNvbm5hbWUgfHwgcHJvcE5hbWU7XG4gICAgICAgIHZhciBqc29uVmFsdWUgPSBqc29uW2pzb25BdHRyXTtcbiAgICAgICAgb25CZWZvcmVEZXNlcmlhbGl6ZShjYWxsYmFja0Rlc2VyaWFsaXplLCBqc29uVmFsdWUsIGpzb24sIGpzb25BdHRyLCBjb250ZXh0LCBwcm9wRGVmKTtcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBvbkJlZm9yZURlc2VyaWFsaXplKFxuICAgIGNhbGxiYWNrLCBqc29uVmFsdWUsIGpzb25QYXJlbnRWYWx1ZSwgcHJvcE5hbWVPckluZGV4LCBjb250ZXh0LCBwcm9wRGVmKSB7XG5cbiAgICBpZiAocHJvcERlZiAmJiB0eXBlb2YgcHJvcERlZi5iZWZvcmVEZXNlcmlhbGl6ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHByb3BEZWYuYmVmb3JlRGVzZXJpYWxpemUoY2FsbGJhY2ssIGpzb25WYWx1ZSwganNvblBhcmVudFZhbHVlLCBwcm9wTmFtZU9ySW5kZXgsIGNvbnRleHQsXG4gICAgICAgICAgICBwcm9wRGVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBqc29uVmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25BZnRlckRlc2VyaWFsaXplKFxuICAgIGNhbGxiYWNrLCBlcnIsIG5ld1ZhbHVlLCBqc29uVmFsdWUsIGpzb25QYXJlbnRWYWx1ZSwgcHJvcE5hbWVPckluZGV4LCBjb250ZXh0LCBwcm9wRGVmKSB7XG5cbiAgICBpZiAocHJvcERlZiAmJiB0eXBlb2YgcHJvcERlZi5hZnRlckRlc2VyaWFsaXplID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcHJvcERlZi5hZnRlckRlc2VyaWFsaXplKGNhbGxiYWNrLCBlcnIsIG5ld1ZhbHVlLCBqc29uVmFsdWUsIGpzb25QYXJlbnRWYWx1ZSxcbiAgICAgICAgICAgIHByb3BOYW1lT3JJbmRleCwgY29udGV4dCwgcHJvcERlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBuZXdWYWx1ZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIGBvYmplY3RgIGluZGljYXRlcyB0aGF0IHRoaXMgcHJvcGVydHkgY29udGFpbnMgYW4gb2JqZWN0IHRoYXQgbmVlZHMgdG8gYmUgKGRlKXNlcmlhbGl6ZWRcbiAqIHVzaW5nIGl0cyBvd24gbW9kZWwgc2NoZW1hLlxuICpcbiAqIE4uQi4gbWluZCBpc3N1ZXMgd2l0aCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgd2hlbiBpbXBvcnRpbmcgbW9kZWwgc2NoZW1hJ3MgZnJvbSBvdGhlciBmaWxlcyEgVGhlIG1vZHVsZSByZXNvbHZlIGFsZ29yaXRobSBtaWdodCBleHBvc2UgY2xhc3NlcyBiZWZvcmUgYGNyZWF0ZU1vZGVsU2NoZW1hYCBpcyBleGVjdXRlZCBmb3IgdGhlIHRhcmdldCBjbGFzcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgU3ViVGFzayB7fVxuICogY2xhc3MgVG9kbyB7fVxuICpcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKFN1YlRhc2ssIHtcbiAqICAgICB0aXRsZTogdHJ1ZSxcbiAqIH0pO1xuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiB0cnVlLFxuICogICAgIHN1YlRhc2s6IG9iamVjdChTdWJUYXNrKSxcbiAqIH0pO1xuICpcbiAqIGNvbnN0IHRvZG8gPSBkZXNlcmlhbGl6ZShUb2RvLCB7XG4gKiAgICAgdGl0bGU6ICdUYXNrJyxcbiAqICAgICBzdWJUYXNrOiB7XG4gKiAgICAgICAgIHRpdGxlOiAnU3ViIHRhc2snLFxuICogICAgIH0sXG4gKiB9KTtcbiAqXG4gKiBAcGFyYW0ge01vZGVsU2NoZW1hfSBtb2RlbFNjaGVtYSB0byBiZSB1c2VkIHRvIChkZSlzZXJpYWxpemUgdGhlIG9iamVjdFxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFkZGl0aW9uYWxBcmdzIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zIGJlZm9yZURlc2VyaWFsaXplIGFuZC9vciBhZnRlckRlc2VyaWFsaXplIGhhbmRsZXJzXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gb2JqZWN0KG1vZGVsU2NoZW1hLCBhZGRpdGlvbmFsQXJncykge1xuICAgIGludmFyaWFudCh0eXBlb2YgbW9kZWxTY2hlbWEgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG1vZGVsU2NoZW1hID09PSBcImZ1bmN0aW9uXCIsIFwiTm8gbW9kZWxzY2hlbWEgcHJvdmlkZWQuIElmIHlvdSBhcmUgaW1wb3J0aW5nIGl0IGZyb20gYW5vdGhlciBmaWxlIGJlIGF3YXJlIG9mIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cIik7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSwgXCJleHBlY3RlZCBtb2RlbFNjaGVtYSwgZ290IFwiICsgbW9kZWxTY2hlbWEpO1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IG51bGwgfHwgaXRlbSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtXG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKG1vZGVsU2NoZW1hLCBpdGVtKVxuICAgICAgICB9LFxuICAgICAgICBkZXNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChjaGlsZEpzb24sIGRvbmUsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSwgXCJleHBlY3RlZCBtb2RlbFNjaGVtYSwgZ290IFwiICsgbW9kZWxTY2hlbWEpO1xuICAgICAgICAgICAgaWYgKGNoaWxkSnNvbiA9PT0gbnVsbCB8fCBjaGlsZEpzb24gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKG51bGwsIGNoaWxkSnNvbilcbiAgICAgICAgICAgIHJldHVybiB2b2lkIGRlc2VyaWFsaXplT2JqZWN0V2l0aFNjaGVtYShjb250ZXh0LCBtb2RlbFNjaGVtYSwgY2hpbGRKc29uLCBkb25lLCBhZGRpdGlvbmFsQXJncylcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzdWx0ID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXN1bHQsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogVGhlIGBzZXJpYWxpemVBbGxgIGRlY29yYXRvciBjYW4gbWF5IHVzZWQgb24gYSBjbGFzcyB0byBzaWduYWwgdGhhdCBhbGwgcHJpbWl0aXZlIHByb3BlcnRpZXMsXG4gKiBvciBjb21wbGV4IHByb3BlcnRpZXMgd2l0aCBhIG5hbWUgbWF0Y2hpbmcgYSBgcGF0dGVybmAsIHNob3VsZCBiZSBzZXJpYWxpemVkIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEBzZXJpYWxpemVBbGwgY2xhc3MgU3RvcmUge1xuICogICAgIGEgPSAzO1xuICogICAgIGI7XG4gKiB9XG4gKlxuICogY29uc3Qgc3RvcmUgPSBuZXcgU3RvcmUoKTtcbiAqIHN0b3JlLmMgPSA1O1xuICogc3RvcmUuZCA9IHt9O1xuICogdC5kZWVwRXF1YWwoc2VyaWFsaXplKHN0b3JlKSwgeyBjOiA1IH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKiBjbGFzcyBEYXRhVHlwZSB7XG4gKiAgICAgQHNlcmlhbGl6YWJsZVxuICogICAgIHg7XG4gKiAgICAgQHNlcmlhbGl6YWJsZVxuICogICAgIHk7XG4gKiB9XG4gKiBAc2VyaWFsaXplQWxsKC9eW2Etel0kLywgRGF0YVR5cGUpIGNsYXNzIENvbXBsZXhTdG9yZSB7XG4gKiB9XG4gKlxuICogY29uc3Qgc3RvcmUgPSBuZXcgQ29tcGxleFN0b3JlKCk7XG4gKiBzdG9yZS5hID0ge3g6IDEsIHk6IDJ9O1xuICogc3RvcmUuYiA9IHt9O1xuICogc3RvcmUuc29tZXRoaW5nRWxzZSA9IDU7XG4gKiB0LmRlZXBFcXVhbChzZXJpYWxpemUoc3RvcmUpLCB7IGE6IHt4OiAxLCB5OiAyfSwgYjogeyB4OiB1bmRlZmluZWQsIHk6IHVuZGVmaW5lZCB9IH0pO1xuICovXG5mdW5jdGlvbiBzZXJpYWxpemVBbGwodGFyZ2V0T3JQYXR0ZXJuLCBjbGF6ek9yU2NoZW1hKSB7XG4gICAgbGV0IHByb3BTY2hlbWE7XG4gICAgbGV0IGludm9rZUltbWVkaWF0ZWx5ID0gZmFsc2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXRPclBhdHRlcm4gPT09IFwiZnVuY3Rpb25cIiwgXCJAc2VyaWFsaXplQWxsIGNhbiBvbmx5IGJlIHVzZWQgYXMgY2xhc3MgZGVjb3JhdG9yXCIpO1xuICAgICAgICBwcm9wU2NoZW1hID0gdHJ1ZTtcbiAgICAgICAgaW52b2tlSW1tZWRpYXRlbHkgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXRPclBhdHRlcm4gPT09IFwib2JqZWN0XCIgJiYgdGFyZ2V0T3JQYXR0ZXJuLnRlc3QsIFwiQHNlcmlhbGl6ZUFsbCBwYXR0ZXJuIGRvZXNuJ3QgaGF2ZSB0ZXN0XCIpO1xuICAgICAgICBpZiAodHlwZW9mIGNsYXp6T3JTY2hlbWEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2xhenpPclNjaGVtYSA9IG9iamVjdChjbGF6ek9yU2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGNsYXp6T3JTY2hlbWEgPT09IFwib2JqZWN0XCIgJiYgY2xhenpPclNjaGVtYS5zZXJpYWxpemVyLCBcImNvdWxkbid0IHJlc29sdmUgc2NoZW1hXCIpO1xuICAgICAgICBwcm9wU2NoZW1hID0gT2JqZWN0LmFzc2lnbih7fSwgY2xhenpPclNjaGVtYSwge3BhdHRlcm46IHRhcmdldE9yUGF0dGVybn0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXN1bHQodGFyZ2V0KSB7XG4gICAgICAgIHZhciBpbmZvID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCk7XG4gICAgICAgIGlmICghaW5mbyB8fCAhdGFyZ2V0Lmhhc093blByb3BlcnR5KFwic2VyaWFsaXplSW5mb1wiKSkge1xuICAgICAgICAgICAgaW5mbyA9IGNyZWF0ZU1vZGVsU2NoZW1hKHRhcmdldCwge30pO1xuICAgICAgICAgICAgc2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCwgaW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCkucHJvcHNbXCIqXCJdID0gcHJvcFNjaGVtYTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgaWYgKGludm9rZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQodGFyZ2V0T3JQYXR0ZXJuKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLypcbiAqIERlc2VyaWFsaXphdGlvblxuICovXG5cblxuLyoqXG4gKiBDYW5jZWxzIGFuIGFzeW5jaHJvbm91cyBkZXNlcmlhbGl6YXRpb24gb3IgdXBkYXRlIG9wZXJhdGlvbiBmb3IgdGhlIHNwZWNpZmllZCB0YXJnZXQgb2JqZWN0LlxuICogQHBhcmFtIGluc3RhbmNlIG9iamVjdCB0aGF0IHdhcyBwcmV2aW91c2x5IHJldHVybmVkIGZyb20gZGVzZXJpYWxpemUgb3IgdXBkYXRlIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjYW5jZWxEZXNlcmlhbGl6ZShpbnN0YW5jZSkge1xuICAgIGludmFyaWFudCh0eXBlb2YgaW5zdGFuY2UgPT09IFwib2JqZWN0XCIgJiYgaW5zdGFuY2UgJiYgIUFycmF5LmlzQXJyYXkoaW5zdGFuY2UpLCBcImNhbmNlbERlc2VyaWFsaXplIG5lZWRzIGFuIG9iamVjdFwiKTtcbiAgICB2YXIgY29udGV4dCA9IGdldFRhcmdldENvbnRleHQoaW5zdGFuY2UpO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuY2FuY2VsQXdhaXRzKCk7XG4gICAgfVxufVxuXG4vKlxuICogVXBkYXRlXG4gKi9cblxuLyoqXG4gKiBTaW1pbGFyIHRvIGRlc2VyaWFsaXplLCBidXQgdXBkYXRlcyBhbiBleGlzdGluZyBvYmplY3QgaW5zdGFuY2UuXG4gKiBQcm9wZXJ0aWVzIHdpbGwgYWx3YXlzIHVwZGF0ZWQgZW50aXJlbHksIGJ1dCBwcm9wZXJ0aWVzIG5vdCBwcmVzZW50IGluIHRoZSBqc29uIHdpbGwgYmUga2VwdCBhcyBpcy5cbiAqIEZ1cnRoZXIgdGhpcyBtZXRob2QgYmVoYXZlcyBzaW1pbGFyIHRvIGRlc2VyaWFsaXplLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBtb2RlbFNjaGVtYSwgb3B0aW9uYWwgaWYgaXQgY2FuIGJlIGluZmVycmVkIGZyb20gdGhlIGluc3RhbmNlIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXQgdGFyZ2V0IGluc3RhbmNlIHRvIHVwZGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGpzb24gdGhlIGpzb24gdG8gZGVzZXJpYWxpemVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIHRoZSBjYWxsYmFjayB0byBpbnZva2Ugb25jZSBkZXNlcmlhbGl6YXRpb24gaGFzIGNvbXBsZXRlZC5cbiAqIEBwYXJhbSB7Kn0gY3VzdG9tQXJncyBjdXN0b20gYXJndW1lbnRzIHRoYXQgYXJlIGF2YWlsYWJsZSBhcyBgY29udGV4dC5hcmdzYCBkdXJpbmcgdGhlIGRlc2VyaWFsaXphdGlvbiBwcm9jZXNzLiBUaGlzIGNhbiBiZSB1c2VkIGFzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIG1lY2hhbmlzbSB0byBwYXNzIGluLCBmb3IgZXhhbXBsZSwgc3RvcmVzLlxuICogQHJldHVybnMge29iamVjdHxhcnJheX0gZGVzZXJpYWxpemVkIG9iamVjdCwgcG9zc2libHkgaW5jb21wbGV0ZS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlKG1vZGVsU2NoZW1hLCB0YXJnZXQsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKSB7XG4gICAgdmFyIGluZmVyTW9kZWxTY2hlbWEgPVxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAyIC8vIG9ubHkgdGFyZ2V0IGFuZCBqc29uXG4gICAgICAgIHx8IHR5cGVvZiBhcmd1bWVudHNbMl0gPT09IFwiZnVuY3Rpb25cIjsgLy8gY2FsbGJhY2sgYXMgdGhpcmQgYXJnXG5cbiAgICBpZiAoaW5mZXJNb2RlbFNjaGVtYSkge1xuICAgICAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKHRhcmdldCk7XG4gICAgICAgIGpzb24gPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGNhbGxiYWNrID0gYXJndW1lbnRzWzJdO1xuICAgICAgICBjdXN0b21BcmdzID0gYXJndW1lbnRzWzNdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsU2NoZW1hID0gZ2V0RGVmYXVsdE1vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKTtcbiAgICB9XG4gICAgaW52YXJpYW50KGlzTW9kZWxTY2hlbWEobW9kZWxTY2hlbWEpLCBcInVwZGF0ZSBmYWlsZWQgdG8gZGV0ZXJtaW5lIHNjaGVtYVwiKTtcbiAgICBpbnZhcmlhbnQodHlwZW9mIHRhcmdldCA9PT0gXCJvYmplY3RcIiAmJiB0YXJnZXQgJiYgIUFycmF5LmlzQXJyYXkodGFyZ2V0KSwgXCJ1cGRhdGUgbmVlZHMgYW4gb2JqZWN0XCIpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQobnVsbCwgbW9kZWxTY2hlbWEsIGpzb24sIGNhbGxiYWNrLCBjdXN0b21BcmdzKTtcbiAgICBjb250ZXh0LnNldFRhcmdldCh0YXJnZXQpO1xuICAgIHZhciBsb2NrID0gY29udGV4dC5jcmVhdGVDYWxsYmFjayhHVUFSREVEX05PT1ApO1xuICAgIHZhciByZXN1bHQgPSBkZXNlcmlhbGl6ZVByb3BzV2l0aFNjaGVtYShjb250ZXh0LCBtb2RlbFNjaGVtYSwganNvbiwgdGFyZ2V0KTtcbiAgICBsb2NrKCk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UmVnaXN0ZXJGdW5jdGlvbihpZCwgdmFsdWUsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0LnJvb3RDb250ZXh0LnJlc29sdmUoY29udGV4dC5tb2RlbFNjaGVtYSwgaWQsIGNvbnRleHQudGFyZ2V0KTtcbn1cblxuLyoqXG4gKlxuICpcbiAqIFNpbWlsYXIgdG8gcHJpbWl0aXZlLCBidXQgdGhpcyBmaWVsZCB3aWxsIGJlIG1hcmtlZCBhcyB0aGUgaWRlbnRpZmllciBmb3IgdGhlIGdpdmVuIE1vZGVsIHR5cGUuXG4gKiBUaGlzIGlzIHVzZWQgYnkgZm9yIGV4YW1wbGUgYHJlZmVyZW5jZSgpYCB0byBzZXJpYWxpemUgdGhlIHJlZmVyZW5jZVxuICpcbiAqIElkZW50aWZpZXIgYWNjZXB0cyBhbiBvcHRpb25hbCBgcmVnaXN0ZXJGbmAgd2l0aCB0aGUgc2lnbmF0dXJlOlxuICogYChpZCwgdGFyZ2V0LCBjb250ZXh0KSA9PiB2b2lkYFxuICogdGhhdCBjYW4gYmUgdXNlZCB0byByZWdpc3RlciB0aGlzIG9iamVjdCBpbiBzb21lIHN0b3JlLiBub3RlIHRoYXQgbm90IGFsbCBmaWVsZHMgb2YgdGhpcyBvYmplY3QgbWlnaHRcbiAqIGhhdmUgYmVlbiBkZXNlcmlhbGl6ZWQgeWV0LlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgdG9kb3MgPSB7fTtcbiAqXG4gKiB2YXIgcyA9IF8uY3JlYXRlU2ltcGxlU2NoZW1hKHtcbiAqICAgICBpZDogXy5pZGVudGlmaWVyKChpZCwgb2JqZWN0KSA9PiAodG9kb3NbaWRdID0gb2JqZWN0KSksXG4gKiAgICAgdGl0bGU6IHRydWUsXG4gKiB9KTtcbiAqXG4gKiBfLmRlc2VyaWFsaXplKHMsIHtcbiAqICAgICBpZDogMSxcbiAqICAgICB0aXRsZTogJ3Rlc3QwJyxcbiAqIH0pO1xuICogXy5kZXNlcmlhbGl6ZShzLCBbeyBpZDogMiwgdGl0bGU6ICd0ZXN0MicgfSwgeyBpZDogMSwgdGl0bGU6ICd0ZXN0MScgfV0pO1xuICpcbiAqIHQuZGVlcEVxdWFsKHRvZG9zLCB7XG4gKiAgICAgMTogeyBpZDogMSwgdGl0bGU6ICd0ZXN0MScgfSxcbiAqICAgICAyOiB7IGlkOiAyLCB0aXRsZTogJ3Rlc3QyJyB9LFxuICogfSk7XG4gKlxuICogQHBhcmFtIHsgUmVnaXN0ZXJGdW5jdGlvbiB8IEFkZGl0aW9uYWxQcm9wQXJncyB9IGFyZzEgb3B0aW9uYWwgcmVnaXN0ZXJGbjogZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBvYmplY3QgZHVyaW5nIGNyZWF0aW9uLlxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFyZzIgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gaWRlbnRpZmllcihhcmcxLCBhcmcyKSB7XG4gICAgdmFyIHJlZ2lzdGVyRm4sIGFkZGl0aW9uYWxBcmdzO1xuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJlZ2lzdGVyRm4gPSBhcmcxO1xuICAgICAgICBhZGRpdGlvbmFsQXJncyA9IGFyZzI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWRkaXRpb25hbEFyZ3MgPSBhcmcxO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWFkZGl0aW9uYWxBcmdzIHx8IHR5cGVvZiBhZGRpdGlvbmFsQXJncyA9PT0gXCJvYmplY3RcIiwgXCJBZGRpdGlvbmFsIHByb3BlcnR5IGFyZ3VtZW50cyBzaG91bGQgYmUgYW4gb2JqZWN0LCByZWdpc3RlciBmdW5jdGlvbiBzaG91bGQgYmUgb21pdHRlZCBvciBhIGZ1bnRpb25cIik7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgaWRlbnRpZmllcjogdHJ1ZSxcbiAgICAgICAgc2VyaWFsaXplcjogX2RlZmF1bHRQcmltaXRpdmVQcm9wLnNlcmlhbGl6ZXIsXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25WYWx1ZSwgZG9uZSwgY29udGV4dCkge1xuICAgICAgICAgICAgX2RlZmF1bHRQcmltaXRpdmVQcm9wLmRlc2VyaWFsaXplcihqc29uVmFsdWUsIGZ1bmN0aW9uKGVyciwgaWQpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0UmVnaXN0ZXJGdW5jdGlvbihpZCwgY29udGV4dC50YXJnZXQsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RlckZuKVxuICAgICAgICAgICAgICAgICAgICByZWdpc3RlckZuKGlkLCBjb250ZXh0LnRhcmdldCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgZG9uZShlcnIsIGlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIHByaW1pdGl2ZSwgc2VyaWFsaXplcyBpbnN0YW5jZXMgb2YgRGF0ZSBvYmplY3RzXG4gKlxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFkZGl0aW9uYWxBcmdzIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zIGJlZm9yZURlc2VyaWFsaXplIGFuZC9vciBhZnRlckRlc2VyaWFsaXplIGhhbmRsZXJzXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gZGF0ZShhZGRpdGlvbmFsQXJncykge1xuICAgIC8vIFRPRE86IGFkZCBmb3JtYXQgb3B0aW9uP1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIGludmFyaWFudCh2YWx1ZSBpbnN0YW5jZW9mIERhdGUsIFwiRXhwZWN0ZWQgRGF0ZSBvYmplY3RcIik7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuZ2V0VGltZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25WYWx1ZSwgZG9uZSkge1xuICAgICAgICAgICAgaWYgKGpzb25WYWx1ZSA9PT0gbnVsbCB8fCBqc29uVmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKG51bGwsIGpzb25WYWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB2b2lkIGRvbmUobnVsbCwgbmV3IERhdGUoanNvblZhbHVlKSlcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzdWx0ID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXN1bHQsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogQWxpYXMgaW5kaWNhdGVzIHRoYXQgdGhpcyBtb2RlbCBwcm9wZXJ0eSBzaG91bGQgYmUgbmFtZWQgZGlmZmVyZW50bHkgaW4gdGhlIGdlbmVyYXRlZCBqc29uLlxuICogQWxpYXMgc2hvdWxkIGJlIHRoZSBvdXRlcm1vc3QgcHJvcHNjaGVtYS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY3JlYXRlTW9kZWxTY2hlbWEoVG9kbywge1xuICogICAgIHRpdGxlOiBhbGlhcygndGFzaycsIHByaW1pdGl2ZSgpKSxcbiAqIH0pO1xuICpcbiAqIGNvbnNvbGUuZGlyKHNlcmlhbGl6ZShuZXcgVG9kbygndGVzdCcpKSk7XG4gKiAvLyB7IHRhc2sgOiBcInRlc3RcIiB9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUganNvbiBmaWVsZCB0byBiZSB1c2VkIGZvciB0aGlzIHByb3BlcnR5XG4gKiBAcGFyYW0ge1Byb3BTY2hlbWF9IHByb3BTY2hlbWEgcHJvcFNjaGVtYSB0byAoZGUpc2VyaWFsaXplIHRoZSBjb250ZW50cyBvZiB0aGlzIGZpZWxkXG4gKiBAcmV0dXJucyB7UHJvcFNjaGVtYX1cbiAqL1xuZnVuY3Rpb24gYWxpYXMobmFtZSwgcHJvcFNjaGVtYSkge1xuICAgIGludmFyaWFudChuYW1lICYmIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiLCBcImV4cGVjdGVkIHByb3AgbmFtZSBhcyBmaXJzdCBhcmd1bWVudFwiKTtcbiAgICBwcm9wU2NoZW1hID0gKCFwcm9wU2NoZW1hIHx8IHByb3BTY2hlbWEgPT09IHRydWUpICA/IF9kZWZhdWx0UHJpbWl0aXZlUHJvcCA6IHByb3BTY2hlbWE7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XG4gICAgaW52YXJpYW50KCFpc0FsaWFzZWRQcm9wU2NoZW1hKHByb3BTY2hlbWEpLCBcInByb3ZpZGVkIHByb3AgaXMgYWxyZWFkeSBhbGlhc2VkXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGpzb25uYW1lOiBuYW1lLFxuICAgICAgICBzZXJpYWxpemVyOiBwcm9wU2NoZW1hLnNlcmlhbGl6ZXIsXG4gICAgICAgIGRlc2VyaWFsaXplcjogcHJvcFNjaGVtYS5kZXNlcmlhbGl6ZXIsXG4gICAgICAgIGlkZW50aWZpZXI6IGlzSWRlbnRpZmllclByb3BTY2hlbWEocHJvcFNjaGVtYSksXG4gICAgICAgIGJlZm9yZURlc2VyaWFsaXplOiBwcm9wU2NoZW1hLmJlZm9yZURlc2VyaWFsaXplLFxuICAgICAgICBhZnRlckRlc2VyaWFsaXplOiBwcm9wU2NoZW1hLmFmdGVyRGVzZXJpYWxpemVcbiAgICB9XG59XG5cbi8qKlxuICogQ2FuIGJlIHVzZWQgdG8gY3JlYXRlIHNpbXBsZSBjdXN0b20gcHJvcFNjaGVtYS4gTXVsdGlwbGUgdGhpbmdzIGNhbiBiZSBkb25lIGluc2lkZSBvZiBhIGN1c3RvbSBwcm9wU2NoZW1hLCBsaWtlIGRlc2VyaWFsaXppbmcgYW5kIHNlcmlhbGl6aW5nIG90aGVyIChwb2x5bW9ycGhpYykgb2JqZWN0cywgc2tpcHBpbmcgdGhlIHNlcmlhbGl6YXRpb24gb2Ygc29tZXRoaW5nIG9yIGNoZWNraW5nIHRoZSBjb250ZXh0IG9mIHRoZSBvYmogYmVpbmcgKGRlKXNlcmlhbGl6ZWQuXG5cbiAqIFRoZSBgY3VzdG9tYCBmdW5jdGlvbiB0YWtlcyB0d28gcGFyYW1ldGVycywgdGhlIGBzZXJpYWxpemVyYCBmdW5jdGlvbiBhbmQgdGhlIGBkZXNlcmlhbGl6ZXJgIGZ1bmN0aW9uLlxuXG4gKiBUaGUgYHNlcmlhbGl6ZXJgIGZ1bmN0aW9uIGhhcyB0aGUgc2lnbmF0dXJlOlxuICogYCh2YWx1ZSwga2V5LCBvYmopID0+IHZvaWRgXG5cbiAqIFdoZW4gc2VyaWFsaXppbmcgdGhlIG9iamVjdCBge2E6IDF9YCB0aGUgYHNlcmlhbGl6ZXJgIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggYHNlcmlhbGl6ZXIoMSwgJ2EnLCB7YTogMX0pYC5cblxuICogVGhlIGBkZXNlcmlhbGl6ZXJgIGZ1bmN0aW9uIGhhcyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZSBmb3Igc3luY2hyb25vdXMgcHJvY2Vzc2luZ1xuICogYCh2YWx1ZSwgY29udGV4dCwgb2xkVmFsdWUpID0+IHZvaWRgXG5cbiAqIEZvciBhc3luY2hyb25vdXMgcHJvY2Vzc2luZyB0aGUgZnVuY3Rpb24gZXhwZWN0cyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZVxuICogYCh2YWx1ZSwgY29udGV4dCwgb2xkVmFsdWUsIGNhbGxiYWNrKSA9PiB2b2lkYFxuXG4gKiBXaGVuIGRlc2VyaWFsaXppbmcgdGhlIG9iamVjdCBge2I6IDJ9YCB0aGUgYGRlc2VyaWFsaXplcmAgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2l0aCBgZGVzZXJpYWxpemVyKDIsIGNvbnRleHRPYmopYCAoW2NvbnRleHRPYmogcmVmZXJlbmNlXShodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL3NlcmlhbGl6ciNkZXNlcmlhbGl6YXRpb24tY29udGV4dCkpLlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgc2NoZW1hRGVmYXVsdCA9IF8uY3JlYXRlU2ltcGxlU2NoZW1hKHtcbiAqICAgICBhOiBfLmN1c3RvbShcbiAqICAgICAgICAgZnVuY3Rpb24odikge1xuICogICAgICAgICAgICAgcmV0dXJuIHYgKyAyO1xuICogICAgICAgICB9LFxuICogICAgICAgICBmdW5jdGlvbih2KSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gdiAtIDI7XG4gKiAgICAgICAgIH1cbiAqICAgICApLFxuICogfSk7XG4gKiB0LmRlZXBFcXVhbChfLnNlcmlhbGl6ZShzY2hlbWFEZWZhdWx0LCB7IGE6IDQgfSksIHsgYTogNiB9KTtcbiAqIHQuZGVlcEVxdWFsKF8uZGVzZXJpYWxpemUoc2NoZW1hRGVmYXVsdCwgeyBhOiA2IH0pLCB7IGE6IDQgfSk7XG4gKlxuICogdmFyIHNjaGVtYVdpdGhBc3luY1Byb3BzID0gXy5jcmVhdGVTaW1wbGVTY2hlbWEoe1xuICogICAgIGE6IF8uY3VzdG9tQXN5bmMoXG4gKiAgICAgICAgIGZ1bmN0aW9uKHYpIHtcbiAqICAgICAgICAgICAgIHJldHVybiB2ICsgMjtcbiAqICAgICAgICAgfSxcbiAqICAgICAgICAgZnVuY3Rpb24odiwgY29udGV4dCwgb2xkVmFsdWUsIGNhbGxiYWNrKSB7XG4gKiAgICAgICAgICAgICBzb21lUHJvbWlzZSh2LCBjb250ZXh0LCBvbGRWYWx1ZSkudGhlbigocmVzdWx0KSA9PiB7XG4gKiAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0IC0gMilcbiAqICAgICAgICAgICAgIH0uY2F0Y2goKGVycikgPT4ge1xuICogICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgfVxuICogICAgICksXG4gKiB9KTtcbiAqIHQuZGVlcEVxdWFsKF8uc2VyaWFsaXplKHNjaGVtYVdpdGhBc3luY1Byb3BzLCB7IGE6IDQgfSksIHsgYTogNiB9KTtcbiAqIF8uZGVzZXJpYWxpemUoc2NoZW1hV2l0aEFzeW5jUHJvcHMsIHsgYTogNiB9LCAoZXJyLCByZXMpID0+IHtcbiAqICAgdC5kZWVwRXF1YWwocmVzLmEsIDQpXG4gKiB9O1xuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2VyaWFsaXplciBmdW5jdGlvbiB0aGF0IHRha2VzIGEgbW9kZWwgdmFsdWUgYW5kIHR1cm5zIGl0IGludG8gYSBqc29uIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkZXNlcmlhbGl6ZXIgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGpzb24gdmFsdWUgYW5kIHR1cm5zIGl0IGludG8gYSBtb2RlbCB2YWx1ZS4gSXQgYWxzbyB0YWtlcyBjb250ZXh0IGFyZ3VtZW50LCB3aGljaCBjYW4gYWxsb3cgeW91IHRvIGRlc2VyaWFsaXplIGJhc2VkIG9uIHRoZSBjb250ZXh0IG9mIG90aGVyIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBjdXN0b20oc2VyaWFsaXplciwgZGVzZXJpYWxpemVyLCBhZGRpdGlvbmFsQXJncykge1xuICAgIGludmFyaWFudCh0eXBlb2Ygc2VyaWFsaXplciA9PT0gXCJmdW5jdGlvblwiLCBcImZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBmdW5jdGlvblwiKTtcbiAgICBpbnZhcmlhbnQoKHR5cGVvZiBkZXNlcmlhbGl6ZXIgPT09IFwiZnVuY3Rpb25cIiksIFwic2Vjb25kIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIG9yIHByb21pc2VcIik7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogc2VyaWFsaXplcixcbiAgICAgICAgZGVzZXJpYWxpemVyOiBmdW5jdGlvbiAoanNvblZhbHVlLCBkb25lLCBjb250ZXh0LCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKGRlc2VyaWFsaXplci5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICBkZXNlcmlhbGl6ZXIoanNvblZhbHVlLCBjb250ZXh0LCBvbGRWYWx1ZSwgZG9uZSwgYWRkaXRpb25hbEFyZ3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKG51bGwsIGRlc2VyaWFsaXplcihqc29uVmFsdWUsIGNvbnRleHQsIG9sZFZhbHVlLCBudWxsLCBhZGRpdGlvbmFsQXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBPcHRpb25hbCBpbmRpY2F0ZXMgdGhhdCB0aGlzIG1vZGVsIHByb3BlcnR5IHNob3VsZG4ndCBiZSBzZXJpYWxpemVkIGlmIGl0IGlzbid0IHByZXNlbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKFRvZG8sIHtcbiAqICAgICB0aXRsZTogb3B0aW9uYWwocHJpbWl0aXZlKCkpLFxuICogfSk7XG4gKlxuICogY29uc29sZS5kaXIoc2VyaWFsaXplKG5ldyBUb2RvKCkpKTtcbiAqIC8vIHt9XG4gKlxuICogQHBhcmFtIHtQcm9wU2NoZW1hfSBwcm9wU2NoZW1hIHByb3BTY2hlbWEgdG8gKGRlKXNlcmlhbGl6ZSB0aGUgY29udGVudHMgb2YgdGhpcyBmaWVsZFxuICogQHJldHVybnMge1Byb3BTY2hlbWF9XG4gKi9cbmZ1bmN0aW9uIG9wdGlvbmFsKG5hbWUsIHByb3BTY2hlbWEpIHtcbiAgICBwcm9wU2NoZW1hID0gKCFwcm9wU2NoZW1hIHx8IHByb3BTY2hlbWEgPT09IHRydWUpICA/IF9kZWZhdWx0UHJpbWl0aXZlUHJvcCA6IHByb3BTY2hlbWE7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XG4gICAgY29uc3QgcHJvcFNlcmlhbGl6ZXIgPSBwcm9wU2NoZW1hLnNlcmlhbGl6ZXI7XG4gICAgaW52YXJpYW50KHR5cGVvZiBwcm9wU2VyaWFsaXplciA9PT0gXCJmdW5jdGlvblwiLCBcImV4cGVjdGVkIHByb3Agc2NoZW1hIHRvIGhhdmUgYSBjYWxsYWJsZSBzZXJpYWxpemVyXCIpO1xuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZXIoLi4uYXJncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBwcm9wU2VyaWFsaXplciguLi5hcmdzKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gU0tJUFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByb3BTY2hlbWEsIHtzZXJpYWxpemVyfSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdFJlZkxvb2t1cChtb2RlbFNjaGVtYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiByZXNvbHZlKHV1aWQsIGNiLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQucm9vdENvbnRleHQuYXdhaXQobW9kZWxTY2hlbWEsIHV1aWQsIGNiKTtcbiAgICB9XG59XG5cbi8qKlxuICogYHJlZmVyZW5jZWAgY2FuIGJlIHVzZWQgdG8gKGRlKXNlcmlhbGl6ZSByZWZlcmVuY2VzIHRoYXQgcG9pbnQgdG8gb3RoZXIgbW9kZWxzLlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgc2hvdWxkIGJlIGVpdGhlciBhIE1vZGVsU2NoZW1hIHRoYXQgaGFzIGFuIGBpZGVudGlmaWVyKClgIHByb3BlcnR5IChzZWUgaWRlbnRpZmllcilcbiAqIG9yIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyB3aGljaCBhdHRyaWJ1dGUgaW4gdGhlIHRhcmdldCBvYmplY3QgcmVwcmVzZW50cyB0aGUgaWRlbnRpZmllciBvZiB0aGUgb2JqZWN0LlxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgbG9va3VwIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBkdXJpbmcgZGVzZXJpYWxpemF0aW9uIHRvIHJlc29sdmUgYW4gaWRlbnRpZmllciB0b1xuICogYW4gb2JqZWN0LiBJdHMgc2lnbmF0dXJlIHNob3VsZCBiZSBhcyBmb2xsb3dzOlxuICpcbiAqIGBsb29rdXBGdW5jdGlvbihpZGVudGlmaWVyLCBjYWxsYmFjaywgY29udGV4dClgIHdoZXJlOlxuICogMS4gYGlkZW50aWZpZXJgIGlzIHRoZSBpZGVudGlmaWVyIGJlaW5nIHJlc29sdmVkXG4gKiAyLiBgY2FsbGJhY2tgIGlzIGEgbm9kZSBzdHlsZSBjYWxibGFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHdpdGggdGhlIGZvdW5kIG9iamVjdCAoYXMgc2Vjb25kIGFyZykgb3IgYW4gZXJyb3IgKGZpcnN0IGFyZylcbiAqIDMuIGBjb250ZXh0YCBzZWUgY29udGV4dC5cbiAqXG4gKiBUaGUgbG9va3VwRnVuY3Rpb24gaXMgb3B0aW9uYWwuIElmIGl0IGlzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCB0cnkgdG8gZmluZCBhbiBvYmplY3Qgb2YgdGhlIGV4cGVjdGVkIHR5cGUgYW5kIHJlcXVpcmVkIGlkZW50aWZpZXIgd2l0aGluIHRoZSBzYW1lIEpTT04gZG9jdW1lbnRcbiAqXG4gKiBOLkIuIG1pbmQgaXNzdWVzIHdpdGggY2lyY3VsYXIgZGVwZW5kZW5jaWVzIHdoZW4gaW1wb3J0aW5nIG1vZGVsIHNjaGVtYXMgZnJvbSBvdGhlciBmaWxlcyEgVGhlIG1vZHVsZSByZXNvbHZlIGFsZ29yaXRobSBtaWdodCBleHBvc2UgY2xhc3NlcyBiZWZvcmUgYGNyZWF0ZU1vZGVsU2NoZW1hYCBpcyBleGVjdXRlZCBmb3IgdGhlIHRhcmdldCBjbGFzcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgVXNlciB7fVxuICogY2xhc3MgUG9zdCB7fVxuICpcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKFVzZXIsIHtcbiAqICAgICB1dWlkOiBpZGVudGlmaWVyKCksXG4gKiAgICAgZGlzcGxheW5hbWU6IHByaW1pdGl2ZSgpLFxuICogfSk7XG4gKlxuICogY3JlYXRlTW9kZWxTY2hlbWEoUG9zdCwge1xuICogICAgIGF1dGhvcjogcmVmZXJlbmNlKFVzZXIsIGZpbmRVc2VyQnlJZCksXG4gKiAgICAgbWVzc2FnZTogcHJpbWl0aXZlKCksXG4gKiB9KTtcbiAqXG4gKiBmdW5jdGlvbiBmaW5kVXNlckJ5SWQodXVpZCwgY2FsbGJhY2spIHtcbiAqICAgICBmZXRjaCgnaHR0cDovL2hvc3QvdXNlci8nICsgdXVpZClcbiAqICAgICAgICAgLnRoZW4odXNlckRhdGEgPT4ge1xuICogICAgICAgICAgICAgZGVzZXJpYWxpemUoVXNlciwgdXNlckRhdGEsIGNhbGxiYWNrKTtcbiAqICAgICAgICAgfSlcbiAqICAgICAgICAgLmNhdGNoKGNhbGxiYWNrKTtcbiAqIH1cbiAqXG4gKiBkZXNlcmlhbGl6ZShcbiAqICAgICBQb3N0LFxuICogICAgIHtcbiAqICAgICAgICAgbWVzc2FnZTogJ0hlbGxvIFdvcmxkJyxcbiAqICAgICAgICAgYXV0aG9yOiAyMzQsXG4gKiAgICAgfSxcbiAqICAgICAoZXJyLCBwb3N0KSA9PiB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKHBvc3QpO1xuICogICAgIH1cbiAqICk7XG4gKlxuICogQHBhcmFtIHRhcmdldDogTW9kZWxTY2hlbWEgb3Igc3RyaW5nXG4gKiBAcGFyYW0ge1JlZkxvb2t1cEZ1bmN0aW9uIHwgQWRkaXRpb25hbFByb3BBcmdzfSBsb29rdXBGbiBvcHRpb25hbCBmdW5jdGlvbiBvciBhZGRpdGlvbmFsQXJncyBvYmplY3RcbiAqIEBwYXJhbSB7QWRkaXRpb25hbFByb3BBcmdzfSBhZGRpdGlvbmFsQXJncyBvcHRpb25hbCBvYmplY3QgdGhhdCBjb250YWlucyBiZWZvcmVEZXNlcmlhbGl6ZSBhbmQvb3IgYWZ0ZXJEZXNlcmlhbGl6ZSBoYW5kbGVyc1xuICogQHJldHVybnMge1Byb3BTY2hlbWF9XG4gKi9cbmZ1bmN0aW9uIHJlZmVyZW5jZSh0YXJnZXQsIGxvb2t1cEZuLCBhZGRpdGlvbmFsQXJncykge1xuICAgIGludmFyaWFudCghIXRhcmdldCwgXCJObyBtb2RlbHNjaGVtYSBwcm92aWRlZC4gSWYgeW91IGFyZSBpbXBvcnRpbmcgaXQgZnJvbSBhbm90aGVyIGZpbGUgYmUgYXdhcmUgb2YgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlwiKTtcbiAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB2YXIgY2hpbGRJZGVudGlmaWVyQXR0cmlidXRlO1xuICAgIGlmICh0eXBlb2YgbG9va3VwRm4gPT09IFwib2JqZWN0XCIgJiYgYWRkaXRpb25hbEFyZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhZGRpdGlvbmFsQXJncyA9IGxvb2t1cEZuO1xuICAgICAgICBsb29rdXBGbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIHRhcmdldCAhPT0gXCJzdHJpbmdcIiB8fCBsb29rdXBGbiAmJiB0eXBlb2YgbG9va3VwRm4gPT09IFwiZnVuY3Rpb25cIiwgXCJpZiB0aGUgcmVmZXJlbmNlIHRhcmdldCBpcyBzcGVjaWZpZWQgYnkgYXR0cmlidXRlIG5hbWUsIGEgbG9va3VwIGZ1bmN0aW9uIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICBpbnZhcmlhbnQoIWxvb2t1cEZuIHx8IHR5cGVvZiBsb29rdXBGbiA9PT0gXCJmdW5jdGlvblwiLCBcInNlY29uZCBhcmd1bWVudCBzaG91bGQgYmUgYSBsb29rdXAgZnVuY3Rpb24gb3IgYWRkaXRpb25hbCBhcmd1bWVudHMgb2JqZWN0XCIpO1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIGNoaWxkSWRlbnRpZmllckF0dHJpYnV0ZSA9IHRhcmdldDtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbW9kZWxTY2hlbWEgPSBnZXREZWZhdWx0TW9kZWxTY2hlbWEodGFyZ2V0KTtcbiAgICAgICAgICAgIGludmFyaWFudChpc01vZGVsU2NoZW1hKG1vZGVsU2NoZW1hKSwgXCJleHBlY3RlZCBtb2RlbCBzY2hlbWEgb3Igc3RyaW5nIGFzIGZpcnN0IGFyZ3VtZW50IGZvciAncmVmJywgZ290IFwiICsgbW9kZWxTY2hlbWEpO1xuICAgICAgICAgICAgbG9va3VwRm4gPSBsb29rdXBGbiB8fCBjcmVhdGVEZWZhdWx0UmVmTG9va3VwKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGNoaWxkSWRlbnRpZmllckF0dHJpYnV0ZSA9IGdldElkZW50aWZpZXJQcm9wKG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgIGludmFyaWFudCghIWNoaWxkSWRlbnRpZmllckF0dHJpYnV0ZSwgXCJwcm92aWRlZCBtb2RlbCBzY2hlbWEgZG9lc24ndCBkZWZpbmUgYW4gaWRlbnRpZmllcigpIHByb3BlcnR5IGFuZCBjYW5ub3QgYmUgdXNlZCBieSAncmVmJy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQpXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtW2NoaWxkSWRlbnRpZmllckF0dHJpYnV0ZV0gOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24oaWRlbnRpZmllclZhbHVlLCBkb25lLCBjb250ZXh0KSB7XG4gICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKVxuICAgICAgICAgICAgICAgIGluaXRpYWxpemUoKTtcbiAgICAgICAgICAgIGlmIChpZGVudGlmaWVyVmFsdWUgPT09IG51bGwgfHwgaWRlbnRpZmllclZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZG9uZShudWxsLCBpZGVudGlmaWVyVmFsdWUpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGxvb2t1cEZuKGlkZW50aWZpZXJWYWx1ZSwgZG9uZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlc3VsdCA9IHByb2Nlc3NBZGRpdGlvbmFsUHJvcEFyZ3MocmVzdWx0LCBhZGRpdGlvbmFsQXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIExpc3QgaW5kaWNhdGVzIHRoYXQgdGhpcyBwcm9wZXJ0eSBjb250YWlucyBhIGxpc3Qgb2YgdGhpbmdzLlxuICogQWNjZXB0cyBhIHN1YiBtb2RlbCBzY2hlbWEgdG8gc2VyaWFsaXplIHRoZSBjb250ZW50c1xuICpcbiAqIEBleGFtcGxlXG4gKiBjbGFzcyBTdWJUYXNrIHt9XG4gKiBjbGFzcyBUYXNrIHt9XG4gKiBjbGFzcyBUb2RvIHt9XG4gKlxuICogY3JlYXRlTW9kZWxTY2hlbWEoU3ViVGFzaywge1xuICogICAgIHRpdGxlOiB0cnVlLFxuICogfSk7XG4gKiBjcmVhdGVNb2RlbFNjaGVtYShUb2RvLCB7XG4gKiAgICAgdGl0bGU6IHRydWUsXG4gKiAgICAgc3ViVGFzazogbGlzdChvYmplY3QoU3ViVGFzaykpLFxuICogfSk7XG4gKlxuICogY29uc3QgdG9kbyA9IGRlc2VyaWFsaXplKFRvZG8sIHtcbiAqICAgICB0aXRsZTogJ1Rhc2snLFxuICogICAgIHN1YlRhc2s6IFtcbiAqICAgICAgICAge1xuICogICAgICAgICAgICAgdGl0bGU6ICdTdWIgdGFzayAxJyxcbiAqICAgICAgICAgfSxcbiAqICAgICBdLFxuICogfSk7XG4gKlxuICogQHBhcmFtIHtQcm9wU2NoZW1hfSBwcm9wU2NoZW1hIHRvIGJlIHVzZWQgdG8gKGRlKXNlcmlhbGl6ZSB0aGUgY29udGVudHMgb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBsaXN0KHByb3BTY2hlbWEsIGFkZGl0aW9uYWxBcmdzKSB7XG4gICAgcHJvcFNjaGVtYSA9IHByb3BTY2hlbWEgfHwgX2RlZmF1bHRQcmltaXRpdmVQcm9wO1xuICAgIGludmFyaWFudChpc1Byb3BTY2hlbWEocHJvcFNjaGVtYSksIFwiZXhwZWN0ZWQgcHJvcCBzY2hlbWEgYXMgZmlyc3QgYXJndW1lbnRcIik7XG4gICAgaW52YXJpYW50KCFpc0FsaWFzZWRQcm9wU2NoZW1hKHByb3BTY2hlbWEpLFxuICAgICAgICBcInByb3ZpZGVkIHByb3AgaXMgYWxpYXNlZCwgcGxlYXNlIHB1dCBhbGlhc2VzIGZpcnN0XCIpO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChhcikge1xuICAgICAgICAgICAgaWYgKGFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU0tJUFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW52YXJpYW50KGFyICYmIFwibGVuZ3RoXCIgaW4gYXIgJiYgXCJtYXBcIiBpbiBhciwgXCJleHBlY3RlZCBhcnJheSAobGlrZSkgb2JqZWN0XCIpO1xuICAgICAgICAgICAgcmV0dXJuIGFyLm1hcChwcm9wU2NoZW1hLnNlcmlhbGl6ZXIpXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25BcnJheSwgZG9uZSwgY29udGV4dCkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb25BcnJheSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgZG9uZShcIltzZXJpYWxpenJdIGV4cGVjdGVkIEpTT04gYXJyYXlcIilcblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0l0ZW0oanNvblZhbHVlLCBvbkl0ZW1Eb25lLCBpdGVtSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFja0JlZm9yZShlcnIsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wU2NoZW1hLmRlc2VyaWFsaXplcih2YWx1ZSwgZGVzZXJpYWxpemVEb25lLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSXRlbURvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlc2VyaWFsaXplRG9uZShlcnIsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFNjaGVtYS5hZnRlckRlc2VyaWFsaXplID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJEZXNlcmlhbGl6ZShjYWxsYmFja0FmdGVyLCBlcnIsIHZhbHVlLCBqc29uVmFsdWUsIGl0ZW1JbmRleCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wU2NoZW1hKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSXRlbURvbmUoZXJyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFja0FmdGVyKGVyclByZWxpbWluYXJ5LCBmaW5hbE9yUmV0cnlWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyUHJlbGltaW5hcnkgJiYgZmluYWxPclJldHJ5VmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHByb3BTY2hlbWEuYWZ0ZXJEZXNlcmlhbGl6ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BTY2hlbWEuZGVzZXJpYWxpemVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsT3JSZXRyeVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2VyaWFsaXplRG9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25JdGVtRG9uZShlcnJQcmVsaW1pbmFyeSwgZmluYWxPclJldHJ5VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb25CZWZvcmVEZXNlcmlhbGl6ZShjYWxsYmFja0JlZm9yZSwganNvblZhbHVlLCBqc29uQXJyYXksIGl0ZW1JbmRleCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcFNjaGVtYSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmFsbGVsKFxuICAgICAgICAgICAgICAgIGpzb25BcnJheSxcbiAgICAgICAgICAgICAgICBwcm9jZXNzSXRlbSxcbiAgICAgICAgICAgICAgICBkb25lXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXN1bHQgPSBwcm9jZXNzQWRkaXRpb25hbFByb3BBcmdzKHJlc3VsdCwgYWRkaXRpb25hbEFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIGxpc3QsIGJ1dCBtYXAgcmVwcmVzZW50cyBhIHN0cmluZyBrZXllZCBkeW5hbWljIGNvbGxlY3Rpb24uXG4gKiBUaGlzIGNhbiBiZSBib3RoIHBsYWluIG9iamVjdHMgKGRlZmF1bHQpIG9yIEVTNiBNYXAgbGlrZSBzdHJ1Y3R1cmVzLlxuICogVGhpcyB3aWxsIGJlIGluZmVycmVkIGZyb20gdGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIHRhcmdldHRlZCBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHsqfSBwcm9wU2NoZW1hXG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBtYXAocHJvcFNjaGVtYSwgYWRkaXRpb25hbEFyZ3MpIHtcbiAgICBwcm9wU2NoZW1hID0gcHJvcFNjaGVtYSB8fCBfZGVmYXVsdFByaW1pdGl2ZVByb3A7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBmaXJzdCBhcmd1bWVudFwiKTtcbiAgICBpbnZhcmlhbnQoIWlzQWxpYXNlZFByb3BTY2hlbWEocHJvcFNjaGVtYSksIFwicHJvdmlkZWQgcHJvcCBpcyBhbGlhc2VkLCBwbGVhc2UgcHV0IGFsaWFzZXMgZmlyc3RcIik7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgICAgc2VyaWFsaXplcjogZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIGludmFyaWFudChtICYmIHR5cGVvZiBtID09PSBcIm9iamVjdFwiLCBcImV4cGVjdGVkIG9iamVjdCBvciBNYXBcIik7XG4gICAgICAgICAgICB2YXIgaXNNYXAgPSBpc01hcExpa2UobSk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgICAgICBpZiAoaXNNYXApXG4gICAgICAgICAgICAgICAgbS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gcHJvcFNjaGVtYS5zZXJpYWxpemVyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2UgZm9yICh2YXIga2V5IGluIG0pXG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBwcm9wU2NoZW1hLnNlcmlhbGl6ZXIobVtrZXldKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemVyOiBmdW5jdGlvbiAoanNvbk9iamVjdCwgZG9uZSwgY29udGV4dCwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghanNvbk9iamVjdCB8fCB0eXBlb2YganNvbk9iamVjdCAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKFwiW3NlcmlhbGl6cl0gZXhwZWN0ZWQgSlNPTiBvYmplY3RcIilcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoanNvbk9iamVjdCk7XG4gICAgICAgICAgICBsaXN0KHByb3BTY2hlbWEsIGFkZGl0aW9uYWxBcmdzKS5kZXNlcmlhbGl6ZXIoXG4gICAgICAgICAgICAgICAga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNvbk9iamVjdFtrZXldXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBkb25lKGVycilcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzTWFwID0gaXNNYXBMaWtlKG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBvbGRWYWx1ZSBpcyBhIG1hcCwgd2UgcmVjeWNsZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgYXJlIG1hbnkgdmFyaWF0aW9ucyBhbmQgdGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8ga25vdyBhYm91dCB0aGUgb3JpZ2luYWwgY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUuc2V0KGtleXNbaV0sIHZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVba2V5c1tpXV0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXMsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogU2ltaWxhciB0byBtYXAsIG1hcEFzQXJyYXkgY2FuIGJlIHVzZWQgdG8gc2VyaWFsaXplIGEgbWFwLWxpa2UgY29sbGVjdGlvbiB3aGVyZSB0aGUga2V5IGlzXG4gKiBjb250YWluZWQgaW4gdGhlICd2YWx1ZSBvYmplY3QnLiBFeGFtcGxlOiBjb25zaWRlciBNYXA8aWQ6IG51bWJlciwgY3VzdG9tZXI6IEN1c3RvbWVyPiB3aGVyZSB0aGVcbiAqIEN1c3RvbWVyIG9iamVjdCBoYXMgdGhlIGlkIHN0b3JlZCBvbiBpdHNlbGYuIG1hcEFzQXJyYXkgc3RvcmVzIGFsbCB2YWx1ZXMgZnJvbSB0aGUgbWFwIGludG8gYW5cbiAqIGFycmF5IHdoaWNoIGlzIHNlcmlhbGl6ZWQuIERlc2VyaWFsaXphdGlvbiByZXR1cm5zIGEgRVM2IE1hcCBvciBwbGFpbiBvYmplY3Qgb2JqZWN0IHdoZXJlIHRoZVxuICogYGtleVByb3BlcnR5TmFtZWAgb2YgZWFjaCBvYmplY3QgaXMgdXNlZCBmb3Iga2V5cy4gRm9yIEVTNiBtYXBzIHRoaXMgaGFzIHRoZSBiZW5lZml0IG9mIGJlaW5nXG4gKiBhbGxvd2VkIHRvIGhhdmUgbm9uLXN0cmluZyBrZXlzIGluIHRoZSBtYXAuIFRoZSBzZXJpYWxpemVkIGpzb24gYWxzbyBtYXkgYmUgc2xpZ2h0bHkgbW9yZVxuICogY29tcGFjdC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gcHJvcFNjaGVtYVxuICogQHBhcmFtIHtzdHJpbmd9IGtleVByb3BlcnR5TmFtZSAtIHRoZSBwcm9wZXJ0eSBvZiBzdG9yZWQgb2JqZWN0cyB1c2VkIGFzIGtleSBpbiB0aGUgbWFwXG4gKiBAcGFyYW0ge0FkZGl0aW9uYWxQcm9wQXJnc30gYWRkaXRpb25hbEFyZ3Mgb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnMgYmVmb3JlRGVzZXJpYWxpemUgYW5kL29yIGFmdGVyRGVzZXJpYWxpemUgaGFuZGxlcnNcbiAqIEByZXR1cm5zIHtQcm9wU2NoZW1hfVxuICovXG5mdW5jdGlvbiBtYXBBc0FycmF5KHByb3BTY2hlbWEsIGtleVByb3BlcnR5TmFtZSwgYWRkaXRpb25hbEFyZ3MpIHtcbiAgICBwcm9wU2NoZW1hID0gcHJvcFNjaGVtYSB8fCBfZGVmYXVsdFByaW1pdGl2ZVByb3A7XG4gICAgaW52YXJpYW50KGlzUHJvcFNjaGVtYShwcm9wU2NoZW1hKSwgXCJleHBlY3RlZCBwcm9wIHNjaGVtYSBhcyBmaXJzdCBhcmd1bWVudFwiKTtcbiAgICBpbnZhcmlhbnQoISFrZXlQcm9wZXJ0eU5hbWUsIFwiZXhwZWN0ZWQga2V5IHByb3BlcnR5IG5hbWUgYXMgc2Vjb25kIGFyZ3VtZW50XCIpO1xuICAgIHZhciByZXMgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQobSAmJiB0eXBlb2YgbSA9PT0gXCJvYmplY3RcIiwgXCJleHBlY3RlZCBvYmplY3Qgb3IgTWFwXCIpO1xuICAgICAgICAgICAgdmFyIGlzTWFwID0gaXNNYXBMaWtlKG0pO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgICAgICBpZiAoaXNNYXApIHtcbiAgICAgICAgICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3BTY2hlbWEuc2VyaWFsaXplcih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGZvciAodmFyIGtleSBpbiBtKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvcFNjaGVtYS5zZXJpYWxpemVyKG1ba2V5XSkpO1xuICAgICAgICAgICAgICAgIC8vIHJlc3VsdFtrZXldID0gcHJvcFNjaGVtYS5zZXJpYWxpemVyKG1ba2V5XSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemVyOiBmdW5jdGlvbiAoanNvbkFycmF5LCBkb25lLCBjb250ZXh0LCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgbGlzdChwcm9wU2NoZW1hLCBhZGRpdGlvbmFsQXJncykuZGVzZXJpYWxpemVyKFxuICAgICAgICAgICAgICAgIGpzb25BcnJheSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyLCB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIGRvbmUoZXJyKVxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNNYXAgPSBpc01hcExpa2Uob2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0ganNvbkFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS5zZXQodmFsdWVzW2ldW2tleVByb3BlcnR5TmFtZV0sIHZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVbdmFsdWVzW2ldW2tleVByb3BlcnR5TmFtZV0udG9TdHJpbmcoKV0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVzID0gcHJvY2Vzc0FkZGl0aW9uYWxQcm9wQXJncyhyZXMsIGFkZGl0aW9uYWxBcmdzKTtcbiAgICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgdGhpcyBmaWVsZCBpcyBvbmx5IG5lZWQgdG8gcHV0dGVkIGluIHRoZSBzZXJpYWxpemVkIGpzb24gb3JcbiAqIGRlc2VyaWFsaXplZCBpbnN0YW5jZSwgd2l0aG91dCBhbnkgdHJhbnNmb3JtYXRpb25zLiBTdGF5IHdpdGggaXRzIG9yaWdpbmFsIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNyZWF0ZU1vZGVsU2NoZW1hKE1vZGVsLCB7XG4gKiAgICAgcmF3RGF0YTogcmF3KCksXG4gKiB9KTtcbiAqXG4gKiBjb25zb2xlLmRpcihzZXJpYWxpemUobmV3IE1vZGVsKHsgcmF3RGF0YTogeyBhOiAxLCBiOiBbXSwgYzoge30gfSB9IH0pKSk7XG4gKiAvLyBvdXRwdXRzOiB7IHJhd0RhdGE6IHsgYTogMSwgYjogW10sIGM6IHt9IH0gfSB9XG4gKlxuICogQHBhcmFtIHtBZGRpdGlvbmFsUHJvcEFyZ3N9IGFkZGl0aW9uYWxBcmdzIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zIGJlZm9yZURlc2VyaWFsaXplIGFuZC9vciBhZnRlckRlc2VyaWFsaXplIGhhbmRsZXJzXG4gKiBAcmV0dXJucyB7TW9kZWxTY2hlbWF9XG4gKi9cbmZ1bmN0aW9uIHJhdyhhZGRpdGlvbmFsQXJncykge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHNlcmlhbGl6ZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplcjogZnVuY3Rpb24gKGpzb25WYWx1ZSwgZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgZG9uZShudWxsLCBqc29uVmFsdWUpXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlc3VsdCA9IHByb2Nlc3NBZGRpdGlvbmFsUHJvcEFyZ3MocmVzdWx0LCBhZGRpdGlvbmFsQXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKlxuICogIyMgTWFuYWdpbmcgbW9kZWwgc2NoZW1hc1xuICovXG4vLyB+IGRlcHJlY2F0ZWRcblxuZXhwb3J0IHsgY3JlYXRlU2ltcGxlU2NoZW1hLCBjcmVhdGVNb2RlbFNjaGVtYSwgZ2V0RGVmYXVsdE1vZGVsU2NoZW1hLCBzZXREZWZhdWx0TW9kZWxTY2hlbWEsIHNlcmlhbGl6YWJsZSwgc2VyaWFsaXplLCBzZXJpYWxpemVBbGwsIGNhbmNlbERlc2VyaWFsaXplLCBkZXNlcmlhbGl6ZSwgdXBkYXRlLCBwcmltaXRpdmUsIGlkZW50aWZpZXIsIGRhdGUsIGFsaWFzLCBjdXN0b20sIG9iamVjdCwgb2JqZWN0IGFzIGNoaWxkLCBvcHRpb25hbCwgcmVmZXJlbmNlLCByZWZlcmVuY2UgYXMgcmVmLCBsaXN0LCBtYXAsIG1hcEFzQXJyYXksIHJhdywgU0tJUCB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuLy8gTW9zdGx5IHRha2VuIGZyb20gUmVhY3RQcm9wVHlwZXMuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZVNhZmUgPSBjb21wb25lbnROYW1lIHx8ICc8PGFub255bW91cz4+JztcbiAgICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignUmVxdWlyZWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZVNhZmUgKyAnYCB3YXMgbm90IHNwZWNpZmllZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWVTYWZlICsgJ2AuJykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiA2ID8gX2xlbiAtIDYgOiAwKSwgX2tleSA9IDY7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDZdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZS5hcHBseSh1bmRlZmluZWQsIFtwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWVTYWZlLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lU2FmZV0uY29uY2F0KGFyZ3MpKTtcbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJ2YXIgX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpO1xuXG52YXIgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX1dlYWtNYXAgPSByZXF1aXJlKFwiLi4vY29yZS1qcy93ZWFrLW1hcFwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICBpZiAodHlwZW9mIF9XZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGUgPSBuZXcgX1dlYWtNYXAoKTtcblxuICBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9O1xuXG4gIHJldHVybiBjYWNoZTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7XG5cbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuICB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gX09iamVjdCRkZWZpbmVQcm9wZXJ0eSAmJiBfT2JqZWN0JGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDtcblxuICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICBfT2JqZWN0JGRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajtcblxuICBpZiAoY2FjaGUpIHtcbiAgICBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZDsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2h5cGhlbmF0ZVN0eWxlXCIpKTtcblxudmFyIF9nZXRDb21wdXRlZFN0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0Q29tcHV0ZWRTdHlsZVwiKSk7XG5cbnZhciBfcmVtb3ZlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbW92ZVN0eWxlXCIpKTtcblxudmFyIF9wcm9wZXJ0aWVzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb24vcHJvcGVydGllc1wiKTtcblxudmFyIF9pc1RyYW5zZm9ybSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RyYW5zaXRpb24vaXNUcmFuc2Zvcm1cIikpO1xuXG5mdW5jdGlvbiBzdHlsZShub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuICB2YXIgcHJvcHMgPSBwcm9wZXJ0eTtcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZS5zdHlsZVsoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpXSB8fCAoMCwgX2dldENvbXB1dGVkU3R5bGUyLmRlZmF1bHQpKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoKDAsIF9oeXBoZW5hdGVTdHlsZS5kZWZhdWx0KShwcm9wZXJ0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAocHJvcHMgPSB7fSlbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BzW2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAoMCwgX3JlbW92ZVN0eWxlLmRlZmF1bHQpKG5vZGUsICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzVHJhbnNmb3JtLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9ICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSArIFwiOiBcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgfVxuICB9KTtcblxuICBpZiAodHJhbnNmb3Jtcykge1xuICAgIGNzcyArPSBfcHJvcGVydGllcy50cmFuc2Zvcm0gKyBcIjogXCIgKyB0cmFuc2Zvcm1zICsgXCI7XCI7XG4gIH1cblxuICBub2RlLnN0eWxlLmNzc1RleHQgKz0gJzsnICsgY3NzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgb24gPSBmdW5jdGlvbiBvbigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gICAgfTtlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICAgIGUuY3VycmVudFRhcmdldCA9IG5vZGU7XG4gICAgICAgIGhhbmRsZXIuY2FsbChub2RlLCBlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0oKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBvZmYgPSBmdW5jdGlvbiBvZmYoKSB7fTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIG9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAgIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlIHx8IGZhbHNlKTtcbiAgICB9O2Vsc2UgaWYgKGRvY3VtZW50LmF0dGFjaEV2ZW50KSByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgcmV0dXJuIG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgfSgpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBvZmY7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBjb3B5cmlnaHQgIDIwMTMgTWljaGFlbCBBdWZyZWl0ZXIgKERldmVsb3BtZW50IFNlZWQpIGFuZCAyMDE2IFlhaG9vIEluYy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIGVzbGludCB2YWxpZC1qc2RvYzogW1wiZXJyb3JcIiwge1wicmVxdWlyZVJldHVybkRlc2NyaXB0aW9uXCI6IGZhbHNlfV0gKi9cblxudmFyIF9HaXN0ID0gcmVxdWlyZSgnLi9HaXN0Jyk7XG5cbnZhciBfR2lzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9HaXN0KTtcblxudmFyIF9Vc2VyID0gcmVxdWlyZSgnLi9Vc2VyJyk7XG5cbnZhciBfVXNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Vc2VyKTtcblxudmFyIF9Jc3N1ZSA9IHJlcXVpcmUoJy4vSXNzdWUnKTtcblxudmFyIF9Jc3N1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Jc3N1ZSk7XG5cbnZhciBfU2VhcmNoID0gcmVxdWlyZSgnLi9TZWFyY2gnKTtcblxudmFyIF9TZWFyY2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2VhcmNoKTtcblxudmFyIF9SYXRlTGltaXQgPSByZXF1aXJlKCcuL1JhdGVMaW1pdCcpO1xuXG52YXIgX1JhdGVMaW1pdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SYXRlTGltaXQpO1xuXG52YXIgX1JlcG9zaXRvcnkgPSByZXF1aXJlKCcuL1JlcG9zaXRvcnknKTtcblxudmFyIF9SZXBvc2l0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcG9zaXRvcnkpO1xuXG52YXIgX09yZ2FuaXphdGlvbiA9IHJlcXVpcmUoJy4vT3JnYW5pemF0aW9uJyk7XG5cbnZhciBfT3JnYW5pemF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09yZ2FuaXphdGlvbik7XG5cbnZhciBfVGVhbSA9IHJlcXVpcmUoJy4vVGVhbScpO1xuXG52YXIgX1RlYW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGVhbSk7XG5cbnZhciBfTWFya2Rvd24gPSByZXF1aXJlKCcuL01hcmtkb3duJyk7XG5cbnZhciBfTWFya2Rvd24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWFya2Rvd24pO1xuXG52YXIgX1Byb2plY3QgPSByZXF1aXJlKCcuL1Byb2plY3QnKTtcblxudmFyIF9Qcm9qZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb2plY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIEdpdEh1YiBlbmNhcHN1bGF0ZXMgdGhlIGZ1bmN0aW9uYWxpdHkgdG8gY3JlYXRlIHZhcmlvdXMgQVBJIHdyYXBwZXIgb2JqZWN0cy5cbiAqL1xudmFyIEdpdEh1YiA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBHaXRIdWIuXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuYXV0aH0gW2F1dGhdIC0gdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWIuIElmIGF1dGggaXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IHByb3ZpZGVkIHJlcXVlc3RzIHdpbGwgYmUgbWFkZSB1bmF1dGhlbnRpY2F0ZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICovXG4gIGZ1bmN0aW9uIEdpdEh1YihhdXRoKSB7XG4gICAgdmFyIGFwaUJhc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdodHRwczovL2FwaS5naXRodWIuY29tJztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHaXRIdWIpO1xuXG4gICAgdGhpcy5fX2FwaUJhc2UgPSBhcGlCYXNlO1xuICAgIHRoaXMuX19hdXRoID0gYXV0aCB8fCB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgR2lzdCB3cmFwcGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbaWRdIC0gdGhlIGlkIGZvciB0aGUgZ2lzdCwgbGVhdmUgdW5kZWZpbmVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgZ2lzdFxuICAgKiBAcmV0dXJuIHtHaXN0fVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhHaXRIdWIsIFt7XG4gICAga2V5OiAnZ2V0R2lzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdpc3QoaWQpIHtcbiAgICAgIHJldHVybiBuZXcgX0dpc3QyLmRlZmF1bHQoaWQsIHRoaXMuX19hdXRoLCB0aGlzLl9fYXBpQmFzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFVzZXIgd3JhcHBlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gLSB0aGUgbmFtZSBvZiB0aGUgdXNlciB0byBnZXQgaW5mb3JtYXRpb24gYWJvdXRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXZlIHVuZGVmaW5lZCBmb3IgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlclxuICAgICAqIEByZXR1cm4ge1VzZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFVzZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVc2VyKHVzZXIpIHtcbiAgICAgIHJldHVybiBuZXcgX1VzZXIyLmRlZmF1bHQodXNlciwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT3JnYW5pemF0aW9uIHdyYXBwZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3JnYW5pemF0aW9uIC0gdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvblxuICAgICAqIEByZXR1cm4ge09yZ2FuaXphdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0T3JnYW5pemF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3JnYW5pemF0aW9uKG9yZ2FuaXphdGlvbikge1xuICAgICAgcmV0dXJuIG5ldyBfT3JnYW5pemF0aW9uMi5kZWZhdWx0KG9yZ2FuaXphdGlvbiwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBuZXcgVGVhbSB3cmFwcGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRlYW1JZCAtIHRoZSBuYW1lIG9mIHRoZSB0ZWFtXG4gICAgICogQHJldHVybiB7dGVhbX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGVhbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRlYW0odGVhbUlkKSB7XG4gICAgICByZXR1cm4gbmV3IF9UZWFtMi5kZWZhdWx0KHRlYW1JZCwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUmVwb3NpdG9yeSB3cmFwcGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXIgLSB0aGUgdXNlciB3aG8gb3ducyB0aGUgcmVwb3NpdG9yeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXBvIC0gdGhlIG5hbWUgb2YgdGhlIHJlcG9zaXRvcnlcbiAgICAgKiBAcmV0dXJuIHtSZXBvc2l0b3J5fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSZXBvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVwbyh1c2VyLCByZXBvKSB7XG4gICAgICByZXR1cm4gbmV3IF9SZXBvc2l0b3J5Mi5kZWZhdWx0KHRoaXMuX2dldEZ1bGxOYW1lKHVzZXIsIHJlcG8pLCB0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBJc3N1ZSB3cmFwcGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXIgLSB0aGUgdXNlciB3aG8gb3ducyB0aGUgcmVwb3NpdG9yeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXBvIC0gdGhlIG5hbWUgb2YgdGhlIHJlcG9zaXRvcnlcbiAgICAgKiBAcmV0dXJuIHtJc3N1ZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0SXNzdWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXNzdWVzKHVzZXIsIHJlcG8pIHtcbiAgICAgIHJldHVybiBuZXcgX0lzc3VlMi5kZWZhdWx0KHRoaXMuX2dldEZ1bGxOYW1lKHVzZXIsIHJlcG8pLCB0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBTZWFyY2ggd3JhcHBlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSAtIHRoZSBxdWVyeSB0byBzZWFyY2ggZm9yXG4gICAgICogQHJldHVybiB7U2VhcmNofVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZWFyY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2gocXVlcnkpIHtcbiAgICAgIHJldHVybiBuZXcgX1NlYXJjaDIuZGVmYXVsdChxdWVyeSwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUmF0ZUxpbWl0IHdyYXBwZXJcbiAgICAgKiBAcmV0dXJuIHtSYXRlTGltaXR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFJhdGVMaW1pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhdGVMaW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgX1JhdGVMaW1pdDIuZGVmYXVsdCh0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBNYXJrZG93biB3cmFwcGVyXG4gICAgICogQHJldHVybiB7TWFya2Rvd259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldE1hcmtkb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWFya2Rvd24oKSB7XG4gICAgICByZXR1cm4gbmV3IF9NYXJrZG93bjIuZGVmYXVsdCh0aGlzLl9fYXV0aCwgdGhpcy5fX2FwaUJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBQcm9qZWN0IHdyYXBwZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSB0aGUgaWQgb2YgdGhlIHByb2plY3RcbiAgICAgKiBAcmV0dXJuIHtQcm9qZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQcm9qZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvamVjdChpZCkge1xuICAgICAgcmV0dXJuIG5ldyBfUHJvamVjdDIuZGVmYXVsdChpZCwgdGhpcy5fX2F1dGgsIHRoaXMuX19hcGlCYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgZnVsbCByZXBvc2l0b3J5IG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlciAtIHRoZSB1c2VybmFtZSAob3IgdGhlIGZ1bGwgbmFtZSlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIHRoZSByZXBvc2l0b3J5IG5hbWUsIG11c3Qgbm90IGJlIHBhc3NlZCBpZiBgdXNlcmAgaXMgdGhlIGZ1bGwgbmFtZVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHJlcG9zaXRvcnkncyBmdWxsIG5hbWVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2dldEZ1bGxOYW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEZ1bGxOYW1lKHVzZXIsIHJlcG8pIHtcbiAgICAgIHZhciBmdWxsbmFtZSA9IHVzZXI7XG5cbiAgICAgIGlmIChyZXBvKSB7XG4gICAgICAgIGZ1bGxuYW1lID0gdXNlciArICcvJyArIHJlcG87XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdWxsbmFtZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2l0SHViO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdpdEh1Yjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrZHBkRWgxWWk1cWN5SmRMQ0p1WVcxbGN5STZXeUpIYVhSSWRXSWlMQ0poZFhSb0lpd2lZWEJwUW1GelpTSXNJbDlmWVhCcFFtRnpaU0lzSWw5ZllYVjBhQ0lzSW1sa0lpd2lSMmx6ZENJc0luVnpaWElpTENKVmMyVnlJaXdpYjNKbllXNXBlbUYwYVc5dUlpd2lUM0puWVc1cGVtRjBhVzl1SWl3aWRHVmhiVWxrSWl3aVZHVmhiU0lzSW5KbGNHOGlMQ0pTWlhCdmMybDBiM0o1SWl3aVgyZGxkRVoxYkd4T1lXMWxJaXdpU1hOemRXVWlMQ0p4ZFdWeWVTSXNJbE5sWVhKamFDSXNJbEpoZEdWTWFXMXBkQ0lzSWsxaGNtdGtiM2R1SWl3aVVISnZhbVZqZENJc0ltWjFiR3h1WVcxbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN2NXcENRVUZCT3pzN096czdRVUZOUVRzN1FVRkZRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3pzN096czdRVUZGUVRzN08wbEJSMDFCTEUwN1FVRkRTRHM3T3pzN08wRkJUVUVzYTBKQlFWbERMRWxCUVZvc1JVRkJjMFE3UVVGQlFTeFJRVUZ3UTBNc1QwRkJiME1zZFVWQlFURkNMSGRDUVVFd1FqczdRVUZCUVRzN1FVRkRia1FzVTBGQlMwTXNVMEZCVEN4SFFVRnBRa1FzVDBGQmFrSTdRVUZEUVN4VFFVRkxSU3hOUVVGTUxFZEJRV05JTEZGQlFWRXNSVUZCZEVJN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096UkNRVXRSU1N4RkxFVkJRVWs3UVVGRFZDeGhRVUZQTEVsQlFVbERMR05CUVVvc1EwRkJVMFFzUlVGQlZDeEZRVUZoTEV0QlFVdEVMRTFCUVd4Q0xFVkJRVEJDTEV0QlFVdEVMRk5CUVM5Q0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pSQ1FVMVJTU3hKTEVWQlFVMDdRVUZEV0N4aFFVRlBMRWxCUVVsRExHTkJRVW9zUTBGQlUwUXNTVUZCVkN4RlFVRmxMRXRCUVV0SUxFMUJRWEJDTEVWQlFUUkNMRXRCUVV0RUxGTkJRV3BETEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdiME5CUzJkQ1RTeFpMRVZCUVdNN1FVRkRNMElzWVVGQlR5eEpRVUZKUXl4elFrRkJTaXhEUVVGcFFrUXNXVUZCYWtJc1JVRkJLMElzUzBGQlMwd3NUVUZCY0VNc1JVRkJORU1zUzBGQlMwUXNVMEZCYWtRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenMwUWtGTFVWRXNUU3hGUVVGUk8wRkJRMklzWVVGQlR5eEpRVUZKUXl4alFVRktMRU5CUVZORUxFMUJRVlFzUlVGQmFVSXNTMEZCUzFBc1RVRkJkRUlzUlVGQk9FSXNTMEZCUzBRc1UwRkJia01zUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdORUpCVFZGSkxFa3NSVUZCVFUwc1NTeEZRVUZOTzBGQlEycENMR0ZCUVU4c1NVRkJTVU1zYjBKQlFVb3NRMEZCWlN4TFFVRkxReXhaUVVGTUxFTkJRV3RDVWl4SlFVRnNRaXhGUVVGM1FrMHNTVUZCZUVJc1EwRkJaaXhGUVVFNFF5eExRVUZMVkN4TlFVRnVSQ3hGUVVFeVJDeExRVUZMUkN4VFFVRm9SU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czRRa0ZOVlVrc1NTeEZRVUZOVFN4SkxFVkJRVTA3UVVGRGJrSXNZVUZCVHl4SlFVRkpSeXhsUVVGS0xFTkJRVlVzUzBGQlMwUXNXVUZCVEN4RFFVRnJRbElzU1VGQmJFSXNSVUZCZDBKTkxFbEJRWGhDTEVOQlFWWXNSVUZCZVVNc1MwRkJTMVFzVFVGQk9VTXNSVUZCYzBRc1MwRkJTMFFzVTBGQk0wUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzeVFrRkxUMk1zU3l4RlFVRlBPMEZCUTFnc1lVRkJUeXhKUVVGSlF5eG5Ra0ZCU2l4RFFVRlhSQ3hMUVVGWUxFVkJRV3RDTEV0QlFVdGlMRTFCUVhaQ0xFVkJRU3RDTEV0QlFVdEVMRk5CUVhCRExFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenR0UTBGSlpUdEJRVU5hTEdGQlFVOHNTVUZCU1dkQ0xHMUNRVUZLTEVOQlFXTXNTMEZCUzJZc1RVRkJia0lzUlVGQk1rSXNTMEZCUzBRc1UwRkJhRU1zUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN08ydERRVWxqTzBGQlExZ3NZVUZCVHl4SlFVRkphVUlzYTBKQlFVb3NRMEZCWVN4TFFVRkxhRUlzVFVGQmJFSXNSVUZCTUVJc1MwRkJTMFFzVTBGQkwwSXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzclFrRkxWMFVzUlN4RlFVRkpPMEZCUTFvc1lVRkJUeXhKUVVGSlowSXNhVUpCUVVvc1EwRkJXV2hDTEVWQlFWb3NSVUZCWjBJc1MwRkJTMFFzVFVGQmNrSXNSVUZCTmtJc1MwRkJTMFFzVTBGQmJFTXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN2FVTkJUV0ZKTEVrc1JVRkJUVTBzU1N4RlFVRk5PMEZCUTNSQ0xGVkJRVWxUTEZkQlFWZG1MRWxCUVdZN08wRkJSVUVzVlVGQlNVMHNTVUZCU2l4RlFVRlZPMEZCUTFCVExHMUNRVUZqWml4SlFVRmtMRk5CUVhOQ1RTeEpRVUYwUWp0QlFVTkdPenRCUVVWRUxHRkJRVTlUTEZGQlFWQTdRVUZEUmpzN096czdPMEZCUjBwRExFOUJRVTlETEU5QlFWQXNSMEZCYVVKNFFpeE5RVUZxUWlJc0ltWnBiR1VpT2lKSGFYUklkV0l1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFQm1hV3hsWEc0Z0tpQkFZMjl3ZVhKcFoyaDBJQ0F5TURFeklFMXBZMmhoWld3Z1FYVm1jbVZwZEdWeUlDaEVaWFpsYkc5d2JXVnVkQ0JUWldWa0tTQmhibVFnTWpBeE5pQlpZV2h2YnlCSmJtTXVYRzRnS2lCQWJHbGpaVzV6WlNBZ0lDQk1hV05sYm5ObFpDQjFibVJsY2lCN1FHeHBibXNnYUhSMGNITTZMeTl6Y0dSNExtOXlaeTlzYVdObGJuTmxjeTlDVTBRdE15MURiR0YxYzJVdFEyeGxZWEl1YUhSdGJDQkNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSjlMbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdSMmwwYUhWaUxtcHpJR2x6SUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJoWW14bExseHVJQ292WEc0dktpQmxjMnhwYm5RZ2RtRnNhV1F0YW5Oa2IyTTZJRnRjSW1WeWNtOXlYQ0lzSUh0Y0luSmxjWFZwY21WU1pYUjFjbTVFWlhOamNtbHdkR2x2Ymx3aU9pQm1ZV3h6WlgxZElDb3ZYRzVjYm1sdGNHOXlkQ0JIYVhOMElHWnliMjBnSnk0dlIybHpkQ2M3WEc1cGJYQnZjblFnVlhObGNpQm1jbTl0SUNjdUwxVnpaWEluTzF4dWFXMXdiM0owSUVsemMzVmxJR1p5YjIwZ0p5NHZTWE56ZFdVbk8xeHVhVzF3YjNKMElGTmxZWEpqYUNCbWNtOXRJQ2N1TDFObFlYSmphQ2M3WEc1cGJYQnZjblFnVW1GMFpVeHBiV2wwSUdaeWIyMGdKeTR2VW1GMFpVeHBiV2wwSnp0Y2JtbHRjRzl5ZENCU1pYQnZjMmwwYjNKNUlHWnliMjBnSnk0dlVtVndiM05wZEc5eWVTYzdYRzVwYlhCdmNuUWdUM0puWVc1cGVtRjBhVzl1SUdaeWIyMGdKeTR2VDNKbllXNXBlbUYwYVc5dUp6dGNibWx0Y0c5eWRDQlVaV0Z0SUdaeWIyMGdKeTR2VkdWaGJTYzdYRzVwYlhCdmNuUWdUV0Z5YTJSdmQyNGdabkp2YlNBbkxpOU5ZWEpyWkc5M2JpYzdYRzVwYlhCdmNuUWdVSEp2YW1WamRDQm1jbTl0SUNjdUwxQnliMnBsWTNRbk8xeHVYRzR2S2lwY2JpQXFJRWRwZEVoMVlpQmxibU5oY0hOMWJHRjBaWE1nZEdobElHWjFibU4wYVc5dVlXeHBkSGtnZEc4Z1kzSmxZWFJsSUhaaGNtbHZkWE1nUVZCSklIZHlZWEJ3WlhJZ2IySnFaV04wY3k1Y2JpQXFMMXh1WTJ4aGMzTWdSMmwwU0hWaUlIdGNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJRWRwZEVoMVlpNWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZWFYwYUgwZ1cyRjFkR2hkSUMwZ2RHaGxJR055WldSbGJuUnBZV3h6SUhSdklHRjFkR2hsYm5ScFkyRjBaU0IwYnlCSGFYUm9kV0l1SUVsbUlHRjFkR2dnYVhOY2JpQWdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2ZENCd2NtOTJhV1JsWkNCeVpYRjFaWE4wY3lCM2FXeHNJR0psSUcxaFpHVWdkVzVoZFhSb1pXNTBhV05oZEdWa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzJGd2FVSmhjMlU5YUhSMGNITTZMeTloY0drdVoybDBhSFZpTG1OdmJWMGdMU0IwYUdVZ1ltRnpaU0JIYVhSb2RXSWdRVkJKSUZWU1RGeHVJQ0FnSUNvdlhHNGdJQ0JqYjI1emRISjFZM1J2Y2loaGRYUm9MQ0JoY0dsQ1lYTmxJRDBnSjJoMGRIQnpPaTh2WVhCcExtZHBkR2gxWWk1amIyMG5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWZZWEJwUW1GelpTQTlJR0Z3YVVKaGMyVTdYRzRnSUNBZ0lDQjBhR2x6TGw5ZllYVjBhQ0E5SUdGMWRHZ2dmSHdnZTMwN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTNKbFlYUmxJR0VnYm1WM0lFZHBjM1FnZDNKaGNIQmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdHBaRjBnTFNCMGFHVWdhV1FnWm05eUlIUm9aU0JuYVhOMExDQnNaV0YyWlNCMWJtUmxabWx1WldRZ2QyaGxiaUJqY21WaGRHbHVaeUJoSUc1bGR5Qm5hWE4wWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRIYVhOMGZWeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSSGFYTjBLR2xrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFZHBjM1FvYVdRc0lIUm9hWE11WDE5aGRYUm9MQ0IwYUdsekxsOWZZWEJwUW1GelpTazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJRlZ6WlhJZ2QzSmhjSEJsY2x4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRnQxYzJWeVhTQXRJSFJvWlNCdVlXMWxJRzltSUhSb1pTQjFjMlZ5SUhSdklHZGxkQ0JwYm1admNtMWhkR2x2YmlCaFltOTFkRnh1SUNBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXRjJaU0IxYm1SbFptbHVaV1FnWm05eUlIUm9aU0JoZFhSb1pXNTBhV05oZEdWa0lIVnpaWEpjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMVZ6WlhKOVhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEZWelpYSW9kWE5sY2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlZjMlZ5S0hWelpYSXNJSFJvYVhNdVgxOWhkWFJvTENCMGFHbHpMbDlmWVhCcFFtRnpaU2s3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dRM0psWVhSbElHRWdibVYzSUU5eVoyRnVhWHBoZEdsdmJpQjNjbUZ3Y0dWeVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYjNKbllXNXBlbUYwYVc5dUlDMGdkR2hsSUc1aGJXVWdiMllnZEdobElHOXlaMkZ1YVhwaGRHbHZibHh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdUM0puWVc1cGVtRjBhVzl1ZlZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJQY21kaGJtbDZZWFJwYjI0b2IzSm5ZVzVwZW1GMGFXOXVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUU5eVoyRnVhWHBoZEdsdmJpaHZjbWRoYm1sNllYUnBiMjRzSUhSb2FYTXVYMTloZFhSb0xDQjBhR2x6TGw5ZllYQnBRbUZ6WlNrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nWTNKbFlYUmxJR0VnYm1WM0lGUmxZVzBnZDNKaGNIQmxjbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmxZVzFKWkNBdElIUm9aU0J1WVcxbElHOW1JSFJvWlNCMFpXRnRYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdDBaV0Z0ZlZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJVWldGdEtIUmxZVzFKWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlVaV0Z0S0hSbFlXMUpaQ3dnZEdocGN5NWZYMkYxZEdnc0lIUm9hWE11WDE5aGNHbENZWE5sS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ1VtVndiM05wZEc5eWVTQjNjbUZ3Y0dWeVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZFhObGNpQXRJSFJvWlNCMWMyVnlJSGRvYnlCdmQyNXpJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY21Wd2J5QXRJSFJvWlNCdVlXMWxJRzltSUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFNaWEJ2YzJsMGIzSjVmVnh1SUNBZ0lDb3ZYRzRnSUNCblpYUlNaWEJ2S0hWelpYSXNJSEpsY0c4cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVbVZ3YjNOcGRHOXllU2gwYUdsekxsOW5aWFJHZFd4c1RtRnRaU2gxYzJWeUxDQnlaWEJ2S1N3Z2RHaHBjeTVmWDJGMWRHZ3NJSFJvYVhNdVgxOWhjR2xDWVhObEtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGNtVmhkR1VnWVNCdVpYY2dTWE56ZFdVZ2QzSmhjSEJsY2x4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFZ6WlhJZ0xTQjBhR1VnZFhObGNpQjNhRzhnYjNkdWN5QjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsY0c4Z0xTQjBhR1VnYm1GdFpTQnZaaUIwYUdVZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1NYTnpkV1Y5WEc0Z0lDQWdLaTljYmlBZ0lHZGxkRWx6YzNWbGN5aDFjMlZ5TENCeVpYQnZLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVsemMzVmxLSFJvYVhNdVgyZGxkRVoxYkd4T1lXMWxLSFZ6WlhJc0lISmxjRzhwTENCMGFHbHpMbDlmWVhWMGFDd2dkR2hwY3k1ZlgyRndhVUpoYzJVcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QlRaV0Z5WTJnZ2QzSmhjSEJsY2x4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEYxWlhKNUlDMGdkR2hsSUhGMVpYSjVJSFJ2SUhObFlYSmphQ0JtYjNKY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFObFlYSmphSDFjYmlBZ0lDQXFMMXh1SUNBZ2MyVmhjbU5vS0hGMVpYSjVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZObFlYSmphQ2h4ZFdWeWVTd2dkR2hwY3k1ZlgyRjFkR2dzSUhSb2FYTXVYMTloY0dsQ1lYTmxLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnVW1GMFpVeHBiV2wwSUhkeVlYQndaWEpjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUpoZEdWTWFXMXBkSDFjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBVbUYwWlV4cGJXbDBLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlCU1lYUmxUR2x0YVhRb2RHaHBjeTVmWDJGMWRHZ3NJSFJvYVhNdVgxOWhjR2xDWVhObEtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGNtVmhkR1VnWVNCdVpYY2dUV0Z5YTJSdmQyNGdkM0poY0hCbGNseHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1RXRnlhMlJ2ZDI1OVhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEUxaGNtdGtiM2R1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5ZWEpyWkc5M2JpaDBhR2x6TGw5ZllYVjBhQ3dnZEdocGN5NWZYMkZ3YVVKaGMyVXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUJRY205cVpXTjBJSGR5WVhCd1pYSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2NISnZhbVZqZEZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmFtVmpkSDFjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBVSEp2YW1WamRDaHBaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXFaV04wS0dsa0xDQjBhR2x6TGw5ZllYVjBhQ3dnZEdocGN5NWZYMkZ3YVVKaGMyVXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnZiWEIxZEdWeklIUm9aU0JtZFd4c0lISmxjRzl6YVhSdmNua2dibUZ0WlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFZ6WlhJZ0xTQjBhR1VnZFhObGNtNWhiV1VnS0c5eUlIUm9aU0JtZFd4c0lHNWhiV1VwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZ3YnlBdElIUm9aU0J5WlhCdmMybDBiM0o1SUc1aGJXVXNJRzExYzNRZ2JtOTBJR0psSUhCaGMzTmxaQ0JwWmlCZ2RYTmxjbUFnYVhNZ2RHaGxJR1oxYkd3Z2JtRnRaVnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQjBhR1VnY21Wd2IzTnBkRzl5ZVNkeklHWjFiR3dnYm1GdFpWeHVJQ0FnSUNvdlhHNGdJQ0JmWjJWMFJuVnNiRTVoYldVb2RYTmxjaXdnY21Wd2J5a2dlMXh1SUNBZ0lDQWdiR1YwSUdaMWJHeHVZVzFsSUQwZ2RYTmxjanRjYmx4dUlDQWdJQ0FnYVdZZ0tISmxjRzhwSUh0Y2JpQWdJQ0FnSUNBZ0lHWjFiR3h1WVcxbElEMGdZQ1I3ZFhObGNuMHZKSHR5WlhCdmZXQTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQm1kV3hzYm1GdFpUdGNiaUFnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JIYVhSSWRXSTdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2l0SHViLmpzLm1hcFxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNlcmlhbGl6cl8xID0gcmVxdWlyZShcInNlcmlhbGl6clwiKTtcbmZ1bmN0aW9uIF93YWxrKHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdvYmplY3QnICYmIHYpXG4gICAgICAgIE9iamVjdC5rZXlzKHYpLm1hcChmdW5jdGlvbiAoaykgeyByZXR1cm4gX3dhbGsodltrXSk7IH0pO1xuICAgIHJldHVybiB2O1xufVxuZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6cl8xLmN1c3RvbShfd2FsaywgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHY7IH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0KHMpIHtcbiAgICByZXR1cm4gcyA/IHNlcmlhbGl6cl8xLm9iamVjdChzKSA6IF9kZWZhdWx0KCk7XG59XG5mdW5jdGlvbiBsaXN0KHMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXpyXzEubGlzdChvYmplY3QocykpO1xufVxuZnVuY3Rpb24gbWFwKHMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXpyXzEubWFwKG9iamVjdChzKSk7XG59XG5leHBvcnRzLnR5cGVzID0geyBvYmplY3Q6IG9iamVjdCwgbGlzdDogbGlzdCwgbWFwOiBtYXAgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIvKlxuICogIGJhc2U2NC5qc1xuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtQ2xhdXNlIExpY2Vuc2UuXG4gKiAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogIFJlZmVyZW5jZXM6XG4gKiAgICBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NFxuICovXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZ2xvYmFsKVxuICAgICAgICA6IHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZFxuICAgICAgICA/IGRlZmluZShmYWN0b3J5KSA6IGZhY3RvcnkoZ2xvYmFsKVxufSgoXG4gICAgdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZlxuICAgICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93XG4gICAgICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxcbjogdGhpc1xuKSwgZnVuY3Rpb24oZ2xvYmFsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIGV4aXN0aW5nIHZlcnNpb24gZm9yIG5vQ29uZmxpY3QoKVxuICAgIGdsb2JhbCA9IGdsb2JhbCB8fCB7fTtcbiAgICB2YXIgX0Jhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7XG4gICAgdmFyIHZlcnNpb24gPSBcIjIuNS4yXCI7XG4gICAgLy8gaWYgbm9kZS5qcyBhbmQgTk9UIFJlYWN0IE5hdGl2ZSwgd2UgdXNlIEJ1ZmZlclxuICAgIHZhciBidWZmZXI7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBidWZmZXIgPSBldmFsKFwicmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyXCIpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBjb25zdGFudHNcbiAgICB2YXIgYjY0Y2hhcnNcbiAgICAgICAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4gICAgdmFyIGI2NHRhYiA9IGZ1bmN0aW9uKGJpbikge1xuICAgICAgICB2YXIgdCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJpbi5sZW5ndGg7IGkgPCBsOyBpKyspIHRbYmluLmNoYXJBdChpKV0gPSBpO1xuICAgICAgICByZXR1cm4gdDtcbiAgICB9KGI2NGNoYXJzKTtcbiAgICB2YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbiAgICAvLyBlbmNvZGVyIHN0dWZmXG4gICAgdmFyIGNiX3V0b2IgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmIChjLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIHJldHVybiBjYyA8IDB4ODAgPyBjXG4gICAgICAgICAgICAgICAgOiBjYyA8IDB4ODAwID8gKGZyb21DaGFyQ29kZSgweGMwIHwgKGNjID4+PiA2KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8IChjYyAmIDB4M2YpKSlcbiAgICAgICAgICAgICAgICA6IChmcm9tQ2hhckNvZGUoMHhlMCB8ICgoY2MgPj4+IDEyKSAmIDB4MGYpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKChjYyA+Pj4gIDYpICYgMHgzZikpXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoIGNjICAgICAgICAgJiAweDNmKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNjID0gMHgxMDAwMFxuICAgICAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgwKSAtIDB4RDgwMCkgKiAweDQwMFxuICAgICAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgxKSAtIDB4REMwMCk7XG4gICAgICAgICAgICByZXR1cm4gKGZyb21DaGFyQ29kZSgweGYwIHwgKChjYyA+Pj4gMTgpICYgMHgwNykpXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGNjID4+PiAxMikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8ICgoY2MgPj4+ICA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKCBjYyAgICAgICAgICYgMHgzZikpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlX3V0b2IgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGRl18W15cXHgwMC1cXHg3Rl0vZztcbiAgICB2YXIgdXRvYiA9IGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgcmV0dXJuIHUucmVwbGFjZShyZV91dG9iLCBjYl91dG9iKTtcbiAgICB9O1xuICAgIHZhciBjYl9lbmNvZGUgPSBmdW5jdGlvbihjY2MpIHtcbiAgICAgICAgdmFyIHBhZGxlbiA9IFswLCAyLCAxXVtjY2MubGVuZ3RoICUgM10sXG4gICAgICAgIG9yZCA9IGNjYy5jaGFyQ29kZUF0KDApIDw8IDE2XG4gICAgICAgICAgICB8ICgoY2NjLmxlbmd0aCA+IDEgPyBjY2MuY2hhckNvZGVBdCgxKSA6IDApIDw8IDgpXG4gICAgICAgICAgICB8ICgoY2NjLmxlbmd0aCA+IDIgPyBjY2MuY2hhckNvZGVBdCgyKSA6IDApKSxcbiAgICAgICAgY2hhcnMgPSBbXG4gICAgICAgICAgICBiNjRjaGFycy5jaGFyQXQoIG9yZCA+Pj4gMTgpLFxuICAgICAgICAgICAgYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDEyKSAmIDYzKSxcbiAgICAgICAgICAgIHBhZGxlbiA+PSAyID8gJz0nIDogYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDYpICYgNjMpLFxuICAgICAgICAgICAgcGFkbGVuID49IDEgPyAnPScgOiBiNjRjaGFycy5jaGFyQXQob3JkICYgNjMpXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgICB9O1xuICAgIHZhciBidG9hID0gZ2xvYmFsLmJ0b2EgPyBmdW5jdGlvbihiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWwuYnRvYShiKTtcbiAgICB9IDogZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gYi5yZXBsYWNlKC9bXFxzXFxTXXsxLDN9L2csIGNiX2VuY29kZSk7XG4gICAgfTtcbiAgICB2YXIgX2VuY29kZSA9IGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgdmFyIGlzVWludDhBcnJheSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh1KSA9PT0gJ1tvYmplY3QgVWludDhBcnJheV0nO1xuICAgICAgICByZXR1cm4gaXNVaW50OEFycmF5ID8gdS50b1N0cmluZygnYmFzZTY0JylcbiAgICAgICAgICAgIDogYnRvYSh1dG9iKFN0cmluZyh1KSkpO1xuICAgIH1cbiAgICB2YXIgZW5jb2RlID0gZnVuY3Rpb24odSwgdXJpc2FmZSkge1xuICAgICAgICByZXR1cm4gIXVyaXNhZmVcbiAgICAgICAgICAgID8gX2VuY29kZSh1KVxuICAgICAgICAgICAgOiBfZW5jb2RlKFN0cmluZyh1KSkucmVwbGFjZSgvWytcXC9dL2csIGZ1bmN0aW9uKG0wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0wID09ICcrJyA/ICctJyA6ICdfJztcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoLz0vZywgJycpO1xuICAgIH07XG4gICAgdmFyIGVuY29kZVVSSSA9IGZ1bmN0aW9uKHUpIHsgcmV0dXJuIGVuY29kZSh1LCB0cnVlKSB9O1xuICAgIC8vIGRlY29kZXIgc3R1ZmZcbiAgICB2YXIgcmVfYnRvdSA9IC9bXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXXxbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfXxbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfS9nO1xuICAgIHZhciBjYl9idG91ID0gZnVuY3Rpb24oY2NjYykge1xuICAgICAgICBzd2l0Y2goY2NjYy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgdmFyIGNwID0gKCgweDA3ICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCAxOClcbiAgICAgICAgICAgICAgICB8ICAgICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgMTIpXG4gICAgICAgICAgICAgICAgfCAgICAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpIDw8ICA2KVxuICAgICAgICAgICAgICAgIHwgICAgICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDMpKSxcbiAgICAgICAgICAgIG9mZnNldCA9IGNwIC0gMHgxMDAwMDtcbiAgICAgICAgICAgIHJldHVybiAoZnJvbUNoYXJDb2RlKChvZmZzZXQgID4+PiAxMCkgKyAweEQ4MDApXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKChvZmZzZXQgJiAweDNGRikgKyAweERDMDApKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIGZyb21DaGFyQ29kZShcbiAgICAgICAgICAgICAgICAoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgfCAgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpXG4gICAgICAgICAgICApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICBmcm9tQ2hhckNvZGUoXG4gICAgICAgICAgICAgICAgKCgweDFmICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCA2KVxuICAgICAgICAgICAgICAgICAgICB8ICAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBidG91ID0gZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gYi5yZXBsYWNlKHJlX2J0b3UsIGNiX2J0b3UpO1xuICAgIH07XG4gICAgdmFyIGNiX2RlY29kZSA9IGZ1bmN0aW9uKGNjY2MpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNjY2MubGVuZ3RoLFxuICAgICAgICBwYWRsZW4gPSBsZW4gJSA0LFxuICAgICAgICBuID0gKGxlbiA+IDAgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMCldIDw8IDE4IDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDEgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMSldIDw8IDEyIDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDIgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMildIDw8ICA2IDogMClcbiAgICAgICAgICAgIHwgKGxlbiA+IDMgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMyldICAgICAgIDogMCksXG4gICAgICAgIGNoYXJzID0gW1xuICAgICAgICAgICAgZnJvbUNoYXJDb2RlKCBuID4+PiAxNiksXG4gICAgICAgICAgICBmcm9tQ2hhckNvZGUoKG4gPj4+ICA4KSAmIDB4ZmYpLFxuICAgICAgICAgICAgZnJvbUNoYXJDb2RlKCBuICAgICAgICAgJiAweGZmKVxuICAgICAgICBdO1xuICAgICAgICBjaGFycy5sZW5ndGggLT0gWzAsIDAsIDIsIDFdW3BhZGxlbl07XG4gICAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgICB9O1xuICAgIHZhciBfYXRvYiA9IGdsb2JhbC5hdG9iID8gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsLmF0b2IoYSk7XG4gICAgfSA6IGZ1bmN0aW9uKGEpe1xuICAgICAgICByZXR1cm4gYS5yZXBsYWNlKC9cXFN7MSw0fS9nLCBjYl9kZWNvZGUpO1xuICAgIH07XG4gICAgdmFyIGF0b2IgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgIHJldHVybiBfYXRvYihTdHJpbmcoYSkucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9dL2csICcnKSk7XG4gICAgfTtcbiAgICB2YXIgX2RlY29kZSA9IGJ1ZmZlciA/XG4gICAgICAgIGJ1ZmZlci5mcm9tICYmIFVpbnQ4QXJyYXkgJiYgYnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbVxuICAgICAgICA/IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoYS5jb25zdHJ1Y3RvciA9PT0gYnVmZmVyLmNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgID8gYSA6IGJ1ZmZlci5mcm9tKGEsICdiYXNlNjQnKSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoYS5jb25zdHJ1Y3RvciA9PT0gYnVmZmVyLmNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgID8gYSA6IG5ldyBidWZmZXIoYSwgJ2Jhc2U2NCcpKS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIDogZnVuY3Rpb24oYSkgeyByZXR1cm4gYnRvdShfYXRvYihhKSkgfTtcbiAgICB2YXIgZGVjb2RlID0gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBfZGVjb2RlKFxuICAgICAgICAgICAgU3RyaW5nKGEpLnJlcGxhY2UoL1stX10vZywgZnVuY3Rpb24obTApIHsgcmV0dXJuIG0wID09ICctJyA/ICcrJyA6ICcvJyB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL10vZywgJycpXG4gICAgICAgICk7XG4gICAgfTtcbiAgICB2YXIgbm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgQmFzZTY0ID0gZ2xvYmFsLkJhc2U2NDtcbiAgICAgICAgZ2xvYmFsLkJhc2U2NCA9IF9CYXNlNjQ7XG4gICAgICAgIHJldHVybiBCYXNlNjQ7XG4gICAgfTtcbiAgICAvLyBleHBvcnQgQmFzZTY0XG4gICAgZ2xvYmFsLkJhc2U2NCA9IHtcbiAgICAgICAgVkVSU0lPTjogdmVyc2lvbixcbiAgICAgICAgYXRvYjogYXRvYixcbiAgICAgICAgYnRvYTogYnRvYSxcbiAgICAgICAgZnJvbUJhc2U2NDogZGVjb2RlLFxuICAgICAgICB0b0Jhc2U2NDogZW5jb2RlLFxuICAgICAgICB1dG9iOiB1dG9iLFxuICAgICAgICBlbmNvZGU6IGVuY29kZSxcbiAgICAgICAgZW5jb2RlVVJJOiBlbmNvZGVVUkksXG4gICAgICAgIGJ0b3U6IGJ0b3UsXG4gICAgICAgIGRlY29kZTogZGVjb2RlLFxuICAgICAgICBub0NvbmZsaWN0OiBub0NvbmZsaWN0LFxuICAgICAgICBfX2J1ZmZlcl9fOiBidWZmZXJcbiAgICB9O1xuICAgIC8vIGlmIEVTNSBpcyBhdmFpbGFibGUsIG1ha2UgQmFzZTY0LmV4dGVuZFN0cmluZygpIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBub0VudW0gPSBmdW5jdGlvbih2KXtcbiAgICAgICAgICAgIHJldHVybiB7dmFsdWU6dixlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9O1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWwuQmFzZTY0LmV4dGVuZFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlLCAnZnJvbUJhc2U2NCcsIG5vRW51bShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGUodGhpcylcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZSwgJ3RvQmFzZTY0Jywgbm9FbnVtKGZ1bmN0aW9uICh1cmlzYWZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGUodGhpcywgdXJpc2FmZSlcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZSwgJ3RvQmFzZTY0VVJJJywgbm9FbnVtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy9cbiAgICAvLyBleHBvcnQgQmFzZTY0IHRvIHRoZSBuYW1lc3BhY2VcbiAgICAvL1xuICAgIGlmIChnbG9iYWxbJ01ldGVvciddKSB7IC8vIE1ldGVvci5qc1xuICAgICAgICBCYXNlNjQgPSBnbG9iYWwuQmFzZTY0O1xuICAgIH1cbiAgICAvLyBtb2R1bGUuZXhwb3J0cyBhbmQgQU1EIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuXG4gICAgLy8gbW9kdWxlLmV4cG9ydHMgaGFzIHByZWNlZGVuY2UuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzLkJhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKXsgcmV0dXJuIGdsb2JhbC5CYXNlNjQgfSk7XG4gICAgfVxuICAgIC8vIHRoYXQncyBpdCFcbiAgICByZXR1cm4ge0Jhc2U2NDogZ2xvYmFsLkJhc2U2NH1cbn0pKTtcblxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZW50cmllc1wiKTsiLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgRE9NSXRlcmFibGVzID0gKCdDU1NSdWxlTGlzdCxDU1NTdHlsZURlY2xhcmF0aW9uLENTU1ZhbHVlTGlzdCxDbGllbnRSZWN0TGlzdCxET01SZWN0TGlzdCxET01TdHJpbmdMaXN0LCcgK1xuICAnRE9NVG9rZW5MaXN0LERhdGFUcmFuc2Zlckl0ZW1MaXN0LEZpbGVMaXN0LEhUTUxBbGxDb2xsZWN0aW9uLEhUTUxDb2xsZWN0aW9uLEhUTUxGb3JtRWxlbWVudCxIVE1MU2VsZWN0RWxlbWVudCwnICtcbiAgJ01lZGlhTGlzdCxNaW1lVHlwZUFycmF5LE5hbWVkTm9kZU1hcCxOb2RlTGlzdCxQYWludFJlcXVlc3RMaXN0LFBsdWdpbixQbHVnaW5BcnJheSxTVkdMZW5ndGhMaXN0LFNWR051bWJlckxpc3QsJyArXG4gICdTVkdQYXRoU2VnTGlzdCxTVkdQb2ludExpc3QsU1ZHU3RyaW5nTGlzdCxTVkdUcmFuc2Zvcm1MaXN0LFNvdXJjZUJ1ZmZlckxpc3QsU3R5bGVTaGVldExpc3QsVGV4dFRyYWNrQ3VlTGlzdCwnICtcbiAgJ1RleHRUcmFja0xpc3QsVG91Y2hMaXN0Jykuc3BsaXQoJywnKTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBET01JdGVyYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBET01JdGVyYWJsZXNbaV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGlmIChzYWZlICYmIHRhcmdldFtrZXldKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9IHJldHVybiB0YXJnZXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaW5ET00gPSByZXF1aXJlKCdkb20taGVscGVycy91dGlsL2luRE9NJyk7XG5cbnZhciBfaW5ET00yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5ET00pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnQnKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9uZW50T3JFbGVtZW50KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2dldENvbnRhaW5lciA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0Q29udGFpbmVyJyk7XG5cbnZhciBfZ2V0Q29udGFpbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbnRhaW5lcik7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJy4vdXRpbHMvb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbnZhciBfTGVnYWN5UG9ydGFsID0gcmVxdWlyZSgnLi9MZWdhY3lQb3J0YWwnKTtcblxudmFyIF9MZWdhY3lQb3J0YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGVnYWN5UG9ydGFsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBgPFBvcnRhbC8+YCBjb21wb25lbnQgcmVuZGVycyBpdHMgY2hpbGRyZW4gaW50byBhIG5ldyBcInN1YnRyZWVcIiBvdXRzaWRlIG9mIGN1cnJlbnQgY29tcG9uZW50IGhpZXJhcmNoeS5cbiAqIFlvdSBjYW4gdGhpbmsgb2YgaXQgYXMgYSBkZWNsYXJhdGl2ZSBgYXBwZW5kQ2hpbGQoKWAsIG9yIGpRdWVyeSdzIGAkLmZuLmFwcGVuZFRvKClgLlxuICogVGhlIGNoaWxkcmVuIG9mIGA8UG9ydGFsLz5gIGNvbXBvbmVudCB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSBgY29udGFpbmVyYCBzcGVjaWZpZWQuXG4gKi9cbnZhciBQb3J0YWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWwoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3J0YWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmdldE1vdW50Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFBvcnRhbC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaWYgKCFfaW5ET00yLmRlZmF1bHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29udGFpbmVyID0gdGhpcy5wcm9wcy5jb250YWluZXI7XG5cbiAgICBpZiAodHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGFpbmVyID0gY29udGFpbmVyKCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5lciAmJiAhX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKGNvbnRhaW5lcikpIHtcbiAgICAgIC8vIFRoZSBjb250YWluZXIgaXMgYSBSZWFjdCBjb21wb25lbnQgdGhhdCBoYXMgbm90IHlldCBiZWVuIHJlbmRlcmVkLlxuICAgICAgLy8gRG9uJ3Qgc2V0IHRoZSBjb250YWluZXIgbm9kZSB5ZXQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRDb250YWluZXIoY29udGFpbmVyKTtcbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlKSB7XG4gICAgICB0aGlzLnNldENvbnRhaW5lcih0aGlzLnByb3BzLmNvbnRhaW5lcik7XG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKHRoaXMucHJvcHMub25SZW5kZXJlZCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm9uUmVuZGVyZWQpIHtcbiAgICAgIHRoaXMucHJvcHMub25SZW5kZXJlZCgpO1xuICAgIH1cbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5jb250YWluZXIgIT09IHRoaXMucHJvcHMuY29udGFpbmVyKSB7XG4gICAgICB0aGlzLnNldENvbnRhaW5lcihuZXh0UHJvcHMuY29udGFpbmVyKTtcbiAgICB9XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSBudWxsO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuc2V0Q29udGFpbmVyID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkoY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKHRoaXMpLmJvZHkpO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuICYmIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPyBfcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUpIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUG9ydGFsO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUG9ydGFsLmRpc3BsYXlOYW1lID0gJ1BvcnRhbCc7XG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSBOb2RlLCBDb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIFBvcnRhbCBjaGlsZHJlblxuICAgKiBhcHBlbmRlZCB0byBpdC5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19jb21wb25lbnRPckVsZW1lbnQyLmRlZmF1bHQsIF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY10pLFxuXG4gIG9uUmVuZGVyZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9yZWFjdERvbTIuZGVmYXVsdC5jcmVhdGVQb3J0YWwgPyBQb3J0YWwgOiBfTGVnYWN5UG9ydGFsMi5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gb2Zmc2V0O1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb250YWluc1wiKSk7XG5cbnZhciBfaXNXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzV2luZG93XCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIG9mZnNldChub2RlKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobm9kZSksXG4gICAgICB3aW4gPSAoMCwgX2lzV2luZG93LmRlZmF1bHQpKGRvYyksXG4gICAgICBkb2NFbGVtID0gZG9jICYmIGRvYy5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBib3ggPSB7XG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHdpZHRoOiAwXG4gIH07XG4gIGlmICghZG9jKSByZXR1cm47IC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXG4gIGlmICghKDAsIF9jb250YWlucy5kZWZhdWx0KShkb2NFbGVtLCBub2RlKSkgcmV0dXJuIGJveDtcbiAgaWYgKG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSB1bmRlZmluZWQpIGJveCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIElFOCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZG9lc24ndCBzdXBwb3J0IHdpZHRoICYgaGVpZ2h0XG5cbiAgYm94ID0ge1xuICAgIHRvcDogYm94LnRvcCArICh3aW4ucGFnZVlPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxUb3ApIC0gKGRvY0VsZW0uY2xpZW50VG9wIHx8IDApLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgKHdpbi5wYWdlWE9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbExlZnQpIC0gKGRvY0VsZW0uY2xpZW50TGVmdCB8fCAwKSxcbiAgICB3aWR0aDogKGJveC53aWR0aCA9PSBudWxsID8gbm9kZS5vZmZzZXRXaWR0aCA6IGJveC53aWR0aCkgfHwgMCxcbiAgICBoZWlnaHQ6IChib3guaGVpZ2h0ID09IG51bGwgPyBub2RlLm9mZnNldEhlaWdodCA6IGJveC5oZWlnaHQpIHx8IDBcbiAgfTtcbiAgcmV0dXJuIGJveDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBjYW1lbGl6ZVN0eWxlTmFtZTtcblxudmFyIF9jYW1lbGl6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY2FtZWxpemVcIikpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMmFlYjhhMmE2YmViMDA2MTdhNDIxN2Y3ZjgyODQ5MjRmYTJhZDgxOS9zcmMvdmVuZG9yL2NvcmUvY2FtZWxpemVTdHlsZU5hbWUuanNcbiAqL1xudmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG5cbmZ1bmN0aW9uIGNhbWVsaXplU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gKDAsIF9jYW1lbGl6ZS5kZWZhdWx0KShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsVG9wO1xuXG52YXIgX2lzV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSk7XG5cbmZ1bmN0aW9uIHNjcm9sbFRvcChub2RlLCB2YWwpIHtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cuZGVmYXVsdCkobm9kZSk7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHdpbiA/ICdwYWdlWU9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VZT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgOiBub2RlLnNjcm9sbFRvcDtcbiAgaWYgKHdpbikgd2luLnNjcm9sbFRvKCdwYWdlWE9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VYT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LCB2YWwpO2Vsc2Ugbm9kZS5zY3JvbGxUb3AgPSB2YWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAobm9kZSwgZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgKDAsIF9vbjIuZGVmYXVsdCkobm9kZSwgZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpO1xuXG4gIHJldHVybiB7XG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAoMCwgX29mZjIuZGVmYXVsdCkobm9kZSwgZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBfb24gPSByZXF1aXJlKCdkb20taGVscGVycy9ldmVudHMvb24nKTtcblxudmFyIF9vbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbik7XG5cbnZhciBfb2ZmID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvZXZlbnRzL29mZicpO1xuXG52YXIgX29mZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vZmYpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvblwiKSk7XG5cbnZhciBfZmFkZVN0eWxlcztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGZhZGUgaW4gb3IgZmFkZSBvdXQgYW5pbWF0aW9uXG4gICAqL1xuICBpbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdhaXQgdW50aWwgdGhlIGZpcnN0IFwiZW50ZXJcIiB0cmFuc2l0aW9uIHRvIG1vdW50IHRoZSBjb21wb25lbnQgKGFkZCBpdCB0byB0aGUgRE9NKVxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVW5tb3VudCB0aGUgY29tcG9uZW50IChyZW1vdmUgaXQgZnJvbSB0aGUgRE9NKSB3aGVuIGl0IGlzIGZhZGVkIG91dFxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFJ1biB0aGUgZmFkZSBpbiBhbmltYXRpb24gd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cywgaWYgaXQgaXMgaW5pdGlhbGx5XG4gICAqIHNob3duXG4gICAqL1xuICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBEdXJhdGlvbiBvZiB0aGUgZmFkZSBhbmltYXRpb24gaW4gbWlsbGlzZWNvbmRzLCB0byBlbnN1cmUgdGhhdCBmaW5pc2hpbmdcbiAgICogY2FsbGJhY2tzIGFyZSBmaXJlZCBldmVuIGlmIHRoZSBvcmlnaW5hbCBicm93c2VyIHRyYW5zaXRpb24gZW5kIGV2ZW50cyBhcmVcbiAgICogY2FuY2VsZWRcbiAgICovXG4gIHRpbWVvdXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGZhZGVzIGluXG4gICAqL1xuICBvbkVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBzdGFydHMgdG8gZmFkZSBpblxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBoYXMgY29tcG9uZW50IGZhZGVkIGluXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBmYWRlcyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgc3RhcnRzIHRvIGZhZGUgb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBmYWRlZCBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgdGltZW91dDogMzAwLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZVxufTtcbnZhciBmYWRlU3R5bGVzID0gKF9mYWRlU3R5bGVzID0ge30sIF9mYWRlU3R5bGVzW19UcmFuc2l0aW9uLkVOVEVSSU5HXSA9ICdpbicsIF9mYWRlU3R5bGVzW19UcmFuc2l0aW9uLkVOVEVSRURdID0gJ2luJywgX2ZhZGVTdHlsZXMpO1xuXG52YXIgRmFkZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZhZGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZhZGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZhZGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbi5kZWZhdWx0LCBwcm9wcywgZnVuY3Rpb24gKHN0YXR1cywgaW5uZXJQcm9wcykge1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgaW5uZXJQcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgnZmFkZScsIGNsYXNzTmFtZSwgY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBmYWRlU3R5bGVzW3N0YXR1c10pXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEZhZGU7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkZhZGUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRmFkZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgX2RlZmF1bHQgPSBGYWRlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbGJhclNpemU7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2luRE9NXCIpKTtcblxudmFyIHNpemU7XG5cbmZ1bmN0aW9uIHNjcm9sbGJhclNpemUocmVjYWxjKSB7XG4gIGlmICghc2l6ZSAmJiBzaXplICE9PSAwIHx8IHJlY2FsYykge1xuICAgIGlmIChfaW5ET00uZGVmYXVsdCkge1xuICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUud2lkdGggPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICBzaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaXplO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFzQ2xhc3M7XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO2Vsc2UgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBpc092ZXJmbG93aW5nO1xuXG52YXIgX2lzV2luZG93ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvcXVlcnkvaXNXaW5kb3cnKTtcblxudmFyIF9pc1dpbmRvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1dpbmRvdyk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0JvZHkobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZHknO1xufVxuXG5mdW5jdGlvbiBib2R5SXNPdmVyZmxvd2luZyhub2RlKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKG5vZGUpO1xuICB2YXIgd2luID0gKDAsIF9pc1dpbmRvdzIuZGVmYXVsdCkoZG9jKTtcbiAgdmFyIGZ1bGxXaWR0aCA9IHdpbi5pbm5lcldpZHRoO1xuXG4gIC8vIFN1cHBvcnQ6IGllOCwgbm8gaW5uZXJXaWR0aFxuICBpZiAoIWZ1bGxXaWR0aCkge1xuICAgIHZhciBkb2N1bWVudEVsZW1lbnRSZWN0ID0gZG9jLmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBmdWxsV2lkdGggPSBkb2N1bWVudEVsZW1lbnRSZWN0LnJpZ2h0IC0gTWF0aC5hYnMoZG9jdW1lbnRFbGVtZW50UmVjdC5sZWZ0KTtcbiAgfVxuXG4gIHJldHVybiBkb2MuYm9keS5jbGllbnRXaWR0aCA8IGZ1bGxXaWR0aDtcbn1cblxuZnVuY3Rpb24gaXNPdmVyZmxvd2luZyhjb250YWluZXIpIHtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cyLmRlZmF1bHQpKGNvbnRhaW5lcik7XG5cbiAgcmV0dXJuIHdpbiB8fCBpc0JvZHkoY29udGFpbmVyKSA/IGJvZHlJc092ZXJmbG93aW5nKGNvbnRhaW5lcikgOiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSAnTElDRU5TRScgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbic7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwJztcbmltcG9ydCBNb2RhbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL01vZGFsJztcblxuaW1wb3J0IHsgaG90IH0gZnJvbSAncmVhY3QtaG90LWxvYWRlcic7XG5cbmltcG9ydCBUb3BCYXIgZnJvbSAnLi9Ub3BCYXInO1xuaW1wb3J0IEZpbGVBY3Rpb25zIGZyb20gJy4vRmlsZUFjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25MaXN0IGZyb20gJy4vQ29sbGVjdGlvbkxpc3QnO1xuaW1wb3J0IEdyb3VwTGlzdCBmcm9tICcuL0dyb3VwTGlzdCc7XG5pbXBvcnQgUHJvcGVydHlMaXN0IGZyb20gJy4vUHJvcGVydHlMaXN0JztcbmltcG9ydCBSZXF1aXJlbWVudExpc3QgZnJvbSAnLi9SZXF1aXJlbWVudExpc3QnO1xuaW1wb3J0IFRhc2tMaXN0IGZyb20gJy4vVGFza0xpc3QnO1xuaW1wb3J0IE1haW5FZGl0b3IgZnJvbSAnLi9NYWluRWRpdG9yJztcblxuaW1wb3J0IHN0b3JlIGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGNsYXNzIFRvcG9sb2d5RWRpdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgQG9ic2VydmFibGUgc2hvd1Jlc2V0TW9kYWwgPSBmYWxzZTtcblxuICBAYWN0aW9uIG9wZW5SZXNldE1vZGFsID0gKCkgPT4geyB0aGlzLnNob3dSZXNldE1vZGFsID0gdHJ1ZTsgfVxuICBAYWN0aW9uIGNsb3NlUmVzZXRNb2RhbCA9ICgpID0+IHsgdGhpcy5zaG93UmVzZXRNb2RhbCA9IGZhbHNlOyB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBwcm9wZXJ0eUNoZWNrYm94ZXMgPSBbXTtcbiAgICBsZXQgdGFza0NoZWNrYm94ZXMgPSBbXTtcbiAgICBsZXQgY29sbGVjdGlvbkNoZWNrYm94ZXMgPSBbXTtcbiAgICBsZXQgcmVxdWlyZW1lbnRPcHRpb25zID0gW107XG5cbiAgICBzdG9yZS5wcm9wZXJ0aWVzLmZvckVhY2goKHAsIGkpID0+IHtcbiAgICAgIHByb3BlcnR5Q2hlY2tib3hlcy5wdXNoKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtcHJvcGVydHlcIiBrZXk9eyd0LWJveCcgKyBpfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiIHRpdGxlPXtwLmlkfT57cC5pZH08L2Rpdj5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNvbXBvbmVudENsYXNzPVwic2VsZWN0XCIgcGxhY2Vob2xkZXI9XCJcIiBkZWZhdWx0VmFsdWU9XCJcIiBjbGFzc05hbWU9XCJhY2Nlc3NTZWxlY3RcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJlYWRcIj5yZWFkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ3cml0ZVwiPndyaXRlPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWFkd3JpdGVcIj5yZWFkd3JpdGU8L29wdGlvbj5cbiAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHN0b3JlLnRhc2tzLmZvckVhY2goKHQsIGkpID0+IHtcbiAgICAgIHRhc2tDaGVja2JveGVzLnB1c2goXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC10YXNrXCIga2V5PXsndC1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17dC5pZH0+e3QuaWR9PC9kaXY+XG4gICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJhZGQtY2ctdGMtY291bnRlclwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgZGVmYXVsdFZhbHVlPVwiMFwiIC8+XG4gICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHN0b3JlLmNvbGxlY3Rpb25zLmZvckVhY2goKGMsIGkpID0+IHtcbiAgICAgIGNvbGxlY3Rpb25DaGVja2JveGVzLnB1c2goXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC1jb2xsZWN0aW9uXCIga2V5PXsnYy1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17Yy5pZH0+e2MuaWR9PC9kaXY+XG4gICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJhZGQtY2ctdGMtY291bnRlclwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgZGVmYXVsdFZhbHVlPVwiMFwiIC8+XG4gICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHN0b3JlLnJlcXVpcmVtZW50cy5mb3JFYWNoKChyLCBpKSA9PiB7IC8vIFRPRE86IGhhbmRsZSBtdWx0aXBsZVxuICAgICAgcmVxdWlyZW1lbnRPcHRpb25zLnB1c2goPG9wdGlvbiB2YWx1ZT17ci5pZH0ga2V5PXsnb3B0aW9uJyArIGl9PntyLmlkfTwvb3B0aW9uPik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEZyYWdtZW50PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW4tY29udGFpbmVyXCI+XG4gICAgICAgICAgPFRvcEJhciAvPlxuXG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAgbGVmdC1wYW5lXCI+XG4gICAgICAgICAgICA8RmlsZUFjdGlvbnMgLz5cbiAgICAgICAgICAgIDxQcm9wZXJ0eUxpc3QgLz5cbiAgICAgICAgICAgIDxUYXNrTGlzdCBwcm9wZXJ0eUNoZWNrYm94ZXM9e3Byb3BlcnR5Q2hlY2tib3hlc30gcmVxdWlyZW1lbnRPcHRpb25zPXtyZXF1aXJlbWVudE9wdGlvbnN9IC8+XG4gICAgICAgICAgICA8Q29sbGVjdGlvbkxpc3QgdGFza0NoZWNrYm94ZXM9e3Rhc2tDaGVja2JveGVzfSByZXF1aXJlbWVudE9wdGlvbnM9e3JlcXVpcmVtZW50T3B0aW9uc30gLz5cbiAgICAgICAgICAgIDxHcm91cExpc3QgdGFza0NoZWNrYm94ZXM9e3Rhc2tDaGVja2JveGVzfSBjb2xsZWN0aW9uQ2hlY2tib3hlcz17Y29sbGVjdGlvbkNoZWNrYm94ZXN9IC8+XG4gICAgICAgICAgICA8UmVxdWlyZW1lbnRMaXN0IC8+XG5cbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tZGVmYXVsdFwiIG9uQ2xpY2s9e3RoaXMub3BlblJlc2V0TW9kYWx9PlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlXCIgdGl0bGU9XCJyZXNldCB0aGUgdG9wb2xvZ3lcIj48L3NwYW4+IHJlc2V0XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLnNob3dSZXNldE1vZGFsfSBvbkhpZGU9e3RoaXMuY2xvc2VSZXNldE1vZGFsfT5cbiAgICAgICAgICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPlJlc2V0IHRvcG9sb2d5PzwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgICA8cD5UaGlzIHdpbGwgY2xlYXIgYWxsIHRoZSBjb250ZW50cyBvZiB0aGUgdG9wb2xvZ3kuPC9wPlxuICAgICAgICAgICAgICAgICAgPHA+VW5zYXZlZCBjaGFuZ2VzIHdpbGwgYmUgbG9zdC48L3A+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGJzU3R5bGU9XCJkYW5nZXJcIiBvbkNsaWNrPXsoKSA9PiB7IHN0b3JlLnJlc2V0KCk7IHRoaXMuY2xvc2VSZXNldE1vZGFsKCk7fSB9PlJlc2V0PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuY2xvc2VSZXNldE1vZGFsfT5DYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgPC9Nb2RhbD5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cblxuICAgICAgICAgIDxNYWluRWRpdG9yIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhvdChtb2R1bGUpKFRvcG9sb2d5RWRpdG9yKTtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSBcIkxJQ0VOU0VcIiAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBzdG9yZSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBUb3BCYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBAb2JzZXJ2YWJsZSBlZGl0aW5nID0gZmFsc2U7XG5cbiAgQGFjdGlvbiB0b2dnbGVFZGl0aW5nID0gKCkgPT4geyB0aGlzLmVkaXRpbmcgPSAhKHRoaXMuZWRpdGluZyk7IH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgaGFuZGxlVG9wb2xvZ3lJZENoYW5nZSA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHN0b3JlLnNldFRvcG9sb2d5SWQoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSk7XG4gICAgdGhpcy50b2dnbGVFZGl0aW5nKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxuYXYgY2xhc3NOYW1lPVwiaGVhZGVyLXBhbmUgbmF2YmFyIG5hdmJhci1pbnZlcnNlXCIgcm9sZT1cIm5hdmlnYXRpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmJhci1oZWFkZXJcIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cIm5hdmJhci10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjYnMtZXhhbXBsZS1uYXZiYXItY29sbGFwc2UtMVwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzci1vbmx5XCI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImljb24tYmFyXCI+PC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uLWJhclwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvbi1iYXJcIj48L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cIm5hdmJhci1icmFuZFwiIGhyZWY9XCIjXCI+RERTIFRvcG9sb2d5IEVkaXRvcjwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZVwiIGlkPVwiYnMtZXhhbXBsZS1uYXZiYXItY29sbGFwc2UtMVwiPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm5hdiBuYXZiYXItbmF2XCI+XG4gICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJhY3RpdmVcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5lZGl0aW5nID9cbiAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cIm5hbWUtY2hhbmdlXCIgb25TdWJtaXQ9e3RoaXMuaGFuZGxlVG9wb2xvZ3lJZENoYW5nZX0+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cyBkZWZhdWx0VmFsdWU9e3N0b3JlLnRvcG9sb2d5SWR9PjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJva1wiID48L2lucHV0PlxuICAgICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUVkaXRpbmd9PntzdG9yZS50b3BvbG9neUlkfTwvYT59XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbmF2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSAnTElDRU5TRScgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB2a2JlYXV0aWZ5IGZyb20gJ3ZrYmVhdXRpZnknO1xuaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5cbmltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbic7XG5pbXBvcnQgQnV0dG9uR3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b25Hcm91cCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwJztcbmltcG9ydCBPdmVybGF5VHJpZ2dlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5pbXBvcnQgUmFkaW8gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9SYWRpbyc7XG5cbmltcG9ydCBHaXRIdWIgZnJvbSAnZ2l0aHViLWFwaSc7XG5cbmltcG9ydCBzdG9yZSwgeyBNQ29sbGVjdGlvbiwgTUdyb3VwLCBNTWFpbiwgTVByb3BlcnR5LCBNUmVxdWlyZW1lbnQsIE1UYXNrLCBNVGFza1Byb3BlcnR5LCBNVmFyaWFibGUgfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBGaWxlQWN0aW9ucyBleHRlbmRzIENvbXBvbmVudCB7XG4gIEBvYnNlcnZhYmxlIHJlbW90ZUZpbGVzID0gW107XG4gIEBvYnNlcnZhYmxlIGVycm9yID0gJyc7XG5cbiAgQGFjdGlvbiB1cGRhdGVSZW1vdGVGaWxlcyA9IChmaWxlcykgPT4geyB0aGlzLnJlbW90ZUZpbGVzID0gZmlsZXM7IH1cbiAgQGFjdGlvbiBhZGRSZW1vdGVGaWxlID0gKGZpbGUpID0+IHsgdGhpcy5yZW1vdGVGaWxlcy5wdXNoKGZpbGUpOyB9XG4gIEBhY3Rpb24gc2V0RXJyb3IgPSAoZSkgPT4geyB0aGlzLmVycm9yID0gZTsgfVxuXG4gIHJlbW90ZVVzZXIgPSAnQWxpY2VPMkdyb3VwJztcbiAgcmVtb3RlUmVwbyA9ICdBbGljZU8yJztcbiAgcmVtb3RlUGF0aCA9ICdDb21tb24vVG9wb2xvZ2llcyc7XG5cbiAgZmV0Y2hCdG47XG5cbiAgY2FuY2VsRmV0Y2ggPSAoKSA9PiB7XG4gICAgdGhpcy51cGRhdGVSZW1vdGVGaWxlcyhbXSk7XG4gICAgdGhpcy5zZXRFcnJvcignJyk7XG4gIH1cblxuICBoYW5kbGVGZXRjaCA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgZmlsZVNlbGVjdGlvbnMgPSBlLnRhcmdldFswXS5mb3JtWydmaWxlcyddO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlU2VsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZpbGVTZWxlY3Rpb25zLml0ZW0oaSkuY2hlY2tlZCkge1xuICAgICAgICBjb25zdCBnaXRodWIgPSBuZXcgR2l0SHViKCk7XG5cbiAgICAgICAgY29uc3QgcmVwbyA9IGdpdGh1Yi5nZXRSZXBvKHRoaXMucmVtb3RlVXNlciwgdGhpcy5yZW1vdGVSZXBvKTtcbiAgICAgICAgcmVwby5nZXRDb250ZW50cygnZGV2JywgJ0NvbW1vbi9Ub3BvbG9naWVzJyArICcvJyArIHRoaXMucmVtb3RlRmlsZXNbaV0ubmFtZSwgdHJ1ZSwgKGVyciwgY29udGVudHMpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnByb2Nlc3NYTUwoY29udGVudHMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmZldGNoQnRuLmhpZGUoKTtcbiAgfVxuXG4gIGZldGNoVG9wb2xvZ2llcyA9ICgpID0+IHtcbiAgICBjb25zdCBnaXRodWIgPSBuZXcgR2l0SHViKCk7XG5cbiAgICB0aGlzLnNldEVycm9yKCcnKTtcblxuICAgIGNvbnN0IHJlcG8gPSBnaXRodWIuZ2V0UmVwbyh0aGlzLnJlbW90ZVVzZXIsIHRoaXMucmVtb3RlUmVwbyk7XG5cbiAgICByZXBvLmdldENvbnRlbnRzKCdkZXYnLCB0aGlzLnJlbW90ZVBhdGgsIHRydWUsIChlcnIsIGNvbnRlbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIGlmICgncmVzcG9uc2UnIGluIGVycikge1xuICAgICAgICAgIHRoaXMuc2V0RXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEubWVzc2FnZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnLiBSYXRlIGxpbWl0OiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5yZXNwb25zZS5oZWFkZXJzWyd4LXJhdGVsaW1pdC1saW1pdCddICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcsIHJlbWFpbmluZzogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIucmVzcG9uc2UuaGVhZGVyc1sneC1yYXRlbGltaXQtcmVtYWluaW5nJ10gK1xuICAgICAgICAgICAgICAgICAgICAgICAgJywgcmVzZXQgaW46ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoZXJyLnJlc3BvbnNlLmhlYWRlcnNbJ3gtcmF0ZWxpbWl0LXJlc2V0J10gKiAxMDAwKSArICcuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRFcnJvcihKU09OLnN0cmluZ2lmeShlcnIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnRzLmZvckVhY2gob2JqZWN0ID0+IHtcbiAgICAgICAgaWYgKG9iamVjdC5uYW1lLnN1YnN0cihvYmplY3QubmFtZS5sZW5ndGggLSA0KSAhPT0gJy54bWwnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2lnbm9yaW5nIGZpbGUgd2l0aCBub24tWE1MIGV4dGVuc2lvbjogJyArIG9iamVjdC5uYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWxlID0ge307XG4gICAgICAgIGZpbGUubmFtZSA9IG9iamVjdC5uYW1lO1xuICAgICAgICBmaWxlLnVybCA9IG9iamVjdC5kb3dubG9hZF91cmw7XG5cbiAgICAgICAgdGhpcy5hZGRSZW1vdGVGaWxlKGZpbGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcm9jZXNzWE1MID0gKHhtbFN0cmluZykgPT4ge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICBjb25zdCB2YXJpYWJsZXMgPSBbXTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gW107XG4gICAgY29uc3QgcmVxdWlyZW1lbnRzID0gW107XG4gICAgY29uc3QgdGFza3MgPSBbXTtcbiAgICBjb25zdCBjb2xsZWN0aW9ucyA9IFtdO1xuICAgIGNvbnN0IG1haW4gPSBuZXcgTU1haW47XG5cbiAgICBjb25zdCB4bWwgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbFN0cmluZywgJ2FwcGxpY2F0aW9uL3htbCcpO1xuXG4gICAgLy8gdG9wb2xvZ3kgbmFtZVxuICAgIHN0b3JlLnNldFRvcG9sb2d5SWQoeG1sLnF1ZXJ5U2VsZWN0b3IoJ3RvcG9sb2d5JykuZ2V0QXR0cmlidXRlKCdpZCcpKTtcblxuICAgIC8vIHZhcmlhYmxlc1xuICAgIHhtbC5xdWVyeVNlbGVjdG9yQWxsKCd0b3BvbG9neT52YXInKS5mb3JFYWNoKHYgPT4ge1xuICAgICAgY29uc3QgdmFyaWFibGUgPSBuZXcgTVZhcmlhYmxlO1xuXG4gICAgICB2YXJpYWJsZS5pZCA9IHYuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgdmFyaWFibGUudmFsdWUgPSB2LmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcblxuICAgICAgdmFyaWFibGVzLnB1c2godmFyaWFibGUpO1xuICAgIH0pO1xuICAgIHN0b3JlLnNldFZhcmlhYmxlcyh2YXJpYWJsZXMpO1xuXG4gICAgLy8gcHJvcGVydGllc1xuICAgIHhtbC5xdWVyeVNlbGVjdG9yQWxsKCd0b3BvbG9neT5wcm9wZXJ0eScpLmZvckVhY2gocCA9PiB7XG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IG5ldyBNUHJvcGVydHk7XG5cbiAgICAgIHByb3BlcnR5LmlkID0gcC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG5cbiAgICAgIHByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG4gICAgfSk7XG4gICAgc3RvcmUuc2V0UHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcblxuICAgIC8vIHJlcXVpcmVtZW50c1xuICAgIHhtbC5xdWVyeVNlbGVjdG9yQWxsKCd0b3BvbG9neT5kZWNscmVxdWlyZW1lbnQnKS5mb3JFYWNoKHIgPT4ge1xuICAgICAgY29uc3QgcmVxdWlyZW1lbnQgPSBuZXcgTVJlcXVpcmVtZW50O1xuXG4gICAgICByZXF1aXJlbWVudC5pZCA9IHIuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXG4gICAgICByLnF1ZXJ5U2VsZWN0b3JBbGwoJ2hvc3RQYXR0ZXJuJykuZm9yRWFjaChocCA9PiB7XG4gICAgICAgIHJlcXVpcmVtZW50LnR5cGUgPSBocC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTtcbiAgICAgICAgcmVxdWlyZW1lbnQudmFsdWUgPSBocC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICB9KTtcblxuICAgICAgcmVxdWlyZW1lbnRzLnB1c2gocmVxdWlyZW1lbnQpO1xuICAgIH0pO1xuICAgIHN0b3JlLnNldFJlcXVpcmVtZW50cyhyZXF1aXJlbWVudHMpO1xuXG4gICAgLy8gdGFza3NcbiAgICB4bWwucXVlcnlTZWxlY3RvckFsbCgndG9wb2xvZ3k+ZGVjbHRhc2snKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgY29uc3QgdGFzayA9IG5ldyBNVGFzaztcblxuICAgICAgdGFzay5pZCA9IHQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXG4gICAgICB0LnF1ZXJ5U2VsZWN0b3JBbGwoJ3JlcXVpcmVtZW50cycpLmZvckVhY2gociA9PiB7XG4gICAgICAgIHIucXVlcnlTZWxlY3RvckFsbCgnaWQnKS5mb3JFYWNoKGkgPT4gdGFzay5yZXF1aXJlbWVudHMucHVzaChpLnRleHRDb250ZW50KSk7XG4gICAgICB9KTtcblxuICAgICAgdC5xdWVyeVNlbGVjdG9yQWxsKCdleGUnKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgICBpZiAoZS5oYXNBdHRyaWJ1dGUoJ3JlYWNoYWJsZScpKSB7XG4gICAgICAgICAgdGFzay5leGVSZWFjaGFibGUgPSBlLmdldEF0dHJpYnV0ZSgncmVhY2hhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGFzay5leGVWYWx1ZSA9IGUudGV4dENvbnRlbnQ7XG4gICAgICB9KTtcblxuICAgICAgdC5xdWVyeVNlbGVjdG9yQWxsKCdlbnYnKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgICBpZiAoZS5oYXNBdHRyaWJ1dGUoJ3JlYWNoYWJsZScpKSB7XG4gICAgICAgICAgdGFzay5lbnZSZWFjaGFibGUgPSBlLmdldEF0dHJpYnV0ZSgncmVhY2hhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGFzay5lbnZWYWx1ZSA9IGUudGV4dENvbnRlbnQ7XG4gICAgICB9KTtcblxuICAgICAgdC5xdWVyeVNlbGVjdG9yQWxsKCdwcm9wZXJ0aWVzPmlkJykuZm9yRWFjaChwID0+IHtcbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSBuZXcgTVRhc2tQcm9wZXJ0eTtcbiAgICAgICAgcHJvcGVydHkuaWQgPSBwLnRleHRDb250ZW50O1xuICAgICAgICBpZiAocC5oYXNBdHRyaWJ1dGUoJ2FjY2VzcycpKSB7XG4gICAgICAgICAgcHJvcGVydHkuYWNjZXNzID0gcC5nZXRBdHRyaWJ1dGUoJ2FjY2VzcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BlcnR5LmFjY2VzcyA9ICdyZWFkd3JpdGUnO1xuICAgICAgICB9XG4gICAgICAgIHRhc2sucHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcbiAgICAgIH0pO1xuXG4gICAgICB0YXNrcy5wdXNoKHRhc2spO1xuICAgIH0pO1xuICAgIHN0b3JlLnNldFRhc2tzKHRhc2tzKTtcblxuICAgIC8vIGNvbGxlY3Rpb25zXG4gICAgeG1sLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RvcG9sb2d5PmRlY2xjb2xsZWN0aW9uJykuZm9yRWFjaChjID0+IHtcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgTUNvbGxlY3Rpb247XG4gICAgICBjb2xsZWN0aW9uLmlkID0gYy5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG5cbiAgICAgIGMucXVlcnlTZWxlY3RvckFsbCgncmVxdWlyZW1lbnRzJykuZm9yRWFjaChyID0+IHtcbiAgICAgICAgci5xdWVyeVNlbGVjdG9yQWxsKCdpZCcpLmZvckVhY2goaSA9PiBjb2xsZWN0aW9uLnJlcXVpcmVtZW50cy5wdXNoKGkudGV4dENvbnRlbnQpKTtcbiAgICAgIH0pO1xuXG4gICAgICBjLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rhc2tzPmlkJykuZm9yRWFjaCh0ID0+IGNvbGxlY3Rpb24udGFza3MucHVzaCh0LnRleHRDb250ZW50KSk7XG5cbiAgICAgIGNvbGxlY3Rpb25zLnB1c2goY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgc3RvcmUuc2V0Q29sbGVjdGlvbnMoY29sbGVjdGlvbnMpO1xuXG4gICAgLy8gbWFpblxuICAgIG1haW4uaWQgPSB4bWwucXVlcnlTZWxlY3RvcigndG9wb2xvZ3k+bWFpbicpLmdldEF0dHJpYnV0ZSgnaWQnKTtcblxuICAgIHhtbC5xdWVyeVNlbGVjdG9yQWxsKCd0b3BvbG9neT5tYWluPnRhc2snKS5mb3JFYWNoKHQgPT4gbWFpbi50YXNrcy5wdXNoKHQudGV4dENvbnRlbnQpKTtcbiAgICB4bWwucXVlcnlTZWxlY3RvckFsbCgndG9wb2xvZ3k+bWFpbj5jb2xsZWN0aW9uJykuZm9yRWFjaChjID0+IG1haW4uY29sbGVjdGlvbnMucHVzaChjLnRleHRDb250ZW50KSk7XG5cbiAgICAvLyBncm91cHMgaW4gbWFpblxuICAgIHhtbC5xdWVyeVNlbGVjdG9yQWxsKCd0b3BvbG9neT5tYWluPmdyb3VwJykuZm9yRWFjaChnID0+IHtcbiAgICAgIGNvbnN0IGdyb3VwID0gbmV3IE1Hcm91cDtcbiAgICAgIGdyb3VwLmlkID0gZy5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICBncm91cC5uID0gZy5nZXRBdHRyaWJ1dGUoJ24nKTtcblxuICAgICAgZy5xdWVyeVNlbGVjdG9yQWxsKCd0YXNrJykuZm9yRWFjaCh0ID0+IGdyb3VwLnRhc2tzLnB1c2godC50ZXh0Q29udGVudCkpO1xuICAgICAgZy5xdWVyeVNlbGVjdG9yQWxsKCdjb2xsZWN0aW9uJykuZm9yRWFjaChjID0+IGdyb3VwLmNvbGxlY3Rpb25zLnB1c2goYy50ZXh0Q29udGVudCkpO1xuXG4gICAgICBtYWluLmdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICB9KTtcbiAgICBzdG9yZS5zZXRNYWluKG1haW4pO1xuICB9XG5cbiAgaGFuZGxlRmlsZUxvYWQgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG5cbiAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzWE1MKHJlYWRlci5yZXN1bHQpO1xuICAgICAgdGFyZ2V0LnZhbHVlID0gJyc7XG4gICAgfTtcblxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGUudGFyZ2V0LmZpbGVzWzBdKTtcbiAgfVxuXG4gIGhhbmRsZUZpbGVTYXZlID0gKCkgPT4ge1xuICAgIGNvbnN0IHhtbERvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50KCcnLCAnJywgbnVsbCk7XG4gICAgY29uc3Qgcm9vdCA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCd0b3BvbG9neScpO1xuICAgIHJvb3Quc2V0QXR0cmlidXRlKCdpZCcsIHN0b3JlLnRvcG9sb2d5SWQpO1xuXG4gICAgLy8gdmFyaWFibGVzXG4gICAgc3RvcmUudmFyaWFibGVzLmZvckVhY2godmFyaWFibGUgPT4ge1xuICAgICAgY29uc3QgbmV3VmFyaWFibGUgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgndmFyJyk7XG4gICAgICBuZXdWYXJpYWJsZS5zZXRBdHRyaWJ1dGUoJ2lkJywgdmFyaWFibGUuaWQpO1xuICAgICAgbmV3VmFyaWFibGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhcmlhYmxlLnZhbHVlKTtcbiAgICAgIHJvb3QuYXBwZW5kQ2hpbGQobmV3VmFyaWFibGUpO1xuICAgIH0pO1xuXG4gICAgLy8gcHJvcGVydGllc1xuICAgIHN0b3JlLnByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICBjb25zdCBuZXdQcm9wZXJ0eSA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdwcm9wZXJ0eScpO1xuICAgICAgbmV3UHJvcGVydHkuc2V0QXR0cmlidXRlKCdpZCcsIHByb3BlcnR5LmlkKTtcbiAgICAgIHJvb3QuYXBwZW5kQ2hpbGQobmV3UHJvcGVydHkpO1xuICAgIH0pO1xuXG4gICAgLy8gcmVxdWlyZW1lbnRzXG4gICAgc3RvcmUucmVxdWlyZW1lbnRzLmZvckVhY2gocmVxdWlyZW1lbnQgPT4ge1xuICAgICAgY29uc3QgbmV3UmVxdWlyZW1lbnQgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgnZGVjbHJlcXVpcmVtZW50Jyk7XG4gICAgICBuZXdSZXF1aXJlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgcmVxdWlyZW1lbnQuaWQpO1xuICAgICAgbmV3UmVxdWlyZW1lbnQuc2V0QXR0cmlidXRlKCd0eXBlJywgcmVxdWlyZW1lbnQudHlwZSk7XG4gICAgICBuZXdSZXF1aXJlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcmVxdWlyZW1lbnQudmFsdWUpO1xuXG4gICAgICAvLyBhcHBlbmQgcmVxdWlyZW1lbnQgdG8gdGhlIHJvb3RcbiAgICAgIHJvb3QuYXBwZW5kQ2hpbGQobmV3UmVxdWlyZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgLy8gdGFza3NcbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgY29uc3QgbmV3VGFzayA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdkZWNsdGFzaycpO1xuICAgICAgbmV3VGFzay5zZXRBdHRyaWJ1dGUoJ2lkJywgdGFzay5pZCk7XG5cbiAgICAgIC8vIGNyZWF0ZSBhbmQgYXBwZW5kIHRhc2sgZXhlXG4gICAgICBjb25zdCB0YXNrRXhlID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ2V4ZScpO1xuICAgICAgdGFza0V4ZS50ZXh0Q29udGVudCA9IHRhc2suZXhlVmFsdWU7XG4gICAgICBpZiAodGFzay5leGVSZWFjaGFibGUgIT09ICcnKSB7XG4gICAgICAgIHRhc2tFeGUuc2V0QXR0cmlidXRlKCdyZWFjaGFibGUnLCB0YXNrLmV4ZVJlYWNoYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIG5ld1Rhc2suYXBwZW5kQ2hpbGQodGFza0V4ZSk7XG5cbiAgICAgIGlmICh0YXNrLnJlcXVpcmVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHRhc2tSZXF1aXJlbWVudHMgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgncmVxdWlyZW1lbnRzJyk7XG4gICAgICAgIHRhc2sucmVxdWlyZW1lbnRzLmZvckVhY2godGFza1JlcXVpcmVtZW50ID0+IHtcbiAgICAgICAgICBjb25zdCByZXF1aXJlbWVudCA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdpZCcpO1xuICAgICAgICAgIHJlcXVpcmVtZW50LnRleHRDb250ZW50ID0gdGFza1JlcXVpcmVtZW50O1xuICAgICAgICAgIHRhc2tSZXF1aXJlbWVudHMuYXBwZW5kQ2hpbGQocmVxdWlyZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgbmV3VGFzay5hcHBlbmRDaGlsZCh0YXNrUmVxdWlyZW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gY3JlYXRlIGFuZCBhcHBlbmQgdGFzayBlbnYgKGlmIGl0IGV4aXN0cylcbiAgICAgIGlmICh0YXNrLmVudlZhbHVlICE9PSAnJykge1xuICAgICAgICBjb25zdCB0YXNrRW52ID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ2VudicpO1xuICAgICAgICB0YXNrRW52LnRleHRDb250ZW50ID0gdGFzay5lbnZWYWx1ZTtcbiAgICAgICAgaWYgKHRhc2suZW52UmVhY2hhYmxlICE9PSAnJykge1xuICAgICAgICAgIHRhc2tFbnYuc2V0QXR0cmlidXRlKCdyZWFjaGFibGUnLCB0YXNrLmVudlJlYWNoYWJsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdUYXNrLmFwcGVuZENoaWxkKHRhc2tFbnYpO1xuICAgICAgfVxuXG4gICAgICAvLyBjcmVhdGUgdGFzayBwcm9wZXJ0aWVzXG4gICAgICBpZiAodGFzay5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllc0NvbnRhaW5lciA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdwcm9wZXJ0aWVzJyk7XG5cbiAgICAgICAgdGFzay5wcm9wZXJ0aWVzLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1Byb3BlcnR5ID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ2lkJyk7XG4gICAgICAgICAgbmV3UHJvcGVydHkudGV4dENvbnRlbnQgPSBwcm9wZXJ0eS5pZDtcbiAgICAgICAgICBuZXdQcm9wZXJ0eS5zZXRBdHRyaWJ1dGUoJ2FjY2VzcycsIHByb3BlcnR5LmFjY2Vzcyk7XG4gICAgICAgICAgcHJvcGVydGllc0NvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdQcm9wZXJ0eSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFwcGVuZCBwcm9wZXJ0aWVzIGNvbnRhaW5lclxuICAgICAgICBuZXdUYXNrLmFwcGVuZENoaWxkKHByb3BlcnRpZXNDb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICByb290LmFwcGVuZENoaWxkKG5ld1Rhc2spO1xuICAgIH0pO1xuXG4gICAgLy8gY29sbGVjdGlvbnNcbiAgICBzdG9yZS5jb2xsZWN0aW9ucy5mb3JFYWNoKGNvbGxlY3Rpb24gPT4ge1xuICAgICAgY29uc3QgbmV3Q29sbGVjdGlvbiA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdkZWNsY29sbGVjdGlvbicpO1xuICAgICAgbmV3Q29sbGVjdGlvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgY29sbGVjdGlvbi5pZCk7XG5cbiAgICAgIGlmIChjb2xsZWN0aW9uLnJlcXVpcmVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25SZXF1aXJlbWVudHMgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgncmVxdWlyZW1lbnRzJyk7XG4gICAgICAgIGNvbGxlY3Rpb24ucmVxdWlyZW1lbnRzLmZvckVhY2goY29sbGVjdGlvblJlcXVpcmVtZW50ID0+IHtcbiAgICAgICAgICBjb25zdCByZXF1aXJlbWVudCA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdpZCcpO1xuICAgICAgICAgIHJlcXVpcmVtZW50LnRleHRDb250ZW50ID0gY29sbGVjdGlvblJlcXVpcmVtZW50O1xuICAgICAgICAgIGNvbGxlY3Rpb25SZXF1aXJlbWVudHMuYXBwZW5kQ2hpbGQocmVxdWlyZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgbmV3Q29sbGVjdGlvbi5hcHBlbmRDaGlsZChjb2xsZWN0aW9uUmVxdWlyZW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGFza3MgPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgndGFza3MnKTtcblxuICAgICAgY29sbGVjdGlvbi50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ2lkJyk7XG4gICAgICAgIG5ld1Rhc2sudGV4dENvbnRlbnQgPSB0YXNrO1xuICAgICAgICB0YXNrcy5hcHBlbmRDaGlsZChuZXdUYXNrKTtcbiAgICAgIH0pO1xuXG4gICAgICBuZXdDb2xsZWN0aW9uLmFwcGVuZENoaWxkKHRhc2tzKTtcblxuICAgICAgcm9vdC5hcHBlbmRDaGlsZChuZXdDb2xsZWN0aW9uKTtcbiAgICB9KTtcblxuICAgIC8vIG1haW5cbiAgICBjb25zdCBtYWluID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ21haW4nKTtcbiAgICBtYWluLnNldEF0dHJpYnV0ZSgnaWQnLCBzdG9yZS5tYWluLmlkKTtcbiAgICAvLyB0YXNrcyBpbiBtYWluXG4gICAgc3RvcmUubWFpbi50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgY29uc3QgbmV3VGFzayA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCd0YXNrJyk7XG4gICAgICBuZXdUYXNrLnRleHRDb250ZW50ID0gdGFzaztcbiAgICAgIG1haW4uYXBwZW5kQ2hpbGQobmV3VGFzayk7XG4gICAgfSk7XG4gICAgLy8gY29sbGVjdGlvbnMgaW4gbWFpblxuICAgIHN0b3JlLm1haW4uY29sbGVjdGlvbnMuZm9yRWFjaChjb2xsZWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IG5ld0NvbGxlY3Rpb24gPSB4bWxEb2MuY3JlYXRlRWxlbWVudCgnY29sbGVjdGlvbicpO1xuICAgICAgbmV3Q29sbGVjdGlvbi50ZXh0Q29udGVudCA9IGNvbGxlY3Rpb247XG4gICAgICBtYWluLmFwcGVuZENoaWxkKG5ld0NvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIC8vIGdyb3VwcyBpbiBtYWluXG4gICAgc3RvcmUubWFpbi5ncm91cHMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICBjb25zdCBuZXdHcm91cCA9IHhtbERvYy5jcmVhdGVFbGVtZW50KCdncm91cCcpO1xuICAgICAgbmV3R3JvdXAuc2V0QXR0cmlidXRlKCdpZCcsIGdyb3VwLmlkKTtcbiAgICAgIG5ld0dyb3VwLnNldEF0dHJpYnV0ZSgnbicsIGdyb3VwLm4pO1xuXG4gICAgICBncm91cC50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ3Rhc2snKTtcbiAgICAgICAgbmV3VGFzay50ZXh0Q29udGVudCA9IHRhc2s7XG4gICAgICAgIG5ld0dyb3VwLmFwcGVuZENoaWxkKG5ld1Rhc2spO1xuICAgICAgfSk7XG4gICAgICBncm91cC5jb2xsZWN0aW9ucy5mb3JFYWNoKGNvbGxlY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBuZXdDb2xsZWN0aW9uID0geG1sRG9jLmNyZWF0ZUVsZW1lbnQoJ2NvbGxlY3Rpb24nKTtcbiAgICAgICAgbmV3Q29sbGVjdGlvbi50ZXh0Q29udGVudCA9IGNvbGxlY3Rpb247XG4gICAgICAgIG5ld0dyb3VwLmFwcGVuZENoaWxkKG5ld0NvbGxlY3Rpb24pO1xuICAgICAgfSk7XG5cbiAgICAgIG1haW4uYXBwZW5kQ2hpbGQobmV3R3JvdXApO1xuICAgIH0pO1xuXG4gICAgcm9vdC5hcHBlbmRDaGlsZChtYWluKTtcblxuICAgIHhtbERvYy5hcHBlbmRDaGlsZChyb290KTtcblxuICAgIGxldCB4bWxTdHJpbmcgPSBuZXcgWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHhtbERvYyk7XG5cbiAgICB4bWxTdHJpbmcgPSB2a2JlYXV0aWZ5LnhtbCh4bWxTdHJpbmcpO1xuXG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFt4bWxTdHJpbmddLCB7IHR5cGU6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgnIH0pO1xuICAgIHNhdmVBcyhibG9iLCBzdG9yZS50b3BvbG9neUlkICsgJy54bWwnKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbSBmaWxlLWFjdGlvbnNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgY2VudGVyZWRcIj5cbiAgICAgICAgICA8QnV0dG9uR3JvdXA+XG4gICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImJ0bi1maWxlXCIgY29tcG9uZW50Q2xhc3M9XCJzcGFuXCIgYnNTaXplPVwic21hbGxcIiB0aXRsZT1cImxvYWQgdG9wb2xvZ3kgZmlsZSBmcm9tIGRpc2tcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktb3BlblwiPjwvc3Bhbj4gbG9hZDxpbnB1dCB0eXBlPVwiZmlsZVwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUZpbGVMb2FkfSB2YWx1ZT1cIlwiIC8+XG4gICAgICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cImJvdHRvbVwiIHJlZj17ZWwgPT4gdGhpcy5mZXRjaEJ0biA9IGVsfSBvbkVudGVyPXt0aGlzLmZldGNoVG9wb2xvZ2llc30gb25FeGl0PXt0aGlzLmNhbmNlbEZldGNofSBvdmVybGF5PXtcbiAgICAgICAgICAgICAgPFBvcG92ZXIgY2xhc3NOYW1lPVwiZmV0Y2gtcG9wb3ZlclwiIHRpdGxlPVwiZmV0Y2ggcmVtb3RlIHRvcG9sb2dpZXNcIiBpZD1cImZldGNocmVtb3RldG9wb2xvZ2llc1wiPlxuICAgICAgICAgICAgICAgIDxwPkZldGNoaW5nIHRvcG9sb2dpZXMgZnJvbTxiciAvPjxzcGFuIGNsYXNzTmFtZT1cIm1vbm8gbW9ub2JnXCI+e3RoaXMucmVtb3RlVXNlcn0ve3RoaXMucmVtb3RlUmVwb30ve3RoaXMucmVtb3RlUGF0aH08L3NwYW4+PC9wPlxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUZldGNofT5cbiAgICAgICAgICAgICAgICAgIHt0aGlzLmVycm9yICE9PSAnJyA/IDxwIGNsYXNzTmFtZT1cImVycm9yXCI+e3RoaXMuZXJyb3J9PC9wPiA6ICcnfVxuICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVtb3RlRmlsZXMubWFwKChmaWxlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICg8UmFkaW8gdGl0bGU9e2ZpbGUudXJsfSBrZXk9e2ZpbGUubmFtZSArIGl9IG5hbWU9XCJmaWxlc1wiIGNsYXNzTmFtZT1cIm1vbm9cIj57ZmlsZS5uYW1lfTwvUmFkaW8+KTtcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmxvYWQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLmZldGNoQnRuLmhpZGUoKX0+Y2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgICB9PlxuICAgICAgICAgICAgICA8QnV0dG9uIGJzU2l6ZT1cInNtYWxsXCIgdGl0bGU9XCJmZXRjaCB0b3BvbG9neSBmaWxlIGZyb20gYSByZW1vdGUgcmVwb3NpdG9yeVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tY2xvdWQtZG93bmxvYWRcIj48L3NwYW4+IGZldGNoXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cblxuICAgICAgICAgICAgPEJ1dHRvbiBic1NpemU9XCJzbWFsbFwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlRmlsZVNhdmV9IHRpdGxlPVwic2F2ZSB0aGUgdG9wb2xvZ3kgdG8gZGlza1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1zYXZlXCI+PC9zcGFuPiBzYXZlXG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0J1dHRvbkdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqXHJcbiogdmtCZWF1dGlmeSAtIGphdmFzY3JpcHQgcGx1Z2luIHRvIHByZXR0eS1wcmludCBvciBtaW5pZnkgdGV4dCBpbiBYTUwsIEpTT04sIENTUyBhbmQgU1FMIGZvcm1hdHMuXHJcbipcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTIgVmFkaW0gS2lyeXVraGluXHJcbiogdmtpcnl1a2hpbiBAIGdtYWlsLmNvbVxyXG4qIGh0dHA6Ly93d3cuZXNsaW5zdHJ1Y3Rvci5uZXQvdmtiZWF1dGlmeS9cclxuKlxyXG4qIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOlxyXG4qICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuKiAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwuaHRtbFxyXG4qXHJcbiogICBQcmV0dHkgcHJpbnRcclxuKlxyXG4qICAgICAgICB2a2JlYXV0aWZ5LnhtbCh0ZXh0IFssaW5kZW50X3BhdHRlcm5dKTtcclxuKiAgICAgICAgdmtiZWF1dGlmeS5qc29uKHRleHQgWyxpbmRlbnRfcGF0dGVybl0pO1xyXG4qICAgICAgICB2a2JlYXV0aWZ5LmNzcyh0ZXh0IFssaW5kZW50X3BhdHRlcm5dKTtcclxuKiAgICAgICAgdmtiZWF1dGlmeS5zcWwodGV4dCBbLGluZGVudF9wYXR0ZXJuXSk7XHJcbipcclxuKiAgICAgICAgQHRleHQgLSBTdHJpbmc7IHRleHQgdG8gYmVhdHVmeTtcclxuKiAgICAgICAgQGluZGVudF9wYXR0ZXJuIC0gSW50ZWdlciB8IFN0cmluZztcclxuKiAgICAgICAgICAgICAgICBJbnRlZ2VyOiAgbnVtYmVyIG9mIHdoaXRlIHNwYWNlcztcclxuKiAgICAgICAgICAgICAgICBTdHJpbmc6ICAgY2hhcmFjdGVyIHN0cmluZyB0byB2aXN1YWxpemUgaW5kZW50YXRpb24gKCBjYW4gYWxzbyBiZSBhIHNldCBvZiB3aGl0ZSBzcGFjZXMgKVxyXG4qICAgTWluaWZ5XHJcbipcclxuKiAgICAgICAgdmtiZWF1dGlmeS54bWxtaW4odGV4dCBbLHByZXNlcnZlX2NvbW1lbnRzXSk7XHJcbiogICAgICAgIHZrYmVhdXRpZnkuanNvbm1pbih0ZXh0KTtcclxuKiAgICAgICAgdmtiZWF1dGlmeS5jc3NtaW4odGV4dCBbLHByZXNlcnZlX2NvbW1lbnRzXSk7XHJcbiogICAgICAgIHZrYmVhdXRpZnkuc3FsbWluKHRleHQpO1xyXG4qXHJcbiogICAgICAgIEB0ZXh0IC0gU3RyaW5nOyB0ZXh0IHRvIG1pbmlmeTtcclxuKiAgICAgICAgQHByZXNlcnZlX2NvbW1lbnRzIC0gQm9vbDsgW29wdGlvbmFsXTtcclxuKiAgICAgICAgICAgICAgICBTZXQgdGhpcyBmbGFnIHRvIHRydWUgdG8gcHJldmVudCByZW1vdmluZyBjb21tZW50cyBmcm9tIEB0ZXh0ICggbWlueG1sIGFuZCBtaW5jc3MgZnVuY3Rpb25zIG9ubHkuIClcclxuKlxyXG4qICAgRXhhbXBsZXM6XHJcbiogICAgICAgIHZrYmVhdXRpZnkueG1sKHRleHQpOyAvLyBwcmV0dHkgcHJpbnQgWE1MXHJcbiogICAgICAgIHZrYmVhdXRpZnkuanNvbih0ZXh0LCA0ICk7IC8vIHByZXR0eSBwcmludCBKU09OXHJcbiogICAgICAgIHZrYmVhdXRpZnkuY3NzKHRleHQsICcuIC4gLiAuJyk7IC8vIHByZXR0eSBwcmludCBDU1NcclxuKiAgICAgICAgdmtiZWF1dGlmeS5zcWwodGV4dCwgJy0tLS0nKTsgLy8gcHJldHR5IHByaW50IFNRTFxyXG4qXHJcbiogICAgICAgIHZrYmVhdXRpZnkueG1sbWluKHRleHQsIHRydWUpOy8vIG1pbmlmeSBYTUwsIHByZXNlcnZlIGNvbW1lbnRzXHJcbiogICAgICAgIHZrYmVhdXRpZnkuanNvbm1pbih0ZXh0KTsvLyBtaW5pZnkgSlNPTlxyXG4qICAgICAgICB2a2JlYXV0aWZ5LmNzc21pbih0ZXh0KTsvLyBtaW5pZnkgQ1NTLCByZW1vdmUgY29tbWVudHMgKCBkZWZhdWx0IClcclxuKiAgICAgICAgdmtiZWF1dGlmeS5zcWxtaW4odGV4dCk7Ly8gbWluaWZ5IFNRTFxyXG4qXHJcbiovXHJcbmZ1bmN0aW9uIGNyZWF0ZVNoaWZ0QXJyKHN0ZXApIHtcclxuXHJcblx0dmFyIHNwYWNlID0gJyAgICAnO1xyXG5cclxuXHRpZiAoIGlzTmFOKHBhcnNlSW50KHN0ZXApKSApIHsgIC8vIGFyZ3VtZW50IGlzIHN0cmluZ1xyXG5cdFx0c3BhY2UgPSBzdGVwO1xyXG5cdH0gZWxzZSB7IC8vIGFyZ3VtZW50IGlzIGludGVnZXJcclxuXHRcdHN3aXRjaChzdGVwKSB7XHJcblx0XHRcdGNhc2UgMTogc3BhY2UgPSAnICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDI6IHNwYWNlID0gJyAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMzogc3BhY2UgPSAnICAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgNDogc3BhY2UgPSAnICAgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDU6IHNwYWNlID0gJyAgICAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgNjogc3BhY2UgPSAnICAgICAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgNzogc3BhY2UgPSAnICAgICAgICc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDg6IHNwYWNlID0gJyAgICAgICAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgOTogc3BhY2UgPSAnICAgICAgICAgJzsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMTA6IHNwYWNlID0gJyAgICAgICAgICAnOyBicmVhaztcclxuXHRcdFx0Y2FzZSAxMTogc3BhY2UgPSAnICAgICAgICAgICAnOyBicmVhaztcclxuXHRcdFx0Y2FzZSAxMjogc3BhY2UgPSAnICAgICAgICAgICAgJzsgYnJlYWs7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR2YXIgc2hpZnQgPSBbJ1xcbiddOyAvLyBhcnJheSBvZiBzaGlmdHNcclxuXHRmb3IodmFyIGl4PTA7aXg8MTAwO2l4KyspIHtcclxuXHRcdHNoaWZ0LnB1c2goc2hpZnRbaXhdK3NwYWNlKTtcclxuXHR9XHJcblx0cmV0dXJuIHNoaWZ0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB2a2JlYXV0aWZ5KCl7XHJcblx0dGhpcy5zdGVwID0gJyAgICAnOyAvLyA0IHNwYWNlc1xyXG5cdHRoaXMuc2hpZnQgPSBjcmVhdGVTaGlmdEFycih0aGlzLnN0ZXApO1xyXG59O1xyXG5cclxudmtiZWF1dGlmeS5wcm90b3R5cGUueG1sID0gZnVuY3Rpb24odGV4dCxzdGVwKSB7XHJcblxyXG5cdHZhciBhciA9IHRleHQucmVwbGFjZSgvPlxcc3swLH08L2csXCI+PFwiKVxyXG5cdFx0XHRcdCAucmVwbGFjZSgvPC9nLFwifjo6fjxcIilcclxuXHRcdFx0XHQgLnJlcGxhY2UoL1xccyp4bWxuc1xcOi9nLFwifjo6fnhtbG5zOlwiKVxyXG5cdFx0XHRcdCAucmVwbGFjZSgvXFxzKnhtbG5zXFw9L2csXCJ+Ojp+eG1sbnM9XCIpXHJcblx0XHRcdFx0IC5zcGxpdCgnfjo6ficpLFxyXG5cdFx0bGVuID0gYXIubGVuZ3RoLFxyXG5cdFx0aW5Db21tZW50ID0gZmFsc2UsXHJcblx0XHRkZWVwID0gMCxcclxuXHRcdHN0ciA9ICcnLFxyXG5cdFx0aXggPSAwLFxyXG5cdFx0c2hpZnQgPSBzdGVwID8gY3JlYXRlU2hpZnRBcnIoc3RlcCkgOiB0aGlzLnNoaWZ0O1xyXG5cclxuXHRcdGZvcihpeD0wO2l4PGxlbjtpeCsrKSB7XHJcblx0XHRcdC8vIHN0YXJ0IGNvbW1lbnQgb3IgPCFbQ0RBVEFbLi4uXV0+IG9yIDwhRE9DVFlQRSAvL1xyXG5cdFx0XHRpZihhcltpeF0uc2VhcmNoKC88IS8pID4gLTEpIHtcclxuXHRcdFx0XHRzdHIgKz0gc2hpZnRbZGVlcF0rYXJbaXhdO1xyXG5cdFx0XHRcdGluQ29tbWVudCA9IHRydWU7XHJcblx0XHRcdFx0Ly8gZW5kIGNvbW1lbnQgIG9yIDwhW0NEQVRBWy4uLl1dPiAvL1xyXG5cdFx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLy0tPi8pID4gLTEgfHwgYXJbaXhdLnNlYXJjaCgvXFxdPi8pID4gLTEgfHwgYXJbaXhdLnNlYXJjaCgvIURPQ1RZUEUvKSA+IC0xICkge1xyXG5cdFx0XHRcdFx0aW5Db21tZW50ID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2VcclxuXHRcdFx0Ly8gZW5kIGNvbW1lbnQgIG9yIDwhW0NEQVRBWy4uLl1dPiAvL1xyXG5cdFx0XHRpZihhcltpeF0uc2VhcmNoKC8tLT4vKSA+IC0xIHx8IGFyW2l4XS5zZWFyY2goL1xcXT4vKSA+IC0xKSB7XHJcblx0XHRcdFx0c3RyICs9IGFyW2l4XTtcclxuXHRcdFx0XHRpbkNvbW1lbnQgPSBmYWxzZTtcclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdC8vIDxlbG0+PC9lbG0+IC8vXHJcblx0XHRcdGlmKCAvXjxcXHcvLmV4ZWMoYXJbaXgtMV0pICYmIC9ePFxcL1xcdy8uZXhlYyhhcltpeF0pICYmXHJcblx0XHRcdFx0L148W1xcdzpcXC1cXC5cXCxdKy8uZXhlYyhhcltpeC0xXSkgPT0gL148XFwvW1xcdzpcXC1cXC5cXCxdKy8uZXhlYyhhcltpeF0pWzBdLnJlcGxhY2UoJy8nLCcnKSkge1xyXG5cdFx0XHRcdHN0ciArPSBhcltpeF07XHJcblx0XHRcdFx0aWYoIWluQ29tbWVudCkgZGVlcC0tO1xyXG5cdFx0XHR9IGVsc2VcclxuXHRcdFx0IC8vIDxlbG0+IC8vXHJcblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzxcXHcvKSA+IC0xICYmIGFyW2l4XS5zZWFyY2goLzxcXC8vKSA9PSAtMSAmJiBhcltpeF0uc2VhcmNoKC9cXC8+LykgPT0gLTEgKSB7XHJcblx0XHRcdFx0c3RyID0gIWluQ29tbWVudCA/IHN0ciArPSBzaGlmdFtkZWVwKytdK2FyW2l4XSA6IHN0ciArPSBhcltpeF07XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHQgLy8gPGVsbT4uLi48L2VsbT4gLy9cclxuXHRcdFx0aWYoYXJbaXhdLnNlYXJjaCgvPFxcdy8pID4gLTEgJiYgYXJbaXhdLnNlYXJjaCgvPFxcLy8pID4gLTEpIHtcclxuXHRcdFx0XHRzdHIgPSAhaW5Db21tZW50ID8gc3RyICs9IHNoaWZ0W2RlZXBdK2FyW2l4XSA6IHN0ciArPSBhcltpeF07XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHQvLyA8L2VsbT4gLy9cclxuXHRcdFx0aWYoYXJbaXhdLnNlYXJjaCgvPFxcLy8pID4gLTEpIHtcclxuXHRcdFx0XHRzdHIgPSAhaW5Db21tZW50ID8gc3RyICs9IHNoaWZ0Wy0tZGVlcF0rYXJbaXhdIDogc3RyICs9IGFyW2l4XTtcclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdC8vIDxlbG0vPiAvL1xyXG5cdFx0XHRpZihhcltpeF0uc2VhcmNoKC9cXC8+LykgPiAtMSApIHtcclxuXHRcdFx0XHRzdHIgPSAhaW5Db21tZW50ID8gc3RyICs9IHNoaWZ0W2RlZXBdK2FyW2l4XSA6IHN0ciArPSBhcltpeF07XHJcblx0XHRcdH0gZWxzZVxyXG5cdFx0XHQvLyA8PyB4bWwgLi4uID8+IC8vXHJcblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzxcXD8vKSA+IC0xKSB7XHJcblx0XHRcdFx0c3RyICs9IHNoaWZ0W2RlZXBdK2FyW2l4XTtcclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdC8vIHhtbG5zIC8vXHJcblx0XHRcdGlmKCBhcltpeF0uc2VhcmNoKC94bWxuc1xcOi8pID4gLTEgIHx8IGFyW2l4XS5zZWFyY2goL3htbG5zXFw9LykgPiAtMSkge1xyXG5cdFx0XHRcdHN0ciArPSBzaGlmdFtkZWVwXSthcltpeF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdHN0ciArPSBhcltpeF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0cmV0dXJuICAoc3RyWzBdID09ICdcXG4nKSA/IHN0ci5zbGljZSgxKSA6IHN0cjtcclxufVxyXG5cclxudmtiZWF1dGlmeS5wcm90b3R5cGUuanNvbiA9IGZ1bmN0aW9uKHRleHQsc3RlcCkge1xyXG5cclxuXHR2YXIgc3RlcCA9IHN0ZXAgPyBzdGVwIDogdGhpcy5zdGVwO1xyXG5cclxuXHRpZiAodHlwZW9mIEpTT04gPT09ICd1bmRlZmluZWQnICkgcmV0dXJuIHRleHQ7XHJcblxyXG5cdGlmICggdHlwZW9mIHRleHQgPT09IFwic3RyaW5nXCIgKSByZXR1cm4gSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZSh0ZXh0KSwgbnVsbCwgc3RlcCk7XHJcblx0aWYgKCB0eXBlb2YgdGV4dCA9PT0gXCJvYmplY3RcIiApIHJldHVybiBKU09OLnN0cmluZ2lmeSh0ZXh0LCBudWxsLCBzdGVwKTtcclxuXHJcblx0cmV0dXJuIHRleHQ7IC8vIHRleHQgaXMgbm90IHN0cmluZyBub3Igb2JqZWN0XHJcbn1cclxuXHJcbnZrYmVhdXRpZnkucHJvdG90eXBlLmNzcyA9IGZ1bmN0aW9uKHRleHQsIHN0ZXApIHtcclxuXHJcblx0dmFyIGFyID0gdGV4dC5yZXBsYWNlKC9cXHN7MSx9L2csJyAnKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC9cXHsvZyxcInt+Ojp+XCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoL1xcfS9nLFwifjo6fn1+Ojp+XCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoL1xcOy9nLFwiO346On5cIilcclxuXHRcdFx0XHQucmVwbGFjZSgvXFwvXFwqL2csXCJ+Ojp+LypcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvXFwqXFwvL2csXCIqL346On5cIilcclxuXHRcdFx0XHQucmVwbGFjZSgvfjo6flxcc3swLH1+Ojp+L2csXCJ+Ojp+XCIpXHJcblx0XHRcdFx0LnNwbGl0KCd+Ojp+JyksXHJcblx0XHRsZW4gPSBhci5sZW5ndGgsXHJcblx0XHRkZWVwID0gMCxcclxuXHRcdHN0ciA9ICcnLFxyXG5cdFx0aXggPSAwLFxyXG5cdFx0c2hpZnQgPSBzdGVwID8gY3JlYXRlU2hpZnRBcnIoc3RlcCkgOiB0aGlzLnNoaWZ0O1xyXG5cclxuXHRcdGZvcihpeD0wO2l4PGxlbjtpeCsrKSB7XHJcblxyXG5cdFx0XHRpZiggL1xcey8uZXhlYyhhcltpeF0pKSAge1xyXG5cdFx0XHRcdHN0ciArPSBzaGlmdFtkZWVwKytdK2FyW2l4XTtcclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdGlmKCAvXFx9Ly5leGVjKGFyW2l4XSkpICB7XHJcblx0XHRcdFx0c3RyICs9IHNoaWZ0Wy0tZGVlcF0rYXJbaXhdO1xyXG5cdFx0XHR9IGVsc2VcclxuXHRcdFx0aWYoIC9cXCpcXFxcLy5leGVjKGFyW2l4XSkpICB7XHJcblx0XHRcdFx0c3RyICs9IHNoaWZ0W2RlZXBdK2FyW2l4XTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRzdHIgKz0gc2hpZnRbZGVlcF0rYXJbaXhdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoL15cXG57MSx9LywnJyk7XHJcbn1cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZnVuY3Rpb24gaXNTdWJxdWVyeShzdHIsIHBhcmVudGhlc2lzTGV2ZWwpIHtcclxuXHRyZXR1cm4gIHBhcmVudGhlc2lzTGV2ZWwgLSAoc3RyLnJlcGxhY2UoL1xcKC9nLCcnKS5sZW5ndGggLSBzdHIucmVwbGFjZSgvXFwpL2csJycpLmxlbmd0aCApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwbGl0X3NxbChzdHIsIHRhYikge1xyXG5cclxuXHRyZXR1cm4gc3RyLnJlcGxhY2UoL1xcc3sxLH0vZyxcIiBcIilcclxuXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBBTkQgL2lnLFwifjo6flwiK3RhYit0YWIrXCJBTkQgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBCRVRXRUVOIC9pZyxcIn46On5cIit0YWIrXCJCRVRXRUVOIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gQ0FTRSAvaWcsXCJ+Ojp+XCIrdGFiK1wiQ0FTRSBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIEVMU0UgL2lnLFwifjo6flwiK3RhYitcIkVMU0UgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBFTkQgL2lnLFwifjo6flwiK3RhYitcIkVORCBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIEZST00gL2lnLFwifjo6fkZST00gXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBHUk9VUFxcc3sxLH1CWS9pZyxcIn46On5HUk9VUCBCWSBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIEhBVklORyAvaWcsXCJ+Ojp+SEFWSU5HIFwiKVxyXG5cdFx0XHRcdC8vLnJlcGxhY2UoLyBTRVQgL2lnLFwiIFNFVH46On5cIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIElOIC9pZyxcIiBJTiBcIilcclxuXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBKT0lOIC9pZyxcIn46On5KT0lOIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gQ1JPU1N+Ojp+ezEsfUpPSU4gL2lnLFwifjo6fkNST1NTIEpPSU4gXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBJTk5FUn46On57MSx9Sk9JTiAvaWcsXCJ+Ojp+SU5ORVIgSk9JTiBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIExFRlR+Ojp+ezEsfUpPSU4gL2lnLFwifjo6fkxFRlQgSk9JTiBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIFJJR0hUfjo6fnsxLH1KT0lOIC9pZyxcIn46On5SSUdIVCBKT0lOIFwiKVxyXG5cclxuXHRcdFx0XHQucmVwbGFjZSgvIE9OIC9pZyxcIn46On5cIit0YWIrXCJPTiBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIE9SIC9pZyxcIn46On5cIit0YWIrdGFiK1wiT1IgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBPUkRFUlxcc3sxLH1CWS9pZyxcIn46On5PUkRFUiBCWSBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIE9WRVIgL2lnLFwifjo6flwiK3RhYitcIk9WRVIgXCIpXHJcblxyXG5cdFx0XHRcdC5yZXBsYWNlKC9cXChcXHN7MCx9U0VMRUNUIC9pZyxcIn46On4oU0VMRUNUIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC9cXClcXHN7MCx9U0VMRUNUIC9pZyxcIil+Ojp+U0VMRUNUIFwiKVxyXG5cclxuXHRcdFx0XHQucmVwbGFjZSgvIFRIRU4gL2lnLFwiIFRIRU5+Ojp+XCIrdGFiK1wiXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBVTklPTiAvaWcsXCJ+Ojp+VU5JT05+Ojp+XCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBVU0lORyAvaWcsXCJ+Ojp+VVNJTkcgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBXSEVOIC9pZyxcIn46On5cIit0YWIrXCJXSEVOIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gV0hFUkUgL2lnLFwifjo6fldIRVJFIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gV0lUSCAvaWcsXCJ+Ojp+V0lUSCBcIilcclxuXHJcblx0XHRcdFx0Ly8ucmVwbGFjZSgvXFwsXFxzezAsfVxcKC9pZyxcIix+Ojp+KCBcIilcclxuXHRcdFx0XHQvLy5yZXBsYWNlKC9cXCwvaWcsXCIsfjo6flwiK3RhYit0YWIrXCJcIilcclxuXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBBTEwgL2lnLFwiIEFMTCBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIEFTIC9pZyxcIiBBUyBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIEFTQyAvaWcsXCIgQVNDIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gREVTQyAvaWcsXCIgREVTQyBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIERJU1RJTkNUIC9pZyxcIiBESVNUSU5DVCBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvIEVYSVNUUyAvaWcsXCIgRVhJU1RTIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gTk9UIC9pZyxcIiBOT1QgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoLyBOVUxMIC9pZyxcIiBOVUxMIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gTElLRSAvaWcsXCIgTElLRSBcIilcclxuXHRcdFx0XHQucmVwbGFjZSgvXFxzezAsfVNFTEVDVCAvaWcsXCJTRUxFQ1QgXCIpXHJcblx0XHRcdFx0LnJlcGxhY2UoL1xcc3swLH1VUERBVEUgL2lnLFwiVVBEQVRFIFwiKVxyXG5cdFx0XHRcdC5yZXBsYWNlKC8gU0VUIC9pZyxcIiBTRVQgXCIpXHJcblxyXG5cdFx0XHRcdC5yZXBsYWNlKC9+Ojp+ezEsfS9nLFwifjo6flwiKVxyXG5cdFx0XHRcdC5zcGxpdCgnfjo6ficpO1xyXG59XHJcblxyXG52a2JlYXV0aWZ5LnByb3RvdHlwZS5zcWwgPSBmdW5jdGlvbih0ZXh0LHN0ZXApIHtcclxuXHJcblx0dmFyIGFyX2J5X3F1b3RlID0gdGV4dC5yZXBsYWNlKC9cXHN7MSx9L2csXCIgXCIpXHJcblx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoL1xcJy9pZyxcIn46On5cXCdcIilcclxuXHRcdFx0XHRcdFx0XHQuc3BsaXQoJ346On4nKSxcclxuXHRcdGxlbiA9IGFyX2J5X3F1b3RlLmxlbmd0aCxcclxuXHRcdGFyID0gW10sXHJcblx0XHRkZWVwID0gMCxcclxuXHRcdHRhYiA9IHRoaXMuc3RlcCwvLyt0aGlzLnN0ZXAsXHJcblx0XHRpbkNvbW1lbnQgPSB0cnVlLFxyXG5cdFx0aW5RdW90ZSA9IGZhbHNlLFxyXG5cdFx0cGFyZW50aGVzaXNMZXZlbCA9IDAsXHJcblx0XHRzdHIgPSAnJyxcclxuXHRcdGl4ID0gMCxcclxuXHRcdHNoaWZ0ID0gc3RlcCA/IGNyZWF0ZVNoaWZ0QXJyKHN0ZXApIDogdGhpcy5zaGlmdDs7XHJcblxyXG5cdFx0Zm9yKGl4PTA7aXg8bGVuO2l4KyspIHtcclxuXHRcdFx0aWYoaXglMikge1xyXG5cdFx0XHRcdGFyID0gYXIuY29uY2F0KGFyX2J5X3F1b3RlW2l4XSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0YXIgPSBhci5jb25jYXQoc3BsaXRfc3FsKGFyX2J5X3F1b3RlW2l4XSwgdGFiKSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0bGVuID0gYXIubGVuZ3RoO1xyXG5cdFx0Zm9yKGl4PTA7aXg8bGVuO2l4KyspIHtcclxuXHJcblx0XHRcdHBhcmVudGhlc2lzTGV2ZWwgPSBpc1N1YnF1ZXJ5KGFyW2l4XSwgcGFyZW50aGVzaXNMZXZlbCk7XHJcblxyXG5cdFx0XHRpZiggL1xcc3swLH1cXHN7MCx9U0VMRUNUXFxzezAsfS8uZXhlYyhhcltpeF0pKSAge1xyXG5cdFx0XHRcdGFyW2l4XSA9IGFyW2l4XS5yZXBsYWNlKC9cXCwvZyxcIixcXG5cIit0YWIrdGFiK1wiXCIpXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKCAvXFxzezAsfVxcc3swLH1TRVRcXHN7MCx9Ly5leGVjKGFyW2l4XSkpICB7XHJcblx0XHRcdFx0YXJbaXhdID0gYXJbaXhdLnJlcGxhY2UoL1xcLC9nLFwiLFxcblwiK3RhYit0YWIrXCJcIilcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoIC9cXHN7MCx9XFwoXFxzezAsfVNFTEVDVFxcc3swLH0vLmV4ZWMoYXJbaXhdKSkgIHtcclxuXHRcdFx0XHRkZWVwKys7XHJcblx0XHRcdFx0c3RyICs9IHNoaWZ0W2RlZXBdK2FyW2l4XTtcclxuXHRcdFx0fSBlbHNlXHJcblx0XHRcdGlmKCAvXFwnLy5leGVjKGFyW2l4XSkgKSAge1xyXG5cdFx0XHRcdGlmKHBhcmVudGhlc2lzTGV2ZWw8MSAmJiBkZWVwKSB7XHJcblx0XHRcdFx0XHRkZWVwLS07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0ciArPSBhcltpeF07XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSAge1xyXG5cdFx0XHRcdHN0ciArPSBzaGlmdFtkZWVwXSthcltpeF07XHJcblx0XHRcdFx0aWYocGFyZW50aGVzaXNMZXZlbDwxICYmIGRlZXApIHtcclxuXHRcdFx0XHRcdGRlZXAtLTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGp1bmsgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9eXFxuezEsfS8sJycpLnJlcGxhY2UoL1xcbnsxLH0vZyxcIlxcblwiKTtcclxuXHRcdHJldHVybiBzdHI7XHJcbn1cclxuXHJcblxyXG52a2JlYXV0aWZ5LnByb3RvdHlwZS54bWxtaW4gPSBmdW5jdGlvbih0ZXh0LCBwcmVzZXJ2ZUNvbW1lbnRzKSB7XHJcblxyXG5cdHZhciBzdHIgPSBwcmVzZXJ2ZUNvbW1lbnRzID8gdGV4dFxyXG5cdFx0XHRcdFx0XHRcdCAgIDogdGV4dC5yZXBsYWNlKC9cXDwhWyBcXHJcXG5cXHRdKigtLShbXlxcLV18W1xcclxcbl18LVteXFwtXSkqLS1bIFxcclxcblxcdF0qKVxcPi9nLFwiXCIpXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAucmVwbGFjZSgvWyBcXHJcXG5cXHRdezEsfXhtbG5zL2csICcgeG1sbnMnKTtcclxuXHRyZXR1cm4gIHN0ci5yZXBsYWNlKC8+XFxzezAsfTwvZyxcIj48XCIpO1xyXG59XHJcblxyXG52a2JlYXV0aWZ5LnByb3RvdHlwZS5qc29ubWluID0gZnVuY3Rpb24odGV4dCkge1xyXG5cclxuXHRpZiAodHlwZW9mIEpTT04gPT09ICd1bmRlZmluZWQnICkgcmV0dXJuIHRleHQ7XHJcblxyXG5cdHJldHVybiBKU09OLnN0cmluZ2lmeShKU09OLnBhcnNlKHRleHQpLCBudWxsLCAwKTtcclxuXHJcbn1cclxuXHJcbnZrYmVhdXRpZnkucHJvdG90eXBlLmNzc21pbiA9IGZ1bmN0aW9uKHRleHQsIHByZXNlcnZlQ29tbWVudHMpIHtcclxuXHJcblx0dmFyIHN0ciA9IHByZXNlcnZlQ29tbWVudHMgPyB0ZXh0XHJcblx0XHRcdFx0XHRcdFx0ICAgOiB0ZXh0LnJlcGxhY2UoL1xcL1xcKihbXipdfFtcXHJcXG5dfChcXCorKFteKi9dfFtcXHJcXG5dKSkpKlxcKitcXC8vZyxcIlwiKSA7XHJcblxyXG5cdHJldHVybiBzdHIucmVwbGFjZSgvXFxzezEsfS9nLCcgJylcclxuXHRcdFx0ICAucmVwbGFjZSgvXFx7XFxzezEsfS9nLFwie1wiKVxyXG5cdFx0XHQgIC5yZXBsYWNlKC9cXH1cXHN7MSx9L2csXCJ9XCIpXHJcblx0XHRcdCAgLnJlcGxhY2UoL1xcO1xcc3sxLH0vZyxcIjtcIilcclxuXHRcdFx0ICAucmVwbGFjZSgvXFwvXFwqXFxzezEsfS9nLFwiLypcIilcclxuXHRcdFx0ICAucmVwbGFjZSgvXFwqXFwvXFxzezEsfS9nLFwiKi9cIik7XHJcbn1cclxuXHJcbnZrYmVhdXRpZnkucHJvdG90eXBlLnNxbG1pbiA9IGZ1bmN0aW9uKHRleHQpIHtcclxuXHRyZXR1cm4gdGV4dC5yZXBsYWNlKC9cXHN7MSx9L2csXCIgXCIpLnJlcGxhY2UoL1xcc3sxLH1cXCgvLFwiKFwiKS5yZXBsYWNlKC9cXHN7MSx9XFwpLyxcIilcIik7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbmV3IHZrYmVhdXRpZnkoKTtcclxuIiwiKGZ1bmN0aW9uKGEsYil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxiKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzKWIoKTtlbHNle2IoKSxhLkZpbGVTYXZlcj17ZXhwb3J0czp7fX0uZXhwb3J0c319KSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihhLGIpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBiP2I9e2F1dG9Cb206ITF9Olwib2JqZWN0XCIhPXR5cGVvZiBiJiYoY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3RcIiksYj17YXV0b0JvbTohYn0pLGIuYXV0b0JvbSYmL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYS50eXBlKT9uZXcgQmxvYihbXCJcXHVGRUZGXCIsYV0se3R5cGU6YS50eXBlfSk6YX1mdW5jdGlvbiBjKGIsYyxkKXt2YXIgZT1uZXcgWE1MSHR0cFJlcXVlc3Q7ZS5vcGVuKFwiR0VUXCIsYiksZS5yZXNwb25zZVR5cGU9XCJibG9iXCIsZS5vbmxvYWQ9ZnVuY3Rpb24oKXthKGUucmVzcG9uc2UsYyxkKX0sZS5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcImNvdWxkIG5vdCBkb3dubG9hZCBmaWxlXCIpfSxlLnNlbmQoKX1mdW5jdGlvbiBkKGEpe3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJIRUFEXCIsYSwhMSk7dHJ5e2Iuc2VuZCgpfWNhdGNoKGEpe31yZXR1cm4gMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1c31mdW5jdGlvbiBlKGEpe3RyeXthLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtiLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYil9fXZhciBmPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbD9nbG9iYWw6dm9pZCAwLGE9Zi5zYXZlQXN8fChcIm9iamVjdFwiIT10eXBlb2Ygd2luZG93fHx3aW5kb3chPT1mP2Z1bmN0aW9uKCl7fTpcImRvd25sb2FkXCJpbiBIVE1MQW5jaG9yRWxlbWVudC5wcm90b3R5cGU/ZnVuY3Rpb24oYixnLGgpe3ZhciBpPWYuVVJMfHxmLndlYmtpdFVSTCxqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2c9Z3x8Yi5uYW1lfHxcImRvd25sb2FkXCIsai5kb3dubG9hZD1nLGoucmVsPVwibm9vcGVuZXJcIixcInN0cmluZ1wiPT10eXBlb2YgYj8oai5ocmVmPWIsai5vcmlnaW49PT1sb2NhdGlvbi5vcmlnaW4/ZShqKTpkKGouaHJlZik/YyhiLGcsaCk6ZShqLGoudGFyZ2V0PVwiX2JsYW5rXCIpKTooai5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKGIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnJldm9rZU9iamVjdFVSTChqLmhyZWYpfSw0RTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGopfSwwKSl9OlwibXNTYXZlT3JPcGVuQmxvYlwiaW4gbmF2aWdhdG9yP2Z1bmN0aW9uKGYsZyxoKXtpZihnPWd8fGYubmFtZXx8XCJkb3dubG9hZFwiLFwic3RyaW5nXCIhPXR5cGVvZiBmKW5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGIoZixoKSxnKTtlbHNlIGlmKGQoZikpYyhmLGcsaCk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpLmhyZWY9ZixpLnRhcmdldD1cIl9ibGFua1wiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGkpfSl9fTpmdW5jdGlvbihhLGIsZCxlKXtpZihlPWV8fG9wZW4oXCJcIixcIl9ibGFua1wiKSxlJiYoZS5kb2N1bWVudC50aXRsZT1lLmRvY3VtZW50LmJvZHkuaW5uZXJUZXh0PVwiZG93bmxvYWRpbmcuLi5cIiksXCJzdHJpbmdcIj09dHlwZW9mIGEpcmV0dXJuIGMoYSxiLGQpO3ZhciBnPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI9PT1hLnR5cGUsaD0vY29uc3RydWN0b3IvaS50ZXN0KGYuSFRNTEVsZW1lbnQpfHxmLnNhZmFyaSxpPS9DcmlPU1xcL1tcXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZigoaXx8ZyYmaCkmJlwib2JqZWN0XCI9PXR5cGVvZiBGaWxlUmVhZGVyKXt2YXIgaj1uZXcgRmlsZVJlYWRlcjtqLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBhPWoucmVzdWx0O2E9aT9hOmEucmVwbGFjZSgvXmRhdGE6W147XSo7LyxcImRhdGE6YXR0YWNobWVudC9maWxlO1wiKSxlP2UubG9jYXRpb24uaHJlZj1hOmxvY2F0aW9uPWEsZT1udWxsfSxqLnJlYWRBc0RhdGFVUkwoYSl9ZWxzZXt2YXIgaz1mLlVSTHx8Zi53ZWJraXRVUkwsbD1rLmNyZWF0ZU9iamVjdFVSTChhKTtlP2UubG9jYXRpb249bDpsb2NhdGlvbi5ocmVmPWwsZT1udWxsLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtrLnJldm9rZU9iamVjdFVSTChsKX0sNEU0KX19KTtmLnNhdmVBcz1hLnNhdmVBcz1hLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1hKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlU2F2ZXIubWluLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9hbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGxcIikpO1xuXG52YXIgX0J1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICB2ZXJ0aWNhbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGp1c3RpZmllZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERpc3BsYXkgYmxvY2sgYnV0dG9uczsgb25seSB1c2VmdWwgd2hlbiB1c2VkIHdpdGggdGhlIFwidmVydGljYWxcIiBwcm9wLlxuICAgKiBAdHlwZSB7Ym9vbH1cbiAgICovXG4gIGJsb2NrOiAoMCwgX2FsbC5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgYmxvY2sgPSBfcmVmLmJsb2NrLFxuICAgICAgICB2ZXJ0aWNhbCA9IF9yZWYudmVydGljYWw7XG4gICAgcmV0dXJuIGJsb2NrICYmICF2ZXJ0aWNhbCA/IG5ldyBFcnJvcignYGJsb2NrYCByZXF1aXJlcyBgdmVydGljYWxgIHRvIGJlIHNldCB0byBoYXZlIGFueSBlZmZlY3QnKSA6IG51bGw7XG4gIH0pXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYmxvY2s6IGZhbHNlLFxuICBqdXN0aWZpZWQ6IGZhbHNlLFxuICB2ZXJ0aWNhbDogZmFsc2Vcbn07XG5cbnZhciBCdXR0b25Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEJ1dHRvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCdXR0b25Hcm91cCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnV0dG9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHMuYmxvY2ssXG4gICAgICAgIGp1c3RpZmllZCA9IF90aGlzJHByb3BzLmp1c3RpZmllZCxcbiAgICAgICAgdmVydGljYWwgPSBfdGhpcyRwcm9wcy52ZXJ0aWNhbCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImJsb2NrXCIsIFwianVzdGlmaWVkXCIsIFwidmVydGljYWxcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyWygwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShic1Byb3BzKV0gPSAhdmVydGljYWwsIF9leHRlbmRzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ3ZlcnRpY2FsJyldID0gdmVydGljYWwsIF9leHRlbmRzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ2p1c3RpZmllZCcpXSA9IGp1c3RpZmllZCwgX2V4dGVuZHMyWygwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShfQnV0dG9uLmRlZmF1bHQuZGVmYXVsdFByb3BzLCAnYmxvY2snKV0gPSBibG9jaywgX2V4dGVuZHMyKSk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b25Hcm91cDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQnV0dG9uR3JvdXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQnV0dG9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdidG4tZ3JvdXAnLCBCdXR0b25Hcm91cCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgXCJMSUNFTlNFXCIgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cCc7XG5pbXBvcnQgSW5wdXRHcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAnO1xuaW1wb3J0IE92ZXJsYXlUcmlnZ2VyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvT3ZlcmxheVRyaWdnZXInO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Qb3BvdmVyJztcblxuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnLi9Db2xsZWN0aW9uJztcblxuaW1wb3J0IHN0b3JlLCB7IE1Db2xsZWN0aW9uIH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sbGVjdGlvbkxpc3QgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRhc2tDaGVja2JveGVzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICByZXF1aXJlbWVudE9wdGlvbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXG4gIH07XG5cbiAgQG9ic2VydmFibGUgaW5wdXRWYWxpZCA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSBjb2xsZWN0aW9uc1Zpc2libGUgPSB0cnVlO1xuXG4gIEBhY3Rpb24gc2V0SW5wdXRWYWxpZGl0eSA9ICh2YWxpZCkgPT4geyB0aGlzLmlucHV0VmFsaWQgPSB2YWxpZDsgfVxuICBAYWN0aW9uIHRvZ2dsZUNvbGxlY3Rpb25zVmlzaWJpbGl0eSA9ICgpID0+IHsgdGhpcy5jb2xsZWN0aW9uc1Zpc2libGUgPSAhdGhpcy5jb2xsZWN0aW9uc1Zpc2libGU7IH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgYWRkQ29sbGVjdGlvbkJ0bjtcblxuICBoYW5kbGVBZGRDb2xsZWN0aW9uID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBjYW5jZWwgaWYgSUQgaXMgZW1wdHksIG9yIGlmIElEIGFscmVhZHkgZXhpc3RzXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUgPT09ICcnIHx8IHN0b3JlLmhhc0NvbGxlY3Rpb24oZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSkpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBNQ29sbGVjdGlvbjtcbiAgICBjb2xsZWN0aW9uLmlkID0gZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZTtcblxuICAgIHN0b3JlLnRhc2tzLmZvckVhY2goKHQsIGopID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVtqICsgMV0udmFsdWU7IGkrKykge1xuICAgICAgICBjb2xsZWN0aW9uLnRhc2tzLnB1c2godC5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVsncmVxdWlyZW1lbnRzJ10udmFsdWUgIT09ICcnKSB7IC8vIFRPRE86IGhhbmRsZSBtdWx0aXBsZVxuICAgICAgY29sbGVjdGlvbi5yZXF1aXJlbWVudHMucHVzaChlLnRhcmdldFswXS5mb3JtWydyZXF1aXJlbWVudHMnXS52YWx1ZSk7XG4gICAgfVxuXG4gICAgc3RvcmUuYWRkQ29sbGVjdGlvbihjb2xsZWN0aW9uKTtcbiAgICB0aGlzLmFkZENvbGxlY3Rpb25CdG4uaGlkZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RnJhZ21lbnQ+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW0gY29sbGVjdGlvbnMtaGVhZGVyXCI+XG4gICAgICAgICAgY29sbGVjdGlvbnNcbiAgICAgICAgICA8T3ZlcmxheVRyaWdnZXIgdHJpZ2dlcj1cImNsaWNrXCIgcGxhY2VtZW50PVwicmlnaHRcIiByZWY9eyhlbCkgPT4gdGhpcy5hZGRDb2xsZWN0aW9uQnRuID0gZWx9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gb3ZlcmxheT17XG4gICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciBjb2xsZWN0aW9uLXBvcG92ZXJcIiB0aXRsZT1cImFkZCBuZXcgY29sbGVjdGlvblwiIGlkPVwiYWRkbmV3Y29sbGVjdGlvblwiPlxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVBZGRDb2xsZWN0aW9ufT5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cblxuICAgICAgICAgICAgICAgIDxwPlRhc2tzIGluIHRoaXMgY29sbGVjdGlvbjo8L3A+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGFza0NoZWNrYm94ZXN9XG5cbiAgICAgICAgICAgICAgICA8cD5SZXF1aXJlbWVudCBmb3IgdGhpcyBjb2xsZWN0aW9uIChvcHRpb25hbCk6PC9wPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC1yZXF1aXJlbWVudFwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIj5SZXF1aXJlbWVudDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIGNvbXBvbmVudENsYXNzPVwic2VsZWN0XCIgbmFtZT1cInJlcXVpcmVtZW50c1wiIHBsYWNlaG9sZGVyPVwiXCIgZGVmYXVsdFZhbHVlPVwiXCIgY2xhc3NOYW1lPVwiYWNjZXNzU2VsZWN0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5yZXF1aXJlbWVudE9wdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMlwiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIHR5cGU9XCJzdWJtaXRcIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJwcmltYXJ5XCI+YWRkPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9eygpID0+IHsgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpOyB0aGlzLmFkZENvbGxlY3Rpb25CdG4uaGlkZSgpOyB9fT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tcGx1cyBhZGQtY29sbGVjdGlvbi1idG5cIiB0aXRsZT1cImFkZCBuZXcgY29sbGVjdGlvblwiPjwvc3Bhbj5cbiAgICAgICAgICA8L092ZXJsYXlUcmlnZ2VyPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuY29sbGVjdGlvbnNWaXNpYmxlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCB0b2dnbGUtcHJvcGVydHktYnRuJyA6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93biB0b2dnbGUtcHJvcGVydHktYnRuJ31cbiAgICAgICAgICAgIHRpdGxlPXt0aGlzLmNvbGxlY3Rpb25zVmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQ29sbGVjdGlvbnNWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9e3RoaXMuY29sbGVjdGlvbnNWaXNpYmxlID8gJ3Zpc2libGUtY29udGFpbmVyIGxpc3QtZ3JvdXAtaXRlbSBjb2xsZWN0aW9ucycgOiAnaW52aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gY29sbGVjdGlvbnMnfT5cbiAgICAgICAgICB7c3RvcmUuY29sbGVjdGlvbnMubWFwKChjLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPENvbGxlY3Rpb24gY29sbGVjdGlvbj17Y30ga2V5PXtpfSBpbmRleD17aX0gLz47XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvbGk+XG4gICAgICA8L0ZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSAnTElDRU5TRScgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbic7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuXG5pbXBvcnQgc3RvcmUsIHsgTUNvbGxlY3Rpb24gfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBDb2xsZWN0aW9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9O1xuXG4gIEBvYnNlcnZhYmxlIGJvZHlWaXNpYmxlID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIGlucHV0VmFsaWQgPSB0cnVlO1xuICBAb2JzZXJ2YWJsZSBkZWxldGVNb2RhbFZpc2libGUgPSBmYWxzZTtcblxuICBAYWN0aW9uIHRvZ2dsZUJvZHlWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLmJvZHlWaXNpYmxlID0gISh0aGlzLmJvZHlWaXNpYmxlKTsgfVxuICBAYWN0aW9uIHNldElucHV0VmFsaWRpdHkgPSAodmFsaWQpID0+IHsgdGhpcy5pbnB1dFZhbGlkID0gdmFsaWQ7IH1cbiAgQGFjdGlvbiBvcGVuRGVsZXRlTW9kYWwgPSAoKSA9PiB7IHRoaXMuZGVsZXRlTW9kYWxWaXNpYmxlID0gdHJ1ZTsgfVxuICBAYWN0aW9uIGNsb3NlRGVsZXRlTW9kYWwgPSAoKSA9PiB7IHRoaXMuZGVsZXRlTW9kYWxWaXNpYmxlID0gZmFsc2U7IH1cblxuICBlZGl0Q29sbGVjdGlvbkJ0bjtcblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgaGlkZUVkaXRDb2xsZWN0aW9uQnV0dG9uID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpO1xuICAgIHRoaXMuZWRpdENvbGxlY3Rpb25CdG4uaGlkZSgpO1xuICB9XG5cbiAgaGFuZGxlRWRpdENvbGxlY3Rpb24gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3RoZXJDb2xsZWN0aW9ucyA9IHN0b3JlLmNvbGxlY3Rpb25zLmZpbHRlcihjID0+IGMuaWQgIT09IHRoaXMucHJvcHMuY29sbGVjdGlvbi5pZCk7XG4gICAgaWYgKG90aGVyQ29sbGVjdGlvbnMuc29tZShjID0+IGMuaWQgPT09IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgTUNvbGxlY3Rpb247XG4gICAgY29sbGVjdGlvbi5pZCA9IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWU7XG5cbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKCh0LCBpbmRleCkgPT4ge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLnRhcmdldFswXS5mb3JtW2luZGV4ICsgMV0udmFsdWU7IGkrKykge1xuICAgICAgICBjb2xsZWN0aW9uLnRhc2tzLnB1c2godC5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVsncmVxdWlyZW1lbnRzJ10udmFsdWUgIT09ICcnKSB7XG4gICAgICBjb2xsZWN0aW9uLnJlcXVpcmVtZW50cy5wdXNoKGUudGFyZ2V0WzBdLmZvcm1bJ3JlcXVpcmVtZW50cyddLnZhbHVlKTtcbiAgICB9XG5cbiAgICBzdG9yZS5lZGl0Q29sbGVjdGlvbih0aGlzLnByb3BzLmluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB0aGlzLmVkaXRDb2xsZWN0aW9uQnRuLmhpZGUoKTtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZUNvbGxlY3Rpb24gPSAoKSA9PiB7XG4gICAgc3RvcmUucmVtb3ZlQ29sbGVjdGlvbih0aGlzLnByb3BzLmluZGV4KTtcbiAgICB0aGlzLmNsb3NlRGVsZXRlTW9kYWwoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB2YXIgVGFza0NoZWNrYm94ZXMgPSBbXTtcbiAgICBsZXQgcmVxdWlyZW1lbnRPcHRpb25zID0gW107XG4gICAgbGV0IGN1cnJlbnRSZXF1aXJlbWVudCA9ICcnO1xuICAgIGxldCByZXF1aXJlbWVudENvbnRhaW5lcnMgPSBbXTtcblxuICAgIHN0b3JlLnRhc2tzLmZvckVhY2goKHRhc2ssIGkpID0+IHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICB0aGlzLnByb3BzLmNvbGxlY3Rpb24udGFza3MuZm9yRWFjaChjdXJyZW50VGFzayA9PiB7XG4gICAgICAgIGlmICh0YXNrLmlkID09PSBjdXJyZW50VGFzaykge1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVGFza0NoZWNrYm94ZXMucHVzaChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LXRhc2tcIiBrZXk9eyd0LWJveCcgKyBpfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiIHRpdGxlPXt0YXNrLmlkfT57dGFzay5pZH08L2Rpdj5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT1cImFkZC1jZy10Yy1jb3VudGVyXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBkZWZhdWx0VmFsdWU9e2NvdW50fSAvPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBzdG9yZS5yZXF1aXJlbWVudHMuZm9yRWFjaCgocmVxdWlyZW1lbnQsIGkpID0+IHtcbiAgICAgIHJlcXVpcmVtZW50T3B0aW9ucy5wdXNoKFxuICAgICAgICA8b3B0aW9uIHZhbHVlPXtyZXF1aXJlbWVudC5pZH0ga2V5PXsnb3B0aW9uJyArIGl9PntyZXF1aXJlbWVudC5pZH08L29wdGlvbj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnByb3BzLmNvbGxlY3Rpb24ucmVxdWlyZW1lbnRzLmZvckVhY2goKHJlcXVpcmVtZW50LCBpKSA9PiB7XG4gICAgICBsZXQgZWwgPSBzdG9yZS5yZXF1aXJlbWVudHMuZmluZChyID0+IHIuaWQgPT09IHJlcXVpcmVtZW50KTtcbiAgICAgIGlmIChlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRSZXF1aXJlbWVudCA9IHJlcXVpcmVtZW50O1xuICAgICAgICByZXF1aXJlbWVudENvbnRhaW5lcnMucHVzaChcbiAgICAgICAgICA8ZGl2IGtleT17J3JlcXVpcmVtZW50JyArIGl9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVxdWlyZW1lbnQtY2hpbGRcIj5cbiAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInByb3AtYWNjZXNzXCIgdGl0bGU9eyhlbC50eXBlID09PSAnaG9zdG5hbWUnKSA/ICdob3N0IG5hbWUnIDogJyd9PnsoZWwudHlwZSA9PT0gJ2hvc3RuYW1lJykgPyAnSE4gJyA6ICcnfTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcC1hY2Nlc3NcIiB0aXRsZT17KGVsLnR5cGUgPT09ICd3bm5hbWUnKSA/ICdTU0ggd29ya2VyIG5vZGUgbmFtZScgOiAnJ30+eyhlbC50eXBlID09PSAnd25uYW1lJykgPyAnV04gJyA6ICcnfTwvc3Bhbj5cbiAgICAgICAgICAgICAge3JlcXVpcmVtZW50fVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sbGVjdGlvblwiPlxuICAgICAgICA8aDU+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10YXNrc1wiPjwvc3Bhbj5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jb2xsZWN0aW9uLmlkfVxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuYm9keVZpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyA6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5ib2R5VmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQm9keVZpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIiB0aXRsZT1cInJlbW92ZVwiIG9uQ2xpY2s9e3RoaXMub3BlbkRlbGV0ZU1vZGFsfT48L3NwYW4+XG4gICAgICAgICAgPE1vZGFsIHNob3c9e3RoaXMuZGVsZXRlTW9kYWxWaXNpYmxlfSBvbkhpZGU9e3RoaXMuY2xvc2VEZWxldGVNb2RhbH0+XG4gICAgICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgICAgICA8TW9kYWwuVGl0bGU+RGVsZXRlIDxzdHJvbmc+e3RoaXMucHJvcHMuY29sbGVjdGlvbi5pZH08L3N0cm9uZz4/PC9Nb2RhbC5UaXRsZT5cbiAgICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICAgIDxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIGNvbGxlY3Rpb24gPHN0cm9uZz57dGhpcy5wcm9wcy5jb2xsZWN0aW9uLmlkfT88L3N0cm9uZz48L3A+XG4gICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICA8QnV0dG9uIGJzU3R5bGU9XCJkYW5nZXJcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlbW92ZUNvbGxlY3Rpb259PkRlbGV0ZTwvQnV0dG9uPlxuICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuY2xvc2VEZWxldGVNb2RhbH0+Q2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgICA8L01vZGFsPlxuXG4gICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgcmVmPXsoZWwpID0+IHRoaXMuZWRpdENvbGxlY3Rpb25CdG4gPSBlbH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBvdmVybGF5PXtcbiAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIGNvbGxlY3Rpb24tcG9wb3ZlclwiIHRpdGxlPVwiZWRpdCBjb2xsZWN0aW9uXCIgaWQ9e3RoaXMucHJvcHMuY29sbGVjdGlvbi5pZH0+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUVkaXRDb2xsZWN0aW9ufT5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMuY29sbGVjdGlvbi5pZH0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG5cbiAgICAgICAgICAgICAgICA8cD5UYXNrcyBpbiB0aGlzIGNvbGxlY3Rpb246PC9wPlxuICAgICAgICAgICAgICAgIHtUYXNrQ2hlY2tib3hlc31cblxuICAgICAgICAgICAgICAgIDxwPlJlcXVpcmVtZW50IGZvciB0aGlzIGNvbGxlY3Rpb24gKG9wdGlvbmFsKTo8L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LXJlcXVpcmVtZW50XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiPlJlcXVpcmVtZW50PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY29tcG9uZW50Q2xhc3M9XCJzZWxlY3RcIiBuYW1lPVwicmVxdWlyZW1lbnRzXCIgcGxhY2Vob2xkZXI9XCJcIiBkZWZhdWx0VmFsdWU9e2N1cnJlbnRSZXF1aXJlbWVudH0gY2xhc3NOYW1lPVwiYWNjZXNzU2VsZWN0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICB7cmVxdWlyZW1lbnRPcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmVkaXQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17dGhpcy5oaWRlRWRpdENvbGxlY3Rpb25CdXR0b259PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICB9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0XCIgdGl0bGU9XCJlZGl0XCI+PC9zcGFuPlxuICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG4gICAgICAgIDwvaDU+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ3Zpc2libGUtY29udGFpbmVyJyA6ICdpbnZpc2libGUtY29udGFpbmVyJ30+XG4gICAgICAgICAge3RoaXMucHJvcHMuY29sbGVjdGlvbi50YXNrcy5tYXAoKHRhc2ssIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8c3BhbiBrZXk9e2l9Pnt0YXNrfTwvc3Bhbj47XG4gICAgICAgICAgfSl9XG4gICAgICAgICAge3JlcXVpcmVtZW50Q29udGFpbmVyc31cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgXCJMSUNFTlNFXCIgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IElucHV0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwJztcbmltcG9ydCBPdmVybGF5VHJpZ2dlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5cbmltcG9ydCBHcm91cCBmcm9tICcuL0dyb3VwJztcblxuaW1wb3J0IHN0b3JlLCB7IE1Hcm91cCB9IGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyb3VwTGlzdCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdGFza0NoZWNrYm94ZXM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25DaGVja2JveGVzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBAb2JzZXJ2YWJsZSBpbnB1dFZhbGlkID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIGdyb3Vwc1Zpc2libGUgPSB0cnVlO1xuXG4gIEBhY3Rpb24gc2V0SW5wdXRWYWxpZGl0eSA9ICh2YWxpZCkgPT4geyB0aGlzLmlucHV0VmFsaWQgPSB2YWxpZDsgfVxuICBAYWN0aW9uIHRvZ2dsZUdyb3Vwc1Zpc2liaWxpdHkgPSAoKSA9PiB7IHRoaXMuZ3JvdXBzVmlzaWJsZSA9ICF0aGlzLmdyb3Vwc1Zpc2libGU7IH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgYWRkR3JvdXBCdG47XG5cbiAgaGFuZGxlQWRkR3JvdXAgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBjYW5jZWwgaWYgSUQgaXMgZW1wdHksIG9yIGlmIElEIGFscmVhZHkgZXhpc3RzXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUgPT09ICcnIHx8IHN0b3JlLmhhc01haW5Hcm91cChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBncm91cCA9IG5ldyBNR3JvdXA7XG4gICAgZ3JvdXAuaWQgPSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlO1xuICAgIGdyb3VwLm4gPSBlLnRhcmdldFswXS5mb3JtWzFdLnZhbHVlO1xuXG4gICAgbGV0IHRhc2tzSW5kZXggPSAwO1xuICAgIHN0b3JlLnRhc2tzLmZvckVhY2goKHQsIGopID0+IHtcbiAgICAgIHRhc2tzSW5kZXgrKztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVtqICsgMl0udmFsdWU7IGkrKykge1xuICAgICAgICBncm91cC50YXNrcy5wdXNoKHQuaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN0b3JlLmNvbGxlY3Rpb25zLmZvckVhY2goKGMsIGopID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVt0YXNrc0luZGV4ICsgaiArIDJdLnZhbHVlOyBpKyspIHtcbiAgICAgICAgZ3JvdXAuY29sbGVjdGlvbnMucHVzaChjLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0b3JlLmFkZE1haW5Hcm91cChncm91cCk7XG4gICAgdGhpcy5hZGRHcm91cEJ0bi5oaWRlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbSBncm91cHMtaGVhZGVyXCI+XG4gICAgICAgICAgZ3JvdXBzXG4gICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgcmVmPXsoZWwpID0+IHRoaXMuYWRkR3JvdXBCdG4gPSBlbH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBvdmVybGF5PXtcbiAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIGdyb3VwLXBvcG92ZXJcIiB0aXRsZT1cImFkZCBuZXcgZ3JvdXBcIiBpZD1cImFkZG5ld2dyb3VwXCI+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUFkZEdyb3VwfT5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSAvPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAuQWRkb24+bjwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJhZGQtY2ctdGMtY291bnRlclwiIHR5cGU9XCJ0ZXh0XCIgZGVmYXVsdFZhbHVlPVwiMVwiIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDxwPlRhc2tzIGluIHRoaXMgZ3JvdXA6PC9wPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnRhc2tDaGVja2JveGVzfVxuICAgICAgICAgICAgICAgIDxwPkNvbGxlY3Rpb25zIGluIHRoaXMgZ3JvdXA6PC9wPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNvbGxlY3Rpb25DaGVja2JveGVzfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMlwiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIHR5cGU9XCJzdWJtaXRcIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJwcmltYXJ5XCI+YWRkPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9eygpID0+IHsgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpOyB0aGlzLmFkZEdyb3VwQnRuLmhpZGUoKTsgfX0+Y2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgIH0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMgYWRkLWdyb3VwLWJ0blwiIHRpdGxlPVwiYWRkIG5ldyBncm91cFwiPjwvc3Bhbj5cbiAgICAgICAgICA8L092ZXJsYXlUcmlnZ2VyPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuZ3JvdXBzVmlzaWJsZSA/ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAgdG9nZ2xlLXByb3BlcnR5LWJ0bicgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24gdG9nZ2xlLXByb3BlcnR5LWJ0bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5ncm91cHNWaXNpYmxlID8gJ2hpZGUnIDogJ3Nob3cnfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVHcm91cHNWaXNpYmlsaXR5fT5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9e3RoaXMuZ3JvdXBzVmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gZ3JvdXBzJyA6ICdpbnZpc2libGUtY29udGFpbmVyIGxpc3QtZ3JvdXAtaXRlbSBncm91cHMnfT5cbiAgICAgICAgICB7c3RvcmUubWFpbi5ncm91cHMubWFwKChnLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPEdyb3VwIGdyb3VwPXtnfSBrZXk9e2l9IGluZGV4PXtpfSAvPjtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9saT5cbiAgICAgIDwvRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlICdMSUNFTlNFJyAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtR3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtR3JvdXAnO1xuaW1wb3J0IElucHV0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwJztcbmltcG9ydCBNb2RhbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL01vZGFsJztcbmltcG9ydCBPdmVybGF5VHJpZ2dlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5cbmltcG9ydCBzdG9yZSwgeyBNR3JvdXAgfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZ3JvdXA6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBpbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH07XG5cbiAgQG9ic2VydmFibGUgYm9keVZpc2libGUgPSBmYWxzZTtcbiAgQG9ic2VydmFibGUgaW5wdXRWYWxpZCA9IHRydWU7XG4gIEBvYnNlcnZhYmxlIGRlbGV0ZU1vZGFsVmlzaWJsZSA9IGZhbHNlO1xuXG4gIEBhY3Rpb24gdG9nZ2xlQm9keVZpc2liaWxpdHkgPSAoKSA9PiB7IHRoaXMuYm9keVZpc2libGUgPSAhKHRoaXMuYm9keVZpc2libGUpOyB9XG4gIEBhY3Rpb24gc2V0SW5wdXRWYWxpZGl0eSA9ICh2YWxpZCkgPT4geyB0aGlzLmlucHV0VmFsaWQgPSB2YWxpZDsgfVxuICBAYWN0aW9uIG9wZW5EZWxldGVNb2RhbCA9ICgpID0+IHsgdGhpcy5kZWxldGVNb2RhbFZpc2libGUgPSB0cnVlOyB9XG4gIEBhY3Rpb24gY2xvc2VEZWxldGVNb2RhbCA9ICgpID0+IHsgdGhpcy5kZWxldGVNb2RhbFZpc2libGUgPSBmYWxzZTsgfVxuXG4gIGVkaXRHcm91cEJ0bjtcblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgaGlkZUVkaXRHcm91cEJ1dHRvbiA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKTtcbiAgICB0aGlzLmVkaXRHcm91cEJ0bi5oaWRlKCk7XG4gIH1cblxuICBoYW5kbGVFZGl0R3JvdXAgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3RoZXJHcm91cHMgPSBzdG9yZS5tYWluLmdyb3Vwcy5maWx0ZXIoZyA9PiBnLmlkICE9PSB0aGlzLnByb3BzLmdyb3VwLmlkKTtcbiAgICBpZiAob3RoZXJHcm91cHMuc29tZShnID0+IGcuaWQgPT09IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGdyb3VwID0gbmV3IE1Hcm91cDtcbiAgICBncm91cC5pZCA9IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWU7XG4gICAgZ3JvdXAubiA9IGUudGFyZ2V0WzBdLmZvcm1bMV0udmFsdWU7XG5cbiAgICB2YXIgdGFza3NJbmRleCA9IDA7XG4gICAgc3RvcmUudGFza3MuZm9yRWFjaCgodCwgaW5kZXgpID0+IHtcbiAgICAgIHRhc2tzSW5kZXgrKztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS50YXJnZXRbMF0uZm9ybVtpbmRleCArIDJdLnZhbHVlOyBpKyspIHtcbiAgICAgICAgZ3JvdXAudGFza3MucHVzaCh0LmlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdG9yZS5jb2xsZWN0aW9ucy5mb3JFYWNoKChjLCBpbmRleCkgPT4ge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLnRhcmdldFswXS5mb3JtW3Rhc2tzSW5kZXggKyBpbmRleCArIDJdLnZhbHVlOyBpKyspIHtcbiAgICAgICAgZ3JvdXAuY29sbGVjdGlvbnMucHVzaChjLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0b3JlLmVkaXRNYWluR3JvdXAodGhpcy5wcm9wcy5pbmRleCwgZ3JvdXApO1xuICAgIHRoaXMuZWRpdEdyb3VwQnRuLmhpZGUoKTtcblxuICB9XG5cbiAgaGFuZGxlUmVtb3ZlR3JvdXAgPSAoKSA9PiB7XG4gICAgc3RvcmUucmVtb3ZlTWFpbkdyb3VwKHRoaXMucHJvcHMuaW5kZXgpO1xuICAgIHRoaXMuY2xvc2VEZWxldGVNb2RhbCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHZhciBUYXNrQ2hlY2tib3hlcyA9IFtdO1xuICAgIHZhciBDb2xsZWN0aW9uQ2hlY2tib3hlcyA9IFtdO1xuXG4gICAgc3RvcmUudGFza3MuZm9yRWFjaCgodGFzaywgaSkgPT4ge1xuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIHRoaXMucHJvcHMuZ3JvdXAudGFza3MuZm9yRWFjaChjdXJyZW50VGFzayA9PiB7XG4gICAgICAgIGlmICh0YXNrLmlkID09PSBjdXJyZW50VGFzaykge1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVGFza0NoZWNrYm94ZXMucHVzaChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LXRhc2tcIiBrZXk9eyd0LWJveCcgKyBpfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiIHRpdGxlPXt0YXNrLmlkfT57dGFzay5pZH08L2Rpdj5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT1cImFkZC1jZy10Yy1jb3VudGVyXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBkZWZhdWx0VmFsdWU9e2NvdW50fSAvPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBzdG9yZS5jb2xsZWN0aW9ucy5mb3JFYWNoKChjb2xsZWN0aW9uLCBpKSA9PiB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdGhpcy5wcm9wcy5ncm91cC5jb2xsZWN0aW9ucy5mb3JFYWNoKGN1cnJlbnRDb2xsZWN0aW9uID0+IHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24uaWQgPT09IGN1cnJlbnRDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBDb2xsZWN0aW9uQ2hlY2tib3hlcy5wdXNoKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtY29sbGVjdGlvblwiIGtleT17J2MtYm94JyArIGl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWxlbWVudC1uYW1lXCIgdGl0bGU9e2NvbGxlY3Rpb24uaWR9Pntjb2xsZWN0aW9uLmlkfTwvZGl2PlxuICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPVwiYWRkLWNnLXRjLWNvdW50ZXJcIiB0eXBlPVwibnVtYmVyXCIgbWluPVwiMFwiIGRlZmF1bHRWYWx1ZT17Y291bnR9IC8+XG4gICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwXCI+XG4gICAgICAgIDxoNT5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRhc2tzXCI+PC9zcGFuPlxuICAgICAgICAgIHt0aGlzLnByb3BzLmdyb3VwLmlkfVxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuYm9keVZpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyA6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5ib2R5VmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQm9keVZpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIiB0aXRsZT1cInJlbW92ZVwiIG9uQ2xpY2s9e3RoaXMub3BlbkRlbGV0ZU1vZGFsfT48L3NwYW4+XG4gICAgICAgICAgPE1vZGFsIHNob3c9e3RoaXMuZGVsZXRlTW9kYWxWaXNpYmxlfSBvbkhpZGU9e3RoaXMuY2xvc2VEZWxldGVNb2RhbH0+XG4gICAgICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgICAgICA8TW9kYWwuVGl0bGU+RGVsZXRlIDxzdHJvbmc+e3RoaXMucHJvcHMuZ3JvdXAuaWR9PC9zdHJvbmc+PzwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICA8cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBncm91cCA8c3Ryb25nPnt0aGlzLnByb3BzLmdyb3VwLmlkfT88L3N0cm9uZz48L3A+XG4gICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICA8QnV0dG9uIGJzU3R5bGU9XCJkYW5nZXJcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlbW92ZUdyb3VwfT5EZWxldGU8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PkNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPC9Nb2RhbD5cblxuICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHJlZj17KGVsKSA9PiB0aGlzLmVkaXRHcm91cEJ0biA9IGVsfSBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IG92ZXJsYXk9e1xuICAgICAgICAgICAgPFBvcG92ZXIgY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXIgZ3JvdXAtcG9wb3ZlclwiIHRpdGxlPVwiZWRpdCBncm91cFwiIGlkPXt0aGlzLnByb3BzLmdyb3VwLmlkfT5cbiAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlRWRpdEdyb3VwfT5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICcnIDogJ2ludmFsaWQtaW5wdXQnfSBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMuZ3JvdXAuaWR9IC8+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj5uPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT1cImFkZC1jZy10Yy1jb3VudGVyXCIgdHlwZT1cInRleHRcIiBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMuZ3JvdXAubn0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgPHA+VGFza3MgaW4gdGhpcyBncm91cDo8L3A+XG4gICAgICAgICAgICAgICAge1Rhc2tDaGVja2JveGVzfVxuICAgICAgICAgICAgICAgIDxwPkNvbGxlY3Rpb25zIGluIHRoaXMgZ3JvdXA6PC9wPlxuICAgICAgICAgICAgICAgIHtDb2xsZWN0aW9uQ2hlY2tib3hlc31cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmVkaXQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17dGhpcy5oaWRlRWRpdEdyb3VwQnV0dG9ufT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZWRpdFwiIHRpdGxlPVwiZWRpdFwiPjwvc3Bhbj5cbiAgICAgICAgICA8L092ZXJsYXlUcmlnZ2VyPlxuICAgICAgICA8L2g1PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5ib2R5VmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lcicgOiAnaW52aXNpYmxlLWNvbnRhaW5lcid9PlxuICAgICAgICAgIDxkaXY+PHN0cm9uZz4gbjogPC9zdHJvbmc+PHNwYW4gY2xhc3NOYW1lPVwicGxhaW5cIj57dGhpcy5wcm9wcy5ncm91cC5ufTwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLXRhc2tzXCI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5ncm91cC50YXNrcy5tYXAoKHRhc2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGtleT17aX0+e3Rhc2t9PC9zcGFuPjtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtY29sbGVjdGlvbnNcIj5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmdyb3VwLmNvbGxlY3Rpb25zLm1hcCgoY29sbGVjdGlvbiwgaSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gPHNwYW4ga2V5PXtpfT57Y29sbGVjdGlvbn08L3NwYW4+O1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlIFwiTElDRU5TRVwiICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IElucHV0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwJztcbmltcG9ydCBPdmVybGF5VHJpZ2dlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5cbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuL1Byb3BlcnR5JztcblxuaW1wb3J0IHN0b3JlLCB7IE1Qcm9wZXJ0eSB9IGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3BlcnR5TGlzdCBleHRlbmRzIENvbXBvbmVudCB7XG4gIEBvYnNlcnZhYmxlIGlucHV0VmFsaWQgPSBmYWxzZTtcbiAgQG9ic2VydmFibGUgcHJvcGVydGllc1Zpc2libGUgPSB0cnVlO1xuXG4gIEBhY3Rpb24gc2V0SW5wdXRWYWxpZGl0eSA9ICh2YWxpZCkgPT4geyB0aGlzLmlucHV0VmFsaWQgPSB2YWxpZDsgfVxuICBAYWN0aW9uIHRvZ2dsZVByb3BlcnRpZXNWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLnByb3BlcnRpZXNWaXNpYmxlID0gIXRoaXMucHJvcGVydGllc1Zpc2libGU7IH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgYWRkUHJvcGVydHlCdG47XG5cbiAgaGFuZGxlQWRkUHJvcGVydHkgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlID09PSAnJyB8fCBzdG9yZS5oYXNQcm9wZXJ0eShlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkaXR5KGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wZXJ0eSA9IG5ldyBNUHJvcGVydHk7XG4gICAgcHJvcGVydHkuaWQgPSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlO1xuXG4gICAgc3RvcmUuYWRkUHJvcGVydHkocHJvcGVydHkpO1xuICAgIHRoaXMuYWRkUHJvcGVydHlCdG4uaGlkZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RnJhZ21lbnQ+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW0gcHJvcGVydGllcy1oZWFkZXJcIj5cbiAgICAgICAgICBwcm9wZXJ0aWVzXG4gICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgcmVmPXsoZWwpID0+IHRoaXMuYWRkUHJvcGVydHlCdG4gPSBlbH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBvdmVybGF5PXtcbiAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIHByb3BlcnR5LXBvcG92ZXJcIiB0aXRsZT1cImFkZCBuZXcgcHJvcGVydHlcIiBpZD1cImFkZG5ld3Byb3BlcnR5XCI+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUFkZFByb3BlcnR5fT5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPmlkJm5ic3A7PC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgYXV0b0ZvY3VzIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnJyA6ICdpbnZhbGlkLWlucHV0J30gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5hZGQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4geyB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSk7IHRoaXMuYWRkUHJvcGVydHlCdG4uaGlkZSgpOyB9fT5jYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgICAgfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tcGx1cyBhZGQtcHJvcGVydHktYnRuXCIgdGl0bGU9XCJhZGQgbmV3IHByb3BlcnR5XCI+PC9zcGFuPlxuICAgICAgICAgIDwvT3ZlcmxheVRyaWdnZXI+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wZXJ0aWVzVmlzaWJsZSA/ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAgdG9nZ2xlLXByb3BlcnR5LWJ0bicgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24gdG9nZ2xlLXByb3BlcnR5LWJ0bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wZXJ0aWVzVmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlUHJvcGVydGllc1Zpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT17dGhpcy5wcm9wZXJ0aWVzVmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gcHJvcGVydGllcycgOiAnaW52aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gcHJvcGVydGllcyd9PlxuICAgICAgICAgIHtzdG9yZS5wcm9wZXJ0aWVzLm1hcCgocCwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxQcm9wZXJ0eSBwcm9wZXJ0eT17cH0ga2V5PXtpfSBpbmRleD17aX0gLz47XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvbGk+XG4gICAgICA8L0ZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgQ29weXJpZ2h0IChDKSAyMDE0IEdTSSBIZWxtaG9sdHp6ZW50cnVtIGZ1ZXIgU2Nod2VyaW9uZW5mb3JzY2h1bmcgR21iSCAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgICAgICAgICAgICAgKlxuICogICAgICAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2VuY2UgdmVyc2lvbiAzIChMR1BMKSB2ZXJzaW9uIDMsICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgIGNvcGllZCB2ZXJiYXRpbSBpbiB0aGUgZmlsZSAnTElDRU5TRScgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbic7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbCc7XG5cbmltcG9ydCBzdG9yZSwgeyBNUHJvcGVydHkgfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9wZXJ0eSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcHJvcGVydHk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBpbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH07XG5cbiAgQG9ic2VydmFibGUgYm9keVZpc2libGUgPSBmYWxzZTtcbiAgQG9ic2VydmFibGUgZWRpdGluZyA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSBkZWxldGVNb2RhbFZpc2libGUgPSBmYWxzZTtcblxuICBAYWN0aW9uIHRvZ2dsZUJvZHlWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLmJvZHlWaXNpYmxlID0gISh0aGlzLmJvZHlWaXNpYmxlKTsgfVxuICBAYWN0aW9uIHRvZ2dsZUVkaXRpbmcgPSAoKSA9PiB7IGlmICghdGhpcy5lZGl0aW5nKSB7IHRoaXMuZWRpdGluZyA9IHRydWU7IHRoaXMuYm9keVZpc2libGUgPSB0cnVlOyB9IGVsc2UgeyB0aGlzLmVkaXRpbmcgPSBmYWxzZTsgfSB9XG4gIEBhY3Rpb24gb3BlbkRlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IHRydWU7IH1cbiAgQGFjdGlvbiBjbG9zZURlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IGZhbHNlOyB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGhhbmRsZUVkaXRQcm9wZXJ0eSA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUgPT09ICcnIHx8IHN0b3JlLmhhc1Byb3BlcnR5KGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnRvZ2dsZUVkaXRpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wZXJ0eSA9IG5ldyBNUHJvcGVydHk7XG4gICAgcHJvcGVydHkuaWQgPSBlLnRhcmdldFswXS5mb3JtWzBdLnZhbHVlO1xuXG4gICAgc3RvcmUuZWRpdFByb3BlcnR5KHRoaXMucHJvcHMuaW5kZXgsIHByb3BlcnR5KTtcbiAgICB0aGlzLnRvZ2dsZUVkaXRpbmcoKTtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZVByb3BlcnR5ID0gKCkgPT4ge1xuICAgIHN0b3JlLnJlbW92ZVByb3BlcnR5KHRoaXMucHJvcHMuaW5kZXgpO1xuICAgIHRoaXMuY2xvc2VEZWxldGVNb2RhbCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb3BlcnR5XCI+XG4gICAgICAgIDxoNT5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRhc2tzXCI+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImVsZW1lbnQtdGl0bGVcIiB0aXRsZT17dGhpcy5wcm9wcy5wcm9wZXJ0eS5pZH0+e3RoaXMucHJvcHMucHJvcGVydHkuaWR9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuYm9keVZpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyA6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5ib2R5VmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQm9keVZpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIiB0aXRsZT1cImRlbGV0ZVwiIG9uQ2xpY2s9e3RoaXMub3BlbkRlbGV0ZU1vZGFsfT48L3NwYW4+XG4gICAgICAgICAgPE1vZGFsIHNob3c9e3RoaXMuZGVsZXRlTW9kYWxWaXNpYmxlfSBvbkhpZGU9e3RoaXMuY2xvc2VEZWxldGVNb2RhbH0+XG4gICAgICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgICAgICA8TW9kYWwuVGl0bGU+RGVsZXRlIDxzdHJvbmc+e3RoaXMucHJvcHMucHJvcGVydHkuaWR9PC9zdHJvbmc+PzwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICA8cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBwcm9wZXJ0eSA8c3Ryb25nPnt0aGlzLnByb3BzLnByb3BlcnR5LmlkfT88L3N0cm9uZz48L3A+XG4gICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICA8QnV0dG9uIGJzU3R5bGU9XCJkYW5nZXJcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlbW92ZVByb3BlcnR5fT5EZWxldGU8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PkNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPC9Nb2RhbD5cblxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZWRpdFwiIHRpdGxlPVwiZWRpdFwiIG9uQ2xpY2s9e3RoaXMudG9nZ2xlRWRpdGluZ30+PC9zcGFuPlxuICAgICAgICA8L2g1PlxuICAgICAgICA8dWwgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ3Zpc2libGUtY29udGFpbmVyJyA6ICdpbnZpc2libGUtY29udGFpbmVyJ30+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHt0aGlzLmVkaXRpbmcgP1xuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVFZGl0UHJvcGVydHl9PlxuICAgICAgICAgICAgICAgIDxzdHJvbmc+aWQ6IDwvc3Ryb25nPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cyBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMucHJvcGVydHkuaWR9PjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5XCIgdHlwZT1cInN1Ym1pdFwiPm9rPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICA8c3BhbiB0aXRsZT17dGhpcy5wcm9wcy5wcm9wZXJ0eS5pZH0+PHN0cm9uZz5pZDo8L3N0cm9uZz4ge3RoaXMucHJvcHMucHJvcGVydHkuaWR9PC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlIFwiTElDRU5TRVwiICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IENvbnRyb2xMYWJlbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0NvbnRyb2xMYWJlbCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuaW1wb3J0IFJhZGlvIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUmFkaW8nO1xuXG5pbXBvcnQgUmVxdWlyZW1lbnQgZnJvbSAnLi9SZXF1aXJlbWVudCc7XG5cbmltcG9ydCBzdG9yZSwgeyBNUmVxdWlyZW1lbnQgfSBmcm9tICcuLi9TdG9yZSc7XG5cbkBvYnNlcnZlciBleHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1aXJlbWVudExpc3QgZXh0ZW5kcyBDb21wb25lbnQge1xuICBAb2JzZXJ2YWJsZSBpbnB1dFZhbGlkID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIHJlcXVpcmVtZW50c1Zpc2libGUgPSB0cnVlO1xuXG4gIEBhY3Rpb24gc2V0SW5wdXRWYWxpZGl0eSA9ICh2YWxpZCkgPT4geyB0aGlzLmlucHV0VmFsaWQgPSB2YWxpZDsgfVxuICBAYWN0aW9uIHRvZ2dsZVJlcXVpcmVtZW50c1Zpc2liaWxpdHkgPSAoKSA9PiB7IHRoaXMucmVxdWlyZW1lbnRzVmlzaWJsZSA9ICF0aGlzLnJlcXVpcmVtZW50c1Zpc2libGU7IH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgYWRkUmVxdWlyZW1lbnRCdG47XG5cbiAgaGFuZGxlQWRkUmVxdWlyZW1lbnQgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIGNhbmNlbCBpZiBJRCBvciB2YWx1ZSBpcyBlbXB0eSwgb3IgaWYgSUQgYWxyZWFkeSBleGlzdHNcbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSA9PT0gJycgfHwgZS50YXJnZXRbMF0uZm9ybVszXS52YWx1ZSA9PT0gJycgfHwgc3RvcmUuaGFzUmVxdWlyZW1lbnQoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSkpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmVxdWlyZW1lbnQgPSBuZXcgTVJlcXVpcmVtZW50O1xuICAgIHJlcXVpcmVtZW50LmlkID0gZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZTtcbiAgICByZXF1aXJlbWVudC52YWx1ZSA9IGUudGFyZ2V0WzBdLmZvcm1bM10udmFsdWU7XG4gICAgY29uc29sZS5sb2coZS50YXJnZXRbMF0uZm9ybVszXS52YWx1ZSk7XG5cbiAgICAvLyBzZXQgdGhlIHR5cGUgYWNjb3JkaW5nIHRvIHRoZSByYWRpbyBidXR0b24gdmFsdWVcbiAgICBlLnRhcmdldFswXS5mb3JtWzFdLmNoZWNrZWQgPyByZXF1aXJlbWVudC50eXBlID0gJ2hvc3RuYW1lJyA6IHJlcXVpcmVtZW50LnR5cGUgPSAnd25uYW1lJztcblxuICAgIHN0b3JlLmFkZFJlcXVpcmVtZW50KHJlcXVpcmVtZW50KTtcbiAgICB0aGlzLmFkZFJlcXVpcmVtZW50QnRuLmhpZGUoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZyYWdtZW50PlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtIHJlcXVpcmVtZW50cy1oZWFkZXJcIj5cbiAgICAgICAgICByZXF1aXJlbWVudHNcbiAgICAgICAgICA8T3ZlcmxheVRyaWdnZXIgdHJpZ2dlcj1cImNsaWNrXCIgcGxhY2VtZW50PVwicmlnaHRcIiByZWY9eyhlbCkgPT4gdGhpcy5hZGRSZXF1aXJlbWVudEJ0biA9IGVsfSBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IG92ZXJsYXk9e1xuICAgICAgICAgICAgPFBvcG92ZXIgY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXIgcmVxdWlyZW1lbnQtcG9wb3ZlclwiIHRpdGxlPVwiYWRkIG5ldyByZXF1aXJlbWVudFwiIGlkPVwiYWRkbmV3cmVxdWlyZW1lbnRcIj5cbiAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlQWRkUmVxdWlyZW1lbnR9PlxuICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAuQWRkb24+aWQ8L0lucHV0R3JvdXAuQWRkb24+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgdHlwZT1cInRleHRcIiBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJycgOiAnaW52YWxpZC1pbnB1dCd9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICA8Q29udHJvbExhYmVsIGNsYXNzTmFtZT1cInBhdHRlcm4tbGFiZWxcIj5QYXR0ZXJuIFR5cGU8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxSYWRpbyBuYW1lPVwicGF0dGVyblR5cGVcIiBpbmxpbmUgZGVmYXVsdENoZWNrZWQgdGl0bGU9XCJob3N0IG5hbWVcIj5ob3N0bmFtZTwvUmFkaW8+XG4gICAgICAgICAgICAgICAgICA8UmFkaW8gbmFtZT1cInBhdHRlcm5UeXBlXCIgaW5saW5lIHRpdGxlPVwiU1NIIHdvcmtlciBub2RlIG5hbWVcIj53bm5hbWU8L1JhZGlvPlxuICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAuQWRkb24+cGF0dGVybjwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnJyA6ICdtb25vIGludmFsaWQtaW5wdXQnfSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmFkZDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXsoKSA9PiB7IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKTsgdGhpcy5hZGRSZXF1aXJlbWVudEJ0bi5oaWRlKCk7IH19PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICB9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzIGFkZC1yZXF1aXJlbWVudC1idG5cIiB0aXRsZT1cImFkZCBuZXcgcmVxdWlyZW1lbnRcIj48L3NwYW4+XG4gICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnJlcXVpcmVtZW50c1Zpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIHRvZ2dsZS1wcm9wZXJ0eS1idG4nIDogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duIHRvZ2dsZS1wcm9wZXJ0eS1idG4nfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMucmVxdWlyZW1lbnRzVmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlUmVxdWlyZW1lbnRzVmlzaWJpbGl0eX0+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPXt0aGlzLnJlcXVpcmVtZW50c1Zpc2libGUgPyAndmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIHJlcXVpcmVtZW50cycgOiAnaW52aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gcmVxdWlyZW1lbnRzJ30+XG4gICAgICAgICAge3N0b3JlLnJlcXVpcmVtZW50cy5tYXAoKHIsIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8UmVxdWlyZW1lbnQgcmVxdWlyZW1lbnQ9e3J9IGtleT17aX0gaW5kZXg9e2l9IC8+O1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L2xpPlxuICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgJ0xJQ0VOU0UnICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IENvbnRyb2xMYWJlbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0NvbnRyb2xMYWJlbCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUdyb3VwJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvSW5wdXRHcm91cCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbCc7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL1BvcG92ZXInO1xuaW1wb3J0IFJhZGlvIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUmFkaW8nO1xuXG5pbXBvcnQgc3RvcmUsIHsgTVJlcXVpcmVtZW50IH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWlyZW1lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHJlcXVpcmVtZW50OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9O1xuXG4gIEBvYnNlcnZhYmxlIGJvZHlWaXNpYmxlID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIGlucHV0VmFsaWQgPSB0cnVlO1xuICBAb2JzZXJ2YWJsZSBkZWxldGVNb2RhbFZpc2libGUgPSBmYWxzZTtcblxuICBAYWN0aW9uIHRvZ2dsZUJvZHlWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLmJvZHlWaXNpYmxlID0gISh0aGlzLmJvZHlWaXNpYmxlKTsgfVxuICBAYWN0aW9uIHNldElucHV0VmFsaWRpdHkgPSAodmFsaWQpID0+IHsgdGhpcy5pbnB1dFZhbGlkID0gdmFsaWQ7IH1cbiAgQGFjdGlvbiBvcGVuRGVsZXRlTW9kYWwgPSAoKSA9PiB7IHRoaXMuZGVsZXRlTW9kYWxWaXNpYmxlID0gdHJ1ZTsgfVxuICBAYWN0aW9uIGNsb3NlRGVsZXRlTW9kYWwgPSAoKSA9PiB7IHRoaXMuZGVsZXRlTW9kYWxWaXNpYmxlID0gZmFsc2U7IH1cblxuICBlZGl0UmVxdWlyZW1lbnRCdG47XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGhpZGVFZGl0UmVxdWlyZW1lbnRCdXR0b24gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSk7XG4gICAgdGhpcy5lZGl0UmVxdWlyZW1lbnRCdG4uaGlkZSgpO1xuICB9XG5cbiAgaGFuZGxlRWRpdFJlcXVpcmVtZW50ID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBjYW5jZWwgaWYgSUQgb3IgdmFsdWUgaXMgZW1wdHlcbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSA9PT0gJycgfHwgZS50YXJnZXRbMF0uZm9ybVszXS52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2FuY2VsIGlmIElEIGFscmVhZHkgZXhpc3RzIChleGNlcHQgaXRzIG93biBJRClcbiAgICBjb25zdCBvdGhlclJlcXVpcmVtZW50cyA9IHN0b3JlLnJlcXVpcmVtZW50cy5maWx0ZXIociA9PiByLmlkICE9PSB0aGlzLnByb3BzLnJlcXVpcmVtZW50LmlkKTtcbiAgICBpZiAob3RoZXJSZXF1aXJlbWVudHMuc29tZShyID0+IHIuaWQgPT09IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVpcmVtZW50ID0gbmV3IE1SZXF1aXJlbWVudDtcbiAgICByZXF1aXJlbWVudC5pZCA9IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWU7XG4gICAgcmVxdWlyZW1lbnQudmFsdWUgPSBlLnRhcmdldFswXS5mb3JtWzNdLnZhbHVlO1xuXG4gICAgLy8gc2V0IHRoZSB0eXBlIGFjY29yZGluZyB0byB0aGUgcmFkaW8gYnV0dG9uIHZhbHVlXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMV0uY2hlY2tlZCkge1xuICAgICAgcmVxdWlyZW1lbnQudHlwZSA9ICdob3N0bmFtZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVpcmVtZW50LnR5cGUgPSAnd25uYW1lJztcbiAgICB9XG5cbiAgICBzdG9yZS5lZGl0UmVxdWlyZW1lbnQodGhpcy5wcm9wcy5pbmRleCwgcmVxdWlyZW1lbnQpO1xuICAgIHRoaXMuZWRpdFJlcXVpcmVtZW50QnRuLmhpZGUoKTtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZVJlcXVpcmVtZW50ID0gKCkgPT4ge1xuICAgIHN0b3JlLnJlbW92ZVJlcXVpcmVtZW50KHRoaXMucHJvcHMuaW5kZXgpO1xuICAgIHRoaXMuY2xvc2VEZWxldGVNb2RhbCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlcXVpcmVtZW50XCI+XG4gICAgICAgIDxoNT5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRhc2tzXCI+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImVsZW1lbnQtdGl0bGVcIiB0aXRsZT17dGhpcy5wcm9wcy5yZXF1aXJlbWVudC5pZH0+e3RoaXMucHJvcHMucmVxdWlyZW1lbnQuaWR9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuYm9keVZpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyA6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5ib2R5VmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQm9keVZpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIiB0aXRsZT1cImRlbGV0ZVwiIG9uQ2xpY2s9e3RoaXMub3BlbkRlbGV0ZU1vZGFsfT48L3NwYW4+XG4gICAgICAgICAgPE1vZGFsIHNob3c9e3RoaXMuZGVsZXRlTW9kYWxWaXNpYmxlfSBvbkhpZGU9e3RoaXMuY2xvc2VEZWxldGVNb2RhbH0+XG4gICAgICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgICAgICA8TW9kYWwuVGl0bGU+RGVsZXRlIDxzdHJvbmc+e3RoaXMucHJvcHMucmVxdWlyZW1lbnQuaWR9PC9zdHJvbmc+PzwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICA8cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSByZXF1aXJlbWVudCA8c3Ryb25nPnt0aGlzLnByb3BzLnJlcXVpcmVtZW50LmlkfT88L3N0cm9uZz48L3A+XG4gICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICA8QnV0dG9uIGJzU3R5bGU9XCJkYW5nZXJcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlbW92ZVJlcXVpcmVtZW50fT5EZWxldGU8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmNsb3NlRGVsZXRlTW9kYWx9PkNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPC9Nb2RhbD5cblxuICAgICAgICAgIDxPdmVybGF5VHJpZ2dlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHJlZj17KGVsKSA9PiB0aGlzLmVkaXRSZXF1aXJlbWVudEJ0biA9IGVsfSBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IG92ZXJsYXk9e1xuICAgICAgICAgICAgPFBvcG92ZXIgY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXIgcmVxdWlyZW1lbnQtcG9wb3ZlclwiIHRpdGxlPVwiZWRpdCByZXF1aXJlbWVudFwiIGlkPXt0aGlzLnByb3BzLnJlcXVpcmVtZW50LmlkfT5cbiAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlRWRpdFJlcXVpcmVtZW50fT5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHR5cGU9XCJ0ZXh0XCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMucmVxdWlyZW1lbnQuaWR9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJycgOiAnaW52YWxpZC1pbnB1dCd9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICA8Q29udHJvbExhYmVsIGNsYXNzTmFtZT1cInBhdHRlcm4tbGFiZWxcIj5QYXR0ZXJuIFR5cGU8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxSYWRpbyBuYW1lPVwicGF0dGVyblR5cGVcIiBpbmxpbmUgZGVmYXVsdENoZWNrZWQ9e3RoaXMucHJvcHMucmVxdWlyZW1lbnQudHlwZSA9PT0gJ2hvc3RuYW1lJyA/IHRydWUgOiBmYWxzZX0gdGl0bGU9XCJob3N0IG5hbWVcIj5ob3N0bmFtZTwvUmFkaW8+XG4gICAgICAgICAgICAgICAgICA8UmFkaW8gbmFtZT1cInBhdHRlcm5UeXBlXCIgaW5saW5lIGRlZmF1bHRDaGVja2VkPXt0aGlzLnByb3BzLnJlcXVpcmVtZW50LnR5cGUgPT09ICd3bm5hbWUnID8gdHJ1ZSA6IGZhbHNlfSB0aXRsZT1cIlNTSCB3b3JrZXIgbm9kZSBuYW1lXCI+d25uYW1lPC9SYWRpbz5cbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uPnBhdHRlcm48L0lucHV0R3JvdXAuQWRkb24+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgdHlwZT1cInRleHRcIiBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGRlZmF1bHRWYWx1ZT17dGhpcy5wcm9wcy5yZXF1aXJlbWVudC52YWx1ZX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnbW9ubycgOiAnbW9ubyBpbnZhbGlkLWlucHV0J30gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgdHlwZT1cInN1Ym1pdFwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cInByaW1hcnlcIj5zYXZlPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYWRkLWNnLXBvcG92ZXItYnRuXCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9e3RoaXMuaGlkZUVkaXRSZXF1aXJlbWVudEJ1dHRvbn0+Y2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgIH0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWVkaXRcIiB0aXRsZT1cImVkaXQgdGFza1wiPjwvc3Bhbj5cbiAgICAgICAgICA8L092ZXJsYXlUcmlnZ2VyPlxuICAgICAgICA8L2g1PlxuICAgICAgICA8dWwgY2xhc3NOYW1lPXt0aGlzLmJvZHlWaXNpYmxlID8gJ3Zpc2libGUtY29udGFpbmVyJyA6ICdpbnZpc2libGUtY29udGFpbmVyJ30+XG4gICAgICAgICAgPGxpPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIDxzdHJvbmc+cGF0dGVybjo8L3N0cm9uZz5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJjb2RlXCIgcmVhZE9ubHkgdmFsdWU9e3RoaXMucHJvcHMucmVxdWlyZW1lbnQudmFsdWV9IHRpdGxlPXt0aGlzLnByb3BzLnJlcXVpcmVtZW50LnZhbHVlfT48L2lucHV0PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicGF0dGVybi10eXBlXCIgdGl0bGU9XCJwYXR0ZXJuIHR5cGVcIj57dGhpcy5wcm9wcy5yZXF1aXJlbWVudC50eXBlfTwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlIFwiTElDRU5TRVwiICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBDaGVja2JveCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0NoZWNrYm94JztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtR3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtR3JvdXAnO1xuaW1wb3J0IElucHV0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwJztcbmltcG9ydCBPdmVybGF5VHJpZ2dlciBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXlUcmlnZ2VyJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5cbmltcG9ydCBUYXNrIGZyb20gJy4vVGFzayc7XG5cbmltcG9ydCBzdG9yZSwgeyBNVGFzayB9IGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2tMaXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBwcm9wZXJ0eUNoZWNrYm94ZXM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIHJlcXVpcmVtZW50T3B0aW9uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWRcbiAgfTtcblxuICBAb2JzZXJ2YWJsZSBpbnB1dFZhbGlkID0gZmFsc2U7XG4gIEBvYnNlcnZhYmxlIHRhc2tzVmlzaWJsZSA9IHRydWU7XG5cbiAgQGFjdGlvbiBzZXRJbnB1dFZhbGlkaXR5ID0gKHZhbGlkKSA9PiB7IHRoaXMuaW5wdXRWYWxpZCA9IHZhbGlkOyB9XG4gIEBhY3Rpb24gdG9nZ2xlVGFza3NWaXNpYmlsaXR5ID0gKCkgPT4geyB0aGlzLnRhc2tzVmlzaWJsZSA9ICF0aGlzLnRhc2tzVmlzaWJsZTsgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSA9ICgpID0+IHRydWVcblxuICBhZGRUYXNrQnRuO1xuXG4gIGhhbmRsZUFkZFRhc2sgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIGNhbmNlbCBpZiBJRCBvciBleGUgaXMgZW1wdHksIG9yIGlmIElEIGFscmVhZHkgZXhpc3RzXG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUgPT09ICcnIHx8IGUudGFyZ2V0WzBdLmZvcm1bMV0udmFsdWUgPT09ICcnIHx8IHN0b3JlLmhhc1Rhc2soZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZSkpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGFzayA9IG5ldyBNVGFzaztcbiAgICB0YXNrLmlkID0gZS50YXJnZXRbMF0uZm9ybVswXS52YWx1ZTtcblxuICAgIHRhc2suZXhlVmFsdWUgPSBlLnRhcmdldFswXS5mb3JtWzFdLnZhbHVlO1xuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzJdLmNoZWNrZWQpIHtcbiAgICAgIHRhc2suZXhlUmVhY2hhYmxlID0gJ3RydWUnO1xuICAgIH1cblxuICAgIGlmIChlLnRhcmdldFswXS5mb3JtWzNdLnZhbHVlICE9PSAnJykge1xuICAgICAgdGFzay5lbnZWYWx1ZSA9IGUudGFyZ2V0WzBdLmZvcm1bM10udmFsdWU7XG4gICAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVs0XS5jaGVja2VkKSB7XG4gICAgICAgIHRhc2suZW52UmVhY2hhYmxlID0gJ3RydWUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0b3JlLnByb3BlcnRpZXMuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1baSArIDVdLnZhbHVlID09PSAncmVhZCcpIHtcbiAgICAgICAgdGFzay5wcm9wZXJ0aWVzLnB1c2goeyBpZDogcC5pZCwgYWNjZXNzOiAncmVhZCcgfSk7XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0WzBdLmZvcm1baSArIDVdLnZhbHVlID09PSAnd3JpdGUnKSB7XG4gICAgICAgIHRhc2sucHJvcGVydGllcy5wdXNoKHsgaWQ6IHAuaWQsIGFjY2VzczogJ3dyaXRlJyB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXRbMF0uZm9ybVtpICsgNV0udmFsdWUgPT09ICdyZWFkd3JpdGUnKSB7XG4gICAgICAgIHRhc2sucHJvcGVydGllcy5wdXNoKHsgaWQ6IHAuaWQsIGFjY2VzczogJ3JlYWR3cml0ZScgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVsncmVxdWlyZW1lbnRzJ10udmFsdWUgIT09ICcnKSB7IC8vIFRPRE86IGhhbmRsZSBtdWx0aXBsZVxuICAgICAgdGFzay5yZXF1aXJlbWVudHMucHVzaChlLnRhcmdldFswXS5mb3JtWydyZXF1aXJlbWVudHMnXS52YWx1ZSk7XG4gICAgfVxuXG4gICAgc3RvcmUuYWRkVGFzayh0YXNrKTtcbiAgICB0aGlzLmFkZFRhc2tCdG4uaGlkZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RnJhZ21lbnQ+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW0gdGFza3MtaGVhZGVyXCI+XG4gICAgICAgICAgdGFza3NcbiAgICAgICAgICA8T3ZlcmxheVRyaWdnZXIgdHJpZ2dlcj1cImNsaWNrXCIgcGxhY2VtZW50PVwicmlnaHRcIiByZWY9eyhlbCkgPT4gdGhpcy5hZGRUYXNrQnRuID0gZWx9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gb3ZlcmxheT17XG4gICAgICAgICAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3ZlciB0YXNrLXBvcG92ZXJcIiB0aXRsZT1cImFkZCBuZXcgdGFza1wiIGlkPVwiYWRkbmV3dGFza1wiPlxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVBZGRUYXNrfT5cbiAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uIHN0eWxlPXt7IHdpZHRoOiAnMzJweCcsIHRleHRBbGlnbjogJ3JpZ2h0JywgcGFkZGluZzogJzAgMTBweCAwIDAnIH19PmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3R5bGU9e3sgd2lkdGg6ICcyMzVweCcgfX0gdHlwZT1cInRleHRcIiBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJycgOiAnaW52YWxpZC1pbnB1dCd9IC8+XG4gICAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICc1cHgnLCBtYXJnaW5Cb3R0b206ICc1cHgnIH19PlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbiBzdHlsZT17eyB3aWR0aDogJzMycHgnLCB0ZXh0QWxpZ246ICdyaWdodCcsIHBhZGRpbmc6ICcwIDEwcHggMCAwJyB9fT5leGU8L0lucHV0R3JvdXAuQWRkb24+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBzdHlsZT17eyB3aWR0aDogJzIzNXB4JyB9fSB0eXBlPVwidGV4dFwiIG9uRm9jdXM9eygpID0+IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKX0gY2xhc3NOYW1lPXt0aGlzLmlucHV0VmFsaWQgPyAnbW9ubycgOiAnbW9ubyBpbnZhbGlkLWlucHV0J30gLz5cbiAgICAgICAgICAgICAgICAgICAgPENoZWNrYm94PnJlYWNoYWJsZSAob3B0aW9uYWwpPC9DaGVja2JveD5cbiAgICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwIHN0eWxlPXt7IG1hcmdpblRvcDogJzVweCcsIG1hcmdpbkJvdHRvbTogJzVweCcgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uIHN0eWxlPXt7IHdpZHRoOiAnMzJweCcsIHRleHRBbGlnbjogJ3JpZ2h0JywgcGFkZGluZzogJzAgMTBweCAwIDAnIH19PmVudjwvSW5wdXRHcm91cC5BZGRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIHN0eWxlPXt7IHdpZHRoOiAnMjM1cHgnIH19IHR5cGU9XCJ0ZXh0XCIgY2xhc3NOYW1lPVwibW9ub1wiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxDaGVja2JveD5yZWFjaGFibGUgKG9wdGlvbmFsKTwvQ2hlY2tib3g+XG4gICAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG5cbiAgICAgICAgICAgICAgICA8cD5Qcm9wZXJ0aWVzIGluIHRoaXMgdGFzazo8L3A+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMucHJvcGVydHlDaGVja2JveGVzfVxuXG4gICAgICAgICAgICAgICAgPHA+UmVxdWlyZW1lbnQgZm9yIHRoaXMgdGFzayAob3B0aW9uYWwpOjwvcD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtcmVxdWlyZW1lbnRcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWxlbWVudC1uYW1lXCI+UmVxdWlyZW1lbnQ8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjb21wb25lbnRDbGFzcz1cInNlbGVjdFwiIG5hbWU9XCJyZXF1aXJlbWVudHNcIiBwbGFjZWhvbGRlcj1cIlwiIGRlZmF1bHRWYWx1ZT1cIlwiIGNsYXNzTmFtZT1cImFjY2Vzc1NlbGVjdFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMucmVxdWlyZW1lbnRPcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPmFkZDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXsoKSA9PiB7IHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKTsgdGhpcy5hZGRUYXNrQnRuLmhpZGUoKTsgfX0+Y2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgIH0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMgYWRkLXRhc2stYnRuXCIgdGl0bGU9XCJhZGQgbmV3IHRhc2tcIj48L3NwYW4+XG4gICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnRhc2tzVmlzaWJsZSA/ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAgdG9nZ2xlLXByb3BlcnR5LWJ0bicgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24gdG9nZ2xlLXByb3BlcnR5LWJ0bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy50YXNrc1Zpc2libGUgPyAnaGlkZScgOiAnc2hvdyd9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZVRhc2tzVmlzaWJpbGl0eX0+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPXt0aGlzLnRhc2tzVmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lciBsaXN0LWdyb3VwLWl0ZW0gdGFza3MnIDogJ2ludmlzaWJsZS1jb250YWluZXIgbGlzdC1ncm91cC1pdGVtIHRhc2tzJ30+XG4gICAgICAgICAge3N0b3JlLnRhc2tzLm1hcCgodCwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxUYXNrIHRhc2s9e3R9IGtleT17aX0gaW5kZXg9e2l9IC8+O1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L2xpPlxuICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgIENvcHlyaWdodCAoQykgMjAxNCBHU0kgSGVsbWhvbHR6emVudHJ1bSBmdWVyIFNjaHdlcmlvbmVuZm9yc2NodW5nIEdtYkggICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgVGhpcyBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlICAgICAgICAgICAgICpcbiAqICAgICAgICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbmNlIHZlcnNpb24gMyAoTEdQTCkgdmVyc2lvbiAzLCAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICBjb3BpZWQgdmVyYmF0aW0gaW4gdGhlIGZpbGUgJ0xJQ0VOU0UnICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24nO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQ2hlY2tib3gnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cCc7XG5pbXBvcnQgSW5wdXRHcm91cCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWwnO1xuaW1wb3J0IE92ZXJsYXlUcmlnZ2VyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvT3ZlcmxheVRyaWdnZXInO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Qb3BvdmVyJztcblxuaW1wb3J0IHN0b3JlLCB7IE1UYXNrIH0gZnJvbSAnLi4vU3RvcmUnO1xuXG5Ab2JzZXJ2ZXIgZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFzayBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdGFzazogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfTtcblxuICBAb2JzZXJ2YWJsZSBib2R5VmlzaWJsZSA9IGZhbHNlO1xuICBAb2JzZXJ2YWJsZSBpbnB1dFZhbGlkID0gdHJ1ZTtcbiAgQG9ic2VydmFibGUgZGVsZXRlTW9kYWxWaXNpYmxlID0gZmFsc2U7XG5cbiAgQGFjdGlvbiB0b2dnbGVCb2R5VmlzaWJpbGl0eSA9ICgpID0+IHsgdGhpcy5ib2R5VmlzaWJsZSA9ICEodGhpcy5ib2R5VmlzaWJsZSk7IH1cbiAgQGFjdGlvbiBzZXRJbnB1dFZhbGlkaXR5ID0gKHZhbGlkKSA9PiB7IHRoaXMuaW5wdXRWYWxpZCA9IHZhbGlkOyB9XG4gIEBhY3Rpb24gb3BlbkRlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IHRydWU7IH1cbiAgQGFjdGlvbiBjbG9zZURlbGV0ZU1vZGFsID0gKCkgPT4geyB0aGlzLmRlbGV0ZU1vZGFsVmlzaWJsZSA9IGZhbHNlOyB9XG5cbiAgZWRpdFRhc2tCdG47XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gKCkgPT4gdHJ1ZVxuXG4gIGhpZGVFZGl0VGFza0J1dHRvbiA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eSh0cnVlKTtcbiAgICB0aGlzLmVkaXRUYXNrQnRuLmhpZGUoKTtcbiAgfVxuXG4gIGhhbmRsZUVkaXRUYXNrID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBjYW5jZWwgaWYgSUQgb3IgZXhlIGlzIGVtcHR5XG4gICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUgPT09ICcnIHx8IGUudGFyZ2V0WzBdLmZvcm1bMV0udmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGNhbmNlbCBpZiBJRCBhbHJlYWR5IGV4aXN0cyAoZXhjZXB0IGl0cyBvd24gSUQpXG4gICAgY29uc3Qgb3RoZXJUYXNrcyA9IHN0b3JlLnRhc2tzLmZpbHRlcih0ID0+IHQuaWQgIT09IHRoaXMucHJvcHMudGFzay5pZCk7XG4gICAgaWYgKG90aGVyVGFza3Muc29tZSh0ID0+IHQuaWQgPT09IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWUpKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsaWRpdHkoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRhc2sgPSBuZXcgTVRhc2s7XG4gICAgdGFzay5pZCA9IGUudGFyZ2V0WzBdLmZvcm1bMF0udmFsdWU7XG4gICAgdGFzay5leGVWYWx1ZSA9IGUudGFyZ2V0WzBdLmZvcm1bMV0udmFsdWU7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVsyXS5jaGVja2VkID09PSB0cnVlKSB7XG4gICAgICB0YXNrLmV4ZVJlYWNoYWJsZSA9ICd0cnVlJztcbiAgICB9XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVszXS52YWx1ZSAhPT0gJycpIHtcbiAgICAgIHRhc2suZW52VmFsdWUgPSBlLnRhcmdldFswXS5mb3JtWzNdLnZhbHVlO1xuICAgICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1bNF0uY2hlY2tlZCA9PSB0cnVlKSB7XG4gICAgICAgIHRhc2suZW52UmVhY2hhYmxlID0gJ3RydWUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0b3JlLnByb3BlcnRpZXMuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgaWYgKGUudGFyZ2V0WzBdLmZvcm1baSArIDVdLnZhbHVlID09PSAncmVhZCcpIHtcbiAgICAgICAgdGFzay5wcm9wZXJ0aWVzLnB1c2goeyBpZDogcC5pZCwgYWNjZXNzOiAncmVhZCcgfSk7XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0WzBdLmZvcm1baSArIDVdLnZhbHVlID09PSAnd3JpdGUnKSB7XG4gICAgICAgIHRhc2sucHJvcGVydGllcy5wdXNoKHsgaWQ6IHAuaWQsIGFjY2VzczogJ3dyaXRlJyB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXRbMF0uZm9ybVtpICsgNV0udmFsdWUgPT09ICdyZWFkd3JpdGUnKSB7XG4gICAgICAgIHRhc2sucHJvcGVydGllcy5wdXNoKHsgaWQ6IHAuaWQsIGFjY2VzczogJ3JlYWR3cml0ZScgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZS50YXJnZXRbMF0uZm9ybVsncmVxdWlyZW1lbnRzJ10udmFsdWUgIT09ICcnKSB7XG4gICAgICB0YXNrLnJlcXVpcmVtZW50cy5wdXNoKGUudGFyZ2V0WzBdLmZvcm1bJ3JlcXVpcmVtZW50cyddLnZhbHVlKTtcbiAgICB9XG5cbiAgICBzdG9yZS5lZGl0VGFzayh0aGlzLnByb3BzLmluZGV4LCB0YXNrKTtcbiAgICB0aGlzLmVkaXRUYXNrQnRuLmhpZGUoKTtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZVRhc2sgPSAoKSA9PiB7XG4gICAgc3RvcmUucmVtb3ZlVGFzayh0aGlzLnByb3BzLmluZGV4KTtcbiAgICB0aGlzLmNsb3NlRGVsZXRlTW9kYWwoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcGVydHlDaGVja2JveGVzID0gW107XG4gICAgbGV0IHJlcXVpcmVtZW50T3B0aW9ucyA9IFtdO1xuICAgIHZhciBjdXJyZW50UmVxdWlyZW1lbnQgPSAnJztcbiAgICB2YXIgcmVxdWlyZW1lbnRDb250YWluZXJzID0gW107XG4gICAgdmFyIGV4ZVJlYWNoYWJsZTtcbiAgICB2YXIgZW52VmFsdWU7XG4gICAgdmFyIGV4ZVJlYWNoYWJsZUNoZWNrYm94ID0gZmFsc2U7XG4gICAgdmFyIGVudlJlYWNoYWJsZUNoZWNrYm94ID0gZmFsc2U7XG4gICAgdmFyIGVudlByZXNlbnQgPSBmYWxzZTtcblxuICAgIHN0b3JlLnByb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHksIGkpID0+IHtcbiAgICAgIHZhciBhY2Nlc3MgPSAnJztcbiAgICAgIHRoaXMucHJvcHMudGFzay5wcm9wZXJ0aWVzLmZvckVhY2goY3VycmVudFByb3BlcnR5ID0+IHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmlkID09PSBjdXJyZW50UHJvcGVydHkuaWQpIHtcbiAgICAgICAgICBhY2Nlc3MgPSBjdXJyZW50UHJvcGVydHkuYWNjZXNzO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHByb3BlcnR5Q2hlY2tib3hlcy5wdXNoKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN0LWJveCBjdC1ib3gtcHJvcGVydHlcIiBrZXk9eyd0LWJveCcgKyBpfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiIHRpdGxlPXtwcm9wZXJ0eS5pZH0+e3Byb3BlcnR5LmlkfTwvZGl2PlxuICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY29tcG9uZW50Q2xhc3M9XCJzZWxlY3RcIiBwbGFjZWhvbGRlcj1cIlwiIGRlZmF1bHRWYWx1ZT17YWNjZXNzfSBjbGFzc05hbWU9XCJhY2Nlc3NTZWxlY3RcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJlYWRcIj5yZWFkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ3cml0ZVwiPndyaXRlPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWFkd3JpdGVcIj5yZWFkd3JpdGU8L29wdGlvbj5cbiAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHN0b3JlLnJlcXVpcmVtZW50cy5mb3JFYWNoKChyZXF1aXJlbWVudCwgaSkgPT4ge1xuICAgICAgcmVxdWlyZW1lbnRPcHRpb25zLnB1c2goXG4gICAgICAgIDxvcHRpb24gdmFsdWU9e3JlcXVpcmVtZW50LmlkfSBrZXk9eydvcHRpb24nICsgaX0+e3JlcXVpcmVtZW50LmlkfTwvb3B0aW9uPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnByb3BzLnRhc2suZXhlUmVhY2hhYmxlICE9PSAnJykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudGFzay5leGVSZWFjaGFibGUgPT09ICd0cnVlJykge1xuICAgICAgICBleGVSZWFjaGFibGUgPSA8c3BhbiBjbGFzc05hbWU9XCJyZWFjaGFibGVcIiB0aXRsZT1cImV4ZWN1dGFibGUgaXMgYXZhaWxhYmxlIG9uIHdvcmtlciBub2Rlc1wiPihyZWFjaGFibGUpPC9zcGFuPjtcbiAgICAgICAgZXhlUmVhY2hhYmxlQ2hlY2tib3ggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnRhc2suZXhlUmVhY2hhYmxlID09PSAnZmFsc2UnKSB7XG4gICAgICAgIGV4ZVJlYWNoYWJsZSA9IDxzcGFuIGNsYXNzTmFtZT1cInJlYWNoYWJsZVwiIHRpdGxlPVwiZXhlY3V0YWJsZSBpcyBub3QgYXZhaWxhYmxlIG9uIHdvcmtlciBub2Rlc1wiPih1bnJlYWNoYWJsZSk8L3NwYW4+O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnRhc2suZW52VmFsdWUgIT09ICcnKSB7XG4gICAgICBlbnZQcmVzZW50ID0gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnByb3BzLnRhc2suZW52UmVhY2hhYmxlICE9PSAnJykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy50YXNrLmVudlJlYWNoYWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgZW52VmFsdWUgPSA8bGk+PHNwYW4+PHN0cm9uZz5lbnY6PC9zdHJvbmc+PC9zcGFuPiA8aW5wdXQgY2xhc3NOYW1lPVwiY29kZVwiIHJlYWRPbmx5IHZhbHVlPXt0aGlzLnByb3BzLnRhc2suZW52VmFsdWV9PjwvaW5wdXQ+PHNwYW4gY2xhc3NOYW1lPVwicmVhY2hhYmxlXCIgdGl0bGU9XCJleGVjdXRhYmxlIGlzIGF2YWlsYWJsZSBvbiB3b3JrZXIgbm9kZXNcIj4ocmVhY2hhYmxlKTwvc3Bhbj48L2xpPjtcbiAgICAgICAgICBlbnZSZWFjaGFibGVDaGVja2JveCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy50YXNrLmVudlJlYWNoYWJsZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICAgIGVudlZhbHVlID0gPGxpPjxzcGFuPjxzdHJvbmc+ZW52Ojwvc3Ryb25nPjwvc3Bhbj4gPGlucHV0IGNsYXNzTmFtZT1cImNvZGVcIiByZWFkT25seSB2YWx1ZT17dGhpcy5wcm9wcy50YXNrLmVudlZhbHVlfT48L2lucHV0PjxzcGFuIGNsYXNzTmFtZT1cInJlYWNoYWJsZVwiIHRpdGxlPVwiZXhlY3V0YWJsZSBpcyBub3QgYXZhaWxhYmxlIG9uIHdvcmtlciBub2Rlc1wiPih1bnJlYWNoYWJsZSk8L3NwYW4+PC9saT47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVudlZhbHVlID0gPGxpPjxzcGFuPjxzdHJvbmc+ZW52Ojwvc3Ryb25nPjwvc3Bhbj4gPGlucHV0IGNsYXNzTmFtZT1cImNvZGVcIiByZWFkT25seSB2YWx1ZT17dGhpcy5wcm9wcy50YXNrLmVudlZhbHVlfT48L2lucHV0PjwvbGk+O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucHJvcHMudGFzay5yZXF1aXJlbWVudHMuZm9yRWFjaCgocmVxdWlyZW1lbnQsIGkpID0+IHsgLy8gVE9ETzogaGFuZGxlIG11bHRpcGxlXG4gICAgICBsZXQgZWwgPSBzdG9yZS5yZXF1aXJlbWVudHMuZmluZChyID0+IHIuaWQgPT09IHJlcXVpcmVtZW50KTtcbiAgICAgIGlmIChlbCAhPT0gdW5kZWZpbmVkKVxuICAgICAge1xuICAgICAgICBjdXJyZW50UmVxdWlyZW1lbnQgPSByZXF1aXJlbWVudDtcbiAgICAgICAgcmVxdWlyZW1lbnRDb250YWluZXJzLnB1c2goXG4gICAgICAgICAgPGRpdiBrZXk9eydyZXF1aXJlbWVudCcgKyBpfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJlcXVpcmVtZW50LWNoaWxkXCI+XG4gICAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwcm9wLWFjY2Vzc1wiIHRpdGxlPXsoZWwudHlwZSA9PT0gJ2hvc3RuYW1lJykgPyAnaG9zdCBuYW1lJyA6ICcnfT57KGVsLnR5cGUgPT09ICdob3N0bmFtZScpID8gJ0hOICcgOiAnJ308L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInByb3AtYWNjZXNzXCIgdGl0bGU9eyhlbC50eXBlID09PSAnd25uYW1lJykgPyAnU1NIIHdvcmtlciBub2RlIG5hbWUnIDogJyd9PnsoZWwudHlwZSA9PT0gJ3dubmFtZScpID8gJ1dOICcgOiAnJ308L3NwYW4+XG4gICAgICAgICAgICAgIHtyZXF1aXJlbWVudH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tcIj5cbiAgICAgICAgPGg1PlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdGFza3NcIj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZWxlbWVudC10aXRsZVwiIHRpdGxlPXt0aGlzLnByb3BzLnRhc2suaWR9Pnt0aGlzLnByb3BzLnRhc2suaWR9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuYm9keVZpc2libGUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyA6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bid9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5ib2R5VmlzaWJsZSA/ICdoaWRlJyA6ICdzaG93J31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQm9keVZpc2liaWxpdHl9PlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIiB0aXRsZT1cImRlbGV0ZVwiIG9uQ2xpY2s9e3RoaXMub3BlbkRlbGV0ZU1vZGFsfT48L3NwYW4+XG4gICAgICAgICAgPE1vZGFsIHNob3c9e3RoaXMuZGVsZXRlTW9kYWxWaXNpYmxlfSBvbkhpZGU9e3RoaXMuY2xvc2VEZWxldGVNb2RhbH0+XG4gICAgICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgICAgICA8TW9kYWwuVGl0bGU+RGVsZXRlIDxzdHJvbmc+e3RoaXMucHJvcHMudGFzay5pZH08L3N0cm9uZz4/PC9Nb2RhbC5UaXRsZT5cbiAgICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICAgIDxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIHRhc2sgPHN0cm9uZz57dGhpcy5wcm9wcy50YXNrLmlkfT88L3N0cm9uZz48L3A+XG4gICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICA8QnV0dG9uIGJzU3R5bGU9XCJkYW5nZXJcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlbW92ZVRhc2t9PkRlbGV0ZTwvQnV0dG9uPlxuICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuY2xvc2VEZWxldGVNb2RhbH0+Q2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgICA8L01vZGFsPlxuXG4gICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgcmVmPXsoZWwpID0+IHRoaXMuZWRpdFRhc2tCdG4gPSBlbH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBvdmVybGF5PXtcbiAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIHRhc2stcG9wb3ZlclwiIHRpdGxlPVwiZWRpdCB0YXNrXCIgaWQ9e3RoaXMucHJvcHMudGFzay5pZH0+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUVkaXRUYXNrfT5cbiAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwLkFkZG9uIHN0eWxlPXt7IHdpZHRoOiAnMzJweCcsIHRleHRBbGlnbjogJ3JpZ2h0JywgcGFkZGluZzogJzAgMTBweCAwIDAnIH19PmlkPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3R5bGU9e3sgd2lkdGg6ICcyMzVweCcgfX0gdHlwZT1cInRleHRcIiBuYW1lPVwiaWRcIiBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGNsYXNzTmFtZT17dGhpcy5pbnB1dFZhbGlkID8gJycgOiAnaW52YWxpZC1pbnB1dCd9IGRlZmF1bHRWYWx1ZT17dGhpcy5wcm9wcy50YXNrLmlkfSAvPlxuICAgICAgICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNXB4JywgbWFyZ2luQm90dG9tOiAnNXB4JyB9fT5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAuQWRkb24gc3R5bGU9e3sgd2lkdGg6ICczMnB4JywgdGV4dEFsaWduOiAncmlnaHQnLCBwYWRkaW5nOiAnMCAxMHB4IDAgMCcgfX0+ZXhlPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3R5bGU9e3sgd2lkdGg6ICcyMzVweCcgfX0gdHlwZT1cInRleHRcIiBuYW1lPVwiZXhlXCIgb25Gb2N1cz17KCkgPT4gdGhpcy5zZXRJbnB1dFZhbGlkaXR5KHRydWUpfSBjbGFzc05hbWU9e3RoaXMuaW5wdXRWYWxpZCA/ICdtb25vJyA6ICdtb25vIGludmFsaWQtaW5wdXQnfSBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMudGFzay5leGVWYWx1ZSB8fCAnJ30gLz5cbiAgICAgICAgICAgICAgICAgICAgPENoZWNrYm94IG5hbWU9XCJleGVSZWFjaGFibGVcIiBkZWZhdWx0Q2hlY2tlZD17ZXhlUmVhY2hhYmxlQ2hlY2tib3h9PmV4ZSByZWFjaGFibGUgKG9wdGlvbmFsKTwvQ2hlY2tib3g+XG4gICAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICc1cHgnLCBtYXJnaW5Cb3R0b206ICc1cHgnIH19PlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbiBzdHlsZT17eyB3aWR0aDogJzMycHgnLCB0ZXh0QWxpZ246ICdyaWdodCcsIHBhZGRpbmc6ICcwIDEwcHggMCAwJyB9fT5lbnY8L0lucHV0R3JvdXAuQWRkb24+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBzdHlsZT17eyB3aWR0aDogJzIzNXB4JyB9fSB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbnZcIiBvbkZvY3VzPXsoKSA9PiB0aGlzLnNldElucHV0VmFsaWRpdHkodHJ1ZSl9IGNsYXNzTmFtZT1cIm1vbm9cIiBkZWZhdWx0VmFsdWU9e2VudlByZXNlbnQgPyB0aGlzLnByb3BzLnRhc2suZW52VmFsdWUgfHwgJycgOiAnJ30gLz5cbiAgICAgICAgICAgICAgICAgICAgPENoZWNrYm94IG5hbWU9XCJlbnZSZWFjaGFibGVcIiBkZWZhdWx0Q2hlY2tlZD17ZW52UmVhY2hhYmxlQ2hlY2tib3h9PmVudiByZWFjaGFibGUgKG9wdGlvbmFsKTwvQ2hlY2tib3g+XG4gICAgICAgICAgICAgICAgICA8L0lucHV0R3JvdXA+XG4gICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG5cbiAgICAgICAgICAgICAgICA8cD5Qcm9wZXJ0aWVzIGluIHRoaXMgdGFzazo8L3A+XG4gICAgICAgICAgICAgICAge3Byb3BlcnR5Q2hlY2tib3hlc31cblxuICAgICAgICAgICAgICAgIDxwPlJlcXVpcmVtZW50IGZvciB0aGlzIHRhc2sgKG9wdGlvbmFsKTo8L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdC1ib3ggY3QtYm94LXJlcXVpcmVtZW50XCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsZW1lbnQtbmFtZVwiPlJlcXVpcmVtZW50PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY29tcG9uZW50Q2xhc3M9XCJzZWxlY3RcIiBuYW1lPVwicmVxdWlyZW1lbnRzXCIgcGxhY2Vob2xkZXI9XCJcIiBkZWZhdWx0VmFsdWU9e2N1cnJlbnRSZXF1aXJlbWVudH0gY2xhc3NOYW1lPVwiYWNjZXNzU2VsZWN0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICB7cmVxdWlyZW1lbnRPcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiB0eXBlPVwic3VibWl0XCIgYnNTaXplPVwic21hbGxcIiBic1N0eWxlPVwicHJpbWFyeVwiPnNhdmU8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9XCJhZGQtY2ctcG9wb3Zlci1idG5cIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJkZWZhdWx0XCIgb25DbGljaz17dGhpcy5oaWRlRWRpdFRhc2tCdXR0b259PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICB9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0XCIgdGl0bGU9XCJlZGl0IHRhc2tcIj48L3NwYW4+XG4gICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgPC9oNT5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT17dGhpcy5ib2R5VmlzaWJsZSA/ICd2aXNpYmxlLWNvbnRhaW5lcicgOiAnaW52aXNpYmxlLWNvbnRhaW5lcid9PlxuICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxzcGFuPjxzdHJvbmc+ZXhlOjwvc3Ryb25nPjwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJjb2RlXCIgcmVhZE9ubHkgdmFsdWU9e3RoaXMucHJvcHMudGFzay5leGVWYWx1ZX0gdGl0bGU9e3RoaXMucHJvcHMudGFzay5leGVWYWx1ZX0+PC9pbnB1dD5cbiAgICAgICAgICAgIHtleGVSZWFjaGFibGV9XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICB7ZW52VmFsdWV9XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLnRhc2sucHJvcGVydGllcy5tYXAocHJvcGVydHkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKDxzcGFuIHRpdGxlPXtwcm9wZXJ0eS5pZH0ga2V5PXtwcm9wZXJ0eS5pZH0+XG4gICAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcC1hY2Nlc3NcIiB0aXRsZT17KHByb3BlcnR5LmFjY2VzcyA9PT0gJ3dyaXRlJykgPyAnd3JpdGUnIDogJyd9PnsocHJvcGVydHkuYWNjZXNzID09PSAnd3JpdGUnKSA/ICdXICcgOiAnJ308L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcC1hY2Nlc3NcIiB0aXRsZT17KHByb3BlcnR5LmFjY2VzcyA9PT0gJ3JlYWQnKSA/ICdyZWFkJyA6ICcnfT57KHByb3BlcnR5LmFjY2VzcyA9PT0gJ3JlYWQnKSA/ICdSICcgOiAnJ308L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcC1hY2Nlc3NcIiB0aXRsZT17KHByb3BlcnR5LmFjY2VzcyA9PT0gJ3JlYWR3cml0ZScpID8gJ3JlYWQgJiB3cml0ZScgOiAnJ30+eyhwcm9wZXJ0eS5hY2Nlc3MgPT09ICdyZWFkd3JpdGUnKSA/ICdSVyAnIDogJyd9PC9zcGFuPlxuICAgICAgICAgICAgICAgIHtwcm9wZXJ0eS5pZH1cbiAgICAgICAgICAgICAgPC9zcGFuPik7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7cmVxdWlyZW1lbnRDb250YWluZXJzfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlICdMSUNFTlNFJyAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgQmFkZ2UgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9CYWRnZSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlcic7XG5pbXBvcnQgT3ZlcmxheVRyaWdnZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlcic7XG5cbmltcG9ydCBzdG9yZSwgeyBNTWFpbiB9IGZyb20gJy4uL1N0b3JlJztcblxuQG9ic2VydmVyIGV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5FZGl0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICBlZGl0VGFza3NJbk1haW5CdG47XG4gIGVkaXRDb2xsZWN0aW9uc0luTWFpbkJ0bjtcblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgPSAoKSA9PiB0cnVlXG5cbiAgaGFuZGxlRWRpdFRhc2tzSW5NYWluID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBtYWluID0gbmV3IE1NYWluO1xuICAgIG1haW4uaWQgPSBzdG9yZS5tYWluLmlkO1xuICAgIG1haW4uY29sbGVjdGlvbnMgPSBzdG9yZS5tYWluLmNvbGxlY3Rpb25zO1xuICAgIG1haW4uZ3JvdXBzID0gc3RvcmUubWFpbi5ncm91cHM7XG5cbiAgICBzdG9yZS50YXNrcy5mb3JFYWNoKCh0LCBpbmRleCkgPT4ge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLnRhcmdldFswXS5mb3JtW2luZGV4XS52YWx1ZTsgaSsrKSB7XG4gICAgICAgIG1haW4udGFza3MucHVzaCh0LmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuZWRpdFRhc2tzSW5NYWluQnRuLmhpZGUoKTtcbiAgICBzdG9yZS5zZXRNYWluKG1haW4pO1xuICB9XG5cbiAgaGFuZGxlRWRpdENvbGxlY3Rpb25zSW5NYWluID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBtYWluID0gbmV3IE1NYWluO1xuICAgIG1haW4uaWQgPSBzdG9yZS5tYWluLmlkO1xuICAgIG1haW4udGFza3MgPSBzdG9yZS5tYWluLnRhc2tzO1xuICAgIG1haW4uZ3JvdXBzID0gc3RvcmUubWFpbi5ncm91cHM7XG5cbiAgICBzdG9yZS5jb2xsZWN0aW9ucy5mb3JFYWNoKChjLCBpbmRleCkgPT4ge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLnRhcmdldFswXS5mb3JtW2luZGV4XS52YWx1ZTsgaSsrKSB7XG4gICAgICAgIG1haW4uY29sbGVjdGlvbnMucHVzaChjLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0b3JlLnNldE1haW4obWFpbik7XG4gICAgdGhpcy5lZGl0Q29sbGVjdGlvbnNJbk1haW5CdG4uaGlkZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IFRhc2tDaGVja2JveGVzID0gW107XG4gICAgY29uc3QgQ29sbGVjdGlvbkNoZWNrYm94ZXMgPSBbXTtcblxuICAgIHN0b3JlLnRhc2tzLmZvckVhY2goKHQsIGkpID0+IHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICBzdG9yZS5tYWluLnRhc2tzLmZvckVhY2goY3VycmVudFRhc2sgPT4ge1xuICAgICAgICBpZiAodC5pZCA9PT0gY3VycmVudFRhc2spIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFRhc2tDaGVja2JveGVzLnB1c2goXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC10YXNrXCIga2V5PXsndC1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17dC5pZH0+e3QuaWR9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPVwiYWRkLWNnLXRjLWNvdW50ZXJcIiB0eXBlPVwibnVtYmVyXCIgbWluPVwiMFwiIGRlZmF1bHRWYWx1ZT17Y291bnR9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHN0b3JlLmNvbGxlY3Rpb25zLmZvckVhY2goKGMsIGkpID0+IHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICBzdG9yZS5tYWluLmNvbGxlY3Rpb25zLmZvckVhY2goY3VycmVudENvbGxlY3Rpb24gPT4ge1xuICAgICAgICBpZiAoYy5pZCA9PT0gY3VycmVudENvbGxlY3Rpb24pIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIENvbGxlY3Rpb25DaGVja2JveGVzLnB1c2goXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3QtYm94IGN0LWJveC1jb2xsZWN0aW9uXCIga2V5PXsnYy1ib3gnICsgaX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbGVtZW50LW5hbWVcIiB0aXRsZT17Yy5pZH0+e2MuaWR9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPVwiYWRkLWNnLXRjLWNvdW50ZXJcIiB0eXBlPVwibnVtYmVyXCIgbWluPVwiMFwiIGRlZmF1bHRWYWx1ZT17Y291bnR9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsIHBhbmVsLWRlZmF1bHQgbWFpbi1wYW5lXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtaGVhZGluZ1wiPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBhbmVsLXRpdGxlXCI+e3N0b3JlLm1haW4uaWR9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIm1haW4tZWRpdG9yLWJvZHlcIiBjbGFzc05hbWU9XCJwYW5lbC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTQgY2VudGVyZWQgbWFpbi1lbGVtZW50IG1haW4tZWxlbWVudC10YXNrc1wiPlxuICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwibWFpbi1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICB0YXNrcyBpbiBtYWluXG4gICAgICAgICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cImJvdHRvbVwiIHJlZj17KGVsKSA9PiB0aGlzLmVkaXRUYXNrc0luTWFpbkJ0biA9IGVsfSBvdmVybGF5PXtcbiAgICAgICAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIHRhc2stcG9wb3ZlclwiIHRpdGxlPVwibW9kaWZ5IHRhc2tzIGluIG1haW5cIiBpZD1cInRhc2tzaW5tYWluXCI+XG4gICAgICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUVkaXRUYXNrc0luTWFpbn0+XG4gICAgICAgICAgICAgICAgICAgICAge1Rhc2tDaGVja2JveGVzfVxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIHR5cGU9XCJzdWJtaXRcIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJwcmltYXJ5XCI+ZWRpdDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLmVkaXRUYXNrc0luTWFpbkJ0bi5oaWRlKCl9PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICAgICAgICB9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IGFkZC10YXNrLWJ0biBlZGl0LW1haW4tYnRuXCIgdGl0bGU9XCJlZGl0IHRhc2tzIGluIG1haW5cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgICAgICAgPC9oNT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC10YXNrc1wiPlxuICAgICAgICAgICAgICAgIHtzdG9yZS5tYWluLnRhc2tzLm1hcCgodGFzaywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGtleT17aX0+e3Rhc2t9PC9zcGFuPjtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTQgY2VudGVyZWQgbWFpbi1lbGVtZW50IG1haW4tZWxlbWVudC1jb2xsZWN0aW9uc1wiPlxuICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwibWFpbi1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9ucyBpbiBtYWluXG4gICAgICAgICAgICAgICAgPE92ZXJsYXlUcmlnZ2VyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cImJvdHRvbVwiIHJlZj17KGVsKSA9PiB0aGlzLmVkaXRDb2xsZWN0aW9uc0luTWFpbkJ0biA9IGVsfSBvdmVybGF5PXtcbiAgICAgICAgICAgICAgICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyIGNvbGxlY3Rpb24tcG9wb3ZlclwiIHRpdGxlPVwibW9kaWZ5IGNvbGxlY3Rpb25zIGluIG1haW5cIiBpZD1cImNvbGxlY3Rpb25zaW5tYWluXCI+XG4gICAgICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUVkaXRDb2xsZWN0aW9uc0luTWFpbn0+XG4gICAgICAgICAgICAgICAgICAgICAge0NvbGxlY3Rpb25DaGVja2JveGVzfVxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIHR5cGU9XCJzdWJtaXRcIiBic1NpemU9XCJzbWFsbFwiIGJzU3R5bGU9XCJwcmltYXJ5XCI+ZWRpdDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1jZy1wb3BvdmVyLWJ0blwiIGJzU2l6ZT1cInNtYWxsXCIgYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLmVkaXRDb2xsZWN0aW9uc0luTWFpbkJ0bi5oaWRlKCl9PmNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICAgICAgICB9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IGFkZC1jb2xsZWN0aW9uLWJ0biBlZGl0LW1haW4tYnRuXCIgdGl0bGU9XCJlZGl0IGNvbGxlY3Rpb25zIGluIG1haW5cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICAgICAgICAgICAgPC9oNT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC1jb2xsZWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgIHtzdG9yZS5tYWluLmNvbGxlY3Rpb25zLm1hcCgoY29sbGVjdGlvbiwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGtleT17aX0+e2NvbGxlY3Rpb259PC9zcGFuPjtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXhzLTQgY2VudGVyZWQgbWFpbi1lbGVtZW50IG1haW4tZWxlbWVudC1ncm91cHNcIj5cbiAgICAgICAgICAgICAgPGg1IGNsYXNzTmFtZT1cIm1haW4taGVhZGVyXCI+Z3JvdXBzPC9oNT5cbiAgICAgICAgICAgICAge3N0b3JlLm1haW4uZ3JvdXBzLm1hcCgoZywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJncm91cC1ncm91cHNcIiBrZXk9e2luZGV4fT48c3Bhbj57Zy5pZH0gPEJhZGdlPntnLm59PC9CYWRnZT48L3NwYW4+PC9kaXY+O1xuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG4vLyBUT0RPOiBgcHVsbFJpZ2h0YCBkb2Vzbid0IGJlbG9uZyBoZXJlLiBUaGVyZSdzIG5vIHNwZWNpYWwgaGFuZGxpbmcgaGVyZS5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHB1bGxSaWdodDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwdWxsUmlnaHQ6IGZhbHNlXG59O1xuXG52YXIgQmFkZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShCYWRnZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQmFkZ2UoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJhZGdlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFzQ29udGVudCA9IGZ1bmN0aW9uIGhhc0NvbnRlbnQoY2hpbGRyZW4pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQgfHwgY2hpbGQgPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwdWxsUmlnaHQgPSBfdGhpcyRwcm9wcy5wdWxsUmlnaHQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJwdWxsUmlnaHRcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKSwge1xuICAgICAgJ3B1bGwtcmlnaHQnOiBwdWxsUmlnaHQsXG4gICAgICAvLyBIYWNrIGZvciBjb2xsYXBzaW5nIG9uIElFOC5cbiAgICAgIGhpZGRlbjogIXRoaXMuaGFzQ29udGVudChjaGlsZHJlbilcbiAgICB9KTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gQmFkZ2U7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkJhZGdlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJhZGdlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnYmFkZ2UnLCBCYWRnZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L3JlYWN0LWhvdC1sb2FkZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIHRoaXMgaXMganVzdCBzZXJ2ZXIgZW52aXJvbm1lbnRcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIGlmICghbW9kdWxlLmhvdCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG4gIG1vZHVsZS5leHBvcnRzLkFwcENvbnRhaW5lci53YXJuQWJvdXRITVJEaXNhYmxlZCA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzLmhvdC5zaG91bGRXcmFwV2l0aEFwcENvbnRhaW5lciA9IHRydWU7XG59IGVsc2Uge1xuICB2YXIgZXZhbEFsbG93ZWQgPSBmYWxzZTtcbiAgdmFyIGV2YWxFcnJvciA9IG51bGw7XG4gIHRyeSB7XG4gICAgZXZhbCgnZXZhbEFsbG93ZWQgPSB0cnVlJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBldmFsIG5vdCBhbGxvd2VkIGR1ZSB0byBDU1BcbiAgICBldmFsRXJyb3IgPSBlICYmIGUubWVzc2FnZSA/IGUubWVzc2FnZSA6ICd1bmtub3duIHJlYXNvbic7XG4gIH1cblxuICAvLyBUT0RPOiBkb250IHVzZSBldmFsIHRvIHVwZGF0ZSBtZXRob2RzLiBzZWUgIzEyNzNcbiAgLy8gUkhMIG5lZWRzIHNldFByb3RvdHlwZU9mIHRvIG9wZXJhdGUgQ29tcG9uZW50IGluaGVyaXRhbmNlLCBhbmQgZXZhbCB0byBwYXRjaCBtZXRob2RzXG4gIHZhciBqc0ZlYXR1cmVzUHJlc2VudCA9ICEhT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuXG4gIGlmICghanNGZWF0dXJlc1ByZXNlbnQgfHwgIWV2YWxBbGxvd2VkKSB7XG4gICAgLy8gd2UgYXJlIG5vdCBpbiBwcm9kIG1vZGUsIGJ1dCBSSEwgY291bGQgbm90IGJlIGFjdGl2YXRlZFxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdSZWFjdC1Ib3QtTG9hZGVyIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudDonLFxuICAgICAgW1xuICAgICAgICAhanNGZWF0dXJlc1ByZXNlbnQgJiYgXCJzb21lIEpTIGZlYXR1cmVzIGFyZSBtaXNzaW5nXCIsXG4gICAgICAgICFldmFsQWxsb3dlZCAmJiBcImBldmFsYCBpcyBub3QgYWxsb3dlZChcIiArIGV2YWxFcnJvciArIFwiKVwiXG4gICAgICBdLmpvaW4oJywnKSxcbiAgICAgICcuJ1xuICAgICk7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gd2luZG93LnJlYWN0SG90TG9hZGVyR2xvYmFsID0gcmVxdWlyZSgnLi9kaXN0L3JlYWN0LWhvdC1sb2FkZXIuZGV2ZWxvcG1lbnQuanMnKTtcbiAgfVxufVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICBDb3B5cmlnaHQgKEMpIDIwMTQgR1NJIEhlbG1ob2x0enplbnRydW0gZnVlciBTY2h3ZXJpb25lbmZvcnNjaHVuZyBHbWJIICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgIFRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSAgICAgICAgICAgICAqXG4gKiAgICAgICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5jZSB2ZXJzaW9uIDMgKExHUEwpIHZlcnNpb24gMywgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgY29waWVkIHZlcmJhdGltIGluIHRoZSBmaWxlIFwiTElDRU5TRVwiICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBUb3BvbG9neUVkaXRvciBmcm9tICcuL2NvbXBvbmVudHMvVG9wb2xvZ3lFZGl0b3InO1xuXG5SZWFjdERPTS5yZW5kZXIoPFRvcG9sb2d5RWRpdG9yIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbicpKTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTtcbmZ1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxrKXtkYT0hMTtlYT1udWxsO2JhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBsPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO2ZhfHwoZmE9ITAsaGE9bCl9fXZhciBsYT1udWxsLG1hPW51bGwsbmE9bnVsbDtcbmZ1bmN0aW9uIG9hKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1uYShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfXZhciBwYT1udWxsLHFhPXt9O1xuZnVuY3Rpb24gcmEoKXtpZihwYSlmb3IodmFyIGEgaW4gcWEpe3ZhciBiPXFhW2FdLGM9cGEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFzYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtzYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKHRhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO3RhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnVhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh1YShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gdWEoYSxiLGMpe2lmKHZhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTt2YVthXT1iO3dhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHNhPVtdLHRhPXt9LHZhPXt9LHdhPXt9O2Z1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFxYS5oYXNPd25Qcm9wZXJ0eShjKXx8cWFbY10hPT1kKXtpZihxYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7cWFbY109ZDtiPSEwfX1iJiZyYSgpfXZhciB5YT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksemE9bnVsbCxBYT1udWxsLEJhPW51bGw7XG5mdW5jdGlvbiBDYShhKXtpZihhPW1hKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgemEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1sYShiKSx6YShhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYShhKXtBYT9CYT9CYS5wdXNoKGEpOkJhPVthXTpBYT1hfWZ1bmN0aW9uIEVhKCl7aWYoQWEpe3ZhciBhPUFhLGI9QmE7QmE9QWE9bnVsbDtDYShhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQ2EoYlthXSl9fWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2EoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBIYSgpe312YXIgSWE9RmEsSmE9ITEsS2E9ITE7ZnVuY3Rpb24gTGEoKXtpZihudWxsIT09QWF8fG51bGwhPT1CYSlIYSgpLEVhKCl9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoS2EpcmV0dXJuIGEoYixjKTtLYT0hMDt0cnl7cmV0dXJuIElhKGEsYixjKX1maW5hbGx5e0thPSExLExhKCl9fXZhciBOYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sT2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxQYT17fSxRYT17fTtcbmZ1bmN0aW9uIFJhKGEpe2lmKE9hLmNhbGwoUWEsYSkpcmV0dXJuITA7aWYoT2EuY2FsbChQYSxhKSlyZXR1cm4hMTtpZihOYS50ZXN0KGEpKXJldHVybiBRYVthXT0hMDtQYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBTYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fFNhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIFVhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsXG5WYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIFdhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChXYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xuZnVuY3Rpb24gWGEoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoVGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP1JhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgWWE9L14oLiopW1xcXFxcXC9dLyxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmE9RT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2I9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGI9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2I9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpiPUU/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2I9RT9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixsYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbmIoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPW1iJiZhW21iXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIG9iKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gcGIoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2I6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYjpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYjpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYjpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2I6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpiOnJldHVybiBwYihhLnR5cGUpO2Nhc2UgbGI6cmV0dXJuIHBiKGEucmVuZGVyKTtjYXNlIGtiOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gcGIoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcWIoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPXBiKGEudHlwZSk7Yz1udWxsO2QmJihjPXBiKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJiKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBzYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gdGIoYSl7dmFyIGI9c2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHhiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj10YihhKSl9ZnVuY3Rpb24geWIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXNiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gemIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9cmIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlhhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYihhLGIpe0JiKGEsYik7dmFyIGM9cmIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGIoYSxiLnR5cGUscmIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRGIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdiKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3JiKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6cmIoYyl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1yYihiLnZhbHVlKSxkPXJiKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgTWI9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGIsUWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TWIuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UGI9UGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gUmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBTYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYj17YW5pbWF0aW9uZW5kOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2IoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYj17fSxWYj17fTtcbnlhJiYoVmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYihhKXtpZihVYlthXSlyZXR1cm4gVWJbYV07aWYoIVRiW2FdKXJldHVybiBhO3ZhciBiPVRiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZiKXJldHVybiBVYlthXT1iW2NdO3JldHVybiBhfVxudmFyIFhiPVdiKFwiYW5pbWF0aW9uZW5kXCIpLFliPVdiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFpiPVdiKFwiYW5pbWF0aW9uc3RhcnRcIiksJGI9V2IoXCJ0cmFuc2l0aW9uZW5kXCIpLGFjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYz1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiBjYyhhKXt2YXIgYj1iYy5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IE1hcCxiYy5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBlYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKGRjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGdjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWRjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGZjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGZjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGMoYSl7YT1nYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGljKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGpjKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBrYz1udWxsO1xuZnVuY3Rpb24gbGMoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKW9hKGEsYltkXSxjW2RdKTtlbHNlIGImJm9hKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBtYyhhKXtudWxsIT09YSYmKGtjPWljKGtjLGEpKTthPWtjO2tjPW51bGw7aWYoYSl7amMoYSxsYyk7aWYoa2MpdGhyb3cgRXJyb3IodSg5NSkpO2lmKGZhKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO319XG5mdW5jdGlvbiBuYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gb2MoYSl7aWYoIXlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBwYz1bXTtmdW5jdGlvbiBxYyhhKXthLnRvcExldmVsVHlwZT1udWxsO2EubmF0aXZlRXZlbnQ9bnVsbDthLnRhcmdldEluc3Q9bnVsbDthLmFuY2VzdG9ycy5sZW5ndGg9MDsxMD5wYy5sZW5ndGgmJnBjLnB1c2goYSl9XG5mdW5jdGlvbiByYyhhLGIsYyxkKXtpZihwYy5sZW5ndGgpe3ZhciBlPXBjLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWQ7ZS5uYXRpdmVFdmVudD1iO2UudGFyZ2V0SW5zdD1jO3JldHVybiBlfXJldHVybnt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfX1cbmZ1bmN0aW9uIHNjKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz10YyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1uYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO3ZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3M7MD09PWMmJihnfD02NCk7Zm9yKHZhciBoPW51bGwsaz0wO2s8c2EubGVuZ3RoO2srKyl7dmFyIGw9c2Fba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD1cbmljKGgsbCkpfW1jKGgpfX1mdW5jdGlvbiB1YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOnZjKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjp2YyhiLFwiZm9jdXNcIiwhMCk7dmMoYixcImJsdXJcIiwhMCk7Yy5zZXQoXCJibHVyXCIsbnVsbCk7Yy5zZXQoXCJmb2N1c1wiLG51bGwpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpvYyhhKSYmdmMoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWMuaW5kZXhPZihhKSYmRihhLGIpfWMuc2V0KGEsbnVsbCl9fVxudmFyIHdjLHhjLHljLHpjPSExLEFjPVtdLEJjPW51bGwsQ2M9bnVsbCxEYz1udWxsLEVjPW5ldyBNYXAsRmM9bmV3IE1hcCxHYz1bXSxIYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLEljPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEpjKGEsYil7dmFyIGM9Y2MoYik7SGMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KTtJYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pfWZ1bmN0aW9uIEtjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDplLGNvbnRhaW5lcjpkfX1cbmZ1bmN0aW9uIExjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6QmM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkNjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkRjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpFYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpGYy5kZWxldGUoYi5wb2ludGVySWQpfX1mdW5jdGlvbiBNYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPUtjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPU5jKGIpLG51bGwhPT1iJiZ4YyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBPYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gQmM9TWMoQmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIENjPU1jKENjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBEYz1NYyhEYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0VjLnNldChmLE1jKEVjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxGYy5zZXQoZixNYyhGYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBQYyhhKXt2YXIgYj10YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWRjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWVjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXt5YyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gUWMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9TmMoYik7bnVsbCE9PWMmJnhjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBTYyhhLGIsYyl7UWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFRjKCl7Zm9yKHpjPSExOzA8QWMubGVuZ3RoOyl7dmFyIGE9QWNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPU5jKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmd2MoYSk7YnJlYWt9dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6QWMuc2hpZnQoKX1udWxsIT09QmMmJlFjKEJjKSYmKEJjPW51bGwpO251bGwhPT1DYyYmUWMoQ2MpJiYoQ2M9bnVsbCk7bnVsbCE9PURjJiZRYyhEYykmJihEYz1udWxsKTtFYy5mb3JFYWNoKFNjKTtGYy5mb3JFYWNoKFNjKX1mdW5jdGlvbiBVYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsemN8fCh6Yz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxUYykpKX1cbmZ1bmN0aW9uIFZjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFVjKGIsYSl9aWYoMDxBYy5sZW5ndGgpe1VjKEFjWzBdLGEpO2Zvcih2YXIgYz0xO2M8QWMubGVuZ3RoO2MrKyl7dmFyIGQ9QWNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1CYyYmVWMoQmMsYSk7bnVsbCE9PUNjJiZVYyhDYyxhKTtudWxsIT09RGMmJlVjKERjLGEpO0VjLmZvckVhY2goYik7RmMuZm9yRWFjaChiKTtmb3IoYz0wO2M8R2MubGVuZ3RoO2MrKylkPUdjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxHYy5sZW5ndGgmJihjPUdjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVBjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmR2Muc2hpZnQoKX1cbnZhciBXYz17fSxZYz1uZXcgTWFwLFpjPW5ldyBNYXAsJGM9W1wiYWJvcnRcIixcImFib3J0XCIsWGIsXCJhbmltYXRpb25FbmRcIixZYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLFpiLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFxuXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsJGIsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIGFkKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdLGY9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7Zj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZixjYXB0dXJlZDpmK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2RdLGV2ZW50UHJpb3JpdHk6Yn07WmMuc2V0KGQsYik7WWMuc2V0KGQsZik7V2NbZV09Zn19XG5hZChcImJsdXIgYmx1ciBjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1cyBmb2N1cyBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLDApO1xuYWQoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7YWQoJGMsMik7Zm9yKHZhciBiZD1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksY2Q9MDtjZDxiZC5sZW5ndGg7Y2QrKylaYy5zZXQoYmRbY2RdLDApO1xudmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gRihhLGIpe3ZjKGIsYSwhMSl9ZnVuY3Rpb24gdmMoYSxiLGMpe3ZhciBkPVpjLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZD8yOmQpe2Nhc2UgMDpkPWdkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7Y2FzZSAxOmQ9aGQuYmluZChudWxsLGIsMSxhKTticmVhaztkZWZhdWx0OmQ9aWQuYmluZChudWxsLGIsMSxhKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIGdkKGEsYixjLGQpe0phfHxIYSgpO3ZhciBlPWlkLGY9SmE7SmE9ITA7dHJ5e0dhKGUsYSxiLGMsZCl9ZmluYWxseXsoSmE9Zil8fExhKCl9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe2VkKGRkLGlkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBpZChhLGIsYyxkKXtpZihmZClpZigwPEFjLmxlbmd0aCYmLTE8SGMuaW5kZXhPZihhKSlhPUtjKG51bGwsYSxiLGMsZCksQWMucHVzaChhKTtlbHNle3ZhciBlPVJjKGEsYixjLGQpO2lmKG51bGw9PT1lKUxjKGEsZCk7ZWxzZSBpZigtMTxIYy5pbmRleE9mKGEpKWE9S2MoZSxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2UgaWYoIU9jKGUsYSxiLGMsZCkpe0xjKGEsZCk7YT1yYyhhLGQsbnVsbCxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX19fX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQpe2M9bmMoZCk7Yz10YyhjKTtpZihudWxsIT09Yyl7dmFyIGU9ZGMoYyk7aWYobnVsbD09PWUpYz1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtjPWVjKGUpO2lmKG51bGwhPT1jKXJldHVybiBjO2M9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2M9bnVsbH1lbHNlIGUhPT1jJiYoYz1udWxsKX19YT1yYyhhLGQsYyxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX1yZXR1cm4gbnVsbH1cbnZhciBqZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxrZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoamQpLmZvckVhY2goZnVuY3Rpb24oYSl7a2QuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtqZFtiXT1qZFthXX0pfSk7ZnVuY3Rpb24gbGQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGpkLmhhc093blByb3BlcnR5KGEpJiZqZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBtZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1sZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBuZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gb2QoYSxiKXtpZihiKXtpZihuZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIHBkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgcWQ9TWIuaHRtbDtmdW5jdGlvbiByZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1jYyhhKTtiPXdhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXVjKGJbZF0sYSxjKX1mdW5jdGlvbiBzZCgpe31cbmZ1bmN0aW9uIHRkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiB1ZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYz11ZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz11ZChjKX19XG5mdW5jdGlvbiB3ZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP3dkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiB4ZCgpe2Zvcih2YXIgYT13aW5kb3csYj10ZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj10ZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIHlkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIHpkPVwiJFwiLEFkPVwiLyRcIixCZD1cIiQ/XCIsQ2Q9XCIkIVwiLERkPW51bGwsRWQ9bnVsbDtmdW5jdGlvbiBGZChhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBHZChhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIEhkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLElkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBKZChhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIEtkKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PXpkfHxjPT09Q2R8fGM9PT1CZCl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PUFkJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTGQ9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTWQ9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMZCxOZD1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xkLE9kPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrTGQ7XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hW01kXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tPZF18fGNbTWRdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9S2QoYSk7bnVsbCE9PWE7KXtpZihjPWFbTWRdKXJldHVybiBjO2E9S2QoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIE5jKGEpe2E9YVtNZF18fGFbT2RdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBQZChhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiBRZChhKXtyZXR1cm4gYVtOZF18fG51bGx9XG5mdW5jdGlvbiBSZChhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1sYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsXG5iLHR5cGVvZiBjKSk7cmV0dXJuIGN9ZnVuY3Rpb24gVGQoYSxiLGMpe2lmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBVZChhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPVJkKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylUZChjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVRkKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gVmQoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBXZChhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZkKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBYZChhKXtqYyhhLFVkKX12YXIgWWQ9bnVsbCxaZD1udWxsLCRkPW51bGw7XG5mdW5jdGlvbiBhZSgpe2lmKCRkKXJldHVybiAkZDt2YXIgYSxiPVpkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuICRkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gYmUoKXtyZXR1cm4hMH1mdW5jdGlvbiBjZSgpe3JldHVybiExfVxuZnVuY3Rpb24gRyhhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/YmU6Y2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jZTtyZXR1cm4gdGhpc31cbm4oRy5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1iZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1iZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1iZX0saXNQZXJzaXN0ZW50OmNlLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNlO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ry5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5HLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2RlKGMpO3JldHVybiBjfTtkZShHKTtmdW5jdGlvbiBlZShhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGZlKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGRlKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWVlO2EucmVsZWFzZT1mZX12YXIgZ2U9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGhlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxpZT1bOSwxMywyNywzMl0samU9eWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGtlPW51bGw7eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGtlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgbGU9eWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFrZSxtZT15YSYmKCFqZXx8a2UmJjg8a2UmJjExPj1rZSksbmU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksb2U9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0scGU9ITE7XG5mdW5jdGlvbiBxZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PWllLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gcmUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgc2U9ITE7ZnVuY3Rpb24gdGUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHJlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtwZT0hMDtyZXR1cm4gbmU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09bmUmJnBlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoc2UpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWplJiZxZShhLGIpPyhhPWFlKCksJGQ9WmQ9WWQ9bnVsbCxzZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gbWUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHZlPXtldmVudFR5cGVzOm9lLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoamUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9b2UuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9b2UuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPW9lLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBzZT9xZShhLGMpJiYoZj1vZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPW9lLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KG1lJiZcImtvXCIhPT1jLmxvY2FsZSYmKHNlfHxmIT09b2UuY29tcG9zaXRpb25TdGFydD9mPT09b2UuY29tcG9zaXRpb25FbmQmJnNlJiYoZT1hZSgpKTooWWQ9ZCxaZD1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxzZT0hMCkpLGY9Z2UuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1yZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksWGQoZiksZT1mKTplPW51bGw7KGE9bGU/dGUoYSxjKTp1ZShhLGMpKT8oYj1oZS5nZXRQb29sZWQob2UuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFhkKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LHdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIHhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhd2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIHllPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIHplKGEsYixjKXthPUcuZ2V0UG9vbGVkKHllLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RGEoYyk7WGQoYSk7cmV0dXJuIGF9dmFyIEFlPW51bGwsQmU9bnVsbDtmdW5jdGlvbiBDZShhKXttYyhhKX1mdW5jdGlvbiBEZShhKXt2YXIgYj1QZChhKTtpZih5YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBGZT0hMTt5YSYmKEZlPW9jKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gR2UoKXtBZSYmKEFlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSxCZT1BZT1udWxsKX1mdW5jdGlvbiBIZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmRGUoQmUpKWlmKGE9emUoQmUsYSxuYyhhKSksSmEpbWMoYSk7ZWxzZXtKYT0hMDt0cnl7RmEoQ2UsYSl9ZmluYWxseXtKYT0hMSxMYSgpfX19ZnVuY3Rpb24gSWUoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEdlKCksQWU9YixCZT1jLEFlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSk6XCJibHVyXCI9PT1hJiZHZSgpfWZ1bmN0aW9uIEplKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIERlKEJlKX1mdW5jdGlvbiBLZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIERlKGIpfWZ1bmN0aW9uIExlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIERlKGIpfVxudmFyIE1lPXtldmVudFR5cGVzOnllLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6RmUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BkKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9RWU7ZWxzZSBpZih4ZShlKSlpZihGZSlnPUxlO2Vsc2V7Zz1KZTt2YXIgaD1JZX1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9S2UpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIHplKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sTmU9Ry5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFxuT2U9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBlKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2VbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBRZSgpe3JldHVybiBQZX1cbnZhciBSZT0wLFNlPTAsVGU9ITEsVWU9ITEsVmU9TmUuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVJlO1JlPWEuc2NyZWVuWDtyZXR1cm4gVGU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihUZT0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVNlO1NlPWEuc2NyZWVuWTtyZXR1cm4gVWU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihVZT0hMCwwKX19KSxXZT1WZS5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksWGU9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LFllPXtldmVudFR5cGVzOlhlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO2Y9ZC53aW5kb3c9PT1kP2Q6KGY9ZC5vd25lckRvY3VtZW50KT9mLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/dGMoYik6bnVsbCxudWxsIT09Yil7dmFyIGg9ZGMoYik7aWYoYiE9PWh8fDUhPT1iLnRhZyYmNiE9PWIudGFnKWI9bnVsbH19ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PVxuYSl7dmFyIGs9VmU7dmFyIGw9WGUubW91c2VMZWF2ZTt2YXIgbT1YZS5tb3VzZUVudGVyO3ZhciBwPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlrPVdlLGw9WGUucG9pbnRlckxlYXZlLG09WGUucG9pbnRlckVudGVyLHA9XCJwb2ludGVyXCI7YT1udWxsPT1nP2Y6UGQoZyk7Zj1udWxsPT1iP2Y6UGQoYik7bD1rLmdldFBvb2xlZChsLGcsYyxkKTtsLnR5cGU9cCtcImxlYXZlXCI7bC50YXJnZXQ9YTtsLnJlbGF0ZWRUYXJnZXQ9ZjtjPWsuZ2V0UG9vbGVkKG0sYixjLGQpO2MudHlwZT1wK1wiZW50ZXJcIjtjLnRhcmdldD1mO2MucmVsYXRlZFRhcmdldD1hO2Q9ZztwPWI7aWYoZCYmcClhOntrPWQ7bT1wO2c9MDtmb3IoYT1rO2E7YT1SZChhKSlnKys7YT0wO2ZvcihiPW07YjtiPVJkKGIpKWErKztmb3IoOzA8Zy1hOylrPVJkKGspLGctLTtmb3IoOzA8YS1nOyltPVJkKG0pLGEtLTtmb3IoO2ctLTspe2lmKGs9PT1tfHxrPT09bS5hbHRlcm5hdGUpYnJlYWsgYTtcbms9UmQoayk7bT1SZChtKX1rPW51bGx9ZWxzZSBrPW51bGw7bT1rO2ZvcihrPVtdO2QmJmQhPT1tOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ay5wdXNoKGQpO2Q9UmQoZCl9Zm9yKGQ9W107cCYmcCE9PW07KXtnPXAuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztkLnB1c2gocCk7cD1SZChwKX1mb3IocD0wO3A8ay5sZW5ndGg7cCsrKVZkKGtbcF0sXCJidWJibGVkXCIsbCk7Zm9yKHA9ZC5sZW5ndGg7MDxwLS07KVZkKGRbcF0sXCJjYXB0dXJlZFwiLGMpO3JldHVybiAwPT09KGUmNjQpP1tsXTpbbCxjXX19O2Z1bmN0aW9uIFplKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgJGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6WmUsYWY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGJmKGEsYil7aWYoJGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFhZi5jYWxsKGIsY1tkXSl8fCEkZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIGNmPXlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGY9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVmPW51bGwsZmY9bnVsbCxnZj1udWxsLGhmPSExO1xuZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZnx8bnVsbD09ZWZ8fGVmIT09dGQoYykpcmV0dXJuIG51bGw7Yz1lZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ5ZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZiYmYmYoZ2YsYyk/bnVsbDooZ2Y9YyxhPUcuZ2V0UG9vbGVkKGRmLnNlbGVjdCxmZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVmLFhkKGEpLGEpfVxudmFyIGtmPXtldmVudFR5cGVzOmRmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2U9Znx8KGQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KTtpZighKGY9IWUpKXthOntlPWNjKGUpO2Y9d2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1BkKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoeGUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWY9ZSxmZj1iLGdmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZj1mZj1lZj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhmPSExLGpmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gamYoYyxkKX1yZXR1cm4gbnVsbH19LGxmPUcuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxtZj1HLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLG5mPU5lLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcGY9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHFmPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxyZj1OZS5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cGZbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2YoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3FmW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZihhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHNmPVZlLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx0Zj1OZS5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZX0pLHVmPUcuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHZmPVZlLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksd2Y9e2V2ZW50VHlwZXM6V2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1ZYy5nZXQoYSk7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZihjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9cmY7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPW5mO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9XG5WZTticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPXNmO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dGY7YnJlYWs7Y2FzZSBYYjpjYXNlIFliOmNhc2UgWmI6YT1sZjticmVhaztjYXNlICRiOmE9dWY7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9TmU7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT12ZjticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW1mO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9XG5XZTticmVhaztkZWZhdWx0OmE9R31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1hkKGIpO3JldHVybiBifX07aWYocGEpdGhyb3cgRXJyb3IodSgxMDEpKTtwYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtyYSgpO3ZhciB4Zj1OYztsYT1RZDttYT14ZjtuYT1QZDt4YSh7U2ltcGxlRXZlbnRQbHVnaW46d2YsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOlllLENoYW5nZUV2ZW50UGx1Z2luOk1lLFNlbGVjdEV2ZW50UGx1Z2luOmtmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46dmV9KTt2YXIgeWY9W10semY9LTE7ZnVuY3Rpb24gSChhKXswPnpmfHwoYS5jdXJyZW50PXlmW3pmXSx5Zlt6Zl09bnVsbCx6Zi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXt6ZisrO3lmW3pmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEFmPXt9LEo9e2N1cnJlbnQ6QWZ9LEs9e2N1cnJlbnQ6ITF9LEJmPUFmO2Z1bmN0aW9uIENmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRGYoKXtIKEspO0goSil9ZnVuY3Rpb24gRWYoYSxiLGMpe2lmKEouY3VycmVudCE9PUFmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIpO0koSyxjKX1mdW5jdGlvbiBGZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LHBiKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBHZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8QWY7QmY9Si5jdXJyZW50O0koSixhKTtJKEssSy5jdXJyZW50KTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEhmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGE9RmYoYSxiLEJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChLKSxIKEopLEkoSixhKSk6SChLKTtJKEssYyl9XG52YXIgSWY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSmY9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEtmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssTGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsTWY9ci51bnN0YWJsZV9ub3csTmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxPZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFBmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksUWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxSZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFNmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFRmPXt9LFVmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsVmY9dm9pZCAwIT09TGY/TGY6ZnVuY3Rpb24oKXt9LFdmPW51bGwsWGY9bnVsbCxZZj0hMSxaZj1NZigpLCRmPTFFND5aZj9NZjpmdW5jdGlvbigpe3JldHVybiBNZigpLVpmfTtcbmZ1bmN0aW9uIGFnKCl7c3dpdGNoKE5mKCkpe2Nhc2UgT2Y6cmV0dXJuIDk5O2Nhc2UgUGY6cmV0dXJuIDk4O2Nhc2UgUWY6cmV0dXJuIDk3O2Nhc2UgUmY6cmV0dXJuIDk2O2Nhc2UgU2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBPZjtjYXNlIDk4OnJldHVybiBQZjtjYXNlIDk3OnJldHVybiBRZjtjYXNlIDk2OnJldHVybiBSZjtjYXNlIDk1OnJldHVybiBTZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBjZyhhLGIpe2E9YmcoYSk7cmV0dXJuIElmKGEsYil9ZnVuY3Rpb24gZGcoYSxiLGMpe2E9YmcoYSk7cmV0dXJuIEpmKGEsYixjKX1mdW5jdGlvbiBlZyhhKXtudWxsPT09V2Y/KFdmPVthXSxYZj1KZihPZixmZykpOldmLnB1c2goYSk7cmV0dXJuIFRmfWZ1bmN0aW9uIGdnKCl7aWYobnVsbCE9PVhmKXt2YXIgYT1YZjtYZj1udWxsO0tmKGEpfWZnKCl9XG5mdW5jdGlvbiBmZygpe2lmKCFZZiYmbnVsbCE9PVdmKXtZZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1XZjtjZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7V2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09V2YmJihXZj1XZi5zbGljZShhKzEpKSxKZihPZixnZyksYzt9ZmluYWxseXtZZj0hMX19fWZ1bmN0aW9uIGhnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIGlnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBqZz17Y3VycmVudDpudWxsfSxrZz1udWxsLGxnPW51bGwsbWc9bnVsbDtmdW5jdGlvbiBuZygpe21nPWxnPWtnPW51bGx9XG5mdW5jdGlvbiBvZyhhKXt2YXIgYj1qZy5jdXJyZW50O0goamcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gcWcoYSxiKXtrZz1hO21nPWxnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHJnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7aWYobWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKW1nPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1sZyl7aWYobnVsbD09PWtnKXRocm93IEVycm9yKHUoMzA4KSk7bGc9YjtrZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGxnPWxnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB0Zz0hMTtmdW5jdGlvbiB1ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGJhc2VRdWV1ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsYmFzZVF1ZXVlOmEuYmFzZVF1ZXVlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHdnKGEsYil7YT17ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH07cmV0dXJuIGEubmV4dD1hfWZ1bmN0aW9uIHhnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmdmcoYyxhKTthPWEudXBkYXRlUXVldWU7Yz1hLmJhc2VRdWV1ZTtudWxsPT09Yz8oYS5iYXNlUXVldWU9Yi5uZXh0PWIsYi5uZXh0PWIpOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKX1cbmZ1bmN0aW9uIHpnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7dGc9ITE7dmFyIGY9ZS5iYXNlUXVldWUsZz1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1nKXtpZihudWxsIT09Zil7dmFyIGg9Zi5uZXh0O2YubmV4dD1nLm5leHQ7Zy5uZXh0PWh9Zj1nO2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDtoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiYoaD1oLnVwZGF0ZVF1ZXVlLG51bGwhPT1oJiYoaC5iYXNlUXVldWU9ZykpfWlmKG51bGwhPT1mKXtoPWYubmV4dDt2YXIgaz1lLmJhc2VTdGF0ZSxsPTAsbT1udWxsLHA9bnVsbCx4PW51bGw7aWYobnVsbCE9PWgpe3ZhciB6PWg7ZG97Zz16LmV4cGlyYXRpb25UaW1lO2lmKGc8ZCl7dmFyIGNhPXtleHBpcmF0aW9uVGltZTp6LmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09eD8ocD14PVxuY2EsbT1rKTp4PXgubmV4dD1jYTtnPmwmJihsPWcpfWVsc2V7bnVsbCE9PXgmJih4PXgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH0pO0FnKGcsei5zdXNwZW5zZUNvbmZpZyk7YTp7dmFyIEQ9YSx0PXo7Zz1iO2NhPWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6RD10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEQpe2s9RC5jYWxsKGNhLGssZyk7YnJlYWsgYX1rPUQ7YnJlYWsgYTtjYXNlIDM6RC5lZmZlY3RUYWc9RC5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOkQ9dC5wYXlsb2FkO2c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEQ/RC5jYWxsKGNhLGssZyk6RDtpZihudWxsPT09Z3x8dm9pZCAwPT09ZylicmVhayBhO2s9bih7fSxrLGcpO2JyZWFrIGE7Y2FzZSAyOnRnPSEwfX1udWxsIT09ei5jYWxsYmFjayYmXG4oYS5lZmZlY3RUYWd8PTMyLGc9ZS5lZmZlY3RzLG51bGw9PT1nP2UuZWZmZWN0cz1bel06Zy5wdXNoKHopKX16PXoubmV4dDtpZihudWxsPT09enx8ej09PWgpaWYoZz1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1nKWJyZWFrO2Vsc2Ugej1mLm5leHQ9Zy5uZXh0LGcubmV4dD1oLGUuYmFzZVF1ZXVlPWY9ZyxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSl9bnVsbD09PXg/bT1rOngubmV4dD1wO2UuYmFzZVN0YXRlPW07ZS5iYXNlUXVldWU9eDtCZyhsKTthLmV4cGlyYXRpb25UaW1lPWw7YS5tZW1vaXplZFN0YXRlPWt9fVxuZnVuY3Rpb24gQ2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1lO2U9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCl0aHJvdyBFcnJvcih1KDE5MSxkKSk7ZC5jYWxsKGUpfX19dmFyIERnPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEVnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEZnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEuZXhwaXJhdGlvblRpbWUmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBKZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZGMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPUdnKCksZD1EZy5zdXNwZW5zZTtcbmM9SGcoYyxhLGQpO2Q9d2coYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTt4ZyhhLGQpO0lnKGEsYyl9fTtmdW5jdGlvbiBLZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFiZihjLGQpfHwhYmYoZSxmKTohMH1cbmZ1bmN0aW9uIExnKGEsYixjKXt2YXIgZD0hMSxlPUFmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXNnKGYpOihlPUwoYik/QmY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/Q2YoYSxlKTpBZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUpnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWc7dWcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1zZyhmKTooZj1MKGIpP0JmOkouY3VycmVudCxlLmNvbnRleHQ9Q2YoYSxmKSk7emcoYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHpnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgT2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFBnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1FZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uIFJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVNnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVBnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1VZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1QZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVZnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1XZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVRnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjPVVnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVBnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYTpyZXR1cm4gYj1WZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoT2coYil8fFxubmIoYikpcmV0dXJuIGI9V2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE9nKGMpfHxuYihjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE9nKGQpfHxuYihkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBjYShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsbT1nLHk9Zz0wLEE9bnVsbDtudWxsIT09bSYmeTxoLmxlbmd0aDt5Kyspe20uaW5kZXg+eT8oQT1tLG09bnVsbCk6QT1tLnNpYmxpbmc7dmFyIHE9eChlLG0saFt5XSxrKTtpZihudWxsPT09cSl7bnVsbD09PW0mJihtPUEpO2JyZWFrfWEmJlxubSYmbnVsbD09PXEuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHEsZyx5KTtudWxsPT09dD9sPXE6dC5zaWJsaW5nPXE7dD1xO209QX1pZih5PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3k8aC5sZW5ndGg7eSsrKW09cChlLGhbeV0sayksbnVsbCE9PW0mJihnPWYobSxnLHkpLG51bGw9PT10P2w9bTp0LnNpYmxpbmc9bSx0PW0pO3JldHVybiBsfWZvcihtPWQoZSxtKTt5PGgubGVuZ3RoO3krKylBPXoobSxlLHksaFt5XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PUEua2V5P3k6QS5rZXkpLGc9ZihBLGcseSksbnVsbD09PXQ/bD1BOnQuc2libGluZz1BLHQ9QSk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBEKGUsZyxoLGwpe3ZhciBrPW5iKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrKXRocm93IEVycm9yKHUoMTUwKSk7aD1rLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWs9bnVsbCx0PWcseT1nPTAsQT1udWxsLHE9aC5uZXh0KCk7bnVsbCE9PXQmJiFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpe3QuaW5kZXg+eT8oQT10LHQ9bnVsbCk6QT10LnNpYmxpbmc7dmFyIEQ9eChlLHQscS52YWx1ZSxsKTtpZihudWxsPT09RCl7bnVsbD09PXQmJih0PUEpO2JyZWFrfWEmJnQmJm51bGw9PT1ELmFsdGVybmF0ZSYmYihlLHQpO2c9ZihELGcseSk7bnVsbD09PW0/az1EOm0uc2libGluZz1EO209RDt0PUF9aWYocS5kb25lKXJldHVybiBjKGUsdCksaztpZihudWxsPT09dCl7Zm9yKDshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9cChlLHEudmFsdWUsbCksbnVsbCE9PXEmJihnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO3JldHVybiBrfWZvcih0PWQoZSx0KTshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9eih0LGUseSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoYSYmbnVsbCE9PVxucS5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1xLmtleT95OnEua2V5KSxnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGt9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFphOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09YWIpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsXG5rLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMpO2QucmVmPVBnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWI/KGQ9V2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVVnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVBnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1cbmQuc2libGluZ31kPVZnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVRnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE9nKGYpKXJldHVybiBjYShhLGQsZixoKTtpZihuYihmKSlyZXR1cm4gRChhLGQsZixoKTtsJiZRZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWGc9UmcoITApLFlnPVJnKCExKSxaZz17fSwkZz17Y3VycmVudDpaZ30sYWg9e2N1cnJlbnQ6Wmd9LGJoPXtjdXJyZW50OlpnfTtcbmZ1bmN0aW9uIGNoKGEpe2lmKGE9PT1aZyl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGRoKGEsYil7SShiaCxiKTtJKGFoLGEpO0koJGcsWmcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6T2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPU9iKGIsYSl9SCgkZyk7SSgkZyxiKX1mdW5jdGlvbiBlaCgpe0goJGcpO0goYWgpO0goYmgpfWZ1bmN0aW9uIGZoKGEpe2NoKGJoLmN1cnJlbnQpO3ZhciBiPWNoKCRnLmN1cnJlbnQpO3ZhciBjPU9iKGIsYS50eXBlKTtiIT09YyYmKEkoYWgsYSksSSgkZyxjKSl9ZnVuY3Rpb24gZ2goYSl7YWguY3VycmVudD09PWEmJihIKCRnKSxIKGFoKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBoaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1CZHx8Yy5kYXRhPT09Q2QpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgamg9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixraD1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxsaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLG1oPSExO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBuaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCEkZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe2xoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmV4cGlyYXRpb25UaW1lPTA7amguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9waDpxaDthPWMoZCxlKTtpZihiLmV4cGlyYXRpb25UaW1lPT09bGgpe2Y9MDtkb3tiLmV4cGlyYXRpb25UaW1lPTA7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih1KDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2poLmN1cnJlbnQ9cmg7YT1jKGQsZSl9d2hpbGUoYi5leHBpcmF0aW9uVGltZT09PWxoKX1qaC5jdXJyZW50PXNoO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKGIpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIHVoKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiB2aChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmV4cGlyYXRpb25UaW1lO2lmKGw8bGgpe3ZhciBtPXtleHBpcmF0aW9uVGltZTprLmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bSxmPWQpOmg9aC5uZXh0PW07bD5OLmV4cGlyYXRpb25UaW1lJiZcbihOLmV4cGlyYXRpb25UaW1lPWwsQmcobCkpfWVsc2UgbnVsbCE9PWgmJihoPWgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksQWcobCxrLnN1c3BlbnNlQ29uZmlnKSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZzskZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geGgoYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpOyRlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiB5aChhKXt2YXIgYj10aCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjp2aCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBBaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBCaCgpe3JldHVybiB1aCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gQ2goYSxiLGMsZCl7dmFyIGU9dGgoKTtOLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBEaChhLGIsYyxkKXt2YXIgZT11aCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJm5oKGQsZy5kZXBzKSl7QWgoYixjLGYsZCk7cmV0dXJufX1OLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsZixkKX1mdW5jdGlvbiBFaChhLGIpe3JldHVybiBDaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEZoKGEsYil7cmV0dXJuIERoKDUxNiw0LGEsYil9ZnVuY3Rpb24gR2goYSxiKXtyZXR1cm4gRGgoNCwyLGEsYil9XG5mdW5jdGlvbiBIaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIEloKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gRGgoNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEpoKCl7fWZ1bmN0aW9uIEtoKGEsYil7dGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIE1oKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIE5oKGEsYixjKXt2YXIgZD1hZygpO2NnKDk4PmQ/OTg6ZCxmdW5jdGlvbigpe2EoITApfSk7Y2coOTc8ZD85NzpkLGZ1bmN0aW9uKCl7dmFyIGQ9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoITEpLGMoKX1maW5hbGx5e2toLnN1c3BlbnNlPWR9fSl9XG5mdW5jdGlvbiB6aChhLGIsYyl7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9e2V4cGlyYXRpb25UaW1lOmQsc3VzcGVuc2VDb25maWc6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZj1iLnBlbmRpbmc7bnVsbD09PWY/ZS5uZXh0PWU6KGUubmV4dD1mLm5leHQsZi5uZXh0PWUpO2IucGVuZGluZz1lO2Y9YS5hbHRlcm5hdGU7aWYoYT09PU58fG51bGwhPT1mJiZmPT09TiltaD0hMCxlLmV4cGlyYXRpb25UaW1lPWxoLE4uZXhwaXJhdGlvblRpbWU9bGg7ZWxzZXtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1mfHwwPT09Zi5leHBpcmF0aW9uVGltZSkmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5lYWdlclJlZHVjZXI9ZjtlLmVhZ2VyU3RhdGU9aDtpZigkZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9SWcoYSxcbmQpfX1cbnZhciBzaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0scGg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOktoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkVoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBDaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBDaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsXG5iXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9dGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6eWgsdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXloKGEpLGQ9Y1swXSxlPWNbMV07RWgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPVxuY319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj15aCghMSksYz1iWzBdO2I9YlsxXTtyZXR1cm5bS2goTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scWg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp3aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gd2godmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9d2godmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG53aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scmg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp4aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4geGgodmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eGgodmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eGgodmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxcbmIsYSksW2IsYV0pLGNdfX0sT2g9bnVsbCxQaD1udWxsLFFoPSExO2Z1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFRoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBVaChhKXtpZihRaCl7dmFyIGI9UGg7aWYoYil7dmFyIGM9YjtpZighVGgoYSxiKSl7Yj1KZChjLm5leHRTaWJsaW5nKTtpZighYnx8IVRoKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7UWg9ITE7T2g9YTtyZXR1cm59UmgoT2gsYyl9T2g9YTtQaD1KZChiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhR2QoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1KZChiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PUFkKXtpZigwPT09Yil7UGg9SmQoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09emQmJmMhPT1DZCYmYyE9PUJkfHxiKyt9YT1hLm5leHRTaWJsaW5nfVBoPW51bGx9fWVsc2UgUGg9T2g/SmQoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBYaCgpe1BoPU9oPW51bGw7UWg9ITF9dmFyIFloPVdhLlJlYWN0Q3VycmVudE93bmVyLHJnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9ZZyhiLG51bGwsYyxkKTpYZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBaaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7cWcoYixlKTtkPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWJpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGNpKGEsYixnLGQsZSxmKTthPVVnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6YmYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gJGgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9U2coZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZiZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihyZz0hMSxlPGYpPyhiLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsJGgoYSxiLGYpKTpkaShhLGIsYyxkLGYpfWZ1bmN0aW9uIGVpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZGkoYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0JmOkouY3VycmVudDtmPUNmKGIsZik7cWcoYixlKTtjPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtxZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksTGcoYixjLGQpLE5nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpO3RnPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXg7emcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD10Z3x8S2coYixjLGgsZCx4LGssbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsdmcoYSxiKSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDppZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpLHRnPSExLGs9Yi5tZW1vaXplZFN0YXRlLGcuc3RhdGU9ayx6ZyhiLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPXRnfHxLZyhiLGMsaCxkLGsseCxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJkhmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1YZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZIZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/RWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmRWYoYSxiLmNvbnRleHQsITEpO2RoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZVaChiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1ZZyhiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1TZyhkLGUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVhnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVxuY31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WGcoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7cGcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZraShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZylraShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWhoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7bGkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aGgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfWxpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpsaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkJnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9U2coYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgbmksb2kscGkscWk7XG5uaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07b2k9ZnVuY3Rpb24oKXt9O1xucGk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2NoKCRnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YihnLGYpO2Q9emIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdiKGcsZik7ZD1HYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXNkKX1vZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJnJkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTtpZihiLnVwZGF0ZVF1ZXVlPWUpYi5lZmZlY3RUYWd8PTR9fTtcbnFpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5lZmZlY3RUYWd8PTQpfTtmdW5jdGlvbiByaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBzaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMzpyZXR1cm4gZWgoKSxIKEspLEgoSiksYz1iLnN0YXRlTm9kZSxjLnBlbmRpbmdDb250ZXh0JiYoYy5jb250ZXh0PWMucGVuZGluZ0NvbnRleHQsYy5wZW5kaW5nQ29udGV4dD1udWxsKSxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fCFXaChiKXx8KGIuZWZmZWN0VGFnfD00KSxvaShiKSxudWxsO2Nhc2UgNTpnaChiKTtjPWNoKGJoLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYSxiLGUsZCxjKSxhLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5yZXR1cm4gbnVsbH1hPWNoKCRnLmN1cnJlbnQpO2lmKFdoKGIpKXtkPWIuc3RhdGVOb2RlO2U9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW01kXT1iO2RbTmRdPWY7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8YWMubGVuZ3RoO2ErKylGKGFjW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGQsZik7RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGQsZiksRihcImludmFsaWRcIixkKSxyZChjLFwib25DaGFuZ2VcIil9b2QoZSxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKGE9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOnZhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZyZChjLGcpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihkKTtFYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGQpO0xiKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiZcbihkLm9uY2xpY2s9c2QpfWM9YTtiLnVwZGF0ZVF1ZXVlPWM7bnVsbCE9PWMmJihiLmVmZmVjdFRhZ3w9NCl9ZWxzZXtnPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2E9PT1xZCYmKGE9TmIoZSkpO2E9PT1xZD9cInNjcmlwdFwiPT09ZT8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGUse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGUpO2FbTWRdPWI7YVtOZF09ZDtuaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz1wZChlLGQpO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5hKTtoPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFjLmxlbmd0aDtoKyspRihhY1toXSxhKTtoPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGEpO0YoXCJzdWJtaXRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGEsZCk7aD16YihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPUdiKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtoPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoYSxcbmQpO2g9SWIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9ZH1vZChlLGgpO3ZhciBrPWg7Zm9yKGYgaW4gaylpZihrLmhhc093blByb3BlcnR5KGYpKXt2YXIgbD1rW2ZdO1wic3R5bGVcIj09PWY/bWQoYSxsKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJlFiKGEsbCkpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsPyhcInRleHRhcmVhXCIhPT1lfHxcIlwiIT09bCkmJlJiKGEsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZSYihhLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKHZhLmhhc093blByb3BlcnR5KGYpP251bGwhPWwmJnJkKGMsZik6bnVsbCE9bCYmWGEoYSxmLGwsZykpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihhKTtFYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoYSk7TGIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3JiKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Yz1kLnZhbHVlO251bGwhPWM/SGIoYSwhIWQubXVsdGlwbGUsYywhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJkhiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihhLm9uY2xpY2s9c2QpfUZkKGUsZCkmJihiLmVmZmVjdFRhZ3w9NCl9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXFpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xuYz1jaChiaC5jdXJyZW50KTtjaCgkZy5jdXJyZW50KTtXaChiKT8oYz1iLnN0YXRlTm9kZSxkPWIubWVtb2l6ZWRQcm9wcyxjW01kXT1iLGMubm9kZVZhbHVlIT09ZCYmKGIuZWZmZWN0VGFnfD00KSk6KGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxjW01kXT1iLGIuc3RhdGVOb2RlPWMpfXJldHVybiBudWxsO2Nhc2UgMTM6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1jLGI7Yz1udWxsIT09ZDtkPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmV2goYik6KGU9YS5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWUsY3x8bnVsbD09PWV8fChlPWEuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGY9Yi5maXJzdEVmZmVjdCxudWxsIT09Zj8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1mKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9XG5lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSkpO2lmKGMmJiFkJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVM9PT10aSYmKFM9dWkpO2Vsc2V7aWYoUz09PXRpfHxTPT09dWkpUz12aTswIT09d2kmJm51bGwhPT1UJiYoeGkoVCxVKSx5aShULHdpKSl9aWYoY3x8ZCliLmVmZmVjdFRhZ3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksb2koYiksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMTk6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtlPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2Y9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWYpaWYoZSlyaShkLCExKTtlbHNle2lmKFMhPT10aXx8bnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmXG42NCkpZm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2E9aGgoZik7aWYobnVsbCE9PWEpe2IuZWZmZWN0VGFnfD02NDtyaShkLCExKTtlPWEudXBkYXRlUXVldWU7bnVsbCE9PWUmJihiLnVwZGF0ZVF1ZXVlPWUsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7Zm9yKGQ9Yi5jaGlsZDtudWxsIT09ZDspZT1kLGY9YyxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsYT1lLmFsdGVybmF0ZSxudWxsPT09YT8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWUsXG5lLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1hLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsZj1hLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGQ9ZC5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1mPWYuc2libGluZ319ZWxzZXtpZighZSlpZihhPWhoKGYpLG51bGwhPT1hKXtpZihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpLHJpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZi5hbHRlcm5hdGUpcmV0dXJuIGI9XG5iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKiRmKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+ZC50YWlsRXhwaXJhdGlvbiYmMTxjJiYoYi5lZmZlY3RUYWd8PTY0LGU9ITAscmkoZCwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9Yy0xKTtkLmlzQmFja3dhcmRzPyhmLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWYpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZjpiLmNoaWxkPWYsZC5sYXN0PWYpfXJldHVybiBudWxsIT09ZC50YWlsPygwPT09ZC50YWlsRXhwaXJhdGlvbiYmKGQudGFpbEV4cGlyYXRpb249JGYoKSs1MDApLGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPSRmKCksYy5zaWJsaW5nPW51bGwsYj1NLmN1cnJlbnQsSShNLGU/YiYxfDI6YiYxKSxjKTpudWxsfXRocm93IEVycm9yKHUoMTU2LFxuYi50YWcpKTt9ZnVuY3Rpb24gemkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZEZigpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZWgoKTtIKEspO0goSik7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGdoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChNKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEFpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cWIoYil9fVxudmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIENpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cWIoYykpO251bGwhPT1jJiZwYihjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZwYihhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBEaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7RWkoYSxjKX19ZnVuY3Rpb24gRmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7RWkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gR2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6aWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gSGkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5kZXN0cm95O2MuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZCYmZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fVxuZnVuY3Rpb24gSmkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOklpKDMsYyk7cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6aWcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyk7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZDZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUNnKGMsYixhKX1yZXR1cm47XG5jYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmNCYmRmQoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZWYyhjKSkpKTtyZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBLaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIExpJiZMaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2NnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtFaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6RmkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmRGkoYixjKTticmVhaztjYXNlIDU6RmkoYik7YnJlYWs7Y2FzZSA0Ok1pKGEsYixjKX19XG5mdW5jdGlvbiBOaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7bnVsbCE9PWImJk5pKGIpfWZ1bmN0aW9uIE9pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gUGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoT2koYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFJiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxPaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/UWkoYSxjLGIpOlJpKGEsYyxiKX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1zZCkpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFJpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUmkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylSaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBNaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEtpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEtpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBTaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6SGkoMyxiKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbTmRdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkJiKGMsZCk7cGQoYSxlKTtiPXBkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9tZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/UWIoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1JiKGMsaCk6WGEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkNiKGMsZCk7YnJlYWs7XG5jYXNlIFwidGV4dGFyZWFcIjpLYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0hiKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9IYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SGIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxWYyhiLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9cbmQ9ITE6KGQ9ITAsYz1iLmNoaWxkLFRpPSRmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1sZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1cbmY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWs7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9VWkoYik7cmV0dXJuO2Nhc2UgMTk6VWkoYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fWZ1bmN0aW9uIFVpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEJpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG52YXIgV2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gWGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtZaXx8KFlpPSEwLFppPWQpO0NpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gJGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7Q2koYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWFqP2FqPW5ldyBTZXQoW3RoaXNdKTphai5hZGQodGhpcyksQ2koYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgYmo9TWF0aC5jZWlsLGNqPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGo9V2EuUmVhY3RDdXJyZW50T3duZXIsVj0wLGVqPTgsZmo9MTYsZ2o9MzIsdGk9MCxoaj0xLGlqPTIsdWk9Myx2aT00LGpqPTUsVz1WLFQ9bnVsbCxYPW51bGwsVT0wLFM9dGksa2o9bnVsbCxsaj0xMDczNzQxODIzLG1qPTEwNzM3NDE4MjMsbmo9bnVsbCx3aT0wLG9qPSExLFRpPTAscGo9NTAwLFk9bnVsbCxZaT0hMSxaaT1udWxsLGFqPW51bGwscWo9ITEscmo9bnVsbCxzaj05MCx0aj1udWxsLHVqPTAsdmo9bnVsbCx3aj0wO2Z1bmN0aW9uIEdnKCl7cmV0dXJuKFcmKGZqfGdqKSkhPT1WPzEwNzM3NDE4MjEtKCRmKCkvMTB8MCk6MCE9PXdqP3dqOndqPTEwNzM3NDE4MjEtKCRmKCkvMTB8MCl9XG5mdW5jdGlvbiBIZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWFnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChXJmZqKSE9PVYpcmV0dXJuIFU7aWYobnVsbCE9PWMpYT1oZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1oZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWhnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VCYmYT09PVUmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElnKGEsYil7aWYoNTA8dWopdGhyb3cgdWo9MCx2aj1udWxsLEVycm9yKHUoMTg1KSk7YT14aihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1hZygpOzEwNzM3NDE4MjM9PT1iPyhXJmVqKSE9PVYmJihXJihmanxnaikpPT09Vj95aihhKTooWihhKSxXPT09ViYmZ2coKSk6WihhKTsoVyY0KT09PVZ8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PXRqP3RqPW5ldyBNYXAoW1thLGJdXSk6KGM9dGouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZ0ai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIHhqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihUPT09ZSYmKEJnKGIpLFM9PT12aSYmeGkoZSxVKSkseWkoZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiB6aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighQWooYSxiKSlyZXR1cm4gYjt2YXIgYz1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7YT1jPmE/YzphO3JldHVybiAyPj1hJiZiIT09YT8wOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9ZWcoeWouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPXpqKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1HZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1UZiYmS2YoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2VnKHlqLmJpbmQobnVsbCxhKSk6ZGcoZCxCai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktJGYoKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIEJqKGEsYil7d2o9MDtpZihiKXJldHVybiBiPUdnKCksQ2ooYSxiKSxaKGEpLG51bGw7dmFyIGM9emooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYz09PVV8fEVqKGEsYyk7aWYobnVsbCE9PVgpe3ZhciBkPVc7V3w9Zmo7dmFyIGU9RmooKTtkbyB0cnl7R2ooKTticmVha31jYXRjaChoKXtIaihhLGgpfXdoaWxlKDEpO25nKCk7Vz1kO2NqLmN1cnJlbnQ9ZTtpZihTPT09aGopdGhyb3cgYj1raixFaihhLGMpLHhpKGEsYyksWihhKSxiO2lmKG51bGw9PT1YKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1TLFQ9bnVsbCxkKXtjYXNlIHRpOmNhc2UgaGo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIGlqOkNqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB1aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKDEwNzM3NDE4MjM9PT1saiYmKGU9VGkrcGotJGYoKSwxMDxlKSl7aWYob2ope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfX1mPXpqKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGUpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugdmk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYob2omJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha31lPXpqKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT1taj9kPTEwKigxMDczNzQxODIxLW1qKS0kZigpOjEwNzM3NDE4MjM9PT1saj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEtbGopLTVFMyxlPSRmKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiaihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSBqajppZigxMDczNzQxODIzIT09bGomJm51bGwhPT1uail7Zj1sajt2YXIgZz1uajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj0kZigpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe3hpKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxuSGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfX1KaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBCai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYj09PVV8fEVqKGEsYik7aWYobnVsbCE9PVgpe3ZhciBjPVc7V3w9Zmo7dmFyIGQ9RmooKTtkbyB0cnl7S2ooKTticmVha31jYXRjaChlKXtIaihhLGUpfXdoaWxlKDEpO25nKCk7Vz1jO2NqLmN1cnJlbnQ9ZDtpZihTPT09aGopdGhyb3cgYz1raixFaihhLGIpLHhpKGEsYiksWihhKSxjO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtUPW51bGw7SmooYSk7WihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBMaigpe2lmKG51bGwhPT10ail7dmFyIGE9dGo7dGo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtDaihjLGEpO1ooYyl9KTtnZygpfX1cbmZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19ZnVuY3Rpb24gTmooYSxiKXt2YXIgYz1XO1cmPS0yO1d8PWVqO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19XG5mdW5jdGlvbiBFaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxJZChjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZEZigpO2JyZWFrO2Nhc2UgMzplaCgpO0goSyk7SChKKTticmVhaztjYXNlIDU6Z2goZCk7YnJlYWs7Y2FzZSA0OmVoKCk7YnJlYWs7Y2FzZSAxMzpIKE0pO2JyZWFrO2Nhc2UgMTk6SChNKTticmVhaztjYXNlIDEwOm9nKGQpfWM9Yy5yZXR1cm59VD1hO1g9U2coYS5jdXJyZW50LG51bGwpO1U9YjtTPXRpO2tqPW51bGw7bWo9bGo9MTA3Mzc0MTgyMztuaj1udWxsO3dpPTA7b2o9ITF9XG5mdW5jdGlvbiBIaihhLGIpe2Rve3RyeXtuZygpO2poLmN1cnJlbnQ9c2g7aWYobWgpZm9yKHZhciBjPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09Yzspe3ZhciBkPWMucXVldWU7bnVsbCE9PWQmJihkLnBlbmRpbmc9bnVsbCk7Yz1jLm5leHR9bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKG51bGw9PT1YfHxudWxsPT09WC5yZXR1cm4pcmV0dXJuIFM9aGosa2o9YixYPW51bGw7YTp7dmFyIGU9YSxmPVgucmV0dXJuLGc9WCxoPWI7Yj1VO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZmlyc3RFZmZlY3Q9Zy5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGgudGhlbil7dmFyIGs9aDtpZigwPT09KGcubW9kZSYyKSl7dmFyIGw9Zy5hbHRlcm5hdGU7bD8oZy51cGRhdGVRdWV1ZT1sLnVwZGF0ZVF1ZXVlLGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTooZy51cGRhdGVRdWV1ZT1cbm51bGwsZy5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBtPTAhPT0oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7XG5icmVhayBhfWg9dm9pZCAwO2c9Yjt2YXIgQT1lLnBpbmdDYWNoZTtudWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChwYihnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrcWIoZykpfVMhPT1cbmpqJiYoUz1paik7aD1BaShoLGcpO3A9Zjtkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzprPWg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gRmooKXt2YXIgYT1jai5jdXJyZW50O2NqLmN1cnJlbnQ9c2g7cmV0dXJuIG51bGw9PT1hP3NoOmF9ZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO29iKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2IpcmV0dXJuIDExO2lmKGE9PT1qYilyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFiOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZiOmc9ODtlfD03O2JyZWFrO2Nhc2UgYmI6Zz04O2V8PTE7YnJlYWs7Y2FzZSBjYjpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNiLGEudHlwZT1jYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhiOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9aGIsYS5lbGVtZW50VHlwZT1oYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGliOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWliLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYjpnPVxuMTA7YnJlYWsgYTtjYXNlIGViOmc9OTticmVhayBhO2Nhc2UgZ2I6Zz0xMTticmVhayBhO2Nhc2UgamI6Zz0xNDticmVhayBhO2Nhc2Uga2I6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIGxiOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuemE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYT1NajtcbkdhPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07SGE9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O0lhPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCx4YSx0YSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sRGEsRWEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOldhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTMuMVwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5jbGVhciA9IGNsZWFyO1xuZnVuY3Rpb24gZ2V0SXRlbShrZXkpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRJdGVtID0gZ2V0SXRlbTtcbmZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZW1vdmVJdGVtID0gcmVtb3ZlSXRlbTtcbmZ1bmN0aW9uIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnNldEl0ZW0gPSBzZXRJdGVtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbW9ieF8xID0gcmVxdWlyZShcIm1vYnhcIik7XG5mdW5jdGlvbiBtZXJnZU9ic2VydmFibGVzKHRhcmdldCwgc291cmNlKSB7XG4gICAgdmFyIHQgPSB0YXJnZXQ7XG4gICAgdmFyIHMgPSBzb3VyY2U7XG4gICAgaWYgKHR5cGVvZiB0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHQpIHtcbiAgICAgICAgICAgIGlmICh0W2tleV0gJiYgdHlwZW9mIHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHNba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAobW9ieF8xLmlzT2JzZXJ2YWJsZU1hcCh0W2tleV0pKVxuICAgICAgICAgICAgICAgICAgICB0W2tleV0ubWVyZ2Uoc1trZXldKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2J4XzEuaXNPYnNlcnZhYmxlQXJyYXkodFtrZXldKSlcbiAgICAgICAgICAgICAgICAgICAgdFtrZXldLnJlcGxhY2Uoc1trZXldKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2J4XzEuaXNPYnNlcnZhYmxlT2JqZWN0KHRba2V5XSkpXG4gICAgICAgICAgICAgICAgICAgIHRba2V5XSA9IG1lcmdlT2JzZXJ2YWJsZXModFtrZXldLCBzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0W2tleV0gPSBzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59XG5leHBvcnRzLm1lcmdlT2JzZXJ2YWJsZXMgPSBtZXJnZU9ic2VydmFibGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc2VyaWFsaXpyXzEgPSByZXF1aXJlKFwic2VyaWFsaXpyXCIpO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8vIGNvbnN0IGRlbW8gPSB7XG4vLyAgICAgdGl0bGU6IHRydWUsXG4vLyAgICAgbmFtZToge1xuLy8gICAgICAgICB0eXBlOiAnb2JqZWN0Jyxcbi8vICAgICAgICAgc2NoZW1hOiB7XG4vLyAgICAgICAgICAgICBmaXJzdDogdHJ1ZSxcbi8vICAgICAgICAgICAgIHNlY29uZDogdHJ1ZSxcbi8vICAgICAgICAgICAgIGxhc3Q6IHRydWVcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbmZ1bmN0aW9uIHBlcnNpc3RPYmplY3QodGFyZ2V0LCBzY2hlbWEpIHtcbiAgICB2YXIgbW9kZWwgPSBjcmVhdGVNb2RlbChzY2hlbWEpO1xuICAgIHNlcmlhbGl6cl8xLnNldERlZmF1bHRNb2RlbFNjaGVtYSh0YXJnZXQsIG1vZGVsKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0cy5wZXJzaXN0T2JqZWN0ID0gcGVyc2lzdE9iamVjdDtcbmZ1bmN0aW9uIGNyZWF0ZU1vZGVsKHBhcmFtcykge1xuICAgIHZhciBzY2hlbWEgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1trZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKHBhcmFtc1trZXldLnR5cGUgaW4gdHlwZXNfMS50eXBlcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zW2tleV0uc2NoZW1hID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBzY2hlbWFba2V5XSA9IHR5cGVzXzEudHlwZXNbcGFyYW1zW2tleV0udHlwZV0oY3JlYXRlTW9kZWwocGFyYW1zW2tleV0uc2NoZW1hKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzY2hlbWFba2V5XSA9IHR5cGVzXzEudHlwZXNbcGFyYW1zW2tleV0udHlwZV0ocGFyYW1zW2tleV0uc2NoZW1hKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zW2tleV0gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNjaGVtYVtrZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXJpYWxpenJfMS5jcmVhdGVTaW1wbGVTY2hlbWEoc2NoZW1hKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbi8qKlxuICogQSBHaXN0IGNhbiByZXRyaWV2ZSBhbmQgbW9kaWZ5IGdpc3RzLlxuICovXG52YXIgR2lzdCA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgX2luaGVyaXRzKEdpc3QsIF9SZXF1ZXN0YWJsZSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIEdpc3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoZSBpZCBvZiB0aGUgZ2lzdCAobm90IHJlcXVpcmVkIHdoZW4gY3JlYXRpbmcgYSBnaXN0KVxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmF1dGh9IFthdXRoXSAtIGluZm9ybWF0aW9uIHJlcXVpcmVkIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICovXG4gIGZ1bmN0aW9uIEdpc3QoaWQsIGF1dGgsIGFwaUJhc2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2lzdCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoR2lzdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEdpc3QpKS5jYWxsKHRoaXMsIGF1dGgsIGFwaUJhc2UpKTtcblxuICAgIF90aGlzLl9faWQgPSBpZDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYSBnaXN0LlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI2dldC1hLXNpbmdsZS1naXN0XG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGdpc3RcbiAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhHaXN0LCBbe1xuICAgIGtleTogJ3JlYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9naXN0cy8nICsgdGhpcy5fX2lkLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGdpc3QuXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNjcmVhdGUtYS1naXN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGdpc3QgLSB0aGUgZGF0YSBmb3IgdGhlIG5ldyBnaXN0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3IGdpc3QgdXBvbiBjcmVhdGlvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKGdpc3QsIGNiKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL2dpc3RzJywgZ2lzdCwgY2IpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIF90aGlzMi5fX2lkID0gcmVzcG9uc2UuZGF0YS5pZDtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgZ2lzdC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI2RlbGV0ZS1hLWdpc3RcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBQcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL2dpc3RzLycgKyB0aGlzLl9faWQsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JrIGEgZ2lzdC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI2ZvcmstYS1naXN0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgZ2lzdFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZm9yaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcmsoY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9naXN0cy8nICsgdGhpcy5fX2lkICsgJy9mb3JrcycsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYSBnaXN0LlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy8jZWRpdC1hLWdpc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZ2lzdCAtIHRoZSBuZXcgZGF0YSBmb3IgdGhlIGdpc3RcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gdGhlIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIEFQSSByZXN1bHRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBQcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShnaXN0LCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9naXN0cy8nICsgdGhpcy5fX2lkLCBnaXN0LCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhciBhIGdpc3QuXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNzdGFyLWEtZ2lzdFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzdGFyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcihjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BVVCcsICcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvc3RhcicsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbnN0YXIgYSBnaXN0LlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy8jdW5zdGFyLWEtZ2lzdFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bnN0YXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnN0YXIoY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL3N0YXInLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBnaXN0IGlzIHN0YXJyZWQgYnkgdGhlIHVzZXIuXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNjaGVjay1pZi1hLWdpc3QtaXMtc3RhcnJlZFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgZ2lzdCBpcyBzdGFycmVkIGFuZCBmYWxzZSBpZiB0aGUgZ2lzdCBpcyBub3Qgc3RhcnJlZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaXNTdGFycmVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNTdGFycmVkKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdDIwNG9yNDA0KCcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvc3RhcicsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBnaXN0J3MgY29tbWl0c1xuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy8jbGlzdC1naXN0LWNvbW1pdHNcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBhcnJheSBvZiBjb21taXRzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0Q29tbWl0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RDb21taXRzKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKCcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvY29tbWl0cycsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaCBvbmUgb2YgdGhlIGdpc3QncyByZXZpc2lvbi5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI2dldC1hLXNwZWNpZmljLXJldmlzaW9uLW9mLWEtZ2lzdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXZpc2lvbiAtIHRoZSBpZCBvZiB0aGUgcmV2aXNpb25cbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSByZXZpc2lvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIFByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0UmV2aXNpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXZpc2lvbihyZXZpc2lvbiwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnLycgKyByZXZpc2lvbiwgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIGdpc3QncyBjb21tZW50c1xuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy9jb21tZW50cy8jbGlzdC1jb21tZW50cy1vbi1hLWdpc3RcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBhcnJheSBvZiBjb21tZW50c1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdENvbW1lbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdENvbW1lbnRzKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKCcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvY29tbWVudHMnLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggb25lIG9mIHRoZSBnaXN0J3MgY29tbWVudHNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvY29tbWVudHMvI2dldC1hLXNpbmdsZS1jb21tZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbW1lbnQgLSB0aGUgaWQgb2YgdGhlIGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBjb21tZW50XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29tbWVudChjb21tZW50LCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvY29tbWVudHMvJyArIGNvbW1lbnQsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21tZW50IG9uIGEgZ2lzdFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy9jb21tZW50cy8jY3JlYXRlLWEtY29tbWVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21tZW50IC0gdGhlIGNvbW1lbnQgdG8gYWRkXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHRoZSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBBUEkgcmVzdWx0XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ29tbWVudChjb21tZW50LCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL2dpc3RzLycgKyB0aGlzLl9faWQgKyAnL2NvbW1lbnRzJywgeyBib2R5OiBjb21tZW50IH0sIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFZGl0IGEgY29tbWVudCBvbiB0aGUgZ2lzdFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy9jb21tZW50cy8jZWRpdC1hLWNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29tbWVudCAtIHRoZSBpZCBvZiB0aGUgY29tbWVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBib2R5IC0gdGhlIG5ldyBjb21tZW50XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbW9kaWZpZWQgY29tbWVudFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZWRpdENvbW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0Q29tbWVudChjb21tZW50LCBib2R5LCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9naXN0cy8nICsgdGhpcy5fX2lkICsgJy9jb21tZW50cy8nICsgY29tbWVudCwgeyBib2R5OiBib2R5IH0sIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBjb21tZW50IG9uIHRoZSBnaXN0LlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXN0cy9jb21tZW50cy8jZGVsZXRlLWEtY29tbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb21tZW50IC0gdGhlIGlkIG9mIHRoZSBjb21tZW50XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgUHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlQ29tbWVudChjb21tZW50LCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0RFTEVURScsICcvZ2lzdHMvJyArIHRoaXMuX19pZCArICcvY29tbWVudHMvJyArIGNvbW1lbnQsIG51bGwsIGNiKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2lzdDtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBHaXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtkcGMzUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVIybHpkQ0lzSW1sa0lpd2lZWFYwYUNJc0ltRndhVUpoYzJVaUxDSmZYMmxrSWl3aVkySWlMQ0pmY21WeGRXVnpkQ0lzSW1kcGMzUWlMQ0owYUdWdUlpd2ljbVZ6Y0c5dWMyVWlMQ0prWVhSaElpd2lYM0psY1hWbGMzUXlNRFJ2Y2pRd05DSXNJbDl5WlhGMVpYTjBRV3hzVUdGblpYTWlMQ0p5WlhacGMybHZiaUlzSW1OdmJXMWxiblFpTENKaWIyUjVJaXdpVW1WeGRXVnpkR0ZpYkdVaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN08wRkJUMEU3T3pzN096czdPenM3SzJWQlVFRTdPenM3T3pzN1FVRlRRVHM3TzBsQlIwMUJMRWs3T3p0QlFVTklPenM3T3pzN1FVRk5RU3huUWtGQldVTXNSVUZCV2l4RlFVRm5Ra01zU1VGQmFFSXNSVUZCYzBKRExFOUJRWFJDTEVWQlFTdENPMEZCUVVFN08wRkJRVUVzTkVkQlEzUkNSQ3hKUVVSelFpeEZRVU5vUWtNc1QwRkVaMEk3TzBGQlJUVkNMRlZCUVV0RExFbEJRVXdzUjBGQldVZ3NSVUZCV2p0QlFVWTBRanRCUVVjNVFqczdRVUZGUkRzN096czdPenM3T3p0NVFrRk5TMGtzUlN4RlFVRkpPMEZCUTA0c1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFJpeEpRVUZ3UXl4RlFVRTBReXhKUVVFMVF5eEZRVUZyUkVNc1JVRkJiRVFzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPekpDUVU5UFJTeEpMRVZCUVUxR0xFVXNSVUZCU1R0QlFVRkJPenRCUVVOa0xHRkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRTFCUVdRc1JVRkJjMElzVVVGQmRFSXNSVUZCWjBORExFbEJRV2hETEVWQlFYTkRSaXhGUVVGMFF5eEZRVU5JUnl4SlFVUkhMRU5CUTBVc1ZVRkJRME1zVVVGQlJDeEZRVUZqTzBGQlEycENMR1ZCUVV0TUxFbEJRVXdzUjBGQldVc3NVMEZCVTBNc1NVRkJWQ3hEUVVGalZDeEZRVUV4UWp0QlFVTkJMR1ZCUVU5UkxGRkJRVkE3UVVGRFJpeFBRVXBITEVOQlFWQTdRVUZMUmpzN1FVRkZSRHM3T3pzN096czdPelJDUVUxUFNpeEZMRVZCUVVrN1FVRkRVaXhoUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4UlFVRmtMR05CUVd0RExFdEJRVXRHTEVsQlFYWkRMRVZCUVN0RExFbEJRUzlETEVWQlFYRkVReXhGUVVGeVJDeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3p0NVFrRk5TMEVzUlN4RlFVRkpPMEZCUTA0c1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUVUZCWkN4alFVRm5ReXhMUVVGTFJpeEpRVUZ5UXl4aFFVRnRSQ3hKUVVGdVJDeEZRVUY1UkVNc1JVRkJla1FzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPekpDUVU5UFJTeEpMRVZCUVUxR0xFVXNSVUZCU1R0QlFVTmtMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEU5QlFXUXNZMEZCYVVNc1MwRkJTMFlzU1VGQmRFTXNSVUZCT0VOSExFbEJRVGxETEVWQlFXOUVSaXhGUVVGd1JDeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3p0NVFrRk5TMEVzUlN4RlFVRkpPMEZCUTA0c1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFJpeEpRVUZ3UXl4WlFVRnBSQ3hKUVVGcVJDeEZRVUYxUkVNc1JVRkJka1FzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdNa0pCVFU5QkxFVXNSVUZCU1R0QlFVTlNMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEZGQlFXUXNZMEZCYTBNc1MwRkJTMFlzU1VGQmRrTXNXVUZCYjBRc1NVRkJjRVFzUlVGQk1FUkRMRVZCUVRGRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3poQ1FVMVZRU3hGTEVWQlFVazdRVUZEV0N4aFFVRlBMRXRCUVV0TkxHZENRVUZNTEdGQlFXZERMRXRCUVV0UUxFbEJRWEpETEZsQlFXdEVMRWxCUVd4RUxFVkJRWGRFUXl4RlFVRjRSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dG5RMEZOV1VFc1JTeEZRVUZKTzBGQlEySXNZVUZCVHl4TFFVRkxUeXhuUWtGQlRDeGhRVUZuUXl4TFFVRkxVaXhKUVVGeVF5eGxRVUZ4UkN4SlFVRnlSQ3hGUVVFeVJFTXNSVUZCTTBRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzJkRFFVOVpVU3hSTEVWQlFWVlNMRVVzUlVGQlNUdEJRVU4yUWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0R0xFbEJRWEJETEZOQlFUUkRVeXhSUVVFMVF5eEZRVUYzUkN4SlFVRjRSQ3hGUVVFNFJGSXNSVUZCT1VRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3YVVOQlRXRkJMRVVzUlVGQlNUdEJRVU5rTEdGQlFVOHNTMEZCUzA4c1owSkJRVXdzWVVGQlowTXNTMEZCUzFJc1NVRkJja01zWjBKQlFYTkVMRWxCUVhSRUxFVkJRVFJFUXl4RlFVRTFSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdLMEpCVDFkVExFOHNSVUZCVTFRc1JTeEZRVUZKTzBGQlEzSkNMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMFlzU1VGQmNFTXNhMEpCUVhGRVZTeFBRVUZ5UkN4RlFVRm5SU3hKUVVGb1JTeEZRVUZ6UlZRc1JVRkJkRVVzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPMnREUVU5alV5eFBMRVZCUVZOVUxFVXNSVUZCU1R0QlFVTjRRaXhoUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TlFVRmtMR05CUVdkRExFdEJRVXRHTEVsQlFYSkRMR2RDUVVGelJDeEZRVUZEVnl4TlFVRk5SQ3hQUVVGUUxFVkJRWFJFTEVWQlFYVkZWQ3hGUVVGMlJTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN08yZERRVkZaVXl4UExFVkJRVk5ETEVrc1JVRkJUVllzUlN4RlFVRkpPMEZCUXpWQ0xHRkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRTlCUVdRc1kwRkJhVU1zUzBGQlMwWXNTVUZCZEVNc2EwSkJRWFZFVlN4UFFVRjJSQ3hGUVVGclJTeEZRVUZEUXl4TlFVRk5RU3hKUVVGUUxFVkJRV3hGTEVWQlFXZEdWaXhGUVVGb1JpeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN2EwTkJUMk5UTEU4c1JVRkJVMVFzUlN4RlFVRkpPMEZCUTNoQ0xHRkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRkZCUVdRc1kwRkJhME1zUzBGQlMwWXNTVUZCZGtNc2EwSkJRWGRFVlN4UFFVRjRSQ3hGUVVGdFJTeEpRVUZ1UlN4RlFVRjVSVlFzUlVGQmVrVXNRMEZCVUR0QlFVTkdPenM3TzBWQk5VdGxWeXh4UWpzN1FVRXJTMjVDUXl4UFFVRlBReXhQUVVGUUxFZEJRV2xDYkVJc1NVRkJha0lpTENKbWFXeGxJam9pUjJsemRDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUUdacGJHVmNiaUFxSUVCamIzQjVjbWxuYUhRZ0lESXdNVE1nVFdsamFHRmxiQ0JCZFdaeVpXbDBaWElnS0VSbGRtVnNiM0J0Wlc1MElGTmxaV1FwSUdGdVpDQXlNREUySUZsaGFHOXZJRWx1WXk1Y2JpQXFJRUJzYVdObGJuTmxJQ0FnSUV4cFkyVnVjMlZrSUhWdVpHVnlJSHRBYkdsdWF5Qm9kSFJ3Y3pvdkwzTndaSGd1YjNKbkwyeHBZMlZ1YzJWekwwSlRSQzB6TFVOc1lYVnpaUzFEYkdWaGNpNW9kRzFzSUVKVFJDMHpMVU5zWVhWelpTMURiR1ZoY24wdVhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNCSGFYUm9kV0l1YW5NZ2FYTWdabkpsWld4NUlHUnBjM1J5YVdKMWRHRmliR1V1WEc0Z0tpOWNibHh1YVcxd2IzSjBJRkpsY1hWbGMzUmhZbXhsSUdaeWIyMGdKeTR2VW1WeGRXVnpkR0ZpYkdVbk8xeHVYRzR2S2lwY2JpQXFJRUVnUjJsemRDQmpZVzRnY21WMGNtbGxkbVVnWVc1a0lHMXZaR2xtZVNCbmFYTjBjeTVjYmlBcUwxeHVZMnhoYzNNZ1IybHpkQ0JsZUhSbGJtUnpJRkpsY1hWbGMzUmhZbXhsSUh0Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTNKbFlYUmxJR0VnUjJsemRDNWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ1oybHpkQ0FvYm05MElISmxjWFZwY21Wa0lIZG9aVzRnWTNKbFlYUnBibWNnWVNCbmFYTjBLVnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVoZFhSb2ZTQmJZWFYwYUYwZ0xTQnBibVp2Y20xaGRHbHZiaUJ5WlhGMWFYSmxaQ0IwYnlCaGRYUm9aVzUwYVdOaGRHVWdkRzhnUjJsMGFIVmlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyRndhVUpoYzJVOWFIUjBjSE02THk5aGNHa3VaMmwwYUhWaUxtTnZiVjBnTFNCMGFHVWdZbUZ6WlNCSGFYUm9kV0lnUVZCSklGVlNURnh1SUNBZ0lDb3ZYRzRnSUNCamIyNXpkSEoxWTNSdmNpaHBaQ3dnWVhWMGFDd2dZWEJwUW1GelpTa2dlMXh1SUNBZ0lDQWdjM1Z3WlhJb1lYVjBhQ3dnWVhCcFFtRnpaU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZhV1FnUFNCcFpEdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCR1pYUmphQ0JoSUdkcGMzUXVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmx6ZEhNdkkyZGxkQzFoTFhOcGJtZHNaUzFuYVhOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCbmFYTjBYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCUWNtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJSEpsWVdRb1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDJkcGMzUnpMeVI3ZEdocGN5NWZYMmxrZldBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGNtVmhkR1VnWVNCdVpYY2daMmx6ZEM1Y2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5bmFYTjBjeThqWTNKbFlYUmxMV0V0WjJsemRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdkcGMzUWdMU0IwYUdVZ1pHRjBZU0JtYjNJZ2RHaGxJRzVsZHlCbmFYTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnVaWGNnWjJsemRDQjFjRzl1SUdOeVpXRjBhVzl1WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQlFjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaU2huYVhOMExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlBVMVFuTENBbkwyZHBjM1J6Snl3Z1oybHpkQ3dnWTJJcFhHNGdJQ0FnSUNBZ0lDQXVkR2hsYmlnb2NtVnpjRzl1YzJVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDE5cFpDQTlJSEpsYzNCdmJuTmxMbVJoZEdFdWFXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemNHOXVjMlU3WEc0Z0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRVpXeGxkR1VnWVNCbmFYTjBMbHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmRwYzNSekx5TmtaV3hsZEdVdFlTMW5hWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUnlkV1VnYVdZZ2RHaGxJSEpsY1hWbGMzUWdjM1ZqWTJWbFpITmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUZCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaR1ZzWlhSbEtHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblJFVk1SVlJGSnl3Z1lDOW5hWE4wY3k4a2UzUm9hWE11WDE5cFpIMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSbTl5YXlCaElHZHBjM1F1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsemRITXZJMlp2Y21zdFlTMW5hWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZEdobElHWjFibU4wYVc5dUlIUm9ZWFFnZDJsc2JDQnlaV05sYVhabElIUm9aU0JuYVhOMFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0JRY205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHWnZjbXNvWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRVDFOVUp5d2dZQzluYVhOMGN5OGtlM1JvYVhNdVgxOXBaSDB2Wm05eWEzTmdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dWWEJrWVhSbElHRWdaMmx6ZEM1Y2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5bmFYTjBjeThqWldScGRDMWhMV2RwYzNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JuYVhOMElDMGdkR2hsSUc1bGR5QmtZWFJoSUdadmNpQjBhR1VnWjJsemRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIUm9aU0JtZFc1amRHbHZiaUIwYUdGMElISmxZMlZwZG1WeklIUm9aU0JCVUVrZ2NtVnpkV3gwWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQlFjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUhWd1pHRjBaU2huYVhOMExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQkJWRU5JSnl3Z1lDOW5hWE4wY3k4a2UzUm9hWE11WDE5cFpIMWdMQ0JuYVhOMExDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dVM1JoY2lCaElHZHBjM1F1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsemRITXZJM04wWVhJdFlTMW5hWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUnlkV1VnYVdZZ2RHaGxJSEpsY1hWbGMzUWdhWE1nYzNWalkyVnpjMloxYkZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdVSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCemRHRnlLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRlZVSnl3Z1lDOW5hWE4wY3k4a2UzUm9hWE11WDE5cFpIMHZjM1JoY21Bc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCVmJuTjBZWElnWVNCbmFYTjBMbHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmRwYzNSekx5TjFibk4wWVhJdFlTMW5hWE4wWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUnlkV1VnYVdZZ2RHaGxJSEpsY1hWbGMzUWdhWE1nYzNWalkyVnpjMloxYkZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdVSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCMWJuTjBZWElvWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RFUlV4RlZFVW5MQ0JnTDJkcGMzUnpMeVI3ZEdocGN5NWZYMmxrZlM5emRHRnlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU5vWldOcklHbG1JR0VnWjJsemRDQnBjeUJ6ZEdGeWNtVmtJR0o1SUhSb1pTQjFjMlZ5TGx4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJkcGMzUnpMeU5qYUdWamF5MXBaaTFoTFdkcGMzUXRhWE10YzNSaGNuSmxaRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGNuVmxJR2xtSUhSb1pTQm5hWE4wSUdseklITjBZWEp5WldRZ1lXNWtJR1poYkhObElHbG1JSFJvWlNCbmFYTjBJR2x6SUc1dmRDQnpkR0Z5Y21Wa1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0JRY205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHbHpVM1JoY25KbFpDaGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNReU1EUnZjalF3TkNoZ0wyZHBjM1J6THlSN2RHaHBjeTVmWDJsa2ZTOXpkR0Z5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUdkcGMzUW5jeUJqYjIxdGFYUnpYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmx6ZEhNdkkyeHBjM1F0WjJsemRDMWpiMjF0YVhSelhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCaGNuSmhlU0J2WmlCamIyMXRhWFJ6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQlFjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUkRiMjF0YVhSektHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZEVGc2JGQmhaMlZ6S0dBdloybHpkSE12Skh0MGFHbHpMbDlmYVdSOUwyTnZiVzFwZEhOZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1JtVjBZMmdnYjI1bElHOW1JSFJvWlNCbmFYTjBKM01nY21WMmFYTnBiMjR1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsemRITXZJMmRsZEMxaExYTndaV05wWm1sakxYSmxkbWx6YVc5dUxXOW1MV0V0WjJsemRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhKbGRtbHphVzl1SUMwZ2RHaGxJR2xrSUc5bUlIUm9aU0J5WlhacGMybHZibHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdjbVYyYVhOcGIyNWNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUZCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwVW1WMmFYTnBiMjRvY21WMmFYTnBiMjRzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzluYVhOMGN5OGtlM1JvYVhNdVgxOXBaSDB2Skh0eVpYWnBjMmx2Ym4xZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RHbHpkQ0IwYUdVZ1oybHpkQ2R6SUdOdmJXMWxiblJ6WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsemRITXZZMjl0YldWdWRITXZJMnhwYzNRdFkyOXRiV1Z1ZEhNdGIyNHRZUzFuYVhOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCaGNuSmhlU0J2WmlCamIyMXRaVzUwYzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCc2FYTjBRMjl0YldWdWRITW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMFFXeHNVR0ZuWlhNb1lDOW5hWE4wY3k4a2UzUm9hWE11WDE5cFpIMHZZMjl0YldWdWRITmdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSbVYwWTJnZ2IyNWxJRzltSUhSb1pTQm5hWE4wSjNNZ1kyOXRiV1Z1ZEhOY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5bmFYTjBjeTlqYjIxdFpXNTBjeThqWjJWMExXRXRjMmx1WjJ4bExXTnZiVzFsYm5SY2JpQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JqYjIxdFpXNTBJQzBnZEdobElHbGtJRzltSUhSb1pTQmpiMjF0Wlc1MFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCamIyMXRaVzUwWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQlFjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRFTnZiVzFsYm5Rb1kyOXRiV1Z1ZEN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDJkcGMzUnpMeVI3ZEdocGN5NWZYMmxrZlM5amIyMXRaVzUwY3k4a2UyTnZiVzFsYm5SOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnZiVzFsYm5RZ2IyNGdZU0JuYVhOMFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybHpkSE12WTI5dGJXVnVkSE12STJOeVpXRjBaUzFoTFdOdmJXMWxiblJjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmpiMjF0Wlc1MElDMGdkR2hsSUdOdmJXMWxiblFnZEc4Z1lXUmtYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkR2hsSUdaMWJtTjBhVzl1SUhSb1lYUWdjbVZqWldsMlpYTWdkR2hsSUVGUVNTQnlaWE4xYkhSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJRkJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1kzSmxZWFJsUTI5dGJXVnVkQ2hqYjIxdFpXNTBMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQmdMMmRwYzNSekx5UjdkR2hwY3k1ZlgybGtmUzlqYjIxdFpXNTBjMkFzSUh0aWIyUjVPaUJqYjIxdFpXNTBmU3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVWa2FYUWdZU0JqYjIxdFpXNTBJRzl1SUhSb1pTQm5hWE4wWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsemRITXZZMjl0YldWdWRITXZJMlZrYVhRdFlTMWpiMjF0Wlc1MFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWTI5dGJXVnVkQ0F0SUhSb1pTQnBaQ0J2WmlCMGFHVWdZMjl0YldWdWRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdKdlpIa2dMU0IwYUdVZ2JtVjNJR052YlcxbGJuUmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHMXZaR2xtYVdWa0lHTnZiVzFsYm5SY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1pXUnBkRU52YlcxbGJuUW9ZMjl0YldWdWRDd2dZbTlrZVN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVFWUkRTQ2NzSUdBdloybHpkSE12Skh0MGFHbHpMbDlmYVdSOUwyTnZiVzFsYm5Sekx5UjdZMjl0YldWdWRIMWdMQ0I3WW05a2VUb2dZbTlrZVgwc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkVaV3hsZEdVZ1lTQmpiMjF0Wlc1MElHOXVJSFJvWlNCbmFYTjBMbHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmRwYzNSekwyTnZiVzFsYm5Sekx5TmtaV3hsZEdVdFlTMWpiMjF0Wlc1MFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWTI5dGJXVnVkQ0F0SUhSb1pTQnBaQ0J2WmlCMGFHVWdZMjl0YldWdWRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwY25WbElHbG1JSFJvWlNCeVpYRjFaWE4wSUhOMVkyTmxaV1J6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQlFjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdSbGJHVjBaVU52YlcxbGJuUW9ZMjl0YldWdWRDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEVSVXhGVkVVbkxDQmdMMmRwYzNSekx5UjdkR2hwY3k1ZlgybGtmUzlqYjIxdFpXNTBjeThrZTJOdmJXMWxiblI5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRWRwYzNRN1hHNGlYWDA9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HaXN0LmpzLm1hcFxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXMgbG9nIHRpbWVzdGFtcC5cbiAqL1xuXG52YXIgcHJldlRpbWU7XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBjb3B5cmlnaHQgIDIwMTMgTWljaGFlbCBBdWZyZWl0ZXIgKERldmVsb3BtZW50IFNlZWQpIGFuZCAyMDE2IFlhaG9vIEluYy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBsaWNlbnNlICAgIExpY2Vuc2VkIHVuZGVyIHtAbGluayBodHRwczovL3NwZHgub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZS1DbGVhci5odG1sIEJTRC0zLUNsYXVzZS1DbGVhcn0uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICBHaXRodWIuanMgaXMgZnJlZWx5IGRpc3RyaWJ1dGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxudmFyIGxvZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKCdnaXRodWI6dXNlcicpO1xuXG4vKipcbiAqIEEgVXNlciBhbGxvd3Mgc2NvcGluZyBvZiBBUEkgcmVxdWVzdHMgdG8gYSBwYXJ0aWN1bGFyIEdpdGh1YiB1c2VyLlxuICovXG5cbnZhciBVc2VyID0gZnVuY3Rpb24gKF9SZXF1ZXN0YWJsZSkge1xuICAgX2luaGVyaXRzKFVzZXIsIF9SZXF1ZXN0YWJsZSk7XG5cbiAgIC8qKlxuICAgICogQ3JlYXRlIGEgVXNlci5cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcm5hbWVdIC0gdGhlIHVzZXIgdG8gdXNlIGZvciB1c2VyLXNjb3BlZCBxdWVyaWVzXG4gICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmF1dGh9IFthdXRoXSAtIGluZm9ybWF0aW9uIHJlcXVpcmVkIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWJcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAgKi9cbiAgIGZ1bmN0aW9uIFVzZXIodXNlcm5hbWUsIGF1dGgsIGFwaUJhc2UpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFVzZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihVc2VyKSkuY2FsbCh0aGlzLCBhdXRoLCBhcGlCYXNlKSk7XG5cbiAgICAgIF90aGlzLl9fdXNlciA9IHVzZXJuYW1lO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgfVxuXG4gICAvKipcbiAgICAqIEdldCB0aGUgdXJsIGZvciB0aGUgcmVxdWVzdC4gKGRlcGVuZGVudCBvbiBpZiB3ZSdyZSByZXF1ZXN0aW5nIGZvciB0aGUgYXV0aGVudGljYXRlZCB1c2VyIG9yIG5vdClcbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gZW5kcG9pbnQgLSB0aGUgZW5kcG9pbnQgYmVpbmcgcmVxdWVzdGVkXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gdGhlIHJlc29sdmVkIGVuZHBvaW50XG4gICAgKi9cblxuXG4gICBfY3JlYXRlQ2xhc3MoVXNlciwgW3tcbiAgICAgIGtleTogJ19fZ2V0U2NvcGVkVXJsJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfX2dldFNjb3BlZFVybChlbmRwb2ludCkge1xuICAgICAgICAgaWYgKHRoaXMuX191c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5kcG9pbnQgPyAnL3VzZXJzLycgKyB0aGlzLl9fdXNlciArICcvJyArIGVuZHBvaW50IDogJy91c2Vycy8nICsgdGhpcy5fX3VzZXI7XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgc3dpdGNoIChlbmRwb2ludCkge1xuICAgICAgICAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiAnL3VzZXInO1xuXG4gICAgICAgICAgICAgICBjYXNlICdub3RpZmljYXRpb25zJzpcbiAgICAgICAgICAgICAgIGNhc2UgJ2dpc3RzJzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiAnLycgKyBlbmRwb2ludDtcblxuICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiAnL3VzZXIvJyArIGVuZHBvaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIHVzZXIncyByZXBvc2l0b3JpZXNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jbGlzdC11c2VyLXJlcG9zaXRvcmllc1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIGFueSBvcHRpb25zIHRvIHJlZmluZSB0aGUgc2VhcmNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHJlcG9zaXRvcmllc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RSZXBvcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdFJlcG9zKG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgIH1cblxuICAgICAgICAgb3B0aW9ucyA9IHRoaXMuX2dldE9wdGlvbnNXaXRoRGVmYXVsdHMob3B0aW9ucyk7XG5cbiAgICAgICAgIGxvZygnRmV0Y2hpbmcgcmVwb3NpdG9yaWVzIHdpdGggb3B0aW9uczogJyArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpKTtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXModGhpcy5fX2dldFNjb3BlZFVybCgncmVwb3MnKSwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIG9yZ3MgdGhhdCB0aGUgdXNlciBiZWxvbmdzIHRvXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy8jbGlzdC11c2VyLW9yZ2FuaXphdGlvbnNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2Ygb3JnYW5pemF0aW9uc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RPcmdzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0T3JncyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsIHRoaXMuX19nZXRTY29wZWRVcmwoJ29yZ3MnKSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgZm9sbG93ZXJzIG9mIGEgdXNlclxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3VzZXJzL2ZvbGxvd2Vycy8jbGlzdC1mb2xsb3dlcnMtb2YtYS11c2VyXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGZvbGxvd2Vyc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RGb2xsb3dlcnMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RGb2xsb3dlcnMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCB0aGlzLl9fZ2V0U2NvcGVkVXJsKCdmb2xsb3dlcnMnKSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdXNlcnMgZm9sbG93ZWQgYnkgYW5vdGhlciB1c2VyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvdXNlcnMvZm9sbG93ZXJzLyNsaXN0LXVzZXJzLWZvbGxvd2VkLWJ5LWFub3RoZXItdXNlclxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiB3aG8gYSB1c2VyIGlzIGZvbGxvd2luZ1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RGb2xsb3dpbmcnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RGb2xsb3dpbmcoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCB0aGlzLl9fZ2V0U2NvcGVkVXJsKCdmb2xsb3dpbmcnKSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIHVzZXIncyBnaXN0c1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpc3RzLyNsaXN0LWEtdXNlcnMtZ2lzdHNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgZ2lzdHNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0R2lzdHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RHaXN0cyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsIHRoaXMuX19nZXRTY29wZWRVcmwoJ2dpc3RzJyksIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSB1c2VyJ3Mgbm90aWZpY2F0aW9uc1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2FjdGl2aXR5L25vdGlmaWNhdGlvbnMvI2xpc3QteW91ci1ub3RpZmljYXRpb25zXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gYW55IG9wdGlvbnMgdG8gcmVmaW5lIHRoZSBzZWFyY2hcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgcmVwb3NpdG9yaWVzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdE5vdGlmaWNhdGlvbnMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3ROb3RpZmljYXRpb25zKG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2IgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgfVxuXG4gICAgICAgICBvcHRpb25zLnNpbmNlID0gdGhpcy5fZGF0ZVRvSVNPKG9wdGlvbnMuc2luY2UpO1xuICAgICAgICAgb3B0aW9ucy5iZWZvcmUgPSB0aGlzLl9kYXRlVG9JU08ob3B0aW9ucy5iZWZvcmUpO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgdGhpcy5fX2dldFNjb3BlZFVybCgnbm90aWZpY2F0aW9ucycpLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2hvdyB0aGUgdXNlcidzIHByb2ZpbGVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My91c2Vycy8jZ2V0LWEtc2luZ2xlLXVzZXJcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHVzZXIncyBpbmZvcm1hdGlvblxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldFByb2ZpbGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb2ZpbGUoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCB0aGlzLl9fZ2V0U2NvcGVkVXJsKCcnKSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldHMgdGhlIGxpc3Qgb2Ygc3RhcnJlZCByZXBvc2l0b3JpZXMgZm9yIHRoZSB1c2VyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvYWN0aXZpdHkvc3RhcnJpbmcvI2xpc3QtcmVwb3NpdG9yaWVzLWJlaW5nLXN0YXJyZWRcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2Ygc3RhcnJlZCByZXBvc2l0b3JpZXNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0U3RhcnJlZFJlcG9zJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0U3RhcnJlZFJlcG9zKGNiKSB7XG4gICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRPcHRpb25zV2l0aERlZmF1bHRzKCk7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKHRoaXMuX19nZXRTY29wZWRVcmwoJ3N0YXJyZWQnKSwgcmVxdWVzdE9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHRoZSBsaXN0IG9mIHN0YXJyZWQgZ2lzdHMgZm9yIHRoZSB1c2VyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2lzdHMvI2xpc3Qtc3RhcnJlZC1naXN0c1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIGFueSBvcHRpb25zIHRvIHJlZmluZSB0aGUgc2VhcmNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGdpc3RzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFN0YXJyZWRHaXN0cycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdFN0YXJyZWRHaXN0cyhvcHRpb25zLCBjYikge1xuICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgIH1cbiAgICAgICAgIG9wdGlvbnMuc2luY2UgPSB0aGlzLl9kYXRlVG9JU08ob3B0aW9ucy5zaW5jZSk7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9naXN0cy9zdGFycmVkJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgZW1haWwgYWRkcmVzc2VzIGZvciBhIHVzZXJcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My91c2Vycy9lbWFpbHMvI2xpc3QtZW1haWwtYWRkcmVzc2VzLWZvci1hLXVzZXJcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgZW1haWxzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0RW1haWxzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbWFpbHMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3VzZXIvZW1haWxzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhdmUgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlciBmb2xsb3cgdGhpcyB1c2VyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvdXNlcnMvZm9sbG93ZXJzLyNmb2xsb3ctYS11c2VyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgLSB0aGUgdXNlciB0byBmb2xsb3dcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2ZvbGxvdycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9sbG93KHVzZXJuYW1lLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BVVCcsICcvdXNlci9mb2xsb3dpbmcvJyArIHVzZXJuYW1lLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSGF2ZSB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciB1bmZvbGxvdyB0aGlzIHVzZXJcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My91c2Vycy9mb2xsb3dlcnMvI2ZvbGxvdy1hLXVzZXJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSAtIHRoZSB1c2VyIHRvIHVuZm9sbG93XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gcmVjZWl2ZXMgdHJ1ZSBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3VuZm9sbG93JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bmZvbGxvdyh1c2VybmFtZSwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3VzZXIvZm9sbG93aW5nLycgKyB1c2VybmFtZSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyByZXBvc2l0b3J5IGZvciB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlclxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNjcmVhdGVcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gdGhlIHJlcG9zaXRvcnkgZGVmaW5pdGlvblxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgQVBJIHJlc3BvbnNlXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlUmVwbycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVwbyhvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3VzZXIvcmVwb3MnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG4gICB9XSk7XG5cbiAgIHJldHVybiBVc2VyO1xufShfUmVxdWVzdGFibGUzLmRlZmF1bHQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFZ6WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpYkc5bklpd2lWWE5sY2lJc0luVnpaWEp1WVcxbElpd2lZWFYwYUNJc0ltRndhVUpoYzJVaUxDSmZYM1Z6WlhJaUxDSmxibVJ3YjJsdWRDSXNJbTl3ZEdsdmJuTWlMQ0pqWWlJc0lsOW5aWFJQY0hScGIyNXpWMmwwYUVSbFptRjFiSFJ6SWl3aVNsTlBUaUlzSW5OMGNtbHVaMmxtZVNJc0lsOXlaWEYxWlhOMFFXeHNVR0ZuWlhNaUxDSmZYMmRsZEZOamIzQmxaRlZ5YkNJc0lsOXlaWEYxWlhOMElpd2ljMmx1WTJVaUxDSmZaR0YwWlZSdlNWTlBJaXdpWW1WbWIzSmxJaXdpY21WeGRXVnpkRTl3ZEdsdmJuTWlMQ0pTWlhGMVpYTjBZV0pzWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN1FVRlBRVHM3T3p0QlFVTkJPenM3T3pzN096czdPeXRsUVZKQk96czdPenM3TzBGQlUwRXNTVUZCVFVFc1RVRkJUU3h4UWtGQlRTeGhRVUZPTEVOQlFWbzdPMEZCUlVFN096czdTVUZIVFVNc1NUczdPMEZCUTBnN096czdPenRCUVUxQkxHbENRVUZaUXl4UlFVRmFMRVZCUVhOQ1F5eEpRVUYwUWl4RlFVRTBRa01zVDBGQk5VSXNSVUZCY1VNN1FVRkJRVHM3UVVGQlFTdzRSMEZETlVKRUxFbEJSRFJDTEVWQlEzUkNReXhQUVVSelFqczdRVUZGYkVNc1dVRkJTME1zVFVGQlRDeEhRVUZqU0N4UlFVRmtPMEZCUm10RE8wRkJSM0JET3p0QlFVVkVPenM3T3pzN096czdPM0ZEUVUxbFNTeFJMRVZCUVZVN1FVRkRkRUlzWVVGQlNTeExRVUZMUkN4TlFVRlVMRVZCUVdsQ08wRkJRMlFzYlVKQlFVOURMSFZDUVVOTkxFdEJRVXRFTEUxQlJGZ3NVMEZEY1VKRExGRkJSSEpDTEdWQlJVMHNTMEZCUzBRc1RVRkdiRUk3UVVGTFJpeFZRVTVFTEUxQlRVODdRVUZCUlR0QlFVTk9MRzlDUVVGUlF5eFJRVUZTTzBGQlEwY3NiMEpCUVVzc1JVRkJURHRCUVVOSExIbENRVUZQTEU5QlFWQTdPMEZCUlVnc2IwSkJRVXNzWlVGQlREdEJRVU5CTEc5Q1FVRkxMRTlCUVV3N1FVRkRSeXdyUWtGQlYwRXNVVUZCV0RzN1FVRkZTRHRCUVVOSExHOURRVUZuUWtFc1VVRkJhRUk3UVVGVVRqdEJRVmRHTzBGQlEwZzdPMEZCUlVRN096czdPenM3T3pzN1owTkJUMVZETEU4c1JVRkJVME1zUlN4RlFVRkpPMEZCUTNCQ0xHRkJRVWtzVDBGQlQwUXNUMEZCVUN4TFFVRnRRaXhWUVVGMlFpeEZRVUZ0UXp0QlFVTm9RME1zYVVKQlFVdEVMRTlCUVV3N1FVRkRRVUVzYzBKQlFWVXNSVUZCVmp0QlFVTkdPenRCUVVWRVFTeHRRa0ZCVlN4TFFVRkxSU3gxUWtGQlRDeERRVUUyUWtZc1QwRkJOMElzUTBGQlZqczdRVUZGUVZBc2MwUkJRVEpEVlN4TFFVRkxReXhUUVVGTUxFTkJRV1ZLTEU5QlFXWXNRMEZCTTBNN1FVRkRRU3huUWtGQlR5eExRVUZMU3l4blFrRkJUQ3hEUVVGelFpeExRVUZMUXl4alFVRk1MRU5CUVc5Q0xFOUJRWEJDTEVOQlFYUkNMRVZCUVc5RVRpeFBRVUZ3UkN4RlFVRTJSRU1zUlVGQk4wUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN0swSkJUVk5CTEVVc1JVRkJTVHRCUVVOV0xHZENRVUZQTEV0QlFVdE5MRkZCUVV3c1EwRkJZeXhMUVVGa0xFVkJRWEZDTEV0QlFVdEVMR05CUVV3c1EwRkJiMElzVFVGQmNFSXNRMEZCY2tJc1JVRkJhMFFzU1VGQmJFUXNSVUZCZDBSTUxFVkJRWGhFTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPMjlEUVUxalFTeEZMRVZCUVVrN1FVRkRaaXhuUWtGQlR5eExRVUZMVFN4UlFVRk1MRU5CUVdNc1MwRkJaQ3hGUVVGeFFpeExRVUZMUkN4alFVRk1MRU5CUVc5Q0xGZEJRWEJDTEVOQlFYSkNMRVZCUVhWRUxFbEJRWFpFTEVWQlFUWkVUQ3hGUVVFM1JDeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3p0dlEwRk5ZMEVzUlN4RlFVRkpPMEZCUTJZc1owSkJRVThzUzBGQlMwMHNVVUZCVEN4RFFVRmpMRXRCUVdRc1JVRkJjVUlzUzBGQlMwUXNZMEZCVEN4RFFVRnZRaXhYUVVGd1FpeERRVUZ5UWl4RlFVRjFSQ3hKUVVGMlJDeEZRVUUyUkV3c1JVRkJOMFFzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdaME5CVFZWQkxFVXNSVUZCU1R0QlFVTllMR2RDUVVGUExFdEJRVXROTEZGQlFVd3NRMEZCWXl4TFFVRmtMRVZCUVhGQ0xFdEJRVXRFTEdOQlFVd3NRMEZCYjBJc1QwRkJjRUlzUTBGQmNrSXNSVUZCYlVRc1NVRkJia1FzUlVGQmVVUk1MRVZCUVhwRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0M1EwRlBhMEpFTEU4c1JVRkJVME1zUlN4RlFVRkpPMEZCUXpWQ1JDeHRRa0ZCVlVFc1YwRkJWeXhGUVVGeVFqdEJRVU5CTEdGQlFVa3NUMEZCVDBFc1QwRkJVQ3hMUVVGdFFpeFZRVUYyUWl4RlFVRnRRenRCUVVOb1EwTXNhVUpCUVV0RUxFOUJRVXc3UVVGRFFVRXNjMEpCUVZVc1JVRkJWanRCUVVOR096dEJRVVZFUVN4cFFrRkJVVkVzUzBGQlVpeEhRVUZuUWl4TFFVRkxReXhWUVVGTUxFTkJRV2RDVkN4UlFVRlJVU3hMUVVGNFFpeERRVUZvUWp0QlFVTkJVaXhwUWtGQlVWVXNUVUZCVWl4SFFVRnBRaXhMUVVGTFJDeFZRVUZNTEVOQlFXZENWQ3hSUVVGUlZTeE5RVUY0UWl4RFFVRnFRanM3UVVGRlFTeG5Ra0ZCVHl4TFFVRkxTQ3hSUVVGTUxFTkJRV01zUzBGQlpDeEZRVUZ4UWl4TFFVRkxSQ3hqUVVGTUxFTkJRVzlDTEdWQlFYQkNMRU5CUVhKQ0xFVkJRVEpFVGl4UFFVRXpSQ3hGUVVGdlJVTXNSVUZCY0VVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3YVVOQlRWZEJMRVVzUlVGQlNUdEJRVU5hTEdkQ1FVRlBMRXRCUVV0TkxGRkJRVXdzUTBGQll5eExRVUZrTEVWQlFYRkNMRXRCUVV0RUxHTkJRVXdzUTBGQmIwSXNSVUZCY0VJc1EwRkJja0lzUlVGQk9FTXNTVUZCT1VNc1JVRkJiMFJNTEVWQlFYQkVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN08zVkRRVTFwUWtFc1JTeEZRVUZKTzBGQlEyeENMR0ZCUVVsVkxHbENRVUZwUWl4TFFVRkxWQ3gxUWtGQlRDeEZRVUZ5UWp0QlFVTkJMR2RDUVVGUExFdEJRVXRITEdkQ1FVRk1MRU5CUVhOQ0xFdEJRVXRETEdOQlFVd3NRMEZCYjBJc1UwRkJjRUlzUTBGQmRFSXNSVUZCYzBSTExHTkJRWFJFTEVWQlFYTkZWaXhGUVVGMFJTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN2RVTkJUMmxDUkN4UExFVkJRVk5ETEVVc1JVRkJTVHRCUVVNelFrUXNiVUpCUVZWQkxGZEJRVmNzUlVGQmNrSTdRVUZEUVN4aFFVRkpMRTlCUVU5QkxFOUJRVkFzUzBGQmJVSXNWVUZCZGtJc1JVRkJiVU03UVVGRGFFTkRMR2xDUVVGTFJDeFBRVUZNTzBGQlEwRkJMSE5DUVVGVkxFVkJRVlk3UVVGRFJqdEJRVU5FUVN4cFFrRkJVVkVzUzBGQlVpeEhRVUZuUWl4TFFVRkxReXhWUVVGTUxFTkJRV2RDVkN4UlFVRlJVU3hMUVVGNFFpeERRVUZvUWp0QlFVTkJMR2RDUVVGUExFdEJRVXRFTEZGQlFVd3NRMEZCWXl4TFFVRmtMRVZCUVhGQ0xHZENRVUZ5UWl4RlFVRjFRMUFzVDBGQmRrTXNSVUZCWjBSRExFVkJRV2hFTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPMmREUVUxVlFTeEZMRVZCUVVrN1FVRkRXQ3huUWtGQlR5eExRVUZMVFN4UlFVRk1MRU5CUVdNc1MwRkJaQ3hGUVVGeFFpeGpRVUZ5UWl4RlFVRnhReXhKUVVGeVF5eEZRVUV5UTA0c1JVRkJNME1zUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPelpDUVU5UFRpeFJMRVZCUVZWTkxFVXNSVUZCU1R0QlFVTnNRaXhuUWtGQlR5eExRVUZMVFN4UlFVRk1MRU5CUVdNc1MwRkJaQ3gxUWtGQmQwTmFMRkZCUVhoRExFVkJRVzlFTEVsQlFYQkVMRVZCUVRCRVRTeEZRVUV4UkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3SzBKQlQxTk9MRkVzUlVGQlZVMHNSU3hGUVVGSk8wRkJRM0JDTEdkQ1FVRlBMRXRCUVV0TkxGRkJRVXdzUTBGQll5eFJRVUZrTEhWQ1FVRXlRMW9zVVVGQk0wTXNSVUZCZFVRc1NVRkJka1FzUlVGQk5rUk5MRVZCUVRkRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0cFEwRlBWMFFzVHl4RlFVRlRReXhGTEVWQlFVazdRVUZEY2tJc1owSkJRVThzUzBGQlMwMHNVVUZCVEN4RFFVRmpMRTFCUVdRc1JVRkJjMElzWVVGQmRFSXNSVUZCY1VOUUxFOUJRWEpETEVWQlFUaERReXhGUVVFNVF5eERRVUZRTzBGQlEwWTdPenM3UlVGMFRXVlhMSEZDT3p0QlFYbE5ia0pETEU5QlFVOURMRTlCUVZBc1IwRkJhVUp3UWl4SlFVRnFRaUlzSW1acGJHVWlPaUpWYzJWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJBWm1sc1pWeHVJQ29nUUdOdmNIbHlhV2RvZENBZ01qQXhNeUJOYVdOb1lXVnNJRUYxWm5KbGFYUmxjaUFvUkdWMlpXeHZjRzFsYm5RZ1UyVmxaQ2tnWVc1a0lESXdNVFlnV1dGb2IyOGdTVzVqTGx4dUlDb2dRR3hwWTJWdWMyVWdJQ0FnVEdsalpXNXpaV1FnZFc1a1pYSWdlMEJzYVc1cklHaDBkSEJ6T2k4dmMzQmtlQzV2Y21jdmJHbGpaVzV6WlhNdlFsTkVMVE10UTJ4aGRYTmxMVU5zWldGeUxtaDBiV3dnUWxORUxUTXRRMnhoZFhObExVTnNaV0Z5ZlM1Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUVkcGRHaDFZaTVxY3lCcGN5Qm1jbVZsYkhrZ1pHbHpkSEpwWW5WMFlXSnNaUzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdVbVZ4ZFdWemRHRmliR1VnWm5KdmJTQW5MaTlTWlhGMVpYTjBZV0pzWlNjN1hHNXBiWEJ2Y25RZ1pHVmlkV2NnWm5KdmJTQW5aR1ZpZFdjbk8xeHVZMjl1YzNRZ2JHOW5JRDBnWkdWaWRXY29KMmRwZEdoMVlqcDFjMlZ5SnlrN1hHNWNiaThxS2x4dUlDb2dRU0JWYzJWeUlHRnNiRzkzY3lCelkyOXdhVzVuSUc5bUlFRlFTU0J5WlhGMVpYTjBjeUIwYnlCaElIQmhjblJwWTNWc1lYSWdSMmwwYUhWaUlIVnpaWEl1WEc0Z0tpOWNibU5zWVhOeklGVnpaWElnWlhoMFpXNWtjeUJTWlhGMVpYTjBZV0pzWlNCN1hHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUZWelpYSXVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1czVnpaWEp1WVcxbFhTQXRJSFJvWlNCMWMyVnlJSFJ2SUhWelpTQm1iM0lnZFhObGNpMXpZMjl3WldRZ2NYVmxjbWxsYzF4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1aGRYUm9mU0JiWVhWMGFGMGdMU0JwYm1admNtMWhkR2x2YmlCeVpYRjFhWEpsWkNCMGJ5QmhkWFJvWlc1MGFXTmhkR1VnZEc4Z1IybDBhSFZpWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMkZ3YVVKaGMyVTlhSFIwY0hNNkx5OWhjR2t1WjJsMGFIVmlMbU52YlYwZ0xTQjBhR1VnWW1GelpTQkhhWFJvZFdJZ1FWQkpJRlZTVEZ4dUlDQWdJQ292WEc0Z0lDQmpiMjV6ZEhKMVkzUnZjaWgxYzJWeWJtRnRaU3dnWVhWMGFDd2dZWEJwUW1GelpTa2dlMXh1SUNBZ0lDQWdjM1Z3WlhJb1lYVjBhQ3dnWVhCcFFtRnpaU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZkWE5sY2lBOUlIVnpaWEp1WVcxbE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVkbGRDQjBhR1VnZFhKc0lHWnZjaUIwYUdVZ2NtVnhkV1Z6ZEM0Z0tHUmxjR1Z1WkdWdWRDQnZiaUJwWmlCM1pTZHlaU0J5WlhGMVpYTjBhVzVuSUdadmNpQjBhR1VnWVhWMGFHVnVkR2xqWVhSbFpDQjFjMlZ5SUc5eUlHNXZkQ2xjYmlBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1pXNWtjRzlwYm5RZ0xTQjBhR1VnWlc1a2NHOXBiblFnWW1WcGJtY2djbVZ4ZFdWemRHVmtYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdHpkSEpwYm1kOUlDMGdkR2hsSUhKbGMyOXNkbVZrSUdWdVpIQnZhVzUwWEc0Z0lDQWdLaTljYmlBZ0lGOWZaMlYwVTJOdmNHVmtWWEpzS0dWdVpIQnZhVzUwS1NCN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZlgzVnpaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGJtUndiMmx1ZENBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnTDNWelpYSnpMeVI3ZEdocGN5NWZYM1Z6WlhKOUx5UjdaVzVrY0c5cGJuUjlZQ0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQmdMM1Z6WlhKekx5UjdkR2hwY3k1ZlgzVnpaWEo5WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdPMXh1WEc0Z0lDQWdJQ0I5SUdWc2MyVWdleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bFhHNGdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHVnVaSEJ2YVc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2NuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2N2ZFhObGNpYzdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjI1dmRHbG1hV05oZEdsdmJuTW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWjJsemRITW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHQXZKSHRsYm1Sd2IybHVkSDFnTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHQXZkWE5sY2k4a2UyVnVaSEJ2YVc1MGZXQTdYRzRnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dUR2x6ZENCMGFHVWdkWE5sY2lkeklISmxjRzl6YVhSdmNtbGxjMXh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekx5TnNhWE4wTFhWelpYSXRjbVZ3YjNOcGRHOXlhV1Z6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXMjl3ZEdsdmJuTTllMzFkSUMwZ1lXNTVJRzl3ZEdsdmJuTWdkRzhnY21WbWFXNWxJSFJvWlNCelpXRnlZMmhjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR3hwYzNRZ2IyWWdjbVZ3YjNOcGRHOXlhV1Z6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUlNaWEJ2Y3lodmNIUnBiMjV6TENCallpa2dlMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0JqWWlBOUlHOXdkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCMGFHbHpMbDluWlhSUGNIUnBiMjV6VjJsMGFFUmxabUYxYkhSektHOXdkR2x2Ym5NcE8xeHVYRzRnSUNBZ0lDQnNiMmNvWUVabGRHTm9hVzVuSUhKbGNHOXphWFJ2Y21sbGN5QjNhWFJvSUc5d2RHbHZibk02SUNSN1NsTlBUaTV6ZEhKcGJtZHBabmtvYjNCMGFXOXVjeWw5WUNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRFRnNiRkJoWjJWektIUm9hWE11WDE5blpYUlRZMjl3WldSVmNtd29KM0psY0c5ekp5a3NJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJNYVhOMElIUm9aU0J2Y21keklIUm9ZWFFnZEdobElIVnpaWElnWW1Wc2IyNW5jeUIwYjF4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDI5eVozTXZJMnhwYzNRdGRYTmxjaTF2Y21kaGJtbDZZWFJwYjI1elhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUc5eVoyRnVhWHBoZEdsdmJuTmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiR2x6ZEU5eVozTW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCMGFHbHpMbDlmWjJWMFUyTnZjR1ZrVlhKc0tDZHZjbWR6Snlrc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCTWFYTjBJR1p2Ykd4dmQyVnljeUJ2WmlCaElIVnpaWEpjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTkxYzJWeWN5OW1iMnhzYjNkbGNuTXZJMnhwYzNRdFptOXNiRzkzWlhKekxXOW1MV0V0ZFhObGNseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHbHpkQ0J2WmlCbWIyeHNiM2RsY25OY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2JHbHpkRVp2Ykd4dmQyVnljeWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lIUm9hWE11WDE5blpYUlRZMjl3WldSVmNtd29KMlp2Ykd4dmQyVnljeWNwTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjFjMlZ5Y3lCbWIyeHNiM2RsWkNCaWVTQmhibTkwYUdWeUlIVnpaWEpjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTkxYzJWeWN5OW1iMnhzYjNkbGNuTXZJMnhwYzNRdGRYTmxjbk10Wm05c2JHOTNaV1F0WW5rdFlXNXZkR2hsY2kxMWMyVnlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlIZG9ieUJoSUhWelpYSWdhWE1nWm05c2JHOTNhVzVuWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUkdiMnhzYjNkcGJtY29ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCMGFHbHpMbDlmWjJWMFUyTnZjR1ZrVlhKc0tDZG1iMnhzYjNkcGJtY25LU3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRXhwYzNRZ2RHaGxJSFZ6WlhJbmN5Qm5hWE4wYzF4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJkcGMzUnpMeU5zYVhOMExXRXRkWE5sY25NdFoybHpkSE5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR3hwYzNRZ2IyWWdaMmx6ZEhOY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2JHbHpkRWRwYzNSektHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnZEdocGN5NWZYMmRsZEZOamIzQmxaRlZ5YkNnbloybHpkSE1uS1N3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUhWelpYSW5jeUJ1YjNScFptbGpZWFJwYjI1elhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdllXTjBhWFpwZEhrdmJtOTBhV1pwWTJGMGFXOXVjeThqYkdsemRDMTViM1Z5TFc1dmRHbG1hV05oZEdsdmJuTmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmIzQjBhVzl1Y3oxN2ZWMGdMU0JoYm5rZ2IzQjBhVzl1Y3lCMGJ5QnlaV1pwYm1VZ2RHaGxJSE5sWVhKamFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHbHpkQ0J2WmlCeVpYQnZjMmwwYjNKcFpYTmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiR2x6ZEU1dmRHbG1hV05oZEdsdmJuTW9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0JqWWlBOUlHOXdkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUc5d2RHbHZibk11YzJsdVkyVWdQU0IwYUdsekxsOWtZWFJsVkc5SlUwOG9iM0IwYVc5dWN5NXphVzVqWlNrN1hHNGdJQ0FnSUNCdmNIUnBiMjV6TG1KbFptOXlaU0E5SUhSb2FYTXVYMlJoZEdWVWIwbFRUeWh2Y0hScGIyNXpMbUpsWm05eVpTazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0IwYUdsekxsOWZaMlYwVTJOdmNHVmtWWEpzS0NkdWIzUnBabWxqWVhScGIyNXpKeWtzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCVGFHOTNJSFJvWlNCMWMyVnlKM01nY0hKdlptbHNaVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM1Z6WlhKekx5Tm5aWFF0WVMxemFXNW5iR1V0ZFhObGNseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2RYTmxjaWR6SUdsdVptOXliV0YwYVc5dVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRkJ5YjJacGJHVW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCMGFHbHpMbDlmWjJWMFUyTnZjR1ZrVlhKc0tDY25LU3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZEhNZ2RHaGxJR3hwYzNRZ2IyWWdjM1JoY25KbFpDQnlaWEJ2YzJsMGIzSnBaWE1nWm05eUlIUm9aU0IxYzJWeVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdllXTjBhWFpwZEhrdmMzUmhjbkpwYm1jdkkyeHBjM1F0Y21Wd2IzTnBkRzl5YVdWekxXSmxhVzVuTFhOMFlYSnlaV1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR3hwYzNRZ2IyWWdjM1JoY25KbFpDQnlaWEJ2YzJsMGIzSnBaWE5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRGTjBZWEp5WldSU1pYQnZjeWhqWWlrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEpsY1hWbGMzUlBjSFJwYjI1eklEMGdkR2hwY3k1ZloyVjBUM0IwYVc5dWMxZHBkR2hFWldaaGRXeDBjeWdwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNSQmJHeFFZV2RsY3loMGFHbHpMbDlmWjJWMFUyTnZjR1ZrVlhKc0tDZHpkR0Z5Y21Wa0p5a3NJSEpsY1hWbGMzUlBjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSMlYwY3lCMGFHVWdiR2x6ZENCdlppQnpkR0Z5Y21Wa0lHZHBjM1J6SUdadmNpQjBhR1VnZFhObGNseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyZHBjM1J6THlOc2FYTjBMWE4wWVhKeVpXUXRaMmx6ZEhOY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiYjNCMGFXOXVjejE3ZlYwZ0xTQmhibmtnYjNCMGFXOXVjeUIwYnlCeVpXWnBibVVnZEdobElITmxZWEpqYUZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYkdsemRDQnZaaUJuYVhOMGMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnNhWE4wVTNSaGNuSmxaRWRwYzNSektHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdZMklnUFNCdmNIUnBiMjV6TzF4dUlDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlIdDlPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiM0IwYVc5dWN5NXphVzVqWlNBOUlIUm9hWE11WDJSaGRHVlViMGxUVHlodmNIUnBiMjV6TG5OcGJtTmxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0FuTDJkcGMzUnpMM04wWVhKeVpXUW5MQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQmxiV0ZwYkNCaFpHUnlaWE56WlhNZ1ptOXlJR0VnZFhObGNseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzVnpaWEp6TDJWdFlXbHNjeThqYkdsemRDMWxiV0ZwYkMxaFpHUnlaWE56WlhNdFptOXlMV0V0ZFhObGNseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHbHpkQ0J2WmlCbGJXRnBiSE5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWjJWMFJXMWhhV3h6S0dOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dKeTkxYzJWeUwyVnRZV2xzY3ljc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCSVlYWmxJSFJvWlNCaGRYUm9aVzUwYVdOaGRHVmtJSFZ6WlhJZ1ptOXNiRzkzSUhSb2FYTWdkWE5sY2x4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNWelpYSnpMMlp2Ykd4dmQyVnljeThqWm05c2JHOTNMV0V0ZFhObGNseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhWelpYSnVZVzFsSUMwZ2RHaGxJSFZ6WlhJZ2RHOGdabTlzYkc5M1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJ5ZFdVZ2FXWWdkR2hsSUhKbGNYVmxjM1FnYzNWalkyVmxaSE5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWm05c2JHOTNLSFZ6WlhKdVlXMWxMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJWVkNjc0lHQXZkWE5sY2k5bWIyeHNiM2RwYm1jdkpIdDFjMlZ5Ym1GdFpYMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dTR0YyWlNCMGFHVWdZM1Z5Y21WdWRHeDVJR0YxZEdobGJuUnBZMkYwWldRZ2RYTmxjaUIxYm1admJHeHZkeUIwYUdseklIVnpaWEpjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTkxYzJWeWN5OW1iMnhzYjNkbGNuTXZJMlp2Ykd4dmR5MWhMWFZ6WlhKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0IxYzJWeWJtRnRaU0F0SUhSb1pTQjFjMlZ5SUhSdklIVnVabTlzYkc5M1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2NtVmpaV2wyWlhNZ2RISjFaU0JwWmlCMGFHVWdjbVZ4ZFdWemRDQnpkV05qWldWa2MxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQjFibVp2Ykd4dmR5aDFjMlZ5Ym1GdFpTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEVSVXhGVkVVbkxDQmdMM1Z6WlhJdlptOXNiRzkzYVc1bkx5UjdkWE5sY201aGJXVjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCeVpYQnZjMmwwYjNKNUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZEd4NUlHRjFkR2hsYm5ScFkyRjBaV1FnZFhObGNseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzSmxjRzl6THlOamNtVmhkR1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZjSFJwYjI1eklDMGdkR2hsSUhKbGNHOXphWFJ2Y25rZ1pHVm1hVzVwZEdsdmJseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ1FWQkpJSEpsYzNCdmJuTmxYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR055WldGMFpWSmxjRzhvYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRVDFOVUp5d2dKeTkxYzJWeUwzSmxjRzl6Snl3Z2IzQjBhVzl1Y3l3Z1kySXBPMXh1SUNBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZWelpYSTdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXNlci5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbi8qKlxuICogSXNzdWUgd3JhcHMgdGhlIGZ1bmN0aW9uYWxpdHkgdG8gZ2V0IGlzc3VlcyBmb3IgcmVwb3NpdG9yaWVzXG4gKi9cbnZhciBJc3N1ZSA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgX2luaGVyaXRzKElzc3VlLCBfUmVxdWVzdGFibGUpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgSXNzdWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlcG9zaXRvcnkgLSB0aGUgZnVsbCBuYW1lIG9mIHRoZSByZXBvc2l0b3J5IChgOnVzZXIvOnJlcG9gKSB0byBnZXQgaXNzdWVzIGZvclxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmF1dGh9IFthdXRoXSAtIGluZm9ybWF0aW9uIHJlcXVpcmVkIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICovXG4gIGZ1bmN0aW9uIElzc3VlKHJlcG9zaXRvcnksIGF1dGgsIGFwaUJhc2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSXNzdWUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKElzc3VlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSXNzdWUpKS5jYWxsKHRoaXMsIGF1dGgsIGFwaUJhc2UpKTtcblxuICAgIF90aGlzLl9fcmVwb3NpdG9yeSA9IHJlcG9zaXRvcnk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpc3N1ZVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzLyNjcmVhdGUtYW4taXNzdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGlzc3VlRGF0YSAtIHRoZSBpc3N1ZSB0byBjcmVhdGVcbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgY3JlYXRlZCBpc3N1ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKElzc3VlLCBbe1xuICAgIGtleTogJ2NyZWF0ZUlzc3VlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSXNzdWUoaXNzdWVEYXRhLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvaXNzdWVzJywgaXNzdWVEYXRhLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgaXNzdWVzIGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvI2xpc3QtaXNzdWVzLWZvci1hLXJlcG9zaXRvcnlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGZpbHRlcmluZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgYXJyYXkgb2YgaXNzdWVzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0SXNzdWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdElzc3VlcyhvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvaXNzdWVzJywgb3B0aW9ucywgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIGV2ZW50cyBmb3IgYW4gaXNzdWVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2V2ZW50cy8jbGlzdC1ldmVudHMtZm9yLWFuLWlzc3VlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlzc3VlIC0gdGhlIGlzc3VlIHRvIGdldCBldmVudHMgZm9yXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBldmVudHNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpc3RJc3N1ZUV2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RJc3N1ZUV2ZW50cyhpc3N1ZSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvaXNzdWVzLycgKyBpc3N1ZSArICcvZXZlbnRzJywgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgY29tbWVudHMgb24gYW4gaXNzdWVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2NvbW1lbnRzLyNsaXN0LWNvbW1lbnRzLW9uLWFuLWlzc3VlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlzc3VlIC0gdGhlIGlkIG9mIHRoZSBpc3N1ZSB0byBnZXQgY29tbWVudHMgZnJvbVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGNvbW1lbnRzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0SXNzdWVDb21tZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RJc3N1ZUNvbW1lbnRzKGlzc3VlLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9pc3N1ZXMvJyArIGlzc3VlICsgJy9jb21tZW50cycsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzaW5nbGUgY29tbWVudCBvbiBhbiBpc3N1ZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvY29tbWVudHMvI2dldC1hLXNpbmdsZS1jb21tZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIC0gdGhlIGNvbW1lbnQgaWQgdG8gZ2V0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tbWVudFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0SXNzdWVDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXNzdWVDb21tZW50KGlkLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9pc3N1ZXMvY29tbWVudHMvJyArIGlkLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tbWVudCBvbiBhbiBpc3N1ZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvY29tbWVudHMvI2NyZWF0ZS1hLWNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaXNzdWUgLSB0aGUgaWQgb2YgdGhlIGlzc3VlIHRvIGNvbW1lbnQgb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29tbWVudCAtIHRoZSBjb21tZW50IHRvIGFkZFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGNyZWF0ZWQgY29tbWVudFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlSXNzdWVDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSXNzdWVDb21tZW50KGlzc3VlLCBjb21tZW50LCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvaXNzdWVzLycgKyBpc3N1ZSArICcvY29tbWVudHMnLCB7IGJvZHk6IGNvbW1lbnQgfSwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVkaXQgYSBjb21tZW50IG9uIGFuIGlzc3VlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy9jb21tZW50cy8jZWRpdC1hLWNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSB0aGUgY29tbWVudCBpZCB0byBlZGl0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1lbnQgLSB0aGUgY29tbWVudCB0byBlZGl0XG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgZWRpdGVkIGNvbW1lbnRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VkaXRJc3N1ZUNvbW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0SXNzdWVDb21tZW50KGlkLCBjb21tZW50LCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2lzc3Vlcy9jb21tZW50cy8nICsgaWQsIHsgYm9keTogY29tbWVudCB9LCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgY29tbWVudCBvbiBhbiBpc3N1ZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvY29tbWVudHMvI2RlbGV0ZS1hLWNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSB0aGUgY29tbWVudCBpZCB0byBkZWxldGVcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlSXNzdWVDb21tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSXNzdWVDb21tZW50KGlkLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0RFTEVURScsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9pc3N1ZXMvY29tbWVudHMvJyArIGlkLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRWRpdCBhbiBpc3N1ZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvI2VkaXQtYW4taXNzdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaXNzdWUgLSB0aGUgaXNzdWUgbnVtYmVyIHRvIGVkaXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaXNzdWVEYXRhIC0gdGhlIG5ldyBpc3N1ZSBkYXRhXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbW9kaWZpZWQgaXNzdWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VkaXRJc3N1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXRJc3N1ZShpc3N1ZSwgaXNzdWVEYXRhLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2lzc3Vlcy8nICsgaXNzdWUsIGlzc3VlRGF0YSwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHBhcnRpY3VsYXIgaXNzdWVcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzLyNnZXQtYS1zaW5nbGUtaXNzdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaXNzdWUgLSB0aGUgaXNzdWUgbnVtYmVyIHRvIGZldGNoXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgaXNzdWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldElzc3VlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXNzdWUoaXNzdWUsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2lzc3Vlcy8nICsgaXNzdWUsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBtaWxlc3RvbmVzIGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbWlsZXN0b25lcy8jbGlzdC1taWxlc3RvbmVzLWZvci1hLXJlcG9zaXRvcnlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGZpbHRlcmluZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgYXJyYXkgb2YgbWlsZXN0b25lc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdE1pbGVzdG9uZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0TWlsZXN0b25lcyhvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9taWxlc3RvbmVzJywgb3B0aW9ucywgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIG1pbGVzdG9uZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbWlsZXN0b25lcy8jZ2V0LWEtc2luZ2xlLW1pbGVzdG9uZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtaWxlc3RvbmUgLSB0aGUgaWQgb2YgdGhlIG1pbGVzdG9uZSB0byBmZXRjaFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG1pbGVzdG9uZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0TWlsZXN0b25lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWlsZXN0b25lKG1pbGVzdG9uZSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbWlsZXN0b25lcy8nICsgbWlsZXN0b25lLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IG1pbGVzdG9uZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbWlsZXN0b25lcy8jY3JlYXRlLWEtbWlsZXN0b25lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1pbGVzdG9uZURhdGEgLSB0aGUgbWlsZXN0b25lIGRlZmluaXRpb25cbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBtaWxlc3RvbmVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZU1pbGVzdG9uZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU1pbGVzdG9uZShtaWxlc3RvbmVEYXRhLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbWlsZXN0b25lcycsIG1pbGVzdG9uZURhdGEsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFZGl0IGEgbWlsZXN0b25lXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy9taWxlc3RvbmVzLyN1cGRhdGUtYS1taWxlc3RvbmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWlsZXN0b25lIC0gdGhlIGlkIG9mIHRoZSBtaWxlc3RvbmUgdG8gZWRpdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtaWxlc3RvbmVEYXRhIC0gdGhlIHVwZGF0ZXMgdG8gbWFrZSB0byB0aGUgbWlsZXN0b25lXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgdXBkYXRlZCBtaWxlc3RvbmVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VkaXRNaWxlc3RvbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0TWlsZXN0b25lKG1pbGVzdG9uZSwgbWlsZXN0b25lRGF0YSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9taWxlc3RvbmVzLycgKyBtaWxlc3RvbmUsIG1pbGVzdG9uZURhdGEsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBtaWxlc3RvbmUgKHRoaXMgaXMgZGlzdGluY3QgZnJvbSBjbG9zaW5nIGEgbWlsZXN0b25lKVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbWlsZXN0b25lcy8jZGVsZXRlLWEtbWlsZXN0b25lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1pbGVzdG9uZSAtIHRoZSBpZCBvZiB0aGUgbWlsZXN0b25lIHRvIGRlbGV0ZVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHN0YXR1c1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlTWlsZXN0b25lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlTWlsZXN0b25lKG1pbGVzdG9uZSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbWlsZXN0b25lcy8nICsgbWlsZXN0b25lLCBudWxsLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGxhYmVsXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy9sYWJlbHMvI2NyZWF0ZS1hLWxhYmVsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxhYmVsRGF0YSAtIHRoZSBsYWJlbCBkZWZpbml0aW9uXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbGFiZWxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZUxhYmVsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTGFiZWwobGFiZWxEYXRhLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbGFiZWxzJywgbGFiZWxEYXRhLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgbGFiZWxzIGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbGFiZWxzLyNsaXN0LWFsbC1sYWJlbHMtZm9yLXRoaXMtcmVwb3NpdG9yeVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gZmlsdGVyaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBhcnJheSBvZiBsYWJlbHNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpc3RMYWJlbHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0TGFiZWxzKG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX3JlcG9zaXRvcnkgKyAnL2xhYmVscycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBsYWJlbFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbGFiZWxzLyNnZXQtYS1zaW5nbGUtbGFiZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSB0aGUgbmFtZSBvZiB0aGUgbGFiZWwgdG8gZmV0Y2hcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsYWJlbFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGFiZWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYWJlbChsYWJlbCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbGFiZWxzLycgKyBsYWJlbCwgbnVsbCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVkaXQgYSBsYWJlbFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvbGFiZWxzLyN1cGRhdGUtYS1sYWJlbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCAtIHRoZSBuYW1lIG9mIHRoZSBsYWJlbCB0byBlZGl0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxhYmVsRGF0YSAtIHRoZSB1cGRhdGVzIHRvIG1ha2UgdG8gdGhlIGxhYmVsXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgdXBkYXRlZCBsYWJlbFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZWRpdExhYmVsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWRpdExhYmVsKGxhYmVsLCBsYWJlbERhdGEsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3JlcG9zLycgKyB0aGlzLl9fcmVwb3NpdG9yeSArICcvbGFiZWxzLycgKyBsYWJlbCwgbGFiZWxEYXRhLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgbGFiZWxcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2xhYmVscy8jZGVsZXRlLWEtbGFiZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSB0aGUgbmFtZSBvZiB0aGUgbGFiZWwgdG8gZGVsZXRlXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgc3RhdHVzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVMYWJlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUxhYmVsKGxhYmVsLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0RFTEVURScsICcvcmVwb3MvJyArIHRoaXMuX19yZXBvc2l0b3J5ICsgJy9sYWJlbHMvJyArIGxhYmVsLCBudWxsLCBjYik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElzc3VlO1xufShfUmVxdWVzdGFibGUzLmRlZmF1bHQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElzc3VlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtsemMzVmxMbXB6SWwwc0ltNWhiV1Z6SWpwYklrbHpjM1ZsSWl3aWNtVndiM05wZEc5eWVTSXNJbUYxZEdnaUxDSmhjR2xDWVhObElpd2lYMTl5WlhCdmMybDBiM0o1SWl3aWFYTnpkV1ZFWVhSaElpd2lZMklpTENKZmNtVnhkV1Z6ZENJc0ltOXdkR2x2Ym5NaUxDSmZjbVZ4ZFdWemRFRnNiRkJoWjJWeklpd2lhWE56ZFdVaUxDSnBaQ0lzSW1OdmJXMWxiblFpTENKaWIyUjVJaXdpYldsc1pYTjBiMjVsSWl3aWJXbHNaWE4wYjI1bFJHRjBZU0lzSW14aFltVnNSR0YwWVNJc0lteGhZbVZzSWl3aVVtVnhkV1Z6ZEdGaWJHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPMEZCVDBFN096czdPenM3T3pzN0syVkJVRUU3T3pzN096czdRVUZUUVRzN08wbEJSMDFCTEVzN096dEJRVU5JT3pzN096czdRVUZOUVN4cFFrRkJXVU1zVlVGQldpeEZRVUYzUWtNc1NVRkJlRUlzUlVGQk9FSkRMRTlCUVRsQ0xFVkJRWFZETzBGQlFVRTdPMEZCUVVFc09FZEJRemxDUkN4SlFVUTRRaXhGUVVONFFrTXNUMEZFZDBJN08wRkJSWEJETEZWQlFVdERMRmxCUVV3c1IwRkJiMEpJTEZWQlFYQkNPMEZCUm05RE8wRkJSM1JET3p0QlFVVkVPenM3T3pzN096czdPenRuUTBGUFdVa3NVeXhGUVVGWFF5eEZMRVZCUVVrN1FVRkRlRUlzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1RVRkJaQ3hqUVVGblF5eExRVUZMU0N4WlFVRnlReXhqUVVFMFJFTXNVMEZCTlVRc1JVRkJkVVZETEVWQlFYWkZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096c3JRa0ZQVjBVc1R5eEZRVUZUUml4RkxFVkJRVWs3UVVGRGNrSXNZVUZCVHl4TFFVRkxSeXhuUWtGQlRDeGhRVUZuUXl4TFFVRkxUQ3haUVVGeVF5eGpRVUUwUkVrc1QwRkJOVVFzUlVGQmNVVkdMRVZCUVhKRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0dlEwRlBaMEpKTEVzc1JVRkJUMG9zUlN4RlFVRkpPMEZCUTNoQ0xHRkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwZ3NXVUZCY0VNc1owSkJRVEpFVFN4TFFVRXpSQ3hqUVVFeVJTeEpRVUV6UlN4RlFVRnBSa29zUlVGQmFrWXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08zTkRRVTlyUWtrc1N5eEZRVUZQU2l4RkxFVkJRVWs3UVVGRE1VSXNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxTQ3haUVVGd1F5eG5Ra0ZCTWtSTkxFdEJRVE5FTEdkQ1FVRTJSU3hKUVVFM1JTeEZRVUZ0Umtvc1JVRkJia1lzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPMjlEUVU5blFrc3NSU3hGUVVGSlRDeEZMRVZCUVVrN1FVRkRja0lzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMU0N4WlFVRndReXg1UWtGQmIwVlBMRVZCUVhCRkxFVkJRVEJGTEVsQlFURkZMRVZCUVdkR1RDeEZRVUZvUml4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3TzNWRFFWRnRRa2tzU3l4RlFVRlBSU3hQTEVWQlFWTk9MRVVzUlVGQlNUdEJRVU53UXl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eE5RVUZrTEdOQlFXZERMRXRCUVV0SUxGbEJRWEpETEdkQ1FVRTBSRTBzUzBGQk5VUXNaMEpCUVRoRkxFVkJRVU5ITEUxQlFVMUVMRTlCUVZBc1JVRkJPVVVzUlVGQkswWk9MRVZCUVM5R0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzN2NVTkJVV2xDU3l4RkxFVkJRVWxETEU4c1JVRkJVMDRzUlN4RlFVRkpPMEZCUXk5Q0xHRkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRTlCUVdRc1kwRkJhVU1zUzBGQlMwZ3NXVUZCZEVNc2VVSkJRWE5GVHl4RlFVRjBSU3hGUVVFMFJTeEZRVUZEUlN4TlFVRk5SQ3hQUVVGUUxFVkJRVFZGTEVWQlFUWkdUaXhGUVVFM1JpeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN2RVTkJUMjFDU3l4RkxFVkJRVWxNTEVVc1JVRkJTVHRCUVVONFFpeGhRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhSUVVGa0xHTkJRV3RETEV0QlFVdElMRmxCUVhaRExIbENRVUYxUlU4c1JVRkJka1VzUlVGQk5rVXNTVUZCTjBVc1JVRkJiVVpNTEVWQlFXNUdMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdPRUpCVVZWSkxFc3NSVUZCVDB3c1V5eEZRVUZYUXl4RkxFVkJRVWs3UVVGRE4wSXNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVDBGQlpDeGpRVUZwUXl4TFFVRkxTQ3haUVVGMFF5eG5Ra0ZCTmtSTkxFdEJRVGRFTEVWQlFYTkZUQ3hUUVVGMFJTeEZRVUZwUmtNc1JVRkJha1lzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPelpDUVU5VFNTeExMRVZCUVU5S0xFVXNSVUZCU1R0QlFVTnFRaXhoUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRJTEZsQlFYQkRMR2RDUVVFeVJFMHNTMEZCTTBRc1JVRkJiMFVzU1VGQmNFVXNSVUZCTUVWS0xFVkJRVEZGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR0UTBGUFpVVXNUeXhGUVVGVFJpeEZMRVZCUVVrN1FVRkRla0lzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMU0N4WlFVRndReXhyUWtGQkswUkpMRTlCUVM5RUxFVkJRWGRGUml4RlFVRjRSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdhVU5CVDJGUkxGTXNSVUZCVjFJc1JTeEZRVUZKTzBGQlEzcENMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMGdzV1VGQmNFTXNiMEpCUVN0RVZTeFRRVUV2UkN4RlFVRTBSU3hKUVVFMVJTeEZRVUZyUmxJc1JVRkJiRVlzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPMjlEUVU5blFsTXNZU3hGUVVGbFZDeEZMRVZCUVVrN1FVRkRhRU1zWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1RVRkJaQ3hqUVVGblF5eExRVUZMU0N4WlFVRnlReXhyUWtGQlowVlhMR0ZCUVdoRkxFVkJRU3RGVkN4RlFVRXZSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPMnREUVZGalVTeFRMRVZCUVZkRExHRXNSVUZCWlZRc1JTeEZRVUZKTzBGQlEzcERMR0ZCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEU5QlFXUXNZMEZCYVVNc1MwRkJTMGdzV1VGQmRFTXNiMEpCUVdsRlZTeFRRVUZxUlN4RlFVRTRSVU1zWVVGQk9VVXNSVUZCTmtaVUxFVkJRVGRHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR2UTBGUFowSlJMRk1zUlVGQlYxSXNSU3hGUVVGSk8wRkJRelZDTEdGQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxGRkJRV1FzWTBGQmEwTXNTMEZCUzBnc1dVRkJka01zYjBKQlFXdEZWU3hUUVVGc1JTeEZRVUVyUlN4SlFVRXZSU3hGUVVGeFJsSXNSVUZCY2tZc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzJkRFFVOVpWU3hUTEVWQlFWZFdMRVVzUlVGQlNUdEJRVU40UWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eE5RVUZrTEdOQlFXZERMRXRCUVV0SUxGbEJRWEpETEdOQlFUUkVXU3hUUVVFMVJDeEZRVUYxUlZZc1JVRkJka1VzUTBGQlVEdEJRVU5HT3p0QlFVVkdPenM3T3pzN096czdPeXRDUVU5WlJTeFBMRVZCUVZOR0xFVXNSVUZCU1R0QlFVTnlRaXhoUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRJTEZsQlFYQkRMR05CUVRKRVNTeFBRVUV6UkN4RlFVRnZSVVlzUlVGQmNFVXNRMEZCVUR0QlFVTkdPenRCUVVWR096czdPenM3T3pzN096WkNRVTlWVnl4TExFVkJRVTlZTEVVc1JVRkJTVHRCUVVOcVFpeGhRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdElMRmxCUVhCRExHZENRVUV5UkdFc1MwRkJNMFFzUlVGQmIwVXNTVUZCY0VVc1JVRkJNRVZZTEVWQlFURkZMRU5CUVZBN1FVRkRSanM3UVVGRlJqczdPenM3T3pzN096czdPRUpCVVZkWExFc3NSVUZCVDBRc1V5eEZRVUZYVml4RkxFVkJRVWs3UVVGRE4wSXNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVDBGQlpDeGpRVUZwUXl4TFFVRkxTQ3haUVVGMFF5eG5Ra0ZCTmtSaExFdEJRVGRFTEVWQlFYTkZSQ3hUUVVGMFJTeEZRVUZwUmxZc1JVRkJha1lzUTBGQlVEdEJRVU5HT3p0QlFVVkdPenM3T3pzN096czdPMmREUVU5aFZ5eExMRVZCUVU5WUxFVXNSVUZCU1R0QlFVTndRaXhoUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4UlFVRmtMR05CUVd0RExFdEJRVXRJTEZsQlFYWkRMR2RDUVVFNFJHRXNTMEZCT1VRc1JVRkJkVVVzU1VGQmRrVXNSVUZCTmtWWUxFVkJRVGRGTEVOQlFWQTdRVUZEUmpzN096dEZRVE5QWjBKWkxIRkNPenRCUVRoUGNFSkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSndRaXhMUVVGcVFpSXNJbVpwYkdVaU9pSkpjM04xWlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRR1pwYkdWY2JpQXFJRUJqYjNCNWNtbG5hSFFnSURJd01UTWdUV2xqYUdGbGJDQkJkV1p5WldsMFpYSWdLRVJsZG1Wc2IzQnRaVzUwSUZObFpXUXBJR0Z1WkNBeU1ERTJJRmxoYUc5dklFbHVZeTVjYmlBcUlFQnNhV05sYm5ObElDQWdJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIdEFiR2x1YXlCb2RIUndjem92TDNOd1pIZ3ViM0puTDJ4cFkyVnVjMlZ6TDBKVFJDMHpMVU5zWVhWelpTMURiR1ZoY2k1b2RHMXNJRUpUUkMwekxVTnNZWFZ6WlMxRGJHVmhjbjB1WEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0JIYVhSb2RXSXVhbk1nYVhNZ1puSmxaV3g1SUdScGMzUnlhV0oxZEdGaWJHVXVYRzRnS2k5Y2JseHVhVzF3YjNKMElGSmxjWFZsYzNSaFlteGxJR1p5YjIwZ0p5NHZVbVZ4ZFdWemRHRmliR1VuTzF4dVhHNHZLaXBjYmlBcUlFbHpjM1ZsSUhkeVlYQnpJSFJvWlNCbWRXNWpkR2x2Ym1Gc2FYUjVJSFJ2SUdkbGRDQnBjM04xWlhNZ1ptOXlJSEpsY0c5emFYUnZjbWxsYzF4dUlDb3ZYRzVqYkdGemN5QkpjM04xWlNCbGVIUmxibVJ6SUZKbGNYVmxjM1JoWW14bElIdGNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJRWx6YzNWbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY21Wd2IzTnBkRzl5ZVNBdElIUm9aU0JtZFd4c0lHNWhiV1VnYjJZZ2RHaGxJSEpsY0c5emFYUnZjbmtnS0dBNmRYTmxjaTg2Y21Wd2IyQXBJSFJ2SUdkbGRDQnBjM04xWlhNZ1ptOXlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbUYxZEdoOUlGdGhkWFJvWFNBdElHbHVabTl5YldGMGFXOXVJSEpsY1hWcGNtVmtJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSb2RXSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYllYQnBRbUZ6WlQxb2RIUndjem92TDJGd2FTNW5hWFJvZFdJdVkyOXRYU0F0SUhSb1pTQmlZWE5sSUVkcGRHaDFZaUJCVUVrZ1ZWSk1YRzRnSUNBZ0tpOWNiaUFnSUdOdmJuTjBjblZqZEc5eUtISmxjRzl6YVhSdmNua3NJR0YxZEdnc0lHRndhVUpoYzJVcElIdGNiaUFnSUNBZ0lITjFjR1Z5S0dGMWRHZ3NJR0Z3YVVKaGMyVXBPMXh1SUNBZ0lDQWdkR2hwY3k1ZlgzSmxjRzl6YVhSdmNua2dQU0J5WlhCdmMybDBiM0o1TzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCcGMzTjFaVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmx6YzNWbGN5OGpZM0psWVhSbExXRnVMV2x6YzNWbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYVhOemRXVkVZWFJoSUMwZ2RHaGxJR2x6YzNWbElIUnZJR055WldGMFpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ1kzSmxZWFJsWkNCcGMzTjFaVnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JqY21WaGRHVkpjM04xWlNocGMzTjFaVVJoZEdFc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblVFOVRWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmY21Wd2IzTnBkRzl5ZVgwdmFYTnpkV1Z6WUN3Z2FYTnpkV1ZFWVhSaExDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dUR2x6ZENCMGFHVWdhWE56ZFdWeklHWnZjaUIwYUdVZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwybHpjM1ZsY3k4amJHbHpkQzFwYzNOMVpYTXRabTl5TFdFdGNtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nTFNCbWFXeDBaWEpwYm1jZ2IzQjBhVzl1YzF4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnWVhKeVlYa2diMllnYVhOemRXVnpYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR3hwYzNSSmMzTjFaWE1vYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBRV3hzVUdGblpYTW9ZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOXlaWEJ2YzJsMGIzSjVmUzlwYzNOMVpYTmdMQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjBhR1VnWlhabGJuUnpJR1p2Y2lCaGJpQnBjM04xWlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJsemMzVmxjeTlsZG1WdWRITXZJMnhwYzNRdFpYWmxiblJ6TFdadmNpMWhiaTFwYzNOMVpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdsemMzVmxJQzBnZEdobElHbHpjM1ZsSUhSdklHZGxkQ0JsZG1WdWRITWdabTl5WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JR1YyWlc1MGMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnNhWE4wU1hOemRXVkZkbVZ1ZEhNb2FYTnpkV1VzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOXlaWEJ2YzJsMGIzSjVmUzlwYzNOMVpYTXZKSHRwYzNOMVpYMHZaWFpsYm5SellDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFeHBjM1FnWTI5dGJXVnVkSE1nYjI0Z1lXNGdhWE56ZFdWY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5cGMzTjFaWE12WTI5dGJXVnVkSE12STJ4cGMzUXRZMjl0YldWdWRITXRiMjR0WVc0dGFYTnpkV1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnBjM04xWlNBdElIUm9aU0JwWkNCdlppQjBhR1VnYVhOemRXVWdkRzhnWjJWMElHTnZiVzFsYm5SeklHWnliMjFjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR052YlcxbGJuUnpYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR3hwYzNSSmMzTjFaVU52YlcxbGJuUnpLR2x6YzNWbExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmY21Wd2IzTnBkRzl5ZVgwdmFYTnpkV1Z6THlSN2FYTnpkV1Y5TDJOdmJXMWxiblJ6WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVkbGRDQmhJSE5wYm1kc1pTQmpiMjF0Wlc1MElHOXVJR0Z1SUdsemMzVmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekwyTnZiVzFsYm5Sekx5Tm5aWFF0WVMxemFXNW5iR1V0WTI5dGJXVnVkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHbGtJQzBnZEdobElHTnZiVzFsYm5RZ2FXUWdkRzhnWjJWMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCamIyMXRaVzUwWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRFbHpjM1ZsUTI5dGJXVnVkQ2hwWkN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYM0psY0c5emFYUnZjbmw5TDJsemMzVmxjeTlqYjIxdFpXNTBjeThrZTJsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRiMjF0Wlc1MElHOXVJR0Z1SUdsemMzVmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekwyTnZiVzFsYm5Sekx5TmpjbVZoZEdVdFlTMWpiMjF0Wlc1MFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYVhOemRXVWdMU0IwYUdVZ2FXUWdiMllnZEdobElHbHpjM1ZsSUhSdklHTnZiVzFsYm5RZ2IyNWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCamIyMXRaVzUwSUMwZ2RHaGxJR052YlcxbGJuUWdkRzhnWVdSa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCamNtVmhkR1ZrSUdOdmJXMWxiblJjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWTNKbFlYUmxTWE56ZFdWRGIyMXRaVzUwS0dsemMzVmxMQ0JqYjIxdFpXNTBMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgzSmxjRzl6YVhSdmNubDlMMmx6YzNWbGN5OGtlMmx6YzNWbGZTOWpiMjF0Wlc1MGMyQXNJSHRpYjJSNU9pQmpiMjF0Wlc1MGZTd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRVZrYVhRZ1lTQmpiMjF0Wlc1MElHOXVJR0Z1SUdsemMzVmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekwyTnZiVzFsYm5Sekx5TmxaR2wwTFdFdFkyOXRiV1Z1ZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2xrSUMwZ2RHaGxJR052YlcxbGJuUWdhV1FnZEc4Z1pXUnBkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHTnZiVzFsYm5RZ0xTQjBhR1VnWTI5dGJXVnVkQ0IwYnlCbFpHbDBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmxaR2wwWldRZ1kyOXRiV1Z1ZEZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCbFpHbDBTWE56ZFdWRGIyMXRaVzUwS0dsa0xDQmpiMjF0Wlc1MExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQkJWRU5JSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5eVpYQnZjMmwwYjNKNWZTOXBjM04xWlhNdlkyOXRiV1Z1ZEhNdkpIdHBaSDFnTENCN1ltOWtlVG9nWTI5dGJXVnVkSDBzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRVpXeGxkR1VnWVNCamIyMXRaVzUwSUc5dUlHRnVJR2x6YzNWbFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmFYTnpkV1Z6TDJOdmJXMWxiblJ6THlOa1pXeGxkR1V0WVMxamIyMXRaVzUwWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdhV1FnTFNCMGFHVWdZMjl0YldWdWRDQnBaQ0IwYnlCa1pXeGxkR1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RISjFaU0JwWmlCMGFHVWdjbVZ4ZFdWemRDQnBjeUJ6ZFdOalpYTnpablZzWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdSbGJHVjBaVWx6YzNWbFEyOXRiV1Z1ZENocFpDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEVSVXhGVkVVbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgzSmxjRzl6YVhSdmNubDlMMmx6YzNWbGN5OWpiMjF0Wlc1MGN5OGtlMmxrZldBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRlpHbDBJR0Z1SUdsemMzVmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekx5TmxaR2wwTFdGdUxXbHpjM1ZsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdhWE56ZFdVZ0xTQjBhR1VnYVhOemRXVWdiblZ0WW1WeUlIUnZJR1ZrYVhSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JwYzNOMVpVUmhkR0VnTFNCMGFHVWdibVYzSUdsemMzVmxJR1JoZEdGY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUcxdlpHbG1hV1ZrSUdsemMzVmxYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR1ZrYVhSSmMzTjFaU2hwYzNOMVpTd2dhWE56ZFdWRVlYUmhMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJCVkVOSUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOXlaWEJ2YzJsMGIzSjVmUzlwYzNOMVpYTXZKSHRwYzNOMVpYMWdMQ0JwYzNOMVpVUmhkR0VzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCSFpYUWdZU0J3WVhKMGFXTjFiR0Z5SUdsemMzVmxYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZhWE56ZFdWekx5Tm5aWFF0WVMxemFXNW5iR1V0YVhOemRXVmNiaUFnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCcGMzTjFaU0F0SUhSb1pTQnBjM04xWlNCdWRXMWlaWElnZEc4Z1ptVjBZMmhjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR2x6YzNWbFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRWx6YzNWbEtHbHpjM1ZsTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZjbVZ3YjNOcGRHOXllWDB2YVhOemRXVnpMeVI3YVhOemRXVjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRXhwYzNRZ2RHaGxJRzFwYkdWemRHOXVaWE1nWm05eUlIUm9aU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YVhOemRXVnpMMjFwYkdWemRHOXVaWE12STJ4cGMzUXRiV2xzWlhOMGIyNWxjeTFtYjNJdFlTMXlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElHWnBiSFJsY21sdVp5QnZjSFJwYjI1elhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCaGNuSmhlU0J2WmlCdGFXeGxjM1J2Ym1WelhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JOYVd4bGMzUnZibVZ6S0c5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOXlaWEJ2YzJsMGIzSjVmUzl0YVd4bGMzUnZibVZ6WUN3Z2IzQjBhVzl1Y3l3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0JoSUcxcGJHVnpkRzl1WlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJsemMzVmxjeTl0YVd4bGMzUnZibVZ6THlOblpYUXRZUzF6YVc1bmJHVXRiV2xzWlhOMGIyNWxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JXbHNaWE4wYjI1bElDMGdkR2hsSUdsa0lHOW1JSFJvWlNCdGFXeGxjM1J2Ym1VZ2RHOGdabVYwWTJoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUcxcGJHVnpkRzl1WlZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUk5hV3hsYzNSdmJtVW9iV2xzWlhOMGIyNWxMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZmNtVndiM05wZEc5eWVYMHZiV2xzWlhOMGIyNWxjeThrZTIxcGJHVnpkRzl1WlgxZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJRzFwYkdWemRHOXVaVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmx6YzNWbGN5OXRhV3hsYzNSdmJtVnpMeU5qY21WaGRHVXRZUzF0YVd4bGMzUnZibVZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnRhV3hsYzNSdmJtVkVZWFJoSUMwZ2RHaGxJRzFwYkdWemRHOXVaU0JrWldacGJtbDBhVzl1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J0YVd4bGMzUnZibVZjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWTNKbFlYUmxUV2xzWlhOMGIyNWxLRzFwYkdWemRHOXVaVVJoZEdFc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblVFOVRWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmY21Wd2IzTnBkRzl5ZVgwdmJXbHNaWE4wYjI1bGMyQXNJRzFwYkdWemRHOXVaVVJoZEdFc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkZaR2wwSUdFZ2JXbHNaWE4wYjI1bFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmFYTnpkV1Z6TDIxcGJHVnpkRzl1WlhNdkkzVndaR0YwWlMxaExXMXBiR1Z6ZEc5dVpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUcxcGJHVnpkRzl1WlNBdElIUm9aU0JwWkNCdlppQjBhR1VnYldsc1pYTjBiMjVsSUhSdklHVmthWFJjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnRhV3hsYzNSdmJtVkVZWFJoSUMwZ2RHaGxJSFZ3WkdGMFpYTWdkRzhnYldGclpTQjBieUIwYUdVZ2JXbHNaWE4wYjI1bFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCMWNHUmhkR1ZrSUcxcGJHVnpkRzl1WlZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCbFpHbDBUV2xzWlhOMGIyNWxLRzFwYkdWemRHOXVaU3dnYldsc1pYTjBiMjVsUkdGMFlTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZmNtVndiM05wZEc5eWVYMHZiV2xzWlhOMGIyNWxjeThrZTIxcGJHVnpkRzl1WlgxZ0xDQnRhV3hsYzNSdmJtVkVZWFJoTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1JHVnNaWFJsSUdFZ2JXbHNaWE4wYjI1bElDaDBhR2x6SUdseklHUnBjM1JwYm1OMElHWnliMjBnWTJ4dmMybHVaeUJoSUcxcGJHVnpkRzl1WlNsY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5cGMzTjFaWE12Yldsc1pYTjBiMjVsY3k4alpHVnNaWFJsTFdFdGJXbHNaWE4wYjI1bFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYldsc1pYTjBiMjVsSUMwZ2RHaGxJR2xrSUc5bUlIUm9aU0J0YVd4bGMzUnZibVVnZEc4Z1pHVnNaWFJsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J6ZEdGMGRYTmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaR1ZzWlhSbFRXbHNaWE4wYjI1bEtHMXBiR1Z6ZEc5dVpTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEVSVXhGVkVVbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgzSmxjRzl6YVhSdmNubDlMMjFwYkdWemRHOXVaWE12Skh0dGFXeGxjM1J2Ym1WOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUJzWVdKbGJGeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwybHpjM1ZsY3k5c1lXSmxiSE12STJOeVpXRjBaUzFoTFd4aFltVnNYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2JHRmlaV3hFWVhSaElDMGdkR2hsSUd4aFltVnNJR1JsWm1sdWFYUnBiMjVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJRzlpYW1WamRDQnlaWEJ5WlhObGJuUnBibWNnZEdobElHeGhZbVZzWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaVXhoWW1Wc0tHeGhZbVZzUkdGMFlTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFUMU5VSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5eVpYQnZjMmwwYjNKNWZTOXNZV0psYkhOZ0xDQnNZV0psYkVSaGRHRXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dUR2x6ZENCMGFHVWdiR0ZpWld4eklHWnZjaUIwYUdVZ2NtVndiM05wZEc5eWVWeHVJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmFYTnpkV1Z6TDJ4aFltVnNjeThqYkdsemRDMWhiR3d0YkdGaVpXeHpMV1p2Y2kxMGFHbHpMWEpsY0c5emFYUnZjbmxjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQm1hV3gwWlhKcGJtY2diM0IwYVc5dWMxeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCaGNuSmhlU0J2WmlCc1lXSmxiSE5jYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnS2k5Y2JpQWdJR3hwYzNSTVlXSmxiSE1vYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgzSmxjRzl6YVhSdmNubDlMMnhoWW1Wc2MyQXNJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMlYwSUdFZ2JHRmlaV3hjYmlBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmx6YzNWbGN5OXNZV0psYkhNdkkyZGxkQzFoTFhOcGJtZHNaUzFzWVdKbGJGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYkdGaVpXd2dMU0IwYUdVZ2JtRnRaU0J2WmlCMGFHVWdiR0ZpWld3Z2RHOGdabVYwWTJoY2JpQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYkdGaVpXeGNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdLaTljYmlBZ0lHZGxkRXhoWW1Wc0tHeGhZbVZzTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZjbVZ3YjNOcGRHOXllWDB2YkdGaVpXeHpMeVI3YkdGaVpXeDlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkZaR2wwSUdFZ2JHRmlaV3hjYmlBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmx6YzNWbGN5OXNZV0psYkhNdkkzVndaR0YwWlMxaExXeGhZbVZzWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnNZV0psYkNBdElIUm9aU0J1WVcxbElHOW1JSFJvWlNCc1lXSmxiQ0IwYnlCbFpHbDBYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCc1lXSmxiRVJoZEdFZ0xTQjBhR1VnZFhCa1lYUmxjeUIwYnlCdFlXdGxJSFJ2SUhSb1pTQnNZV0psYkZ4dUlDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0IxY0dSaGRHVmtJR3hoWW1Wc1hHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDb3ZYRzRnSUNCbFpHbDBUR0ZpWld3b2JHRmlaV3dzSUd4aFltVnNSR0YwWVN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVFWUkRTQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmY21Wd2IzTnBkRzl5ZVgwdmJHRmlaV3h6THlSN2JHRmlaV3g5WUN3Z2JHRmlaV3hFWVhSaExDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxiR1YwWlNCaElHeGhZbVZzWEc0Z0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTlwYzNOMVpYTXZiR0ZpWld4ekx5TmtaV3hsZEdVdFlTMXNZV0psYkZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiR0ZpWld3Z0xTQjBhR1VnYm1GdFpTQnZaaUIwYUdVZ2JHRmlaV3dnZEc4Z1pHVnNaWFJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJSE4wWVhSMWMxeHVJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQXFMMXh1SUNBZ1pHVnNaWFJsVEdGaVpXd29iR0ZpWld3c0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblJFVk1SVlJGSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5eVpYQnZjMmwwYjNKNWZTOXNZV0psYkhNdkpIdHNZV0psYkgxZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnU1hOemRXVTdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SXNzdWUuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUmVxdWVzdGFibGUyID0gcmVxdWlyZSgnLi9SZXF1ZXN0YWJsZScpO1xuXG52YXIgX1JlcXVlc3RhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3RhYmxlMik7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbnZhciBsb2cgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KSgnZ2l0aHViOnNlYXJjaCcpO1xuXG4vKipcbiAqIFdyYXAgdGhlIFNlYXJjaCBBUElcbiAqL1xuXG52YXIgU2VhcmNoID0gZnVuY3Rpb24gKF9SZXF1ZXN0YWJsZSkge1xuICBfaW5oZXJpdHMoU2VhcmNoLCBfUmVxdWVzdGFibGUpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTZWFyY2hcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRzIC0gZGVmYXVsdHMgZm9yIHRoZSBzZWFyY2hcbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXBpQmFzZT1odHRwczovL2FwaS5naXRodWIuY29tXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAqL1xuICBmdW5jdGlvbiBTZWFyY2goZGVmYXVsdHMsIGF1dGgsIGFwaUJhc2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VhcmNoKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZWFyY2guX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZWFyY2gpKS5jYWxsKHRoaXMsIGF1dGgsIGFwaUJhc2UpKTtcblxuICAgIF90aGlzLl9fZGVmYXVsdHMgPSBfdGhpcy5fZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyhkZWZhdWx0cyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBzZWFyY2ggb3B0aW9uc1xuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvc2VhcmNoLyNwYXJhbWV0ZXJzXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFNlYXJjaC5QYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHEgLSB0aGUgcXVlcnkgdG8gbWFrZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc29ydCAtIHRoZSBzb3J0IGZpZWxkLCBvbmUgb2YgYHN0YXJzYCwgYGZvcmtzYCwgb3IgYHVwZGF0ZWRgLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIFtiZXN0IG1hdGNoXShodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3NlYXJjaC8jcmFua2luZy1zZWFyY2gtcmVzdWx0cylcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9yZGVyIC0gdGhlIG9yZGVyaW5nLCBlaXRoZXIgYGFzY2Agb3IgYGRlc2NgXG4gICAqL1xuICAvKipcbiAgICogUGVyZm9ybSBhIHNlYXJjaCBvbiB0aGUgR2l0SHViIEFQSVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBzY29wZSBvZiB0aGUgc2VhcmNoXG4gICAqIEBwYXJhbSB7U2VhcmNoLlBhcmFtc30gW3dpdGhPcHRpb25zXSAtIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmb3IgdGhlIHNlYXJjaFxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSByZXN1bHRzIG9mIHRoZSBzZWFyY2hcbiAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhTZWFyY2gsIFt7XG4gICAga2V5OiAnX3NlYXJjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZWFyY2gocGF0aCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciB3aXRoT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0ge307XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLl9fZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmVxdWVzdE9wdGlvbnNbcHJvcF0gPSBfdGhpczIuX19kZWZhdWx0c1twcm9wXTtcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmtleXMod2l0aE9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmVxdWVzdE9wdGlvbnNbcHJvcF0gPSB3aXRoT3B0aW9uc1twcm9wXTtcbiAgICAgIH0pO1xuXG4gICAgICBsb2coJ3NlYXJjaGluZyAnICsgcGF0aCArICcgd2l0aCBvcHRpb25zOicsIHJlcXVlc3RPcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXMoJy9zZWFyY2gvJyArIHBhdGgsIHJlcXVlc3RPcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VhcmNoIGZvciByZXBvc2l0b3JpZXNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvc2VhcmNoLyNzZWFyY2gtcmVwb3NpdG9yaWVzXG4gICAgICogQHBhcmFtIHtTZWFyY2guUGFyYW1zfSBbb3B0aW9uc10gLSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSByZXN1bHRzIG9mIHRoZSBzZWFyY2hcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZvclJlcG9zaXRvcmllcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvclJlcG9zaXRvcmllcyhvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3NlYXJjaCgncmVwb3NpdG9yaWVzJywgb3B0aW9ucywgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBmb3IgY29kZVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9zZWFyY2gvI3NlYXJjaC1jb2RlXG4gICAgICogQHBhcmFtIHtTZWFyY2guUGFyYW1zfSBbb3B0aW9uc10gLSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSByZXN1bHRzIG9mIHRoZSBzZWFyY2hcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZvckNvZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JDb2RlKG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VhcmNoKCdjb2RlJywgb3B0aW9ucywgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBmb3IgaXNzdWVzXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3NlYXJjaC8jc2VhcmNoLWlzc3Vlc1xuICAgICAqIEBwYXJhbSB7U2VhcmNoLlBhcmFtc30gW29wdGlvbnNdIC0gYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZvciB0aGUgc2VhcmNoXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0cyBvZiB0aGUgc2VhcmNoXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmb3JJc3N1ZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JJc3N1ZXMob3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZWFyY2goJ2lzc3VlcycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIHVzZXJzXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3NlYXJjaC8jc2VhcmNoLXVzZXJzXG4gICAgICogQHBhcmFtIHtTZWFyY2guUGFyYW1zfSBbb3B0aW9uc10gLSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSByZXN1bHRzIG9mIHRoZSBzZWFyY2hcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZvclVzZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yVXNlcnMob3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZWFyY2goJ3VzZXJzJywgb3B0aW9ucywgY2IpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWFyY2g7XG59KF9SZXF1ZXN0YWJsZTMuZGVmYXVsdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VhcmNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxObFlYSmphQzVxY3lKZExDSnVZVzFsY3lJNld5SnNiMmNpTENKVFpXRnlZMmdpTENKa1pXWmhkV3gwY3lJc0ltRjFkR2dpTENKaGNHbENZWE5sSWl3aVgxOWtaV1poZFd4MGN5SXNJbDluWlhSUGNIUnBiMjV6VjJsMGFFUmxabUYxYkhSeklpd2ljR0YwYUNJc0luZHBkR2hQY0hScGIyNXpJaXdpWTJJaUxDSjFibVJsWm1sdVpXUWlMQ0p5WlhGMVpYTjBUM0IwYVc5dWN5SXNJazlpYW1WamRDSXNJbXRsZVhNaUxDSm1iM0pGWVdOb0lpd2ljSEp2Y0NJc0lsOXlaWEYxWlhOMFFXeHNVR0ZuWlhNaUxDSnZjSFJwYjI1eklpd2lYM05sWVhKamFDSXNJbEpsY1hWbGMzUmhZbXhsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3p0QlFVOUJPenM3TzBGQlEwRTdPenM3T3pzN096czdLMlZCVWtFN096czdPenM3UVVGVFFTeEpRVUZOUVN4TlFVRk5MSEZDUVVGTkxHVkJRVTRzUTBGQldqczdRVUZGUVRzN096dEpRVWROUXl4Tk96czdRVUZEU0RzN096czdPMEZCVFVFc2EwSkJRVmxETEZGQlFWb3NSVUZCYzBKRExFbEJRWFJDTEVWQlFUUkNReXhQUVVFMVFpeEZRVUZ4UXp0QlFVRkJPenRCUVVGQkxHZElRVU0xUWtRc1NVRkVORUlzUlVGRGRFSkRMRTlCUkhOQ096dEJRVVZzUXl4VlFVRkxReXhWUVVGTUxFZEJRV3RDTEUxQlFVdERMSFZDUVVGTUxFTkJRVFpDU2l4UlFVRTNRaXhEUVVGc1FqdEJRVVpyUXp0QlFVZHdRenM3UVVGRlJEczdPenM3T3pzN08wRkJVMEU3T3pzN096czdPenM3T3pzMFFrRlJVVXNzU1N4RlFVRjNRenRCUVVGQk96dEJRVUZCTEZWQlFXeERReXhYUVVGclF5eDFSVUZCY0VJc1JVRkJiMEk3UVVGQlFTeFZRVUZvUWtNc1JVRkJaMElzZFVWQlFWaERMRk5CUVZjN08wRkJRemRETEZWQlFVbERMR2xDUVVGcFFpeEZRVUZ5UWp0QlFVTkJReXhoUVVGUFF5eEpRVUZRTEVOQlFWa3NTMEZCUzFJc1ZVRkJha0lzUlVGQk5rSlRMRTlCUVRkQ0xFTkJRWEZETEZWQlFVTkRMRWxCUVVRc1JVRkJWVHRCUVVNMVEwb3NkVUpCUVdWSkxFbEJRV1lzU1VGQmRVSXNUMEZCUzFZc1ZVRkJUQ3hEUVVGblFsVXNTVUZCYUVJc1EwRkJka0k3UVVGRFJpeFBRVVpFTzBGQlIwRklMR0ZCUVU5RExFbEJRVkFzUTBGQldVd3NWMEZCV2l4RlFVRjVRazBzVDBGQmVrSXNRMEZCYVVNc1ZVRkJRME1zU1VGQlJDeEZRVUZWTzBGQlEzaERTaXgxUWtGQlpVa3NTVUZCWml4SlFVRjFRbEFzV1VGQldVOHNTVUZCV2l4RFFVRjJRanRCUVVOR0xFOUJSa1E3TzBGQlNVRm1MSGxDUVVGcFFrOHNTVUZCYWtJc2NVSkJRWFZEU1N4alFVRjJRenRCUVVOQkxHRkJRVThzUzBGQlMwc3NaMEpCUVV3c1kwRkJhVU5VTEVsQlFXcERMRVZCUVhsRFNTeGpRVUY2UXl4RlFVRjVSRVlzUlVGQmVrUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08yOURRVTluUWxFc1R5eEZRVUZUVWl4RkxFVkJRVWs3UVVGRE1VSXNZVUZCVHl4TFFVRkxVeXhQUVVGTUxFTkJRV0VzWTBGQllpeEZRVUUyUWtRc1QwRkJOMElzUlVGQmMwTlNMRVZCUVhSRExFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzMFFrRlBVVkVzVHl4RlFVRlRVaXhGTEVWQlFVazdRVUZEYkVJc1lVRkJUeXhMUVVGTFV5eFBRVUZNTEVOQlFXRXNUVUZCWWl4RlFVRnhRa1FzVDBGQmNrSXNSVUZCT0VKU0xFVkJRVGxDTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM0UWtGUFZWRXNUeXhGUVVGVFVpeEZMRVZCUVVrN1FVRkRjRUlzWVVGQlR5eExRVUZMVXl4UFFVRk1MRU5CUVdFc1VVRkJZaXhGUVVGMVFrUXNUMEZCZGtJc1JVRkJaME5TTEVWQlFXaERMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czJRa0ZQVTFFc1R5eEZRVUZUVWl4RkxFVkJRVWs3UVVGRGJrSXNZVUZCVHl4TFFVRkxVeXhQUVVGTUxFTkJRV0VzVDBGQllpeEZRVUZ6UWtRc1QwRkJkRUlzUlVGQkswSlNMRVZCUVM5Q0xFTkJRVkE3UVVGRFJqczdPenRGUVhCR2FVSlZMSEZDT3p0QlFYVkdja0pETEU5QlFVOURMRTlCUVZBc1IwRkJhVUp3UWl4TlFVRnFRaUlzSW1acGJHVWlPaUpUWldGeVkyZ3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVCbWFXeGxYRzRnS2lCQVkyOXdlWEpwWjJoMElDQXlNREV6SUUxcFkyaGhaV3dnUVhWbWNtVnBkR1Z5SUNoRVpYWmxiRzl3YldWdWRDQlRaV1ZrS1NCaGJtUWdNakF4TmlCWllXaHZieUJKYm1NdVhHNGdLaUJBYkdsalpXNXpaU0FnSUNCTWFXTmxibk5sWkNCMWJtUmxjaUI3UUd4cGJtc2dhSFIwY0hNNkx5OXpjR1I0TG05eVp5OXNhV05sYm5ObGN5OUNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSXVhSFJ0YkNCQ1UwUXRNeTFEYkdGMWMyVXRRMnhsWVhKOUxseHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ1IybDBhSFZpTG1weklHbHpJR1p5WldWc2VTQmthWE4wY21saWRYUmhZbXhsTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0JTWlhGMVpYTjBZV0pzWlNCbWNtOXRJQ2N1TDFKbGNYVmxjM1JoWW14bEp6dGNibWx0Y0c5eWRDQmtaV0oxWnlCbWNtOXRJQ2RrWldKMVp5YzdYRzVqYjI1emRDQnNiMmNnUFNCa1pXSjFaeWduWjJsMGFIVmlPbk5sWVhKamFDY3BPMXh1WEc0dktpcGNiaUFxSUZkeVlYQWdkR2hsSUZObFlYSmphQ0JCVUVsY2JpQXFMMXh1WTJ4aGMzTWdVMlZoY21Ob0lHVjRkR1Z1WkhNZ1VtVnhkV1Z6ZEdGaWJHVWdlMXh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQlRaV0Z5WTJoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JrWldaaGRXeDBjeUF0SUdSbFptRjFiSFJ6SUdadmNpQjBhR1VnYzJWaGNtTm9YRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbUYxZEdoOUlGdGhkWFJvWFNBdElHbHVabTl5YldGMGFXOXVJSEpsY1hWcGNtVmtJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSb2RXSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYllYQnBRbUZ6WlQxb2RIUndjem92TDJGd2FTNW5hWFJvZFdJdVkyOXRYU0F0SUhSb1pTQmlZWE5sSUVkcGRHaDFZaUJCVUVrZ1ZWSk1YRzRnSUNBZ0tpOWNiaUFnSUdOdmJuTjBjblZqZEc5eUtHUmxabUYxYkhSekxDQmhkWFJvTENCaGNHbENZWE5sS1NCN1hHNGdJQ0FnSUNCemRYQmxjaWhoZFhSb0xDQmhjR2xDWVhObEtUdGNiaUFnSUNBZ0lIUm9hWE11WDE5a1pXWmhkV3gwY3lBOUlIUm9hWE11WDJkbGRFOXdkR2x2Ym5OWGFYUm9SR1ZtWVhWc2RITW9aR1ZtWVhWc2RITXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFRjJZV2xzWVdKc1pTQnpaV0Z5WTJnZ2IzQjBhVzl1YzF4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNObFlYSmphQzhqY0dGeVlXMWxkR1Z5YzF4dUlDQWdJQ29nUUhSNWNHVmtaV1lnZTA5aWFtVmpkSDBnVTJWaGNtTm9MbEJoY21GdGMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhFZ0xTQjBhR1VnY1hWbGNua2dkRzhnYldGclpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhOdmNuUWdMU0IwYUdVZ2MyOXlkQ0JtYVdWc1pDd2diMjVsSUc5bUlHQnpkR0Z5YzJBc0lHQm1iM0pyYzJBc0lHOXlJR0IxY0dSaGRHVmtZQzVjYmlBZ0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVSbFptRjFiSFFnYVhNZ1cySmxjM1FnYldGMFkyaGRLR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmMyVmhjbU5vTHlOeVlXNXJhVzVuTFhObFlYSmphQzF5WlhOMWJIUnpLVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHOXlaR1Z5SUMwZ2RHaGxJRzl5WkdWeWFXNW5MQ0JsYVhSb1pYSWdZR0Z6WTJBZ2IzSWdZR1JsYzJOZ1hHNGdJQ0FnS2k5Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVUdWeVptOXliU0JoSUhObFlYSmphQ0J2YmlCMGFHVWdSMmwwU0hWaUlFRlFTVnh1SUNBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCd1lYUm9JQzBnZEdobElITmpiM0JsSUc5bUlIUm9aU0J6WldGeVkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1UyVmhjbU5vTGxCaGNtRnRjMzBnVzNkcGRHaFBjSFJwYjI1elhTQXRJR0ZrWkdsMGFXOXVZV3dnY0dGeVlXMWxkR1Z5Y3lCbWIzSWdkR2hsSUhObFlYSmphRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdjbVZ6ZFd4MGN5QnZaaUIwYUdVZ2MyVmhjbU5vWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUY5elpXRnlZMmdvY0dGMGFDd2dkMmwwYUU5d2RHbHZibk1nUFNCN2ZTd2dZMklnUFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lHeGxkQ0J5WlhGMVpYTjBUM0IwYVc5dWN5QTlJSHQ5TzF4dUlDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTVmWDJSbFptRjFiSFJ6S1M1bWIzSkZZV05vS0Nod2NtOXdLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQnlaWEYxWlhOMFQzQjBhVzl1YzF0d2NtOXdYU0E5SUhSb2FYTXVYMTlrWldaaGRXeDBjMXR3Y205d1hUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vZDJsMGFFOXdkR2x2Ym5NcExtWnZja1ZoWTJnb0tIQnliM0FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJSEpsY1hWbGMzUlBjSFJwYjI1elczQnliM0JkSUQwZ2QybDBhRTl3ZEdsdmJuTmJjSEp2Y0YwN1hHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdiRzluS0dCelpXRnlZMmhwYm1jZ0pIdHdZWFJvZlNCM2FYUm9JRzl3ZEdsdmJuTTZZQ3dnY21WeGRXVnpkRTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1JCYkd4UVlXZGxjeWhnTDNObFlYSmphQzhrZTNCaGRHaDlZQ3dnY21WeGRXVnpkRTl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJUWldGeVkyZ2dabTl5SUhKbGNHOXphWFJ2Y21sbGMxeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzTmxZWEpqYUM4amMyVmhjbU5vTFhKbGNHOXphWFJ2Y21sbGMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0VFpXRnlZMmd1VUdGeVlXMXpmU0JiYjNCMGFXOXVjMTBnTFNCaFpHUnBkR2x2Ym1Gc0lIQmhjbUZ0WlhSbGNuTWdabTl5SUhSb1pTQnpaV0Z5WTJoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhKbGMzVnNkSE1nYjJZZ2RHaGxJSE5sWVhKamFGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQm1iM0pTWlhCdmMybDBiM0pwWlhNb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5elpXRnlZMmdvSjNKbGNHOXphWFJ2Y21sbGN5Y3NJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJUWldGeVkyZ2dabTl5SUdOdlpHVmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXpaV0Z5WTJndkkzTmxZWEpqYUMxamIyUmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxTmxZWEpqYUM1UVlYSmhiWE45SUZ0dmNIUnBiMjV6WFNBdElHRmtaR2wwYVc5dVlXd2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSE5sWVhKamFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2NtVnpkV3gwY3lCdlppQjBhR1VnYzJWaGNtTm9YRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR1p2Y2tOdlpHVW9iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpaV0Z5WTJnb0oyTnZaR1VuTENCdmNIUnBiMjV6TENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1UyVmhjbU5vSUdadmNpQnBjM04xWlhOY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5elpXRnlZMmd2STNObFlYSmphQzFwYzNOMVpYTmNiaUFnSUNBcUlFQndZWEpoYlNCN1UyVmhjbU5vTGxCaGNtRnRjMzBnVzI5d2RHbHZibk5kSUMwZ1lXUmthWFJwYjI1aGJDQndZWEpoYldWMFpYSnpJR1p2Y2lCMGFHVWdjMlZoY21Ob1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCeVpYTjFiSFJ6SUc5bUlIUm9aU0J6WldGeVkyaGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdabTl5U1hOemRXVnpLRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMlZoY21Ob0tDZHBjM04xWlhNbkxDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dVMlZoY21Ob0lHWnZjaUIxYzJWeWMxeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzTmxZWEpqYUM4amMyVmhjbU5vTFhWelpYSnpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxTmxZWEpqYUM1UVlYSmhiWE45SUZ0dmNIUnBiMjV6WFNBdElHRmtaR2wwYVc5dVlXd2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSE5sWVhKamFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2NtVnpkV3gwY3lCdlppQjBhR1VnYzJWaGNtTm9YRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR1p2Y2xWelpYSnpLRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMlZoY21Ob0tDZDFjMlZ5Y3ljc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCVFpXRnlZMmc3WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlYXJjaC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbi8qKlxuICogUmF0ZUxpbWl0IGFsbG93cyB1c2VycyB0byBxdWVyeSB0aGVpciByYXRlLWxpbWl0IHN0YXR1c1xuICovXG52YXIgUmF0ZUxpbWl0ID0gZnVuY3Rpb24gKF9SZXF1ZXN0YWJsZSkge1xuICBfaW5oZXJpdHMoUmF0ZUxpbWl0LCBfUmVxdWVzdGFibGUpO1xuXG4gIC8qKlxuICAgKiBjb25zdHJ1Y3QgYSBSYXRlTGltaXRcbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBhdXRoIC0gdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRIdWJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICovXG4gIGZ1bmN0aW9uIFJhdGVMaW1pdChhdXRoLCBhcGlCYXNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhdGVMaW1pdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJhdGVMaW1pdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJhdGVMaW1pdCkpLmNhbGwodGhpcywgYXV0aCwgYXBpQmFzZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJ5IHRoZSBjdXJyZW50IHJhdGUgbGltaXRcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JhdGVfbGltaXQvXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHJhdGUtbGltaXQgZGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFJhdGVMaW1pdCwgW3tcbiAgICBrZXk6ICdnZXRSYXRlTGltaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYXRlTGltaXQoY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JhdGVfbGltaXQnLCBudWxsLCBjYik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJhdGVMaW1pdDtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSYXRlTGltaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpoZEdWTWFXMXBkQzVxY3lKZExDSnVZVzFsY3lJNld5SlNZWFJsVEdsdGFYUWlMQ0poZFhSb0lpd2lZWEJwUW1GelpTSXNJbU5pSWl3aVgzSmxjWFZsYzNRaUxDSlNaWEYxWlhOMFlXSnNaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGUFFUczdPenM3T3pzN096c3JaVUZRUVRzN096czdPenRCUVZOQk96czdTVUZIVFVFc1V6czdPMEZCUTBnN096czdPenRCUVUxQkxIRkNRVUZaUXl4SlFVRmFMRVZCUVd0Q1F5eFBRVUZzUWl4RlFVRXlRanRCUVVGQk96dEJRVUZCTEdsSVFVTnNRa1FzU1VGRWEwSXNSVUZEV2tNc1QwRkVXVHRCUVVVeFFqczdRVUZGUkRzN096czdPenM3T3p0cFEwRk5ZVU1zUlN4RlFVRkpPMEZCUTJRc1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4RlFVRnhRaXhoUVVGeVFpeEZRVUZ2UXl4SlFVRndReXhGUVVFd1EwUXNSVUZCTVVNc1EwRkJVRHRCUVVOR096czdPMFZCYmtKdlFrVXNjVUk3TzBGQmMwSjRRa01zVDBGQlQwTXNUMEZCVUN4SFFVRnBRbEFzVTBGQmFrSWlMQ0ptYVd4bElqb2lVbUYwWlV4cGJXbDBMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCQVptbHNaVnh1SUNvZ1FHTnZjSGx5YVdkb2RDQWdNakF4TXlCTmFXTm9ZV1ZzSUVGMVpuSmxhWFJsY2lBb1JHVjJaV3h2Y0cxbGJuUWdVMlZsWkNrZ1lXNWtJREl3TVRZZ1dXRm9iMjhnU1c1akxseHVJQ29nUUd4cFkyVnVjMlVnSUNBZ1RHbGpaVzV6WldRZ2RXNWtaWElnZTBCc2FXNXJJR2gwZEhCek9pOHZjM0JrZUM1dmNtY3ZiR2xqWlc1elpYTXZRbE5FTFRNdFEyeGhkWE5sTFVOc1pXRnlMbWgwYld3Z1FsTkVMVE10UTJ4aGRYTmxMVU5zWldGeWZTNWNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lFZHBkR2gxWWk1cWN5QnBjeUJtY21WbGJIa2daR2x6ZEhKcFluVjBZV0pzWlM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnVW1WeGRXVnpkR0ZpYkdVZ1puSnZiU0FuTGk5U1pYRjFaWE4wWVdKc1pTYzdYRzVjYmk4cUtseHVJQ29nVW1GMFpVeHBiV2wwSUdGc2JHOTNjeUIxYzJWeWN5QjBieUJ4ZFdWeWVTQjBhR1ZwY2lCeVlYUmxMV3hwYldsMElITjBZWFIxYzF4dUlDb3ZYRzVqYkdGemN5QlNZWFJsVEdsdGFYUWdaWGgwWlc1a2N5QlNaWEYxWlhOMFlXSnNaU0I3WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJR052Ym5OMGNuVmpkQ0JoSUZKaGRHVk1hVzFwZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1aGRYUm9mU0JoZFhSb0lDMGdkR2hsSUdOeVpXUmxiblJwWVd4eklIUnZJR0YxZEdobGJuUnBZMkYwWlNCMGJ5QkhhWFJJZFdKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiWVhCcFFtRnpaVjBnTFNCMGFHVWdZbUZ6WlNCSGFYUm9kV0lnUVZCSklGVlNURnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JqYjI1emRISjFZM1J2Y2loaGRYUm9MQ0JoY0dsQ1lYTmxLU0I3WEc0Z0lDQWdJQ0J6ZFhCbGNpaGhkWFJvTENCaGNHbENZWE5sS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJSZFdWeWVTQjBhR1VnWTNWeWNtVnVkQ0J5WVhSbElHeHBiV2wwWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21GMFpWOXNhVzFwZEM5Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhKaGRHVXRiR2x0YVhRZ1pHRjBZVnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSU1lYUmxUR2x0YVhRb1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0FuTDNKaGRHVmZiR2x0YVhRbkxDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1GMFpVeHBiV2wwTzF4dUlsMTlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJhdGVMaW1pdC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1JlcXVlc3RhYmxlMiA9IHJlcXVpcmUoJy4vUmVxdWVzdGFibGUnKTtcblxudmFyIF9SZXF1ZXN0YWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXF1ZXN0YWJsZTIpO1xuXG52YXIgX3V0ZiA9IHJlcXVpcmUoJ3V0ZjgnKTtcblxudmFyIF91dGYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRmKTtcblxudmFyIF9qc0Jhc2UgPSByZXF1aXJlKCdqcy1iYXNlNjQnKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBjb3B5cmlnaHQgIDIwMTMgTWljaGFlbCBBdWZyZWl0ZXIgKERldmVsb3BtZW50IFNlZWQpIGFuZCAyMDE2IFlhaG9vIEluYy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBsaWNlbnNlICAgIExpY2Vuc2VkIHVuZGVyIHtAbGluayBodHRwczovL3NwZHgub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZS1DbGVhci5odG1sIEJTRC0zLUNsYXVzZS1DbGVhcn0uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICBHaXRodWIuanMgaXMgZnJlZWx5IGRpc3RyaWJ1dGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxudmFyIGxvZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKCdnaXRodWI6cmVwb3NpdG9yeScpO1xuXG4vKipcbiAqIFJlcG9zaXRvcnkgZW5jYXBzdWxhdGVzIHRoZSBmdW5jdGlvbmFsaXR5IHRvIGNyZWF0ZSwgcXVlcnksIGFuZCBtb2RpZnkgZmlsZXMuXG4gKi9cblxudmFyIFJlcG9zaXRvcnkgPSBmdW5jdGlvbiAoX1JlcXVlc3RhYmxlKSB7XG4gICBfaW5oZXJpdHMoUmVwb3NpdG9yeSwgX1JlcXVlc3RhYmxlKTtcblxuICAgLyoqXG4gICAgKiBDcmVhdGUgYSBSZXBvc2l0b3J5LlxuICAgICogQHBhcmFtIHtzdHJpbmd9IGZ1bGxuYW1lIC0gdGhlIGZ1bGwgbmFtZSBvZiB0aGUgcmVwb3NpdG9yeVxuICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW2FwaUJhc2U9aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbV0gLSB0aGUgYmFzZSBHaXRodWIgQVBJIFVSTFxuICAgICovXG4gICBmdW5jdGlvbiBSZXBvc2l0b3J5KGZ1bGxuYW1lLCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVwb3NpdG9yeSk7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZXBvc2l0b3J5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVwb3NpdG9yeSkpLmNhbGwodGhpcywgYXV0aCwgYXBpQmFzZSkpO1xuXG4gICAgICBfdGhpcy5fX2Z1bGxuYW1lID0gZnVsbG5hbWU7XG4gICAgICBfdGhpcy5fX2N1cnJlbnRUcmVlID0ge1xuICAgICAgICAgYnJhbmNoOiBudWxsLFxuICAgICAgICAgc2hhOiBudWxsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgfVxuXG4gICAvKipcbiAgICAqIEdldCBhIHJlZmVyZW5jZVxuICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC9yZWZzLyNnZXQtYS1yZWZlcmVuY2VcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgLSB0aGUgcmVmZXJlbmNlIHRvIGdldFxuICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVmZXJlbmNlJ3MgcmVmU3BlYyBvciBhIGxpc3Qgb2YgcmVmU3BlY3MgdGhhdCBtYXRjaCBgcmVmYFxuICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICovXG5cblxuICAgX2NyZWF0ZUNsYXNzKFJlcG9zaXRvcnksIFt7XG4gICAgICBrZXk6ICdnZXRSZWYnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlZihyZWYsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvcmVmcy8nICsgcmVmLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgcmVmZXJlbmNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2l0L3JlZnMvI2NyZWF0ZS1hLXJlZmVyZW5jZVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIHJlZlxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVmXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlUmVmJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSZWYob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvcmVmcycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZWxldGUgYSByZWZlcmVuY2VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXQvcmVmcy8jZGVsZXRlLWEtcmVmZXJlbmNlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIC0gdGhlIG5hbWUgb2YgdGhlIHJlZiB0byBkZWx0ZVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWxcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdkZWxldGVSZWYnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJlZihyZWYsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvcmVmcy8nICsgcmVmLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGVsZXRlIGEgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNkZWxldGUtYS1yZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2RlbGV0ZVJlcG8nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJlcG8oY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSB0YWdzIG9uIGEgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNsaXN0LXRhZ3NcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHRhZyBkYXRhXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFRhZ3MnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RUYWdzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy90YWdzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIG9wZW4gcHVsbCByZXF1ZXN0cyBvbiB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3B1bGxzLyNsaXN0LXB1bGwtcmVxdWVzdHNcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0byBmaWx0ZXIgdGhlIHNlYXJjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBQUnNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0UHVsbFJlcXVlc3RzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0UHVsbFJlcXVlc3RzKG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3B1bGxzJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIHB1bGwgcmVxdWVzdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3B1bGxzLyNnZXQtYS1zaW5nbGUtcHVsbC1yZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIC0gdGhlIFBSIHlvdSB3aXNoIHRvIGZldGNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBQUiBmcm9tIHRoZSBBUElcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRQdWxsUmVxdWVzdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHVsbFJlcXVlc3QobnVtYmVyLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcHVsbHMvJyArIG51bWJlciwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIGZpbGVzIG9mIGEgc3BlY2lmaWMgcHVsbCByZXF1ZXN0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHVsbHMvI2xpc3QtcHVsbC1yZXF1ZXN0cy1maWxlc1xuICAgICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBudW1iZXIgLSB0aGUgUFIgeW91IHdpc2ggdG8gZmV0Y2hcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgZmlsZXMgZnJvbSB0aGUgQVBJXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFB1bGxSZXF1ZXN0RmlsZXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RQdWxsUmVxdWVzdEZpbGVzKG51bWJlciwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3B1bGxzLycgKyBudW1iZXIgKyAnL2ZpbGVzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENvbXBhcmUgdHdvIGJyYW5jaGVzL2NvbW1pdHMvcmVwb3NpdG9yaWVzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29tbWl0cy8jY29tcGFyZS10d28tY29tbWl0c1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgLSB0aGUgYmFzZSBjb21taXRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZWFkIC0gdGhlIGhlYWQgY29tbWl0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tcGFyaXNvblxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBhcmVCcmFuY2hlcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGFyZUJyYW5jaGVzKGJhc2UsIGhlYWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9jb21wYXJlLycgKyBiYXNlICsgJy4uLicgKyBoZWFkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCBhbGwgdGhlIGJyYW5jaGVzIGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNsaXN0LWJyYW5jaGVzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBicmFuY2hlc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RCcmFuY2hlcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdEJyYW5jaGVzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9icmFuY2hlcycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgYSByYXcgYmxvYiBmcm9tIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2l0L2Jsb2JzLyNnZXQtYS1ibG9iXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2hhIC0gdGhlIHNoYSBvZiB0aGUgYmxvYiB0byBmZXRjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGJsb2IgZnJvbSB0aGUgQVBJXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0QmxvYicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QmxvYihzaGEsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvYmxvYnMvJyArIHNoYSwgbnVsbCwgY2IsICdyYXcnKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgYSBzaW5nbGUgYnJhbmNoXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvYnJhbmNoZXMvI2dldC1icmFuY2hcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBicmFuY2ggLSB0aGUgbmFtZSBvZiB0aGUgYnJhbmNoIHRvIGZldGNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgYnJhbmNoIGZyb20gdGhlIEFQSVxuICAgICAgICogQHJldHVybnMge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRCcmFuY2gnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJyYW5jaChicmFuY2gsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9icmFuY2hlcy8nICsgYnJhbmNoLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGEgY29tbWl0IGZyb20gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9jb21taXRzLyNnZXQtYS1zaW5nbGUtY29tbWl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2hhIC0gdGhlIHNoYSBmb3IgdGhlIGNvbW1pdCB0byBmZXRjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGNvbW1pdCBkYXRhXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0Q29tbWl0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb21taXQoc2hhLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L2NvbW1pdHMvJyArIHNoYSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIGNvbW1pdHMgb24gYSByZXBvc2l0b3J5LCBvcHRpb25hbGx5IGZpbHRlcmluZyBieSBwYXRoLCBhdXRob3Igb3IgdGltZSByYW5nZVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2NvbW1pdHMvI2xpc3QtY29tbWl0cy1vbi1hLXJlcG9zaXRvcnlcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSB0aGUgZmlsdGVyaW5nIG9wdGlvbnMgZm9yIGNvbW1pdHNcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zaGFdIC0gdGhlIFNIQSBvciBicmFuY2ggdG8gc3RhcnQgZnJvbVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBhdGhdIC0gdGhlIHBhdGggdG8gc2VhcmNoIG9uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYXV0aG9yXSAtIHRoZSBjb21taXQgYXV0aG9yXG4gICAgICAgKiBAcGFyYW0geyhEYXRlfHN0cmluZyl9IFtvcHRpb25zLnNpbmNlXSAtIG9ubHkgY29tbWl0cyBhZnRlciB0aGlzIGRhdGUgd2lsbCBiZSByZXR1cm5lZFxuICAgICAgICogQHBhcmFtIHsoRGF0ZXxzdHJpbmcpfSBbb3B0aW9ucy51bnRpbF0gLSBvbmx5IGNvbW1pdHMgYmVmb3JlIHRoaXMgZGF0ZSB3aWxsIGJlIHJldHVybmVkXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBjb21taXRzIGZvdW5kIG1hdGNoaW5nIHRoZSBjcml0ZXJpYVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RDb21taXRzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0Q29tbWl0cyhvcHRpb25zLCBjYikge1xuICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgIH1cbiAgICAgICAgIG9wdGlvbnMuc2luY2UgPSB0aGlzLl9kYXRlVG9JU08ob3B0aW9ucy5zaW5jZSk7XG4gICAgICAgICBvcHRpb25zLnVudGlsID0gdGhpcy5fZGF0ZVRvSVNPKG9wdGlvbnMudW50aWwpO1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9jb21taXRzJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldHMgYSBzaW5nbGUgY29tbWl0IGluZm9ybWF0aW9uIGZvciBhIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9jb21taXRzLyNnZXQtYS1zaW5nbGUtY29tbWl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIC0gdGhlIHJlZmVyZW5jZSBmb3IgdGhlIGNvbW1pdC1pc2hcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBjb21taXQgaW5mb3JtYXRpb25cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRTaW5nbGVDb21taXQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNpbmdsZUNvbW1pdChyZWYsIGNiKSB7XG4gICAgICAgICByZWYgPSByZWYgfHwgJyc7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9jb21taXRzLycgKyByZWYsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhhIHNoYSBmb3IgYSBwYXJ0aWN1bGFyIG9iamVjdCBpbiB0aGUgcmVwb3NpdG9yeS4gVGhpcyBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29udGVudHMvI2dldC1jb250ZW50c1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFticmFuY2hdIC0gdGhlIGJyYW5jaCB0byBsb29rIGluLCBvciB0aGUgcmVwb3NpdG9yeSdzIGRlZmF1bHQgYnJhbmNoIGlmIG9taXR0ZWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggb2YgdGhlIGZpbGUgb3IgZGlyZWN0b3J5XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSBhIGRlc2NyaXB0aW9uIG9mIHRoZSByZXF1ZXN0ZWQgb2JqZWN0LCBpbmNsdWRpbmcgYSBgU0hBYCBwcm9wZXJ0eVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldFNoYScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2hhKGJyYW5jaCwgcGF0aCwgY2IpIHtcbiAgICAgICAgIGJyYW5jaCA9IGJyYW5jaCA/ICc/cmVmPScgKyBicmFuY2ggOiAnJztcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2NvbnRlbnRzLycgKyBwYXRoICsgYnJhbmNoLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCB0aGUgY29tbWl0IHN0YXR1c2VzIGZvciBhIHBhcnRpY3VsYXIgc2hhLCBicmFuY2gsIG9yIHRhZ1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3N0YXR1c2VzLyNsaXN0LXN0YXR1c2VzLWZvci1hLXNwZWNpZmljLXJlZlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNoYSAtIHRoZSBzaGEsIGJyYW5jaCwgb3IgdGFnIHRvIGdldCBzdGF0dXNlcyBmb3JcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHN0YXR1c2VzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFN0YXR1c2VzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0U3RhdHVzZXMoc2hhLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29tbWl0cy8nICsgc2hhICsgJy9zdGF0dXNlcycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIGNvbWJpbmVkIHZpZXcgb2YgY29tbWl0IHN0YXR1c2VzIGZvciBhIHBhcnRpY3VsYXIgc2hhLCBicmFuY2gsIG9yIHRhZ1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3N0YXR1c2VzLyNnZXQtdGhlLWNvbWJpbmVkLXN0YXR1cy1mb3ItYS1zcGVjaWZpYy1yZWZcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaGEgLSB0aGUgc2hhLCBicmFuY2gsIG9yIHRhZyB0byBnZXQgdGhlIGNvbWJpbmVkIHN0YXR1cyBmb3JcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBjb21iaW5lZCBzdGF0dXNcbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0Q29tYmluZWRTdGF0dXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbWJpbmVkU3RhdHVzKHNoYSwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2NvbW1pdHMvJyArIHNoYSArICcvc3RhdHVzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBhIGRlc2NyaXB0aW9uIG9mIGEgZ2l0IHRyZWVcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9naXQvdHJlZXMvI2dldC1hLXRyZWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0cmVlU0hBIC0gdGhlIFNIQSBvZiB0aGUgdHJlZSB0byBmZXRjaFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGNhbGxiYWNrIGRhdGFcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRUcmVlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmVlKHRyZWVTSEEsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvdHJlZXMvJyArIHRyZWVTSEEsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGUgYSBibG9iXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2l0L2Jsb2JzLyNjcmVhdGUtYS1ibG9iXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8QnVmZmVyfEJsb2IpfSBjb250ZW50IC0gdGhlIGNvbnRlbnQgdG8gYWRkIHRvIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgZGV0YWlscyBvZiB0aGUgY3JlYXRlZCBibG9iXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlQmxvYicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQmxvYihjb250ZW50LCBjYikge1xuICAgICAgICAgdmFyIHBvc3RCb2R5ID0gdGhpcy5fZ2V0Q29udGVudE9iamVjdChjb250ZW50KTtcblxuICAgICAgICAgbG9nKCdzZW5kaW5nIGNvbnRlbnQnLCBwb3N0Qm9keSk7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L2Jsb2JzJywgcG9zdEJvZHksIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHByb3ZpZGVkIGNvbnRlbnRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcnxCbG9ifSBjb250ZW50IC0gdGhlIGNvbnRlbnQgdG8gc2VuZCB0byB0aGUgc2VydmVyXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSByZXByZXNlbnRhdGlvbiBvZiBgY29udGVudGAgZm9yIHRoZSBHaXRIdWIgQVBJXG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnX2dldENvbnRlbnRPYmplY3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDb250ZW50T2JqZWN0KGNvbnRlbnQpIHtcbiAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGxvZygnY29udGV0IGlzIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgY29udGVudDogX3V0ZjIuZGVmYXVsdC5lbmNvZGUoY29udGVudCksXG4gICAgICAgICAgICAgICBlbmNvZGluZzogJ3V0Zi04J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgY29udGVudCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgICAgbG9nKCdXZSBhcHBlYXIgdG8gYmUgaW4gTm9kZScpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudG9TdHJpbmcoJ2Jhc2U2NCcpLFxuICAgICAgICAgICAgICAgZW5jb2Rpbmc6ICdiYXNlNjQnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgY29udGVudCBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICAgIGxvZygnV2UgYXBwZWFyIHRvIGJlIGluIHRoZSBicm93c2VyJyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgY29udGVudDogX2pzQmFzZS5CYXNlNjQuZW5jb2RlKGNvbnRlbnQpLFxuICAgICAgICAgICAgICAgZW5jb2Rpbmc6ICdiYXNlNjQnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIGxvZygnTm90IHN1cmUgd2hhdCB0aGlzIGNvbnRlbnQgaXM6ICcgKyAodHlwZW9mIGNvbnRlbnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbnRlbnQpKSArICcsICcgKyBKU09OLnN0cmluZ2lmeShjb250ZW50KSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29udGVudCBwYXNzZWQgdG8gcG9zdEJsb2IuIE11c3QgYmUgc3RyaW5nIG9yIEJ1ZmZlciAobm9kZSkgb3IgQmxvYiAod2ViKScpO1xuICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFVwZGF0ZSBhIHRyZWUgaW4gR2l0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2l0L3RyZWVzLyNjcmVhdGUtYS10cmVlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVRyZWVTSEEgLSB0aGUgU0hBIG9mIHRoZSB0cmVlIHRvIHVwZGF0ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSB0aGUgcGF0aCBmb3IgdGhlIG5ldyBmaWxlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmxvYlNIQSAtIHRoZSBTSEEgZm9yIHRoZSBibG9iIHRvIHB1dCBhdCBgcGF0aGBcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBuZXcgdHJlZSB0aGF0IGlzIGNyZWF0ZWRcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgUmVwb3NpdG9yeSNjcmVhdGVUcmVlfSBpbnN0ZWFkXG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlVHJlZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlVHJlZShiYXNlVHJlZVNIQSwgcGF0aCwgYmxvYlNIQSwgY2IpIHtcbiAgICAgICAgIHZhciBuZXdUcmVlID0ge1xuICAgICAgICAgICAgYmFzZV90cmVlOiBiYXNlVHJlZVNIQSwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgdHJlZTogW3tcbiAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgICAgICAgICBzaGE6IGJsb2JTSEEsXG4gICAgICAgICAgICAgICBtb2RlOiAnMTAwNjQ0JyxcbiAgICAgICAgICAgICAgIHR5cGU6ICdibG9iJ1xuICAgICAgICAgICAgfV1cbiAgICAgICAgIH07XG5cbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9naXQvdHJlZXMnLCBuZXdUcmVlLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgbmV3IHRyZWUgaW4gZ2l0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvZ2l0L3RyZWVzLyNjcmVhdGUtYS10cmVlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gdHJlZSAtIHRoZSB0cmVlIHRvIGNyZWF0ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VTSEEgLSB0aGUgcm9vdCBzaGEgb2YgdGhlIHRyZWVcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBuZXcgdHJlZSB0aGF0IGlzIGNyZWF0ZWRcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjcmVhdGVUcmVlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUcmVlKHRyZWUsIGJhc2VTSEEsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvZ2l0L3RyZWVzJywge1xuICAgICAgICAgICAgdHJlZTogdHJlZSxcbiAgICAgICAgICAgIGJhc2VfdHJlZTogYmFzZVNIQSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICAgfSwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZCBhIGNvbW1pdCB0byB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC9jb21taXRzLyNjcmVhdGUtYS1jb21taXRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnQgLSB0aGUgU0hBIG9mIHRoZSBwYXJlbnQgY29tbWl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJlZSAtIHRoZSBTSEEgb2YgdGhlIHRyZWUgZm9yIHRoaXMgY29tbWl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIHRoZSBjb21taXQgbWVzc2FnZVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGNvbW1pdCBvcHRpb25zXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuYXV0aG9yXSAtIHRoZSBhdXRob3Igb2YgdGhlIGNvbW1pdFxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmNvbW1pdGVyXSAtIHRoZSBjb21taXR0ZXJcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBjb21taXQgdGhhdCBpcyBjcmVhdGVkXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY29tbWl0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21taXQocGFyZW50LCB0cmVlLCBtZXNzYWdlLCBvcHRpb25zLCBjYikge1xuICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2IgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgfVxuXG4gICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICB0cmVlOiB0cmVlLFxuICAgICAgICAgICAgcGFyZW50czogW3BhcmVudF1cbiAgICAgICAgIH07XG5cbiAgICAgICAgIGRhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCBkYXRhKTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2dpdC9jb21taXRzJywgZGF0YSwgY2IpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBfdGhpczIuX19jdXJyZW50VHJlZS5zaGEgPSByZXNwb25zZS5kYXRhLnNoYTsgLy8gVXBkYXRlIGxhdGVzdCBjb21taXRcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFVwZGF0ZSBhIHJlZlxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2dpdC9yZWZzLyN1cGRhdGUtYS1yZWZlcmVuY2VcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgLSB0aGUgcmVmIHRvIHVwZGF0ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1pdFNIQSAtIHRoZSBTSEEgdG8gcG9pbnQgdGhlIHJlZmVyZW5jZSB0b1xuICAgICAgICogQHBhcmFtIHtib29sZWFufSBmb3JjZSAtIGluZGljYXRlcyB3aGV0aGVyIHRvIGZvcmNlIG9yIGVuc3VyZSBhIGZhc3QtZm9yd2FyZCB1cGRhdGVcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSB1cGRhdGVkIHJlZiBiYWNrXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlSGVhZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSGVhZChyZWYsIGNvbW1pdFNIQSwgZm9yY2UsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2dpdC9yZWZzLycgKyByZWYsIHtcbiAgICAgICAgICAgIHNoYTogY29tbWl0U0hBLFxuICAgICAgICAgICAgZm9yY2U6IGZvcmNlXG4gICAgICAgICB9LCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVXBkYXRlIGNvbW1pdCBzdGF0dXNcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9zdGF0dXNlcy9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21taXRTSEEgLSB0aGUgU0hBIG9mIHRoZSBjb21taXQgdGhhdCBzaG91bGQgYmUgdXBkYXRlZFxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBDb21taXQgc3RhdHVzIHBhcmFtZXRlcnNcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnN0YXRlIC0gVGhlIHN0YXRlIG9mIHRoZSBzdGF0dXMuIENhbiBiZSBvbmUgb2Y6IHBlbmRpbmcsIHN1Y2Nlc3MsIGVycm9yLCBvciBmYWlsdXJlLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnRhcmdldF91cmxdIC0gVGhlIHRhcmdldCBVUkwgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyBzdGF0dXMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZGVzY3JpcHRpb25dIC0gQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgc3RhdHVzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNvbnRleHRdIC0gQSBzdHJpbmcgbGFiZWwgdG8gZGlmZmVyZW50aWF0ZSB0aGlzIHN0YXR1cyBhbW9uZyBDSSBzeXN0ZW1zLlxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIHVwZGF0ZWQgY29tbWl0IGJhY2tcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGVTdGF0dXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhjb21taXRTSEEsIG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvc3RhdHVzZXMvJyArIGNvbW1pdFNIQSwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFVwZGF0ZSByZXBvc2l0b3J5IGluZm9ybWF0aW9uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvI2VkaXRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gTmV3IHBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIHNldCB0byB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubmFtZSAtIE5hbWUgb2YgdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kZXNjcmlwdGlvbl0gLSBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaG9tZXBhZ2VdIC0gQSBVUkwgd2l0aCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnByaXZhdGVdIC0gRWl0aGVyIHRydWUgdG8gbWFrZSB0aGUgcmVwb3NpdG9yeSBwcml2YXRlLCBvciBmYWxzZSB0byBtYWtlIGl0IHB1YmxpYy5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaGFzX2lzc3Vlc10gLSBFaXRoZXIgdHJ1ZSB0byBlbmFibGUgaXNzdWVzIGZvciB0aGlzIHJlcG9zaXRvcnksIGZhbHNlIHRvIGRpc2FibGUgdGhlbS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaGFzX3dpa2ldIC0gRWl0aGVyIHRydWUgdG8gZW5hYmxlIHRoZSB3aWtpIGZvciB0aGlzIHJlcG9zaXRvcnksIGZhbHNlIHRvIGRpc2FibGUgaXQuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmhhc19kb3dubG9hZHNdIC0gRWl0aGVyIHRydWUgdG8gZW5hYmxlIGRvd25sb2FkcywgZmFsc2UgdG8gZGlzYWJsZSB0aGVtLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRlZmF1bHRfYnJhbmNoXSAtIFVwZGF0ZXMgdGhlIGRlZmF1bHQgYnJhbmNoIGZvciB0aGlzIHJlcG9zaXRvcnkuXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgdXBkYXRlZCByZXBvc2l0b3J5IGJhY2tcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGVSZXBvc2l0b3J5JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVSZXBvc2l0b3J5KG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXBvc2l0b3J5XG4gICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNnZXRcbiAgICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlcG9zaXRvcnlcbiAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldERldGFpbHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERldGFpbHMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSBjb250cmlidXRvcnMgdG8gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jbGlzdC1jb250cmlidXRvcnNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGNvbnRyaWJ1dG9yc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldENvbnRyaWJ1dG9ycycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udHJpYnV0b3JzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9jb250cmlidXRvcnMnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCB0aGUgY29udHJpYnV0b3Igc3RhdHMgdG8gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy8jbGlzdC1jb250cmlidXRvcnNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGNvbnRyaWJ1dG9yc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldENvbnRyaWJ1dG9yU3RhdHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRyaWJ1dG9yU3RhdHMoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3N0YXRzL2NvbnRyaWJ1dG9ycycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IHRoZSB1c2VycyB3aG8gYXJlIGNvbGxhYm9yYXRvcnMgb24gdGhlIHJlcG9zaXRvcnkuIFRoZSBjdXJyZW50bHkgYXV0aGVudGljYXRlZCB1c2VyIG11c3QgaGF2ZVxuICAgICAgICogcHVzaCBhY2Nlc3MgdG8gdXNlIHRoaXMgbWV0aG9kXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29sbGFib3JhdG9ycy8jbGlzdC1jb2xsYWJvcmF0b3JzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBjb2xsYWJvcmF0b3JzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0Q29sbGFib3JhdG9ycycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29sbGFib3JhdG9ycyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29sbGFib3JhdG9ycycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBpZiBhIHVzZXIgaXMgYSBjb2xsYWJvcmF0b3Igb24gdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9jb2xsYWJvcmF0b3JzLyNjaGVjay1pZi1hLXVzZXItaXMtYS1jb2xsYWJvcmF0b3JcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSAtIHRoZSB1c2VyIHRvIGNoZWNrXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSB1c2VyIGlzIGEgY29sbGFib3JhdG9yIGFuZCBmYWxzZSBpZiB0aGV5IGFyZSBub3RcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3Qge0Jvb2xlYW59IFtkZXNjcmlwdGlvbl1cbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdpc0NvbGxhYm9yYXRvcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNDb2xsYWJvcmF0b3IodXNlcm5hbWUsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9jb2xsYWJvcmF0b3JzLycgKyB1c2VybmFtZSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgY29udGVudHMgb2YgYSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29udGVudHMvI2dldC1jb250ZW50c1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiAtIHRoZSByZWYgdG8gY2hlY2tcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggY29udGFpbmluZyB0aGUgY29udGVudCB0byBmZXRjaFxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByYXcgLSBgdHJ1ZWAgaWYgdGhlIHJlc3VsdHMgc2hvdWxkIGJlIHJldHVybmVkIHJhdyBpbnN0ZWFkIG9mIEdpdEh1YidzIG5vcm1hbGl6ZWQgZm9ybWF0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgZmV0Y2hlZCBkYXRhXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0Q29udGVudHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRlbnRzKHJlZiwgcGF0aCwgcmF3LCBjYikge1xuICAgICAgICAgcGF0aCA9IHBhdGggPyAnJyArIGVuY29kZVVSSShwYXRoKSA6ICcnO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvY29udGVudHMvJyArIHBhdGgsIHtcbiAgICAgICAgICAgIHJlZjogcmVmXG4gICAgICAgICB9LCBjYiwgcmF3KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIFJFQURNRSBvZiBhIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9jb250ZW50cy8jZ2V0LXRoZS1yZWFkbWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgLSB0aGUgcmVmIHRvIGNoZWNrXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhdyAtIGB0cnVlYCBpZiB0aGUgcmVzdWx0cyBzaG91bGQgYmUgcmV0dXJuZWQgcmF3IGluc3RlYWQgb2YgR2l0SHViJ3Mgbm9ybWFsaXplZCBmb3JtYXRcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBmZXRjaGVkIGRhdGFcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdnZXRSZWFkbWUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlYWRtZShyZWYsIHJhdywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3JlYWRtZScsIHtcbiAgICAgICAgICAgIHJlZjogcmVmXG4gICAgICAgICB9LCBjYiwgcmF3KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGb3JrIGEgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2ZvcmtzLyNjcmVhdGUtYS1mb3JrXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG5ld2x5IGNyZWF0ZWQgZm9ya1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2ZvcmsnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvcmsoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9mb3JrcycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGb3JrIGEgcmVwb3NpdG9yeSB0byBhbiBvcmdhbml6YXRpb25cbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9mb3Jrcy8jY3JlYXRlLWEtZm9ya1xuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG9yZyAtIG9yZ2FuaXphdGlvbiB3aGVyZSB5b3UnZCBsaWtlIHRvIGNyZWF0ZSB0aGUgZm9yay5cbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbmV3bHkgY3JlYXRlZCBmb3JrXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKlxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2ZvcmtUb09yZycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9ya1RvT3JnKG9yZywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9mb3Jrcz9vcmdhbml6YXRpb249JyArIG9yZywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgYSByZXBvc2l0b3J5J3MgZm9ya3NcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9mb3Jrcy8jbGlzdC1mb3Jrc1xuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgcmVwb3NpdG9yaWVzIGZvcmtlZCBmcm9tIHRoaXMgb25lXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdEZvcmtzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0Rm9ya3MoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2ZvcmtzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyBicmFuY2ggZnJvbSBhbiBleGlzdGluZyBicmFuY2guXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29sZEJyYW5jaD1tYXN0ZXJdIC0gdGhlIG5hbWUgb2YgdGhlIGV4aXN0aW5nIGJyYW5jaFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0JyYW5jaCAtIHRoZSBuYW1lIG9mIHRoZSBuZXcgYnJhbmNoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tbWl0IGRhdGEgZm9yIHRoZSBoZWFkIG9mIHRoZSBuZXcgYnJhbmNoXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlQnJhbmNoJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVCcmFuY2gob2xkQnJhbmNoLCBuZXdCcmFuY2gsIGNiKSB7XG4gICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgaWYgKHR5cGVvZiBuZXdCcmFuY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiID0gbmV3QnJhbmNoO1xuICAgICAgICAgICAgbmV3QnJhbmNoID0gb2xkQnJhbmNoO1xuICAgICAgICAgICAgb2xkQnJhbmNoID0gJ21hc3Rlcic7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHJldHVybiB0aGlzLmdldFJlZignaGVhZHMvJyArIG9sZEJyYW5jaCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBzaGEgPSByZXNwb25zZS5kYXRhLm9iamVjdC5zaGE7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLmNyZWF0ZVJlZih7XG4gICAgICAgICAgICAgICBzaGE6IHNoYSxcbiAgICAgICAgICAgICAgIHJlZjogJ3JlZnMvaGVhZHMvJyArIG5ld0JyYW5jaFxuICAgICAgICAgICAgfSwgY2IpO1xuICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgbmV3IHB1bGwgcmVxdWVzdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3B1bGxzLyNjcmVhdGUtYS1wdWxsLXJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIHB1bGwgcmVxdWVzdCBkZXNjcmlwdGlvblxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ldyBwdWxsIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjcmVhdGVQdWxsUmVxdWVzdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHVsbFJlcXVlc3Qob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9wdWxscycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBVcGRhdGUgYSBwdWxsIHJlcXVlc3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wdWxscy8jdXBkYXRlLWEtcHVsbC1yZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciAtIHRoZSBudW1iZXIgb2YgdGhlIHB1bGwgcmVxdWVzdCB0byB1cGRhdGVcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIHB1bGwgcmVxdWVzdCBkZXNjcmlwdGlvblxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgcHVsbCByZXF1ZXN0IGluZm9ybWF0aW9uXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlUHVsbFJlcXVlc3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVB1bGxSZXF1ZXN0KG51bWJlciwgb3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcHVsbHMvJyArIG51bWJlciwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIGhvb2tzIGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2hvb2tzLyNsaXN0LWhvb2tzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiBob29rc1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2xpc3RIb29rcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdEhvb2tzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9ob29rcycsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgYSBob29rIGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2hvb2tzLyNnZXQtc2luZ2xlLWhvb2tcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIHRoZSBpZCBvZiB0aGUgd2Vib29rXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgZGV0YWlscyBvZiB0aGUgd2Vib29rXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0SG9vaycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SG9vayhpZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2hvb2tzLycgKyBpZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZCBhIG5ldyBob29rIHRvIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvaG9va3MvI2NyZWF0ZS1hLWhvb2tcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIGNvbmZpZ3VyYXRpb24gZGVzY3JpYmluZyB0aGUgbmV3IGhvb2tcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBuZXcgd2ViaG9va1xuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NyZWF0ZUhvb2snLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUhvb2sob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9ob29rcycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFZGl0IGFuIGV4aXN0aW5nIHdlYmhvb2tcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZXBvcy9ob29rcy8jZWRpdC1hLWhvb2tcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIHRoZSBpZCBvZiB0aGUgd2ViaG9va1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgbmV3IGRlc2NyaXB0aW9uIG9mIHRoZSB3ZWJob29rXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgdXBkYXRlZCB3ZWJob29rXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlSG9vaycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSG9vayhpZCwgb3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvaG9va3MvJyArIGlkLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGVsZXRlIGEgd2ViaG9va1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2hvb2tzLyNkZWxldGUtYS1ob29rXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSB0aGUgaWQgb2YgdGhlIHdlYmhvb2sgdG8gYmUgZGVsZXRlZFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgY2FsbCBpcyBzdWNjZXNzZnVsXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZGVsZXRlSG9vaycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSG9vayhpZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2hvb2tzLycgKyBpZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExpc3QgdGhlIGRlcGxveSBrZXlzIGZvciB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2tleXMvI2xpc3QtZGVwbG95LWtleXNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGRlcGxveSBrZXlzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdEtleXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RLZXlzKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9rZXlzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBhIGRlcGxveSBrZXkgZm9yIHRoZSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3Mva2V5cy8jZ2V0LWEtZGVwbG95LWtleVxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIC0gdGhlIGlkIG9mIHRoZSBkZXBsb3kga2V5XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgZGV0YWlscyBvZiB0aGUgZGVwbG95IGtleVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldEtleScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0S2V5KGlkLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcva2V5cy8nICsgaWQsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgYSBuZXcgZGVwbG95IGtleSB0byB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2tleXMvI2FkZC1hLW5ldy1kZXBsb3kta2V5XG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBjb25maWd1cmF0aW9uIGRlc2NyaWJpbmcgdGhlIG5ldyBkZXBsb3kga2V5XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3IGRlcGxveSBrZXlcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjcmVhdGVLZXknLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUtleShvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2tleXMnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGVsZXRlIGEgZGVwbG95IGtleVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2tleXMvI3JlbW92ZS1hLWRlcGxveS1rZXlcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIHRoZSBpZCBvZiB0aGUgZGVwbG95IGtleSB0byBiZSBkZWxldGVkXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSBjYWxsIGlzIHN1Y2Nlc3NmdWxcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdkZWxldGVLZXknLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUtleShpZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL2tleXMvJyArIGlkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGVsZXRlIGEgZmlsZSBmcm9tIGEgYnJhbmNoXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvY29udGVudHMvI2RlbGV0ZS1hLWZpbGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBicmFuY2ggLSB0aGUgYnJhbmNoIHRvIGRlbGV0ZSBmcm9tLCBvciB0aGUgZGVmYXVsdCBicmFuY2ggaWYgbm90IHNwZWNpZmllZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSB0aGUgcGF0aCBvZiB0aGUgZmlsZSB0byByZW1vdmVcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBjb21taXQgaW4gd2hpY2ggdGhlIGRlbGV0ZSBvY2N1cnJlZFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2RlbGV0ZUZpbGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUZpbGUoYnJhbmNoLCBwYXRoLCBjYikge1xuICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgIHJldHVybiB0aGlzLmdldFNoYShicmFuY2gsIHBhdGgpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgZGVsZXRlQ29tbWl0ID0ge1xuICAgICAgICAgICAgICAgbWVzc2FnZTogJ0RlbGV0ZSB0aGUgZmlsZSBhdCBcXCcnICsgcGF0aCArICdcXCcnLFxuICAgICAgICAgICAgICAgc2hhOiByZXNwb25zZS5kYXRhLnNoYSxcbiAgICAgICAgICAgICAgIGJyYW5jaDogYnJhbmNoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5fcmVxdWVzdCgnREVMRVRFJywgJy9yZXBvcy8nICsgX3RoaXM0Ll9fZnVsbG5hbWUgKyAnL2NvbnRlbnRzLycgKyBwYXRoLCBkZWxldGVDb21taXQsIGNiKTtcbiAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENoYW5nZSBhbGwgcmVmZXJlbmNlcyBpbiBhIHJlcG8gZnJvbSBvbGRQYXRoIHRvIG5ld19wYXRoXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnJhbmNoIC0gdGhlIGJyYW5jaCB0byBjYXJyeSBvdXQgdGhlIHJlZmVyZW5jZSBjaGFuZ2UsIG9yIHRoZSBkZWZhdWx0IGJyYW5jaCBpZiBub3Qgc3BlY2lmaWVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkUGF0aCAtIG9yaWdpbmFsIHBhdGhcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdQYXRoIC0gbmV3IHJlZmVyZW5jZSBwYXRoXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29tbWl0IGluIHdoaWNoIHRoZSBtb3ZlIG9jY3VycmVkXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbW92ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZShicmFuY2gsIG9sZFBhdGgsIG5ld1BhdGgsIGNiKSB7XG4gICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgICAgdmFyIG9sZFNoYSA9IHZvaWQgMDtcbiAgICAgICAgIHJldHVybiB0aGlzLmdldFJlZignaGVhZHMvJyArIGJyYW5jaCkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IF9yZWYuZGF0YS5vYmplY3Q7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM1LmdldFRyZWUob2JqZWN0LnNoYSArICc/cmVjdXJzaXZlPXRydWUnKTtcbiAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjIkZGF0YSA9IF9yZWYyLmRhdGEsXG4gICAgICAgICAgICAgICAgdHJlZSA9IF9yZWYyJGRhdGEudHJlZSxcbiAgICAgICAgICAgICAgICBzaGEgPSBfcmVmMiRkYXRhLnNoYTtcblxuICAgICAgICAgICAgb2xkU2hhID0gc2hhO1xuICAgICAgICAgICAgdmFyIG5ld1RyZWUgPSB0cmVlLm1hcChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICBpZiAocmVmLnBhdGggPT09IG9sZFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgIHJlZi5wYXRoID0gbmV3UGF0aDtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGlmIChyZWYudHlwZSA9PT0gJ3RyZWUnKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGUgcmVmLnNoYTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczUuY3JlYXRlVHJlZShuZXdUcmVlKTtcbiAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgICB2YXIgdHJlZSA9IF9yZWYzLmRhdGE7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM1LmNvbW1pdChvbGRTaGEsIHRyZWUuc2hhLCAnUmVuYW1lZCBcXCcnICsgb2xkUGF0aCArICdcXCcgdG8gXFwnJyArIG5ld1BhdGggKyAnXFwnJyk7XG4gICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgICAgICAgdmFyIGNvbW1pdCA9IF9yZWY0LmRhdGE7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM1LnVwZGF0ZUhlYWQoJ2hlYWRzLycgKyBicmFuY2gsIGNvbW1pdC5zaGEsIHRydWUsIGNiKTtcbiAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFdyaXRlIGEgZmlsZSB0byB0aGUgcmVwb3NpdG9yeVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL2NvbnRlbnRzLyN1cGRhdGUtYS1maWxlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnJhbmNoIC0gdGhlIG5hbWUgb2YgdGhlIGJyYW5jaFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSB0aGUgcGF0aCBmb3IgdGhlIGZpbGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IC0gdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIHRoZSBjb21taXQgbWVzc2FnZVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGNvbW1pdCBvcHRpb25zXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuYXV0aG9yXSAtIHRoZSBhdXRob3Igb2YgdGhlIGNvbW1pdFxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmNvbW1pdGVyXSAtIHRoZSBjb21taXR0ZXJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZW5jb2RlXSAtIHRydWUgaWYgdGhlIGNvbnRlbnQgc2hvdWxkIGJlIGJhc2U2NCBlbmNvZGVkXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3IGNvbW1pdFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3dyaXRlRmlsZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVGaWxlKGJyYW5jaCwgcGF0aCwgY29udGVudCwgbWVzc2FnZSwgb3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBmaWxlUGF0aCA9IHBhdGggPyBlbmNvZGVVUkkocGF0aCkgOiAnJztcbiAgICAgICAgIHZhciBzaG91bGRFbmNvZGUgPSBvcHRpb25zLmVuY29kZSAhPT0gZmFsc2U7XG4gICAgICAgICB2YXIgY29tbWl0ID0ge1xuICAgICAgICAgICAgYnJhbmNoOiBicmFuY2gsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgYXV0aG9yOiBvcHRpb25zLmF1dGhvcixcbiAgICAgICAgICAgIGNvbW1pdHRlcjogb3B0aW9ucy5jb21taXR0ZXIsXG4gICAgICAgICAgICBjb250ZW50OiBzaG91bGRFbmNvZGUgPyBfanNCYXNlLkJhc2U2NC5lbmNvZGUoY29udGVudCkgOiBjb250ZW50XG4gICAgICAgICB9O1xuXG4gICAgICAgICByZXR1cm4gdGhpcy5nZXRTaGEoYnJhbmNoLCBmaWxlUGF0aCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNvbW1pdC5zaGEgPSByZXNwb25zZS5kYXRhLnNoYTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuX3JlcXVlc3QoJ1BVVCcsICcvcmVwb3MvJyArIF90aGlzNi5fX2Z1bGxuYW1lICsgJy9jb250ZW50cy8nICsgZmlsZVBhdGgsIGNvbW1pdCwgY2IpO1xuICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNi5fcmVxdWVzdCgnUFVUJywgJy9yZXBvcy8nICsgX3RoaXM2Ll9fZnVsbG5hbWUgKyAnL2NvbnRlbnRzLycgKyBmaWxlUGF0aCwgY29tbWl0LCBjYik7XG4gICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBpZiBhIHJlcG9zaXRvcnkgaXMgc3RhcnJlZCBieSB5b3VcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9hY3Rpdml0eS9zdGFycmluZy8jY2hlY2staWYteW91LWFyZS1zdGFycmluZy1hLXJlcG9zaXRvcnlcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIHJlcG9zaXRvcnkgaXMgc3RhcnJlZCBhbmQgZmFsc2UgaWYgdGhlIHJlcG9zaXRvcnlcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIG5vdCBzdGFycmVkXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0IHtCb29sZWFufSBbZGVzY3JpcHRpb25dXG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnaXNTdGFycmVkJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N0YXJyZWQoY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0MjA0b3I0MDQoJy91c2VyL3N0YXJyZWQvJyArIHRoaXMuX19mdWxsbmFtZSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFN0YXIgYSByZXBvc2l0b3J5XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvYWN0aXZpdHkvc3RhcnJpbmcvI3N0YXItYS1yZXBvc2l0b3J5XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSByZXBvc2l0b3J5IGlzIHN0YXJyZWRcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdzdGFyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFyKGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUFVUJywgJy91c2VyL3N0YXJyZWQvJyArIHRoaXMuX19mdWxsbmFtZSwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFVuc3RhciBhIHJlcG9zaXRvcnlcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9hY3Rpdml0eS9zdGFycmluZy8jdW5zdGFyLWEtcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgcmVwb3NpdG9yeSBpcyB1bnN0YXJyZWRcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1bnN0YXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuc3RhcihjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0RFTEVURScsICcvdXNlci9zdGFycmVkLycgKyB0aGlzLl9fZnVsbG5hbWUsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGUgYSBuZXcgcmVsZWFzZVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3JlbGVhc2VzLyNjcmVhdGUtYS1yZWxlYXNlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcmVsZWFzZVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ld2x5IGNyZWF0ZWQgcmVsZWFzZVxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2NyZWF0ZVJlbGVhc2UnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJlbGVhc2Uob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9yZWxlYXNlcycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFZGl0IGEgcmVsZWFzZVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3JlbGVhc2VzLyNlZGl0LWEtcmVsZWFzZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gdGhlIGlkIG9mIHRoZSByZWxlYXNlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcmVsZWFzZVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG1vZGlmaWVkIHJlbGVhc2VcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGVSZWxlYXNlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVSZWxlYXNlKGlkLCBvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9yZWxlYXNlcy8nICsgaWQsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYWxsIHJlbGVhc2VzXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvcmVsZWFzZXMvI2xpc3QtcmVsZWFzZXMtZm9yLWEtcmVwb3NpdG9yeVxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIHJlbGVhc2UgaW5mb3JtYXRpb25cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0UmVsZWFzZXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RSZWxlYXNlcyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcmVsZWFzZXMnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGEgcmVsZWFzZVxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3JlbGVhc2VzLyNnZXQtYS1zaW5nbGUtcmVsZWFzZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gdGhlIGlkIG9mIHRoZSByZWxlYXNlXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgcmVsZWFzZSBpbmZvcm1hdGlvblxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldFJlbGVhc2UnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlbGVhc2UoaWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9yZXBvcy8nICsgdGhpcy5fX2Z1bGxuYW1lICsgJy9yZWxlYXNlcy8nICsgaWQsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZWxldGUgYSByZWxlYXNlXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcmVwb3MvcmVsZWFzZXMvI2RlbGV0ZS1hLXJlbGVhc2VcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoZSByZWxlYXNlIHRvIGJlIGRlbGV0ZWRcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZGVsZXRlUmVsZWFzZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUmVsZWFzZShpZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3JlbGVhc2VzLycgKyBpZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE1lcmdlIGEgcHVsbCByZXF1ZXN0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHVsbHMvI21lcmdlLWEtcHVsbC1yZXF1ZXN0LW1lcmdlLWJ1dHRvblxuICAgICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBudW1iZXIgLSB0aGUgbnVtYmVyIG9mIHRoZSBwdWxsIHJlcXVlc3QgdG8gbWVyZ2VcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIG1lcmdlIG9wdGlvbnMgZm9yIHRoZSBwdWxsIHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG1lcmdlIGluZm9ybWF0aW9uIGlmIHRoZSBvcGVyYXRpb24gaXMgc3VjY2Vzc2Z1bFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ21lcmdlUHVsbFJlcXVlc3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlUHVsbFJlcXVlc3QobnVtYmVyLCBvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BVVCcsICcvcmVwb3MvJyArIHRoaXMuX19mdWxsbmFtZSArICcvcHVsbHMvJyArIG51bWJlciArICcvbWVyZ2UnLCBvcHRpb25zLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCBwcm9qZWN0c1xuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzLyNsaXN0LXJlcG9zaXRvcnktcHJvamVjdHNcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgcHJvamVjdHNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0UHJvamVjdHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RQcm9qZWN0cyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3Byb2plY3RzJywgeyBBY2NlcHRIZWFkZXI6ICdpbmVydGlhLXByZXZpZXcnIH0sIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGUgYSBuZXcgcHJvamVjdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzLyNjcmVhdGUtYS1yZXBvc2l0b3J5LXByb2plY3RcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBwcm9qZWN0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3bHkgY3JlYXRlZCBwcm9qZWN0XG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnY3JlYXRlUHJvamVjdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJvamVjdChvcHRpb25zLCBjYikge1xuICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICBvcHRpb25zLkFjY2VwdEhlYWRlciA9ICdpbmVydGlhLXByZXZpZXcnO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3JlcG9zLycgKyB0aGlzLl9fZnVsbG5hbWUgKyAnL3Byb2plY3RzJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuICAgfV0pO1xuXG4gICByZXR1cm4gUmVwb3NpdG9yeTtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXBvc2l0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbGNHOXphWFJ2Y25rdWFuTWlYU3dpYm1GdFpYTWlPbHNpYkc5bklpd2lVbVZ3YjNOcGRHOXllU0lzSW1aMWJHeHVZVzFsSWl3aVlYVjBhQ0lzSW1Gd2FVSmhjMlVpTENKZlgyWjFiR3h1WVcxbElpd2lYMTlqZFhKeVpXNTBWSEpsWlNJc0ltSnlZVzVqYUNJc0luTm9ZU0lzSW5KbFppSXNJbU5pSWl3aVgzSmxjWFZsYzNRaUxDSnZjSFJwYjI1eklpd2liblZ0WW1WeUlpd2lZbUZ6WlNJc0ltaGxZV1FpTENKemFXNWpaU0lzSWw5a1lYUmxWRzlKVTA4aUxDSjFiblJwYkNJc0luQmhkR2dpTENKMGNtVmxVMGhCSWl3aVkyOXVkR1Z1ZENJc0luQnZjM1JDYjJSNUlpd2lYMmRsZEVOdmJuUmxiblJQWW1wbFkzUWlMQ0pWZEdZNElpd2laVzVqYjJSbElpd2laVzVqYjJScGJtY2lMQ0pDZFdabVpYSWlMQ0owYjFOMGNtbHVaeUlzSWtKc2IySWlMQ0pDWVhObE5qUWlMQ0pLVTA5T0lpd2ljM1J5YVc1bmFXWjVJaXdpUlhKeWIzSWlMQ0ppWVhObFZISmxaVk5JUVNJc0ltSnNiMkpUU0VFaUxDSnVaWGRVY21WbElpd2lZbUZ6WlY5MGNtVmxJaXdpZEhKbFpTSXNJbTF2WkdVaUxDSjBlWEJsSWl3aVltRnpaVk5JUVNJc0luQmhjbVZ1ZENJc0ltMWxjM05oWjJVaUxDSmtZWFJoSWl3aWNHRnlaVzUwY3lJc0lrOWlhbVZqZENJc0ltRnpjMmxuYmlJc0luUm9aVzRpTENKeVpYTndiMjV6WlNJc0ltTnZiVzFwZEZOSVFTSXNJbVp2Y21ObElpd2lkWE5sY201aGJXVWlMQ0p5WVhjaUxDSmxibU52WkdWVlVra2lMQ0p2Y21jaUxDSnZiR1JDY21GdVkyZ2lMQ0p1WlhkQ2NtRnVZMmdpTENKblpYUlNaV1lpTENKdlltcGxZM1FpTENKamNtVmhkR1ZTWldZaUxDSnBaQ0lzSW1kbGRGTm9ZU0lzSW1SbGJHVjBaVU52YlcxcGRDSXNJbTlzWkZCaGRHZ2lMQ0p1WlhkUVlYUm9JaXdpYjJ4a1UyaGhJaXdpWjJWMFZISmxaU0lzSW0xaGNDSXNJbU55WldGMFpWUnlaV1VpTENKamIyMXRhWFFpTENKMWNHUmhkR1ZJWldGa0lpd2labWxzWlZCaGRHZ2lMQ0p6YUc5MWJHUkZibU52WkdVaUxDSmhkWFJvYjNJaUxDSmpiMjF0YVhSMFpYSWlMQ0pmY21WeGRXVnpkREl3Tkc5eU5EQTBJaXdpWDNKbGNYVmxjM1JCYkd4UVlXZGxjeUlzSWtGalkyVndkRWhsWVdSbGNpSXNJbEpsY1hWbGMzUmhZbXhsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJUMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenRCUVVkQk96czdPenM3T3pzN095dGxRVnBCT3pzN096czdPMEZCWVVFc1NVRkJUVUVzVFVGQlRTeHhRa0ZCVFN4dFFrRkJUaXhEUVVGYU96dEJRVVZCT3pzN08wbEJSMDFETEZVN096dEJRVU5JT3pzN096czdRVUZOUVN4MVFrRkJXVU1zVVVGQldpeEZRVUZ6UWtNc1NVRkJkRUlzUlVGQk5FSkRMRTlCUVRWQ0xFVkJRWEZETzBGQlFVRTdPMEZCUVVFc01FaEJRelZDUkN4SlFVUTBRaXhGUVVOMFFrTXNUMEZFYzBJN08wRkJSV3hETEZsQlFVdERMRlZCUVV3c1IwRkJhMEpJTEZGQlFXeENPMEZCUTBFc1dVRkJTMGtzWVVGQlRDeEhRVUZ4UWp0QlFVTnNRa01zYVVKQlFWRXNTVUZFVlR0QlFVVnNRa01zWTBGQlN6dEJRVVpoTEU5QlFYSkNPMEZCU0d0RE8wRkJUM0JET3p0QlFVVkVPenM3T3pzN096czdPenMyUWtGUFQwTXNSeXhGUVVGTFF5eEZMRVZCUVVrN1FVRkRZaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhyUWtGQk1rUkpMRWRCUVRORUxFVkJRV3RGTEVsQlFXeEZMRVZCUVhkRlF5eEZRVUY0UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3WjBOQlQxVkZMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRM0JDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eE5RVUZrTEdOQlFXZERMRXRCUVV0T0xGVkJRWEpETEdkQ1FVRTBSRThzVDBGQk5VUXNSVUZCY1VWR0xFVkJRWEpGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenRuUTBGUFZVUXNSeXhGUVVGTFF5eEZMRVZCUVVrN1FVRkRhRUlzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxGRkJRV1FzWTBGQmEwTXNTMEZCUzA0c1ZVRkJka01zYTBKQlFUaEVTU3hIUVVFNVJDeEZRVUZ4UlN4SlFVRnlSU3hGUVVFeVJVTXNSVUZCTTBVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3YVVOQlRWZEJMRVVzUlVGQlNUdEJRVU5hTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eFJRVUZrTEdOQlFXdERMRXRCUVV0T0xGVkJRWFpETEVWQlFYRkVMRWxCUVhKRUxFVkJRVEpFU3l4RlFVRXpSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096c3JRa0ZOVTBFc1JTeEZRVUZKTzBGQlExWXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNXVUZCZFVRc1NVRkJka1FzUlVGQk5rUkxMRVZCUVRkRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0MVEwRlBhVUpGTEU4c1JVRkJVMFlzUlN4RlFVRkpPMEZCUXpOQ1JTeHRRa0ZCVlVFc1YwRkJWeXhGUVVGeVFqdEJRVU5CTEdkQ1FVRlBMRXRCUVV0RUxGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0T0xGVkJRWEJETEdGQlFYZEVUeXhQUVVGNFJDeEZRVUZwUlVZc1JVRkJha1VzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPM0ZEUVU5bFJ5eE5MRVZCUVZGSUxFVXNSVUZCU1R0QlFVTjRRaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhsUVVGM1JGRXNUVUZCZUVRc1JVRkJhMFVzU1VGQmJFVXNSVUZCZDBWSUxFVkJRWGhGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenN5UTBGUGNVSkhMRTBzUlVGQlVVZ3NSU3hGUVVGSk8wRkJRemxDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0T0xGVkJRWEJETEdWQlFYZEVVU3hOUVVGNFJDeGhRVUYzUlN4SlFVRjRSU3hGUVVFNFJVZ3NSVUZCT1VVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3p0elEwRlJaMEpKTEVrc1JVRkJUVU1zU1N4RlFVRk5UQ3hGTEVWQlFVazdRVUZETjBJc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwNHNWVUZCY0VNc2FVSkJRVEJFVXl4SlFVRXhSQ3hYUVVGdlJVTXNTVUZCY0VVc1JVRkJORVVzU1VGQk5VVXNSVUZCYTBaTUxFVkJRV3hHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPMjFEUVUxaFFTeEZMRVZCUVVrN1FVRkRaQ3huUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhuUWtGQk1rUXNTVUZCTTBRc1JVRkJhVVZMTEVWQlFXcEZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czRRa0ZQVVVZc1J5eEZRVUZMUlN4RkxFVkJRVWs3UVVGRFpDeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eHRRa0ZCTkVSSExFZEJRVFZFTEVWQlFXMUZMRWxCUVc1RkxFVkJRWGxGUlN4RlFVRjZSU3hGUVVFMlJTeExRVUUzUlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3WjBOQlQxVklMRTBzUlVGQlVVY3NSU3hGUVVGSk8wRkJRMjVDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0T0xGVkJRWEJETEd0Q1FVRXlSRVVzVFVGQk0wUXNSVUZCY1VVc1NVRkJja1VzUlVGQk1rVkhMRVZCUVRORkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0blEwRlBWVVlzUnl4RlFVRkxSU3hGTEVWQlFVazdRVUZEYUVJc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwNHNWVUZCY0VNc2NVSkJRVGhFUnl4SFFVRTVSQ3hGUVVGeFJTeEpRVUZ5UlN4RlFVRXlSVVVzUlVGQk0wVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096czdPenM3YTBOQldWbEZMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRM1JDUlN4dFFrRkJWVUVzVjBGQlZ5eEZRVUZ5UWp0QlFVTkJMR0ZCUVVrc1QwRkJUMEVzVDBGQlVDeExRVUZ0UWl4VlFVRjJRaXhGUVVGdFF6dEJRVU5vUTBZc2FVSkJRVXRGTEU5QlFVdzdRVUZEUVVFc2MwSkJRVlVzUlVGQlZqdEJRVU5HTzBGQlEwUkJMR2xDUVVGUlNTeExRVUZTTEVkQlFXZENMRXRCUVV0RExGVkJRVXdzUTBGQlowSk1MRkZCUVZGSkxFdEJRWGhDTEVOQlFXaENPMEZCUTBGS0xHbENRVUZSVFN4TFFVRlNMRWRCUVdkQ0xFdEJRVXRFTEZWQlFVd3NRMEZCWjBKTUxGRkJRVkZOTEV0QlFYaENMRU5CUVdoQ096dEJRVVZCTEdkQ1FVRlBMRXRCUVV0UUxGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0T0xGVkJRWEJETEdWQlFUQkVUeXhQUVVFeFJDeEZRVUZ0UlVZc1JVRkJia1VzUTBGQlVEdEJRVU5HT3p0QlFVVkJPenM3T3pzN096czdPM05EUVU5bFJDeEhMRVZCUVV0RExFVXNSVUZCU1R0QlFVTjBRa1FzWlVGQlRVRXNUMEZCVHl4RlFVRmlPMEZCUTBFc1owSkJRVThzUzBGQlMwVXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwNHNWVUZCY0VNc2FVSkJRVEJFU1N4SFFVRXhSQ3hGUVVGcFJTeEpRVUZxUlN4RlFVRjFSVU1zUlVGQmRrVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096czJRa0ZSVDBnc1RTeEZRVUZSV1N4SkxFVkJRVTFVTEVVc1JVRkJTVHRCUVVOMFFrZ3NhMEpCUVZOQkxHMUNRVUZwUWtFc1RVRkJha0lzUjBGQk5FSXNSVUZCY2tNN1FVRkRRU3huUWtGQlR5eExRVUZMU1N4UlFVRk1MRU5CUVdNc1MwRkJaQ3hqUVVFclFpeExRVUZMVGl4VlFVRndReXhyUWtGQk1rUmpMRWxCUVRORUxFZEJRV3RGV2l4TlFVRnNSU3hGUVVFMFJTeEpRVUUxUlN4RlFVRnJSa2NzUlVGQmJFWXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08yMURRVTloUml4SExFVkJRVXRGTEVVc1JVRkJTVHRCUVVOdVFpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eHBRa0ZCTUVSSExFZEJRVEZFTEdkQ1FVRXdSU3hKUVVFeFJTeEZRVUZuUmtVc1JVRkJhRVlzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPM2REUVU5clFrWXNSeXhGUVVGTFJTeEZMRVZCUVVrN1FVRkRlRUlzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFdEJRV1FzWTBGQkswSXNTMEZCUzA0c1ZVRkJjRU1zYVVKQlFUQkVSeXhIUVVFeFJDeGpRVUYzUlN4SlFVRjRSU3hGUVVFNFJVVXNSVUZCT1VVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3poQ1FVOVJWU3hQTEVWQlFWTldMRVVzUlVGQlNUdEJRVU5zUWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl4dFFrRkJORVJsTEU5QlFUVkVMRVZCUVhWRkxFbEJRWFpGTEVWQlFUWkZWaXhGUVVFM1JTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN2FVTkJUMWRYTEU4c1JVRkJVMWdzUlN4RlFVRkpPMEZCUTNKQ0xHRkJRVWxaTEZkQlFWY3NTMEZCUzBNc2FVSkJRVXdzUTBGQmRVSkdMRTlCUVhaQ0xFTkJRV1k3TzBGQlJVRnlRaXhoUVVGSkxHbENRVUZLTEVWQlFYVkNjMElzVVVGQmRrSTdRVUZEUVN4blFrRkJUeXhMUVVGTFdDeFJRVUZNTEVOQlFXTXNUVUZCWkN4alFVRm5ReXhMUVVGTFRpeFZRVUZ5UXl4cFFrRkJOa1JwUWl4UlFVRTNSQ3hGUVVGMVJWb3NSVUZCZGtVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenQzUTBGTGEwSlhMRThzUlVGQlV6dEJRVU40UWl4aFFVRkpMRTlCUVU5QkxFOUJRVkFzUzBGQmJVSXNVVUZCZGtJc1JVRkJhVU03UVVGRE9VSnlRaXhuUWtGQlNTeHZRa0ZCU2p0QlFVTkJMRzFDUVVGUE8wRkJRMHB4UWl4M1FrRkJVMGNzWTBGQlMwTXNUVUZCVEN4RFFVRlpTaXhQUVVGYUxFTkJSRXc3UVVGRlNrc3NlVUpCUVZVN1FVRkdUaXhoUVVGUU8wRkJTMFlzVlVGUVJDeE5RVTlQTEVsQlFVa3NUMEZCVDBNc1RVRkJVQ3hMUVVGclFpeFhRVUZzUWl4SlFVRnBRMDRzYlVKQlFXMUNUU3hOUVVGNFJDeEZRVUZuUlR0QlFVTndSVE5DTEdkQ1FVRkpMSGxDUVVGS08wRkJRMEVzYlVKQlFVODdRVUZEU25GQ0xIZENRVUZUUVN4UlFVRlJUeXhSUVVGU0xFTkJRV2xDTEZGQlFXcENMRU5CUkV3N1FVRkZTa1lzZVVKQlFWVTdRVUZHVGl4aFFVRlFPMEZCUzBZc1ZVRlFUU3hOUVU5QkxFbEJRVWtzVDBGQlQwY3NTVUZCVUN4TFFVRm5RaXhYUVVGb1FpeEpRVUVyUWxJc2JVSkJRVzFDVVN4SlFVRjBSQ3hGUVVFMFJEdEJRVU5vUlRkQ0xHZENRVUZKTEdkRFFVRktPMEZCUTBFc2JVSkJRVTg3UVVGRFNuRkNMSGRDUVVGVFV5eGxRVUZQVEN4TlFVRlFMRU5CUVdOS0xFOUJRV1FzUTBGRVREdEJRVVZLU3l4NVFrRkJWVHRCUVVaT0xHRkJRVkE3UVVGTFJpeFZRVkJOTEUxQlQwRTdRVUZCUlR0QlFVTk9NVUlzTkVSQlFUWkRjVUlzVDBGQk4wTXNlVU5CUVRaRFFTeFBRVUUzUXl4WlFVRjVSRlVzUzBGQlMwTXNVMEZCVEN4RFFVRmxXQ3hQUVVGbUxFTkJRWHBFTzBGQlEwRXNhMEpCUVUwc1NVRkJTVmtzUzBGQlNpeERRVUZWTEcxR1FVRldMRU5CUVU0N1FVRkRSanRCUVVOSU96dEJRVVZFT3pzN096czdPenM3T3pzN08ybERRVlZYUXl4WExFVkJRV0ZtTEVrc1JVRkJUV2RDTEU4c1JVRkJVM3BDTEVVc1JVRkJTVHRCUVVONFF5eGhRVUZKTUVJc1ZVRkJWVHRCUVVOWVF5eDFRa0ZCVjBnc1YwRkVRU3hGUVVOaE8wRkJRM2hDU1N4clFrRkJUU3hEUVVGRE8wRkJRMHB1UWl4eFFrRkJUVUVzU1VGRVJqdEJRVVZLV0N4dlFrRkJTekpDTEU5QlJrUTdRVUZIU2trc2NVSkJRVTBzVVVGSVJqdEJRVWxLUXl4eFFrRkJUVHRCUVVwR0xHRkJRVVE3UVVGR1N5eFZRVUZrT3p0QlFWVkJMR2RDUVVGUExFdEJRVXMzUWl4UlFVRk1MRU5CUVdNc1RVRkJaQ3hqUVVGblF5eExRVUZMVGl4VlFVRnlReXhwUWtGQk5rUXJRaXhQUVVFM1JDeEZRVUZ6UlRGQ0xFVkJRWFJGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3YVVOQlVWYzBRaXhKTEVWQlFVMUhMRThzUlVGQlV5OUNMRVVzUlVGQlNUdEJRVU16UWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUVUZCWkN4alFVRm5ReXhMUVVGTFRpeFZRVUZ5UXl4cFFrRkJOa1E3UVVGRGFrVnBReXh6UWtGRWFVVTdRVUZGYWtWRUxIVkNRVUZYU1N4UFFVWnpSQ3hEUVVVM1F6dEJRVVkyUXl4VlFVRTNSQ3hGUVVkS0wwSXNSVUZJU1N4RFFVRlFPMEZCU1VZN08wRkJSVVE3T3pzN096czdPenM3T3pzN096czJRa0ZaVDJkRExFMHNSVUZCVVVvc1NTeEZRVUZOU3l4UExFVkJRVk12UWl4UExFVkJRVk5HTEVVc1JVRkJTVHRCUVVGQk96dEJRVU40UXl4aFFVRkpMRTlCUVU5RkxFOUJRVkFzUzBGQmJVSXNWVUZCZGtJc1JVRkJiVU03UVVGRGFFTkdMR2xDUVVGTFJTeFBRVUZNTzBGQlEwRkJMSE5DUVVGVkxFVkJRVlk3UVVGRFJqczdRVUZGUkN4aFFVRkpaME1zVDBGQlR6dEJRVU5TUkN3MFFrRkVVVHRCUVVWU1RDeHpRa0ZHVVR0QlFVZFNUeXh4UWtGQlV5eERRVUZEU0N4TlFVRkVPMEZCU0VRc1ZVRkJXRHM3UVVGTlFVVXNaMEpCUVU5RkxFOUJRVTlETEUxQlFWQXNRMEZCWXl4RlFVRmtMRVZCUVd0Q2JrTXNUMEZCYkVJc1JVRkJNa0puUXl4SlFVRXpRaXhEUVVGUU96dEJRVVZCTEdkQ1FVRlBMRXRCUVV0cVF5eFJRVUZNTEVOQlFXTXNUVUZCWkN4alFVRm5ReXhMUVVGTFRpeFZRVUZ5UXl4dFFrRkJLMFIxUXl4SlFVRXZSQ3hGUVVGeFJXeERMRVZCUVhKRkxFVkJRMGh6UXl4SlFVUkhMRU5CUTBVc1ZVRkJRME1zVVVGQlJDeEZRVUZqTzBGQlEycENMRzFDUVVGTE0wTXNZVUZCVEN4RFFVRnRRa1VzUjBGQmJrSXNSMEZCZVVKNVF5eFRRVUZUVEN4SlFVRlVMRU5CUVdOd1F5eEhRVUYyUXl4RFFVUnBRaXhEUVVNeVFqdEJRVU0xUXl4dFFrRkJUM2xETEZGQlFWQTdRVUZEUml4VlFVcEhMRU5CUVZBN1FVRkxSanM3UVVGRlJEczdPenM3T3pzN096czdPMmxEUVZOWGVFTXNSeXhGUVVGTGVVTXNVeXhGUVVGWFF5eExMRVZCUVU5NlF5eEZMRVZCUVVrN1FVRkRia01zWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFOUJRV1FzWTBGQmFVTXNTMEZCUzA0c1ZVRkJkRU1zYTBKQlFUWkVTU3hIUVVFM1JDeEZRVUZ2UlR0QlFVTjRSVVFzYVVKQlFVc3dReXhUUVVSdFJUdEJRVVY0UlVNc2JVSkJRVTlCTzBGQlJtbEZMRlZCUVhCRkxFVkJSMHA2UXl4RlFVaEpMRU5CUVZBN1FVRkpSanM3UVVGRlJEczdPenM3T3pzN096czdPenM3TzIxRFFWbGhkME1zVXl4RlFVRlhkRU1zVHl4RlFVRlRSaXhGTEVWQlFVazdRVUZEYkVNc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRTFCUVdRc1kwRkJaME1zUzBGQlMwNHNWVUZCY2tNc2EwSkJRVFJFTmtNc1UwRkJOVVFzUlVGQmVVVjBReXhQUVVGNlJTeEZRVUZyUmtZc1JVRkJiRVlzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdkVU5CWldsQ1JTeFBMRVZCUVZOR0xFVXNSVUZCU1R0QlFVTXpRaXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1QwRkJaQ3hqUVVGcFF5eExRVUZMVGl4VlFVRjBReXhGUVVGdlJFOHNUMEZCY0VRc1JVRkJOa1JHTEVWQlFUZEVMRU5CUVZBN1FVRkRSanM3UVVGRlJqczdPenM3T3pzN08ybERRVTFaUVN4RkxFVkJRVWs3UVVGRFdpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eEZRVUZyUkN4SlFVRnNSQ3hGUVVGM1JFc3NSVUZCZUVRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3YzBOQlRXZENRU3hGTEVWQlFVazdRVUZEYWtJc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwNHNWVUZCY0VNc2IwSkJRU3RFTEVsQlFTOUVMRVZCUVhGRlN5eEZRVUZ5UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenN3UTBGTmIwSkJMRVVzUlVGQlNUdEJRVU55UWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl3d1FrRkJjVVVzU1VGQmNrVXNSVUZCTWtWTExFVkJRVE5GTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenQxUTBGUGFVSkJMRVVzUlVGQlNUdEJRVU5zUWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl4eFFrRkJaMFVzU1VGQmFFVXNSVUZCYzBWTExFVkJRWFJGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR4UTBGUFpUQkRMRkVzUlVGQlZURkRMRVVzUlVGQlNUdEJRVU14UWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4alFVRXJRaXhMUVVGTFRpeFZRVUZ3UXl4MVFrRkJaMFVyUXl4UlFVRm9SU3hGUVVFMFJTeEpRVUUxUlN4RlFVRnJSakZETEVWQlFXeEdMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdPMnREUVZOWlJDeEhMRVZCUVV0VkxFa3NSVUZCVFd0RExFY3NSVUZCU3pORExFVXNSVUZCU1R0QlFVTTNRbE1zWjBKQlFVOUJMRmxCUVZWdFF5eFZRVUZWYmtNc1NVRkJWaXhEUVVGV0xFZEJRVGhDTEVWQlFYSkRPMEZCUTBFc1owSkJRVThzUzBGQlMxSXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwNHNWVUZCY0VNc2EwSkJRVEpFWXl4SlFVRXpSQ3hGUVVGdFJUdEJRVU4yUlZZN1FVRkVkVVVzVlVGQmJrVXNSVUZGU2tNc1JVRkdTU3hGUVVWQk1rTXNSMEZHUVN4RFFVRlFPMEZCUjBZN08wRkJSVVE3T3pzN096czdPenM3TzJkRFFWRlZOVU1zUnl4RlFVRkxORU1zUnl4RlFVRkxNME1zUlN4RlFVRkpPMEZCUTNKQ0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdE9MRlZCUVhCRExHTkJRWGxFTzBGQlF6ZEVTVHRCUVVRMlJDeFZRVUY2UkN4RlFVVktReXhGUVVaSkxFVkJSVUV5UXl4SFFVWkJMRU5CUVZBN1FVRkhSanM3UVVGRlJEczdPenM3T3pzN096SkNRVTFMTTBNc1JTeEZRVUZKTzBGQlEwNHNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEUxQlFXUXNZMEZCWjBNc1MwRkJTMDRzVlVGQmNrTXNZVUZCZVVRc1NVRkJla1FzUlVGQkswUkxMRVZCUVM5RUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzN1owTkJVVlUyUXl4SExFVkJRVXMzUXl4RkxFVkJRVWs3UVVGRGFFSXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEUxQlFXUXNZMEZCWjBNc1MwRkJTMDRzVlVGQmNrTXNORUpCUVhORmEwUXNSMEZCZEVVc1JVRkJOa1VzU1VGQk4wVXNSVUZCYlVZM1F5eEZRVUZ1Uml4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenRuUTBGTlZVRXNSU3hGUVVGSk8wRkJRMWdzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFdEJRV1FzWTBGQkswSXNTMEZCUzA0c1ZVRkJjRU1zWVVGQmQwUXNTVUZCZUVRc1JVRkJPRVJMTEVWQlFUbEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dHRRMEZQWVRoRExGTXNSVUZCVjBNc1V5eEZRVUZYTDBNc1JTeEZRVUZKTzBGQlFVRTdPMEZCUTNCRExHRkJRVWtzVDBGQlR5dERMRk5CUVZBc1MwRkJjVUlzVlVGQmVrSXNSVUZCY1VNN1FVRkRiRU12UXl4cFFrRkJTeXRETEZOQlFVdzdRVUZEUVVFc2QwSkJRVmxFTEZOQlFWbzdRVUZEUVVFc2QwSkJRVmtzVVVGQldqdEJRVU5HT3p0QlFVVkVMR2RDUVVGUExFdEJRVXRGTEUxQlFVd3NXVUZCY1VKR0xGTkJRWEpDTEVWQlEwaFNMRWxCUkVjc1EwRkRSU3hWUVVGRFF5eFJRVUZFTEVWQlFXTTdRVUZEYWtJc1owSkJRVWw2UXl4TlFVRk5lVU1zVTBGQlUwd3NTVUZCVkN4RFFVRmpaU3hOUVVGa0xFTkJRWEZDYmtRc1IwRkJMMEk3UVVGRFFTeHRRa0ZCVHl4UFFVRkxiMFFzVTBGQlRDeERRVUZsTzBGQlEyNUNjRVFzZFVKQlJHMUNPMEZCUlc1Q1F5eHZRMEZCYlVKblJEdEJRVVpCTEdGQlFXWXNSVUZIU2k5RExFVkJTRWtzUTBGQlVEdEJRVWxHTEZWQlVFY3NRMEZCVUR0QlFWRkdPenRCUVVWRU96czdPenM3T3pzN08zZERRVTlyUWtVc1R5eEZRVUZUUml4RkxFVkJRVWs3UVVGRE5VSXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEUxQlFXUXNZMEZCWjBNc1MwRkJTMDRzVlVGQmNrTXNZVUZCZVVSUExFOUJRWHBFTEVWQlFXdEZSaXhGUVVGc1JTeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN08zZERRVkZyUWtjc1RTeEZRVUZSUkN4UExFVkJRVk5HTEVVc1JVRkJTVHRCUVVOd1F5eG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVDBGQlpDeGpRVUZwUXl4TFFVRkxUaXhWUVVGMFF5eGxRVUV3UkZFc1RVRkJNVVFzUlVGQmIwVkVMRTlCUVhCRkxFVkJRVFpGUml4RlFVRTNSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dG5RMEZOVlVFc1JTeEZRVUZKTzBGQlExZ3NaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNZVUZCZDBRc1NVRkJlRVFzUlVGQk9FUkxMRVZCUVRsRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzNFFrRlBVVzFFTEVVc1JVRkJTVzVFTEVVc1JVRkJTVHRCUVVOaUxHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdE9MRlZCUVhCRExHVkJRWGRFZDBRc1JVRkJlRVFzUlVGQk9FUXNTVUZCT1VRc1JVRkJiMFZ1UkN4RlFVRndSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdhVU5CVDFkRkxFOHNSVUZCVTBZc1JTeEZRVUZKTzBGQlEzSkNMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TlFVRmtMR05CUVdkRExFdEJRVXRPTEZWQlFYSkRMR0ZCUVhsRVR5eFBRVUY2UkN4RlFVRnJSVVlzUlVGQmJFVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096dHBRMEZSVjIxRUxFVXNSVUZCU1dwRUxFOHNSVUZCVTBZc1JTeEZRVUZKTzBGQlEzcENMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4UFFVRmtMR05CUVdsRExFdEJRVXRPTEZWQlFYUkRMR1ZCUVRCRWQwUXNSVUZCTVVRc1JVRkJaMFZxUkN4UFFVRm9SU3hGUVVGNVJVWXNSVUZCZWtVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzJsRFFVOVhiVVFzUlN4RlFVRkpia1FzUlN4RlFVRkpPMEZCUTJoQ0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhSUVVGa0xHTkJRV3RETEV0QlFVdE9MRlZCUVhaRExHVkJRVEpFZDBRc1JVRkJNMFFzUlVGQmFVVXNTVUZCYWtVc1JVRkJkVVZ1UkN4RlFVRjJSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096c3JRa0ZOVTBFc1JTeEZRVUZKTzBGQlExWXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEV0QlFXUXNZMEZCSzBJc1MwRkJTMDRzVlVGQmNFTXNXVUZCZFVRc1NVRkJka1FzUlVGQk5rUkxMRVZCUVRkRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzMlFrRlBUMjFFTEVVc1JVRkJTVzVFTEVVc1JVRkJTVHRCUVVOYUxHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdE9MRlZCUVhCRExHTkJRWFZFZDBRc1JVRkJka1FzUlVGQk5rUXNTVUZCTjBRc1JVRkJiVVZ1UkN4RlFVRnVSU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdaME5CVDFWRkxFOHNSVUZCVTBZc1JTeEZRVUZKTzBGQlEzQkNMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TlFVRmtMR05CUVdkRExFdEJRVXRPTEZWQlFYSkRMRmxCUVhkRVR5eFBRVUY0UkN4RlFVRnBSVVlzUlVGQmFrVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08yZERRVTlWYlVRc1JTeEZRVUZKYmtRc1JTeEZRVUZKTzBGQlEyWXNaMEpCUVU4c1MwRkJTME1zVVVGQlRDeERRVUZqTEZGQlFXUXNZMEZCYTBNc1MwRkJTMDRzVlVGQmRrTXNZMEZCTUVSM1JDeEZRVUV4UkN4RlFVRm5SU3hKUVVGb1JTeEZRVUZ6Ulc1RUxFVkJRWFJGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3YVVOQlVWZElMRTBzUlVGQlVWa3NTU3hGUVVGTlZDeEZMRVZCUVVrN1FVRkJRVHM3UVVGRE1VSXNaMEpCUVU4c1MwRkJTMjlFTEUxQlFVd3NRMEZCV1haRUxFMUJRVm9zUlVGQmIwSlpMRWxCUVhCQ0xFVkJRMGcyUWl4SlFVUkhMRU5CUTBVc1ZVRkJRME1zVVVGQlJDeEZRVUZqTzBGQlEycENMR2RDUVVGTll5eGxRVUZsTzBGQlEyeENjRUlzYTBSQlFXZERlRUlzU1VGQmFFTXNUMEZFYTBJN1FVRkZiRUpZTEc5Q1FVRkxlVU1zVTBGQlUwd3NTVUZCVkN4RFFVRmpjRU1zUjBGR1JEdEJRVWRzUWtRN1FVRklhMElzWVVGQmNrSTdRVUZMUVN4dFFrRkJUeXhQUVVGTFNTeFJRVUZNTEVOQlFXTXNVVUZCWkN4alFVRnJReXhQUVVGTFRpeFZRVUYyUXl4clFrRkJPRVJqTEVsQlFUbEVMRVZCUVhORk5FTXNXVUZCZEVVc1JVRkJiMFp5UkN4RlFVRndSaXhEUVVGUU8wRkJRMFlzVlVGU1J5eERRVUZRTzBGQlUwWTdPMEZCUlVRN096czdPenM3T3pzN096SkNRVkZMU0N4TkxFVkJRVkY1UkN4UExFVkJRVk5ETEU4c1JVRkJVM1pFTEVVc1JVRkJTVHRCUVVGQk96dEJRVU5vUXl4aFFVRkpkMFFzWlVGQlNqdEJRVU5CTEdkQ1FVRlBMRXRCUVV0U0xFMUJRVXdzV1VGQmNVSnVSQ3hOUVVGeVFpeEZRVU5JZVVNc1NVRkVSeXhEUVVORk8wRkJRVUVzWjBKQlFWTlhMRTFCUVZRc1VVRkJSV1lzU1VGQlJpeERRVUZUWlN4TlFVRlVPMEZCUVVFc2JVSkJRWE5DTEU5QlFVdFJMRTlCUVV3c1EwRkJaMEpTTEU5QlFVOXVSQ3hIUVVGMlFpeHhRa0ZCZEVJN1FVRkJRU3hWUVVSR0xFVkJSVWgzUXl4SlFVWkhMRU5CUlVVc2FVSkJRWGxDTzBGQlFVRXNiVU5CUVhaQ1NpeEpRVUYxUWp0QlFVRkJMR2RDUVVGb1FrNHNTVUZCWjBJc1kwRkJhRUpCTEVsQlFXZENPMEZCUVVFc1owSkJRVlk1UWl4SFFVRlZMR05CUVZaQkxFZEJRVlU3TzBGQlF6VkNNRVFzY1VKQlFWTXhSQ3hIUVVGVU8wRkJRMEVzWjBKQlFVazBRaXhWUVVGVlJTeExRVUZMT0VJc1IwRkJUQ3hEUVVGVExGVkJRVU16UkN4SFFVRkVMRVZCUVZNN1FVRkROMElzYlVKQlFVbEJMRWxCUVVsVkxFbEJRVW9zUzBGQllUWkRMRTlCUVdwQ0xFVkJRVEJDTzBGQlEzWkNka1FzYzBKQlFVbFZMRWxCUVVvc1IwRkJWemhETEU5QlFWZzdRVUZEUmp0QlFVTkVMRzFDUVVGSmVFUXNTVUZCU1N0Q0xFbEJRVW9zUzBGQllTeE5RVUZxUWl4RlFVRjVRanRCUVVOMFFpeDVRa0ZCVHk5Q0xFbEJRVWxFTEVkQlFWZzdRVUZEUmp0QlFVTkVMSE5DUVVGUFF5eEhRVUZRTzBGQlEwWXNZVUZTWVN4RFFVRmtPMEZCVTBFc2JVSkJRVThzVDBGQlN6UkVMRlZCUVV3c1EwRkJaMEpxUXl4UFFVRm9RaXhEUVVGUU8wRkJRMFlzVlVGa1J5eEZRV1ZJV1N4SlFXWkhMRU5CWlVVN1FVRkJRU3huUWtGQlVWWXNTVUZCVWl4VFFVRkZUU3hKUVVGR08wRkJRVUVzYlVKQlFXdENMRTlCUVVzd1FpeE5RVUZNTEVOQlFWbEtMRTFCUVZvc1JVRkJiMEkxUWl4TFFVRkxPVUlzUjBGQmVrSXNhVUpCUVRCRGQwUXNUMEZCTVVNc1owSkJRVEJFUXl4UFFVRXhSQ3hSUVVGc1FqdEJRVUZCTEZWQlprWXNSVUZuUWtocVFpeEpRV2hDUnl4RFFXZENSVHRCUVVGQkxHZENRVUZSYzBJc1RVRkJVaXhUUVVGRk1VSXNTVUZCUmp0QlFVRkJMRzFDUVVGdlFpeFBRVUZMTWtJc1ZVRkJUQ3haUVVGNVFtaEZMRTFCUVhwQ0xFVkJRVzFESzBRc1QwRkJUemxFTEVkQlFURkRMRVZCUVN0RExFbEJRUzlETEVWQlFYRkVSU3hGUVVGeVJDeERRVUZ3UWp0QlFVRkJMRlZCYUVKR0xFTkJRVkE3UVVGcFFrWTdPMEZCUlVRN096czdPenM3T3pzN096czdPenM3TzJkRFFXTlZTQ3hOTEVWQlFWRlpMRWtzUlVGQlRVVXNUeXhGUVVGVGMwSXNUeXhGUVVGVEwwSXNUeXhGUVVGVFJpeEZMRVZCUVVrN1FVRkJRVHM3UVVGRGNFUXNZVUZCU1N4UFFVRlBSU3hQUVVGUUxFdEJRVzFDTEZWQlFYWkNMRVZCUVcxRE8wRkJRMmhEUml4cFFrRkJTMFVzVDBGQlREdEJRVU5CUVN4elFrRkJWU3hGUVVGV08wRkJRMFk3UVVGRFJDeGhRVUZKTkVRc1YwRkJWM0pFTEU5QlFVOXRReXhWUVVGVmJrTXNTVUZCVml4RFFVRlFMRWRCUVhsQ0xFVkJRWGhETzBGQlEwRXNZVUZCU1hORUxHVkJRV1UzUkN4UlFVRlJZU3hOUVVGU0xFdEJRVzFDTEV0QlFYUkRPMEZCUTBFc1lVRkJTVFpETEZOQlFWTTdRVUZEVmk5RUxEQkNRVVJWTzBGQlJWWnZReXcwUWtGR1ZUdEJRVWRXSzBJc2IwSkJRVkU1UkN4UlFVRlJPRVFzVFVGSVRqdEJRVWxXUXl4MVFrRkJWeTlFTEZGQlFWRXJSQ3hUUVVwVU8wRkJTMVowUkN4eFFrRkJVMjlFTEdWQlFXVXpReXhsUVVGUFRDeE5RVUZRTEVOQlFXTktMRTlCUVdRc1EwRkJaaXhIUVVGM1EwRTdRVUZNZGtNc1ZVRkJZanM3UVVGUlFTeG5Ra0ZCVHl4TFFVRkxlVU1zVFVGQlRDeERRVUZaZGtRc1RVRkJXaXhGUVVGdlFtbEZMRkZCUVhCQ0xFVkJRMGg0UWl4SlFVUkhMRU5CUTBVc1ZVRkJRME1zVVVGQlJDeEZRVUZqTzBGQlEycENjVUlzYlVKQlFVODVSQ3hIUVVGUUxFZEJRV0Y1UXl4VFFVRlRUQ3hKUVVGVUxFTkJRV053UXl4SFFVRXpRanRCUVVOQkxHMUNRVUZQTEU5QlFVdEhMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEU5QlFVdE9MRlZCUVhCRExHdENRVUV5UkcxRkxGRkJRVE5FTEVWQlFYVkZSaXhOUVVGMlJTeEZRVUVyUlRWRUxFVkJRUzlGTEVOQlFWQTdRVUZEUml4VlFVcEhMRVZCU1VRc1dVRkJUVHRCUVVOT0xHMUNRVUZQTEU5QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEU5QlFVdE9MRlZCUVhCRExHdENRVUV5UkcxRkxGRkJRVE5FTEVWQlFYVkZSaXhOUVVGMlJTeEZRVUVyUlRWRUxFVkJRUzlGTEVOQlFWQTdRVUZEUml4VlFVNUhMRU5CUVZBN1FVRlBSanM3UVVGRlJEczdPenM3T3pzN096dG5RMEZQVlVFc1JTeEZRVUZKTzBGQlExZ3NaMEpCUVU4c1MwRkJTMnRGTEdkQ1FVRk1MRzlDUVVGMVF5eExRVUZMZGtVc1ZVRkJOVU1zUlVGQk1FUXNTVUZCTVVRc1JVRkJaMFZMTEVWQlFXaEZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096SkNRVTFMUVN4RkxFVkJRVWs3UVVGRFRpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeHhRa0ZCYzBNc1MwRkJTMDRzVlVGQk0wTXNSVUZCZVVRc1NVRkJla1FzUlVGQkswUkxMRVZCUVM5RUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3paQ1FVMVBRU3hGTEVWQlFVazdRVUZEVWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNVVUZCWkN4eFFrRkJlVU1zUzBGQlMwNHNWVUZCT1VNc1JVRkJORVFzU1VGQk5VUXNSVUZCYTBWTExFVkJRV3hGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR2UTBGUFkwVXNUeXhGUVVGVFJpeEZMRVZCUVVrN1FVRkRlRUlzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFMUJRV1FzWTBGQlowTXNTMEZCUzA0c1ZVRkJja01zWjBKQlFUUkVUeXhQUVVFMVJDeEZRVUZ4UlVZc1JVRkJja1VzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenR2UTBGUlkyMUVMRVVzUlVGQlNXcEVMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRelZDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eFBRVUZrTEdOQlFXbERMRXRCUVV0T0xGVkJRWFJETEd0Q1FVRTJSSGRFTEVWQlFUZEVMRVZCUVcxRmFrUXNUMEZCYmtVc1JVRkJORVZHTEVWQlFUVkZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN08yMURRVTFoUVN4RkxFVkJRVWs3UVVGRFpDeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eG5Ra0ZCTWtRc1NVRkJNMFFzUlVGQmFVVkxMRVZCUVdwRkxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0cFEwRlBWMjFFTEVVc1JVRkJTVzVFTEVVc1JVRkJTVHRCUVVOb1FpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zUzBGQlpDeGpRVUVyUWl4TFFVRkxUaXhWUVVGd1F5eHJRa0ZCTWtSM1JDeEZRVUV6UkN4RlFVRnBSU3hKUVVGcVJTeEZRVUYxUlc1RUxFVkJRWFpGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR2UTBGUFkyMUVMRVVzUlVGQlNXNUVMRVVzUlVGQlNUdEJRVU51UWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNVVUZCWkN4alFVRnJReXhMUVVGTFRpeFZRVUYyUXl4clFrRkJPRVIzUkN4RlFVRTVSQ3hGUVVGdlJTeEpRVUZ3UlN4RlFVRXdSVzVFTEVWQlFURkZMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdkVU5CVVdsQ1J5eE5MRVZCUVZGRUxFOHNSVUZCVTBZc1JTeEZRVUZKTzBGQlEyNURMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMR05CUVN0Q0xFdEJRVXRPTEZWQlFYQkRMR1ZCUVhkRVVTeE5RVUY0UkN4aFFVRjNSVVFzVDBGQmVFVXNSVUZCYVVaR0xFVkJRV3BHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPMjFEUVUxaFFTeEZMRVZCUVVrN1FVRkRaQ3huUWtGQlR5eExRVUZMYlVVc1owSkJRVXdzWVVGQlowTXNTMEZCUzNoRkxGVkJRWEpETEdkQ1FVRTBSQ3hGUVVGRGVVVXNZMEZCWXl4cFFrRkJaaXhGUVVFMVJDeEZRVUVyUm5CRkxFVkJRUzlHTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR2UTBGUFkwVXNUeXhGUVVGVFJpeEZMRVZCUVVrN1FVRkRlRUpGTEcxQ1FVRlZRU3hYUVVGWExFVkJRWEpDTzBGQlEwRkJMR2xDUVVGUmEwVXNXVUZCVWl4SFFVRjFRaXhwUWtGQmRrSTdRVUZEUVN4blFrRkJUeXhMUVVGTGJrVXNVVUZCVEN4RFFVRmpMRTFCUVdRc1kwRkJaME1zUzBGQlMwNHNWVUZCY2tNc1owSkJRVFJFVHl4UFFVRTFSQ3hGUVVGeFJVWXNSVUZCY2tVc1EwRkJVRHRCUVVOR096czdPMFZCTXpKQ2NVSnhSU3h4UWpzN1FVRXJNa0o2UWtNc1QwRkJUME1zVDBGQlVDeEhRVUZwUW1oR0xGVkJRV3BDSWl3aVptbHNaU0k2SWxKbGNHOXphWFJ2Y25rdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRUJtYVd4bFhHNGdLaUJBWTI5d2VYSnBaMmgwSUNBeU1ERXpJRTFwWTJoaFpXd2dRWFZtY21WcGRHVnlJQ2hFWlhabGJHOXdiV1Z1ZENCVFpXVmtLU0JoYm1RZ01qQXhOaUJaWVdodmJ5QkpibU11WEc0Z0tpQkFiR2xqWlc1elpTQWdJQ0JNYVdObGJuTmxaQ0IxYm1SbGNpQjdRR3hwYm1zZ2FIUjBjSE02THk5emNHUjRMbTl5Wnk5c2FXTmxibk5sY3k5Q1UwUXRNeTFEYkdGMWMyVXRRMnhsWVhJdWFIUnRiQ0JDVTBRdE15MURiR0YxYzJVdFEyeGxZWEo5TGx4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnUjJsMGFIVmlMbXB6SUdseklHWnlaV1ZzZVNCa2FYTjBjbWxpZFhSaFlteGxMbHh1SUNvdlhHNWNibWx0Y0c5eWRDQlNaWEYxWlhOMFlXSnNaU0JtY205dElDY3VMMUpsY1hWbGMzUmhZbXhsSnp0Y2JtbHRjRzl5ZENCVmRHWTRJR1p5YjIwZ0ozVjBaamduTzF4dWFXMXdiM0owSUh0Y2JpQWdJRUpoYzJVMk5DeGNibjBnWm5KdmJTQW5hbk10WW1GelpUWTBKenRjYm1sdGNHOXlkQ0JrWldKMVp5Qm1jbTl0SUNka1pXSjFaeWM3WEc1amIyNXpkQ0JzYjJjZ1BTQmtaV0oxWnlnbloybDBhSFZpT25KbGNHOXphWFJ2Y25rbktUdGNibHh1THlvcVhHNGdLaUJTWlhCdmMybDBiM0o1SUdWdVkyRndjM1ZzWVhSbGN5QjBhR1VnWm5WdVkzUnBiMjVoYkdsMGVTQjBieUJqY21WaGRHVXNJSEYxWlhKNUxDQmhibVFnYlc5a2FXWjVJR1pwYkdWekxseHVJQ292WEc1amJHRnpjeUJTWlhCdmMybDBiM0o1SUdWNGRHVnVaSE1nVW1WeGRXVnpkR0ZpYkdVZ2UxeHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRGNtVmhkR1VnWVNCU1pYQnZjMmwwYjNKNUxseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdaMWJHeHVZVzFsSUMwZ2RHaGxJR1oxYkd3Z2JtRnRaU0J2WmlCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVoZFhSb2ZTQmJZWFYwYUYwZ0xTQnBibVp2Y20xaGRHbHZiaUJ5WlhGMWFYSmxaQ0IwYnlCaGRYUm9aVzUwYVdOaGRHVWdkRzhnUjJsMGFIVmlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyRndhVUpoYzJVOWFIUjBjSE02THk5aGNHa3VaMmwwYUhWaUxtTnZiVjBnTFNCMGFHVWdZbUZ6WlNCSGFYUm9kV0lnUVZCSklGVlNURnh1SUNBZ0lDb3ZYRzRnSUNCamIyNXpkSEoxWTNSdmNpaG1kV3hzYm1GdFpTd2dZWFYwYUN3Z1lYQnBRbUZ6WlNrZ2UxeHVJQ0FnSUNBZ2MzVndaWElvWVhWMGFDd2dZWEJwUW1GelpTazdYRzRnSUNBZ0lDQjBhR2x6TGw5ZlpuVnNiRzVoYldVZ1BTQm1kV3hzYm1GdFpUdGNiaUFnSUNBZ0lIUm9hWE11WDE5amRYSnlaVzUwVkhKbFpTQTlJSHRjYmlBZ0lDQWdJQ0FnSUdKeVlXNWphRG9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdJSE5vWVRvZ2JuVnNiQ3hjYmlBZ0lDQWdJSDA3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSMlYwSUdFZ2NtVm1aWEpsYm1ObFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybDBMM0psWm5NdkkyZGxkQzFoTFhKbFptVnlaVzVqWlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsWmlBdElIUm9aU0J5WldabGNtVnVZMlVnZEc4Z1oyVjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnlaV1psY21WdVkyVW5jeUJ5WldaVGNHVmpJRzl5SUdFZ2JHbHpkQ0J2WmlCeVpXWlRjR1ZqY3lCMGFHRjBJRzFoZEdOb0lHQnlaV1pnWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRGSmxaaWh5WldZc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2WjJsMEwzSmxabk12Skh0eVpXWjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJSEpsWm1WeVpXNWpaVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMmRwZEM5eVpXWnpMeU5qY21WaGRHVXRZUzF5WldabGNtVnVZMlZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdkR2hsSUc5aWFtVmpkQ0JrWlhOamNtbGlhVzVuSUhSb1pTQnlaV1pjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJSEpsWmx4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCamNtVmhkR1ZTWldZb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2WjJsMEwzSmxabk5nTENCdmNIUnBiMjV6TENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1JHVnNaWFJsSUdFZ2NtVm1aWEpsYm1ObFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybDBMM0psWm5NdkkyUmxiR1YwWlMxaExYSmxabVZ5Wlc1alpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhKbFppQXRJSFJvWlNCdVlXMWxJRzltSUhSb1pTQnlaV1lnZEc4Z1pHVnNkR1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RISjFaU0JwWmlCMGFHVWdjbVZ4ZFdWemRDQnBjeUJ6ZFdOalpYTnpablZzWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdSbGJHVjBaVkpsWmloeVpXWXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SRVZNUlZSRkp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZaMmwwTDNKbFpuTXZKSHR5WldaOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFUmxiR1YwWlNCaElISmxjRzl6YVhSdmNubGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k4alpHVnNaWFJsTFdFdGNtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwY25WbElHbG1JSFJvWlNCeVpYRjFaWE4wSUdseklITjFZMk5sYzNObWRXeGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaR1ZzWlhSbFVtVndieWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMFJGVEVWVVJTY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRXhwYzNRZ2RHaGxJSFJoWjNNZ2IyNGdZU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZJMnhwYzNRdGRHRm5jMXh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdkR0ZuSUdSaGRHRmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiR2x6ZEZSaFozTW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5MFlXZHpZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRXhwYzNRZ2RHaGxJRzl3Wlc0Z2NIVnNiQ0J5WlhGMVpYTjBjeUJ2YmlCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0IxYkd4ekx5TnNhWE4wTFhCMWJHd3RjbVZ4ZFdWemRITmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ2IzQjBhVzl1Y3lCMGJ5Qm1hV3gwWlhJZ2RHaGxJSE5sWVhKamFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHbHpkQ0J2WmlCUVVuTmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiR2x6ZEZCMWJHeFNaWEYxWlhOMGN5aHZjSFJwYjI1ekxDQmpZaWtnZTF4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUjBWVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZjSFZzYkhOZ0xDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSMlYwSUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUdFZ2MzQmxZMmxtYVdNZ2NIVnNiQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSFZzYkhNdkkyZGxkQzFoTFhOcGJtZHNaUzF3ZFd4c0xYSmxjWFZsYzNSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J1ZFcxaVpYSWdMU0IwYUdVZ1VGSWdlVzkxSUhkcGMyZ2dkRzhnWm1WMFkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElGQlNJR1p5YjIwZ2RHaGxJRUZRU1Z4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUlFkV3hzVW1WeGRXVnpkQ2h1ZFcxaVpYSXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmNIVnNiSE12Skh0dWRXMWlaWEo5WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUdacGJHVnpJRzltSUdFZ2MzQmxZMmxtYVdNZ2NIVnNiQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSFZzYkhNdkkyeHBjM1F0Y0hWc2JDMXlaWEYxWlhOMGN5MW1hV3hsYzF4dUlDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjhjM1J5YVc1bmZTQnVkVzFpWlhJZ0xTQjBhR1VnVUZJZ2VXOTFJSGRwYzJnZ2RHOGdabVYwWTJoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUd4cGMzUWdiMllnWm1sc1pYTWdabkp2YlNCMGFHVWdRVkJKWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUlFkV3hzVW1WeGRXVnpkRVpwYkdWektHNTFiV0psY2l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzl3ZFd4c2N5OGtlMjUxYldKbGNuMHZabWxzWlhOZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1EyOXRjR0Z5WlNCMGQyOGdZbkpoYm1Ob1pYTXZZMjl0YldsMGN5OXlaWEJ2YzJsMGIzSnBaWE5jYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OWpiMjF0YVhSekx5TmpiMjF3WVhKbExYUjNieTFqYjIxdGFYUnpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1ltRnpaU0F0SUhSb1pTQmlZWE5sSUdOdmJXMXBkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHaGxZV1FnTFNCMGFHVWdhR1ZoWkNCamIyMXRhWFJjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmpiMjF3WVhKcGMyOXVYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR052YlhCaGNtVkNjbUZ1WTJobGN5aGlZWE5sTENCb1pXRmtMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwyTnZiWEJoY21VdkpIdGlZWE5sZlM0dUxpUjdhR1ZoWkgxZ0xDQnVkV3hzTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1RHbHpkQ0JoYkd3Z2RHaGxJR0p5WVc1amFHVnpJR1p2Y2lCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekx5TnNhWE4wTFdKeVlXNWphR1Z6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQmljbUZ1WTJobGMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnNhWE4wUW5KaGJtTm9aWE1vWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOWljbUZ1WTJobGMyQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkhaWFFnWVNCeVlYY2dZbXh2WWlCbWNtOXRJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybDBMMkpzYjJKekx5Tm5aWFF0WVMxaWJHOWlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2MyaGhJQzBnZEdobElITm9ZU0J2WmlCMGFHVWdZbXh2WWlCMGJ5Qm1aWFJqYUZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR0pzYjJJZ1puSnZiU0IwYUdVZ1FWQkpYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEVKc2IySW9jMmhoTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMMmRwZEM5aWJHOWljeThrZTNOb1lYMWdMQ0J1ZFd4c0xDQmpZaXdnSjNKaGR5Y3BPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0JoSUhOcGJtZHNaU0JpY21GdVkyaGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5aWNtRnVZMmhsY3k4aloyVjBMV0p5WVc1amFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdKeVlXNWphQ0F0SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0JpY21GdVkyZ2dkRzhnWm1WMFkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCaWNtRnVZMmdnWm5KdmJTQjBhR1VnUVZCSlhHNGdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJDY21GdVkyZ29ZbkpoYm1Ob0xDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJKeVlXNWphR1Z6THlSN1luSmhibU5vZldBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCSFpYUWdZU0JqYjIxdGFYUWdabkp2YlNCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekwyTnZiVzFwZEhNdkkyZGxkQzFoTFhOcGJtZHNaUzFqYjIxdGFYUmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCemFHRWdMU0IwYUdVZ2MyaGhJR1p2Y2lCMGFHVWdZMjl0YldsMElIUnZJR1psZEdOb1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnWTI5dGJXbDBJR1JoZEdGY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBRMjl0YldsMEtITm9ZU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW5hWFF2WTI5dGJXbDBjeThrZTNOb1lYMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dUR2x6ZENCMGFHVWdZMjl0YldsMGN5QnZiaUJoSUhKbGNHOXphWFJ2Y25rc0lHOXdkR2x2Ym1Gc2JIa2dabWxzZEdWeWFXNW5JR0o1SUhCaGRHZ3NJR0YxZEdodmNpQnZjaUIwYVcxbElISmhibWRsWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZZMjl0YldsMGN5OGpiR2x6ZEMxamIyMXRhWFJ6TFc5dUxXRXRjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHZjSFJwYjI1elhTQXRJSFJvWlNCbWFXeDBaWEpwYm1jZ2IzQjBhVzl1Y3lCbWIzSWdZMjl0YldsMGMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0dmNIUnBiMjV6TG5Ob1lWMGdMU0IwYUdVZ1UwaEJJRzl5SUdKeVlXNWphQ0IwYnlCemRHRnlkQ0JtY205dFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzI5d2RHbHZibk11Y0dGMGFGMGdMU0IwYUdVZ2NHRjBhQ0IwYnlCelpXRnlZMmdnYjI1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiYjNCMGFXOXVjeTVoZFhSb2IzSmRJQzBnZEdobElHTnZiVzFwZENCaGRYUm9iM0pjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdLRVJoZEdWOGMzUnlhVzVuS1gwZ1cyOXdkR2x2Ym5NdWMybHVZMlZkSUMwZ2IyNXNlU0JqYjIxdGFYUnpJR0ZtZEdWeUlIUm9hWE1nWkdGMFpTQjNhV3hzSUdKbElISmxkSFZ5Ym1Wa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZXloRVlYUmxmSE4wY21sdVp5bDlJRnR2Y0hScGIyNXpMblZ1ZEdsc1hTQXRJRzl1YkhrZ1kyOXRiV2wwY3lCaVpXWnZjbVVnZEdocGN5QmtZWFJsSUhkcGJHd2dZbVVnY21WMGRYSnVaV1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlHTnZiVzFwZEhNZ1ptOTFibVFnYldGMFkyaHBibWNnZEdobElHTnlhWFJsY21saFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JEYjIxdGFYUnpLRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnWTJJZ1BTQnZjSFJwYjI1ek8xeHVJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5QTlJSHQ5TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYjNCMGFXOXVjeTV6YVc1alpTQTlJSFJvYVhNdVgyUmhkR1ZVYjBsVFR5aHZjSFJwYjI1ekxuTnBibU5sS1R0Y2JpQWdJQ0FnSUc5d2RHbHZibk11ZFc1MGFXd2dQU0IwYUdsekxsOWtZWFJsVkc5SlUwOG9iM0IwYVc5dWN5NTFiblJwYkNrN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOWpiMjF0YVhSellDd2diM0IwYVc5dWN5d2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QmhJSE5wYm1kc1pTQmpiMjF0YVhRZ2FXNW1iM0p0WVhScGIyNGdabTl5SUdFZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5amIyMXRhWFJ6THlOblpYUXRZUzF6YVc1bmJHVXRZMjl0YldsMFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhKbFppQXRJSFJvWlNCeVpXWmxjbVZ1WTJVZ1ptOXlJSFJvWlNCamIyMXRhWFF0YVhOb1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUdOdmJXMXBkQ0JwYm1admNtMWhkR2x2Ymx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQWdLaTljYmlBZ0lHZGxkRk5wYm1kc1pVTnZiVzFwZENoeVpXWXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpXWWdQU0J5WldZZ2ZId2dKeWM3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2WTI5dGJXbDBjeThrZTNKbFpuMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSMlYwSUhSb1lTQnphR0VnWm05eUlHRWdjR0Z5ZEdsamRXeGhjaUJ2WW1wbFkzUWdhVzRnZEdobElISmxjRzl6YVhSdmNua3VJRlJvYVhNZ2FYTWdZU0JqYjI1MlpXNXBaVzVqWlNCbWRXNWpkR2x2Ymx4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMMk52Ym5SbGJuUnpMeU5uWlhRdFkyOXVkR1Z1ZEhOY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiWW5KaGJtTm9YU0F0SUhSb1pTQmljbUZ1WTJnZ2RHOGdiRzl2YXlCcGJpd2diM0lnZEdobElISmxjRzl6YVhSdmNua25jeUJrWldaaGRXeDBJR0p5WVc1amFDQnBaaUJ2YldsMGRHVmtYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NHRjBhQ0F0SUhSb1pTQndZWFJvSUc5bUlIUm9aU0JtYVd4bElHOXlJR1JwY21WamRHOXllVnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnWVNCa1pYTmpjbWx3ZEdsdmJpQnZaaUIwYUdVZ2NtVnhkV1Z6ZEdWa0lHOWlhbVZqZEN3Z2FXNWpiSFZrYVc1bklHRWdZRk5JUVdBZ2NISnZjR1Z5ZEhsY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBVMmhoS0dKeVlXNWphQ3dnY0dGMGFDd2dZMklwSUh0Y2JpQWdJQ0FnSUdKeVlXNWphQ0E5SUdKeVlXNWphQ0EvSUdBL2NtVm1QU1I3WW5KaGJtTm9mV0FnT2lBbkp6dGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOWpiMjUwWlc1MGN5OGtlM0JoZEdoOUpIdGljbUZ1WTJoOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFeHBjM1FnZEdobElHTnZiVzFwZENCemRHRjBkWE5sY3lCbWIzSWdZU0J3WVhKMGFXTjFiR0Z5SUhOb1lTd2dZbkpoYm1Ob0xDQnZjaUIwWVdkY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTl6ZEdGMGRYTmxjeThqYkdsemRDMXpkR0YwZFhObGN5MW1iM0l0WVMxemNHVmphV1pwWXkxeVpXWmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCemFHRWdMU0IwYUdVZ2MyaGhMQ0JpY21GdVkyZ3NJRzl5SUhSaFp5QjBieUJuWlhRZ2MzUmhkSFZ6WlhNZ1ptOXlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHbHpkQ0J2WmlCemRHRjBkWE5sYzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCc2FYTjBVM1JoZEhWelpYTW9jMmhoTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMMk52YlcxcGRITXZKSHR6YUdGOUwzTjBZWFIxYzJWellDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0IwYUdVZ1kyOXRZbWx1WldRZ2RtbGxkeUJ2WmlCamIyMXRhWFFnYzNSaGRIVnpaWE1nWm05eUlHRWdjR0Z5ZEdsamRXeGhjaUJ6YUdFc0lHSnlZVzVqYUN3Z2IzSWdkR0ZuWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZjM1JoZEhWelpYTXZJMmRsZEMxMGFHVXRZMjl0WW1sdVpXUXRjM1JoZEhWekxXWnZjaTFoTFhOd1pXTnBabWxqTFhKbFpseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhOb1lTQXRJSFJvWlNCemFHRXNJR0p5WVc1amFDd2diM0lnZEdGbklIUnZJR2RsZENCMGFHVWdZMjl0WW1sdVpXUWdjM1JoZEhWeklHWnZjbHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHTnZiV0pwYm1Wa0lITjBZWFIxYzF4dUlDQWdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBRMjl0WW1sdVpXUlRkR0YwZFhNb2MyaGhMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwyTnZiVzFwZEhNdkpIdHphR0Y5TDNOMFlYUjFjMkFzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJIWlhRZ1lTQmtaWE5qY21sd2RHbHZiaUJ2WmlCaElHZHBkQ0IwY21WbFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdloybDBMM1J5WldWekx5Tm5aWFF0WVMxMGNtVmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RISmxaVk5JUVNBdElIUm9aU0JUU0VFZ2IyWWdkR2hsSUhSeVpXVWdkRzhnWm1WMFkyaGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCallXeHNZbUZqYXlCa1lYUmhYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEZSeVpXVW9kSEpsWlZOSVFTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5bmFYUXZkSEpsWlhNdkpIdDBjbVZsVTBoQmZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQmliRzlpWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12WjJsMEwySnNiMkp6THlOamNtVmhkR1V0WVMxaWJHOWlYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2V5aHpkSEpwYm1kOFFuVm1abVZ5ZkVKc2IySXBmU0JqYjI1MFpXNTBJQzBnZEdobElHTnZiblJsYm5RZ2RHOGdZV1JrSUhSdklIUm9aU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdaR1YwWVdsc2N5QnZaaUIwYUdVZ1kzSmxZWFJsWkNCaWJHOWlYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR055WldGMFpVSnNiMklvWTI5dWRHVnVkQ3dnWTJJcElIdGNiaUFnSUNBZ0lHeGxkQ0J3YjNOMFFtOWtlU0E5SUhSb2FYTXVYMmRsZEVOdmJuUmxiblJQWW1wbFkzUW9ZMjl1ZEdWdWRDazdYRzVjYmlBZ0lDQWdJR3h2WnlnbmMyVnVaR2x1WnlCamIyNTBaVzUwSnl3Z2NHOXpkRUp2WkhrcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW5hWFF2WW14dlluTmdMQ0J3YjNOMFFtOWtlU3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVkbGRDQjBhR1VnYjJKcVpXTjBJSFJvWVhRZ2NtVndjbVZ6Wlc1MGN5QjBhR1VnY0hKdmRtbGtaV1FnWTI5dWRHVnVkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOFFuVm1abVZ5ZkVKc2IySjlJR052Ym5SbGJuUWdMU0IwYUdVZ1kyOXVkR1Z1ZENCMGJ5QnpaVzVrSUhSdklIUm9aU0J6WlhKMlpYSmNiaUFnSUNBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgwZ2RHaGxJSEpsY0hKbGMyVnVkR0YwYVc5dUlHOW1JR0JqYjI1MFpXNTBZQ0JtYjNJZ2RHaGxJRWRwZEVoMVlpQkJVRWxjYmlBZ0lDQXFMMXh1SUNBZ1gyZGxkRU52Ym5SbGJuUlBZbXBsWTNRb1kyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiMjUwWlc1MElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ2JHOW5LQ2RqYjI1MFpYUWdhWE1nWVNCemRISnBibWNuS1R0Y2JpQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpXNTBPaUJWZEdZNExtVnVZMjlrWlNoamIyNTBaVzUwS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1WTI5a2FXNW5PaUFuZFhSbUxUZ25MRnh1SUNBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1FuVm1abVZ5SUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCamIyNTBaVzUwSUdsdWMzUmhibU5sYjJZZ1FuVm1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQnNiMmNvSjFkbElHRndjR1ZoY2lCMGJ5QmlaU0JwYmlCT2IyUmxKeWs3WEc0Z0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWdWREb2dZMjl1ZEdWdWRDNTBiMU4wY21sdVp5Z25ZbUZ6WlRZMEp5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJtTnZaR2x1WnpvZ0oySmhjMlUyTkNjc1hHNGdJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJDYkc5aUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQmpiMjUwWlc1MElHbHVjM1JoYm1ObGIyWWdRbXh2WWlrZ2UxeHVJQ0FnSUNBZ0lDQWdiRzluS0NkWFpTQmhjSEJsWVhJZ2RHOGdZbVVnYVc0Z2RHaGxJR0p5YjNkelpYSW5LVHRjYmlBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWlc1ME9pQkNZWE5sTmpRdVpXNWpiMlJsS0dOdmJuUmxiblFwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaVzVqYjJScGJtYzZJQ2RpWVhObE5qUW5MRnh1SUNBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2ZTQmxiSE5sSUhzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lDQWdJQ0FnYkc5bktHQk9iM1FnYzNWeVpTQjNhR0YwSUhSb2FYTWdZMjl1ZEdWdWRDQnBjem9nSkh0MGVYQmxiMllnWTI5dWRHVnVkSDBzSUNSN1NsTlBUaTV6ZEhKcGJtZHBabmtvWTI5dWRHVnVkQ2w5WUNrN1hHNGdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxVnVhMjV2ZDI0Z1kyOXVkR1Z1ZENCd1lYTnpaV1FnZEc4Z2NHOXpkRUpzYjJJdUlFMTFjM1FnWW1VZ2MzUnlhVzVuSUc5eUlFSjFabVpsY2lBb2JtOWtaU2tnYjNJZ1FteHZZaUFvZDJWaUtTY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlGVndaR0YwWlNCaElIUnlaV1VnYVc0Z1IybDBYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZaMmwwTDNSeVpXVnpMeU5qY21WaGRHVXRZUzEwY21WbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWW1GelpWUnlaV1ZUU0VFZ0xTQjBhR1VnVTBoQklHOW1JSFJvWlNCMGNtVmxJSFJ2SUhWd1pHRjBaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQmhkR2dnTFNCMGFHVWdjR0YwYUNCbWIzSWdkR2hsSUc1bGR5Qm1hV3hsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZbXh2WWxOSVFTQXRJSFJvWlNCVFNFRWdabTl5SUhSb1pTQmliRzlpSUhSdklIQjFkQ0JoZENCZ2NHRjBhR0JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnVaWGNnZEhKbFpTQjBhR0YwSUdseklHTnlaV0YwWldSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFJRUJrWlhCeVpXTmhkR1ZrSUhWelpTQjdRR3hwYm1zZ1VtVndiM05wZEc5eWVTTmpjbVZoZEdWVWNtVmxmU0JwYm5OMFpXRmtYRzRnSUNBZ0tpOWNiaUFnSUhWd1pHRjBaVlJ5WldVb1ltRnpaVlJ5WldWVFNFRXNJSEJoZEdnc0lHSnNiMkpUU0VFc0lHTmlLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2JtVjNWSEpsWlNBOUlIdGNiaUFnSUNBZ0lDQWdJR0poYzJWZmRISmxaVG9nWW1GelpWUnlaV1ZUU0VFc0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVZjYmlBZ0lDQWdJQ0FnSUhSeVpXVTZJRnQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFJvT2lCd1lYUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaGhPaUJpYkc5aVUwaEJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXOWtaVG9nSnpFd01EWTBOQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbllteHZZaWNzWEc0Z0lDQWdJQ0FnSUNCOVhTeGNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2WjJsMEwzUnlaV1Z6WUN3Z2JtVjNWSEpsWlN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUIwY21WbElHbHVJR2RwZEZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDJkcGRDOTBjbVZsY3k4alkzSmxZWFJsTFdFdGRISmxaVnh1SUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIUnlaV1VnTFNCMGFHVWdkSEpsWlNCMGJ5QmpjbVZoZEdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JpWVhObFUwaEJJQzBnZEdobElISnZiM1FnYzJoaElHOW1JSFJvWlNCMGNtVmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JtVjNJSFJ5WldVZ2RHaGhkQ0JwY3lCamNtVmhkR1ZrWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaVlJ5WldVb2RISmxaU3dnWW1GelpWTklRU3dnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRVDFOVUp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZaMmwwTDNSeVpXVnpZQ3dnZTF4dUlDQWdJQ0FnSUNBZ2RISmxaU3hjYmlBZ0lDQWdJQ0FnSUdKaGMyVmZkSEpsWlRvZ1ltRnpaVk5JUVN3Z0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0JqWVcxbGJHTmhjMlZjYmlBZ0lDQWdJSDBzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCQlpHUWdZU0JqYjIxdGFYUWdkRzhnZEdobElISmxjRzl6YVhSdmNubGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OW5hWFF2WTI5dGJXbDBjeThqWTNKbFlYUmxMV0V0WTI5dGJXbDBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NHRnlaVzUwSUMwZ2RHaGxJRk5JUVNCdlppQjBhR1VnY0dGeVpXNTBJR052YlcxcGRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhSeVpXVWdMU0IwYUdVZ1UwaEJJRzltSUhSb1pTQjBjbVZsSUdadmNpQjBhR2x6SUdOdmJXMXBkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWxjM05oWjJVZ0xTQjBhR1VnWTI5dGJXbDBJRzFsYzNOaFoyVmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmIzQjBhVzl1YzEwZ0xTQmpiMjF0YVhRZ2IzQjBhVzl1YzF4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2Y0hScGIyNXpMbUYxZEdodmNsMGdMU0IwYUdVZ1lYVjBhRzl5SUc5bUlIUm9aU0JqYjIxdGFYUmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmIzQjBhVzl1Y3k1amIyMXRhWFJsY2wwZ0xTQjBhR1VnWTI5dGJXbDBkR1Z5WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdZMjl0YldsMElIUm9ZWFFnYVhNZ1kzSmxZWFJsWkZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCamIyMXRhWFFvY0dGeVpXNTBMQ0IwY21WbExDQnRaWE56WVdkbExDQnZjSFJwYjI1ekxDQmpZaWtnZTF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNCallpQTlJRzl3ZEdsdmJuTTdYRzRnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnZTMwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHeGxkQ0JrWVhSaElEMGdlMXh1SUNBZ0lDQWdJQ0FnYldWemMyRm5aU3hjYmlBZ0lDQWdJQ0FnSUhSeVpXVXNYRzRnSUNBZ0lDQWdJQ0J3WVhKbGJuUnpPaUJiY0dGeVpXNTBYU3hjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUdSaGRHRWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0J2Y0hScGIyNXpMQ0JrWVhSaEtUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCUFUxUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzluYVhRdlkyOXRiV2wwYzJBc0lHUmhkR0VzSUdOaUtWeHVJQ0FnSUNBZ0lDQWdMblJvWlc0b0tISmxjM0J2Ym5ObEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlkzVnljbVZ1ZEZSeVpXVXVjMmhoSUQwZ2NtVnpjRzl1YzJVdVpHRjBZUzV6YUdFN0lDOHZJRlZ3WkdGMFpTQnNZWFJsYzNRZ1kyOXRiV2wwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQlZjR1JoZEdVZ1lTQnlaV1pjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTluYVhRdmNtVm1jeThqZFhCa1lYUmxMV0V0Y21WbVpYSmxibU5sWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZtSUMwZ2RHaGxJSEpsWmlCMGJ5QjFjR1JoZEdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JqYjIxdGFYUlRTRUVnTFNCMGFHVWdVMGhCSUhSdklIQnZhVzUwSUhSb1pTQnlaV1psY21WdVkyVWdkRzljYmlBZ0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdabTl5WTJVZ0xTQnBibVJwWTJGMFpYTWdkMmhsZEdobGNpQjBieUJtYjNKalpTQnZjaUJsYm5OMWNtVWdZU0JtWVhOMExXWnZjbmRoY21RZ2RYQmtZWFJsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdkWEJrWVhSbFpDQnlaV1lnWW1GamExeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQjFjR1JoZEdWSVpXRmtLSEpsWml3Z1kyOXRiV2wwVTBoQkxDQm1iM0pqWlN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVFWUkRTQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJkcGRDOXlaV1p6THlSN2NtVm1mV0FzSUh0Y2JpQWdJQ0FnSUNBZ0lITm9ZVG9nWTI5dGJXbDBVMGhCTEZ4dUlDQWdJQ0FnSUNBZ1ptOXlZMlU2SUdadmNtTmxMRnh1SUNBZ0lDQWdmU3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUZWd1pHRjBaU0JqYjIxdGFYUWdjM1JoZEhWelhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012YzNSaGRIVnpaWE12WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjl0YldsMFUwaEJJQzBnZEdobElGTklRU0J2WmlCMGFHVWdZMjl0YldsMElIUm9ZWFFnYzJodmRXeGtJR0psSUhWd1pHRjBaV1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZjSFJwYjI1eklDMGdRMjl0YldsMElITjBZWFIxY3lCd1lYSmhiV1YwWlhKelhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYjNCMGFXOXVjeTV6ZEdGMFpTQXRJRlJvWlNCemRHRjBaU0J2WmlCMGFHVWdjM1JoZEhWekxpQkRZVzRnWW1VZ2IyNWxJRzltT2lCd1pXNWthVzVuTENCemRXTmpaWE56TENCbGNuSnZjaXdnYjNJZ1ptRnBiSFZ5WlM1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiYjNCMGFXOXVjeTUwWVhKblpYUmZkWEpzWFNBdElGUm9aU0IwWVhKblpYUWdWVkpNSUhSdklHRnpjMjlqYVdGMFpTQjNhWFJvSUhSb2FYTWdjM1JoZEhWekxseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0dmNIUnBiMjV6TG1SbGMyTnlhWEIwYVc5dVhTQXRJRUVnYzJodmNuUWdaR1Z6WTNKcGNIUnBiMjRnYjJZZ2RHaGxJSE4wWVhSMWN5NWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1amIyNTBaWGgwWFNBdElFRWdjM1J5YVc1bklHeGhZbVZzSUhSdklHUnBabVpsY21WdWRHbGhkR1VnZEdocGN5QnpkR0YwZFhNZ1lXMXZibWNnUTBrZ2MzbHpkR1Z0Y3k1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0IxY0dSaGRHVmtJR052YlcxcGRDQmlZV05yWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUhWd1pHRjBaVk4wWVhSMWN5aGpiMjF0YVhSVFNFRXNJRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRTlUVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwzTjBZWFIxYzJWekx5UjdZMjl0YldsMFUwaEJmV0FzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCVmNHUmhkR1VnY21Wd2IzTnBkRzl5ZVNCcGJtWnZjbTFoZEdsdmJseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzSmxjRzl6THlObFpHbDBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElFNWxkeUJ3WVhKaGJXVjBaWEp6SUhSb1lYUWdkMmxzYkNCaVpTQnpaWFFnZEc4Z2RHaGxJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnZjSFJwYjI1ekxtNWhiV1VnTFNCT1lXMWxJRzltSUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyOXdkR2x2Ym5NdVpHVnpZM0pwY0hScGIyNWRJQzBnUVNCemFHOXlkQ0JrWlhOamNtbHdkR2x2YmlCdlppQjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRnR2Y0hScGIyNXpMbWh2YldWd1lXZGxYU0F0SUVFZ1ZWSk1JSGRwZEdnZ2JXOXlaU0JwYm1admNtMWhkR2x2YmlCaFltOTFkQ0IwYUdVZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCYmIzQjBhVzl1Y3k1d2NtbDJZWFJsWFNBdElFVnBkR2hsY2lCMGNuVmxJSFJ2SUcxaGEyVWdkR2hsSUhKbGNHOXphWFJ2Y25rZ2NISnBkbUYwWlN3Z2IzSWdabUZzYzJVZ2RHOGdiV0ZyWlNCcGRDQndkV0pzYVdNdVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUZ0dmNIUnBiMjV6TG1oaGMxOXBjM04xWlhOZElDMGdSV2wwYUdWeUlIUnlkV1VnZEc4Z1pXNWhZbXhsSUdsemMzVmxjeUJtYjNJZ2RHaHBjeUJ5WlhCdmMybDBiM0o1TENCbVlXeHpaU0IwYnlCa2FYTmhZbXhsSUhSb1pXMHVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHZjSFJwYjI1ekxtaGhjMTkzYVd0cFhTQXRJRVZwZEdobGNpQjBjblZsSUhSdklHVnVZV0pzWlNCMGFHVWdkMmxyYVNCbWIzSWdkR2hwY3lCeVpYQnZjMmwwYjNKNUxDQm1ZV3h6WlNCMGJ5QmthWE5oWW14bElHbDBMbHh1SUNBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmJiM0IwYVc5dWN5NW9ZWE5mWkc5M2JteHZZV1J6WFNBdElFVnBkR2hsY2lCMGNuVmxJSFJ2SUdWdVlXSnNaU0JrYjNkdWJHOWhaSE1zSUdaaGJITmxJSFJ2SUdScGMyRmliR1VnZEdobGJTNWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1a1pXWmhkV3gwWDJKeVlXNWphRjBnTFNCVmNHUmhkR1Z6SUhSb1pTQmtaV1poZFd4MElHSnlZVzVqYUNCbWIzSWdkR2hwY3lCeVpYQnZjMmwwYjNKNUxseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhWd1pHRjBaV1FnY21Wd2IzTnBkRzl5ZVNCaVlXTnJYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJSFZ3WkdGMFpWSmxjRzl6YVhSdmNua29iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOVlDd2diM0IwYVc5dWN5d2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0lDb2dSMlYwSUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjbVZ3YjNNdkkyZGxkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIUm9aU0J5WlhCdmMybDBiM0o1WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRFUmxkR0ZwYkhNb1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJNYVhOMElIUm9aU0JqYjI1MGNtbGlkWFJ2Y25NZ2RHOGdkR2hsSUhKbGNHOXphWFJ2Y25sY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeThqYkdsemRDMWpiMjUwY21saWRYUnZjbk5jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlHTnZiblJ5YVdKMWRHOXljMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSRGIyNTBjbWxpZFhSdmNuTW9ZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5amIyNTBjbWxpZFhSdmNuTmdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dUR2x6ZENCMGFHVWdZMjl1ZEhKcFluVjBiM0lnYzNSaGRITWdkRzhnZEdobElISmxjRzl6YVhSdmNubGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k4amJHbHpkQzFqYjI1MGNtbGlkWFJ2Y25OY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JR052Ym5SeWFXSjFkRzl5YzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUkRiMjUwY21saWRYUnZjbE4wWVhSektHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2YzNSaGRITXZZMjl1ZEhKcFluVjBiM0p6WUN3Z2JuVnNiQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUhWelpYSnpJSGRvYnlCaGNtVWdZMjlzYkdGaWIzSmhkRzl5Y3lCdmJpQjBhR1VnY21Wd2IzTnBkRzl5ZVM0Z1ZHaGxJR04xY25KbGJuUnNlU0JoZFhSb1pXNTBhV05oZEdWa0lIVnpaWElnYlhWemRDQm9ZWFpsWEc0Z0lDQWdLaUJ3ZFhOb0lHRmpZMlZ6Y3lCMGJ5QjFjMlVnZEdocGN5QnRaWFJvYjJSY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5eVpYQnZjeTlqYjJ4c1lXSnZjbUYwYjNKekx5TnNhWE4wTFdOdmJHeGhZbTl5WVhSdmNuTmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUdOdmJHeGhZbTl5WVhSdmNuTmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaMlYwUTI5c2JHRmliM0poZEc5eWN5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJOdmJHeGhZbTl5WVhSdmNuTmdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dRMmhsWTJzZ2FXWWdZU0IxYzJWeUlHbHpJR0VnWTI5c2JHRmliM0poZEc5eUlHOXVJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012WTI5c2JHRmliM0poZEc5eWN5OGpZMmhsWTJzdGFXWXRZUzExYzJWeUxXbHpMV0V0WTI5c2JHRmliM0poZEc5eVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZFhObGNtNWhiV1VnTFNCMGFHVWdkWE5sY2lCMGJ5QmphR1ZqYTF4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RISjFaU0JwWmlCMGFHVWdkWE5sY2lCcGN5QmhJR052Ykd4aFltOXlZWFJ2Y2lCaGJtUWdabUZzYzJVZ2FXWWdkR2hsZVNCaGNtVWdibTkwWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBJSHRDYjI5c1pXRnVmU0JiWkdWelkzSnBjSFJwYjI1ZFhHNGdJQ0FnS2k5Y2JpQWdJR2x6UTI5c2JHRmliM0poZEc5eUtIVnpaWEp1WVcxbExDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJOdmJHeGhZbTl5WVhSdmNuTXZKSHQxYzJWeWJtRnRaWDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElIUm9aU0JqYjI1MFpXNTBjeUJ2WmlCaElISmxjRzl6YVhSdmNubGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5amIyNTBaVzUwY3k4aloyVjBMV052Ym5SbGJuUnpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NtVm1JQzBnZEdobElISmxaaUIwYnlCamFHVmphMXh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQmhkR2dnTFNCMGFHVWdjR0YwYUNCamIyNTBZV2x1YVc1bklIUm9aU0JqYjI1MFpXNTBJSFJ2SUdabGRHTm9YRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlISmhkeUF0SUdCMGNuVmxZQ0JwWmlCMGFHVWdjbVZ6ZFd4MGN5QnphRzkxYkdRZ1ltVWdjbVYwZFhKdVpXUWdjbUYzSUdsdWMzUmxZV1FnYjJZZ1IybDBTSFZpSjNNZ2JtOXliV0ZzYVhwbFpDQm1iM0p0WVhSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JtWlhSamFHVmtJR1JoZEdGY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBRMjl1ZEdWdWRITW9jbVZtTENCd1lYUm9MQ0J5WVhjc0lHTmlLU0I3WEc0Z0lDQWdJQ0J3WVhSb0lEMGdjR0YwYUNBL0lHQWtlMlZ1WTI5a1pWVlNTU2h3WVhSb0tYMWdJRG9nSnljN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdlkyOXVkR1Z1ZEhNdkpIdHdZWFJvZldBc0lIdGNiaUFnSUNBZ0lDQWdJSEpsWml4Y2JpQWdJQ0FnSUgwc0lHTmlMQ0J5WVhjcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVkbGRDQjBhR1VnVWtWQlJFMUZJRzltSUdFZ2NtVndiM05wZEc5eWVWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzSmxjRzl6TDJOdmJuUmxiblJ6THlOblpYUXRkR2hsTFhKbFlXUnRaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxaaUF0SUhSb1pTQnlaV1lnZEc4Z1kyaGxZMnRjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdjbUYzSUMwZ1lIUnlkV1ZnSUdsbUlIUm9aU0J5WlhOMWJIUnpJSE5vYjNWc1pDQmlaU0J5WlhSMWNtNWxaQ0J5WVhjZ2FXNXpkR1ZoWkNCdlppQkhhWFJJZFdJbmN5QnViM0p0WVd4cGVtVmtJR1p2Y20xaGRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUdabGRHTm9aV1FnWkdGMFlWeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQm5aWFJTWldGa2JXVW9jbVZtTENCeVlYY3NJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmNtVmhaRzFsWUN3Z2UxeHVJQ0FnSUNBZ0lDQWdjbVZtTEZ4dUlDQWdJQ0FnZlN3Z1kySXNJSEpoZHlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUm05eWF5QmhJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OW1iM0pyY3k4alkzSmxZWFJsTFdFdFptOXlhMXh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIUm9aU0J1Wlhkc2VTQmpjbVZoZEdWa0lHWnZjbXRjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWm05eWF5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlBVMVFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5bWIzSnJjMkFzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJHYjNKcklHRWdjbVZ3YjNOcGRHOXllU0IwYnlCaGJpQnZjbWRoYm1sNllYUnBiMjVjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OW1iM0pyY3k4alkzSmxZWFJsTFdFdFptOXlhMXh1SUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHOXlaeUF0SUc5eVoyRnVhWHBoZEdsdmJpQjNhR1Z5WlNCNWIzVW5aQ0JzYVd0bElIUnZJR055WldGMFpTQjBhR1VnWm05eWF5NWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCcGJtWnZjbTFoZEdsdmJpQmhZbTkxZENCMGFHVWdibVYzYkhrZ1kzSmxZWFJsWkNCbWIzSnJYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2x4dUlDQWdJQ292WEc0Z0lDQm1iM0pyVkc5UGNtY29iM0puTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCUFUxUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzltYjNKcmN6OXZjbWRoYm1sNllYUnBiMjQ5Skh0dmNtZDlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRXhwYzNRZ1lTQnlaWEJ2YzJsMGIzSjVKM01nWm05eWEzTmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5bWIzSnJjeThqYkdsemRDMW1iM0pyYzF4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJR3hwYzNRZ2IyWWdjbVZ3YjNOcGRHOXlhV1Z6SUdadmNtdGxaQ0JtY205dElIUm9hWE1nYjI1bFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHeHBjM1JHYjNKcmN5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDJadmNtdHpZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCaWNtRnVZMmdnWm5KdmJTQmhiaUJsZUdsemRHbHVaeUJpY21GdVkyZ3VYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyOXNaRUp5WVc1amFEMXRZWE4wWlhKZElDMGdkR2hsSUc1aGJXVWdiMllnZEdobElHVjRhWE4wYVc1bklHSnlZVzVqYUZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVsZDBKeVlXNWphQ0F0SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0J1WlhjZ1luSmhibU5vWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdZMjl0YldsMElHUmhkR0VnWm05eUlIUm9aU0JvWldGa0lHOW1JSFJvWlNCdVpYY2dZbkpoYm1Ob1hHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHTnlaV0YwWlVKeVlXNWphQ2h2YkdSQ2NtRnVZMmdzSUc1bGQwSnlZVzVqYUN3Z1kySXBJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYm1WM1FuSmhibU5vSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNCallpQTlJRzVsZDBKeVlXNWphRHRjYmlBZ0lDQWdJQ0FnSUc1bGQwSnlZVzVqYUNBOUlHOXNaRUp5WVc1amFEdGNiaUFnSUNBZ0lDQWdJRzlzWkVKeVlXNWphQ0E5SUNkdFlYTjBaWEluTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJTWldZb1lHaGxZV1J6THlSN2IyeGtRbkpoYm1Ob2ZXQXBYRzRnSUNBZ0lDQWdJQ0F1ZEdobGJpZ29jbVZ6Y0c5dWMyVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCemFHRWdQU0J5WlhOd2IyNXpaUzVrWVhSaExtOWlhbVZqZEM1emFHRTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWU1pXWW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WbU9pQmdjbVZtY3k5b1pXRmtjeThrZTI1bGQwSnlZVzVqYUgxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z1kySXBPMXh1SUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTNKbFlYUmxJR0VnYm1WM0lIQjFiR3dnY21WeGRXVnpkRnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0IxYkd4ekx5TmpjbVZoZEdVdFlTMXdkV3hzTFhKbGNYVmxjM1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdkR2hsSUhCMWJHd2djbVZ4ZFdWemRDQmtaWE5qY21sd2RHbHZibHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHNWxkeUJ3ZFd4c0lISmxjWFZsYzNSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1kzSmxZWFJsVUhWc2JGSmxjWFZsYzNRb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2Y0hWc2JITmdMQ0J2Y0hScGIyNXpMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVlhCa1lYUmxJR0VnY0hWc2JDQnlaWEYxWlhOMFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNIVnNiSE12STNWd1pHRjBaUzFoTFhCMWJHd3RjbVZ4ZFdWemRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo4YzNSeWFXNW5mU0J1ZFcxaVpYSWdMU0IwYUdVZ2JuVnRZbVZ5SUc5bUlIUm9aU0J3ZFd4c0lISmxjWFZsYzNRZ2RHOGdkWEJrWVhSbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUhSb1pTQndkV3hzSUhKbGNYVmxjM1FnWkdWelkzSnBjSFJwYjI1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlGdGpZbDBnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUhCMWJHd2djbVZ4ZFdWemRDQnBibVp2Y20xaGRHbHZibHh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0IxY0dSaGRHVlFkV3hzVW1WeGRXVnpkQ2h1ZFcxaVpYSXNJRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRUZVUTBnbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOXdkV3hzY3k4a2UyNTFiV0psY24xZ0xDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dUR2x6ZENCMGFHVWdhRzl2YTNNZ1ptOXlJSFJvWlNCeVpYQnZjMmwwYjNKNVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012YUc5dmEzTXZJMnhwYzNRdGFHOXZhM05jYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlHaHZiMnR6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUkliMjlyY3loallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBkRlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMMmh2YjJ0ellDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0JoSUdodmIyc2dabTl5SUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjbVZ3YjNNdmFHOXZhM012STJkbGRDMXphVzVuYkdVdGFHOXZhMXh1SUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHbGtJQzBnZEdobElHbGtJRzltSUhSb1pTQjNaV0p2YjJ0Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JrWlhSaGFXeHpJRzltSUhSb1pTQjNaV0p2YjJ0Y2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBTRzl2YXlocFpDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5b2IyOXJjeThrZTJsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkJaR1FnWVNCdVpYY2dhRzl2YXlCMGJ5QjBhR1VnY21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNKbGNHOXpMMmh2YjJ0ekx5TmpjbVZoZEdVdFlTMW9iMjlyWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJSFJvWlNCamIyNW1hV2QxY21GMGFXOXVJR1JsYzJOeWFXSnBibWNnZEdobElHNWxkeUJvYjI5clhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYm1WM0lIZGxZbWh2YjJ0Y2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1kzSmxZWFJsU0c5dmF5aHZjSFJwYjI1ekxDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlBVMVFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5b2IyOXJjMkFzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRlpHbDBJR0Z1SUdWNGFYTjBhVzVuSUhkbFltaHZiMnRjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OW9iMjlyY3k4alpXUnBkQzFoTFdodmIydGNiaUFnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCcFpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2QyVmlhRzl2YTF4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0IwYUdVZ2JtVjNJR1JsYzJOeWFYQjBhVzl1SUc5bUlIUm9aU0IzWldKb2IyOXJYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2RYQmtZWFJsWkNCM1pXSm9iMjlyWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUhWd1pHRjBaVWh2YjJzb2FXUXNJRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25VRUZVUTBnbkxDQmdMM0psY0c5ekx5UjdkR2hwY3k1ZlgyWjFiR3h1WVcxbGZTOW9iMjlyY3k4a2UybGtmV0FzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRVpXeGxkR1VnWVNCM1pXSm9iMjlyWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZhRzl2YTNNdkkyUmxiR1YwWlMxaExXaHZiMnRjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnBaQ0F0SUhSb1pTQnBaQ0J2WmlCMGFHVWdkMlZpYUc5dmF5QjBieUJpWlNCa1pXeGxkR1ZrWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGNuVmxJR2xtSUhSb1pTQmpZV3hzSUdseklITjFZMk5sYzNObWRXeGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdaR1ZzWlhSbFNHOXZheWhwWkN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkRVJVeEZWRVVuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5b2IyOXJjeThrZTJsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk1hWE4wSUhSb1pTQmtaWEJzYjNrZ2EyVjVjeUJtYjNJZ2RHaGxJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OXJaWGx6THlOc2FYTjBMV1JsY0d4dmVTMXJaWGx6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQmtaWEJzYjNrZ2EyVjVjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JzYVhOMFMyVjVjeWhqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMGRGVkNjc0lHQXZjbVZ3YjNNdkpIdDBhR2x6TGw5ZlpuVnNiRzVoYldWOUwydGxlWE5nTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElHRWdaR1Z3Ykc5NUlHdGxlU0JtYjNJZ2RHaGxJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OXJaWGx6THlOblpYUXRZUzFrWlhCc2Iza3RhMlY1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdhV1FnTFNCMGFHVWdhV1FnYjJZZ2RHaGxJR1JsY0d4dmVTQnJaWGxjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQmtaWFJoYVd4eklHOW1JSFJvWlNCa1pYQnNiM2tnYTJWNVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHZGxkRXRsZVNocFpDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZEhSVlFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5clpYbHpMeVI3YVdSOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFRmtaQ0JoSUc1bGR5QmtaWEJzYjNrZ2EyVjVJSFJ2SUhSb1pTQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjbVZ3YjNNdmEyVjVjeThqWVdSa0xXRXRibVYzTFdSbGNHeHZlUzFyWlhsY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnZEdobElHTnZibVpwWjNWeVlYUnBiMjRnWkdWelkzSnBZbWx1WnlCMGFHVWdibVYzSUdSbGNHeHZlU0JyWlhsY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J1WlhjZ1pHVndiRzk1SUd0bGVWeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmpjbVZoZEdWTFpYa29iM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFUMU5VSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmEyVjVjMkFzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRVpXeGxkR1VnWVNCa1pYQnNiM2tnYTJWNVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNtVndiM012YTJWNWN5OGpjbVZ0YjNabExXRXRaR1Z3Ykc5NUxXdGxlVnh1SUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHbGtJQzBnZEdobElHbGtJRzltSUhSb1pTQmtaWEJzYjNrZ2EyVjVJSFJ2SUdKbElHUmxiR1YwWldSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUnlkV1VnYVdZZ2RHaGxJR05oYkd3Z2FYTWdjM1ZqWTJWemMyWjFiRnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JrWld4bGRHVkxaWGtvYVdRc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblJFVk1SVlJGSnl3Z1lDOXlaWEJ2Y3k4a2UzUm9hWE11WDE5bWRXeHNibUZ0WlgwdmEyVjVjeThrZTJsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkVaV3hsZEdVZ1lTQm1hV3hsSUdaeWIyMGdZU0JpY21GdVkyaGNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5amIyNTBaVzUwY3k4alpHVnNaWFJsTFdFdFptbHNaVnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHSnlZVzVqYUNBdElIUm9aU0JpY21GdVkyZ2dkRzhnWkdWc1pYUmxJR1p5YjIwc0lHOXlJSFJvWlNCa1pXWmhkV3gwSUdKeVlXNWphQ0JwWmlCdWIzUWdjM0JsWTJsbWFXVmtYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NHRjBhQ0F0SUhSb1pTQndZWFJvSUc5bUlIUm9aU0JtYVd4bElIUnZJSEpsYlc5MlpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUdOdmJXMXBkQ0JwYmlCM2FHbGphQ0IwYUdVZ1pHVnNaWFJsSUc5alkzVnljbVZrWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdSbGJHVjBaVVpwYkdVb1luSmhibU5vTENCd1lYUm9MQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwVTJoaEtHSnlZVzVqYUN3Z2NHRjBhQ2xjYmlBZ0lDQWdJQ0FnSUM1MGFHVnVLQ2h5WlhOd2IyNXpaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZzWlhSbFEyOXRiV2wwSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ1lFUmxiR1YwWlNCMGFHVWdabWxzWlNCaGRDQW5KSHR3WVhSb2ZTZGdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoT2lCeVpYTndiMjV6WlM1a1lYUmhMbk5vWVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVlXNWphQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SRVZNUlZSRkp5d2dZQzl5WlhCdmN5OGtlM1JvYVhNdVgxOW1kV3hzYm1GdFpYMHZZMjl1ZEdWdWRITXZKSHR3WVhSb2ZXQXNJR1JsYkdWMFpVTnZiVzFwZEN3Z1kySXBPMXh1SUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUTJoaGJtZGxJR0ZzYkNCeVpXWmxjbVZ1WTJWeklHbHVJR0VnY21Wd2J5Qm1jbTl0SUc5c1pGQmhkR2dnZEc4Z2JtVjNYM0JoZEdoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JpY21GdVkyZ2dMU0IwYUdVZ1luSmhibU5vSUhSdklHTmhjbko1SUc5MWRDQjBhR1VnY21WbVpYSmxibU5sSUdOb1lXNW5aU3dnYjNJZ2RHaGxJR1JsWm1GMWJIUWdZbkpoYm1Ob0lHbG1JRzV2ZENCemNHVmphV1pwWldSY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J2YkdSUVlYUm9JQzBnYjNKcFoybHVZV3dnY0dGMGFGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1bGQxQmhkR2dnTFNCdVpYY2djbVZtWlhKbGJtTmxJSEJoZEdoY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JqYjIxdGFYUWdhVzRnZDJocFkyZ2dkR2hsSUcxdmRtVWdiMk5qZFhKeVpXUmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiVzkyWlNoaWNtRnVZMmdzSUc5c1pGQmhkR2dzSUc1bGQxQmhkR2dzSUdOaUtTQjdYRzRnSUNBZ0lDQnNaWFFnYjJ4a1UyaGhPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFVtVm1LR0JvWldGa2N5OGtlMkp5WVc1amFIMWdLVnh1SUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LSHRrWVhSaE9pQjdiMkpxWldOMGZYMHBJRDArSUhSb2FYTXVaMlYwVkhKbFpTaGdKSHR2WW1wbFkzUXVjMmhoZlQ5eVpXTjFjbk5wZG1VOWRISjFaV0FwS1Z4dUlDQWdJQ0FnSUNBZ0xuUm9aVzRvS0h0a1lYUmhPaUI3ZEhKbFpTd2djMmhoZlgwcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXNaRk5vWVNBOUlITm9ZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1WlhkVWNtVmxJRDBnZEhKbFpTNXRZWEFvS0hKbFppa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxaaTV3WVhSb0lEMDlQU0J2YkdSUVlYUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXWXVjR0YwYUNBOUlHNWxkMUJoZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZtTG5SNWNHVWdQVDA5SUNkMGNtVmxKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhKbFppNXphR0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZtTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVlVjbVZsS0c1bGQxUnlaV1VwTzF4dUlDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQzUwYUdWdUtDaDdaR0YwWVRvZ2RISmxaWDBwSUQwK0lIUm9hWE11WTI5dGJXbDBLRzlzWkZOb1lTd2dkSEpsWlM1emFHRXNJR0JTWlc1aGJXVmtJQ2NrZTI5c1pGQmhkR2g5SnlCMGJ5QW5KSHR1WlhkUVlYUm9mU2RnS1NsY2JpQWdJQ0FnSUNBZ0lDNTBhR1Z1S0NoN1pHRjBZVG9nWTI5dGJXbDBmU2tnUFQ0Z2RHaHBjeTUxY0dSaGRHVklaV0ZrS0dCb1pXRmtjeThrZTJKeVlXNWphSDFnTENCamIyMXRhWFF1YzJoaExDQjBjblZsTENCallpa3BPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlGZHlhWFJsSUdFZ1ptbHNaU0IwYnlCMGFHVWdjbVZ3YjNOcGRHOXllVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekwyTnZiblJsYm5Sekx5TjFjR1JoZEdVdFlTMW1hV3hsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZbkpoYm1Ob0lDMGdkR2hsSUc1aGJXVWdiMllnZEdobElHSnlZVzVqYUZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEJoZEdnZ0xTQjBhR1VnY0dGMGFDQm1iM0lnZEdobElHWnBiR1ZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmpiMjUwWlc1MElDMGdkR2hsSUdOdmJuUmxiblJ6SUc5bUlIUm9aU0JtYVd4bFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYldWemMyRm5aU0F0SUhSb1pTQmpiMjF0YVhRZ2JXVnpjMkZuWlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2Y0hScGIyNXpYU0F0SUdOdmJXMXBkQ0J2Y0hScGIyNXpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1cyOXdkR2x2Ym5NdVlYVjBhRzl5WFNBdElIUm9aU0JoZFhSb2IzSWdiMllnZEdobElHTnZiVzFwZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2Y0hScGIyNXpMbU52YlcxcGRHVnlYU0F0SUhSb1pTQmpiMjF0YVhSMFpYSmNiaUFnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyOXdkR2x2Ym5NdVpXNWpiMlJsWFNBdElIUnlkV1VnYVdZZ2RHaGxJR052Ym5SbGJuUWdjMmh2ZFd4a0lHSmxJR0poYzJVMk5DQmxibU52WkdWa1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYm1WM0lHTnZiVzFwZEZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCM2NtbDBaVVpwYkdVb1luSmhibU5vTENCd1lYUm9MQ0JqYjI1MFpXNTBMQ0J0WlhOellXZGxMQ0J2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQmpZaUE5SUc5d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2UzMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnNaWFFnWm1sc1pWQmhkR2dnUFNCd1lYUm9JRDhnWlc1amIyUmxWVkpKS0hCaGRHZ3BJRG9nSnljN1hHNGdJQ0FnSUNCc1pYUWdjMmh2ZFd4a1JXNWpiMlJsSUQwZ2IzQjBhVzl1Y3k1bGJtTnZaR1VnSVQwOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYkdWMElHTnZiVzFwZENBOUlIdGNiaUFnSUNBZ0lDQWdJR0p5WVc1amFDeGNiaUFnSUNBZ0lDQWdJRzFsYzNOaFoyVXNYRzRnSUNBZ0lDQWdJQ0JoZFhSb2IzSTZJRzl3ZEdsdmJuTXVZWFYwYUc5eUxGeHVJQ0FnSUNBZ0lDQWdZMjl0YldsMGRHVnlPaUJ2Y0hScGIyNXpMbU52YlcxcGRIUmxjaXhjYmlBZ0lDQWdJQ0FnSUdOdmJuUmxiblE2SUhOb2IzVnNaRVZ1WTI5a1pTQS9JRUpoYzJVMk5DNWxibU52WkdVb1kyOXVkR1Z1ZENrZ09pQmpiMjUwWlc1MExGeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFUyaGhLR0p5WVc1amFDd2dabWxzWlZCaGRHZ3BYRzRnSUNBZ0lDQWdJQ0F1ZEdobGJpZ29jbVZ6Y0c5dWMyVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YlcxcGRDNXphR0VnUFNCeVpYTndiMjV6WlM1a1lYUmhMbk5vWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVZWUW5MQ0JnTDNKbGNHOXpMeVI3ZEdocGN5NWZYMloxYkd4dVlXMWxmUzlqYjI1MFpXNTBjeThrZTJacGJHVlFZWFJvZldBc0lHTnZiVzFwZEN3Z1kySXBPMXh1SUNBZ0lDQWdJQ0FnZlN3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCVlZDY3NJR0F2Y21Wd2IzTXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlMMk52Ym5SbGJuUnpMeVI3Wm1sc1pWQmhkR2g5WUN3Z1kyOXRiV2wwTENCallpazdYRzRnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEYUdWamF5QnBaaUJoSUhKbGNHOXphWFJ2Y25rZ2FYTWdjM1JoY25KbFpDQmllU0I1YjNWY2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5aFkzUnBkbWwwZVM5emRHRnljbWx1Wnk4alkyaGxZMnN0YVdZdGVXOTFMV0Z5WlMxemRHRnljbWx1WnkxaExYSmxjRzl6YVhSdmNubGNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJR05pSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJ5ZFdVZ2FXWWdkR2hsSUhKbGNHOXphWFJ2Y25rZ2FYTWdjM1JoY25KbFpDQmhibVFnWm1Gc2MyVWdhV1lnZEdobElISmxjRzl6YVhSdmNubGNiaUFnSUNBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdseklHNXZkQ0J6ZEdGeWNtVmtYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMElIdENiMjlzWldGdWZTQmJaR1Z6WTNKcGNIUnBiMjVkWEc0Z0lDQWdLaTljYmlBZ0lHbHpVM1JoY25KbFpDaGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNReU1EUnZjalF3TkNoZ0wzVnpaWEl2YzNSaGNuSmxaQzhrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVTNSaGNpQmhJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTloWTNScGRtbDBlUzl6ZEdGeWNtbHVaeThqYzNSaGNpMWhMWEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSeWRXVWdhV1lnZEdobElISmxjRzl6YVhSdmNua2dhWE1nYzNSaGNuSmxaRnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0J6ZEdGeUtHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblVGVlVKeXdnWUM5MWMyVnlMM04wWVhKeVpXUXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRlZ1YzNSaGNpQmhJSEpsY0c5emFYUnZjbmxjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTloWTNScGRtbDBlUzl6ZEdGeWNtbHVaeThqZFc1emRHRnlMV0V0Y21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RISjFaU0JwWmlCMGFHVWdjbVZ3YjNOcGRHOXllU0JwY3lCMWJuTjBZWEp5WldSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2RXNXpkR0Z5S0dOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUkVWTVJWUkZKeXdnWUM5MWMyVnlMM04wWVhKeVpXUXZKSHQwYUdsekxsOWZablZzYkc1aGJXVjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRU55WldGMFpTQmhJRzVsZHlCeVpXeGxZWE5sWEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZjbVZzWldGelpYTXZJMk55WldGMFpTMWhMWEpsYkdWaGMyVmNiaUFnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ2RHaGxJR1JsYzJOeWFYQjBhVzl1SUc5bUlIUm9aU0J5Wld4bFlYTmxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JtVjNiSGtnWTNKbFlYUmxaQ0J5Wld4bFlYTmxYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR055WldGMFpWSmxiR1ZoYzJVb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2Y21Wc1pXRnpaWE5nTENCdmNIUnBiMjV6TENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1JXUnBkQ0JoSUhKbGJHVmhjMlZjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl5WlhCdmN5OXlaV3hsWVhObGN5OGpaV1JwZEMxaExYSmxiR1ZoYzJWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JwWkNBdElIUm9aU0JwWkNCdlppQjBhR1VnY21Wc1pXRnpaVnh1SUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQjBhR1VnWkdWelkzSnBjSFJwYjI0Z2IyWWdkR2hsSUhKbGJHVmhjMlZjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnRiMlJwWm1sbFpDQnlaV3hsWVhObFhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lIVndaR0YwWlZKbGJHVmhjMlVvYVdRc0lHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblVFRlVRMGduTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5eVpXeGxZWE5sY3k4a2UybGtmV0FzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCSFpYUWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdZV3hzSUhKbGJHVmhjMlZ6WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y21Wd2IzTXZjbVZzWldGelpYTXZJMnhwYzNRdGNtVnNaV0Z6WlhNdFptOXlMV0V0Y21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJSEpsYkdWaGMyVWdhVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRGSmxiR1ZoYzJWektHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblIwVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2Y21Wc1pXRnpaWE5nTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElHRWdjbVZzWldGelpWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzSmxjRzl6TDNKbGJHVmhjMlZ6THlOblpYUXRZUzF6YVc1bmJHVXRjbVZzWldGelpWeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdsa0lDMGdkR2hsSUdsa0lHOW1JSFJvWlNCeVpXeGxZWE5sWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdjbVZzWldGelpTQnBibVp2Y20xaGRHbHZibHh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSU1pXeGxZWE5sS0dsa0xDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNtVndiM012Skh0MGFHbHpMbDlmWm5Wc2JHNWhiV1Y5TDNKbGJHVmhjMlZ6THlSN2FXUjlZQ3dnYm5Wc2JDd2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRVJsYkdWMFpTQmhJSEpsYkdWaGMyVmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k5eVpXeGxZWE5sY3k4alpHVnNaWFJsTFdFdGNtVnNaV0Z6WlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUMwZ2RHaGxJSEpsYkdWaGMyVWdkRzhnWW1VZ1pHVnNaWFJsWkZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RISjFaU0JwWmlCMGFHVWdiM0JsY21GMGFXOXVJR2x6SUhOMVkyTmxjM05tZFd4Y2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1pHVnNaWFJsVW1Wc1pXRnpaU2hwWkN3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkRVJVeEZWRVVuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5eVpXeGxZWE5sY3k4a2UybGtmV0FzSUc1MWJHd3NJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJOWlhKblpTQmhJSEIxYkd3Z2NtVnhkV1Z6ZEZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDNCMWJHeHpMeU50WlhKblpTMWhMWEIxYkd3dGNtVnhkV1Z6ZEMxdFpYSm5aUzFpZFhSMGIyNWNiaUFnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZkhOMGNtbHVaMzBnYm5WdFltVnlJQzBnZEdobElHNTFiV0psY2lCdlppQjBhR1VnY0hWc2JDQnlaWEYxWlhOMElIUnZJRzFsY21kbFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUhSb1pTQnRaWEpuWlNCdmNIUnBiMjV6SUdadmNpQjBhR1VnY0hWc2JDQnlaWEYxWlhOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCdFpYSm5aU0JwYm1admNtMWhkR2x2YmlCcFppQjBhR1VnYjNCbGNtRjBhVzl1SUdseklITjFZMk5sYzNObWRXeGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiV1Z5WjJWUWRXeHNVbVZ4ZFdWemRDaHVkVzFpWlhJc0lHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnhkV1Z6ZENnblVGVlVKeXdnWUM5eVpYQnZjeThrZTNSb2FYTXVYMTltZFd4c2JtRnRaWDB2Y0hWc2JITXZKSHR1ZFcxaVpYSjlMMjFsY21kbFlDd2diM0IwYVc5dWN5d2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRWRsZENCcGJtWnZjbTFoZEdsdmJpQmhZbTkxZENCaGJHd2djSEp2YW1WamRITmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXdjbTlxWldOMGN5OGpiR2x6ZEMxeVpYQnZjMmwwYjNKNUxYQnliMnBsWTNSelhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUhCeWIycGxZM1J6WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUd4cGMzUlFjbTlxWldOMGN5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNSQmJHeFFZV2RsY3loZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5d2NtOXFaV04wYzJBc0lIdEJZMk5sY0hSSVpXRmtaWEk2SUNkcGJtVnlkR2xoTFhCeVpYWnBaWGNuZlN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUJ3Y205cVpXTjBYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSEp2YW1WamRITXZJMk55WldGMFpTMWhMWEpsY0c5emFYUnZjbmt0Y0hKdmFtVmpkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQjBhR1VnWkdWelkzSnBjSFJwYjI0Z2IyWWdkR2hsSUhCeWIycGxZM1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnVaWGRzZVNCamNtVmhkR1ZrSUhCeWIycGxZM1JjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWTNKbFlYUmxVSEp2YW1WamRDaHZjSFJwYjI1ekxDQmpZaWtnZTF4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxrRmpZMlZ3ZEVobFlXUmxjaUE5SUNkcGJtVnlkR2xoTFhCeVpYWnBaWGNuTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlBVMVFuTENCZ0wzSmxjRzl6THlSN2RHaHBjeTVmWDJaMWJHeHVZVzFsZlM5d2NtOXFaV04wYzJBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxjRzl6YVhSdmNuazdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVwb3NpdG9yeS5qcy5tYXBcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3V0ZjhqcyB2Mi4xLjIgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlcyBgZXhwb3J0c2Bcblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cztcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYFxuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0bW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMgJiYgbW9kdWxlO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgLCBmcm9tIE5vZGUuanMgb3IgQnJvd3NlcmlmaWVkIGNvZGUsXG5cdC8vIGFuZCB1c2UgaXQgYXMgYHJvb3RgXG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cblx0Ly8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0dmFyIGNvdW50ZXIgPSAwO1xuXHRcdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIHZhbHVlO1xuXHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBhcnJheVtpbmRleF07XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0XHR0aHJvdyBFcnJvcihcblx0XHRcdFx0J0xvbmUgc3Vycm9nYXRlIFUrJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIHNoaWZ0KSB7XG5cdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xuXHR9XG5cblx0ZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuXHRcdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRkY4MCkgPT0gMCkgeyAvLyAxLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0XHR9XG5cdFx0dmFyIHN5bWJvbCA9ICcnO1xuXHRcdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiA2KSAmIDB4MUYpIHwgMHhDMCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0Y2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpO1xuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRcdHJldHVybiBzeW1ib2w7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZykge1xuXHRcdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHRcdHZhciBsZW5ndGggPSBjb2RlUG9pbnRzLmxlbmd0aDtcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgY29kZVBvaW50O1xuXHRcdHZhciBieXRlU3RyaW5nID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdFx0Ynl0ZVN0cmluZyArPSBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50KTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ5dGVTdHJpbmc7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0XHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKCkge1xuXHRcdHZhciBieXRlMTtcblx0XHR2YXIgYnl0ZTI7XG5cdFx0dmFyIGJ5dGUzO1xuXHRcdHZhciBieXRlNDtcblx0XHR2YXIgY29kZVBvaW50O1xuXG5cdFx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdFx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdFx0cmV0dXJuIGJ5dGUxO1xuXHRcdH1cblxuXHRcdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRcdGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50KTtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xuXHR9XG5cblx0dmFyIGJ5dGVBcnJheTtcblx0dmFyIGJ5dGVDb3VudDtcblx0dmFyIGJ5dGVJbmRleDtcblx0ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nKSB7XG5cdFx0Ynl0ZUFycmF5ID0gdWNzMmRlY29kZShieXRlU3RyaW5nKTtcblx0XHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRcdGJ5dGVJbmRleCA9IDA7XG5cdFx0dmFyIGNvZGVQb2ludHMgPSBbXTtcblx0XHR2YXIgdG1wO1xuXHRcdHdoaWxlICgodG1wID0gZGVjb2RlU3ltYm9sKCkpICE9PSBmYWxzZSkge1xuXHRcdFx0Y29kZVBvaW50cy5wdXNoKHRtcCk7XG5cdFx0fVxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKGNvZGVQb2ludHMpO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIHV0ZjggPSB7XG5cdFx0J3ZlcnNpb24nOiAnMi4xLjInLFxuXHRcdCdlbmNvZGUnOiB1dGY4ZW5jb2RlLFxuXHRcdCdkZWNvZGUnOiB1dGY4ZGVjb2RlXG5cdH07XG5cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdXRmODtcblx0XHR9KTtcblx0fVx0ZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgIWZyZWVFeHBvcnRzLm5vZGVUeXBlKSB7XG5cdFx0aWYgKGZyZWVNb2R1bGUpIHsgLy8gaW4gTm9kZS5qcyBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHV0Zjg7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdHZhciBvYmplY3QgPSB7fTtcblx0XHRcdHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcblx0XHRcdGZvciAodmFyIGtleSBpbiB1dGY4KSB7XG5cdFx0XHRcdGhhc093blByb3BlcnR5LmNhbGwodXRmOCwga2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHV0Zjhba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgeyAvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC51dGY4ID0gdXRmODtcblx0fVxuXG59KHRoaXMpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbi8qKlxuICogT3JnYW5pemF0aW9uIGVuY2Fwc3VsYXRlcyB0aGUgZnVuY3Rpb25hbGl0eSB0byBjcmVhdGUgcmVwb3NpdG9yaWVzIGluIG9yZ2FuaXphdGlvbnNcbiAqL1xudmFyIE9yZ2FuaXphdGlvbiA9IGZ1bmN0aW9uIChfUmVxdWVzdGFibGUpIHtcbiAgX2luaGVyaXRzKE9yZ2FuaXphdGlvbiwgX1JlcXVlc3RhYmxlKTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IE9yZ2FuaXphdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3JnYW5pemF0aW9uIC0gdGhlIG5hbWUgb2YgdGhlIG9yZ2FuaXphdGlvblxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmF1dGh9IFthdXRoXSAtIGluZm9ybWF0aW9uIHJlcXVpcmVkIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICovXG4gIGZ1bmN0aW9uIE9yZ2FuaXphdGlvbihvcmdhbml6YXRpb24sIGF1dGgsIGFwaUJhc2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3JnYW5pemF0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChPcmdhbml6YXRpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihPcmdhbml6YXRpb24pKS5jYWxsKHRoaXMsIGF1dGgsIGFwaUJhc2UpKTtcblxuICAgIF90aGlzLl9fbmFtZSA9IG9yZ2FuaXphdGlvbjtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgcmVwb3NpdG9yeSBpbiBhbiBvcmdhbml6YXRpb25cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNjcmVhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgcmVwb3NpdG9yeSBkZWZpbml0aW9uXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGNyZWF0ZWQgcmVwb3NpdG9yeVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE9yZ2FuaXphdGlvbiwgW3tcbiAgICBrZXk6ICdjcmVhdGVSZXBvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVwbyhvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL29yZ3MvJyArIHRoaXMuX19uYW1lICsgJy9yZXBvcycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSByZXBvc2l0b3JpZXMgaW4gYW4gb3JnYW5pemF0aW9uXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zLyNsaXN0LW9yZ2FuaXphdGlvbi1yZXBvc2l0b3JpZXNcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHJlcG9zaXRvcmllc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0UmVwb3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXBvcyhjYikge1xuICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyh7IGRpcmVjdGlvbjogJ2Rlc2MnIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKCcvb3Jncy8nICsgdGhpcy5fX25hbWUgKyAnL3JlcG9zJywgcmVxdWVzdE9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBRdWVyeSBpZiB0aGUgdXNlciBpcyBhIG1lbWJlciBvciBub3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgLSB0aGUgdXNlciBpbiBxdWVzdGlvblxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgdXNlciBpcyBhIG1lbWJlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaXNNZW1iZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc01lbWJlcih1c2VybmFtZSwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0MjA0b3I0MDQoJy9vcmdzLycgKyB0aGlzLl9fbmFtZSArICcvbWVtYmVycy8nICsgdXNlcm5hbWUsIG51bGwsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSB1c2VycyB3aG8gYXJlIG1lbWJlcnMgb2YgdGhlIGNvbXBhbnlcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy9tZW1iZXJzLyNtZW1iZXJzLWxpc3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIGZpbHRlcmluZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmZpbHRlcj1hbGxdIC0gY2FuIGJlIGVpdGhlciBgMmZhX2Rpc2FibGVkYCBvciBgYWxsYFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yb2xlPWFsbF0gLSBjYW4gYmUgb25lIG9mOiBgYWxsYCwgYGFkbWluYCwgb3IgYG1lbWJlcmBcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHVzZXJzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0TWVtYmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RNZW1iZXJzKG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9vcmdzLycgKyB0aGlzLl9fbmFtZSArICcvbWVtYmVycycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBUZWFtcyBpbiB0aGUgT3JnYW5pemF0aW9uXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvdGVhbXMvI2xpc3QtdGVhbXNcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHRlYW1zXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUZWFtcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRlYW1zKGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKCcvb3Jncy8nICsgdGhpcy5fX25hbWUgKyAnL3RlYW1zJywgdW5kZWZpbmVkLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdGVhbVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNjcmVhdGUtdGVhbVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gVGVhbSBjcmVhdGlvbiBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB0ZWFtXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRlc2NyaXB0aW9uXSAtIFRlYW0gZGVzY3JpcHRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucmVwb19uYW1lc10gLSBSZXBvcyB0byBhZGQgdGhlIHRlYW0gdG9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucHJpdmFjeT1zZWNyZXRdIC0gVGhlIGxldmVsIG9mIHByaXZhY3kgdGhlIHRlYW0gc2hvdWxkIGhhdmUuIENhbiBiZSBlaXRoZXIgb25lXG4gICAgICogb2Y6IGBzZWNyZXRgLCBvciBgY2xvc2VkYFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGNyZWF0ZWQgdGVhbVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlVGVhbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVRlYW0ob3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9vcmdzLycgKyB0aGlzLl9fbmFtZSArICcvdGVhbXMnLCBvcHRpb25zLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCBwcm9qZWN0c1xuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy8jbGlzdC1vcmdhbml6YXRpb24tcHJvamVjdHNcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIHByb2plY3RzXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0UHJvamVjdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0UHJvamVjdHMoY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0QWxsUGFnZXMoJy9vcmdzLycgKyB0aGlzLl9fbmFtZSArICcvcHJvamVjdHMnLCB7IEFjY2VwdEhlYWRlcjogJ2luZXJ0aWEtcHJldmlldycgfSwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBwcm9qZWN0XG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3Byb2plY3RzLyNjcmVhdGUtYS1wcm9qZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHByb2plY3RcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3bHkgY3JlYXRlZCBwcm9qZWN0XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVQcm9qZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJvamVjdChvcHRpb25zLCBjYikge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBvcHRpb25zLkFjY2VwdEhlYWRlciA9ICdpbmVydGlhLXByZXZpZXcnO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL29yZ3MvJyArIHRoaXMuX19uYW1lICsgJy9wcm9qZWN0cycsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT3JnYW5pemF0aW9uO1xufShfUmVxdWVzdGFibGUzLmRlZmF1bHQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9yZ2FuaXphdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrOXlaMkZ1YVhwaGRHbHZiaTVxY3lKZExDSnVZVzFsY3lJNld5SlBjbWRoYm1sNllYUnBiMjRpTENKdmNtZGhibWw2WVhScGIyNGlMQ0poZFhSb0lpd2lZWEJwUW1GelpTSXNJbDlmYm1GdFpTSXNJbTl3ZEdsdmJuTWlMQ0pqWWlJc0lsOXlaWEYxWlhOMElpd2ljbVZ4ZFdWemRFOXdkR2x2Ym5NaUxDSmZaMlYwVDNCMGFXOXVjMWRwZEdoRVpXWmhkV3gwY3lJc0ltUnBjbVZqZEdsdmJpSXNJbDl5WlhGMVpYTjBRV3hzVUdGblpYTWlMQ0oxYzJWeWJtRnRaU0lzSWw5eVpYRjFaWE4wTWpBMGIzSTBNRFFpTENKMWJtUmxabWx1WldRaUxDSkJZMk5sY0hSSVpXRmtaWElpTENKU1pYRjFaWE4wWVdKc1pTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lJN096czdRVUZQUVRzN096czdPenM3T3pzclpVRlFRVHM3T3pzN096dEJRVk5CT3pzN1NVRkhUVUVzV1RzN08wRkJRMGc3T3pzN096dEJRVTFCTEhkQ1FVRlpReXhaUVVGYUxFVkJRVEJDUXl4SlFVRXhRaXhGUVVGblEwTXNUMEZCYUVNc1JVRkJlVU03UVVGQlFUczdRVUZCUVN3MFNFRkRhRU5FTEVsQlJHZERMRVZCUXpGQ1F5eFBRVVF3UWpzN1FVRkZkRU1zVlVGQlMwTXNUVUZCVEN4SFFVRmpTQ3haUVVGa08wRkJSbk5ETzBGQlIzaERPenRCUVVWRU96czdPenM3T3pzN096c3JRa0ZQVjBrc1R5eEZRVUZUUXl4RkxFVkJRVWs3UVVGRGNrSXNZVUZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVFVGQlpDeGhRVUVyUWl4TFFVRkxTQ3hOUVVGd1F5eGhRVUZ2UkVNc1QwRkJjRVFzUlVGQk5rUkRMRVZCUVRkRUxFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3paQ1FVMVRRU3hGTEVWQlFVazdRVUZEVml4VlFVRkpSU3hwUWtGQmFVSXNTMEZCUzBNc2RVSkJRVXdzUTBGQk5rSXNSVUZCUTBNc1YwRkJWeXhOUVVGYUxFVkJRVGRDTEVOQlFYSkNPenRCUVVWQkxHRkJRVThzUzBGQlMwTXNaMEpCUVV3c1dVRkJLMElzUzBGQlMxQXNUVUZCY0VNc1lVRkJiMFJKTEdOQlFYQkVMRVZCUVc5RlJpeEZRVUZ3UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenMyUWtGTlUwMHNVU3hGUVVGVlRpeEZMRVZCUVVrN1FVRkRjRUlzWVVGQlR5eExRVUZMVHl4blFrRkJUQ3haUVVFclFpeExRVUZMVkN4TlFVRndReXhwUWtGQmMwUlJMRkZCUVhSRUxFVkJRV3RGTEVsQlFXeEZMRVZCUVhkRlRpeEZRVUY0UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3T3p0blEwRlRXVVFzVHl4RlFVRlRReXhGTEVWQlFVazdRVUZEZEVJc1lVRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNTMEZCWkN4aFFVRTRRaXhMUVVGTFNDeE5RVUZ1UXl4bFFVRnhSRU1zVDBGQmNrUXNSVUZCT0VSRExFVkJRVGxFTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPelpDUVUxVFFTeEZMRVZCUVVrN1FVRkRWaXhoUVVGUExFdEJRVXRMTEdkQ1FVRk1MRmxCUVN0Q0xFdEJRVXRRTEUxQlFYQkRMR0ZCUVc5RVZTeFRRVUZ3UkN4RlFVRXJSRklzUlVGQkwwUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096czdPenM3SzBKQldWZEVMRThzUlVGQlUwTXNSU3hGUVVGSk8wRkJRM0pDTEdGQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxFMUJRV1FzWVVGQkswSXNTMEZCUzBnc1RVRkJjRU1zWVVGQmIwUkRMRTlCUVhCRUxFVkJRVFpFUXl4RlFVRTNSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dHBRMEZOWVVFc1JTeEZRVUZKTzBGQlEyUXNZVUZCVHl4TFFVRkxTeXhuUWtGQlRDeFpRVUVyUWl4TFFVRkxVQ3hOUVVGd1F5eG5Ra0ZCZFVRc1JVRkJRMWNzWTBGQll5eHBRa0ZCWml4RlFVRjJSQ3hGUVVFd1JsUXNSVUZCTVVZc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzJ0RFFVOWpSQ3hQTEVWQlFWTkRMRVVzUlVGQlNUdEJRVU40UWtRc1owSkJRVlZCTEZkQlFWY3NSVUZCY2tJN1FVRkRRVUVzWTBGQlVWVXNXVUZCVWl4SFFVRjFRaXhwUWtGQmRrSTdRVUZEUVN4aFFVRlBMRXRCUVV0U0xGRkJRVXdzUTBGQll5eE5RVUZrTEdGQlFTdENMRXRCUVV0SUxFMUJRWEJETEdkQ1FVRjFSRU1zVDBGQmRrUXNSVUZCWjBWRExFVkJRV2hGTEVOQlFWQTdRVUZEUmpzN096dEZRWHBIZFVKVkxIRkNPenRCUVRSSE0wSkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSnNRaXhaUVVGcVFpSXNJbVpwYkdVaU9pSlBjbWRoYm1sNllYUnBiMjR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFQm1hV3hsWEc0Z0tpQkFZMjl3ZVhKcFoyaDBJQ0F5TURFeklFMXBZMmhoWld3Z1FYVm1jbVZwZEdWeUlDaEVaWFpsYkc5d2JXVnVkQ0JUWldWa0tTQmhibVFnTWpBeE5pQlpZV2h2YnlCSmJtTXVYRzRnS2lCQWJHbGpaVzV6WlNBZ0lDQk1hV05sYm5ObFpDQjFibVJsY2lCN1FHeHBibXNnYUhSMGNITTZMeTl6Y0dSNExtOXlaeTlzYVdObGJuTmxjeTlDVTBRdE15MURiR0YxYzJVdFEyeGxZWEl1YUhSdGJDQkNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSjlMbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdSMmwwYUhWaUxtcHpJR2x6SUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJoWW14bExseHVJQ292WEc1Y2JtbHRjRzl5ZENCU1pYRjFaWE4wWVdKc1pTQm1jbTl0SUNjdUwxSmxjWFZsYzNSaFlteGxKenRjYmx4dUx5b3FYRzRnS2lCUGNtZGhibWw2WVhScGIyNGdaVzVqWVhCemRXeGhkR1Z6SUhSb1pTQm1kVzVqZEdsdmJtRnNhWFI1SUhSdklHTnlaV0YwWlNCeVpYQnZjMmwwYjNKcFpYTWdhVzRnYjNKbllXNXBlbUYwYVc5dWMxeHVJQ292WEc1amJHRnpjeUJQY21kaGJtbDZZWFJwYjI0Z1pYaDBaVzVrY3lCU1pYRjFaWE4wWVdKc1pTQjdYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUJQY21kaGJtbDZZWFJwYjI1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J2Y21kaGJtbDZZWFJwYjI0Z0xTQjBhR1VnYm1GdFpTQnZaaUIwYUdVZ2IzSm5ZVzVwZW1GMGFXOXVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbUYxZEdoOUlGdGhkWFJvWFNBdElHbHVabTl5YldGMGFXOXVJSEpsY1hWcGNtVmtJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSb2RXSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYllYQnBRbUZ6WlQxb2RIUndjem92TDJGd2FTNW5hWFJvZFdJdVkyOXRYU0F0SUhSb1pTQmlZWE5sSUVkcGRHaDFZaUJCVUVrZ1ZWSk1YRzRnSUNBZ0tpOWNiaUFnSUdOdmJuTjBjblZqZEc5eUtHOXlaMkZ1YVhwaGRHbHZiaXdnWVhWMGFDd2dZWEJwUW1GelpTa2dlMXh1SUNBZ0lDQWdjM1Z3WlhJb1lYVjBhQ3dnWVhCcFFtRnpaU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZibUZ0WlNBOUlHOXlaMkZ1YVhwaGRHbHZianRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQnlaWEJ2YzJsMGIzSjVJR2x1SUdGdUlHOXlaMkZ1YVhwaGRHbHZibHh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekx5TmpjbVZoZEdWY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnZEdobElISmxjRzl6YVhSdmNua2daR1ZtYVc1cGRHbHZibHh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdZM0psWVhSbFpDQnlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR055WldGMFpWSmxjRzhvYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RRVDFOVUp5d2dZQzl2Y21kekx5UjdkR2hwY3k1ZlgyNWhiV1Y5TDNKbGNHOXpZQ3dnYjNCMGFXOXVjeXdnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUV4cGMzUWdkR2hsSUhKbGNHOXphWFJ2Y21sbGN5QnBiaUJoYmlCdmNtZGhibWw2WVhScGIyNWNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXlaWEJ2Y3k4amJHbHpkQzF2Y21kaGJtbDZZWFJwYjI0dGNtVndiM05wZEc5eWFXVnpYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlISmxjRzl6YVhSdmNtbGxjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JuWlhSU1pYQnZjeWhqWWlrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEpsY1hWbGMzUlBjSFJwYjI1eklEMGdkR2hwY3k1ZloyVjBUM0IwYVc5dWMxZHBkR2hFWldaaGRXeDBjeWg3WkdseVpXTjBhVzl1T2lBblpHVnpZeWQ5S1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUkJiR3hRWVdkbGN5aGdMMjl5WjNNdkpIdDBhR2x6TGw5ZmJtRnRaWDB2Y21Wd2IzTmdMQ0J5WlhGMVpYTjBUM0IwYVc5dWN5d2dZMklwTzF4dUlDQWdmVnh1WEc0Z0lDQXZLaXBjYmlBZ0lDQXFJRkYxWlhKNUlHbG1JSFJvWlNCMWMyVnlJR2x6SUdFZ2JXVnRZbVZ5SUc5eUlHNXZkRnh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIVnpaWEp1WVcxbElDMGdkR2hsSUhWelpYSWdhVzRnY1hWbGMzUnBiMjVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RISjFaU0JwWmlCMGFHVWdkWE5sY2lCcGN5QmhJRzFsYldKbGNseHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnBjMDFsYldKbGNpaDFjMlZ5Ym1GdFpTd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOME1qQTBiM0kwTURRb1lDOXZjbWR6THlSN2RHaHBjeTVmWDI1aGJXVjlMMjFsYldKbGNuTXZKSHQxYzJWeWJtRnRaWDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVEdsemRDQjBhR1VnZFhObGNuTWdkMmh2SUdGeVpTQnRaVzFpWlhKeklHOW1JSFJvWlNCamIyMXdZVzU1WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YjNKbmN5OXRaVzFpWlhKekx5TnRaVzFpWlhKekxXeHBjM1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZjSFJwYjI1eklDMGdabWxzZEdWeWFXNW5JRzl3ZEdsdmJuTmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1bWFXeDBaWEk5WVd4c1hTQXRJR05oYmlCaVpTQmxhWFJvWlhJZ1lESm1ZVjlrYVhOaFlteGxaR0FnYjNJZ1lHRnNiR0JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NXliMnhsUFdGc2JGMGdMU0JqWVc0Z1ltVWdiMjVsSUc5bU9pQmdZV3hzWUN3Z1lHRmtiV2x1WUN3Z2IzSWdZRzFsYldKbGNtQmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHeHBjM1FnYjJZZ2RYTmxjbk5jYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnYkdsemRFMWxiV0psY25Nb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFJWUW5MQ0JnTDI5eVozTXZKSHQwYUdsekxsOWZibUZ0WlgwdmJXVnRZbVZ5YzJBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQk1hWE4wSUhSb1pTQlVaV0Z0Y3lCcGJpQjBhR1VnVDNKbllXNXBlbUYwYVc5dVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmIzSm5jeTkwWldGdGN5OGpiR2x6ZEMxMFpXRnRjMXh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQjBaV0Z0YzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCblpYUlVaV0Z0Y3loallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1JCYkd4UVlXZGxjeWhnTDI5eVozTXZKSHQwYUdsekxsOWZibUZ0WlgwdmRHVmhiWE5nTENCMWJtUmxabWx1WldRc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQjBaV0Z0WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12YjNKbmN5OTBaV0Z0Y3k4alkzSmxZWFJsTFhSbFlXMWNiaUFnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdmNIUnBiMjV6SUMwZ1ZHVmhiU0JqY21WaGRHbHZiaUJ3WVhKaGJXVjBaWEp6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiM0IwYVc5dWN5NXVZVzFsSUMwZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUhSbFlXMWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1a1pYTmpjbWx3ZEdsdmJsMGdMU0JVWldGdElHUmxjMk55YVhCMGFXOXVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyOXdkR2x2Ym5NdWNtVndiMTl1WVcxbGMxMGdMU0JTWlhCdmN5QjBieUJoWkdRZ2RHaGxJSFJsWVcwZ2RHOWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1d2NtbDJZV041UFhObFkzSmxkRjBnTFNCVWFHVWdiR1YyWld3Z2IyWWdjSEpwZG1GamVTQjBhR1VnZEdWaGJTQnphRzkxYkdRZ2FHRjJaUzRnUTJGdUlHSmxJR1ZwZEdobGNpQnZibVZjYmlBZ0lDQXFJRzltT2lCZ2MyVmpjbVYwWUN3Z2IzSWdZR05zYjNObFpHQmNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHTnlaV0YwWldRZ2RHVmhiVnh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JqY21WaGRHVlVaV0Z0S0c5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duVUU5VFZDY3NJR0F2YjNKbmN5OGtlM1JvYVhNdVgxOXVZVzFsZlM5MFpXRnRjMkFzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCSFpYUWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdZV3hzSUhCeWIycGxZM1J6WEc0Z0lDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y0hKdmFtVmpkSE12STJ4cGMzUXRiM0puWVc1cGVtRjBhVzl1TFhCeWIycGxZM1J6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JSEJ5YjJwbFkzUnpYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR3hwYzNSUWNtOXFaV04wY3loallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1JCYkd4UVlXZGxjeWhnTDI5eVozTXZKSHQwYUdsekxsOWZibUZ0WlgwdmNISnZhbVZqZEhOZ0xDQjdRV05qWlhCMFNHVmhaR1Z5T2lBbmFXNWxjblJwWVMxd2NtVjJhV1YzSjMwc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnY0hKdmFtVmpkRnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0psY0c5ekwzQnliMnBsWTNSekx5TmpjbVZoZEdVdFlTMXdjbTlxWldOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUhSb1pTQmtaWE5qY21sd2RHbHZiaUJ2WmlCMGFHVWdjSEp2YW1WamRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkR2hsSUc1bGQyeDVJR055WldGMFpXUWdjSEp2YW1WamRGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmpjbVZoZEdWUWNtOXFaV04wS0c5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JpQWdJQ0FnSUc5d2RHbHZibk11UVdOalpYQjBTR1ZoWkdWeUlEMGdKMmx1WlhKMGFXRXRjSEpsZG1sbGR5YzdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duVUU5VFZDY3NJR0F2YjNKbmN5OGtlM1JvYVhNdVgxOXVZVzFsZlM5d2NtOXFaV04wYzJBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUGNtZGhibWw2WVhScGIyNDdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3JnYW5pemF0aW9uLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1JlcXVlc3RhYmxlMiA9IHJlcXVpcmUoJy4vUmVxdWVzdGFibGUnKTtcblxudmFyIF9SZXF1ZXN0YWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXF1ZXN0YWJsZTIpO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxNiBNYXR0IFNtaXRoIChEZXZlbG9wbWVudCBTZWVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG52YXIgbG9nID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoJ2dpdGh1Yjp0ZWFtJyk7XG5cbi8qKlxuICogQSBUZWFtIGFsbG93cyBzY29waW5nIG9mIEFQSSByZXF1ZXN0cyB0byBhIHBhcnRpY3VsYXIgR2l0aHViIE9yZ2FuaXphdGlvbiBUZWFtLlxuICovXG5cbnZhciBUZWFtID0gZnVuY3Rpb24gKF9SZXF1ZXN0YWJsZSkge1xuICBfaW5oZXJpdHMoVGVhbSwgX1JlcXVlc3RhYmxlKTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgVGVhbS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0ZWFtSWRdIC0gdGhlIGlkIGZvciB0aGUgdGVhbVxuICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmF1dGh9IFthdXRoXSAtIGluZm9ybWF0aW9uIHJlcXVpcmVkIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRodWJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlPWh0dHBzOi8vYXBpLmdpdGh1Yi5jb21dIC0gdGhlIGJhc2UgR2l0aHViIEFQSSBVUkxcbiAgICovXG4gIGZ1bmN0aW9uIFRlYW0odGVhbUlkLCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRlYW0pO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRlYW0uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUZWFtKSkuY2FsbCh0aGlzLCBhdXRoLCBhcGlCYXNlKSk7XG5cbiAgICBfdGhpcy5fX3RlYW1JZCA9IHRlYW1JZDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IFRlYW0gaW5mb3JtYXRpb25cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvdGVhbXMvI2dldC10ZWFtXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIHRlYW1cbiAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhUZWFtLCBbe1xuICAgIGtleTogJ2dldFRlYW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZWFtKGNiKSB7XG4gICAgICBsb2coJ0ZldGNoaW5nIFRlYW0gJyArIHRoaXMuX190ZWFtSWQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dldCcsICcvdGVhbXMvJyArIHRoaXMuX190ZWFtSWQsIHVuZGVmaW5lZCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIFRlYW0ncyByZXBvc2l0b3JpZXNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jbGlzdC10ZWFtLXJlcG9zXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiByZXBvc2l0b3JpZXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpc3RSZXBvcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RSZXBvcyhjYikge1xuICAgICAgbG9nKCdGZXRjaGluZyByZXBvc2l0b3JpZXMgZm9yIFRlYW0gJyArIHRoaXMuX190ZWFtSWQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL3RlYW1zLycgKyB0aGlzLl9fdGVhbUlkICsgJy9yZXBvcycsIHVuZGVmaW5lZCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVkaXQgVGVhbSBpbmZvcm1hdGlvblxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNlZGl0LXRlYW1cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFBhcmFtZXRlcnMgZm9yIHRlYW0gZWRpdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdGVhbVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kZXNjcmlwdGlvbl0gLSBUZWFtIGRlc2NyaXB0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnJlcG9fbmFtZXNdIC0gUmVwb3MgdG8gYWRkIHRoZSB0ZWFtIHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnByaXZhY3k9c2VjcmV0XSAtIFRoZSBsZXZlbCBvZiBwcml2YWN5IHRoZSB0ZWFtIHNob3VsZCBoYXZlLiBDYW4gYmUgZWl0aGVyIG9uZVxuICAgICAqIG9mOiBgc2VjcmV0YCwgb3IgYGNsb3NlZGBcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSB1cGRhdGVkIHRlYW1cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VkaXRUZWFtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWRpdFRlYW0ob3B0aW9ucywgY2IpIHtcbiAgICAgIGxvZygnRWRpdGluZyBUZWFtICcgKyB0aGlzLl9fdGVhbUlkKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvdGVhbXMvJyArIHRoaXMuX190ZWFtSWQsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSB1c2VycyB3aG8gYXJlIG1lbWJlcnMgb2YgdGhlIFRlYW1cbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jbGlzdC10ZWFtLW1lbWJlcnNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFBhcmFtZXRlcnMgZm9yIGxpc3RpbmcgdGVhbSB1c2Vyc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yb2xlPWFsbF0gLSBjYW4gYmUgb25lIG9mOiBgYWxsYCwgYG1haW50YWluZXJgLCBvciBgbWVtYmVyYFxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgdXNlcnNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpc3RNZW1iZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdE1lbWJlcnMob3B0aW9ucywgY2IpIHtcbiAgICAgIGxvZygnR2V0dGluZyBtZW1iZXJzIG9mIFRlYW0gJyArIHRoaXMuX190ZWFtSWQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL3RlYW1zLycgKyB0aGlzLl9fdGVhbUlkICsgJy9tZW1iZXJzJywgb3B0aW9ucywgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBUZWFtIG1lbWJlcnNoaXAgc3RhdHVzIGZvciBhIHVzZXJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvb3Jncy90ZWFtcy8jZ2V0LXRlYW0tbWVtYmVyc2hpcFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSAtIGNhbiBiZSBvbmUgb2Y6IGBhbGxgLCBgbWFpbnRhaW5lcmAsIG9yIGBtZW1iZXJgXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbWVtYmVyc2hpcCBzdGF0dXMgb2YgYSB1c2VyXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRNZW1iZXJzaGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVtYmVyc2hpcCh1c2VybmFtZSwgY2IpIHtcbiAgICAgIGxvZygnR2V0dGluZyBtZW1iZXJzaGlwIG9mIHVzZXIgJyArIHVzZXJuYW1lICsgJyBpbiBUZWFtICcgKyB0aGlzLl9fdGVhbUlkKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3RlYW1zLycgKyB0aGlzLl9fdGVhbUlkICsgJy9tZW1iZXJzaGlwcy8nICsgdXNlcm5hbWUsIHVuZGVmaW5lZCwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG1lbWJlciB0byB0aGUgVGVhbVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNhZGQtdGVhbS1tZW1iZXJzaGlwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJuYW1lIC0gY2FuIGJlIG9uZSBvZjogYGFsbGAsIGBtYWludGFpbmVyYCwgb3IgYG1lbWJlcmBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFBhcmFtZXRlcnMgZm9yIGFkZGluZyBhIHRlYW0gbWVtYmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnJvbGU9bWVtYmVyXSAtIFRoZSByb2xlIHRoYXQgdGhpcyB1c2VyIHNob3VsZCBoYXZlIGluIHRoZSB0ZWFtLiBDYW4gYmUgb25lXG4gICAgICogb2Y6IGBtZW1iZXJgLCBvciBgbWFpbnRhaW5lcmBcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBtZW1iZXJzaGlwIHN0YXR1cyBvZiBhZGRlZCB1c2VyXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRNZW1iZXJzaGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTWVtYmVyc2hpcCh1c2VybmFtZSwgb3B0aW9ucywgY2IpIHtcbiAgICAgIGxvZygnQWRkaW5nIHVzZXIgJyArIHVzZXJuYW1lICsgJyB0byBUZWFtICcgKyB0aGlzLl9fdGVhbUlkKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQVVQnLCAnL3RlYW1zLycgKyB0aGlzLl9fdGVhbUlkICsgJy9tZW1iZXJzaGlwcy8nICsgdXNlcm5hbWUsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgcmVwbyBtYW5hZ2VtZW50IHN0YXR1cyBmb3IgdGVhbVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNyZW1vdmUtdGVhbS1tZW1iZXJzaGlwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG93bmVyIC0gT3JnYW5pemF0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIFJlcG8gbmFtZVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG1lbWJlcnNoaXAgc3RhdHVzIG9mIGFkZGVkIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzTWFuYWdlZFJlcG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc01hbmFnZWRSZXBvKG93bmVyLCByZXBvLCBjYikge1xuICAgICAgbG9nKCdHZXR0aW5nIHJlcG8gbWFuYWdlbWVudCBieSBUZWFtICcgKyB0aGlzLl9fdGVhbUlkICsgJyBmb3IgcmVwbyAnICsgb3duZXIgKyAnLycgKyByZXBvKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0MjA0b3I0MDQoJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCArICcvcmVwb3MvJyArIG93bmVyICsgJy8nICsgcmVwbywgdW5kZWZpbmVkLCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIG9yIFVwZGF0ZSByZXBvIG1hbmFnZW1lbnQgc3RhdHVzIGZvciB0ZWFtXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvdGVhbXMvI2FkZC1vci11cGRhdGUtdGVhbS1yZXBvc2l0b3J5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG93bmVyIC0gT3JnYW5pemF0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIFJlcG8gbmFtZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gUGFyYW1ldGVycyBmb3IgYWRkaW5nIG9yIHVwZGF0aW5nIHJlcG8gbWFuYWdlbWVudCBmb3IgdGhlIHRlYW1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucGVybWlzc2lvbl0gLSBUaGUgcGVybWlzc2lvbiB0byBncmFudCB0aGUgdGVhbSBvbiB0aGlzIHJlcG9zaXRvcnkuIENhbiBiZSBvbmVcbiAgICAgKiBvZjogYHB1bGxgLCBgcHVzaGAsIG9yIGBhZG1pbmBcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBtZW1iZXJzaGlwIHN0YXR1cyBvZiBhZGRlZCB1c2VyXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtYW5hZ2VSZXBvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFuYWdlUmVwbyhvd25lciwgcmVwbywgb3B0aW9ucywgY2IpIHtcbiAgICAgIGxvZygnQWRkaW5nIG9yIFVwZGF0aW5nIHJlcG8gbWFuYWdlbWVudCBieSBUZWFtICcgKyB0aGlzLl9fdGVhbUlkICsgJyBmb3IgcmVwbyAnICsgb3duZXIgKyAnLycgKyByZXBvKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0MjA0b3I0MDQoJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCArICcvcmVwb3MvJyArIG93bmVyICsgJy8nICsgcmVwbywgb3B0aW9ucywgY2IsICdQVVQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcmVwbyBtYW5hZ2VtZW50IHN0YXR1cyBmb3IgdGVhbVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9vcmdzL3RlYW1zLyNyZW1vdmUtdGVhbS1yZXBvc2l0b3J5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG93bmVyIC0gT3JnYW5pemF0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIFJlcG8gbmFtZVxuICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIG1lbWJlcnNoaXAgc3RhdHVzIG9mIGFkZGVkIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VubWFuYWdlUmVwbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVubWFuYWdlUmVwbyhvd25lciwgcmVwbywgY2IpIHtcbiAgICAgIGxvZygnUmVtb3ZlIHJlcG8gbWFuYWdlbWVudCBieSBUZWFtICcgKyB0aGlzLl9fdGVhbUlkICsgJyBmb3IgcmVwbyAnICsgb3duZXIgKyAnLycgKyByZXBvKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0MjA0b3I0MDQoJy90ZWFtcy8nICsgdGhpcy5fX3RlYW1JZCArICcvcmVwb3MvJyArIG93bmVyICsgJy8nICsgcmVwbywgdW5kZWZpbmVkLCBjYiwgJ0RFTEVURScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBUZWFtXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL29yZ3MvdGVhbXMvI2RlbGV0ZS10ZWFtXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gW2NiXSAtIHdpbGwgcmVjZWl2ZSB0aGUgbGlzdCBvZiByZXBvc2l0b3JpZXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZVRlYW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVUZWFtKGNiKSB7XG4gICAgICBsb2coJ0RlbGV0aW5nIFRlYW0gJyArIHRoaXMuX190ZWFtSWQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QyMDRvcjQwNCgnL3RlYW1zLycgKyB0aGlzLl9fdGVhbUlkLCB1bmRlZmluZWQsIGNiLCAnREVMRVRFJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRlYW07XG59KF9SZXF1ZXN0YWJsZTMuZGVmYXVsdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsUmxZVzB1YW5NaVhTd2libUZ0WlhNaU9sc2liRzluSWl3aVZHVmhiU0lzSW5SbFlXMUpaQ0lzSW1GMWRHZ2lMQ0poY0dsQ1lYTmxJaXdpWDE5MFpXRnRTV1FpTENKallpSXNJbDl5WlhGMVpYTjBJaXdpZFc1a1pXWnBibVZrSWl3aVgzSmxjWFZsYzNSQmJHeFFZV2RsY3lJc0ltOXdkR2x2Ym5NaUxDSjFjMlZ5Ym1GdFpTSXNJbTkzYm1WeUlpd2ljbVZ3YnlJc0lsOXlaWEYxWlhOME1qQTBiM0kwTURRaUxDSlNaWEYxWlhOMFlXSnNaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGUFFUczdPenRCUVVOQk96czdPenM3T3pzN095dGxRVkpCT3pzN096czdPMEZCVTBFc1NVRkJUVUVzVFVGQlRTeHhRa0ZCVFN4aFFVRk9MRU5CUVZvN08wRkJSVUU3T3pzN1NVRkhUVU1zU1RzN08wRkJRMGc3T3pzN096dEJRVTFCTEdkQ1FVRlpReXhOUVVGYUxFVkJRVzlDUXl4SlFVRndRaXhGUVVFd1FrTXNUMEZCTVVJc1JVRkJiVU03UVVGQlFUczdRVUZCUVN3MFIwRkRNVUpFTEVsQlJEQkNMRVZCUTNCQ1F5eFBRVVJ2UWpzN1FVRkZhRU1zVlVGQlMwTXNVVUZCVEN4SFFVRm5Ra2dzVFVGQmFFSTdRVUZHWjBNN1FVRkhiRU03TzBGQlJVUTdPenM3T3pzN096czdORUpCVFZGSkxFVXNSVUZCU1R0QlFVTlVUaXcyUWtGQmNVSXNTMEZCUzBzc1VVRkJNVUk3UVVGRFFTeGhRVUZQTEV0QlFVdEZMRkZCUVV3c1EwRkJZeXhMUVVGa0xHTkJRU3RDTEV0QlFVdEdMRkZCUVhCRExFVkJRV2RFUnl4VFFVRm9SQ3hGUVVFeVJFWXNSVUZCTTBRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T0VKQlRWVkJMRVVzUlVGQlNUdEJRVU5ZVGl3NFEwRkJjME1zUzBGQlMwc3NVVUZCTTBNN1FVRkRRU3hoUVVGUExFdEJRVXRKTEdkQ1FVRk1MR0ZCUVdkRExFdEJRVXRLTEZGQlFYSkRMR0ZCUVhWRVJ5eFRRVUYyUkN4RlFVRnJSVVlzUlVGQmJFVXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096czdPenM3TmtKQldWTkpMRThzUlVGQlUwb3NSU3hGUVVGSk8wRkJRMjVDVGl3MFFrRkJiMElzUzBGQlMwc3NVVUZCZWtJN1FVRkRRU3hoUVVGUExFdEJRVXRGTEZGQlFVd3NRMEZCWXl4UFFVRmtMR05CUVdsRExFdEJRVXRHTEZGQlFYUkRMRVZCUVd0RVN5eFBRVUZzUkN4RlFVRXlSRW9zUlVGQk0wUXNRMEZCVUR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN096dG5RMEZSV1Vrc1R5eEZRVUZUU2l4RkxFVkJRVWs3UVVGRGRFSk9MSFZEUVVFclFpeExRVUZMU3l4UlFVRndRenRCUVVOQkxHRkJRVThzUzBGQlMwa3NaMEpCUVV3c1lVRkJaME1zUzBGQlMwb3NVVUZCY2tNc1pVRkJlVVJMTEU5QlFYcEVMRVZCUVd0RlNpeEZRVUZzUlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3YTBOQlQyTkxMRkVzUlVGQlZVd3NSU3hGUVVGSk8wRkJRM3BDVGl3d1EwRkJhME5YTEZGQlFXeERMR2xDUVVGelJDeExRVUZMVGl4UlFVRXpSRHRCUVVOQkxHRkJRVThzUzBGQlMwVXNVVUZCVEN4RFFVRmpMRXRCUVdRc1kwRkJLMElzUzBGQlMwWXNVVUZCY0VNc2NVSkJRVFJFVFN4UlFVRTFSQ3hGUVVGM1JVZ3NVMEZCZUVVc1JVRkJiVVpHTEVWQlFXNUdMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdPenRyUTBGVlkwc3NVU3hGUVVGVlJDeFBMRVZCUVZOS0xFVXNSVUZCU1R0QlFVTnNRMDRzTWtKQlFXMUNWeXhSUVVGdVFpeHBRa0ZCZFVNc1MwRkJTMDRzVVVGQk5VTTdRVUZEUVN4aFFVRlBMRXRCUVV0RkxGRkJRVXdzUTBGQll5eExRVUZrTEdOQlFTdENMRXRCUVV0R0xGRkJRWEJETEhGQ1FVRTBSRTBzVVVGQk5VUXNSVUZCZDBWRUxFOUJRWGhGTEVWQlFXbEdTaXhGUVVGcVJpeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN08ydERRVkZqVFN4TExFVkJRVTlETEVrc1JVRkJUVkFzUlN4RlFVRkpPMEZCUXpWQ1Rpd3JRMEZCZFVNc1MwRkJTMHNzVVVGQk5VTXNhMEpCUVdsRlR5eExRVUZxUlN4VFFVRXdSVU1zU1VGQk1VVTdRVUZEUVN4aFFVRlBMRXRCUVV0RExHZENRVUZNTEdGQlFXZERMRXRCUVV0VUxGRkJRWEpETEdWQlFYVkVUeXhMUVVGMlJDeFRRVUZuUlVNc1NVRkJhRVVzUlVGQmQwVk1MRk5CUVhoRkxFVkJRVzFHUml4RlFVRnVSaXhEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPenM3T3l0Q1FWZFhUU3hMTEVWQlFVOURMRWtzUlVGQlRVZ3NUeXhGUVVGVFNpeEZMRVZCUVVrN1FVRkRiRU5PTERCRVFVRnJSQ3hMUVVGTFN5eFJRVUYyUkN4clFrRkJORVZQTEV0QlFUVkZMRk5CUVhGR1F5eEpRVUZ5Ump0QlFVTkJMR0ZCUVU4c1MwRkJTME1zWjBKQlFVd3NZVUZCWjBNc1MwRkJTMVFzVVVGQmNrTXNaVUZCZFVSUExFdEJRWFpFTEZOQlFXZEZReXhKUVVGb1JTeEZRVUYzUlVnc1QwRkJlRVVzUlVGQmFVWktMRVZCUVdwR0xFVkJRWEZHTEV0QlFYSkdMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdhVU5CVVdGTkxFc3NSVUZCVDBNc1NTeEZRVUZOVUN4RkxFVkJRVWs3UVVGRE0wSk9MRGhEUVVGelF5eExRVUZMU3l4UlFVRXpReXhyUWtGQlowVlBMRXRCUVdoRkxGTkJRWGxGUXl4SlFVRjZSVHRCUVVOQkxHRkJRVThzUzBGQlMwTXNaMEpCUVV3c1lVRkJaME1zUzBGQlMxUXNVVUZCY2tNc1pVRkJkVVJQTEV0QlFYWkVMRk5CUVdkRlF5eEpRVUZvUlN4RlFVRjNSVXdzVTBGQmVFVXNSVUZCYlVaR0xFVkJRVzVHTEVWQlFYVkdMRkZCUVhaR0xFTkJRVkE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3l0Q1FVMVhRU3hGTEVWQlFVazdRVUZEV2s0c05rSkJRWEZDTEV0QlFVdExMRkZCUVRGQ08wRkJRMEVzWVVGQlR5eExRVUZMVXl4blFrRkJUQ3hoUVVGblF5eExRVUZMVkN4UlFVRnlReXhGUVVGcFJFY3NVMEZCYWtRc1JVRkJORVJHTEVWQlFUVkVMRVZCUVdkRkxGRkJRV2hGTEVOQlFWQTdRVUZEUmpzN096dEZRVGxKWlZNc2NVSTdPMEZCYVVwdVFrTXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFtaENMRWxCUVdwQ0lpd2labWxzWlNJNklsUmxZVzB1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFQm1hV3hsWEc0Z0tpQkFZMjl3ZVhKcFoyaDBJQ0F5TURFMklFMWhkSFFnVTIxcGRHZ2dLRVJsZG1Wc2IzQnRaVzUwSUZObFpXUXBYRzRnS2lCQWJHbGpaVzV6WlNBZ0lDQk1hV05sYm5ObFpDQjFibVJsY2lCN1FHeHBibXNnYUhSMGNITTZMeTl6Y0dSNExtOXlaeTlzYVdObGJuTmxjeTlDVTBRdE15MURiR0YxYzJVdFEyeGxZWEl1YUhSdGJDQkNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSjlMbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdSMmwwYUhWaUxtcHpJR2x6SUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJoWW14bExseHVJQ292WEc1Y2JtbHRjRzl5ZENCU1pYRjFaWE4wWVdKc1pTQm1jbTl0SUNjdUwxSmxjWFZsYzNSaFlteGxKenRjYm1sdGNHOXlkQ0JrWldKMVp5Qm1jbTl0SUNka1pXSjFaeWM3WEc1amIyNXpkQ0JzYjJjZ1BTQmtaV0oxWnlnbloybDBhSFZpT25SbFlXMG5LVHRjYmx4dUx5b3FYRzRnS2lCQklGUmxZVzBnWVd4c2IzZHpJSE5qYjNCcGJtY2diMllnUVZCSklISmxjWFZsYzNSeklIUnZJR0VnY0dGeWRHbGpkV3hoY2lCSGFYUm9kV0lnVDNKbllXNXBlbUYwYVc5dUlGUmxZVzB1WEc0Z0tpOWNibU5zWVhOeklGUmxZVzBnWlhoMFpXNWtjeUJTWlhGMVpYTjBZV0pzWlNCN1hHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVOeVpXRjBaU0JoSUZSbFlXMHVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1czUmxZVzFKWkYwZ0xTQjBhR1VnYVdRZ1ptOXlJSFJvWlNCMFpXRnRYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbUYxZEdoOUlGdGhkWFJvWFNBdElHbHVabTl5YldGMGFXOXVJSEpsY1hWcGNtVmtJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBieUJIYVhSb2RXSmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYllYQnBRbUZ6WlQxb2RIUndjem92TDJGd2FTNW5hWFJvZFdJdVkyOXRYU0F0SUhSb1pTQmlZWE5sSUVkcGRHaDFZaUJCVUVrZ1ZWSk1YRzRnSUNBZ0tpOWNiaUFnSUdOdmJuTjBjblZqZEc5eUtIUmxZVzFKWkN3Z1lYVjBhQ3dnWVhCcFFtRnpaU2tnZTF4dUlDQWdJQ0FnYzNWd1pYSW9ZWFYwYUN3Z1lYQnBRbUZ6WlNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlmZEdWaGJVbGtJRDBnZEdWaGJVbGtPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0JVWldGdElHbHVabTl5YldGMGFXOXVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZiM0puY3k5MFpXRnRjeThqWjJWMExYUmxZVzFjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUZ0allsMGdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJSFJsWVcxY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1oyVjBWR1ZoYlNoallpa2dlMXh1SUNBZ0lDQWdiRzluS0dCR1pYUmphR2x1WnlCVVpXRnRJQ1I3ZEdocGN5NWZYM1JsWVcxSlpIMWdLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkSFpYUW5MQ0JnTDNSbFlXMXpMeVI3ZEdocGN5NWZYM1JsWVcxSlpIMWdMQ0IxYm1SbFptbHVaV1FzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCTWFYTjBJSFJvWlNCVVpXRnRKM01nY21Wd2IzTnBkRzl5YVdWelhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmIzSm5jeTkwWldGdGN5OGpiR2x6ZEMxMFpXRnRMWEpsY0c5elhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUhKbGNHOXphWFJ2Y21sbGMxeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnNhWE4wVW1Wd2IzTW9ZMklwSUh0Y2JpQWdJQ0FnSUd4dlp5aGdSbVYwWTJocGJtY2djbVZ3YjNOcGRHOXlhV1Z6SUdadmNpQlVaV0Z0SUNSN2RHaHBjeTVmWDNSbFlXMUpaSDFnS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMFFXeHNVR0ZuWlhNb1lDOTBaV0Z0Y3k4a2UzUm9hWE11WDE5MFpXRnRTV1I5TDNKbGNHOXpZQ3dnZFc1a1pXWnBibVZrTENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnSUNvZ1JXUnBkQ0JVWldGdElHbHVabTl5YldGMGFXOXVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZiM0puY3k5MFpXRnRjeThqWldScGRDMTBaV0Z0WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdiM0IwYVc5dWN5QXRJRkJoY21GdFpYUmxjbk1nWm05eUlIUmxZVzBnWldScGRGeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc5d2RHbHZibk11Ym1GdFpTQXRJRlJvWlNCdVlXMWxJRzltSUhSb1pTQjBaV0Z0WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMjl3ZEdsdmJuTXVaR1Z6WTNKcGNIUnBiMjVkSUMwZ1ZHVmhiU0JrWlhOamNtbHdkR2x2Ymx4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRnR2Y0hScGIyNXpMbkpsY0c5ZmJtRnRaWE5kSUMwZ1VtVndiM01nZEc4Z1lXUmtJSFJvWlNCMFpXRnRJSFJ2WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMjl3ZEdsdmJuTXVjSEpwZG1GamVUMXpaV055WlhSZElDMGdWR2hsSUd4bGRtVnNJRzltSUhCeWFYWmhZM2tnZEdobElIUmxZVzBnYzJodmRXeGtJR2hoZG1VdUlFTmhiaUJpWlNCbGFYUm9aWElnYjI1bFhHNGdJQ0FnS2lCdlpqb2dZSE5sWTNKbGRHQXNJRzl5SUdCamJHOXpaV1JnWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0IxY0dSaGRHVmtJSFJsWVcxY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ1pXUnBkRlJsWVcwb2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJR3h2WnloZ1JXUnBkR2x1WnlCVVpXRnRJQ1I3ZEdocGN5NWZYM1JsWVcxSlpIMWdLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVFWUkRTQ2NzSUdBdmRHVmhiWE12Skh0MGFHbHpMbDlmZEdWaGJVbGtmV0FzSUc5d2RHbHZibk1zSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCTWFYTjBJSFJvWlNCMWMyVnljeUIzYUc4Z1lYSmxJRzFsYldKbGNuTWdiMllnZEdobElGUmxZVzFjYmlBZ0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl2Y21kekwzUmxZVzF6THlOc2FYTjBMWFJsWVcwdGJXVnRZbVZ5YzF4dUlDQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JRWVhKaGJXVjBaWEp6SUdadmNpQnNhWE4wYVc1bklIUmxZVzBnZFhObGNuTmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1eWIyeGxQV0ZzYkYwZ0xTQmpZVzRnWW1VZ2IyNWxJRzltT2lCZ1lXeHNZQ3dnWUcxaGFXNTBZV2x1WlhKZ0xDQnZjaUJnYldWdFltVnlZRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnVzJOaVhTQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdiR2x6ZENCdlppQjFjMlZ5YzF4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCc2FYTjBUV1Z0WW1WeWN5aHZjSFJwYjI1ekxDQmpZaWtnZTF4dUlDQWdJQ0FnYkc5bktHQkhaWFIwYVc1bklHMWxiV0psY25NZ2IyWWdWR1ZoYlNBa2UzUm9hWE11WDE5MFpXRnRTV1I5WUNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRFRnNiRkJoWjJWektHQXZkR1ZoYlhNdkpIdDBhR2x6TGw5ZmRHVmhiVWxrZlM5dFpXMWlaWEp6WUN3Z2IzQjBhVzl1Y3l3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFZGxkQ0JVWldGdElHMWxiV0psY25Ob2FYQWdjM1JoZEhWeklHWnZjaUJoSUhWelpYSmNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXZjbWR6TDNSbFlXMXpMeU5uWlhRdGRHVmhiUzF0WlcxaVpYSnphR2x3WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkWE5sY201aGJXVWdMU0JqWVc0Z1ltVWdiMjVsSUc5bU9pQmdZV3hzWUN3Z1lHMWhhVzUwWVdsdVpYSmdMQ0J2Y2lCZ2JXVnRZbVZ5WUZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYldWdFltVnljMmhwY0NCemRHRjBkWE1nYjJZZ1lTQjFjMlZ5WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRFMWxiV0psY25Ob2FYQW9kWE5sY201aGJXVXNJR05pS1NCN1hHNGdJQ0FnSUNCc2IyY29ZRWRsZEhScGJtY2diV1Z0WW1WeWMyaHBjQ0J2WmlCMWMyVnlJQ1I3ZFhObGNtNWhiV1Y5SUdsdUlGUmxZVzBnSkh0MGFHbHpMbDlmZEdWaGJVbGtmV0FwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmRHVmhiWE12Skh0MGFHbHpMbDlmZEdWaGJVbGtmUzl0WlcxaVpYSnphR2x3Y3k4a2UzVnpaWEp1WVcxbGZXQXNJSFZ1WkdWbWFXNWxaQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVGa1pDQmhJRzFsYldKbGNpQjBieUIwYUdVZ1ZHVmhiVnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMMjl5WjNNdmRHVmhiWE12STJGa1pDMTBaV0Z0TFcxbGJXSmxjbk5vYVhCY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0IxYzJWeWJtRnRaU0F0SUdOaGJpQmlaU0J2Ym1VZ2IyWTZJR0JoYkd4Z0xDQmdiV0ZwYm5SaGFXNWxjbUFzSUc5eUlHQnRaVzFpWlhKZ1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUZCaGNtRnRaWFJsY25NZ1ptOXlJR0ZrWkdsdVp5QmhJSFJsWVcwZ2JXVnRZbVZ5WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMjl3ZEdsdmJuTXVjbTlzWlQxdFpXMWlaWEpkSUMwZ1ZHaGxJSEp2YkdVZ2RHaGhkQ0IwYUdseklIVnpaWElnYzJodmRXeGtJR2hoZG1VZ2FXNGdkR2hsSUhSbFlXMHVJRU5oYmlCaVpTQnZibVZjYmlBZ0lDQXFJRzltT2lCZ2JXVnRZbVZ5WUN3Z2IzSWdZRzFoYVc1MFlXbHVaWEpnWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J0WlcxaVpYSnphR2x3SUhOMFlYUjFjeUJ2WmlCaFpHUmxaQ0IxYzJWeVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lHRmtaRTFsYldKbGNuTm9hWEFvZFhObGNtNWhiV1VzSUc5d2RHbHZibk1zSUdOaUtTQjdYRzRnSUNBZ0lDQnNiMmNvWUVGa1pHbHVaeUIxYzJWeUlDUjdkWE5sY201aGJXVjlJSFJ2SUZSbFlXMGdKSHQwYUdsekxsOWZkR1ZoYlVsa2ZXQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjFCVlZDY3NJR0F2ZEdWaGJYTXZKSHQwYUdsekxsOWZkR1ZoYlVsa2ZTOXRaVzFpWlhKemFHbHdjeThrZTNWelpYSnVZVzFsZldBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkhaWFFnY21Wd2J5QnRZVzVoWjJWdFpXNTBJSE4wWVhSMWN5Qm1iM0lnZEdWaGJWeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyOXlaM012ZEdWaGJYTXZJM0psYlc5MlpTMTBaV0Z0TFcxbGJXSmxjbk5vYVhCY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J2ZDI1bGNpQXRJRTl5WjJGdWFYcGhkR2x2YmlCdVlXMWxYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NtVndieUF0SUZKbGNHOGdibUZ0WlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1cyTmlYU0F0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnYldWdFltVnljMmhwY0NCemRHRjBkWE1nYjJZZ1lXUmtaV1FnZFhObGNseHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQnBjMDFoYm1GblpXUlNaWEJ2S0c5M2JtVnlMQ0J5WlhCdkxDQmpZaWtnZTF4dUlDQWdJQ0FnYkc5bktHQkhaWFIwYVc1bklISmxjRzhnYldGdVlXZGxiV1Z1ZENCaWVTQlVaV0Z0SUNSN2RHaHBjeTVmWDNSbFlXMUpaSDBnWm05eUlISmxjRzhnSkh0dmQyNWxjbjB2Skh0eVpYQnZmV0FwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNReU1EUnZjalF3TkNoZ0wzUmxZVzF6THlSN2RHaHBjeTVmWDNSbFlXMUpaSDB2Y21Wd2IzTXZKSHR2ZDI1bGNuMHZKSHR5WlhCdmZXQXNJSFZ1WkdWbWFXNWxaQ3dnWTJJcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVGa1pDQnZjaUJWY0dSaGRHVWdjbVZ3YnlCdFlXNWhaMlZ0Wlc1MElITjBZWFIxY3lCbWIzSWdkR1ZoYlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDI5eVozTXZkR1ZoYlhNdkkyRmtaQzF2Y2kxMWNHUmhkR1V0ZEdWaGJTMXlaWEJ2YzJsMGIzSjVYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzZHVaWElnTFNCUGNtZGhibWw2WVhScGIyNGdibUZ0WlZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsY0c4Z0xTQlNaWEJ2SUc1aGJXVmNiaUFnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdmNIUnBiMjV6SUMwZ1VHRnlZVzFsZEdWeWN5Qm1iM0lnWVdSa2FXNW5JRzl5SUhWd1pHRjBhVzVuSUhKbGNHOGdiV0Z1WVdkbGJXVnVkQ0JtYjNJZ2RHaGxJSFJsWVcxY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiYjNCMGFXOXVjeTV3WlhKdGFYTnphVzl1WFNBdElGUm9aU0J3WlhKdGFYTnphVzl1SUhSdklHZHlZVzUwSUhSb1pTQjBaV0Z0SUc5dUlIUm9hWE1nY21Wd2IzTnBkRzl5ZVM0Z1EyRnVJR0psSUc5dVpWeHVJQ0FnSUNvZ2IyWTZJR0J3ZFd4c1lDd2dZSEIxYzJoZ0xDQnZjaUJnWVdSdGFXNWdYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnRaVzFpWlhKemFHbHdJSE4wWVhSMWN5QnZaaUJoWkdSbFpDQjFjMlZ5WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUcxaGJtRm5aVkpsY0c4b2IzZHVaWElzSUhKbGNHOHNJRzl3ZEdsdmJuTXNJR05pS1NCN1hHNGdJQ0FnSUNCc2IyY29ZRUZrWkdsdVp5QnZjaUJWY0dSaGRHbHVaeUJ5WlhCdklHMWhibUZuWlcxbGJuUWdZbmtnVkdWaGJTQWtlM1JvYVhNdVgxOTBaV0Z0U1dSOUlHWnZjaUJ5WlhCdklDUjdiM2R1WlhKOUx5UjdjbVZ3YjMxZ0tUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBNakEwYjNJME1EUW9ZQzkwWldGdGN5OGtlM1JvYVhNdVgxOTBaV0Z0U1dSOUwzSmxjRzl6THlSN2IzZHVaWEo5THlSN2NtVndiMzFnTENCdmNIUnBiMjV6TENCallpd2dKMUJWVkNjcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUZKbGJXOTJaU0J5WlhCdklHMWhibUZuWlcxbGJuUWdjM1JoZEhWeklHWnZjaUIwWldGdFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmIzSm5jeTkwWldGdGN5OGpjbVZ0YjNabExYUmxZVzB0Y21Wd2IzTnBkRzl5ZVZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzkzYm1WeUlDMGdUM0puWVc1cGVtRjBhVzl1SUc1aGJXVmNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpYQnZJQzBnVW1Wd2J5QnVZVzFsWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J0WlcxaVpYSnphR2x3SUhOMFlYUjFjeUJ2WmlCaFpHUmxaQ0IxYzJWeVhHNGdJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBdElIUm9aU0J3Y205dGFYTmxJR1p2Y2lCMGFHVWdhSFIwY0NCeVpYRjFaWE4wWEc0Z0lDQWdLaTljYmlBZ0lIVnViV0Z1WVdkbFVtVndieWh2ZDI1bGNpd2djbVZ3Ynl3Z1kySXBJSHRjYmlBZ0lDQWdJR3h2WnloZ1VtVnRiM1psSUhKbGNHOGdiV0Z1WVdkbGJXVnVkQ0JpZVNCVVpXRnRJQ1I3ZEdocGN5NWZYM1JsWVcxSlpIMGdabTl5SUhKbGNHOGdKSHR2ZDI1bGNuMHZKSHR5WlhCdmZXQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1F5TURSdmNqUXdOQ2hnTDNSbFlXMXpMeVI3ZEdocGN5NWZYM1JsWVcxSlpIMHZjbVZ3YjNNdkpIdHZkMjVsY24wdkpIdHlaWEJ2ZldBc0lIVnVaR1ZtYVc1bFpDd2dZMklzSUNkRVJVeEZWRVVuS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJFWld4bGRHVWdWR1ZoYlZ4dUlDQWdJQ29nUUhObFpTQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNW5hWFJvZFdJdVkyOXRMM1l6TDI5eVozTXZkR1ZoYlhNdkkyUmxiR1YwWlMxMFpXRnRYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JiWTJKZElDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnNhWE4wSUc5bUlISmxjRzl6YVhSdmNtbGxjMXh1SUNBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnSUNvdlhHNGdJQ0JrWld4bGRHVlVaV0Z0S0dOaUtTQjdYRzRnSUNBZ0lDQnNiMmNvWUVSbGJHVjBhVzVuSUZSbFlXMGdKSHQwYUdsekxsOWZkR1ZoYlVsa2ZXQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1F5TURSdmNqUXdOQ2hnTDNSbFlXMXpMeVI3ZEdocGN5NWZYM1JsWVcxSlpIMWdMQ0IxYm1SbFptbHVaV1FzSUdOaUxDQW5SRVZNUlZSRkp5azdYRzRnSUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVkdWaGJUdGNiaUpkZlE9PVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGVhbS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAY29weXJpZ2h0ICAyMDEzIE1pY2hhZWwgQXVmcmVpdGVyIChEZXZlbG9wbWVudCBTZWVkKSBhbmQgMjAxNiBZYWhvbyBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbGljZW5zZSAgICBMaWNlbnNlZCB1bmRlciB7QGxpbmsgaHR0cHM6Ly9zcGR4Lm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2UtQ2xlYXIuaHRtbCBCU0QtMy1DbGF1c2UtQ2xlYXJ9LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgR2l0aHViLmpzIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbi8qKlxuICogUmVuZGVycyBodG1sIGZyb20gTWFya2Rvd24gdGV4dFxuICovXG52YXIgTWFya2Rvd24gPSBmdW5jdGlvbiAoX1JlcXVlc3RhYmxlKSB7XG4gIF9pbmhlcml0cyhNYXJrZG93biwgX1JlcXVlc3RhYmxlKTtcblxuICAvKipcbiAgICogY29uc3RydWN0IGEgTWFya2Rvd25cbiAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBhdXRoIC0gdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSB0byBHaXRIdWJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcGlCYXNlXSAtIHRoZSBiYXNlIEdpdGh1YiBBUEkgVVJMXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICovXG4gIGZ1bmN0aW9uIE1hcmtkb3duKGF1dGgsIGFwaUJhc2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFya2Rvd24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNYXJrZG93bi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1hcmtkb3duKSkuY2FsbCh0aGlzLCBhdXRoLCBhcGlCYXNlKSk7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGh0bWwgZnJvbSBNYXJrZG93biB0ZXh0LlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvbWFya2Rvd24vI3JlbmRlci1hbi1hcmJpdHJhcnktbWFya2Rvd24tZG9jdW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb252ZXJzaW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnRleHRdIC0gdGhlIG1hcmtkb3duIHRleHQgdG8gY29udmVydFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubW9kZT1tYXJrZG93bl0gLSBjYW4gYmUgZWl0aGVyIGBtYXJrZG93bmAgb3IgYGdmbWBcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNvbnRleHRdIC0gcmVwb3NpdG9yeSBuYW1lIGlmIG1vZGUgaXMgZ2ZtXG4gICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGNvbnZlcnRlZCBodG1sXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoTWFya2Rvd24sIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvbWFya2Rvd24nLCBvcHRpb25zLCBjYiwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1hcmtkb3duO1xufShfUmVxdWVzdGFibGUzLmRlZmF1bHQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcmtkb3duO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWsxaGNtdGtiM2R1TG1weklsMHNJbTVoYldWeklqcGJJazFoY210a2IzZHVJaXdpWVhWMGFDSXNJbUZ3YVVKaGMyVWlMQ0p2Y0hScGIyNXpJaXdpWTJJaUxDSmZjbVZ4ZFdWemRDSXNJbEpsY1hWbGMzUmhZbXhsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3p0QlFVOUJPenM3T3pzN096czdPeXRsUVZCQk96czdPenM3TzBGQlUwRTdPenRKUVVkTlFTeFJPenM3UVVGRFNEczdPenM3TzBGQlRVRXNiMEpCUVZsRExFbEJRVm9zUlVGQmEwSkRMRTlCUVd4Q0xFVkJRVEpDTzBGQlFVRTdPMEZCUVVFc0swZEJRMnhDUkN4SlFVUnJRaXhGUVVOYVF5eFBRVVJaTzBGQlJURkNPenRCUVVWRU96czdPenM3T3pzN096czdPenN5UWtGVlQwTXNUeXhGUVVGVFF5eEZMRVZCUVVrN1FVRkRha0lzWVVGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1RVRkJaQ3hGUVVGelFpeFhRVUYwUWl4RlFVRnRRMFlzVDBGQmJrTXNSVUZCTkVORExFVkJRVFZETEVWQlFXZEVMRWxCUVdoRUxFTkJRVkE3UVVGRFJqczdPenRGUVhaQ2JVSkZMSEZDT3p0QlFUQkNka0pETEU5QlFVOURMRTlCUVZBc1IwRkJhVUpTTEZGQlFXcENJaXdpWm1sc1pTSTZJazFoY210a2IzZHVMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCQVptbHNaVnh1SUNvZ1FHTnZjSGx5YVdkb2RDQWdNakF4TXlCTmFXTm9ZV1ZzSUVGMVpuSmxhWFJsY2lBb1JHVjJaV3h2Y0cxbGJuUWdVMlZsWkNrZ1lXNWtJREl3TVRZZ1dXRm9iMjhnU1c1akxseHVJQ29nUUd4cFkyVnVjMlVnSUNBZ1RHbGpaVzV6WldRZ2RXNWtaWElnZTBCc2FXNXJJR2gwZEhCek9pOHZjM0JrZUM1dmNtY3ZiR2xqWlc1elpYTXZRbE5FTFRNdFEyeGhkWE5sTFVOc1pXRnlMbWgwYld3Z1FsTkVMVE10UTJ4aGRYTmxMVU5zWldGeWZTNWNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lFZHBkR2gxWWk1cWN5QnBjeUJtY21WbGJIa2daR2x6ZEhKcFluVjBZV0pzWlM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnVW1WeGRXVnpkR0ZpYkdVZ1puSnZiU0FuTGk5U1pYRjFaWE4wWVdKc1pTYzdYRzVjYmk4cUtseHVJQ29nVW1WdVpHVnljeUJvZEcxc0lHWnliMjBnVFdGeWEyUnZkMjRnZEdWNGRGeHVJQ292WEc1amJHRnpjeUJOWVhKclpHOTNiaUJsZUhSbGJtUnpJRkpsY1hWbGMzUmhZbXhsSUh0Y2JpQWdJQzhxS2x4dUlDQWdJQ29nWTI5dWMzUnlkV04wSUdFZ1RXRnlhMlJ2ZDI1Y2JpQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVlYVjBhSDBnWVhWMGFDQXRJSFJvWlNCamNtVmtaVzUwYVdGc2N5QjBieUJoZFhSb1pXNTBhV05oZEdVZ2RHOGdSMmwwU0hWaVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzJGd2FVSmhjMlZkSUMwZ2RHaGxJR0poYzJVZ1IybDBhSFZpSUVGUVNTQlZVa3hjYmlBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNBcUwxeHVJQ0FnWTI5dWMzUnlkV04wYjNJb1lYVjBhQ3dnWVhCcFFtRnpaU2tnZTF4dUlDQWdJQ0FnYzNWd1pYSW9ZWFYwYUN3Z1lYQnBRbUZ6WlNrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nVW1WdVpHVnlJR2gwYld3Z1puSnZiU0JOWVhKclpHOTNiaUIwWlhoMExseHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwyMWhjbXRrYjNkdUx5TnlaVzVrWlhJdFlXNHRZWEppYVhSeVlYSjVMVzFoY210a2IzZHVMV1J2WTNWdFpXNTBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElHTnZiblpsY25OcGIyNGdiM0IwYVc5dWMxeHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0dmNIUnBiMjV6TG5SbGVIUmRJQzBnZEdobElHMWhjbXRrYjNkdUlIUmxlSFFnZEc4Z1kyOXVkbVZ5ZEZ4dUlDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRnR2Y0hScGIyNXpMbTF2WkdVOWJXRnlhMlJ2ZDI1ZElDMGdZMkZ1SUdKbElHVnBkR2hsY2lCZ2JXRnlhMlJ2ZDI1Z0lHOXlJR0JuWm0xZ1hHNGdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzI5d2RHbHZibk11WTI5dWRHVjRkRjBnTFNCeVpYQnZjMmwwYjNKNUlHNWhiV1VnYVdZZ2JXOWtaU0JwY3lCblptMWNiaUFnSUNBcUlFQndZWEpoYlNCN1VtVnhkV1Z6ZEdGaWJHVXVZMkZzYkdKaFkydDlJRnRqWWwwZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHTnZiblpsY25SbFpDQm9kRzFzWEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUhKbGJtUmxjaWh2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJQVTFRbkxDQW5MMjFoY210a2IzZHVKeXdnYjNCMGFXOXVjeXdnWTJJc0lIUnlkV1VwTzF4dUlDQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFMWhjbXRrYjNkdU8xeHVJbDE5XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYXJrZG93bi5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SZXF1ZXN0YWJsZTIgPSByZXF1aXJlKCcuL1JlcXVlc3RhYmxlJyk7XG5cbnZhciBfUmVxdWVzdGFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdGFibGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGNvcHlyaWdodCAgMjAxMyBNaWNoYWVsIEF1ZnJlaXRlciAoRGV2ZWxvcG1lbnQgU2VlZCkgYW5kIDIwMTYgWWFob28gSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGxpY2Vuc2UgICAgTGljZW5zZWQgdW5kZXIge0BsaW5rIGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlLUNsZWFyLmh0bWwgQlNELTMtQ2xhdXNlLUNsZWFyfS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIEdpdGh1Yi5qcyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4vKipcbiAqIFByb2plY3QgZW5jYXBzdWxhdGVzIHRoZSBmdW5jdGlvbmFsaXR5IHRvIGNyZWF0ZSwgcXVlcnksIGFuZCBtb2RpZnkgY2FyZHMgYW5kIGNvbHVtbnMuXG4gKi9cbnZhciBQcm9qZWN0ID0gZnVuY3Rpb24gKF9SZXF1ZXN0YWJsZSkge1xuICAgX2luaGVyaXRzKFByb2plY3QsIF9SZXF1ZXN0YWJsZSk7XG5cbiAgIC8qKlxuICAgICogQ3JlYXRlIGEgUHJvamVjdC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoZSBpZCBvZiB0aGUgcHJvamVjdFxuICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5hdXRofSBbYXV0aF0gLSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBhdXRoZW50aWNhdGUgdG8gR2l0aHViXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW2FwaUJhc2U9aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbV0gLSB0aGUgYmFzZSBHaXRodWIgQVBJIFVSTFxuICAgICovXG4gICBmdW5jdGlvbiBQcm9qZWN0KGlkLCBhdXRoLCBhcGlCYXNlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvamVjdCk7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQcm9qZWN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHJvamVjdCkpLmNhbGwodGhpcywgYXV0aCwgYXBpQmFzZSwgJ2luZXJ0aWEtcHJldmlldycpKTtcblxuICAgICAgX3RoaXMuX19pZCA9IGlkO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgfVxuXG4gICAvKipcbiAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhIHByb2plY3RcbiAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy8jZ2V0LWEtcHJvamVjdFxuICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIHByb2plY3QgaW5mb3JtYXRpb25cbiAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAqL1xuXG5cbiAgIF9jcmVhdGVDbGFzcyhQcm9qZWN0LCBbe1xuICAgICAga2V5OiAnZ2V0UHJvamVjdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvamVjdChjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0dFVCcsICcvcHJvamVjdHMvJyArIHRoaXMuX19pZCwgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEVkaXQgYSBwcm9qZWN0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvI3VwZGF0ZS1hLXByb2plY3RcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBwcm9qZWN0XG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbW9kaWZpZWQgcHJvamVjdFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3VwZGF0ZVByb2plY3QnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVByb2plY3Qob3B0aW9ucywgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQQVRDSCcsICcvcHJvamVjdHMvJyArIHRoaXMuX19pZCwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlbGV0ZSBhIHByb2plY3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy8jZGVsZXRlLWEtcHJvamVjdFxuICAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIGlzIHN1Y2Nlc3NmdWxcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdkZWxldGVQcm9qZWN0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVQcm9qZWN0KGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnREVMRVRFJywgJy9wcm9qZWN0cy8nICsgdGhpcy5fX2lkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCBjb2x1bW5zIG9mIGEgcHJvamVjdFxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NvbHVtbnMvI2xpc3QtcHJvamVjdC1jb2x1bW5zXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGNvbHVtbnNcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdsaXN0UHJvamVjdENvbHVtbnMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RQcm9qZWN0Q29sdW1ucyhjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RBbGxQYWdlcygnL3Byb2plY3RzLycgKyB0aGlzLl9faWQgKyAnL2NvbHVtbnMnLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGEgY29sdW1uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY29sdW1ucy8jZ2V0LWEtcHJvamVjdC1jb2x1bW5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xJZCAtIHRoZSBpZCBvZiB0aGUgY29sdW1uXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgY29sdW1uIGluZm9ybWF0aW9uXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZ2V0UHJvamVjdENvbHVtbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvamVjdENvbHVtbihjb2xJZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdHRVQnLCAnL3Byb2plY3RzL2NvbHVtbnMvJyArIGNvbElkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgbmV3IGNvbHVtblxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NvbHVtbnMvI2NyZWF0ZS1hLXByb2plY3QtY29sdW1uXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY29sdW1uXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0aGUgbmV3bHkgY3JlYXRlZCBjb2x1bW5cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjcmVhdGVQcm9qZWN0Q29sdW1uJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0Q29sdW1uKG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcHJvamVjdHMvJyArIHRoaXMuX19pZCArICcvY29sdW1ucycsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFZGl0IGEgY29sdW1uXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY29sdW1ucy8jdXBkYXRlLWEtcHJvamVjdC1jb2x1bW5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xJZCAtIHRoZSBjb2x1bW4gaWRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBjb2x1bW5cbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBtb2RpZmllZCBjb2x1bW5cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGVQcm9qZWN0Q29sdW1uJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQcm9qZWN0Q29sdW1uKGNvbElkLCBvcHRpb25zLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BBVENIJywgJy9wcm9qZWN0cy9jb2x1bW5zLycgKyBjb2xJZCwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlbGV0ZSBhIGNvbHVtblxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NvbHVtbnMvI2RlbGV0ZS1hLXByb2plY3QtY29sdW1uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sSWQgLSB0aGUgY29sdW1uIHRvIGJlIGRlbGV0ZWRcbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnZGVsZXRlUHJvamVjdENvbHVtbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUHJvamVjdENvbHVtbihjb2xJZCwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdERUxFVEUnLCAnL3Byb2plY3RzL2NvbHVtbnMvJyArIGNvbElkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTW92ZSBhIGNvbHVtblxuICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NvbHVtbnMvI21vdmUtYS1wcm9qZWN0LWNvbHVtblxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbElkIC0gdGhlIGNvbHVtbiB0byBiZSBtb3ZlZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uIC0gY2FuIGJlIG9uZSBvZiBmaXJzdCwgbGFzdCwgb3IgYWZ0ZXI6PGNvbHVtbi1pZD4sXG4gICAgICAgKiB3aGVyZSA8Y29sdW1uLWlkPiBpcyB0aGUgaWQgdmFsdWUgb2YgYSBjb2x1bW4gaW4gdGhlIHNhbWUgcHJvamVjdC5cbiAgICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbW92ZVByb2plY3RDb2x1bW4nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVQcm9qZWN0Q29sdW1uKGNvbElkLCBwb3NpdGlvbiwgY2IpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KCdQT1NUJywgJy9wcm9qZWN0cy9jb2x1bW5zLycgKyBjb2xJZCArICcvbW92ZXMnLCB7IHBvc2l0aW9uOiBwb3NpdGlvbiB9LCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCBjYXJkcyBvZiBhIHByb2plY3RcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jYXJkcy8jbGlzdC1wcm9qZWN0LWNhcmRzXG4gICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBbY2JdIC0gd2lsbCByZWNlaXZlIHRoZSBsaXN0IG9mIGNhcmRzXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdFByb2plY3RDYXJkcycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdFByb2plY3RDYXJkcyhjYikge1xuICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgIHJldHVybiB0aGlzLmxpc3RQcm9qZWN0Q29sdW1ucygpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gX3JlZi5kYXRhO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZGF0YS5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fcmVxdWVzdEFsbFBhZ2VzKCcvcHJvamVjdHMvY29sdW1ucy8nICsgY29sdW1uLmlkICsgJy9jYXJkcycsIG51bGwpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoY2FyZHNJbkNvbHVtbnMpIHtcbiAgICAgICAgICAgIHZhciBjYXJkcyA9IGNhcmRzSW5Db2x1bW5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgX3JlZjIpIHtcbiAgICAgICAgICAgICAgIHZhciBkYXRhID0gX3JlZjIuZGF0YTtcblxuICAgICAgICAgICAgICAgcHJldi5wdXNoLmFwcGx5KHByZXYsIF90b0NvbnN1bWFibGVBcnJheShkYXRhKSk7XG4gICAgICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgICAgIH0sIFtdKTtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgY2IobnVsbCwgY2FyZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhcmRzO1xuICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICBjYihlcnIpO1xuICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYWxsIGNhcmRzIG9mIGEgY29sdW1uXG4gICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jYXJkcy8jbGlzdC1wcm9qZWN0LWNhcmRzXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xJZCAtIHRoZSBpZCBvZiB0aGUgY29sdW1uXG4gICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IFtjYl0gLSB3aWxsIHJlY2VpdmUgdGhlIGxpc3Qgb2YgY2FyZHNcbiAgICAgICogQHJldHVybiB7UHJvbWlzZX0gLSB0aGUgcHJvbWlzZSBmb3IgdGhlIGh0dHAgcmVxdWVzdFxuICAgICAgKi9cblxuICAgfSwge1xuICAgICAga2V5OiAnbGlzdENvbHVtbkNhcmRzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0Q29sdW1uQ2FyZHMoY29sSWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEFsbFBhZ2VzKCcvcHJvamVjdHMvY29sdW1ucy8nICsgY29sSWQgKyAnL2NhcmRzJywgbnVsbCwgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGEgY2FyZFxuICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY2FyZHMvI2dldC1hLXByb2plY3QtY2FyZFxuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FyZElkIC0gdGhlIGlkIG9mIHRoZSBjYXJkXG4gICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBjYXJkIGluZm9ybWF0aW9uXG4gICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ2dldFByb2plY3RDYXJkJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9qZWN0Q2FyZChjYXJkSWQsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnR0VUJywgJy9wcm9qZWN0cy9jb2x1bW5zL2NhcmRzLycgKyBjYXJkSWQsIG51bGwsIGNiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIENyZWF0ZSBhIG5ldyBjYXJkXG4gICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wcm9qZWN0cy9jYXJkcy8jY3JlYXRlLWEtcHJvamVjdC1jYXJkXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xJZCAtIHRoZSBjb2x1bW4gaWRcbiAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGNhcmRcbiAgICAgICogQHBhcmFtIHtSZXF1ZXN0YWJsZS5jYWxsYmFja30gY2IgLSB3aWxsIHJlY2VpdmUgdGhlIG5ld2x5IGNyZWF0ZWQgY2FyZFxuICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdjcmVhdGVQcm9qZWN0Q2FyZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJvamVjdENhcmQoY29sSWQsIG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUE9TVCcsICcvcHJvamVjdHMvY29sdW1ucy8nICsgY29sSWQgKyAnL2NhcmRzJywgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogRWRpdCBhIGNhcmRcbiAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3Byb2plY3RzL2NhcmRzLyN1cGRhdGUtYS1wcm9qZWN0LWNhcmRcbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIHRoZSBjYXJkIGlkXG4gICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBjYXJkXG4gICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRoZSBtb2RpZmllZCBjYXJkXG4gICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ3VwZGF0ZVByb2plY3RDYXJkJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQcm9qZWN0Q2FyZChjYXJkSWQsIG9wdGlvbnMsIGNiKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCgnUEFUQ0gnLCAnL3Byb2plY3RzL2NvbHVtbnMvY2FyZHMvJyArIGNhcmRJZCwgb3B0aW9ucywgY2IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogRGVsZXRlIGEgY2FyZFxuICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY2FyZHMvI2RlbGV0ZS1hLXByb2plY3QtY2FyZFxuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FyZElkIC0gdGhlIGNhcmQgdG8gYmUgZGVsZXRlZFxuICAgICAgKiBAcGFyYW0ge1JlcXVlc3RhYmxlLmNhbGxiYWNrfSBjYiAtIHdpbGwgcmVjZWl2ZSB0cnVlIGlmIHRoZSBvcGVyYXRpb24gaXMgc3VjY2Vzc2Z1bFxuICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHRoZSBwcm9taXNlIGZvciB0aGUgaHR0cCByZXF1ZXN0XG4gICAgICAqL1xuXG4gICB9LCB7XG4gICAgICBrZXk6ICdkZWxldGVQcm9qZWN0Q2FyZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUHJvamVjdENhcmQoY2FyZElkLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ0RFTEVURScsICcvcHJvamVjdHMvY29sdW1ucy9jYXJkcy8nICsgY2FyZElkLCBudWxsLCBjYik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBNb3ZlIGEgY2FyZFxuICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvcHJvamVjdHMvY2FyZHMvI21vdmUtYS1wcm9qZWN0LWNhcmRcbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIHRoZSBjYXJkIHRvIGJlIG1vdmVkXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvbiAtIGNhbiBiZSBvbmUgb2YgdG9wLCBib3R0b20sIG9yIGFmdGVyOjxjYXJkLWlkPixcbiAgICAgICogd2hlcmUgPGNhcmQtaWQ+IGlzIHRoZSBpZCB2YWx1ZSBvZiBhIGNhcmQgaW4gdGhlIHNhbWUgcHJvamVjdC5cbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbElkIC0gdGhlIGlkIHZhbHVlIG9mIGEgY29sdW1uIGluIHRoZSBzYW1lIHByb2plY3QuXG4gICAgICAqIEBwYXJhbSB7UmVxdWVzdGFibGUuY2FsbGJhY2t9IGNiIC0gd2lsbCByZWNlaXZlIHRydWUgaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsXG4gICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gdGhlIHByb21pc2UgZm9yIHRoZSBodHRwIHJlcXVlc3RcbiAgICAgICovXG5cbiAgIH0sIHtcbiAgICAgIGtleTogJ21vdmVQcm9qZWN0Q2FyZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVByb2plY3RDYXJkKGNhcmRJZCwgcG9zaXRpb24sIGNvbElkLCBjYikge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoJ1BPU1QnLCAnL3Byb2plY3RzL2NvbHVtbnMvY2FyZHMvJyArIGNhcmRJZCArICcvbW92ZXMnLCB7IHBvc2l0aW9uOiBwb3NpdGlvbiwgY29sdW1uX2lkOiBjb2xJZCB9LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICAgY2IpO1xuICAgICAgfVxuICAgfV0pO1xuXG4gICByZXR1cm4gUHJvamVjdDtcbn0oX1JlcXVlc3RhYmxlMy5kZWZhdWx0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9qZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCeWIycGxZM1F1YW5NaVhTd2libUZ0WlhNaU9sc2lVSEp2YW1WamRDSXNJbWxrSWl3aVlYVjBhQ0lzSW1Gd2FVSmhjMlVpTENKZlgybGtJaXdpWTJJaUxDSmZjbVZ4ZFdWemRDSXNJbTl3ZEdsdmJuTWlMQ0pmY21WeGRXVnpkRUZzYkZCaFoyVnpJaXdpWTI5c1NXUWlMQ0p3YjNOcGRHbHZiaUlzSW14cGMzUlFjbTlxWldOMFEyOXNkVzF1Y3lJc0luUm9aVzRpTENKa1lYUmhJaXdpVUhKdmJXbHpaU0lzSW1Gc2JDSXNJbTFoY0NJc0ltTnZiSFZ0YmlJc0ltTmhjbVJ6U1c1RGIyeDFiVzV6SWl3aVkyRnlaSE1pTENKeVpXUjFZMlVpTENKd2NtVjJJaXdpY0hWemFDSXNJbU5oZEdOb0lpd2laWEp5SWl3aVkyRnlaRWxrSWl3aVkyOXNkVzF1WDJsa0lpd2lVbVZ4ZFdWemRHRmliR1VpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenM3TzBGQlQwRTdPenM3T3pzN096czdPenNyWlVGUVFUczdPenM3T3p0QlFWTkJPenM3U1VGSFRVRXNUenM3TzBGQlEwZzdPenM3T3p0QlFVMUJMRzlDUVVGWlF5eEZRVUZhTEVWQlFXZENReXhKUVVGb1FpeEZRVUZ6UWtNc1QwRkJkRUlzUlVGQkswSTdRVUZCUVRzN1FVRkJRU3h2U0VGRGRFSkVMRWxCUkhOQ0xFVkJRMmhDUXl4UFFVUm5RaXhGUVVOUUxHbENRVVJQT3p0QlFVVTFRaXhaUVVGTFF5eEpRVUZNTEVkQlFWbElMRVZCUVZvN1FVRkdORUk3UVVGSE9VSTdPMEZCUlVRN096czdPenM3T3pzN2FVTkJUVmRKTEVVc1JVRkJTVHRCUVVOYUxHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhMUVVGa0xHbENRVUZyUXl4TFFVRkxSaXhKUVVGMlF5eEZRVUVyUXl4SlFVRXZReXhGUVVGeFJFTXNSVUZCY2tRc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3TzI5RFFVOWpSU3hQTEVWQlFWTkdMRVVzUlVGQlNUdEJRVU40UWl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlFXTXNUMEZCWkN4cFFrRkJiME1zUzBGQlMwWXNTVUZCZWtNc1JVRkJhVVJITEU5QlFXcEVMRVZCUVRCRVJpeEZRVUV4UkN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenR2UTBGTlkwRXNSU3hGUVVGSk8wRkJRMllzWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVGakxGRkJRV1FzYVVKQlFYRkRMRXRCUVV0R0xFbEJRVEZETEVWQlFXdEVMRWxCUVd4RUxFVkJRWGRFUXl4RlFVRjRSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dDVRMEZOYlVKQkxFVXNSVUZCU1R0QlFVTndRaXhuUWtGQlR5eExRVUZMUnl4blFrRkJUQ3huUWtGQmJVTXNTMEZCUzBvc1NVRkJlRU1zWlVGQmQwUXNTVUZCZUVRc1JVRkJPRVJETEVWQlFUbEVMRU5CUVZBN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dDFRMEZQYVVKSkxFc3NSVUZCVDBvc1JTeEZRVUZKTzBGQlEzcENMR2RDUVVGUExFdEJRVXRETEZGQlFVd3NRMEZCWXl4TFFVRmtMSGxDUVVFd1EwY3NTMEZCTVVNc1JVRkJiVVFzU1VGQmJrUXNSVUZCZVVSS0xFVkJRWHBFTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenN3UTBGUGIwSkZMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRemxDTEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eE5RVUZrTEdsQ1FVRnRReXhMUVVGTFJpeEpRVUY0UXl4bFFVRjNSRWNzVDBGQmVFUXNSVUZCYVVWR0xFVkJRV3BGTEVOQlFWQTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenM3TUVOQlVXOUNTU3hMTEVWQlFVOUdMRThzUlVGQlUwWXNSU3hGUVVGSk8wRkJRM0pETEdkQ1FVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eFBRVUZrTEhsQ1FVRTBRMGNzUzBGQk5VTXNSVUZCY1VSR0xFOUJRWEpFTEVWQlFUaEVSaXhGUVVFNVJDeERRVUZRTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN01FTkJUMjlDU1N4TExFVkJRVTlLTEVVc1JVRkJTVHRCUVVNMVFpeG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVVVGQlpDeDVRa0ZCTmtOSExFdEJRVGRETEVWQlFYTkVMRWxCUVhSRUxFVkJRVFJFU2l4RlFVRTFSQ3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPenQzUTBGVGEwSkpMRXNzUlVGQlQwTXNVU3hGUVVGVlRDeEZMRVZCUVVrN1FVRkRjRU1zWjBKQlFVOHNTMEZCUzBNc1VVRkJUQ3hEUVVOS0xFMUJSRWtzZVVKQlJXbENSeXhMUVVacVFpeGhRVWRLTEVWQlFVTkRMRlZCUVZWQkxGRkJRVmdzUlVGSVNTeEZRVWxLVEN4RlFVcEpMRU5CUVZBN1FVRk5SanM3UVVGRlJqczdPenM3T3pzN08zVkRRVTFyUWtFc1JTeEZRVUZKTzBGQlFVRTdPMEZCUTJ4Q0xHZENRVUZQTEV0QlFVdE5MR3RDUVVGTUxFZEJRMHBETEVsQlJFa3NRMEZEUXl4blFrRkJXVHRCUVVGQkxHZENRVUZXUXl4SlFVRlZMRkZCUVZaQkxFbEJRVlU3TzBGQlEyWXNiVUpCUVU5RExGRkJRVkZETEVkQlFWSXNRMEZCV1VZc1MwRkJTMGNzUjBGQlRDeERRVUZUTEZWQlFVTkRMRTFCUVVRc1JVRkJXVHRCUVVOeVF5eHpRa0ZCVHl4UFFVRkxWQ3huUWtGQlRDeDNRa0ZCTWtOVExFOUJRVTlvUWl4RlFVRnNSQ3hoUVVFNFJDeEpRVUU1UkN4RFFVRlFPMEZCUTBZc1lVRkdhMElzUTBGQldpeERRVUZRTzBGQlIwWXNWVUZNU1N4RlFVdEdWeXhKUVV4RkxFTkJTMGNzVlVGQlEwMHNZMEZCUkN4RlFVRnZRanRCUVVONlFpeG5Ra0ZCVFVNc1VVRkJVVVFzWlVGQlpVVXNUVUZCWml4RFFVRnpRaXhWUVVGRFF5eEpRVUZFTEZOQlFXdENPMEZCUVVFc2JVSkJRVlpTTEVsQlFWVXNVMEZCVmtFc1NVRkJWVHM3UVVGRGJrUlJMRzlDUVVGTFF5eEpRVUZNTEdkRFFVRmhWQ3hKUVVGaU8wRkJRMEVzYzBKQlFVOVJMRWxCUVZBN1FVRkRSaXhoUVVoaExFVkJSMWdzUlVGSVZ5eERRVUZrTzBGQlNVRXNaMEpCUVVsb1FpeEZRVUZLTEVWQlFWRTdRVUZEVEVFc2EwSkJRVWNzU1VGQlNDeEZRVUZUWXl4TFFVRlVPMEZCUTBZN1FVRkRSQ3h0UWtGQlQwRXNTMEZCVUR0QlFVTkdMRlZCWkVrc1JVRmpSa2tzUzBGa1JTeERRV05KTEZWQlFVTkRMRWRCUVVRc1JVRkJVenRCUVVObUxHZENRVUZKYmtJc1JVRkJTaXhGUVVGUk8wRkJRMHhCTEd0Q1FVRkhiVUlzUjBGQlNEdEJRVU5CTzBGQlEwWTdRVUZEUkN4clFrRkJUVUVzUjBGQlRqdEJRVU5HTEZWQmNFSkpMRU5CUVZBN1FVRnhRa1k3TzBGQlJVUTdPenM3T3pzN096czdjME5CVDJkQ1ppeExMRVZCUVU5S0xFVXNSVUZCU1R0QlFVTjRRaXhuUWtGQlR5eExRVUZMUnl4blFrRkJUQ3gzUWtGQk1rTkRMRXRCUVRORExHRkJRVEJFTEVsQlFURkVMRVZCUVdkRlNpeEZRVUZvUlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3Y1VOQlQyVnZRaXhOTEVWQlFWRndRaXhGTEVWQlFVazdRVUZEZUVJc1owSkJRVThzUzBGQlMwTXNVVUZCVEN4RFFVRmpMRXRCUVdRc0swSkJRV2RFYlVJc1RVRkJhRVFzUlVGQk1FUXNTVUZCTVVRc1JVRkJaMFZ3UWl4RlFVRm9SU3hEUVVGUU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPM2REUVZGclFra3NTeXhGUVVGUFJpeFBMRVZCUVZOR0xFVXNSVUZCU1R0QlFVTnVReXhuUWtGQlR5eExRVUZMUXl4UlFVRk1MRU5CUVdNc1RVRkJaQ3g1UWtGQk1rTkhMRXRCUVRORExHRkJRVEJFUml4UFFVRXhSQ3hGUVVGdFJVWXNSVUZCYmtVc1EwRkJVRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3p0M1EwRlJhMEp2UWl4TkxFVkJRVkZzUWl4UExFVkJRVk5HTEVVc1JVRkJTVHRCUVVOd1F5eG5Ra0ZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV01zVDBGQlpDd3JRa0ZCYTBSdFFpeE5RVUZzUkN4RlFVRTBSR3hDTEU5QlFUVkVMRVZCUVhGRlJpeEZRVUZ5UlN4RFFVRlFPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3ZDBOQlQydENiMElzVFN4RlFVRlJjRUlzUlN4RlFVRkpPMEZCUXpOQ0xHZENRVUZQTEV0QlFVdERMRkZCUVV3c1EwRkJZeXhSUVVGa0xDdENRVUZ0UkcxQ0xFMUJRVzVFTEVWQlFUWkVMRWxCUVRkRUxFVkJRVzFGY0VJc1JVRkJia1VzUTBGQlVEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenM3TzNORFFWVm5RbTlDTEUwc1JVRkJVV1lzVVN4RlFVRlZSQ3hMTEVWQlFVOUtMRVVzUlVGQlNUdEJRVU14UXl4blFrRkJUeXhMUVVGTFF5eFJRVUZNTEVOQlEwb3NUVUZFU1N3clFrRkZkVUp0UWl4TlFVWjJRaXhoUVVkS0xFVkJRVU5tTEZWQlFWVkJMRkZCUVZnc1JVRkJjVUpuUWl4WFFVRlhha0lzUzBGQmFFTXNSVUZJU1N4RlFVZHZRenRCUVVONFEwb3NWMEZLU1N4RFFVRlFPMEZCVFVZN096czdSVUUxVG10Q2MwSXNjVUk3TzBGQkswNTBRa01zVDBGQlQwTXNUMEZCVUN4SFFVRnBRamRDTEU5QlFXcENJaXdpWm1sc1pTSTZJbEJ5YjJwbFkzUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVCbWFXeGxYRzRnS2lCQVkyOXdlWEpwWjJoMElDQXlNREV6SUUxcFkyaGhaV3dnUVhWbWNtVnBkR1Z5SUNoRVpYWmxiRzl3YldWdWRDQlRaV1ZrS1NCaGJtUWdNakF4TmlCWllXaHZieUJKYm1NdVhHNGdLaUJBYkdsalpXNXpaU0FnSUNCTWFXTmxibk5sWkNCMWJtUmxjaUI3UUd4cGJtc2dhSFIwY0hNNkx5OXpjR1I0TG05eVp5OXNhV05sYm5ObGN5OUNVMFF0TXkxRGJHRjFjMlV0UTJ4bFlYSXVhSFJ0YkNCQ1UwUXRNeTFEYkdGMWMyVXRRMnhsWVhKOUxseHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ1IybDBhSFZpTG1weklHbHpJR1p5WldWc2VTQmthWE4wY21saWRYUmhZbXhsTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0JTWlhGMVpYTjBZV0pzWlNCbWNtOXRJQ2N1TDFKbGNYVmxjM1JoWW14bEp6dGNibHh1THlvcVhHNGdLaUJRY205cVpXTjBJR1Z1WTJGd2MzVnNZWFJsY3lCMGFHVWdablZ1WTNScGIyNWhiR2wwZVNCMGJ5QmpjbVZoZEdVc0lIRjFaWEo1TENCaGJtUWdiVzlrYVdaNUlHTmhjbVJ6SUdGdVpDQmpiMngxYlc1ekxseHVJQ292WEc1amJHRnpjeUJRY205cVpXTjBJR1Y0ZEdWdVpITWdVbVZ4ZFdWemRHRmliR1VnZTF4dUlDQWdMeW9xWEc0Z0lDQWdLaUJEY21WaGRHVWdZU0JRY205cVpXTjBMbHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHbGtJQzBnZEdobElHbGtJRzltSUhSb1pTQndjbTlxWldOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtRjFkR2g5SUZ0aGRYUm9YU0F0SUdsdVptOXliV0YwYVc5dUlISmxjWFZwY21Wa0lIUnZJR0YxZEdobGJuUnBZMkYwWlNCMGJ5QkhhWFJvZFdKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiWVhCcFFtRnpaVDFvZEhSd2N6b3ZMMkZ3YVM1bmFYUm9kV0l1WTI5dFhTQXRJSFJvWlNCaVlYTmxJRWRwZEdoMVlpQkJVRWtnVlZKTVhHNGdJQ0FnS2k5Y2JpQWdJR052Ym5OMGNuVmpkRzl5S0dsa0xDQmhkWFJvTENCaGNHbENZWE5sS1NCN1hHNGdJQ0FnSUNCemRYQmxjaWhoZFhSb0xDQmhjR2xDWVhObExDQW5hVzVsY25ScFlTMXdjbVYyYVdWM0p5azdYRzRnSUNBZ0lDQjBhR2x6TGw5ZmFXUWdQU0JwWkR0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJIWlhRZ2FXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ1lTQndjbTlxWldOMFhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNISnZhbVZqZEhNdkkyZGxkQzFoTFhCeWIycGxZM1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQndjbTlxWldOMElHbHVabTl5YldGMGFXOXVYRzRnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FnS2k5Y2JpQWdJR2RsZEZCeWIycGxZM1FvWTJJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBLQ2RIUlZRbkxDQmdMM0J5YjJwbFkzUnpMeVI3ZEdocGN5NWZYMmxrZldBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCRlpHbDBJR0VnY0hKdmFtVmpkRnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0J5YjJwbFkzUnpMeU4xY0dSaGRHVXRZUzF3Y205cVpXTjBYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElIUm9aU0JrWlhOamNtbHdkR2x2YmlCdlppQjBhR1VnY0hKdmFtVmpkRnh1SUNBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHMXZaR2xtYVdWa0lIQnliMnBsWTNSY2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2RYQmtZWFJsVUhKdmFtVmpkQ2h2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psY1hWbGMzUW9KMUJCVkVOSUp5d2dZQzl3Y205cVpXTjBjeThrZTNSb2FYTXVYMTlwWkgxZ0xDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSR1ZzWlhSbElHRWdjSEp2YW1WamRGeHVJQ0FnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzQnliMnBsWTNSekx5TmtaV3hsZEdVdFlTMXdjbTlxWldOMFhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBjblZsSUdsbUlIUm9aU0J2Y0dWeVlYUnBiMjRnYVhNZ2MzVmpZMlZ6YzJaMWJGeHVJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ0xTQjBhR1VnY0hKdmJXbHpaU0JtYjNJZ2RHaGxJR2gwZEhBZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ292WEc0Z0lDQmtaV3hsZEdWUWNtOXFaV04wS0dOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkQ2duUkVWTVJWUkZKeXdnWUM5d2NtOXFaV04wY3k4a2UzUm9hWE11WDE5cFpIMWdMQ0J1ZFd4c0xDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dSMlYwSUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUdGc2JDQmpiMngxYlc1eklHOW1JR0VnY0hKdmFtVmpkRnh1SUNBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0J5YjJwbFkzUnpMMk52YkhWdGJuTXZJMnhwYzNRdGNISnZhbVZqZEMxamIyeDFiVzV6WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCYlkySmRJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYVhOMElHOW1JR052YkhWdGJuTmNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiR2x6ZEZCeWIycGxZM1JEYjJ4MWJXNXpLR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRFRnNiRkJoWjJWektHQXZjSEp2YW1WamRITXZKSHQwYUdsekxsOWZhV1I5TDJOdmJIVnRibk5nTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdJQ29nUjJWMElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElHRWdZMjlzZFcxdVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNISnZhbVZqZEhNdlkyOXNkVzF1Y3k4aloyVjBMV0V0Y0hKdmFtVmpkQzFqYjJ4MWJXNWNiaUFnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCamIyeEpaQ0F0SUhSb1pTQnBaQ0J2WmlCMGFHVWdZMjlzZFcxdVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmpZaUF0SUhkcGJHd2djbVZqWldsMlpTQjBhR1VnWTI5c2RXMXVJR2x1Wm05eWJXRjBhVzl1WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdkbGRGQnliMnBsWTNSRGIyeDFiVzRvWTI5c1NXUXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SMFZVSnl3Z1lDOXdjbTlxWldOMGN5OWpiMngxYlc1ekx5UjdZMjlzU1dSOVlDd2diblZzYkN3Z1kySXBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFTnlaV0YwWlNCaElHNWxkeUJqYjJ4MWJXNWNiaUFnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXdjbTlxWldOMGN5OWpiMngxYlc1ekx5TmpjbVZoZEdVdFlTMXdjbTlxWldOMExXTnZiSFZ0Ymx4dUlDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0IwYUdVZ1pHVnpZM0pwY0hScGIyNGdiMllnZEdobElHTnZiSFZ0Ymx4dUlDQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RHaGxJRzVsZDJ4NUlHTnlaV0YwWldRZ1kyOXNkVzF1WEc0Z0lDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBZ0tpOWNiaUFnSUdOeVpXRjBaVkJ5YjJwbFkzUkRiMngxYlc0b2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVQxTlVKeXdnWUM5d2NtOXFaV04wY3k4a2UzUm9hWE11WDE5cFpIMHZZMjlzZFcxdWMyQXNJRzl3ZEdsdmJuTXNJR05pS1R0Y2JpQWdJSDFjYmx4dUlDQWdMeW9xWEc0Z0lDQWdLaUJGWkdsMElHRWdZMjlzZFcxdVhHNGdJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNISnZhbVZqZEhNdlkyOXNkVzF1Y3k4amRYQmtZWFJsTFdFdGNISnZhbVZqZEMxamIyeDFiVzVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmpiMnhKWkNBdElIUm9aU0JqYjJ4MWJXNGdhV1JjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdkR2hsSUdSbGMyTnlhWEIwYVc5dUlHOW1JSFJvWlNCamIyeDFiVzVjYmlBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnRiMlJwWm1sbFpDQmpiMngxYlc1Y2JpQWdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUMwZ2RHaGxJSEJ5YjIxcGMyVWdabTl5SUhSb1pTQm9kSFJ3SUhKbGNYVmxjM1JjYmlBZ0lDQXFMMXh1SUNBZ2RYQmtZWFJsVUhKdmFtVmpkRU52YkhWdGJpaGpiMnhKWkN3Z2IzQjBhVzl1Y3l3Z1kySXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wS0NkUVFWUkRTQ2NzSUdBdmNISnZhbVZqZEhNdlkyOXNkVzF1Y3k4a2UyTnZiRWxrZldBc0lHOXdkR2x2Ym5Nc0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBZ0tpQkVaV3hsZEdVZ1lTQmpiMngxYlc1Y2JpQWdJQ0FxSUVCelpXVWdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXVaMmwwYUhWaUxtTnZiUzkyTXk5d2NtOXFaV04wY3k5amIyeDFiVzV6THlOa1pXeGxkR1V0WVMxd2NtOXFaV04wTFdOdmJIVnRibHh1SUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHTnZiRWxrSUMwZ2RHaGxJR052YkhWdGJpQjBieUJpWlNCa1pXeGxkR1ZrWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMUpsY1hWbGMzUmhZbXhsTG1OaGJHeGlZV05yZlNCallpQXRJSGRwYkd3Z2NtVmpaV2wyWlNCMGNuVmxJR2xtSUhSb1pTQnZjR1Z5WVhScGIyNGdhWE1nYzNWalkyVnpjMloxYkZ4dUlDQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0lDb3ZYRzRnSUNCa1pXeGxkR1ZRY205cVpXTjBRMjlzZFcxdUtHTnZiRWxrTENCallpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1FvSjBSRlRFVlVSU2NzSUdBdmNISnZhbVZqZEhNdlkyOXNkVzF1Y3k4a2UyTnZiRWxrZldBc0lHNTFiR3dzSUdOaUtUdGNiaUFnSUgxY2JseHVJQ0FnTHlvcVhHNGdJQ0FnS2lCTmIzWmxJR0VnWTI5c2RXMXVYRzRnSUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSEp2YW1WamRITXZZMjlzZFcxdWN5OGpiVzkyWlMxaExYQnliMnBsWTNRdFkyOXNkVzF1WEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjlzU1dRZ0xTQjBhR1VnWTI5c2RXMXVJSFJ2SUdKbElHMXZkbVZrWEc0Z0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjRzl6YVhScGIyNGdMU0JqWVc0Z1ltVWdiMjVsSUc5bUlHWnBjbk4wTENCc1lYTjBMQ0J2Y2lCaFpuUmxjam84WTI5c2RXMXVMV2xrUGl4Y2JpQWdJQ0FxSUhkb1pYSmxJRHhqYjJ4MWJXNHRhV1ErSUdseklIUm9aU0JwWkNCMllXeDFaU0J2WmlCaElHTnZiSFZ0YmlCcGJpQjBhR1VnYzJGdFpTQndjbTlxWldOMExseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdZMklnTFNCM2FXeHNJSEpsWTJWcGRtVWdkSEoxWlNCcFppQjBhR1VnYjNCbGNtRjBhVzl1SUdseklITjFZMk5sYzNObWRXeGNiaUFnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ0FxTDF4dUlDQWdiVzkyWlZCeWIycGxZM1JEYjJ4MWJXNG9ZMjlzU1dRc0lIQnZjMmwwYVc5dUxDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb1hHNGdJQ0FnSUNBZ0lDQW5VRTlUVkNjc1hHNGdJQ0FnSUNBZ0lDQmdMM0J5YjJwbFkzUnpMMk52YkhWdGJuTXZKSHRqYjJ4SlpIMHZiVzkyWlhOZ0xGeHVJQ0FnSUNBZ0lDQWdlM0J2YzJsMGFXOXVPaUJ3YjNOcGRHbHZibjBzWEc0Z0lDQWdJQ0FnSUNCallseHVJQ0FnSUNBZ0tUdGNiaUFnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElHRnNiQ0JqWVhKa2N5QnZaaUJoSUhCeWIycGxZM1JjYmlBZ0lDb2dRSE5sWlNCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1bmFYUm9kV0l1WTI5dEwzWXpMM0J5YjJwbFkzUnpMMk5oY21Sekx5TnNhWE4wTFhCeWIycGxZM1F0WTJGeVpITmNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pYRjFaWE4wWVdKc1pTNWpZV3hzWW1GamEzMGdXMk5pWFNBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ2JHbHpkQ0J2WmlCallYSmtjMXh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQXRJSFJvWlNCd2NtOXRhWE5sSUdadmNpQjBhR1VnYUhSMGNDQnlaWEYxWlhOMFhHNGdJQ0FxTDF4dUlDQWdiR2x6ZEZCeWIycGxZM1JEWVhKa2N5aGpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJHbHpkRkJ5YjJwbFkzUkRiMngxYlc1ektDbGNiaUFnSUNBZ0lDQWdMblJvWlc0b0tIdGtZWFJoZlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzVoYkd3b1pHRjBZUzV0WVhBb0tHTnZiSFZ0YmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkRUZzYkZCaFoyVnpLR0F2Y0hKdmFtVmpkSE12WTI5c2RXMXVjeThrZTJOdmJIVnRiaTVwWkgwdlkyRnlaSE5nTENCdWRXeHNLVHRjYmlBZ0lDQWdJQ0FnSUNBZ2ZTa3BPMXh1SUNBZ0lDQWdJQ0I5S1M1MGFHVnVLQ2hqWVhKa2MwbHVRMjlzZFcxdWN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCallYSmtjeUE5SUdOaGNtUnpTVzVEYjJ4MWJXNXpMbkpsWkhWalpTZ29jSEpsZGl3Z2UyUmhkR0Y5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaWFl1Y0hWemFDZ3VMaTVrWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpYWTdYRzRnSUNBZ0lDQWdJQ0FnSUgwc0lGdGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05pS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaUtHNTFiR3dzSUdOaGNtUnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZ5WkhNN1hHNGdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tDaGxjbklwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05pS0dWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsY25JN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNvZ1IyVjBJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJR0ZzYkNCallYSmtjeUJ2WmlCaElHTnZiSFZ0Ymx4dUlDQWdLaUJBYzJWbElHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtZHBkR2gxWWk1amIyMHZkak12Y0hKdmFtVmpkSE12WTJGeVpITXZJMnhwYzNRdGNISnZhbVZqZEMxallYSmtjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1kyOXNTV1FnTFNCMGFHVWdhV1FnYjJZZ2RHaGxJR052YkhWdGJseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1JoWW14bExtTmhiR3hpWVdOcmZTQmJZMkpkSUMwZ2QybHNiQ0J5WldObGFYWmxJSFJvWlNCc2FYTjBJRzltSUdOaGNtUnpYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDMGdkR2hsSUhCeWIyMXBjMlVnWm05eUlIUm9aU0JvZEhSd0lISmxjWFZsYzNSY2JpQWdJQ292WEc0Z0lDQnNhWE4wUTI5c2RXMXVRMkZ5WkhNb1kyOXNTV1FzSUdOaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY21WeGRXVnpkRUZzYkZCaFoyVnpLR0F2Y0hKdmFtVmpkSE12WTI5c2RXMXVjeThrZTJOdmJFbGtmUzlqWVhKa2MyQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBcUlFZGxkQ0JwYm1admNtMWhkR2x2YmlCaFltOTFkQ0JoSUdOaGNtUmNiaUFnSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTVuYVhSb2RXSXVZMjl0TDNZekwzQnliMnBsWTNSekwyTmhjbVJ6THlOblpYUXRZUzF3Y205cVpXTjBMV05oY21SY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR05oY21SSlpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ1kyRnlaRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjWFZsYzNSaFlteGxMbU5oYkd4aVlXTnJmU0JqWWlBdElIZHBiR3dnY21WalpXbDJaU0IwYUdVZ1kyRnlaQ0JwYm1admNtMWhkR2x2Ymx4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0F0SUhSb1pTQndjbTl0YVhObElHWnZjaUIwYUdVZ2FIUjBjQ0J5WlhGMVpYTjBYRzRnSUNBcUwxeHVJQ0FnWjJWMFVISnZhbVZqZEVOaGNtUW9ZMkZ5WkVsa0xDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0owZEZWQ2NzSUdBdmNISnZhbVZqZEhNdlkyOXNkVzF1Y3k5allYSmtjeThrZTJOaGNtUkpaSDFnTENCdWRXeHNMQ0JqWWlrN1hHNGdJQ0I5WEc1Y2JpQWdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ1kyRnlaRnh1SUNBZ0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG1kcGRHaDFZaTVqYjIwdmRqTXZjSEp2YW1WamRITXZZMkZ5WkhNdkkyTnlaV0YwWlMxaExYQnliMnBsWTNRdFkyRnlaRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1kyOXNTV1FnTFNCMGFHVWdZMjlzZFcxdUlHbGtYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ2RHaGxJR1JsYzJOeWFYQjBhVzl1SUc5bUlIUm9aU0JqWVhKa1hHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkR0ZpYkdVdVkyRnNiR0poWTJ0OUlHTmlJQzBnZDJsc2JDQnlaV05sYVhabElIUm9aU0J1Wlhkc2VTQmpjbVZoZEdWa0lHTmhjbVJjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnS2k5Y2JpQWdJR055WldGMFpWQnliMnBsWTNSRFlYSmtLR052YkVsa0xDQnZjSFJwYjI1ekxDQmpZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRb0oxQlBVMVFuTENCZ0wzQnliMnBsWTNSekwyTnZiSFZ0Ym5NdkpIdGpiMnhKWkgwdlkyRnlaSE5nTENCdmNIUnBiMjV6TENCallpazdYRzRnSUNCOVhHNWNiaUFnSUM4cUtseHVJQ0FnS2lCRlpHbDBJR0VnWTJGeVpGeHVJQ0FnS2lCQWMyVmxJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbWRwZEdoMVlpNWpiMjB2ZGpNdmNISnZhbVZqZEhNdlkyRnlaSE12STNWd1pHRjBaUzFoTFhCeWIycGxZM1F0WTJGeVpGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWTJGeVpFbGtJQzBnZEdobElHTmhjbVFnYVdSY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0IwYUdVZ1pHVnpZM0pwY0hScGIyNGdiMllnZEdobElHTmhjbVJjYmlBZ0lDb2dRSEJoY21GdElIdFNaWEYxWlhOMFlXSnNaUzVqWVd4c1ltRmphMzBnWTJJZ0xTQjNhV3hzSUhKbFkyVnBkbVVnZEdobElHMXZaR2xtYVdWa0lHTmhjbVJjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdMU0IwYUdVZ2NISnZiV2x6WlNCbWIzSWdkR2hsSUdoMGRIQWdjbVZ4ZFdWemRGeHVJQ0FnS2k5Y2JpQWdJSFZ3WkdGMFpWQnliMnBsWTNSRFlYSmtLR05oY21SSlpDd2diM0IwYVc5dWN5d2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtDZFFRVlJEU0Njc0lHQXZjSEp2YW1WamRITXZZMjlzZFcxdWN5OWpZWEprY3k4a2UyTmhjbVJKWkgxZ0xDQnZjSFJwYjI1ekxDQmpZaWs3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0tpQkVaV3hsZEdVZ1lTQmpZWEprWEc0Z0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdVoybDBhSFZpTG1OdmJTOTJNeTl3Y205cVpXTjBjeTlqWVhKa2N5OGpaR1ZzWlhSbExXRXRjSEp2YW1WamRDMWpZWEprWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmpZWEprU1dRZ0xTQjBhR1VnWTJGeVpDQjBieUJpWlNCa1pXeGxkR1ZrWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZ4ZFdWemRHRmliR1V1WTJGc2JHSmhZMnQ5SUdOaUlDMGdkMmxzYkNCeVpXTmxhWFpsSUhSeWRXVWdhV1lnZEdobElHOXdaWEpoZEdsdmJpQnBjeUJ6ZFdOalpYTnpablZzWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJQzBnZEdobElIQnliMjFwYzJVZ1ptOXlJSFJvWlNCb2RIUndJSEpsY1hWbGMzUmNiaUFnSUNvdlhHNGdJQ0JrWld4bGRHVlFjbTlxWldOMFEyRnlaQ2hqWVhKa1NXUXNJR05pS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ4ZFdWemRDZ25SRVZNUlZSRkp5d2dZQzl3Y205cVpXTjBjeTlqYjJ4MWJXNXpMMk5oY21Sekx5UjdZMkZ5WkVsa2ZXQXNJRzUxYkd3c0lHTmlLVHRjYmlBZ0lIMWNibHh1SUNBZ0x5b3FYRzRnSUNBcUlFMXZkbVVnWVNCallYSmtYRzRnSUNBcUlFQnpaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1WjJsMGFIVmlMbU52YlM5Mk15OXdjbTlxWldOMGN5OWpZWEprY3k4amJXOTJaUzFoTFhCeWIycGxZM1F0WTJGeVpGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWTJGeVpFbGtJQzBnZEdobElHTmhjbVFnZEc4Z1ltVWdiVzkyWldSY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEJ2YzJsMGFXOXVJQzBnWTJGdUlHSmxJRzl1WlNCdlppQjBiM0FzSUdKdmRIUnZiU3dnYjNJZ1lXWjBaWEk2UEdOaGNtUXRhV1ErTEZ4dUlDQWdLaUIzYUdWeVpTQThZMkZ5WkMxcFpENGdhWE1nZEdobElHbGtJSFpoYkhWbElHOW1JR0VnWTJGeVpDQnBiaUIwYUdVZ2MyRnRaU0J3Y205cVpXTjBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1kyOXNTV1FnTFNCMGFHVWdhV1FnZG1Gc2RXVWdiMllnWVNCamIyeDFiVzRnYVc0Z2RHaGxJSE5oYldVZ2NISnZhbVZqZEM1Y2JpQWdJQ29nUUhCaGNtRnRJSHRTWlhGMVpYTjBZV0pzWlM1allXeHNZbUZqYTMwZ1kySWdMU0IzYVd4c0lISmxZMlZwZG1VZ2RISjFaU0JwWmlCMGFHVWdiM0JsY21GMGFXOXVJR2x6SUhOMVkyTmxjM05tZFd4Y2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnTFNCMGFHVWdjSEp2YldselpTQm1iM0lnZEdobElHaDBkSEFnY21WeGRXVnpkRnh1SUNBZ0tpOWNiaUFnSUcxdmRtVlFjbTlxWldOMFEyRnlaQ2hqWVhKa1NXUXNJSEJ2YzJsMGFXOXVMQ0JqYjJ4SlpDd2dZMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWEYxWlhOMEtGeHVJQ0FnSUNBZ0lDQWdKMUJQVTFRbkxGeHVJQ0FnSUNBZ0lDQWdZQzl3Y205cVpXTjBjeTlqYjJ4MWJXNXpMMk5oY21Sekx5UjdZMkZ5WkVsa2ZTOXRiM1psYzJBc1hHNGdJQ0FnSUNBZ0lDQjdjRzl6YVhScGIyNDZJSEJ2YzJsMGFXOXVMQ0JqYjJ4MWJXNWZhV1E2SUdOdmJFbGtmU3dnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQmpZVzFsYkdOaGMyVmNiaUFnSUNBZ0lDQWdJR05pWEc0Z0lDQWdJQ0FwTzF4dUlDQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGQnliMnBsWTNRN1hHNGlYWDA9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm9qZWN0LmpzLm1hcFxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIik7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Qua2V5cztcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCIpOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpIHtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWxsO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gYWxsKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsaWRhdG9ycyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhbGlkYXRvcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxQcm9wVHlwZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgdmFsaWRhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWxpZGF0b3IpIHtcbiAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRvci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIGVycm9yID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGFsbFByb3BUeXBlcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3ZhbHVlc1wiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKTtcblxudmFyIF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSk7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGhyZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICBvbktleURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIHJvbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIHRoaXMgaXMgc29ydCBvZiBzaWxseSBidXQgbmVlZGVkIGZvciBCdXR0b25cbiAgICovXG4gIGNvbXBvbmVudENsYXNzOiBfZWxlbWVudFR5cGUuZGVmYXVsdFxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnYSdcbn07XG5cbmZ1bmN0aW9uIGlzVHJpdmlhbEhyZWYoaHJlZikge1xuICByZXR1cm4gIWhyZWYgfHwgaHJlZi50cmltKCkgPT09ICcjJztcbn1cbi8qKlxuICogVGhlcmUgYXJlIHNpdHVhdGlvbnMgZHVlIHRvIGJyb3dzZXIgcXVpcmtzIG9yIEJvb3RzdHJhcCBDU1Mgd2hlcmVcbiAqIGFuIGFuY2hvciB0YWcgaXMgbmVlZGVkLCB3aGVuIHNlbWFudGljYWxseSBhIGJ1dHRvbiB0YWcgaXMgdGhlXG4gKiBiZXR0ZXIgY2hvaWNlLiBTYWZlQW5jaG9yIGVuc3VyZXMgdGhhdCB3aGVuIGFuIGFuY2hvciBpcyB1c2VkIGxpa2UgYVxuICogYnV0dG9uIGl0cyBhY2Nlc3NpYmxlLiBJdCBhbHNvIGVtdWxhdGVzIGlucHV0IGBkaXNhYmxlZGAgYmVoYXZpb3IgZm9yXG4gKiBsaW5rcywgd2hpY2ggaXMgdXN1YWxseSBkZXNpcmFibGUgZm9yIEJ1dHRvbnMsIE5hdkl0ZW1zLCBNZW51SXRlbXMsIGV0Yy5cbiAqL1xuXG5cbnZhciBTYWZlQW5jaG9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoU2FmZUFuY2hvciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2FmZUFuY2hvcihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gX3RoaXMuaGFuZGxlQ2xpY2suYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBfdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2FmZUFuY2hvci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMuaHJlZixcbiAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG5cbiAgICBpZiAoZGlzYWJsZWQgfHwgaXNUcml2aWFsSHJlZihocmVmKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5oYW5kbGVDbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzMi5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQsXG4gICAgICAgIG9uS2V5RG93biA9IF90aGlzJHByb3BzMi5vbktleURvd24sXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wczIsIFtcImNvbXBvbmVudENsYXNzXCIsIFwiZGlzYWJsZWRcIiwgXCJvbktleURvd25cIl0pO1xuXG4gICAgaWYgKGlzVHJpdmlhbEhyZWYocHJvcHMuaHJlZikpIHtcbiAgICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIGhyZWYgYXR0cmlidXRlIG9uIHRoZSBub2RlXG4gICAgICAvLyBvdGhlcndpc2UsIHRoZSBjdXJzb3IgaW5jb3JyZWN0bHkgc3R5bGVkIChleGNlcHQgd2l0aCByb2xlPSdidXR0b24nKVxuXG4gICAgICBwcm9wcy5ocmVmID0gcHJvcHMuaHJlZiB8fCAnIyc7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBwcm9wcy50YWJJbmRleCA9IC0xO1xuICAgICAgcHJvcHMuc3R5bGUgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgICB9LCBwcm9wcy5zdHlsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgIG9uS2V5RG93bjogKDAsIF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkodGhpcy5oYW5kbGVLZXlEb3duLCBvbktleURvd24pXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTYWZlQW5jaG9yO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5TYWZlQW5jaG9yLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblNhZmVBbmNob3IuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIF9kZWZhdWx0ID0gU2FmZUFuY2hvcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbn07XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpIHtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciBfU3ltYm9sJGl0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX1N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgX1N5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfU3ltYm9sJGl0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIF9TeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9TeW1ib2wgJiYgb2JqICE9PSBfU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIik7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICEhJEdPUFMuZjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgJEdPUFMuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSAkZmFpbHMoZnVuY3Rpb24gKCkgeyAkR09QUy5mKDEpOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBGQUlMU19PTl9QUklNSVRJVkVTLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiAkR09QUy5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vd2Vhay1tYXBcIik7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLldlYWtNYXA7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICBpZiAoIURFU0NSSVBUT1JTIHx8IHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUsICdfYycpO1xuICAgICAgdGFyZ2V0Ll9jID0gbmV3IEJhc2UoKTtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRhcmdldFtBRERFUl0sIHRhcmdldCk7XG4gICAgfSk7XG4gICAgZWFjaCgnYWRkLGNsZWFyLGRlbGV0ZSxmb3JFYWNoLGdldCxoYXMsc2V0LGtleXMsdmFsdWVzLGVudHJpZXMsdG9KU09OJy5zcGxpdCgnLCcpLCBmdW5jdGlvbiAoS0VZKSB7XG4gICAgICB2YXIgSVNfQURERVIgPSBLRVkgPT0gJ2FkZCcgfHwgS0VZID09ICdzZXQnO1xuICAgICAgaWYgKEtFWSBpbiBwcm90byAmJiAhKElTX1dFQUsgJiYgS0VZID09ICdjbGVhcicpKSBoaWRlKEMucHJvdG90eXBlLCBLRVksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgS0VZKTtcbiAgICAgICAgaWYgKCFJU19BRERFUiAmJiBJU19XRUFLICYmICFpc09iamVjdChhKSkgcmV0dXJuIEtFWSA9PSAnZ2V0JyA/IHVuZGVmaW5lZCA6IGZhbHNlO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fY1tLRVldKGEgPT09IDAgPyAwIDogYSwgYik7XG4gICAgICAgIHJldHVybiBJU19BRERFUiA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBJU19XRUFLIHx8IGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYy5zaXplO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgQSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9hcnJheS9pcy1hcnJheVwiKTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaXNBcnJheTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX092ZXJsYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1vdmVybGF5cy9saWIvT3ZlcmxheVwiKSk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSk7XG5cbnZhciBfRmFkZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRmFkZVwiKSk7XG5cbnZhciBwcm9wVHlwZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBfT3ZlcmxheS5kZWZhdWx0LnByb3BUeXBlcywge1xuICAvKipcbiAgICogU2V0IHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBPdmVybGF5XG4gICAqL1xuICBzaG93OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIHRoZSBvdmVybGF5IHNob3VsZCB0cmlnZ2VyIG9uSGlkZSB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvdXRzaWRlIHRoZSBvdmVybGF5XG4gICAqL1xuICByb290Q2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGludm9rZWQgYnkgdGhlIG92ZXJsYXkgd2hlbiBpdCB3aXNoZXMgdG8gYmUgaGlkZGVuLiBSZXF1aXJlZCBpZlxuICAgKiBgcm9vdENsb3NlYCBpcyBzcGVjaWZpZWQuXG4gICAqL1xuICBvbkhpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBVc2UgYW5pbWF0aW9uXG4gICAqL1xuICBhbmltYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfZWxlbWVudFR5cGUuZGVmYXVsdF0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE92ZXJsYXkgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBpblxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBPdmVybGF5IGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogU2V0cyB0aGUgZGlyZWN0aW9uIG9mIHRoZSBPdmVybGF5LlxuICAgKi9cbiAgcGxhY2VtZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSlcbn0pO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYW5pbWF0aW9uOiBfRmFkZS5kZWZhdWx0LFxuICByb290Q2xvc2U6IGZhbHNlLFxuICBzaG93OiBmYWxzZSxcbiAgcGxhY2VtZW50OiAncmlnaHQnXG59O1xuXG52YXIgT3ZlcmxheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE92ZXJsYXksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE92ZXJsYXkoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE92ZXJsYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYW5pbWF0aW9uID0gX3RoaXMkcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImFuaW1hdGlvblwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGFuaW1hdGlvbiA9PT0gdHJ1ZSA/IF9GYWRlLmRlZmF1bHQgOiBhbmltYXRpb24gfHwgbnVsbDtcbiAgICB2YXIgY2hpbGQ7XG5cbiAgICBpZiAoIXRyYW5zaXRpb24pIHtcbiAgICAgIGNoaWxkID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkcmVuLCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgJ2luJylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PdmVybGF5LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uXG4gICAgfSksIGNoaWxkKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuT3ZlcmxheS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5PdmVybGF5LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBfZGVmYXVsdCA9IE92ZXJsYXk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJyk7XG5cbnZhciBfZWxlbWVudFR5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudFR5cGUpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUG9ydGFsID0gcmVxdWlyZSgnLi9Qb3J0YWwnKTtcblxudmFyIF9Qb3J0YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9ydGFsKTtcblxudmFyIF9Qb3NpdGlvbiA9IHJlcXVpcmUoJy4vUG9zaXRpb24nKTtcblxudmFyIF9Qb3NpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb3NpdGlvbik7XG5cbnZhciBfUm9vdENsb3NlV3JhcHBlciA9IHJlcXVpcmUoJy4vUm9vdENsb3NlV3JhcHBlcicpO1xuXG52YXIgX1Jvb3RDbG9zZVdyYXBwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm9vdENsb3NlV3JhcHBlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEJ1aWx0IG9uIHRvcCBvZiBgPFBvc2l0aW9uLz5gIGFuZCBgPFBvcnRhbC8+YCwgdGhlIG92ZXJsYXkgY29tcG9uZW50IGlzIGdyZWF0IGZvciBjdXN0b20gdG9vbHRpcCBvdmVybGF5cy5cbiAqL1xudmFyIE92ZXJsYXkgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3ZlcmxheSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheShwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdmVybGF5KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBleGl0ZWQ6IHRydWUgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uRXhpdGVkLmFwcGx5KF90aGlzJHByb3BzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHsgZXhpdGVkOiAhcHJvcHMuc2hvdyB9O1xuICAgIF90aGlzLm9uSGlkZGVuTGlzdGVuZXIgPSBfdGhpcy5oYW5kbGVIaWRkZW4uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgT3ZlcmxheS5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBleGl0ZWQ6IGZhbHNlIH0pO1xuICAgIH0gZWxzZSBpZiAoIW5leHRQcm9wcy50cmFuc2l0aW9uKSB7XG4gICAgICAvLyBPdGhlcndpc2UgbGV0IGhhbmRsZUhpZGRlbiB0YWtlIGNhcmUgb2YgbWFya2luZyBleGl0ZWQuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXhpdGVkOiB0cnVlIH0pO1xuICAgIH1cbiAgfTtcblxuICBPdmVybGF5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNvbnRhaW5lciA9IF9wcm9wcy5jb250YWluZXIsXG4gICAgICAgIGNvbnRhaW5lclBhZGRpbmcgPSBfcHJvcHMuY29udGFpbmVyUGFkZGluZyxcbiAgICAgICAgdGFyZ2V0ID0gX3Byb3BzLnRhcmdldCxcbiAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzLnBsYWNlbWVudCxcbiAgICAgICAgc2hvdWxkVXBkYXRlUG9zaXRpb24gPSBfcHJvcHMuc2hvdWxkVXBkYXRlUG9zaXRpb24sXG4gICAgICAgIHJvb3RDbG9zZSA9IF9wcm9wcy5yb290Q2xvc2UsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBUcmFuc2l0aW9uID0gX3Byb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjb250YWluZXInLCAnY29udGFpbmVyUGFkZGluZycsICd0YXJnZXQnLCAncGxhY2VtZW50JywgJ3Nob3VsZFVwZGF0ZVBvc2l0aW9uJywgJ3Jvb3RDbG9zZScsICdjaGlsZHJlbicsICd0cmFuc2l0aW9uJ10pO1xuXG4gICAgLy8gRG9uJ3QgdW4tcmVuZGVyIHRoZSBvdmVybGF5IHdoaWxlIGl0J3MgdHJhbnNpdGlvbmluZyBvdXQuXG5cblxuICAgIHZhciBtb3VudE92ZXJsYXkgPSBwcm9wcy5zaG93IHx8IFRyYW5zaXRpb24gJiYgIXRoaXMuc3RhdGUuZXhpdGVkO1xuICAgIGlmICghbW91bnRPdmVybGF5KSB7XG4gICAgICAvLyBEb24ndCBib3RoZXIgc2hvd2luZyBhbnl0aGluZyBpZiB3ZSBkb24ndCBoYXZlIHRvLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW47XG5cbiAgICAvLyBQb3NpdGlvbiBpcyBiZSBpbm5lci1tb3N0IGJlY2F1c2UgaXQgYWRkcyBpbmxpbmUgc3R5bGVzIGludG8gdGhlIGNoaWxkLFxuICAgIC8vIHdoaWNoIHRoZSBvdGhlciB3cmFwcGVycyBkb24ndCBmb3J3YXJkIGNvcnJlY3RseS5cbiAgICBjaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgX1Bvc2l0aW9uMi5kZWZhdWx0LFxuICAgICAgeyBjb250YWluZXI6IGNvbnRhaW5lciwgY29udGFpbmVyUGFkZGluZzogY29udGFpbmVyUGFkZGluZywgdGFyZ2V0OiB0YXJnZXQsIHBsYWNlbWVudDogcGxhY2VtZW50LCBzaG91bGRVcGRhdGVQb3NpdGlvbjogc2hvdWxkVXBkYXRlUG9zaXRpb24gfSxcbiAgICAgIGNoaWxkXG4gICAgKTtcblxuICAgIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgICB2YXIgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQ7XG5cbiAgICAgIC8vIFRoaXMgYW5pbWF0ZXMgdGhlIGNoaWxkIG5vZGUgYnkgaW5qZWN0aW5nIHByb3BzLCBzbyBpdCBtdXN0IHByZWNlZGVcbiAgICAgIC8vIGFueXRoaW5nIHRoYXQgYWRkcyBhIHdyYXBwaW5nIGRpdi5cblxuICAgICAgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgVHJhbnNpdGlvbixcbiAgICAgICAge1xuICAgICAgICAgICdpbic6IHByb3BzLnNob3csXG4gICAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgICAgIG9uRXhpdGVkOiB0aGlzLm9uSGlkZGVuTGlzdGVuZXIsXG4gICAgICAgICAgb25FbnRlcjogb25FbnRlcixcbiAgICAgICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZ29lcyBhZnRlciBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBhZGRzIGEgd3JhcHBpbmcgZGl2LlxuICAgIGlmIChyb290Q2xvc2UpIHtcbiAgICAgIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9Sb290Q2xvc2VXcmFwcGVyMi5kZWZhdWx0LFxuICAgICAgICB7XG4gICAgICAgICAgb25Sb290Q2xvc2U6IHByb3BzLm9uSGlkZSxcbiAgICAgICAgICBldmVudDogcHJvcHMucm9vdENsb3NlRXZlbnRcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgX1BvcnRhbDIuZGVmYXVsdCxcbiAgICAgIHsgY29udGFpbmVyOiBjb250YWluZXIgfSxcbiAgICAgIGNoaWxkXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheTtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk92ZXJsYXkucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIF9Qb3J0YWwyLmRlZmF1bHQucHJvcFR5cGVzLCBfUG9zaXRpb24yLmRlZmF1bHQucHJvcFR5cGVzLCB7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgT3ZlcmxheVxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIHRyaWdnZXIgYG9uSGlkZWAgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgZXZlbnQgZm9yIHRvZ2dsaW5nIG92ZXJsYXlcbiAgICovXG4gIHJvb3RDbG9zZUV2ZW50OiBfUm9vdENsb3NlV3JhcHBlcjIuZGVmYXVsdC5wcm9wVHlwZXMuZXZlbnQsXG5cbiAgLyoqXG4gICAqIEEgQ2FsbGJhY2sgZmlyZWQgYnkgdGhlIE92ZXJsYXkgd2hlbiBpdCB3aXNoZXMgdG8gYmUgaGlkZGVuLlxuICAgKlxuICAgKiBfX3JlcXVpcmVkX18gd2hlbiBgcm9vdENsb3NlYCBpcyBgdHJ1ZWAuXG4gICAqXG4gICAqIEB0eXBlIGZ1bmNcbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKHByb3BzKSB7XG4gICAgdmFyIHByb3BUeXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jO1xuICAgIGlmIChwcm9wcy5yb290Q2xvc2UpIHtcbiAgICAgIHByb3BUeXBlID0gcHJvcFR5cGUuaXNSZXF1aXJlZDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wVHlwZS5hcHBseSh1bmRlZmluZWQsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50XG4gICAqIHVzZWQgdG8gYW5pbWF0ZSB0aGUgb3ZlcmxheSBhcyBpdCBjaGFuZ2VzIHZpc2liaWxpdHkuXG4gICAqL1xuICB0cmFuc2l0aW9uOiBfZWxlbWVudFR5cGUyLmRlZmF1bHQsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBpblxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBpblxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgT3ZlcmxheSBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIGluXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgcmlnaHQgYmVmb3JlIHRoZSBPdmVybGF5IHRyYW5zaXRpb25zIG91dFxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBPdmVybGF5IGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgb3V0XG4gICAqL1xuICBvbkV4aXRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gT3ZlcmxheTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50ID0gcmVxdWlyZSgncHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50Jyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudE9yRWxlbWVudCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9nZXRDb250YWluZXIgPSByZXF1aXJlKCcuL3V0aWxzL2dldENvbnRhaW5lcicpO1xuXG52YXIgX2dldENvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb250YWluZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UG9ydGFsLz5gIGNvbXBvbmVudCByZW5kZXJzIGl0cyBjaGlsZHJlbiBpbnRvIGEgbmV3IFwic3VidHJlZVwiIG91dHNpZGUgb2YgY3VycmVudCBjb21wb25lbnQgaGllcmFyY2h5LlxuICogWW91IGNhbiB0aGluayBvZiBpdCBhcyBhIGRlY2xhcmF0aXZlIGBhcHBlbmRDaGlsZCgpYCwgb3IgalF1ZXJ5J3MgYCQuZm4uYXBwZW5kVG8oKWAuXG4gKiBUaGUgY2hpbGRyZW4gb2YgYDxQb3J0YWwvPmAgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGBjb250YWluZXJgIHNwZWNpZmllZC5cbiAqL1xudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuX21vdW50T3ZlcmxheVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuX292ZXJsYXlUYXJnZXQpIHtcbiAgICAgICAgX3RoaXMuX292ZXJsYXlUYXJnZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkoX3RoaXMucHJvcHMuY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKF90aGlzKS5ib2R5KTtcbiAgICAgICAgX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQoX3RoaXMuX292ZXJsYXlUYXJnZXQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLl91bm1vdW50T3ZlcmxheVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5fb3ZlcmxheVRhcmdldCkge1xuICAgICAgICBfdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZS5yZW1vdmVDaGlsZChfdGhpcy5fb3ZlcmxheVRhcmdldCk7XG4gICAgICAgIF90aGlzLl9vdmVybGF5VGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIF90aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID0gbnVsbDtcbiAgICB9LCBfdGhpcy5fcmVuZGVyT3ZlcmxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvdmVybGF5ID0gIV90aGlzLnByb3BzLmNoaWxkcmVuID8gbnVsbCA6IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgLy8gU2F2ZSByZWZlcmVuY2UgZm9yIGZ1dHVyZSBhY2Nlc3MuXG4gICAgICBpZiAob3ZlcmxheSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5fbW91bnRPdmVybGF5VGFyZ2V0KCk7XG5cbiAgICAgICAgdmFyIGluaXRpYWxSZW5kZXIgPSAhX3RoaXMuX292ZXJsYXlJbnN0YW5jZTtcblxuICAgICAgICBfdGhpcy5fb3ZlcmxheUluc3RhbmNlID0gX3JlYWN0RG9tMi5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKF90aGlzLCBvdmVybGF5LCBfdGhpcy5fb3ZlcmxheVRhcmdldCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChpbml0aWFsUmVuZGVyICYmIF90aGlzLnByb3BzLm9uUmVuZGVyZWQpIHtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uUmVuZGVyZWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVW5yZW5kZXIgaWYgdGhlIGNvbXBvbmVudCBpcyBudWxsIGZvciB0cmFuc2l0aW9ucyB0byBudWxsXG4gICAgICAgIF90aGlzLl91bnJlbmRlck92ZXJsYXkoKTtcbiAgICAgICAgX3RoaXMuX3VubW91bnRPdmVybGF5VGFyZ2V0KCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuX3VucmVuZGVyT3ZlcmxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5fb3ZlcmxheVRhcmdldCkge1xuICAgICAgICBfcmVhY3REb20yLmRlZmF1bHQudW5tb3VudENvbXBvbmVudEF0Tm9kZShfdGhpcy5fb3ZlcmxheVRhcmdldCk7XG4gICAgICAgIF90aGlzLl9vdmVybGF5SW5zdGFuY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmdldE1vdW50Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5fb3ZlcmxheVRhcmdldDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuX3JlbmRlck92ZXJsYXkoKTtcbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9yZW5kZXJPdmVybGF5KCk7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmICh0aGlzLl9vdmVybGF5VGFyZ2V0ICYmIG5leHRQcm9wcy5jb250YWluZXIgIT09IHRoaXMucHJvcHMuY29udGFpbmVyKSB7XG4gICAgICB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlLnJlbW92ZUNoaWxkKHRoaXMuX292ZXJsYXlUYXJnZXQpO1xuICAgICAgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSA9ICgwLCBfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KShuZXh0UHJvcHMuY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKHRoaXMpLmJvZHkpO1xuICAgICAgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZS5hcHBlbmRDaGlsZCh0aGlzLl9vdmVybGF5VGFyZ2V0KTtcbiAgICB9XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3VucmVuZGVyT3ZlcmxheSgpO1xuICAgIHRoaXMuX3VubW91bnRPdmVybGF5VGFyZ2V0KCk7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFBvcnRhbDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvcnRhbC5kaXNwbGF5TmFtZSA9ICdQb3J0YWwnO1xuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgTm9kZSwgQ29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBQb3J0YWwgY2hpbGRyZW5cbiAgICogYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICBvblJlbmRlcmVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBQb3J0YWw7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnQnKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9uZW50T3JFbGVtZW50KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2NhbGN1bGF0ZVBvc2l0aW9uID0gcmVxdWlyZSgnLi91dGlscy9jYWxjdWxhdGVQb3NpdGlvbicpO1xuXG52YXIgX2NhbGN1bGF0ZVBvc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbGN1bGF0ZVBvc2l0aW9uKTtcblxudmFyIF9nZXRDb250YWluZXIgPSByZXF1aXJlKCcuL3V0aWxzL2dldENvbnRhaW5lcicpO1xuXG52YXIgX2dldENvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb250YWluZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGUgUG9zaXRpb24gY29tcG9uZW50IGNhbGN1bGF0ZXMgdGhlIGNvb3JkaW5hdGVzIGZvciBpdHMgY2hpbGQsIHRvIHBvc2l0aW9uXG4gKiBpdCByZWxhdGl2ZSB0byBhIGB0YXJnZXRgIGNvbXBvbmVudCBvciBub2RlLiBVc2VmdWwgZm9yIGNyZWF0aW5nIGNhbGxvdXRzXG4gKiBhbmQgdG9vbHRpcHMsIHRoZSBQb3NpdGlvbiBjb21wb25lbnQgaW5qZWN0cyBhIGBzdHlsZWAgcHJvcHMgd2l0aCBgbGVmdGAgYW5kXG4gKiBgdG9wYCB2YWx1ZXMgZm9yIHBvc2l0aW9uaW5nIHlvdXIgY29tcG9uZW50LlxuICpcbiAqIEl0IGFsc28gaW5qZWN0cyBcImFycm93XCIgYGxlZnRgLCBhbmQgYHRvcGAgdmFsdWVzIGZvciBzdHlsaW5nIGNhbGxvdXQgYXJyb3dzXG4gKiBmb3IgZ2l2aW5nIHlvdXIgY29tcG9uZW50cyBhIHNlbnNlIG9mIGRpcmVjdGlvbmFsaXR5LlxuICovXG52YXIgUG9zaXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvc2l0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRhcmdldCA9IF90aGlzLnByb3BzLnRhcmdldDtcblxuICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gdGFyZ2V0KCkgOiB0YXJnZXQ7XG4gICAgICByZXR1cm4gdGFyZ2V0RWxlbWVudCAmJiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGFyZ2V0RWxlbWVudCkgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMubWF5YmVVcGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uIChwbGFjZW1lbnRDaGFuZ2VkKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMuZ2V0VGFyZ2V0KCk7XG5cbiAgICAgIGlmICghX3RoaXMucHJvcHMuc2hvdWxkVXBkYXRlUG9zaXRpb24gJiYgdGFyZ2V0ID09PSBfdGhpcy5fbGFzdFRhcmdldCAmJiAhcGxhY2VtZW50Q2hhbmdlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnVwZGF0ZVBvc2l0aW9uKHRhcmdldCk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgcG9zaXRpb25MZWZ0OiAwLFxuICAgICAgcG9zaXRpb25Ub3A6IDAsXG4gICAgICBhcnJvd09mZnNldExlZnQ6IG51bGwsXG4gICAgICBhcnJvd09mZnNldFRvcDogbnVsbFxuICAgIH07XG5cbiAgICBfdGhpcy5fbmVlZHNGbHVzaCA9IGZhbHNlO1xuICAgIF90aGlzLl9sYXN0VGFyZ2V0ID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBQb3NpdGlvbi5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKHRoaXMuZ2V0VGFyZ2V0KCkpO1xuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xuICAgIHRoaXMuX25lZWRzRmx1c2ggPSB0cnVlO1xuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMuX25lZWRzRmx1c2gpIHtcbiAgICAgIHRoaXMuX25lZWRzRmx1c2ggPSBmYWxzZTtcbiAgICAgIHRoaXMubWF5YmVVcGRhdGVQb3NpdGlvbih0aGlzLnByb3BzLnBsYWNlbWVudCAhPT0gcHJldlByb3BzLnBsYWNlbWVudCk7XG4gICAgfVxuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHBvc2l0aW9uTGVmdCA9IF9zdGF0ZS5wb3NpdGlvbkxlZnQsXG4gICAgICAgIHBvc2l0aW9uVG9wID0gX3N0YXRlLnBvc2l0aW9uVG9wLFxuICAgICAgICBhcnJvd1Bvc2l0aW9uID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9zdGF0ZSwgWydwb3NpdGlvbkxlZnQnLCAncG9zaXRpb25Ub3AnXSk7XG5cbiAgICAvLyBUaGVzZSBzaG91bGQgbm90IGJlIGZvcndhcmRlZCB0byB0aGUgY2hpbGQuXG5cblxuICAgIGRlbGV0ZSBwcm9wcy50YXJnZXQ7XG4gICAgZGVsZXRlIHByb3BzLmNvbnRhaW5lcjtcbiAgICBkZWxldGUgcHJvcHMuY29udGFpbmVyUGFkZGluZztcbiAgICBkZWxldGUgcHJvcHMuc2hvdWxkVXBkYXRlUG9zaXRpb247XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwgX2V4dGVuZHMoe30sIHByb3BzLCBhcnJvd1Bvc2l0aW9uLCB7XG4gICAgICAvLyBGSVhNRTogRG9uJ3QgZm9yd2FyZCBgcG9zaXRpb25MZWZ0YCBhbmQgYHBvc2l0aW9uVG9wYCB2aWEgYm90aCBwcm9wc1xuICAgICAgLy8gYW5kIGBwcm9wcy5zdHlsZWAuXG4gICAgICBwb3NpdGlvbkxlZnQ6IHBvc2l0aW9uTGVmdCxcbiAgICAgIHBvc2l0aW9uVG9wOiBwb3NpdGlvblRvcCxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KShjbGFzc05hbWUsIGNoaWxkLnByb3BzLmNsYXNzTmFtZSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLnN0eWxlLCB7XG4gICAgICAgIGxlZnQ6IHBvc2l0aW9uTGVmdCxcbiAgICAgICAgdG9wOiBwb3NpdGlvblRvcFxuICAgICAgfSlcbiAgICB9KSk7XG4gIH07XG5cbiAgUG9zaXRpb24ucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24odGFyZ2V0KSB7XG4gICAgdGhpcy5fbGFzdFRhcmdldCA9IHRhcmdldDtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcG9zaXRpb25MZWZ0OiAwLFxuICAgICAgICBwb3NpdGlvblRvcDogMCxcbiAgICAgICAgYXJyb3dPZmZzZXRMZWZ0OiBudWxsLFxuICAgICAgICBhcnJvd09mZnNldFRvcDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmxheSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgY29udGFpbmVyID0gKDAsIF9nZXRDb250YWluZXIyLmRlZmF1bHQpKHRoaXMucHJvcHMuY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKHRoaXMpLmJvZHkpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSgoMCwgX2NhbGN1bGF0ZVBvc2l0aW9uMi5kZWZhdWx0KSh0aGlzLnByb3BzLnBsYWNlbWVudCwgb3ZlcmxheSwgdGFyZ2V0LCBjb250YWluZXIsIHRoaXMucHJvcHMuY29udGFpbmVyUGFkZGluZykpO1xuICB9O1xuXG4gIHJldHVybiBQb3NpdGlvbjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvc2l0aW9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgbm9kZSwgZWxlbWVudCwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGNoaWxkIHdpbGwgYmVcbiAgICogYmUgcG9zaXRpb25lZCBuZXh0IHRvIHRoZSBgdGFyZ2V0YCBzcGVjaWZpZWQuXG4gICAqL1xuICB0YXJnZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogXCJvZmZzZXRQYXJlbnRcIiBvZiB0aGUgY29tcG9uZW50XG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gc3BhY2luZyBpbiBwaXhlbHMgYmV0d2VlbiBjb250YWluZXIgYm9yZGVyIGFuZCBjb21wb25lbnQgYm9yZGVyXG4gICAqL1xuICBjb250YWluZXJQYWRkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgLyoqXG4gICAqIEhvdyB0byBwb3NpdGlvbiB0aGUgY29tcG9uZW50IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXRcbiAgICovXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddKSxcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBvc2l0aW9uIHNob3VsZCBiZSBjaGFuZ2VkIG9uIGVhY2ggdXBkYXRlXG4gICAqL1xuICBzaG91bGRVcGRhdGVQb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59O1xuXG5Qb3NpdGlvbi5kaXNwbGF5TmFtZSA9ICdQb3NpdGlvbic7XG5cblBvc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29udGFpbmVyUGFkZGluZzogMCxcbiAgcGxhY2VtZW50OiAncmlnaHQnLFxuICBzaG91bGRVcGRhdGVQb3NpdGlvbjogZmFsc2Vcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBvc2l0aW9uO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsY3VsYXRlUG9zaXRpb247XG5cbnZhciBfb2Zmc2V0ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvcXVlcnkvb2Zmc2V0Jyk7XG5cbnZhciBfb2Zmc2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29mZnNldCk7XG5cbnZhciBfcG9zaXRpb24gPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9wb3NpdGlvbicpO1xuXG52YXIgX3Bvc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc2l0aW9uKTtcblxudmFyIF9zY3JvbGxUb3AgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9zY3JvbGxUb3AnKTtcblxudmFyIF9zY3JvbGxUb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2Nyb2xsVG9wKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyRGltZW5zaW9ucyhjb250YWluZXJOb2RlKSB7XG4gIHZhciB3aWR0aCA9IHZvaWQgMCxcbiAgICAgIGhlaWdodCA9IHZvaWQgMCxcbiAgICAgIHNjcm9sbCA9IHZvaWQgMDtcblxuICBpZiAoY29udGFpbmVyTm9kZS50YWdOYW1lID09PSAnQk9EWScpIHtcbiAgICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIHNjcm9sbCA9ICgwLCBfc2Nyb2xsVG9wMi5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpLmRvY3VtZW50RWxlbWVudCkgfHwgKDAsIF9zY3JvbGxUb3AyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfZ2V0T2Zmc2V0ID0gKDAsIF9vZmZzZXQyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpO1xuXG4gICAgd2lkdGggPSBfZ2V0T2Zmc2V0LndpZHRoO1xuICAgIGhlaWdodCA9IF9nZXRPZmZzZXQuaGVpZ2h0O1xuXG4gICAgc2Nyb2xsID0gKDAsIF9zY3JvbGxUb3AyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgc2Nyb2xsOiBzY3JvbGwgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9wRGVsdGEodG9wLCBvdmVybGF5SGVpZ2h0LCBjb250YWluZXIsIHBhZGRpbmcpIHtcbiAgdmFyIGNvbnRhaW5lckRpbWVuc2lvbnMgPSBnZXRDb250YWluZXJEaW1lbnNpb25zKGNvbnRhaW5lcik7XG4gIHZhciBjb250YWluZXJTY3JvbGwgPSBjb250YWluZXJEaW1lbnNpb25zLnNjcm9sbDtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lckRpbWVuc2lvbnMuaGVpZ2h0O1xuXG4gIHZhciB0b3BFZGdlT2Zmc2V0ID0gdG9wIC0gcGFkZGluZyAtIGNvbnRhaW5lclNjcm9sbDtcbiAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSB0b3AgKyBwYWRkaW5nIC0gY29udGFpbmVyU2Nyb2xsICsgb3ZlcmxheUhlaWdodDtcblxuICBpZiAodG9wRWRnZU9mZnNldCA8IDApIHtcbiAgICByZXR1cm4gLXRvcEVkZ2VPZmZzZXQ7XG4gIH0gZWxzZSBpZiAoYm90dG9tRWRnZU9mZnNldCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgIHJldHVybiBjb250YWluZXJIZWlnaHQgLSBib3R0b21FZGdlT2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldExlZnREZWx0YShsZWZ0LCBvdmVybGF5V2lkdGgsIGNvbnRhaW5lciwgcGFkZGluZykge1xuICB2YXIgY29udGFpbmVyRGltZW5zaW9ucyA9IGdldENvbnRhaW5lckRpbWVuc2lvbnMoY29udGFpbmVyKTtcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyRGltZW5zaW9ucy53aWR0aDtcblxuICB2YXIgbGVmdEVkZ2VPZmZzZXQgPSBsZWZ0IC0gcGFkZGluZztcbiAgdmFyIHJpZ2h0RWRnZU9mZnNldCA9IGxlZnQgKyBwYWRkaW5nICsgb3ZlcmxheVdpZHRoO1xuXG4gIGlmIChsZWZ0RWRnZU9mZnNldCA8IDApIHtcbiAgICByZXR1cm4gLWxlZnRFZGdlT2Zmc2V0O1xuICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lcldpZHRoIC0gcmlnaHRFZGdlT2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uKHBsYWNlbWVudCwgb3ZlcmxheU5vZGUsIHRhcmdldCwgY29udGFpbmVyLCBwYWRkaW5nKSB7XG4gIHZhciBjaGlsZE9mZnNldCA9IGNvbnRhaW5lci50YWdOYW1lID09PSAnQk9EWScgPyAoMCwgX29mZnNldDIuZGVmYXVsdCkodGFyZ2V0KSA6ICgwLCBfcG9zaXRpb24yLmRlZmF1bHQpKHRhcmdldCwgY29udGFpbmVyKTtcblxuICB2YXIgX2dldE9mZnNldDIgPSAoMCwgX29mZnNldDIuZGVmYXVsdCkob3ZlcmxheU5vZGUpLFxuICAgICAgb3ZlcmxheUhlaWdodCA9IF9nZXRPZmZzZXQyLmhlaWdodCxcbiAgICAgIG92ZXJsYXlXaWR0aCA9IF9nZXRPZmZzZXQyLndpZHRoO1xuXG4gIHZhciBwb3NpdGlvbkxlZnQgPSB2b2lkIDAsXG4gICAgICBwb3NpdGlvblRvcCA9IHZvaWQgMCxcbiAgICAgIGFycm93T2Zmc2V0TGVmdCA9IHZvaWQgMCxcbiAgICAgIGFycm93T2Zmc2V0VG9wID0gdm9pZCAwO1xuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdsZWZ0JyB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3NpdGlvblRvcCA9IGNoaWxkT2Zmc2V0LnRvcCArIChjaGlsZE9mZnNldC5oZWlnaHQgLSBvdmVybGF5SGVpZ2h0KSAvIDI7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICAgIHBvc2l0aW9uTGVmdCA9IGNoaWxkT2Zmc2V0LmxlZnQgLSBvdmVybGF5V2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc2l0aW9uTGVmdCA9IGNoaWxkT2Zmc2V0LmxlZnQgKyBjaGlsZE9mZnNldC53aWR0aDtcbiAgICB9XG5cbiAgICB2YXIgdG9wRGVsdGEgPSBnZXRUb3BEZWx0YShwb3NpdGlvblRvcCwgb3ZlcmxheUhlaWdodCwgY29udGFpbmVyLCBwYWRkaW5nKTtcblxuICAgIHBvc2l0aW9uVG9wICs9IHRvcERlbHRhO1xuICAgIGFycm93T2Zmc2V0VG9wID0gNTAgKiAoMSAtIDIgKiB0b3BEZWx0YSAvIG92ZXJsYXlIZWlnaHQpICsgJyUnO1xuICAgIGFycm93T2Zmc2V0TGVmdCA9IHZvaWQgMDtcbiAgfSBlbHNlIGlmIChwbGFjZW1lbnQgPT09ICd0b3AnIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3NpdGlvbkxlZnQgPSBjaGlsZE9mZnNldC5sZWZ0ICsgKGNoaWxkT2Zmc2V0LndpZHRoIC0gb3ZlcmxheVdpZHRoKSAvIDI7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSAndG9wJykge1xuICAgICAgcG9zaXRpb25Ub3AgPSBjaGlsZE9mZnNldC50b3AgLSBvdmVybGF5SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3NpdGlvblRvcCA9IGNoaWxkT2Zmc2V0LnRvcCArIGNoaWxkT2Zmc2V0LmhlaWdodDtcbiAgICB9XG5cbiAgICB2YXIgbGVmdERlbHRhID0gZ2V0TGVmdERlbHRhKHBvc2l0aW9uTGVmdCwgb3ZlcmxheVdpZHRoLCBjb250YWluZXIsIHBhZGRpbmcpO1xuXG4gICAgcG9zaXRpb25MZWZ0ICs9IGxlZnREZWx0YTtcbiAgICBhcnJvd09mZnNldExlZnQgPSA1MCAqICgxIC0gMiAqIGxlZnREZWx0YSAvIG92ZXJsYXlXaWR0aCkgKyAnJSc7XG4gICAgYXJyb3dPZmZzZXRUb3AgPSB2b2lkIDA7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxjT3ZlcmxheVBvc2l0aW9uKCk6IE5vIHN1Y2ggcGxhY2VtZW50IG9mIFwiJyArIHBsYWNlbWVudCArICdcIiBmb3VuZC4nKTtcbiAgfVxuXG4gIHJldHVybiB7IHBvc2l0aW9uTGVmdDogcG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcDogcG9zaXRpb25Ub3AsIGFycm93T2Zmc2V0TGVmdDogYXJyb3dPZmZzZXRMZWZ0LCBhcnJvd09mZnNldFRvcDogYXJyb3dPZmZzZXRUb3AgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBvc2l0aW9uO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vZmZzZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZnNldFwiKSk7XG5cbnZhciBfb2Zmc2V0UGFyZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vZmZzZXRQYXJlbnRcIikpO1xuXG52YXIgX3Njcm9sbFRvcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsVG9wXCIpKTtcblxudmFyIF9zY3JvbGxMZWZ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zY3JvbGxMZWZ0XCIpKTtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlXCIpKTtcblxuZnVuY3Rpb24gbm9kZU5hbWUobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlTmFtZSAmJiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUsIG9mZnNldFBhcmVudCkge1xuICB2YXIgcGFyZW50T2Zmc2V0ID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwXG4gIH0sXG4gICAgICBvZmZzZXQ7IC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG4gIC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXG4gIGlmICgoMCwgX3N0eWxlLmRlZmF1bHQpKG5vZGUsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgb2Zmc2V0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQgfHwgKDAsIF9vZmZzZXRQYXJlbnQuZGVmYXVsdCkobm9kZSk7XG4gICAgb2Zmc2V0ID0gKDAsIF9vZmZzZXQuZGVmYXVsdCkobm9kZSk7XG4gICAgaWYgKG5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdodG1sJykgcGFyZW50T2Zmc2V0ID0gKDAsIF9vZmZzZXQuZGVmYXVsdCkob2Zmc2V0UGFyZW50KTtcbiAgICBwYXJlbnRPZmZzZXQudG9wICs9IHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkob2Zmc2V0UGFyZW50LCAnYm9yZGVyVG9wV2lkdGgnKSwgMTApIC0gKDAsIF9zY3JvbGxUb3AuZGVmYXVsdCkob2Zmc2V0UGFyZW50KSB8fCAwO1xuICAgIHBhcmVudE9mZnNldC5sZWZ0ICs9IHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkob2Zmc2V0UGFyZW50LCAnYm9yZGVyTGVmdFdpZHRoJyksIDEwKSAtICgwLCBfc2Nyb2xsTGVmdC5kZWZhdWx0KShvZmZzZXRQYXJlbnQpIHx8IDA7XG4gIH0gLy8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIG5vZGUgbWFyZ2luc1xuXG5cbiAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG9mZnNldCwge1xuICAgIHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSAocGFyc2VJbnQoKDAsIF9zdHlsZS5kZWZhdWx0KShub2RlLCAnbWFyZ2luVG9wJyksIDEwKSB8fCAwKSxcbiAgICBsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0gKHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgJ21hcmdpbkxlZnQnKSwgMTApIHx8IDApXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBvZmZzZXRQYXJlbnQ7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX3N0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVcIikpO1xuXG5mdW5jdGlvbiBub2RlTmFtZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVOYW1lICYmIG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0UGFyZW50KG5vZGUpIHtcbiAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShub2RlKSxcbiAgICAgIG9mZnNldFBhcmVudCA9IG5vZGUgJiYgbm9kZS5vZmZzZXRQYXJlbnQ7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBub2RlTmFtZShub2RlKSAhPT0gJ2h0bWwnICYmICgwLCBfc3R5bGUuZGVmYXVsdCkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxpemU7XG52YXIgckh5cGhlbiA9IC8tKC4pL2c7XG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uockh5cGhlbiwgZnVuY3Rpb24gKF8sIGNocikge1xuICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuXG52YXIgX2h5cGhlbmF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaHlwaGVuYXRlXCIpKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzJhZWI4YTJhNmJlYjAwNjE3YTQyMTdmN2Y4Mjg0OTI0ZmEyYWQ4MTkvc3JjL3ZlbmRvci9jb3JlL2h5cGhlbmF0ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2h5cGhlbmF0ZS5kZWZhdWx0KShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlO1xudmFyIHJVcHBlciA9IC8oW0EtWl0pL2c7XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJVcHBlciwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2dldENvbXB1dGVkU3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBycG9zaXRpb24gPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XG52YXIgcm51bW5vbnB4ID0gL14oWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpKSg/IXB4KVthLXolXSskL2k7XG5cbmZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBFbGVtZW50IHBhc3NlZCB0byBgZ2V0Q29tcHV0ZWRTdHlsZSgpYCcpO1xuICB2YXIgZG9jID0gbm9kZS5vd25lckRvY3VtZW50O1xuICByZXR1cm4gJ2RlZmF1bHRWaWV3JyBpbiBkb2MgPyBkb2MuZGVmYXVsdFZpZXcub3BlbmVyID8gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKSA6IHtcbiAgICAvL2llIDggXCJtYWdpY1wiIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMS4xMS1zdGFibGUvc3JjL2Nzcy9jdXJDU1MuanMjTDcyXG4gICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShwcm9wKSB7XG4gICAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgICAgcHJvcCA9ICgwLCBfY2FtZWxpemVTdHlsZS5kZWZhdWx0KShwcm9wKTtcbiAgICAgIGlmIChwcm9wID09ICdmbG9hdCcpIHByb3AgPSAnc3R5bGVGbG9hdCc7XG4gICAgICB2YXIgY3VycmVudCA9IG5vZGUuY3VycmVudFN0eWxlW3Byb3BdIHx8IG51bGw7XG4gICAgICBpZiAoY3VycmVudCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlW3Byb3BdKSBjdXJyZW50ID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChybnVtbm9ucHgudGVzdChjdXJyZW50KSAmJiAhcnBvc2l0aW9uLnRlc3QocHJvcCkpIHtcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuICAgICAgICB2YXIgbGVmdCA9IHN0eWxlLmxlZnQ7XG4gICAgICAgIHZhciBydW5TdHlsZSA9IG5vZGUucnVudGltZVN0eWxlO1xuICAgICAgICB2YXIgcnNMZWZ0ID0gcnVuU3R5bGUgJiYgcnVuU3R5bGUubGVmdDsgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXG4gICAgICAgIGlmIChyc0xlZnQpIHJ1blN0eWxlLmxlZnQgPSBub2RlLmN1cnJlbnRTdHlsZS5sZWZ0O1xuICAgICAgICBzdHlsZS5sZWZ0ID0gcHJvcCA9PT0gJ2ZvbnRTaXplJyA/ICcxZW0nIDogY3VycmVudDtcbiAgICAgICAgY3VycmVudCA9IHN0eWxlLnBpeGVsTGVmdCArICdweCc7IC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblxuICAgICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICAgICAgaWYgKHJzTGVmdCkgcnVuU3R5bGUubGVmdCA9IHJzTGVmdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlU3R5bGU7XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlKG5vZGUsIGtleSkge1xuICByZXR1cm4gJ3JlbW92ZVByb3BlcnR5JyBpbiBub2RlLnN0eWxlID8gbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpIDogbm9kZS5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSBleHBvcnRzLnRyYW5zZm9ybSA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgdHJhbnNmb3JtID0gJ3RyYW5zZm9ybSc7XG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbnZhciBwcmVmaXgsIHRyYW5zaXRpb25FbmQsIGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kO1xuZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZDtcbnZhciB0cmFuc2l0aW9uUHJvcGVydHksIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblRpbWluZywgdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nO1xuZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG5leHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eTtcbnZhciBhbmltYXRpb25OYW1lLCBhbmltYXRpb25EdXJhdGlvbiwgYW5pbWF0aW9uVGltaW5nLCBhbmltYXRpb25EZWxheTtcbmV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheTtcbmV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nO1xuZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIHZhciBfZ2V0VHJhbnNpdGlvblByb3BlcnQgPSBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpO1xuXG4gIHByZWZpeCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5wcmVmaXg7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmQgPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQudHJhbnNpdGlvbkVuZDtcbiAgZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQgPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQuYW5pbWF0aW9uRW5kO1xuICBleHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybSA9IHByZWZpeCArIFwiLVwiICsgdHJhbnNmb3JtO1xuICBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tcHJvcGVydHlcIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24gPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLWR1cmF0aW9uXCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5ID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1kZWxheVwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cIjtcbiAgZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZSA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1uYW1lXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbiA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1kdXJhdGlvblwiO1xuICBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGFuaW1hdGlvblRpbWluZyA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1kZWxheVwiO1xuICBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXkgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCI7XG59XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gIGVuZDogdHJhbnNpdGlvbkVuZCxcbiAgcHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSxcbiAgdGltaW5nOiB0cmFuc2l0aW9uVGltaW5nLFxuICBkZWxheTogdHJhbnNpdGlvbkRlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCkge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgdmFyIHZlbmRvck1hcCA9IHtcbiAgICBPOiBmdW5jdGlvbiBPKGUpIHtcbiAgICAgIHJldHVybiBcIm9cIiArIGUudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICAgIE1vejogZnVuY3Rpb24gTW96KGUpIHtcbiAgICAgIHJldHVybiBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBXZWJraXQ6IGZ1bmN0aW9uIFdlYmtpdChlKSB7XG4gICAgICByZXR1cm4gXCJ3ZWJraXRcIiArIGU7XG4gICAgfSxcbiAgICBtczogZnVuY3Rpb24gbXMoZSkge1xuICAgICAgcmV0dXJuIFwiTVNcIiArIGU7XG4gICAgfVxuICB9O1xuICB2YXIgdmVuZG9ycyA9IE9iamVjdC5rZXlzKHZlbmRvck1hcCk7XG4gIHZhciB0cmFuc2l0aW9uRW5kLCBhbmltYXRpb25FbmQ7XG4gIHZhciBwcmVmaXggPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmVuZG9yID0gdmVuZG9yc1tpXTtcblxuICAgIGlmICh2ZW5kb3IgKyBcIlRyYW5zaXRpb25Qcm9wZXJ0eVwiIGluIHN0eWxlKSB7XG4gICAgICBwcmVmaXggPSBcIi1cIiArIHZlbmRvci50b0xvd2VyQ2FzZSgpO1xuICAgICAgdHJhbnNpdGlvbkVuZCA9IHZlbmRvck1hcFt2ZW5kb3JdKCdUcmFuc2l0aW9uRW5kJyk7XG4gICAgICBhbmltYXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnQW5pbWF0aW9uRW5kJyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXRyYW5zaXRpb25FbmQgJiYgJ3RyYW5zaXRpb25Qcm9wZXJ0eScgaW4gc3R5bGUpIHRyYW5zaXRpb25FbmQgPSAndHJhbnNpdGlvbmVuZCc7XG4gIGlmICghYW5pbWF0aW9uRW5kICYmICdhbmltYXRpb25OYW1lJyBpbiBzdHlsZSkgYW5pbWF0aW9uRW5kID0gJ2FuaW1hdGlvbmVuZCc7XG4gIHN0eWxlID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBhbmltYXRpb25FbmQ6IGFuaW1hdGlvbkVuZCxcbiAgICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLFxuICAgIHByZWZpeDogcHJlZml4XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1RyYW5zZm9ybTtcbnZhciBzdXBwb3J0ZWRUcmFuc2Zvcm1zID0gL14oKHRyYW5zbGF0ZXxyb3RhdGV8c2NhbGUpKFh8WXxafDNkKT98bWF0cml4KDNkKT98cGVyc3BlY3RpdmV8c2tldyhYfFkpPykkL2k7XG5cbmZ1bmN0aW9uIGlzVHJhbnNmb3JtKHByb3BlcnR5KSB7XG4gIHJldHVybiAhIShwcm9wZXJ0eSAmJiBzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3QocHJvcGVydHkpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzY3JvbGxUb3A7XG5cbnZhciBfaXNXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzV2luZG93XCIpKTtcblxuZnVuY3Rpb24gc2Nyb2xsVG9wKG5vZGUsIHZhbCkge1xuICB2YXIgd2luID0gKDAsIF9pc1dpbmRvdy5kZWZhdWx0KShub2RlKTtcbiAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gd2luID8gJ3BhZ2VYT2Zmc2V0JyBpbiB3aW4gPyB3aW4ucGFnZVhPZmZzZXQgOiB3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgOiBub2RlLnNjcm9sbExlZnQ7XG4gIGlmICh3aW4pIHdpbi5zY3JvbGxUbyh2YWwsICdwYWdlWU9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VZT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApO2Vsc2Ugbm9kZS5zY3JvbGxMZWZ0ID0gdmFsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jb250YWlucyA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zJyk7XG5cbnZhciBfY29udGFpbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udGFpbnMpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEV2ZW50TGlzdGVuZXInKTtcblxudmFyIF9hZGRFdmVudExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEV2ZW50TGlzdGVuZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBlc2NhcGVLZXlDb2RlID0gMjc7XG5cbmZ1bmN0aW9uIGlzTGVmdENsaWNrRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuLyoqXG4gKiBUaGUgYDxSb290Q2xvc2VXcmFwcGVyLz5gIGNvbXBvbmVudCByZWdpc3RlcnMgeW91ciBjYWxsYmFjayBvbiB0aGUgZG9jdW1lbnRcbiAqIHdoZW4gcmVuZGVyZWQuIFBvd2VycyB0aGUgYDxPdmVybGF5Lz5gIGNvbXBvbmVudC4gVGhpcyBpcyB1c2VkIGFjaGlldmUgbW9kYWxcbiAqIHN0eWxlIGJlaGF2aW9yIHdoZXJlIHlvdXIgY2FsbGJhY2sgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG9cbiAqIGludGVyYWN0IHdpdGggdGhlIHJlc3Qgb2YgdGhlIGRvY3VtZW50IG9yIGhpdHMgdGhlIGBlc2NgIGtleS5cbiAqL1xuXG52YXIgUm9vdENsb3NlV3JhcHBlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb290Q2xvc2VXcmFwcGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb290Q2xvc2VXcmFwcGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvb3RDbG9zZVdyYXBwZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBldmVudCA9IF90aGlzLnByb3BzLmV2ZW50O1xuXG4gICAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpcyk7XG5cbiAgICAgIC8vIFVzZSBjYXB0dXJlIGZvciB0aGlzIGxpc3RlbmVyIHNvIGl0IGZpcmVzIGJlZm9yZSBSZWFjdCdzIGxpc3RlbmVyLCB0b1xuICAgICAgLy8gYXZvaWQgZmFsc2UgcG9zaXRpdmVzIGluIHRoZSBjb250YWlucygpIGNoZWNrIGJlbG93IGlmIHRoZSB0YXJnZXQgRE9NXG4gICAgICAvLyBlbGVtZW50IGlzIHJlbW92ZWQgaW4gdGhlIFJlYWN0IG1vdXNlIGNhbGxiYWNrLlxuICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUNhcHR1cmVMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCBldmVudCwgX3RoaXMuaGFuZGxlTW91c2VDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUxpc3RlbmVyID0gKDAsIF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KShkb2MsIGV2ZW50LCBfdGhpcy5oYW5kbGVNb3VzZSk7XG5cbiAgICAgIF90aGlzLmRvY3VtZW50S2V5dXBMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCAna2V5dXAnLCBfdGhpcy5oYW5kbGVLZXlVcCk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIpIHtcbiAgICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUNhcHR1cmVMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmRvY3VtZW50TW91c2VMaXN0ZW5lcikge1xuICAgICAgICBfdGhpcy5kb2N1bWVudE1vdXNlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5kb2N1bWVudEtleXVwTGlzdGVuZXIpIHtcbiAgICAgICAgX3RoaXMuZG9jdW1lbnRLZXl1cExpc3RlbmVyLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZUNhcHR1cmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMucHJldmVudE1vdXNlUm9vdENsb3NlID0gaXNNb2RpZmllZEV2ZW50KGUpIHx8ICFpc0xlZnRDbGlja0V2ZW50KGUpIHx8ICgwLCBfY29udGFpbnMyLmRlZmF1bHQpKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcyksIGUudGFyZ2V0KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFfdGhpcy5wcmV2ZW50TW91c2VSb290Q2xvc2UgJiYgX3RoaXMucHJvcHMub25Sb290Q2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Sb290Q2xvc2UoZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IGVzY2FwZUtleUNvZGUgJiYgX3RoaXMucHJvcHMub25Sb290Q2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Sb290Q2xvc2UoZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSA9IGZhbHNlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9O1xuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgcHJldlByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmRpc2FibGVkICYmICFwcmV2UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIHJldHVybiBSb290Q2xvc2VXcmFwcGVyO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUm9vdENsb3NlV3JhcHBlci5kaXNwbGF5TmFtZSA9ICdSb290Q2xvc2VXcmFwcGVyJztcblxuUm9vdENsb3NlV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciBjbGljayBvciBtb3VzZWRvd24uIEFsc28gdHJpZ2dlcnMgd2hlbiB1c2VyIGhpdHMgYGVzY2AuXG4gICAqL1xuICBvblJvb3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2hpbGRyZW4gdG8gcmVuZGVyLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHRoZSBSb290Q2xvc2VXcmFwcGVyLCBwcmV2ZW50aW5nIGl0IGZyb20gdHJpZ2dlcmluZyBgb25Sb290Q2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENob29zZSB3aGljaCBkb2N1bWVudCBtb3VzZSBldmVudCB0byBiaW5kIHRvLlxuICAgKi9cbiAgZXZlbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydjbGljaycsICdtb3VzZWRvd24nXSlcbn07XG5cblJvb3RDbG9zZVdyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICBldmVudDogJ2NsaWNrJ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUm9vdENsb3NlV3JhcHBlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5FWElUSU5HID0gZXhwb3J0cy5FTlRFUkVEID0gZXhwb3J0cy5FTlRFUklORyA9IGV4cG9ydHMuRVhJVEVEID0gZXhwb3J0cy5VTk1PVU5URUQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0cy5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG52YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnRzLkVYSVRFRCA9IEVYSVRFRDtcbnZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnRzLkVOVEVSSU5HID0gRU5URVJJTkc7XG52YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydHMuRU5URVJFRCA9IEVOVEVSRUQ7XG52YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbmV4cG9ydHMuRVhJVElORyA9IEVYSVRJTkc7XG5cbnZhciBUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0LnRyYW5zaXRpb25Hcm91cDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IG51bGwgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcblxuICAgIH07XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwID8gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cC5pc01vdW50aW5nIDogbW91bnRpbmc7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKG5vZGUsIGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCwgYCd1bm1vdW50ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9uczpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9ezUwMH1cbiAgICogYGBgXG4gICAqXG4gICAqIG9yIGluZGl2aWR1YWxseTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGFwcGVhcjogNTAwLFxuICAgKiAgZW50ZXI6IDMwMCxcbiAgICogIGV4aXQ6IDUwMCxcbiAgICogfX1cbiAgICogYGBgXG4gICAqXG4gICAqIC0gYGFwcGVhcmAgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGBlbnRlcmBcbiAgICogLSBgZW50ZXJgIGRlZmF1bHRzIHRvIGAwYFxuICAgKiAtIGBleGl0YCBkZWZhdWx0cyB0byBgMGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIsIGFwcGVhcj86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdGltZW91dHNTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgYXBwZWFyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG59KS5pc1JlcXVpcmVkXSkgOiBudWxsO1xuZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdGltZW91dHNTaGFwZTtcbnZhciBjbGFzc05hbWVzU2hhcGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSksIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckRvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyQWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0RG9uZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdEFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSldKSA6IG51bGw7XG5leHBvcnRzLmNsYXNzTmFtZXNTaGFwZSA9IGNsYXNzTmFtZXNTaGFwZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1JlcXVpcmVkRm9yQTExeTtcbmZ1bmN0aW9uIGlzUmVxdWlyZWRGb3JBMTF5KHZhbGlkYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lU2FmZSArICdgIGlzIHJlcXVpcmVkIHRvIG1ha2UgJyArICgnYCcgKyBjb21wb25lbnROYW1lU2FmZSArICdgIGFjY2Vzc2libGUgZm9yIHVzZXJzIG9mIGFzc2lzdGl2ZSAnKSArICd0ZWNobm9sb2dpZXMgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy4nKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiA1ID8gX2xlbiAtIDUgOiAwKSwgX2tleSA9IDU7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDVdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lXS5jb25jYXQoYXJncykpO1xuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbi8vIFRPRE86IFRoaXMgbW9kdWxlIHNob3VsZCBiZSBFbGVtZW50Q2hpbGRyZW4sIGFuZCBzaG91bGQgdXNlIG5hbWVkIGV4cG9ydHMuXG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAsXG4gKiBidXQgb25seSBtYXBzIG92ZXIgY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogVGhlIG1hcEZ1bmN0aW9uIHByb3ZpZGVkIGluZGV4IHdpbGwgYmUgbm9ybWFsaXNlZCB0byB0aGUgY29tcG9uZW50cyBtYXBwZWQsXG4gKiBzbyBhbiBpbnZhbGlkIGNvbXBvbmVudCB3b3VsZCBub3QgaW5jcmVhc2UgdGhlIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmdW5jLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IENvbnRleHQgZm9yIGZ1bmMuXG4gKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBtYXAoY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKTtcbiAgfSk7XG59XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQgd2l0aCB0aGUgaW5kZXggcmVmbGVjdGluZyB0aGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMuXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgY29udGV4dC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZvckVhY2goY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcblxuICBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgaW5kZXgrKyk7XG4gIH0pO1xufVxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIFwidmFsaWQgY29tcG9uZW50c1wiIGluIHRoZSBDaGlsZHJlbiBjb250YWluZXIuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5cblxuZnVuY3Rpb24gY291bnQoY2hpbGRyZW4pIHtcbiAgdmFyIHJlc3VsdCA9IDA7XG5cbiAgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICArK3Jlc3VsdDtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogRmluZHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLFxuICogYnV0IG9ubHkgaXRlcmF0ZXMgb3ZlciBjaGlsZHJlbiB0aGF0IGFyZSBcInZhbGlkIGNvbXBvbmVudHNcIi5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZCB3aXRoIHRoZSBpbmRleCByZWZsZWN0aW5nIHRoZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBcInZhbGlkIGNvbXBvbmVudHNcIi5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZnVuYy5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBmdW5jLlxuICogQHJldHVybnMge2FycmF5fSBvZiBjaGlsZHJlbiB0aGF0IG1lZXQgdGhlIGZ1bmMgcmV0dXJuIHN0YXRlbWVudFxuICovXG5cblxuZnVuY3Rpb24gZmlsdGVyKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspKSB7XG4gICAgICByZXN1bHQucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaW5kKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQ7XG5cbiAgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgaW5kZXgrKykpIHtcbiAgICAgIHJlc3VsdCA9IGNoaWxkO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZXZlcnkoY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9IHRydWU7XG5cbiAgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzb21lKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSBmYWxzZTtcblxuICBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKSkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIG1hcDogbWFwLFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBjb3VudDogY291bnQsXG4gIGZpbmQ6IGZpbmQsXG4gIGZpbHRlcjogZmlsdGVyLFxuICBldmVyeTogZXZlcnksXG4gIHNvbWU6IHNvbWUsXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0dseXBoaWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR2x5cGhpY29uXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBic1JvbGU6ICdmZWVkYmFjaydcbn07XG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfZm9ybUdyb3VwOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59O1xuXG52YXIgRm9ybUNvbnRyb2xGZWVkYmFjayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Db250cm9sRmVlZGJhY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvcm1Db250cm9sRmVlZGJhY2soKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm1Db250cm9sRmVlZGJhY2sucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRHbHlwaCA9IGZ1bmN0aW9uIGdldEdseXBoKHZhbGlkYXRpb25TdGF0ZSkge1xuICAgIHN3aXRjaCAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgICAgcmV0dXJuICdvayc7XG5cbiAgICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgICByZXR1cm4gJ3dhcm5pbmctc2lnbic7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgcmV0dXJuICdyZW1vdmUnO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlckRlZmF1bHRGZWVkYmFjayA9IGZ1bmN0aW9uIHJlbmRlckRlZmF1bHRGZWVkYmFjayhmb3JtR3JvdXAsIGNsYXNzTmFtZSwgY2xhc3NlcywgZWxlbWVudFByb3BzKSB7XG4gICAgdmFyIGdseXBoID0gdGhpcy5nZXRHbHlwaChmb3JtR3JvdXAgJiYgZm9ybUdyb3VwLnZhbGlkYXRpb25TdGF0ZSk7XG5cbiAgICBpZiAoIWdseXBoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfR2x5cGhpY29uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgZ2x5cGg6IGdseXBoLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKTtcblxuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlZmF1bHRGZWVkYmFjayh0aGlzLmNvbnRleHQuJGJzX2Zvcm1Hcm91cCwgY2xhc3NOYW1lLCBjbGFzc2VzLCBlbGVtZW50UHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjaGlsZC5wcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sRmVlZGJhY2s7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkZvcm1Db250cm9sRmVlZGJhY2suZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuRm9ybUNvbnRyb2xGZWVkYmFjay5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2Zvcm0tY29udHJvbC1mZWVkYmFjaycsIEZvcm1Db250cm9sRmVlZGJhY2spO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBbiBpY29uIG5hbWUgd2l0aG91dCBcImdseXBoaWNvbi1cIiBwcmVmaXguIFNlZSBlLmcuIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2NvbXBvbmVudHMvI2dseXBoaWNvbnNcbiAgICovXG4gIGdseXBoOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWRcbn07XG5cbnZhciBHbHlwaGljb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShHbHlwaGljb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEdseXBoaWNvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gR2x5cGhpY29uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBnbHlwaCA9IF90aGlzJHByb3BzLmdseXBoLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiZ2x5cGhcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyWygwLCBfYm9vdHN0cmFwVXRpbHMucHJlZml4KShic1Byb3BzLCBnbHlwaCldID0gdHJ1ZSwgX2V4dGVuZHMyKSk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gR2x5cGhpY29uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5HbHlwaGljb24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdnbHlwaGljb24nLCBHbHlwaGljb24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBfZWxlbWVudFR5cGUuZGVmYXVsdFxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAncCdcbn07XG5cbnZhciBGb3JtQ29udHJvbFN0YXRpYyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Db250cm9sU3RhdGljLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ29udHJvbFN0YXRpYygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUNvbnRyb2xTdGF0aWMucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybUNvbnRyb2xTdGF0aWM7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkZvcm1Db250cm9sU3RhdGljLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkZvcm1Db250cm9sU3RhdGljLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnZm9ybS1jb250cm9sLXN0YXRpYycsIEZvcm1Db250cm9sU3RhdGljKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb25cIikpO1xuXG5leHBvcnRzLm9uID0gX29uLmRlZmF1bHQ7XG5cbnZhciBfb2ZmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vZmZcIikpO1xuXG5leHBvcnRzLm9mZiA9IF9vZmYuZGVmYXVsdDtcblxudmFyIF9maWx0ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2ZpbHRlclwiKSk7XG5cbmV4cG9ydHMuZmlsdGVyID0gX2ZpbHRlci5kZWZhdWx0O1xuXG52YXIgX2xpc3RlbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGlzdGVuXCIpKTtcblxuZXhwb3J0cy5saXN0ZW4gPSBfbGlzdGVuLmRlZmF1bHQ7XG52YXIgX2RlZmF1bHQgPSB7XG4gIG9uOiBfb24uZGVmYXVsdCxcbiAgb2ZmOiBfb2ZmLmRlZmF1bHQsXG4gIGZpbHRlcjogX2ZpbHRlci5kZWZhdWx0LFxuICBsaXN0ZW46IF9saXN0ZW4uZGVmYXVsdFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZpbHRlckV2ZW50cztcblxudmFyIF9jb250YWlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3F1ZXJ5L2NvbnRhaW5zXCIpKTtcblxudmFyIF9xdWVyeVNlbGVjdG9yQWxsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcXVlcnkvcXVlcnlTZWxlY3RvckFsbFwiKSk7XG5cbmZ1bmN0aW9uIGZpbHRlckV2ZW50cyhzZWxlY3RvciwgaGFuZGxlcikge1xuICByZXR1cm4gZnVuY3Rpb24gZmlsdGVySGFuZGxlcihlKSB7XG4gICAgdmFyIHRvcCA9IGUuY3VycmVudFRhcmdldCxcbiAgICAgICAgdGFyZ2V0ID0gZS50YXJnZXQsXG4gICAgICAgIG1hdGNoZXMgPSAoMCwgX3F1ZXJ5U2VsZWN0b3JBbGwuZGVmYXVsdCkodG9wLCBzZWxlY3Rvcik7XG4gICAgaWYgKG1hdGNoZXMuc29tZShmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiAoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKG1hdGNoLCB0YXJnZXQpO1xuICAgIH0pKSBoYW5kbGVyLmNhbGwodGhpcywgZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBxc2E7XG4vLyBaZXB0by5qc1xuLy8gKGMpIDIwMTAtMjAxNSBUaG9tYXMgRnVjaHNcbi8vIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIHNpbXBsZVNlbGVjdG9yUkUgPSAvXltcXHctXSokLztcbnZhciB0b0FycmF5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCwgW10uc2xpY2UpO1xuXG5mdW5jdGlvbiBxc2EoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgdmFyIG1heWJlSUQgPSBzZWxlY3RvclswXSA9PT0gJyMnLFxuICAgICAgbWF5YmVDbGFzcyA9IHNlbGVjdG9yWzBdID09PSAnLicsXG4gICAgICBuYW1lT25seSA9IG1heWJlSUQgfHwgbWF5YmVDbGFzcyA/IHNlbGVjdG9yLnNsaWNlKDEpIDogc2VsZWN0b3IsXG4gICAgICBpc1NpbXBsZSA9IHNpbXBsZVNlbGVjdG9yUkUudGVzdChuYW1lT25seSksXG4gICAgICBmb3VuZDtcblxuICBpZiAoaXNTaW1wbGUpIHtcbiAgICBpZiAobWF5YmVJRCkge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZ2V0RWxlbWVudEJ5SWQgPyBlbGVtZW50IDogZG9jdW1lbnQ7XG4gICAgICByZXR1cm4gKGZvdW5kID0gZWxlbWVudC5nZXRFbGVtZW50QnlJZChuYW1lT25seSkpID8gW2ZvdW5kXSA6IFtdO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgbWF5YmVDbGFzcykgcmV0dXJuIHRvQXJyYXkoZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG5hbWVPbmx5KSk7XG4gICAgcmV0dXJuIHRvQXJyYXkoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3RvcikpO1xuICB9XG5cbiAgcmV0dXJuIHRvQXJyYXkoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29uXCIpKTtcblxudmFyIF9vZmYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZlwiKSk7XG5cbnZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4oKSB7fTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAoMCwgX29uLmRlZmF1bHQpKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICgwLCBfb2ZmLmRlZmF1bHQpKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSk7XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gbGlzdGVuO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9hY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudCcpO1xuXG52YXIgX2FjdGl2ZUVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWN0aXZlRWxlbWVudCk7XG5cbnZhciBfY29udGFpbnMgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9jb250YWlucycpO1xuXG52YXIgX2NvbnRhaW5zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5zKTtcblxudmFyIF9pbkRPTSA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3V0aWwvaW5ET00nKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudCcpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpO1xuXG52YXIgX2RlcHJlY2F0ZWQgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9kZXByZWNhdGVkJyk7XG5cbnZhciBfZGVwcmVjYXRlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGVkKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJyk7XG5cbnZhciBfZWxlbWVudFR5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudFR5cGUpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX01vZGFsTWFuYWdlciA9IHJlcXVpcmUoJy4vTW9kYWxNYW5hZ2VyJyk7XG5cbnZhciBfTW9kYWxNYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01vZGFsTWFuYWdlcik7XG5cbnZhciBfUG9ydGFsID0gcmVxdWlyZSgnLi9Qb3J0YWwnKTtcblxudmFyIF9Qb3J0YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9ydGFsKTtcblxudmFyIF9SZWZIb2xkZXIgPSByZXF1aXJlKCcuL1JlZkhvbGRlcicpO1xuXG52YXIgX1JlZkhvbGRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWZIb2xkZXIpO1xuXG52YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEV2ZW50TGlzdGVuZXInKTtcblxudmFyIF9hZGRFdmVudExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEV2ZW50TGlzdGVuZXIpO1xuXG52YXIgX2FkZEZvY3VzTGlzdGVuZXIgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEZvY3VzTGlzdGVuZXInKTtcblxudmFyIF9hZGRGb2N1c0xpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEZvY3VzTGlzdGVuZXIpO1xuXG52YXIgX2dldENvbnRhaW5lciA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0Q29udGFpbmVyJyk7XG5cbnZhciBfZ2V0Q29udGFpbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbnRhaW5lcik7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJy4vdXRpbHMvb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuXG52YXIgbW9kYWxNYW5hZ2VyID0gbmV3IF9Nb2RhbE1hbmFnZXIyLmRlZmF1bHQoKTtcblxuLyoqXG4gKiBMb3ZlIHRoZW0gb3IgaGF0ZSB0aGVtLCBgPE1vZGFsLz5gIHByb3ZpZGVzIGEgc29saWQgZm91bmRhdGlvbiBmb3IgY3JlYXRpbmcgZGlhbG9ncywgbGlnaHRib3hlcywgb3Igd2hhdGV2ZXIgZWxzZS5cbiAqIFRoZSBNb2RhbCBjb21wb25lbnQgcmVuZGVycyBpdHMgYGNoaWxkcmVuYCBub2RlIGluIGZyb250IG9mIGEgYmFja2Ryb3AgY29tcG9uZW50LlxuICpcbiAqIFRoZSBNb2RhbCBvZmZlcnMgYSBmZXcgaGVscGZ1bCBmZWF0dXJlcyBvdmVyIHVzaW5nIGp1c3QgYSBgPFBvcnRhbC8+YCBjb21wb25lbnQgYW5kIHNvbWUgc3R5bGVzOlxuICpcbiAqIC0gTWFuYWdlcyBkaWFsb2cgc3RhY2tpbmcgd2hlbiBvbmUtYXQtYS10aW1lIGp1c3QgaXNuJ3QgZW5vdWdoLlxuICogLSBDcmVhdGVzIGEgYmFja2Ryb3AsIGZvciBkaXNhYmxpbmcgaW50ZXJhY3Rpb24gYmVsb3cgdGhlIG1vZGFsLlxuICogLSBJdCBwcm9wZXJseSBtYW5hZ2VzIGZvY3VzOyBtb3ZpbmcgdG8gdGhlIG1vZGFsIGNvbnRlbnQsIGFuZCBrZWVwaW5nIGl0IHRoZXJlIHVudGlsIHRoZSBtb2RhbCBpcyBjbG9zZWQuXG4gKiAtIEl0IGRpc2FibGVzIHNjcm9sbGluZyBvZiB0aGUgcGFnZSBjb250ZW50IHdoaWxlIG9wZW4uXG4gKiAtIEFkZHMgdGhlIGFwcHJvcHJpYXRlIEFSSUEgcm9sZXMgYXJlIGF1dG9tYXRpY2FsbHkuXG4gKiAtIEVhc2lseSBwbHVnZ2FibGUgYW5pbWF0aW9ucyB2aWEgYSBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50LlxuICpcbiAqIE5vdGUgdGhhdCwgaW4gdGhlIHNhbWUgd2F5IHRoZSBiYWNrZHJvcCBlbGVtZW50IHByZXZlbnRzIHVzZXJzIGZyb20gY2xpY2tpbmcgb3IgaW50ZXJhY3RpbmdcbiAqIHdpdGggdGhlIHBhZ2UgY29udGVudCB1bmRlcm5lYXRoIHRoZSBNb2RhbCwgU2NyZWVuIHJlYWRlcnMgYWxzbyBuZWVkIHRvIGJlIHNpZ25hbGVkIHRvIG5vdCB0b1xuICogaW50ZXJhY3Qgd2l0aCBwYWdlIGNvbnRlbnQgd2hpbGUgdGhlIE1vZGFsIGlzIG9wZW4uIFRvIGRvIHRoaXMsIHdlIHVzZSBhIGNvbW1vbiB0ZWNobmlxdWUgb2YgYXBwbHlpbmdcbiAqIHRoZSBgYXJpYS1oaWRkZW49J3RydWUnYCBhdHRyaWJ1dGUgdG8gdGhlIG5vbi1Nb2RhbCBlbGVtZW50cyBpbiB0aGUgTW9kYWwgYGNvbnRhaW5lcmAuIFRoaXMgbWVhbnMgdGhhdCBmb3JcbiAqIGEgTW9kYWwgdG8gYmUgdHJ1bHkgbW9kYWwsIGl0IHNob3VsZCBoYXZlIGEgYGNvbnRhaW5lcmAgdGhhdCBpcyBfb3V0c2lkZV8geW91ciBhcHAnc1xuICogUmVhY3QgaGllcmFyY2h5IChzdWNoIGFzIHRoZSBkZWZhdWx0OiBkb2N1bWVudC5ib2R5KS5cbiAqL1xuXG52YXIgTW9kYWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9taXRQcm9wcyA9IGZ1bmN0aW9uIG9taXRQcm9wcyhwcm9wcywgcHJvcFR5cGVzKSB7XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgICB2YXIgbmV3UHJvcHMgPSB7fTtcbiAgICBrZXlzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcFR5cGVzLCBwcm9wKSkge1xuICAgICAgICBuZXdQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld1Byb3BzO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNob3cgPSBfcHJvcHMuc2hvdyxcbiAgICAgICAgY29udGFpbmVyID0gX3Byb3BzLmNvbnRhaW5lcixcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIFRyYW5zaXRpb24gPSBfcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgYmFja2Ryb3AgPSBfcHJvcHMuYmFja2Ryb3AsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICBvbkV4aXQgPSBfcHJvcHMub25FeGl0LFxuICAgICAgICBvbkV4aXRpbmcgPSBfcHJvcHMub25FeGl0aW5nLFxuICAgICAgICBvbkVudGVyID0gX3Byb3BzLm9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmcgPSBfcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkID0gX3Byb3BzLm9uRW50ZXJlZDtcblxuXG4gICAgdmFyIGRpYWxvZyA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICB2YXIgZmlsdGVyZWRQcm9wcyA9IHRoaXMub21pdFByb3BzKHRoaXMucHJvcHMsIE1vZGFsLnByb3BUeXBlcyk7XG5cbiAgICB2YXIgbW91bnRNb2RhbCA9IHNob3cgfHwgVHJhbnNpdGlvbiAmJiAhdGhpcy5zdGF0ZS5leGl0ZWQ7XG4gICAgaWYgKCFtb3VudE1vZGFsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX2RpYWxvZyRwcm9wcyA9IGRpYWxvZy5wcm9wcyxcbiAgICAgICAgcm9sZSA9IF9kaWFsb2ckcHJvcHMucm9sZSxcbiAgICAgICAgdGFiSW5kZXggPSBfZGlhbG9nJHByb3BzLnRhYkluZGV4O1xuXG5cbiAgICBpZiAocm9sZSA9PT0gdW5kZWZpbmVkIHx8IHRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRpYWxvZyA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShkaWFsb2csIHtcbiAgICAgICAgcm9sZTogcm9sZSA9PT0gdW5kZWZpbmVkID8gJ2RvY3VtZW50JyA6IHJvbGUsXG4gICAgICAgIHRhYkluZGV4OiB0YWJJbmRleCA9PSBudWxsID8gJy0xJyA6IHRhYkluZGV4XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgZGlhbG9nID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRyYW5zaXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZSxcbiAgICAgICAgICAnaW4nOiBzaG93LFxuICAgICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgICAgIG9uRXhpdGVkOiB0aGlzLmhhbmRsZUhpZGRlbixcbiAgICAgICAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgICAgICAgIG9uRW50ZXJpbmc6IG9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWRcbiAgICAgICAgfSxcbiAgICAgICAgZGlhbG9nXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIF9Qb3J0YWwyLmRlZmF1bHQsXG4gICAgICB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRNb3VudE5vZGUsXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICBvblJlbmRlcmVkOiB0aGlzLm9uUG9ydGFsUmVuZGVyZWRcbiAgICAgIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICByZWY6IHRoaXMuc2V0TW9kYWxOb2RlUmVmLFxuICAgICAgICAgIHJvbGU6IHJvbGUgfHwgJ2RpYWxvZydcbiAgICAgICAgfSwgZmlsdGVyZWRQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgICB9KSxcbiAgICAgICAgYmFja2Ryb3AgJiYgdGhpcy5yZW5kZXJCYWNrZHJvcCgpLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfUmVmSG9sZGVyMi5kZWZhdWx0LFxuICAgICAgICAgIHsgcmVmOiB0aGlzLnNldERpYWxvZ1JlZiB9LFxuICAgICAgICAgIGRpYWxvZ1xuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBleGl0ZWQ6IGZhbHNlIH0pO1xuICAgIH0gZWxzZSBpZiAoIW5leHRQcm9wcy50cmFuc2l0aW9uKSB7XG4gICAgICAvLyBPdGhlcndpc2UgbGV0IGhhbmRsZUhpZGRlbiB0YWtlIGNhcmUgb2YgbWFya2luZyBleGl0ZWQuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXhpdGVkOiB0cnVlIH0pO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuc2hvdyAmJiBuZXh0UHJvcHMuc2hvdykge1xuICAgICAgdGhpcy5jaGVja0ZvckZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdykge1xuICAgICAgdGhpcy5vblNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IHRoaXMucHJvcHMudHJhbnNpdGlvbjtcblxuXG4gICAgaWYgKHByZXZQcm9wcy5zaG93ICYmICF0aGlzLnByb3BzLnNob3cgJiYgIXRyYW5zaXRpb24pIHtcbiAgICAgIC8vIE90aGVyd2lzZSBoYW5kbGVIaWRkZW4gd2lsbCBjYWxsIHRoaXMuXG4gICAgICB0aGlzLm9uSGlkZSgpO1xuICAgIH0gZWxzZSBpZiAoIXByZXZQcm9wcy5zaG93ICYmIHRoaXMucHJvcHMuc2hvdykge1xuICAgICAgdGhpcy5vblNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBzaG93ID0gX3Byb3BzMi5zaG93LFxuICAgICAgICB0cmFuc2l0aW9uID0gX3Byb3BzMi50cmFuc2l0aW9uO1xuXG5cbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcblxuICAgIGlmIChzaG93IHx8IHRyYW5zaXRpb24gJiYgIXRoaXMuc3RhdGUuZXhpdGVkKSB7XG4gICAgICB0aGlzLm9uSGlkZSgpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuYXV0b0ZvY3VzID0gZnVuY3Rpb24gYXV0b0ZvY3VzKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGlhbG9nRWxlbWVudCA9IHRoaXMuZ2V0RGlhbG9nRWxlbWVudCgpO1xuICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9ICgwLCBfYWN0aXZlRWxlbWVudDIuZGVmYXVsdCkoKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KSh0aGlzKSk7XG5cbiAgICBpZiAoZGlhbG9nRWxlbWVudCAmJiAhKDAsIF9jb250YWluczIuZGVmYXVsdCkoZGlhbG9nRWxlbWVudCwgY3VycmVudEFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICB0aGlzLmxhc3RGb2N1cyA9IGN1cnJlbnRBY3RpdmVFbGVtZW50O1xuXG4gICAgICBpZiAoIWRpYWxvZ0VsZW1lbnQuaGFzQXR0cmlidXRlKCd0YWJJbmRleCcpKSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdUaGUgbW9kYWwgY29udGVudCBub2RlIGRvZXMgbm90IGFjY2VwdCBmb2N1cy4gRm9yIHRoZSBiZW5lZml0IG9mICcgKyAnYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgdGhlIHRhYkluZGV4IG9mIHRoZSBub2RlIGlzIGJlaW5nIHNldCAnICsgJ3RvIFwiLTFcIi4nKTtcblxuICAgICAgICBkaWFsb2dFbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIGRpYWxvZ0VsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc3RvcmVMYXN0Rm9jdXMgPSBmdW5jdGlvbiByZXN0b3JlTGFzdEZvY3VzKCkge1xuICAgIC8vIFN1cHBvcnQ6IDw9SUUxMSBkb2Vzbid0IHN1cHBvcnQgYGZvY3VzKClgIG9uIHN2ZyBlbGVtZW50cyAoUkI6ICM5MTcpXG4gICAgaWYgKHRoaXMubGFzdEZvY3VzICYmIHRoaXMubGFzdEZvY3VzLmZvY3VzKSB7XG4gICAgICB0aGlzLmxhc3RGb2N1cy5mb2N1cygpO1xuICAgICAgdGhpcy5sYXN0Rm9jdXMgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuZ2V0RGlhbG9nRWxlbWVudCA9IGZ1bmN0aW9uIGdldERpYWxvZ0VsZW1lbnQoKSB7XG4gICAgcmV0dXJuIF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLmRpYWxvZyk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmlzVG9wTW9kYWwgPSBmdW5jdGlvbiBpc1RvcE1vZGFsKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm1hbmFnZXIuaXNUb3BNb2RhbCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWw7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Nb2RhbC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgX1BvcnRhbDIuZGVmYXVsdC5wcm9wVHlwZXMsIHtcblxuICAvKipcbiAgICogU2V0IHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBNb2RhbFxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIE5vZGUsIENvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIE1vZGFsIGlzIGFwcGVuZGVkIHRvIGl0J3MgY29udGFpbmVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEZvciB0aGUgc2FrZSBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCB0aGUgY29udGFpbmVyIHNob3VsZCB1c3VhbGx5IGJlIHRoZSBkb2N1bWVudCBib2R5LCBzbyB0aGF0IHRoZSByZXN0IG9mIHRoZVxuICAgKiBwYWdlIGNvbnRlbnQgY2FuIGJlIHBsYWNlZCBiZWhpbmQgYSB2aXJ0dWFsIGJhY2tkcm9wIGFzIHdlbGwgYXMgYSB2aXN1YWwgb25lLlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTW9kYWwgaXMgb3BlbmluZy5cbiAgICovXG4gIG9uU2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gZWl0aGVyIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLCBvciB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLlxuICAgKlxuICAgKiBUaGUgYG9uSGlkZWAgY2FsbGJhY2sgb25seSBzaWduYWxzIGludGVudCBmcm9tIHRoZSBNb2RhbCxcbiAgICogeW91IG11c3QgYWN0dWFsbHkgc2V0IHRoZSBgc2hvd2AgcHJvcCB0byBgZmFsc2VgIGZvciB0aGUgTW9kYWwgdG8gY2xvc2UuXG4gICAqL1xuICBvbkhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSW5jbHVkZSBhIGJhY2tkcm9wIGNvbXBvbmVudC5cbiAgICovXG4gIGJhY2tkcm9wOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnc3RhdGljJ10pXSksXG5cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgYmFja2Ryb3AgY29tcG9uZW50LiBVc2VmdWwgZm9yIGN1c3RvbVxuICAgKiBiYWNrZHJvcCByZW5kZXJpbmcuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICByZW5kZXJCYWNrZHJvcD17cHJvcHMgPT4gPE15QmFja2Ryb3Agey4uLnByb3BzfSAvPn1cbiAgICogYGBgXG4gICAqL1xuICByZW5kZXJCYWNrZHJvcDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGVzY2FwZSBrZXksIGlmIHNwZWNpZmllZCBpbiBga2V5Ym9hcmRgLCBpcyBwcmVzc2VkLlxuICAgKi9cbiAgb25Fc2NhcGVLZXlEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFN1cHBvcnQgZm9yIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBvbkVzY2FwZUtleURvd25gIGluc3RlYWRcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBlc2NhcGUga2V5LCBpZiBzcGVjaWZpZWQgaW4gYGtleWJvYXJkYCwgaXMgcHJlc3NlZC5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIG9uRXNjYXBlS2V5VXA6ICgwLCBfZGVwcmVjYXRlZDIuZGVmYXVsdCkoX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLCAnUGxlYXNlIHVzZSBvbkVzY2FwZUtleURvd24gaW5zdGVhZCBmb3IgY29uc2lzdGVuY3knKSxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCwgaWYgc3BlY2lmaWVkLCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgc3R5bGUgb2JqZWN0IGZvciB0aGUgYmFja2Ryb3AgY29tcG9uZW50LlxuICAgKi9cbiAgYmFja2Ryb3BTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgY3NzIGNsYXNzIG9yIGNsYXNzZXMgZm9yIHRoZSBiYWNrZHJvcCBjb21wb25lbnQuXG4gICAqL1xuICBiYWNrZHJvcENsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEEgY3NzIGNsYXNzIG9yIHNldCBvZiBjbGFzc2VzIGFwcGxpZWQgdG8gdGhlIG1vZGFsIGNvbnRhaW5lciB3aGVuIHRoZSBtb2RhbCBpcyBvcGVuLFxuICAgKiBhbmQgcmVtb3ZlZCB3aGVuIGl0IGlzIGNsb3NlZC5cbiAgICovXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENsb3NlIHRoZSBtb2RhbCB3aGVuIGVzY2FwZSBrZXkgaXMgcHJlc3NlZFxuICAgKi9cbiAga2V5Ym9hcmQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudCB1c2VkXG4gICAqIHRvIGNvbnRyb2wgYW5pbWF0aW9ucyBmb3IgdGhlIGRpYWxvZyBjb21wb25lbnQuXG4gICAqL1xuICB0cmFuc2l0aW9uOiBfZWxlbWVudFR5cGUyLmRlZmF1bHQsXG5cbiAgLyoqXG4gICAqIEEgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBAMi4wLjBgIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQgdXNlZFxuICAgKiB0byBjb250cm9sIGFuaW1hdGlvbnMgZm9yIHRoZSBiYWNrZHJvcCBjb21wb25lbnRzLlxuICAgKi9cbiAgYmFja2Ryb3BUcmFuc2l0aW9uOiBfZWxlbWVudFR5cGUyLmRlZmF1bHQsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy4gVGhpcyBhbHNvXG4gICAqIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBNb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBhdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYGZhbHNlYCBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIE1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYGZhbHNlYCBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBlbmZvcmNlRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlblxuICAgKi9cbiAgcmVzdG9yZUZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE1vZGFsIGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBNb2RhbCBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIGluXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgcmlnaHQgYmVmb3JlIHRoZSBNb2RhbCB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgb3V0XG4gICAqL1xuICBvbkV4aXRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIE1vZGFsTWFuYWdlciBpbnN0YW5jZSB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW5cbiAgICogTW9kYWxzLiBVc2VmdWwgd2hlbiBjdXN0b21pemluZyBob3cgbW9kYWxzIGludGVyYWN0IHdpdGhpbiBhIGNvbnRhaW5lclxuICAgKi9cbiAgbWFuYWdlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufSk7XG5Nb2RhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIHNob3c6IGZhbHNlLFxuICBiYWNrZHJvcDogdHJ1ZSxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIGF1dG9Gb2N1czogdHJ1ZSxcbiAgZW5mb3JjZUZvY3VzOiB0cnVlLFxuICByZXN0b3JlRm9jdXM6IHRydWUsXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKCkge30sXG4gIG1hbmFnZXI6IG1vZGFsTWFuYWdlcixcbiAgcmVuZGVyQmFja2Ryb3A6IGZ1bmN0aW9uIHJlbmRlckJhY2tkcm9wKHByb3BzKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBwcm9wcyk7XG4gIH1cbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgdGhpcy5zdGF0ZSA9IHsgZXhpdGVkOiAhdGhpcy5wcm9wcy5zaG93IH07XG5cbiAgdGhpcy5yZW5kZXJCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzMyA9IF90aGlzMi5wcm9wcyxcbiAgICAgICAgYmFja2Ryb3BTdHlsZSA9IF9wcm9wczMuYmFja2Ryb3BTdHlsZSxcbiAgICAgICAgYmFja2Ryb3BDbGFzc05hbWUgPSBfcHJvcHMzLmJhY2tkcm9wQ2xhc3NOYW1lLFxuICAgICAgICByZW5kZXJCYWNrZHJvcCA9IF9wcm9wczMucmVuZGVyQmFja2Ryb3AsXG4gICAgICAgIFRyYW5zaXRpb24gPSBfcHJvcHMzLmJhY2tkcm9wVHJhbnNpdGlvbjtcblxuXG4gICAgdmFyIGJhY2tkcm9wUmVmID0gZnVuY3Rpb24gYmFja2Ryb3BSZWYocmVmKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmJhY2tkcm9wID0gcmVmO1xuICAgIH07XG5cbiAgICB2YXIgYmFja2Ryb3AgPSByZW5kZXJCYWNrZHJvcCh7XG4gICAgICByZWY6IGJhY2tkcm9wUmVmLFxuICAgICAgc3R5bGU6IGJhY2tkcm9wU3R5bGUsXG4gICAgICBjbGFzc05hbWU6IGJhY2tkcm9wQ2xhc3NOYW1lLFxuICAgICAgb25DbGljazogX3RoaXMyLmhhbmRsZUJhY2tkcm9wQ2xpY2tcbiAgICB9KTtcblxuICAgIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgICBiYWNrZHJvcCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBUcmFuc2l0aW9uLFxuICAgICAgICB7XG4gICAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICAgICdpbic6IF90aGlzMi5wcm9wcy5zaG93XG4gICAgICAgIH0sXG4gICAgICAgIGJhY2tkcm9wXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBiYWNrZHJvcDtcbiAgfTtcblxuICB0aGlzLm9uUG9ydGFsUmVuZGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMyLmF1dG9Gb2N1cygpO1xuXG4gICAgaWYgKF90aGlzMi5wcm9wcy5vblNob3cpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vblNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vblNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoX3RoaXMyKTtcbiAgICB2YXIgY29udGFpbmVyID0gKDAsIF9nZXRDb250YWluZXIyLmRlZmF1bHQpKF90aGlzMi5wcm9wcy5jb250YWluZXIsIGRvYy5ib2R5KTtcblxuICAgIF90aGlzMi5wcm9wcy5tYW5hZ2VyLmFkZChfdGhpczIsIGNvbnRhaW5lciwgX3RoaXMyLnByb3BzLmNvbnRhaW5lckNsYXNzTmFtZSk7XG5cbiAgICBfdGhpczIuX29uRG9jdW1lbnRLZXlkb3duTGlzdGVuZXIgPSAoMCwgX2FkZEV2ZW50TGlzdGVuZXIyLmRlZmF1bHQpKGRvYywgJ2tleWRvd24nLCBfdGhpczIuaGFuZGxlRG9jdW1lbnRLZXlEb3duKTtcblxuICAgIF90aGlzMi5fb25Eb2N1bWVudEtleXVwTGlzdGVuZXIgPSAoMCwgX2FkZEV2ZW50TGlzdGVuZXIyLmRlZmF1bHQpKGRvYywgJ2tleXVwJywgX3RoaXMyLmhhbmRsZURvY3VtZW50S2V5VXApO1xuXG4gICAgX3RoaXMyLl9vbkZvY3VzaW5MaXN0ZW5lciA9ICgwLCBfYWRkRm9jdXNMaXN0ZW5lcjIuZGVmYXVsdCkoX3RoaXMyLmVuZm9yY2VGb2N1cyk7XG4gIH07XG5cbiAgdGhpcy5vbkhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMyLnByb3BzLm1hbmFnZXIucmVtb3ZlKF90aGlzMik7XG5cbiAgICBfdGhpczIuX29uRG9jdW1lbnRLZXlkb3duTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBfdGhpczIuX29uRG9jdW1lbnRLZXl1cExpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgX3RoaXMyLl9vbkZvY3VzaW5MaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIGlmIChfdGhpczIucHJvcHMucmVzdG9yZUZvY3VzKSB7XG4gICAgICBfdGhpczIucmVzdG9yZUxhc3RGb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnNldE1vdW50Tm9kZSA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICBfdGhpczIubW91bnROb2RlID0gcmVmID8gcmVmLmdldE1vdW50Tm9kZSgpIDogcmVmO1xuICB9O1xuXG4gIHRoaXMuc2V0TW9kYWxOb2RlUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgIF90aGlzMi5tb2RhbE5vZGUgPSByZWY7XG4gIH07XG5cbiAgdGhpcy5zZXREaWFsb2dSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgX3RoaXMyLmRpYWxvZyA9IHJlZjtcbiAgfTtcblxuICB0aGlzLmhhbmRsZUhpZGRlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIuc2V0U3RhdGUoeyBleGl0ZWQ6IHRydWUgfSk7XG4gICAgX3RoaXMyLm9uSGlkZSgpO1xuXG4gICAgaWYgKF90aGlzMi5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgdmFyIF9wcm9wczQ7XG5cbiAgICAgIChfcHJvcHM0ID0gX3RoaXMyLnByb3BzKS5vbkV4aXRlZC5hcHBseShfcHJvcHM0LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF90aGlzMi5wcm9wcy5vbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkJhY2tkcm9wQ2xpY2soZSk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzMi5wcm9wcy5iYWNrZHJvcCA9PT0gdHJ1ZSkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uSGlkZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmhhbmRsZURvY3VtZW50S2V5RG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKF90aGlzMi5wcm9wcy5rZXlib2FyZCAmJiBlLmtleUNvZGUgPT09IDI3ICYmIF90aGlzMi5pc1RvcE1vZGFsKCkpIHtcbiAgICAgIGlmIChfdGhpczIucHJvcHMub25Fc2NhcGVLZXlEb3duKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVzY2FwZUtleURvd24oZSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5wcm9wcy5vbkhpZGUoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVEb2N1bWVudEtleVVwID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoX3RoaXMyLnByb3BzLmtleWJvYXJkICYmIGUua2V5Q29kZSA9PT0gMjcgJiYgX3RoaXMyLmlzVG9wTW9kYWwoKSkge1xuICAgICAgaWYgKF90aGlzMi5wcm9wcy5vbkVzY2FwZUtleVVwKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVzY2FwZUtleVVwKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLmNoZWNrRm9yRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF9pbkRPTTIuZGVmYXVsdCkge1xuICAgICAgX3RoaXMyLmxhc3RGb2N1cyA9ICgwLCBfYWN0aXZlRWxlbWVudDIuZGVmYXVsdCkoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhpczIucHJvcHMuZW5mb3JjZUZvY3VzIHx8ICFfdGhpczIuX2lzTW91bnRlZCB8fCAhX3RoaXMyLmlzVG9wTW9kYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkaWFsb2dFbGVtZW50ID0gX3RoaXMyLmdldERpYWxvZ0VsZW1lbnQoKTtcbiAgICB2YXIgY3VycmVudEFjdGl2ZUVsZW1lbnQgPSAoMCwgX2FjdGl2ZUVsZW1lbnQyLmRlZmF1bHQpKCgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoX3RoaXMyKSk7XG5cbiAgICBpZiAoZGlhbG9nRWxlbWVudCAmJiAhKDAsIF9jb250YWluczIuZGVmYXVsdCkoZGlhbG9nRWxlbWVudCwgY3VycmVudEFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICBkaWFsb2dFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9O1xufTtcblxuTW9kYWwuTWFuYWdlciA9IF9Nb2RhbE1hbmFnZXIyLmRlZmF1bHQ7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1vZGFsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZlRWxlbWVudDtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vd25lckRvY3VtZW50XCIpKTtcblxuZnVuY3Rpb24gYWN0aXZlRWxlbWVudChkb2MpIHtcbiAgaWYgKGRvYyA9PT0gdm9pZCAwKSB7XG4gICAgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKCk7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8qIGllIHRocm93cyBpZiBubyBhY3RpdmUgZWxlbWVudCAqL1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVwcmVjYXRlZDtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB3YXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlZCh2YWxpZGF0b3IsIHJlYXNvbikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9IG51bGwpIHtcbiAgICAgIHZhciBtZXNzYWdlS2V5ID0gY29tcG9uZW50TmFtZSArICcuJyArIHByb3BOYW1lO1xuXG4gICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHdhcm5lZFttZXNzYWdlS2V5XSwgJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lU2FmZSArICdgIG9mICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZVNhZmUgKyAnYCBpcyBkZXByZWNhdGVkLiAnICsgcmVhc29uICsgJy4nKSk7XG5cbiAgICAgIHdhcm5lZFttZXNzYWdlS2V5XSA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gNSA/IF9sZW4gLSA1IDogMCksIF9rZXkgPSA1OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSA1XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yLmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmZ1bmN0aW9uIF9yZXNldFdhcm5lZCgpIHtcbiAgd2FybmVkID0ge307XG59XG5cbmRlcHJlY2F0ZWQuX3Jlc2V0V2FybmVkID0gX3Jlc2V0V2FybmVkO1xuLyogZXNsaW50LWVuYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAxID8gbGVuIC0gMSA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDE7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMV0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2NsYXNzID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvY2xhc3MnKTtcblxudmFyIF9jbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzcyk7XG5cbnZhciBfc3R5bGUgPSByZXF1aXJlKCdkb20taGVscGVycy9zdHlsZScpO1xuXG52YXIgX3N0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlKTtcblxudmFyIF9zY3JvbGxiYXJTaXplID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplJyk7XG5cbnZhciBfc2Nyb2xsYmFyU2l6ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zY3JvbGxiYXJTaXplKTtcblxudmFyIF9pc092ZXJmbG93aW5nID0gcmVxdWlyZSgnLi91dGlscy9pc092ZXJmbG93aW5nJyk7XG5cbnZhciBfaXNPdmVyZmxvd2luZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc092ZXJmbG93aW5nKTtcblxudmFyIF9tYW5hZ2VBcmlhSGlkZGVuID0gcmVxdWlyZSgnLi91dGlscy9tYW5hZ2VBcmlhSGlkZGVuJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIGZpbmRJbmRleE9mKGFyciwgY2IpIHtcbiAgdmFyIGlkeCA9IC0xO1xuICBhcnIuc29tZShmdW5jdGlvbiAoZCwgaSkge1xuICAgIGlmIChjYihkLCBpKSkge1xuICAgICAgaWR4ID0gaTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpZHg7XG59XG5cbmZ1bmN0aW9uIGZpbmRDb250YWluZXIoZGF0YSwgbW9kYWwpIHtcbiAgcmV0dXJuIGZpbmRJbmRleE9mKGRhdGEsIGZ1bmN0aW9uIChkKSB7XG4gICAgcmV0dXJuIGQubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldENvbnRhaW5lclN0eWxlKHN0YXRlLCBjb250YWluZXIpIHtcbiAgdmFyIHN0eWxlID0geyBvdmVyZmxvdzogJ2hpZGRlbicgfTtcblxuICAvLyB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIHRoZSBhY3R1YWwgYHN0eWxlYCBoZXJlXG4gIC8vIGJlY2FzdWUgd2Ugd2lsbCBvdmVycmlkZSBpdFxuICBzdGF0ZS5zdHlsZSA9IHtcbiAgICBvdmVyZmxvdzogY29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgIHBhZGRpbmdSaWdodDogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodFxuICB9O1xuXG4gIGlmIChzdGF0ZS5vdmVyZmxvd2luZykge1xuICAgIC8vIHVzZSBjb21wdXRlZCBzdHlsZSwgaGVyZSB0byBnZXQgdGhlIHJlYWwgcGFkZGluZ1xuICAgIC8vIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoXG4gICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQoKDAsIF9zdHlsZTIuZGVmYXVsdCkoY29udGFpbmVyLCAncGFkZGluZ1JpZ2h0JykgfHwgMCwgMTApICsgKDAsIF9zY3JvbGxiYXJTaXplMi5kZWZhdWx0KSgpICsgJ3B4JztcbiAgfVxuXG4gICgwLCBfc3R5bGUyLmRlZmF1bHQpKGNvbnRhaW5lciwgc3R5bGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShfcmVmLCBjb250YWluZXIpIHtcbiAgdmFyIHN0eWxlID0gX3JlZi5zdHlsZTtcblxuXG4gIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLnN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xuICB9KTtcbn1cbi8qKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICpcbiAqIEBpbnRlcm5hbCBVc2VkIGJ5IHRoZSBNb2RhbCB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmcgb2YgY29udGFpbmVycy5cbiAqL1xuXG52YXIgTW9kYWxNYW5hZ2VyID0gZnVuY3Rpb24gTW9kYWxNYW5hZ2VyKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmMiRoaWRlU2libGluZ05vZGUgPSBfcmVmMi5oaWRlU2libGluZ05vZGVzLFxuICAgICAgaGlkZVNpYmxpbmdOb2RlcyA9IF9yZWYyJGhpZGVTaWJsaW5nTm9kZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJGhpZGVTaWJsaW5nTm9kZSxcbiAgICAgIF9yZWYyJGhhbmRsZUNvbnRhaW5lciA9IF9yZWYyLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93LFxuICAgICAgaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cgPSBfcmVmMiRoYW5kbGVDb250YWluZXIgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRoYW5kbGVDb250YWluZXI7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsTWFuYWdlcik7XG5cbiAgdGhpcy5hZGQgPSBmdW5jdGlvbiAobW9kYWwsIGNvbnRhaW5lciwgY2xhc3NOYW1lKSB7XG4gICAgdmFyIG1vZGFsSWR4ID0gX3RoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuICAgIHZhciBjb250YWluZXJJZHggPSBfdGhpcy5jb250YWluZXJzLmluZGV4T2YoY29udGFpbmVyKTtcblxuICAgIGlmIChtb2RhbElkeCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICB9XG5cbiAgICBtb2RhbElkeCA9IF90aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgX3RoaXMubW9kYWxzLnB1c2gobW9kYWwpO1xuXG4gICAgaWYgKF90aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5oaWRlU2libGluZ3MpKGNvbnRhaW5lciwgbW9kYWwubW91bnROb2RlKTtcbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVySWR4ICE9PSAtMSkge1xuICAgICAgX3RoaXMuZGF0YVtjb250YWluZXJJZHhdLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgIC8vcmlnaHQgbm93IG9ubHkgdGhlIGZpcnN0IG1vZGFsIG9mIGEgY29udGFpbmVyIHdpbGwgaGF2ZSBpdHMgY2xhc3NlcyBhcHBsaWVkXG4gICAgICBjbGFzc2VzOiBjbGFzc05hbWUgPyBjbGFzc05hbWUuc3BsaXQoL1xccysvKSA6IFtdLFxuXG4gICAgICBvdmVyZmxvd2luZzogKDAsIF9pc092ZXJmbG93aW5nMi5kZWZhdWx0KShjb250YWluZXIpXG4gICAgfTtcblxuICAgIGlmIChfdGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdykge1xuICAgICAgc2V0Q29udGFpbmVyU3R5bGUoZGF0YSwgY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBkYXRhLmNsYXNzZXMuZm9yRWFjaChfY2xhc3MyLmRlZmF1bHQuYWRkQ2xhc3MuYmluZChudWxsLCBjb250YWluZXIpKTtcblxuICAgIF90aGlzLmNvbnRhaW5lcnMucHVzaChjb250YWluZXIpO1xuICAgIF90aGlzLmRhdGEucHVzaChkYXRhKTtcblxuICAgIHJldHVybiBtb2RhbElkeDtcbiAgfTtcblxuICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChtb2RhbCkge1xuICAgIHZhciBtb2RhbElkeCA9IF90aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgIGlmIChtb2RhbElkeCA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29udGFpbmVySWR4ID0gZmluZENvbnRhaW5lcihfdGhpcy5kYXRhLCBtb2RhbCk7XG4gICAgdmFyIGRhdGEgPSBfdGhpcy5kYXRhW2NvbnRhaW5lcklkeF07XG4gICAgdmFyIGNvbnRhaW5lciA9IF90aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySWR4XTtcblxuICAgIGRhdGEubW9kYWxzLnNwbGljZShkYXRhLm1vZGFscy5pbmRleE9mKG1vZGFsKSwgMSk7XG5cbiAgICBfdGhpcy5tb2RhbHMuc3BsaWNlKG1vZGFsSWR4LCAxKTtcblxuICAgIC8vIGlmIHRoYXQgd2FzIHRoZSBsYXN0IG1vZGFsIGluIGEgY29udGFpbmVyLFxuICAgIC8vIGNsZWFuIHVwIHRoZSBjb250YWluZXJcbiAgICBpZiAoZGF0YS5tb2RhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhLmNsYXNzZXMuZm9yRWFjaChfY2xhc3MyLmRlZmF1bHQucmVtb3ZlQ2xhc3MuYmluZChudWxsLCBjb250YWluZXIpKTtcblxuICAgICAgaWYgKF90aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93KSB7XG4gICAgICAgIHJlbW92ZUNvbnRhaW5lclN0eWxlKGRhdGEsIGNvbnRhaW5lcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5zaG93U2libGluZ3MpKGNvbnRhaW5lciwgbW9kYWwubW91bnROb2RlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLmNvbnRhaW5lcnMuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgICBfdGhpcy5kYXRhLnNwbGljZShjb250YWluZXJJZHgsIDEpO1xuICAgIH0gZWxzZSBpZiAoX3RoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgLy9vdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgU1JcbiAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5hcmlhSGlkZGVuKShmYWxzZSwgZGF0YS5tb2RhbHNbZGF0YS5tb2RhbHMubGVuZ3RoIC0gMV0ubW91bnROb2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5pc1RvcE1vZGFsID0gZnVuY3Rpb24gKG1vZGFsKSB7XG4gICAgcmV0dXJuICEhX3RoaXMubW9kYWxzLmxlbmd0aCAmJiBfdGhpcy5tb2RhbHNbX3RoaXMubW9kYWxzLmxlbmd0aCAtIDFdID09PSBtb2RhbDtcbiAgfTtcblxuICB0aGlzLmhpZGVTaWJsaW5nTm9kZXMgPSBoaWRlU2libGluZ05vZGVzO1xuICB0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93ID0gaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3c7XG4gIHRoaXMubW9kYWxzID0gW107XG4gIHRoaXMuY29udGFpbmVycyA9IFtdO1xuICB0aGlzLmRhdGEgPSBbXTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1vZGFsTWFuYWdlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9hZGRDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYWRkQ2xhc3NcIikpO1xuXG5leHBvcnRzLmFkZENsYXNzID0gX2FkZENsYXNzLmRlZmF1bHQ7XG5cbnZhciBfcmVtb3ZlQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbW92ZUNsYXNzXCIpKTtcblxuZXhwb3J0cy5yZW1vdmVDbGFzcyA9IF9yZW1vdmVDbGFzcy5kZWZhdWx0O1xuXG52YXIgX2hhc0NsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9oYXNDbGFzc1wiKSk7XG5cbmV4cG9ydHMuaGFzQ2xhc3MgPSBfaGFzQ2xhc3MuZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgYWRkQ2xhc3M6IF9hZGRDbGFzcy5kZWZhdWx0LFxuICByZW1vdmVDbGFzczogX3JlbW92ZUNsYXNzLmRlZmF1bHQsXG4gIGhhc0NsYXNzOiBfaGFzQ2xhc3MuZGVmYXVsdFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZENsYXNzO1xuXG52YXIgX2hhc0NsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9oYXNDbGFzc1wiKSk7XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO2Vsc2UgaWYgKCEoMCwgX2hhc0NsYXNzLmRlZmF1bHQpKGVsZW1lbnQsIGNsYXNzTmFtZSkpIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO2Vsc2UgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycpICsgJyAnICsgY2xhc3NOYW1lKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHJlcGxhY2VDbGFzc05hbWUob3JpZ0NsYXNzLCBjbGFzc1RvUmVtb3ZlKSB7XG4gIHJldHVybiBvcmlnQ2xhc3MucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgY2xhc3NUb1JlbW92ZSArICcoPzpcXFxcc3wkKScsICdnJyksICckMScpLnJlcGxhY2UoL1xccysvZywgJyAnKS5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7ZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lLCBjbGFzc05hbWUpO2Vsc2UgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnLCBjbGFzc05hbWUpKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5hcmlhSGlkZGVuID0gYXJpYUhpZGRlbjtcbmV4cG9ydHMuaGlkZVNpYmxpbmdzID0gaGlkZVNpYmxpbmdzO1xuZXhwb3J0cy5zaG93U2libGluZ3MgPSBzaG93U2libGluZ3M7XG5cbnZhciBCTEFDS0xJU1QgPSBbJ3RlbXBsYXRlJywgJ3NjcmlwdCcsICdzdHlsZSddO1xuXG52YXIgaXNIaWRhYmxlID0gZnVuY3Rpb24gaXNIaWRhYmxlKF9yZWYpIHtcbiAgdmFyIG5vZGVUeXBlID0gX3JlZi5ub2RlVHlwZSxcbiAgICAgIHRhZ05hbWUgPSBfcmVmLnRhZ05hbWU7XG4gIHJldHVybiBub2RlVHlwZSA9PT0gMSAmJiBCTEFDS0xJU1QuaW5kZXhPZih0YWdOYW1lLnRvTG93ZXJDYXNlKCkpID09PSAtMTtcbn07XG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnQsIGNiKSB7XG4gIG1vdW50ID0gW10uY29uY2F0KG1vdW50KTtcblxuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChtb3VudC5pbmRleE9mKG5vZGUpID09PSAtMSAmJiBpc0hpZGFibGUobm9kZSkpIHtcbiAgICAgIGNiKG5vZGUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBhcmlhSGlkZGVuKHNob3csIG5vZGUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzaG93KSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoaWRlU2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUpIHtcbiAgc2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGFyaWFIaWRkZW4odHJ1ZSwgbm9kZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzaG93U2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUpIHtcbiAgc2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGFyaWFIaWRkZW4oZmFsc2UsIG5vZGUpO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZVxufTtcblxuLyoqXG4gKiBJbnRlcm5hbCBoZWxwZXIgY29tcG9uZW50IHRvIGFsbG93IGF0dGFjaGluZyBhIG5vbi1jb25mbGljdGluZyByZWYgdG8gYVxuICogY2hpbGQgZWxlbWVudCB0aGF0IG1heSBub3QgYWNjZXB0IHJlZnMuXG4gKi9cblxudmFyIFJlZkhvbGRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWZIb2xkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZkhvbGRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVmSG9sZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVmSG9sZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH07XG5cbiAgcmV0dXJuIFJlZkhvbGRlcjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblJlZkhvbGRlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJlZkhvbGRlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZEZvY3VzTGlzdGVuZXI7XG4vKipcbiAqIEZpcmVmb3ggZG9lc24ndCBoYXZlIGEgZm9jdXNpbiBldmVudCBzbyB1c2luZyBjYXB0dXJlIGlzIGVhc2llc3Qgd2F5IHRvIGdldCBidWJibGluZ1xuICogSUU4IGNhbid0IGRvIGFkZEV2ZW50TGlzdGVuZXIsIGJ1dCBkb2VzIGhhdmUgb25mb2N1c2luLCBzbyB3ZSB1c2UgdGhhdCBpbiBpZThcbiAqXG4gKiBXZSBvbmx5IGFsbG93IG9uZSBMaXN0ZW5lciBhdCBhIHRpbWUgdG8gYXZvaWQgc3RhY2sgb3ZlcmZsb3dzXG4gKi9cbmZ1bmN0aW9uIGFkZEZvY3VzTGlzdGVuZXIoaGFuZGxlcikge1xuICB2YXIgdXNlRm9jdXNpbiA9ICFkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyO1xuICB2YXIgcmVtb3ZlID0gdm9pZCAwO1xuXG4gIGlmICh1c2VGb2N1c2luKSB7XG4gICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29uZm9jdXNpbicsIGhhbmRsZXIpO1xuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5kZXRhY2hFdmVudCgnb25mb2N1c2luJywgaGFuZGxlcik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZXIsIHRydWUpO1xuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZXIsIHRydWUpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4geyByZW1vdmU6IHJlbW92ZSB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX2Jvb3RzdHJhcFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBfZWxlbWVudFR5cGUuZGVmYXVsdFxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIE1vZGFsQm9keSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1vZGFsQm9keSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxCb2R5KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbEJvZHkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRDbGFzc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxCb2R5O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Nb2RhbEJvZHkucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTW9kYWxCb2R5LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnbW9kYWwtYm9keScsIE1vZGFsQm9keSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIF9TdHlsZUNvbmZpZyA9IHJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSBjc3MgY2xhc3MgdG8gYXBwbHkgdG8gdGhlIE1vZGFsIGRpYWxvZyBET00gbm9kZS5cbiAgICovXG4gIGRpYWxvZ0NsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufTtcblxudmFyIE1vZGFsRGlhbG9nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTW9kYWxEaWFsb2csIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsRGlhbG9nKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbERpYWxvZy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGlhbG9nQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuZGlhbG9nQ2xhc3NOYW1lLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uTW91c2VEb3duRGlhbG9nID0gX3RoaXMkcHJvcHMub25Nb3VzZURvd25EaWFsb2csXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiZGlhbG9nQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJjaGlsZHJlblwiLCBcIm9uTW91c2VEb3duRGlhbG9nXCJdKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gKDAsIF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgYnNDbGFzc05hbWUgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcyk7XG4gICAgdmFyIG1vZGFsU3R5bGUgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LCBzdHlsZSk7XG4gICAgdmFyIGRpYWxvZ0NsYXNzZXMgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbYnNDbGFzc05hbWVdID0gZmFsc2UsIF9leHRlbmRzMlsoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ2RpYWxvZycpXSA9IHRydWUsIF9leHRlbmRzMikpO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgdGFiSW5kZXg6IFwiLTFcIixcbiAgICAgIHJvbGU6IFwiZGlhbG9nXCIsXG4gICAgICBzdHlsZTogbW9kYWxTdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgYnNDbGFzc05hbWUpXG4gICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoZGlhbG9nQ2xhc3NOYW1lLCBkaWFsb2dDbGFzc2VzKSxcbiAgICAgIG9uTW91c2VEb3duOiBvbk1vdXNlRG93bkRpYWxvZ1xuICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYnNQcm9wcywgJ2NvbnRlbnQnKSxcbiAgICAgIHJvbGU6IFwiZG9jdW1lbnRcIlxuICAgIH0sIGNoaWxkcmVuKSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbERpYWxvZztcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTW9kYWxEaWFsb2cucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdtb2RhbCcsICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNTaXplcykoW19TdHlsZUNvbmZpZy5TaXplLkxBUkdFLCBfU3R5bGVDb25maWcuU2l6ZS5TTUFMTF0sIE1vZGFsRGlhbG9nKSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IF9lbGVtZW50VHlwZS5kZWZhdWx0XG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnXG59O1xuXG52YXIgTW9kYWxGb290ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNb2RhbEZvb3RlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxGb290ZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsRm9vdGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsRm9vdGVyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Nb2RhbEZvb3Rlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Nb2RhbEZvb3Rlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ21vZGFsLWZvb3RlcicsIE1vZGFsRm9vdGVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKTtcblxudmFyIF9DbG9zZUJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xvc2VCdXR0b25cIikpO1xuXG4vLyBUT0RPOiBgYXJpYS1sYWJlbGAgc2hvdWxkIGJlIGBjbG9zZUxhYmVsYC5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBQcm92aWRlcyBhbiBhY2Nlc3NpYmxlIGxhYmVsIGZvciB0aGUgY2xvc2VcbiAgICogYnV0dG9uLiBJdCBpcyB1c2VkIGZvciBBc3Npc3RpdmUgVGVjaG5vbG9neSB3aGVuIHRoZSBsYWJlbCB0ZXh0IGlzIG5vdFxuICAgKiByZWFkYWJsZS5cbiAgICovXG4gIGNsb3NlTGFiZWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgQ29tcG9uZW50IHNob3VsZCBjb250YWluIGEgY2xvc2UgYnV0dG9uXG4gICAqL1xuICBjbG9zZUJ1dHRvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY2xvc2UgYnV0dG9uIGlzIGNsaWNrZWQuIElmIHVzZWQgZGlyZWN0bHkgaW5zaWRlXG4gICAqIGEgTW9kYWwgY29tcG9uZW50LCB0aGUgb25IaWRlIHdpbGwgYXV0b21hdGljYWxseSBiZSBwcm9wYWdhdGVkIHVwIHRvIHRoZVxuICAgKiBwYXJlbnQgTW9kYWwgYG9uSGlkZWAuXG4gICAqL1xuICBvbkhpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY2xvc2VMYWJlbDogJ0Nsb3NlJyxcbiAgY2xvc2VCdXR0b246IGZhbHNlXG59O1xudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX21vZGFsOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIG9uSGlkZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbiAgfSlcbn07XG5cbnZhciBNb2RhbEhlYWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1vZGFsSGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEhlYWRlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxIZWFkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xvc2VMYWJlbCA9IF90aGlzJHByb3BzLmNsb3NlTGFiZWwsXG4gICAgICAgIGNsb3NlQnV0dG9uID0gX3RoaXMkcHJvcHMuY2xvc2VCdXR0b24sXG4gICAgICAgIG9uSGlkZSA9IF90aGlzJHByb3BzLm9uSGlkZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNsb3NlTGFiZWxcIiwgXCJjbG9zZUJ1dHRvblwiLCBcIm9uSGlkZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICB2YXIgbW9kYWwgPSB0aGlzLmNvbnRleHQuJGJzX21vZGFsO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSksIGNsb3NlQnV0dG9uICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQnV0dG9uLmRlZmF1bHQsIHtcbiAgICAgIGxhYmVsOiBjbG9zZUxhYmVsLFxuICAgICAgb25DbGljazogKDAsIF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkobW9kYWwgJiYgbW9kYWwub25IaWRlLCBvbkhpZGUpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxIZWFkZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsSGVhZGVyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1vZGFsSGVhZGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbk1vZGFsSGVhZGVyLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9ib290c3RyYXBVdGlscy5ic0NsYXNzKSgnbW9kYWwtaGVhZGVyJywgTW9kYWxIZWFkZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbGFiZWw6ICdDbG9zZSdcbn07XG5cbnZhciBDbG9zZUJ1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKENsb3NlQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDbG9zZUJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2xvc2VCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIGNsYXNzTmFtZTogXCJjbG9zZVwiLFxuICAgICAgb25DbGljazogb25DbGlja1xuICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgICB9LCBcIlxceEQ3XCIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gICAgfSwgbGFiZWwpKTtcbiAgfTtcblxuICByZXR1cm4gQ2xvc2VCdXR0b247XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNsb3NlQnV0dG9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNsb3NlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBfZGVmYXVsdCA9IENsb3NlQnV0dG9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogX2VsZW1lbnRUeXBlLmRlZmF1bHRcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2g0J1xufTtcblxudmFyIE1vZGFsVGl0bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNb2RhbFRpdGxlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbFRpdGxlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbFRpdGxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50Q2xhc3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gKDAsIF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYnNQcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsVGl0bGU7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsVGl0bGUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTW9kYWxUaXRsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ21vZGFsLXRpdGxlJywgTW9kYWxUaXRsZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNwbGl0Q29tcG9uZW50UHJvcHM7XG5cbnZhciBfZW50cmllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZW50cmllc1wiKSk7XG5cbmZ1bmN0aW9uIHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIENvbXBvbmVudCkge1xuICB2YXIgY29tcG9uZW50UHJvcFR5cGVzID0gQ29tcG9uZW50LnByb3BUeXBlcztcbiAgdmFyIHBhcmVudFByb3BzID0ge307XG4gIHZhciBjaGlsZFByb3BzID0ge307XG4gICgwLCBfZW50cmllcy5kZWZhdWx0KShwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwcm9wTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgIHByb3BWYWx1ZSA9IF9yZWZbMV07XG5cbiAgICBpZiAoY29tcG9uZW50UHJvcFR5cGVzW3Byb3BOYW1lXSkge1xuICAgICAgcGFyZW50UHJvcHNbcHJvcE5hbWVdID0gcHJvcFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZFByb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW3BhcmVudFByb3BzLCBjaGlsZFByb3BzXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfYm9vdHN0cmFwVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKTtcblxudmFyIElucHV0R3JvdXBBZGRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKElucHV0R3JvdXBBZGRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXRHcm91cEFkZG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbnB1dEdyb3VwQWRkb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBJbnB1dEdyb3VwQWRkb247XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoJ2lucHV0LWdyb3VwLWFkZG9uJywgSW5wdXRHcm91cEFkZG9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9ib290c3RyYXBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpO1xuXG52YXIgSW5wdXRHcm91cEJ1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKElucHV0R3JvdXBCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElucHV0R3JvdXBCdXR0b24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IElucHV0R3JvdXBCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9ICgwLCBfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShic1Byb3BzKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBJbnB1dEdyb3VwQnV0dG9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKCdpbnB1dC1ncm91cC1idG4nLCBJbnB1dEdyb3VwQnV0dG9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdChlKXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiZGVmYXVsdFwiaW4gZT9lLmRlZmF1bHQ6ZX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgUmVhY3Q9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7ZnVuY3Rpb24gQXBwQ29udGFpbmVyKGUpe3JldHVybiBBcHBDb250YWluZXIud2FybkFib3V0SE1SRGlzYWJsZWQmJihBcHBDb250YWluZXIud2FybkFib3V0SE1SRGlzYWJsZWQ9ITAsY29uc29sZS5lcnJvcihcIlJlYWN0LUhvdC1Mb2FkZXI6IG1pc2NvbmZpZ3VyYXRpb24gZGV0ZWN0ZWQsIHVzaW5nIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBub24tcHJvZHVjdGlvbiBlbnZpcm9ubWVudC5cIiksY29uc29sZS5lcnJvcihcIlJlYWN0LUhvdC1Mb2FkZXI6IEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgaXMgbm90IGVuYWJsZWQuXCIpKSxSZWFjdC5DaGlsZHJlbi5vbmx5KGUuY2hpbGRyZW4pfUFwcENvbnRhaW5lci53YXJuQWJvdXRITVJEaXNhYmxlZD0hMTt2YXIgaG90PWZ1bmN0aW9uIGUoKXtyZXR1cm4gZS5zaG91bGRXcmFwV2l0aEFwcENvbnRhaW5lcj9mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwQ29udGFpbmVyLG51bGwsUmVhY3QuY3JlYXRlRWxlbWVudChlLG4pKX19OmZ1bmN0aW9uKGUpe3JldHVybiBlfX07aG90LnNob3VsZFdyYXBXaXRoQXBwQ29udGFpbmVyPSExO3ZhciBhcmVDb21wb25lbnRzRXF1YWw9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZT09PW59LHNldENvbmZpZz1mdW5jdGlvbigpe30sY29sZD1mdW5jdGlvbihlKXtyZXR1cm4gZX0sY29uZmlndXJlQ29tcG9uZW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLkFwcENvbnRhaW5lcj1BcHBDb250YWluZXIsZXhwb3J0cy5ob3Q9aG90LGV4cG9ydHMuYXJlQ29tcG9uZW50c0VxdWFsPWFyZUNvbXBvbmVudHNFcXVhbCxleHBvcnRzLnNldENvbmZpZz1zZXRDb25maWcsZXhwb3J0cy5jb2xkPWNvbGQsZXhwb3J0cy5jb25maWd1cmVDb21wb25lbnQ9Y29uZmlndXJlQ29tcG9uZW50O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==